Instead of doing (starts at line 67 of js/index.js):

options.server.get(`${publicPath}/*`, (req, res, next) => {
    const file = req.params['*'];
    fs.readFile(path.resolve(swaggerUiPath, file), (err, content) => {
        if (err) {
            return next(new errors.NotFoundError(`File ${file} does not exist`));
        }
        if (file === 'index.html') {
            const isReqSecure = options.forceSecure || req.isSecure();
            const jsonFileUrl = `${isReqSecure ? 'https' : 'http'}://${req.headers.host}${publicPath}/swagger.json`;
            let localContent = content.toString().replace('url: "https://petstore.swagger.io/v2/swagger.json"', `url: "${jsonFileUrl}"`);
            if (options.validatorUrl === null || typeof options.validatorUrl === 'string') {
                localContent = addSwaggerUiConfig(localContent, 'validatorUrl', options.validatorUrl);
            }
            if (Array.isArray(options.supportedSubmitMethods)) {
                localContent = addSwaggerUiConfig(localContent, 'supportedSubmitMethods', options.supportedSubmitMethods);
            }
            content = Buffer.from(localContent);
        }
        const contentType = mime.lookup(file);
        if (contentType !== false) {
            res.setHeader('Content-Type', contentType);
        }
        res.write(content);
        res.end();
        return next();
    });
});

Do:

options.server.get(`${publicPath}/*`, (req, res, next) => {
    const file = req.params['*'];
    const filePath = path.resolve(swaggerUiPath, file);                           // CHANGE   
    if (filePath.indexOf(swaggerUiPath) !== 0) {                                  // CHANGE 
        return next(new errors.NotFoundError(`File Outside Of Boundaries!`));     // CHANGE
    }                                                                             // CHANGE
    fs.readFile(filePath, (err, content) => {                                     // CHANGE
        if (err) {
            return next(new errors.NotFoundError(`File ${file} does not exist`));
        }
        if (file === 'index.html') {
            const isReqSecure = options.forceSecure || req.isSecure();
            const jsonFileUrl = `${isReqSecure ? 'https' : 'http'}://${req.headers.host}${publicPath}/swagger.json`;
            let localContent = content.toString().replace('url: "https://petstore.swagger.io/v2/swagger.json"', `url: "${jsonFileUrl}"`);
            if (options.validatorUrl === null || typeof options.validatorUrl === 'string') {
                localContent = addSwaggerUiConfig(localContent, 'validatorUrl', options.validatorUrl);
            }
            if (Array.isArray(options.supportedSubmitMethods)) {
                localContent = addSwaggerUiConfig(localContent, 'supportedSubmitMethods', options.supportedSubmitMethods);
            }
            content = Buffer.from(localContent);
        }
        const contentType = mime.lookup(file);
        if (contentType !== false) {
            res.setHeader('Content-Type', contentType);
        }
        res.write(content);
        res.end();
        return next();
    });
});
