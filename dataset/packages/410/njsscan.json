{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 1,
          "line": 1
        },
        "extra": {
          "line": "./results-*",
          "message": "Lexical error: WIERD end of file in regexp"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 19,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) 2010 Benjamin Schmaus",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 24,
          "line": 19
        },
        "extra": {
          "line": "\tchmod +x ./nodeload.js",
          "message": "Lexical error: end of file in comment"
        },
        "path": "/src/Makefile",
        "start": {
          "col": 24,
          "line": 19
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 18,
          "line": 2
        },
        "extra": {
          "line": "    - Update test spec on real data",
          "message": "Syntax error"
        },
        "path": "/src/TODO",
        "start": {
          "col": 14,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/console/js/console.data.js",
          "match_lines": [
            55,
            55
          ],
          "match_position": [
            22,
            33
          ],
          "match_string": "            rnd[i] = Math.random() * x[i];"
        },
        {
          "file_path": "/src/lib/stats.js",
          "match_lines": [
            486,
            486
          ],
          "match_position": [
            33,
            44
          ],
          "match_string": "        s += '\\\\' + (Math.floor(Math.random() * 95) + 32).toString(8); // ascii chars between 32 and 126"
        },
        {
          "file_path": "/src/lib/stats.js",
          "match_lines": [
            496,
            496
          ],
          "match_position": [
            18,
            29
          ],
          "match_string": "        z0 = 2 * Math.random() - 1;"
        },
        {
          "file_path": "/src/lib/stats.js",
          "match_lines": [
            497,
            497
          ],
          "match_position": [
            18,
            29
          ],
          "match_string": "        z1 = 2 * Math.random() - 1;"
        },
        {
          "file_path": "/src/lib/stats.js",
          "match_lines": [
            505,
            505
          ],
          "match_position": [
            54,
            65
          ],
          "match_string": "    var l = 1, h = Math.pow(1+max-min, shape), rnd = Math.random();"
        },
        {
          "file_path": "/src/lib/stats.js",
          "match_lines": [
            506,
            506
          ],
          "match_position": [
            31,
            42
          ],
          "match_string": "    while (rnd === 0) { rnd = Math.random(); }"
        },
        {
          "file_path": "/src/nodeload.js",
          "match_lines": [
            41,
            41
          ],
          "match_position": [
            307,
            318
          ],
          "match_string": "targetGroup[statName].merge(sourceStats);}};var roundRobin=stats.roundRobin=function(list){var r=list.slice();r.rridx=-1;r.get=function(){r.rridx=(r.rridx+1)%r.length;return r[r.rridx];};return r;};var randomString=stats.randomString=function(length){var s=\"\";for(var i=0;i<length;i++){s+='\\\\'+(Math.floor(Math.random()*95)+32).toString(8);}"
        },
        {
          "file_path": "/src/nodeload.js",
          "match_lines": [
            42,
            42
          ],
          "match_position": [
            152,
            163
          ],
          "match_string": "return eval(\"'\"+s+\"'\");};var nextGaussian=stats.nextGaussian=function(mean,stddev){mean=mean||0;stddev=stddev||1;var s=0,z0,z1;while(s===0||s>=1){z0=2*Math.random()-1;z1=2*Math.random()-1;s=z0*z0+z1*z1;}"
        },
        {
          "file_path": "/src/nodeload.js",
          "match_lines": [
            42,
            42
          ],
          "match_position": [
            173,
            184
          ],
          "match_string": "return eval(\"'\"+s+\"'\");};var nextGaussian=stats.nextGaussian=function(mean,stddev){mean=mean||0;stddev=stddev||1;var s=0,z0,z1;while(s===0||s>=1){z0=2*Math.random()-1;z1=2*Math.random()-1;s=z0*z0+z1*z1;}"
        },
        {
          "file_path": "/src/nodeload.js",
          "match_lines": [
            43,
            43
          ],
          "match_position": [
            166,
            177
          ],
          "match_string": "return z0*Math.sqrt(-2*Math.log(s)/s)*stddev+mean;};var nextPareto=stats.nextPareto=function(min,max,shape){shape=shape||0.1;var l=1,h=Math.pow(1+max-min,shape),rnd=Math.random();while(rnd===0){rnd=Math.random();}"
        },
        {
          "file_path": "/src/nodeload.js",
          "match_lines": [
            43,
            43
          ],
          "match_position": [
            199,
            210
          ],
          "match_string": "return z0*Math.sqrt(-2*Math.log(s)/s)*stddev+mean;};var nextPareto=stats.nextPareto=function(min,max,shape){shape=shape||0.1;var l=1,h=Math.pow(1+max-min,shape),rnd=Math.random();while(rnd===0){rnd=Math.random();}"
        },
        {
          "file_path": "/src/test/monitoring.test.js",
          "match_lines": [
            31,
            31
          ],
          "match_position": [
            59,
            70
          ],
          "match_string": "                var ctx = m.start(), runtime = Math.floor(Math.random() * 100);"
        },
        {
          "file_path": "/src/test/monitoring.test.js",
          "match_lines": [
            114,
            114
          ],
          "match_position": [
            73,
            84
          ],
          "match_string": "                setTimeout(function() { self.emit('end'); }, Math.floor(Math.random() * 100));"
        },
        {
          "file_path": "/src/test/monitoring.test.js",
          "match_lines": [
            183,
            183
          ],
          "match_position": [
            59,
            70
          ],
          "match_string": "                var ctx = m.start(), runtime = Math.floor(Math.random() * 10);"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/lib/reporting/template.js",
          "match_lines": [
            18,
            18
          ],
          "match_position": [
            14,
            35
          ],
          "match_string": "        if (!/[\\t\\r\\n% ]/.test(str)) {"
        },
        {
          "file_path": "/src/nodeload.js",
          "match_lines": [
            98,
            98
          ],
          "match_position": [
            71,
            92
          ],
          "match_string": "var template={cache_:{},create:function(str,data,callback){var fn;if(!/[\\t\\r\\n% ]/.test(str)){if(!callback){fn=this.create(fs.readFileSync(str).toString('utf8'));}else{fs.readFile(str,function(err,buffer){if(err){throw err;}"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
