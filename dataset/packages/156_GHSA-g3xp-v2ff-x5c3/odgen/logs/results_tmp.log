|checker| success id$0$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 10	module.exports = function (callback) {
  callback = callback || noop
  checkPlatform(goenv) // make sure we can do this.

  // hacky hack hack to work around unpublishability
  version = version.replace(/-[0-9]+/, '')

  var filename = 'ipfs_v' + version + '_' + goenv.GOOS + '-' + goenv.GOARCH + '.tar.gz'
  var url = 'http://dist.ipfs.io/go-ipfs/v' + version + '/go-' + filename

  var installPath = path.resolve(__dirname, '..')

  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

  function checkPlatform (goenv) {
    switch (goenv.GOOS) {
      case 'darwin':
      case 'linux':
      case 'freebsd':
        break
      default:
        throw new Error('no binary available for os:' + goenv.GOOS)
    }

    switch (goenv.GOARCH) {
      case 'amd64':
      case '386':
      case 'arm':
        break

      default:
        throw new Error('no binary available for arch: ' + goenv.GOARCH)
    }
  }
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 22	  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

|checker| success id$1$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 10	module.exports = function (callback) {
  callback = callback || noop
  checkPlatform(goenv) // make sure we can do this.

  // hacky hack hack to work around unpublishability
  version = version.replace(/-[0-9]+/, '')

  var filename = 'ipfs_v' + version + '_' + goenv.GOOS + '-' + goenv.GOARCH + '.tar.gz'
  var url = 'http://dist.ipfs.io/go-ipfs/v' + version + '/go-' + filename

  var installPath = path.resolve(__dirname, '..')

  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

  function checkPlatform (goenv) {
    switch (goenv.GOOS) {
      case 'darwin':
      case 'linux':
      case 'freebsd':
        break
      default:
        throw new Error('no binary available for os:' + goenv.GOOS)
    }

    switch (goenv.GOARCH) {
      case 'amd64':
      case '386':
      case 'arm':
        break

      default:
        throw new Error('no binary available for arch: ' + goenv.GOARCH)
    }
  }
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 22	  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

|checker| success id$0$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 10	module.exports = function (callback) {
  callback = callback || noop
  checkPlatform(goenv) // make sure we can do this.

  // hacky hack hack to work around unpublishability
  version = version.replace(/-[0-9]+/, '')

  var filename = 'ipfs_v' + version + '_' + goenv.GOOS + '-' + goenv.GOARCH + '.tar.gz'
  var url = 'http://dist.ipfs.io/go-ipfs/v' + version + '/go-' + filename

  var installPath = path.resolve(__dirname, '..')

  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

  function checkPlatform (goenv) {
    switch (goenv.GOOS) {
      case 'darwin':
      case 'linux':
      case 'freebsd':
        break
      default:
        throw new Error('no binary available for os:' + goenv.GOOS)
    }

    switch (goenv.GOARCH) {
      case 'amd64':
      case '386':
      case 'arm':
        break

      default:
        throw new Error('no binary available for arch: ' + goenv.GOARCH)
    }
  }
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 22	  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

|checker| success id$1$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 10	module.exports = function (callback) {
  callback = callback || noop
  checkPlatform(goenv) // make sure we can do this.

  // hacky hack hack to work around unpublishability
  version = version.replace(/-[0-9]+/, '')

  var filename = 'ipfs_v' + version + '_' + goenv.GOOS + '-' + goenv.GOARCH + '.tar.gz'
  var url = 'http://dist.ipfs.io/go-ipfs/v' + version + '/go-' + filename

  var installPath = path.resolve(__dirname, '..')

  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

  function checkPlatform (goenv) {
    switch (goenv.GOOS) {
      case 'darwin':
      case 'linux':
      case 'freebsd':
        break
      default:
        throw new Error('no binary available for os:' + goenv.GOOS)
    }

    switch (goenv.GOARCH) {
      case 'amd64':
      case '386':
      case 'arm':
        break

      default:
        throw new Error('no binary available for arch: ' + goenv.GOARCH)
    }
  }
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 22	  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

|checker| success id$0$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 10	module.exports = function (callback) {
  callback = callback || noop
  checkPlatform(goenv) // make sure we can do this.

  // hacky hack hack to work around unpublishability
  version = version.replace(/-[0-9]+/, '')

  var filename = 'ipfs_v' + version + '_' + goenv.GOOS + '-' + goenv.GOARCH + '.tar.gz'
  var url = 'http://dist.ipfs.io/go-ipfs/v' + version + '/go-' + filename

  var installPath = path.resolve(__dirname, '..')

  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

  function checkPlatform (goenv) {
    switch (goenv.GOOS) {
      case 'darwin':
      case 'linux':
      case 'freebsd':
        break
      default:
        throw new Error('no binary available for os:' + goenv.GOOS)
    }

    switch (goenv.GOARCH) {
      case 'amd64':
      case '386':
      case 'arm':
        break

      default:
        throw new Error('no binary available for arch: ' + goenv.GOARCH)
    }
  }
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 22	  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

|checker| success id$1$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 10	module.exports = function (callback) {
  callback = callback || noop
  checkPlatform(goenv) // make sure we can do this.

  // hacky hack hack to work around unpublishability
  version = version.replace(/-[0-9]+/, '')

  var filename = 'ipfs_v' + version + '_' + goenv.GOOS + '-' + goenv.GOARCH + '.tar.gz'
  var url = 'http://dist.ipfs.io/go-ipfs/v' + version + '/go-' + filename

  var installPath = path.resolve(__dirname, '..')

  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

  function checkPlatform (goenv) {
    switch (goenv.GOOS) {
      case 'darwin':
      case 'linux':
      case 'freebsd':
        break
      default:
        throw new Error('no binary available for os:' + goenv.GOOS)
    }

    switch (goenv.GOARCH) {
      case 'amd64':
      case '386':
      case 'arm':
        break

      default:
        throw new Error('no binary available for arch: ' + goenv.GOARCH)
    }
  }
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-818/156/package/src/index.js
Line 22	  request
    .get(url)
    .pipe(gunzip())
    .pipe(
      tarFS
        .extract(installPath)
        .on('finish', callback)
    )

