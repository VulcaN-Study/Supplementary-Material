|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/index.js
Line 139	const BUILTINS = {
    base64: IS_NODE
        ? (_, body) => Buffer.from(body, "base64")
        : (_, body) => new Uint8Array([...transducersBinary.base64Decode(body)]),
    date: (_, body) => new Date(body),
    file: (_, path$1, ctx) => {
        if (IS_NODE && ctx.opts.includes) {
            path$1 = path.resolve(ctx.opts.root, strings.unescape(path$1));
            ctx.logger.debug("loading value from:", path$1);
            return fs.readFileSync(path$1).toString();
        }
        else {
            ctx.logger.debug("skipping file value:", path$1);
            return path$1;
        }
    },
    gpg: IS_NODE
        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
        : NODE_ONLY,
    hex: (_, body) => strings.maybeParseInt(body, 0, 16),
    json: (_, body) => JSON.parse(strings.unescape(body)),
    list: (_, body) => body.split(/[\n\r\t ]+/g).map(strings.unescape),
    num: (_, body) => strings.maybeParseFloat(body, 0),
};
$FilePath$/src/lib/index.js
Line 156	        ? (_, body, ctx) => (ctx.opts.decrypt
            ? child_process.execSync(`echo "${body}" | gpg --decrypt`).toString()
            : body).trim()
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 16	  sink_hqbpillvul_execSync(sink);

