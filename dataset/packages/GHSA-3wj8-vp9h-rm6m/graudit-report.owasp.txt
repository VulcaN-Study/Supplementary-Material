/src/nosqlworker.js-126-			if (typeof(msg.arg[0]) === 'string')
/src/nosqlworker.js:127:				msg.arg[0] = eval('(' + msg.arg[0] + ')');
/src/nosqlworker.js-128-
##############################################
/src/nosqlworker.js-139-			if (typeof(msg.arg[0]) === 'string')
/src/nosqlworker.js:140:				msg.arg[0] = eval('(' + msg.arg[0] + ')');
/src/nosqlworker.js-141-
##############################################
/src/nosqlworker.js-237-		case 'storage.scan':
/src/nosqlworker.js:238:			db.storage.scan(msg.arg[0], msg.arg[1], eval('(' + msg.arg[2] + ')'), function(err, response, repository) {
/src/nosqlworker.js-239-				RESTORAGESCAN.id = msg.id;
##############################################
/src/nosqlworker.js-254-		case 'stream':
/src/nosqlworker.js:255:			db[msg.TYPE](eval('(' + msg.arg[0] + ')'), msg.arg[1], function(err, repository, count) {
/src/nosqlworker.js-256-				RESSTREAM.id = msg.id;
##############################################
/src/internal.js-2040-	try {
/src/internal.js:2041:		fn = eval(fn);
/src/internal.js-2042-		fn.components = keys;
##############################################
/src/internal.js-3433-			try {
/src/internal.js:3434:				r.push({ cmd: command.phrase, value: eval('(' + cmd + ')') });
/src/internal.js-3435-			} catch (e) {
##############################################
/src/error.html-43-	<script>
/src/error.html:44:		document.getElementById('url').innerHTML = location.href;
/src/error.html-45-	</script>
##############################################
/src/utils.js-4119-				break;
/src/utils.js:4120:			case 'eval':
/src/utils.js-4121-			case 'object':
##############################################
/src/503.html-57-				setTimeout(function() {
/src/503.html:58:					window.location.reload();
/src/503.html-59-				}, 1000);
##############################################
/src/index.js-1725-	try {
/src/index.js:1726:		fn = new Function('next', 'value', 'now', 'var model=value;var global,require,process,GLOBAL,root,clearImmediate,clearInterval,clearTimeout,setImmediate,setInterval,setTimeout,console,$STRING,$VIEWCACHE,framework_internal,TransformBuilder,Pagination,Page,URLBuilder,UrlBuilder,SchemaBuilder,framework_builders,framework_utils,framework_mail,Image,framework_image,framework_nosql,Builders,U,utils,Utils,Mail,WTF,SOURCE,INCLUDE,MODULE,NOSQL,NOBIN,NOCOUNTER,NOSQLMEMORY,NOMEM,DATABASE,DB,CONFIG,INSTALL,UNINSTALL,RESOURCE,TRANSLATOR,LOG,LOGGER,MODEL,GETSCHEMA,CREATE,UID,TRANSFORM,MAKE,SINGLETON,NEWTRANSFORM,NEWSCHEMA,EACHSCHEMA,FUNCTION,ROUTING,SCHEDULE,OBSOLETE,DEBUG,TEST,RELEASE,is_client,is_server,F,framework,Controller,setTimeout2,clearTimeout2,String,Number,Boolean,Object,Function,Date,isomorphic,I,eval;UPTODATE,NEWOPERATION,OPERATION,$$$,EMIT,ON,$QUERY,$GET,$WORKFLOW,$TRANSFORM,$OPERATION,$MAKE,$CREATE,HttpFile;EMPTYCONTROLLER,ROUTE,FILE,TEST,WEBSOCKET,MAIL,LOGMAIL,FUNC,REPO,FILESTORAGE;try{' + body + ';\n}catch(e){next(e)}');
/src/index.js-1727-	} catch(e) {
##############################################
/src/index.js-4622-	// Check if declaration is a valid URL address
/src/index.js:4623:	if (type !== 'eval' && typeof(declaration) === 'string') {
/src/index.js-4624-
##############################################
/src/index.js-4702-
/src/index.js:4703:		F.routes.middleware[name] = typeof(declaration) === 'function' ? declaration : eval(declaration);
/src/index.js-4704-		F._length_middleware = Object.keys(F.routes.middleware).length;
##############################################
/src/index.js-5031-
/src/index.js:5032:	if (type === 'definition' || type === 'eval' || type === 'schema' || type === 'operation' || type === 'task') {
/src/index.js-5033-
##############################################
/src/index.js-5051-			} else
/src/index.js:5052:				obj = typeof(declaration) === 'function' ? eval('(' + declaration.toString() + ')()') : eval(declaration);
/src/index.js-5053-
##############################################
/src/index.js-5104-			else {
/src/index.js:5105:				obj = typeof(declaration) === 'function' ? eval('(' + declaration.toString() + ')()') : eval(declaration);
/src/index.js-5106-				content = declaration.toString();
##############################################
/src/index.js-5889- * Run code
/src/index.js:5890: * @param {String or Function} script Function to eval or Code or URL address.
/src/index.js-5891- * @return {Framework}
/src/index.js-5892- */
/src/index.js:5893:F.eval = function(script) {
/src/index.js:5894:	return F.install('eval', script);
/src/index.js-5895-};
##############################################
/src/index.js-7314-	var filename = F.path.temp(name);
/src/index.js:7315:	var httpcachevalid = RELEASE && (req.headers['if-none-match'] === (ETAG + CONF.etag_version));
/src/index.js-7316-
/src/index.js:7317:	if (F.isProcessed(name) || httpcachevalid) {
/src/index.js-7318-		res.options.filename = filename;
##############################################
/src/index.js-10414-					obj[name] = (/true|on|1|enabled/i).test(value);
/src/index.js:10415:				else if (subtype === 'eval' || subtype === 'object' || subtype === 'array') {
/src/index.js-10416-					try {
##############################################
/src/index.js-13191- * @private
/src/index.js:13192: * @param {Object} value Value to eval.
/src/index.js-13193- * return {String} Returns empty string.
##############################################
/src/index.js-14044-
/src/index.js:14045:	if (self.$evalroutecallback) {
/src/index.js-14046-		var err = obj instanceof framework_builders.ErrorBuilder ? obj : null;
/src/index.js:14047:		self.$evalroutecallback(err, err ? null : obj);
/src/index.js-14048-		return self;
##############################################
/src/index.js-14216-		else if (data === SUCCESSHELPER && data.value === undefined) {
/src/index.js:14217:			if (self.$evalroutecallback) {
/src/index.js:14218:				self.$evalroutecallback(null, data);
/src/index.js-14219-			} else {
##############################################
/src/index.js-14266-
/src/index.js:14267:	if (self.$evalroutecallback) {
/src/index.js-14268-		var err = body instanceof ErrorBuilder ? body : null;
/src/index.js:14269:		self.$evalroutecallback(err, err ? null : body);
/src/index.js-14270-		return self;
##############################################
/src/index.js-18441-
/src/index.js:18442:		if (res.$evalroutecallback) {
/src/index.js-18443-			res.headersSent = true;
/src/index.js:18444:			res.$evalroutecallback(null, options.body, res.options.encoding || ENCODING);
/src/index.js-18445-			return res;
##############################################
/src/index.js-19624-
/src/index.js:19625:function evalroutehandleraction(controller) {
/src/index.js-19626-	if (controller.route.isPARAM)
##############################################
/src/index.js-19631-
/src/index.js:19632:function evalroutehandler(controller) {
/src/index.js-19633-	if (!controller.route.schema || !controller.route.schema[1] || controller.req.method === 'DELETE' || controller.req.method === 'GET')
/src/index.js:19634:		return evalroutehandleraction(controller);
/src/index.js-19635-
##############################################
/src/index.js-19637-		if (err) {
/src/index.js:19638:			controller.$evalroutecallback(err, body);
/src/index.js-19639-		} else {
/src/index.js-19640-			controller.body = body;
/src/index.js:19641:			evalroutehandleraction(controller);
/src/index.js-19642-		}
##############################################
/src/index.js-19702-
/src/index.js:19703:	res.$evalroutecallback = controller.$evalroutecallback = callback || NOOP;
/src/index.js:19704:	setImmediate(evalroutehandler, controller);
/src/index.js-19705-	return controller;
##############################################
/src/nosql.js-2875-	this.$repository = data.repository;
/src/nosql.js:2876:	this.$insertcallback = data.insert ? eval('(' + data.insert + ')') : null;
/src/nosql.js-2877-
##############################################
/src/nosql.js-2879-		for (var i = 0; i < data.functions.length; i++)
/src/nosql.js:2880:			data.functions[i] = eval('(' + data.functions[i] + ')');
/src/nosql.js-2881-		this.$functions = data.functions;
##############################################
/src/builders.js-2380-					cachekey += options.value + '';
/src/builders.js:2381:					var cachevalue = F.cache.get2(cachekey);
/src/builders.js:2382:					if (cachevalue) {
/src/builders.js:2383:						if (cachevalue.error)
/src/builders.js:2384:							builder.push(cachevalue.error);
/src/builders.js-2385-						else
/src/builders.js:2386:							item.model[verify.name] = cachevalue.value;
/src/builders.js-2387-						resume();
##############################################
/src/builders.js-2509-
/src/builders.js:2510:		var typeval = typeof(val);
/src/builders.js-2511-
/src/builders.js:2512:		if (typeval === 'function')
/src/builders.js-2513-			val = val();
##############################################
/src/builders.js-2609-
/src/builders.js:2610:					if (typeval === 'string') {
/src/builders.js-2611-						if (val)
/src/builders.js-2612-							tmp = val.trim().parseDate();
/src/builders.js:2613:					} else if (typeval === 'number')
/src/builders.js-2614-						tmp = new Date(val);
##############################################
/src/builders.js-2700-				case 11:
/src/builders.js:2701:					item[property] = self.$onprepare(property, typeval === 'number' ? val : typeval === 'string' ? parseNumber(val) : null, undefined, model, req);
/src/builders.js-2702-					break;
##############################################
/src/builders.js-2705-				case 12:
/src/builders.js:2706:					item[property] = self.$onprepare(property, val && typeval === 'object' && !(val instanceof Array) ? CONVERT(val, type.raw) : null, undefined, model, req);
/src/builders.js-2707-					break;
##############################################
/src/builders.js-2723-			tmp = val[j];
/src/builders.js:2724:			typeval = typeof(tmp);
/src/builders.js-2725-
##############################################
/src/builders.js-2796-
/src/builders.js:2797:					if (typeval === 'string') {
/src/builders.js-2798-						if (tmp)
/src/builders.js-2799-							tmp = tmp.trim().parseDate();
/src/builders.js:2800:					} else if (typeval === 'number')
/src/builders.js-2801-						tmp = new Date(tmp);
##############################################
/src/builders.js-2833-				case 11:
/src/builders.js:2834:					tmp = self.$onprepare(property, typeval === 'number' ? tmp : typeval === 'string' ? parseNumber(tmp) : null, j, model, req);
/src/builders.js-2835-					if (tmp == null)
##############################################
/src/changes.txt-8-- fixed: applying of `default_root` in static files
/src/changes.txt:9:- fixed: routing evaluation
/src/changes.txt-10-- fixed: parsing of longer WebSocket messages
##############################################
/src/changes.txt-131-- added: SchemaEntity supports `schema.setPatchExtension(fn($, [data]))`
/src/changes.txt:132:- added: SchemaOptions supports `$.extend([data])` for evaluating of all extensions for the current operation
/src/changes.txt-133-- added: `WebSocket.keys` property (it contains all keys with connections)
##############################################
/src/changes.txt-135-- added: a global variable called `THREAD` with a name of current thread
/src/changes.txt:136:- added: `require('total.js').http(..., { thread: 'thread_name' })` evaluates only specified thread
/src/changes.txt:137:- added: `require('total.js').cluster.http(..., { thread: 'thread_name' })` evaluates only specified thread in cluster
/src/changes.txt-138-- added: framework creates a file with app stats in the form `your_init_script_name.js.json`
##############################################
/src/changes.txt-260-- added: `global.isWORKER` variable which contains `true` (when the process is executed as a worker) or `false`
/src/changes.txt:261:- added: `ACTION(url, [data], callback)` can evaluate a route without request creation
/src/changes.txt-262-- added: `ROUTE('🔒 METHOD URL')`, it means that 🔒 adds `authorized` flag
##############################################
/src/changes.txt-277-- added: `$.noop()` for custom responses
/src/changes.txt:278:- added: `$ACTION(schemaroute, [model], callback, [controller])` evaluates schema
/src/changes.txt-279-- added: `process.send('total:restart')` performs a restart of app when the app is in debug mode
##############################################
/src/changes.txt-412-- added: `F.refresh()` for refreshing of internal cache
/src/changes.txt:413:- added: `DatabaseBuilder.each(fn)` for browsing of evaluated records
/src/changes.txt-414-- added: Bundles can be downloaded from URL addresses
##############################################
/src/changes.txt-510-- added: `SchemaOptions.stop()` alias to `$.model.$stop()`
/src/changes.txt:511:- added: a new route flag type `&group` something like `roles` but groups aren't evaluated
/src/changes.txt-512-- added: `route.groups` with defined groups
##############################################
/src/changes.txt-584-- added: new stats `F.stats.performance` contains count of `request` and `file` per minute
/src/changes.txt:585:- added: new method `controller.operation(name, value, [callback], [options])` for evaluating of operation
/src/changes.txt-586-
##############################################
/src/changes.txt-681-- added: `String.arg(obj)` for a simple templating `Hello {variable}!`
/src/changes.txt:682:- added: new event `ON('@controllername', function() {})` -> is executed if the controller is evaluated
/src/changes.txt-683-
##############################################
/src/changes.txt-1135-- added: `I` alias for `isomorphic code on server-side and client-side together by hhhaker6@gmail.com <https://github.com/Creeplays>
/src/changes.txt:1136:- added: `F.script(body, value, callback(err, value))` evaluates script securly in safe scope (more in documentation)
/src/changes.txt-1137-- added: new alias `SCRIPT()` for `F.script()`
##############################################
/src/changes.txt-1227-- fixed: (critical) view compilation in release mode (problem with just-in-time rendering)
/src/changes.txt:1228:- fixed: (critical) `F.eval()`
/src/changes.txt-1229-- fixed: (critical) parsing Date instance as Date instance in SchemaBuilder
##############################################
/src/changes.txt-1551-- fixed: F.responsePipe() --> problem with transmitted headers
/src/changes.txt:1552:- fixed: evaluating of @{helpers.helper_name()}
/src/changes.txt-1553-- fixed: HTML minification of UTF8 characters
##############################################
/src/changes.txt-1647-- added: F.backup(filename, path, [callback], [filter]) --> backup some path to one file
/src/changes.txt:1648:- added: F.restore(filename, target, [callback], [filter]) --> restore backup file (but not evaluating)
/src/changes.txt-1649-- added: MailMessage supports custom headers `message.headers = { key: 'value' }`
##############################################
/src/changes.txt-1825-
/src/changes.txt:1826:- updated: (IMPORTANT): for evaluation multiple roles in routing (@role) framework validates only one role
/src/changes.txt-1827-- updated: GZIP compression for static files (added .md, .json)
##############################################
/src/changes.txt-2319-- updated: utils.download(url, flags, [data], callback, cookies, headers, encoding, timeout)
/src/changes.txt:2320:- updated: framework.eval(string/url/function) - this function supports eval code from another URL
/src/changes.txt-2321-- updated: assertion testing (new features)
##############################################
/src/tangular.js-14-
/src/tangular.js:15:	var SKIP = { 'null': true, 'undefined': true, 'true': true, 'false': true, 'Object': 1, 'String': 1, 'Number': 1, 'Boolean': 1, 'Date': 1, 'Array': 1, 'window': 1, 'global': 1, 'arguments': 1, 'eval': 1, 'Function': 1, 'function': 1, 'var': 1, 'let': 1, 'const': 1, 'delete': 1 };
/src/tangular.js-16-	var REG_CMDFIND = /\{\{.*?\}\}/g;
##############################################
/src/graphdb.js-1690-
/src/graphdb.js:1691:			var writevalue = function(value, callback) {
/src/graphdb.js-1692-				var maxsize = meta.documentsize - DATAOFFSET;
##############################################
/src/graphdb.js-1762-
/src/graphdb.js:1763:								writevalue(value, function(value) {
/src/graphdb.js-1764-
