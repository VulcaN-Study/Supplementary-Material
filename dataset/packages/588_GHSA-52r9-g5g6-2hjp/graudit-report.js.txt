/src/lib/cli.js-15-  try {
/src/lib/cli.js:16:    root = _.without(JSON.parse(process.env.npm_config_argv).original, 'start', 'node-srv', 'run-script', 'npm')[0];
/src/lib/cli.js-17-  } catch (error) {
##############################################
/src/lib/cli.js-21-
/src/lib/cli.js:22:  program.version(pkg.version).option('-p, --port [number]', 'Sets port on which the server will work', process.env.PORT || '8000').option('-r, --root [path]', 'Sets the root from which the server will run', root).option('-h, --host [host]', 'Sets hots on which the server will work', '0.0.0.0').option('-i, --index [file]', 'Sets the index file for opening like default file in directories', 'index.html').option('-l, --logs [path/boolean]', 'Logs writing flag', false).option('--404 [path]', 'Path to 404 error page', null).parse(process.argv);
/src/lib/cli.js-23-
##############################################
/src/lib/server.js-46-    Server.prototype.start = function() {
/src/lib/server.js:47:      return this.server = http.createServer(_.bind(this.request, this)).listen(Number(this.options.port), this.options.host);
/src/lib/server.js-48-    };
##############################################
/src/lib/server.js-99-          var uri;
/src/lib/server.js:100:          uri = url.parse(req.url);
/src/lib/server.js-101-          return resolve(uri.pathname);
##############################################
/src/lib/server.js-239-        return new Promise(function(resolve, reject) {
/src/lib/server.js:240:          return fs.createReadStream(filePath, range).on('open', function() {
/src/lib/server.js-241-            return res.writeHead(successCode, headers);
##############################################
/src/lib/server.js-306-          return function(resolve, reject) {
/src/lib/server.js:307:            return fs.createReadStream(errorPath).on('open', function() {
/src/lib/server.js-308-              return res.writeHead(code, headers);
