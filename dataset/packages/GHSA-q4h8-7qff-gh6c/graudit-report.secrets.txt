/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js-1160-e.default=s}),define("ghost-admin/models/integration",["exports","ember-data/model","ghost-admin/mixins/validation-engine","ember-data/attr","ember-data/relationships"],function(e,t,s,n,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js:1161:var r=t.default.extend(s.default,{validationType:"integration",name:(0,n.default)("string"),slug:(0,n.default)("string"),type:(0,n.default)("string"),iconImage:(0,n.default)("string"),description:(0,n.default)("string"),createdAtUTC:(0,n.default)("moment-utc"),createdBy:(0,n.default)("number"),updatedAtUTC:(0,n.default)("moment-utc"),updatedBy:(0,n.default)("number"),apiKeys:(0,a.hasMany)("api-key",{embedded:"always",async:!1}),webhooks:(0,a.hasMany)("webhook",{embedded:"always",async:!1}),adminKey:Ember.computed("apiKeys.[]",function(){return this.apiKeys.findBy("type","admin")}),contentKey:Ember.computed("apiKeys.[]",function(){return this.apiKeys.findBy("type","content")})})
/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js-1162-e.default=r}),define("ghost-admin/models/invite",["exports","ember-data/model","ember-data/attr","ember-data/relationships"],function(e,t,s,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
##############################################
/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js-1403-e.default=n}),define("ghost-admin/serializers/integration",["exports","ghost-admin/serializers/application","ember-data/serializers/embedded-records-mixin"],function(e,t,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js:1404:var n=t.default.extend(s.default,{attrs:{apiKeys:{embedded:"always"},webhooks:{embedded:"always"},createdAtUTC:{key:"created_at"},updatedAtUTC:{key:"updated_at"}}})
/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js-1405-e.default=n}),define("ghost-admin/serializers/invite",["exports","ghost-admin/serializers/application"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
##############################################
/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js-1663-e.default=t}),define("ghost-admin/templates/components/gh-members-lab-setting",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js:1664:var t=Ember.HTMLBars.template({id:"DIFl/NO+",block:'{"symbols":[],"statements":[[7,"div",true],[10,"class","flex flex-column b--whitegrey bt"],[8],[0,"\\n\\n    "],[7,"section",true],[10,"class","bb b--whitegrey pa5"],[8],[0,"\\n        "],[7,"div",true],[10,"class","flex justify-between"],[8],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"h4",true],[10,"class","gh-setting-title"],[8],[0,"Stripe settings"],[9],[0,"\\n                "],[7,"p",true],[10,"class","gh-setting-desc pa0 ma0"],[8],[0,"Configure Stripe API keys for signups"],[9],[0,"\\n            "],[9],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"button",false],[12,"class","gh-btn"],[12,"type","button"],[3,"action",[[23,0,[]],[28,"toggle",["membersStripeOpen",[23,0,[]]],null]]],[8],[7,"span",true],[8],[1,[28,"if",[[24,["membersStripeOpen"]],"Close","Expand"],null],false],[9],[9],[0,"\\n            "],[9],[0,"\\n        "],[9],[0,"\\n\\n"],[4,"liquid-if",[[24,["membersStripeOpen"]]],null,{"statements":[[0,"                "],[7,"div",true],[10,"class","w-50 mb4 mt5"],[8],[0,"\\n                    "],[7,"label",true],[10,"class","fw6 f8"],[8],[0,"Stripe publishable API key"],[9],[0,"\\n                    "],[1,[28,"gh-text-input",null,[["value","input","class"],[[28,"readonly",[[24,["subscriptionSettings","stripeConfig","public_token"]]],null],[28,"action",[[23,0,[]],"setSubscriptionSettings","public_token"],null],"mt1"]]],false],[0,"\\n                "],[9],[0,"\\n                "],[7,"div",true],[10,"class","w-50 mb4"],[8],[0,"\\n                    "],[7,"label",true],[10,"class","fw6 f8 mt4"],[8],[0,"Stripe secret API key"],[9],[0,"\\n                    "],[1,[28,"gh-text-input",null,[["value","input","class"],[[28,"readonly",[[24,["subscriptionSettings","stripeConfig","secret_token"]]],null],[28,"action",[[23,0,[]],"setSubscriptionSettings","secret_token"],null],"mt1"]]],false],[0,"\\n                    "],[7,"a",true],[10,"href","https://dashboard.stripe.com/account/apikeys"],[10,"target","_blank"],[10,"class","mt1 fw4 f8"],[8],[0,"\\n                        Where to find Stripe API keys\\n                    "],[9],[0,"\\n                "],[9],[0,"\\n"]],"parameters":[]},null],[0,"    "],[9],[0,"\\n\\n    "],[7,"section",true],[10,"class","bb b--whitegrey pa5"],[8],[0,"\\n        "],[7,"div",true],[10,"class","flex justify-between"],[8],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"h4",true],[10,"class","gh-setting-title"],[8],[0,"Pricing"],[9],[0,"\\n                "],[7,"p",true],[10,"class","gh-setting-desc pa0 ma0"],[8],[0,"Set monthly and yearly subscription prices"],[9],[0,"\\n            "],[9],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"button",false],[12,"class","gh-btn"],[12,"type","button"],[3,"action",[[23,0,[]],[28,"toggle",["membersPricingOpen",[23,0,[]]],null]]],[8],[7,"span",true],[8],[1,[28,"if",[[24,["membersPricingOpen"]],"Close","Expand"],null],false],[9],[9],[0,"\\n            "],[9],[0,"\\n        "],[9],[0,"\\n    \\n"],[4,"liquid-if",[[24,["membersPricingOpen"]]],null,{"statements":[[0,"            "],[7,"div",true],[10,"class","w-50 flex mb4 mt5"],[8],[0,"\\n                "],[7,"div",true],[10,"class","w-50 mr3"],[8],[0,"\\n"],[4,"gh-form-group",null,null,{"statements":[[0,"                    "],[7,"label",true],[10,"class","fw6 f8"],[8],[0,"Monthly price"],[9],[0,"\\n                    "],[7,"div",true],[10,"class","mt1 relative gh-labs-price-label gh-labs-monthly-price"],[8],[0,"\\n                        "],[1,[28,"gh-text-input",null,[["value","type","input"],[[28,"readonly",[[24,["subscriptionSettings","stripeConfig","plans","monthly","dollarAmount"]]],null],"number",[28,"action",[[23,0,[]],"setSubscriptionSettings","month"],null]]]],false],[0,"\\n                    "],[9],[0,"\\n"]],"parameters":[]},null],[0,"                "],[9],[0,"\\n                "],[7,"div",true],[10,"class","w-50 ml2"],[8],[0,"\\n"],[4,"gh-form-group",null,[["class"],["description-container"]],{"statements":[[0,"                    "],[7,"label",true],[10,"class","fw6 f8"],[8],[0,"Yearly price"],[9],[0,"\\n                    "],[7,"div",true],[10,"class","mt1 relative gh-labs-price-label gh-labs-yearly-price"],[8],[0,"\\n                        "],[1,[28,"gh-text-input",null,[["value","type","input"],[[28,"readonly",[[24,["subscriptionSettings","stripeConfig","plans","yearly","dollarAmount"]]],null],"number",[28,"action",[[23,0,[]],"setSubscriptionSettings","year"],null]]]],false],[0,"\\n                    "],[9],[0,"\\n"]],"parameters":[]},null],[0,"                "],[9],[0,"\\n            "],[9],[0,"\\n"]],"parameters":[]},null],[0,"    "],[9],[0,"\\n\\n    "],[7,"section",true],[10,"class","bb b--whitegrey pa5"],[8],[0,"\\n        "],[7,"div",true],[10,"class","flex justify-between"],[8],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"h4",true],[10,"class","gh-setting-title"],[8],[0,"Allow free members signup"],[9],[0,"\\n                "],[7,"p",true],[10,"class","gh-setting-desc pa0 ma0"],[8],[0,"Allow free members signup"],[9],[0,"\\n            "],[9],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"div",true],[10,"class","for-switch"],[8],[0,"\\n                    "],[7,"label",false],[12,"class","switch"],[12,"for","members-allow-self-signup"],[3,"action",[[23,0,[]],"setSubscriptionSettings","allowSelfSignup"],[["bubbles"],["false"]]],[8],[0,"\\n                        "],[7,"input",true],[11,"checked",[24,["subscriptionSettings","allowSelfSignup"]]],[10,"class","gh-input"],[11,"onclick",[28,"action",[[23,0,[]],"setSubscriptionSettings","allowSelfSignup"],null]],[10,"type","checkbox"],[8],[9],[0,"\\n                        "],[7,"span",true],[10,"class","input-toggle-component mt1"],[8],[9],[0,"\\n                    "],[9],[0,"\\n                "],[9],[0,"\\n            "],[9],[0,"\\n        "],[9],[0,"\\n    "],[9],[0,"\\n\\n    "],[7,"section",true],[10,"class","bb b--whitegrey pa5"],[8],[0,"\\n        "],[7,"div",true],[10,"class","flex justify-between"],[8],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"h4",true],[10,"class","gh-setting-title"],[8],[0,"Default post access"],[9],[0,"\\n                "],[7,"p",true],[10,"class","gh-setting-desc pa0 ma0"],[8],[0,"Configure restrictions for new posts"],[9],[0,"\\n            "],[9],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"button",false],[12,"class","gh-btn"],[12,"type","button"],[3,"action",[[23,0,[]],[28,"toggle",["membersPostAccessOpen",[23,0,[]]],null]]],[8],[7,"span",true],[8],[1,[28,"if",[[24,["membersPostAccessOpen"]],"Close","Expand"],null],false],[9],[9],[0,"\\n            "],[9],[0,"\\n        "],[9],[0,"\\n    \\n"],[4,"liquid-if",[[24,["membersPostAccessOpen"]]],null,{"statements":[[0,"        "],[7,"div",true],[10,"class","flex flex-column w-50 flex mb4 mt5"],[8],[0,"\\n            "],[7,"div",false],[12,"class",[29,["gh-radio ",[28,"if",[[28,"eq",[[24,["settings","defaultContentVisibility"]],"public"],null],"active"],null]]]],[3,"action",[[23,0,[]],"setDefaultContentVisibility","public"],[["on"],["click"]]],[8],[0,"\\n                "],[7,"div",true],[10,"class","gh-radio-button"],[8],[9],[0,"\\n                "],[7,"div",true],[10,"class","gh-radio-content"],[8],[0,"\\n                    "],[7,"div",true],[10,"class","gh-radio-label"],[8],[0,"Public"],[9],[0,"\\n                "],[9],[0,"\\n            "],[9],[0,"\\n            \\n            "],[7,"div",false],[12,"class",[29,["gh-radio ",[28,"if",[[28,"eq",[[24,["settings","defaultContentVisibility"]],"members"],null],"active"],null]]]],[3,"action",[[23,0,[]],"setDefaultContentVisibility","members"],[["on"],["click"]]],[8],[0,"\\n                "],[7,"div",true],[10,"class","gh-radio-button"],[8],[9],[0,"\\n                "],[7,"div",true],[10,"class","gh-radio-content"],[8],[0,"\\n                    "],[7,"div",true],[10,"class","gh-radio-label"],[8],[0,"Members only"],[9],[0,"\\n                "],[9],[0,"\\n            "],[9],[0,"\\n            \\n            "],[7,"div",false],[12,"class",[29,["gh-radio ",[28,"if",[[28,"eq",[[24,["settings","defaultContentVisibility"]],"paid"],null],"active"],null]]]],[3,"action",[[23,0,[]],"setDefaultContentVisibility","paid"],[["on"],["click"]]],[8],[0,"\\n                "],[7,"div",true],[10,"class","gh-radio-button"],[8],[9],[0,"\\n                "],[7,"div",true],[10,"class","gh-radio-content"],[8],[0,"\\n                    "],[7,"div",true],[10,"class","gh-radio-label"],[8],[0,"Paid-members only"],[9],[0,"\\n                "],[9],[0,"\\n            "],[9],[0,"\\n        "],[9],[0,"\\n"]],"parameters":[]},null],[0,"    "],[9],[0,"\\n\\n    "],[7,"section",true],[10,"class","bb b--whitegrey pa5"],[8],[0,"\\n        "],[7,"div",true],[10,"class","flex justify-between"],[8],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"h4",true],[10,"class","gh-setting-title"],[8],[0,"Emails"],[9],[0,"\\n                "],[7,"p",true],[10,"class","gh-setting-desc pa0 ma0"],[8],[0,"Membership related email settings"],[9],[0,"\\n            "],[9],[0,"\\n            "],[7,"div",true],[8],[0,"\\n                "],[7,"button",false],[12,"class","gh-btn"],[12,"type","button"],[3,"action",[[23,0,[]],[28,"toggle",["membersEmailOpen",[23,0,[]]],null]]],[8],[7,"span",true],[8],[1,[28,"if",[[24,["membersEmailOpen"]],"Close","Expand"],null],false],[9],[9],[0,"\\n            "],[9],[0,"\\n        "],[9],[0,"\\n    \\n"],[4,"liquid-if",[[24,["membersEmailOpen"]]],null,{"statements":[[0,"        "],[7,"div",true],[10,"class","flex flex-column w-40 flex mb2 mt5"],[8],[0,"\\n"],[4,"gh-form-group",null,null,{"statements":[[0,"            "],[7,"label",true],[10,"class","fw6 f8"],[8],[0,"Sender email address"],[9],[0,"\\n            "],[7,"div",true],[10,"class","flex items-center justify-center mt1"],[8],[0,"\\n                "],[1,[28,"gh-text-input",null,[["value","input","class"],[[28,"readonly",[[24,["subscriptionSettings","fromAddress"]]],null],[28,"action",[[23,0,[]],"setSubscriptionSettings","fromAddress"],null],"w20"]]],false],[0,"\\n                "],[7,"span",true],[10,"class","ml3"],[8],[0," @"],[1,[24,["config","blogDomain"]],false],[9],[0,"\\n            "],[9],[0,"\\n            "],[7,"div",true],[10,"class","f8 fw4 midgrey mt1"],[8],[0," \\"From\\" address for sign up and sign in emails"],[9],[0,"\\n"]],"parameters":[]},null],[0,"        "],[9],[0,"\\n"]],"parameters":[]},null],[0,"    "],[9],[0,"\\n"],[9]],"hasEval":false}',meta:{moduleName:"ghost-admin/templates/components/gh-members-lab-setting.hbs"}})
/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js-1665-e.default=t}),define("ghost-admin/templates/components/gh-members-list-item",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
##############################################
/src/core/server/translations/en.json-72-                "missingAdminUserOrIntegration": "Unable to determine the authenticated user or integration. Check that cookies are being passed through if using session authentication.",
/src/core/server/translations/en.json:73:                "adminApiKeyMissing": "Admin API Token missing kid header claim.",
/src/core/server/translations/en.json:74:                "unknownAdminApiKey": "Unknown Admin API Key",
/src/core/server/translations/en.json:75:                "unknownContentApiKey": "Unknown Content API Key",
/src/core/server/translations/en.json-76-                "adminApiKidMissing": "Admin API kid missing.",
/src/core/server/translations/en.json:77:                "invalidApiKeyType": "Invalid API Key type",
/src/core/server/translations/en.json-78-                "invalidRequest": "Invalid Request",
##############################################
/src/core/server/translations/en.json-270-            },
/src/core/server/translations/en.json:271:            "api_key": {
/src/core/server/translations/en.json:272:                "apiKeyNotFound": "API Key not found"
/src/core/server/translations/en.json-273-            },
##############################################
/src/core/server/models/relations/authors.js-333-
/src/core/server/models/relations/authors.js:334:        permissible: function permissible(postModelOrId, action, context, unsafeAttrs, loadedPermissions, hasUserPermission, hasAppPermission, hasApiKeyPermission) {
/src/core/server/models/relations/authors.js-335-            var self = this,
##############################################
/src/core/server/models/relations/authors.js-422-
/src/core/server/models/relations/authors.js:423:            if (hasUserPermission && hasApiKeyPermission && hasAppPermission) {
/src/core/server/models/relations/authors.js-424-                return Post.permissible.call(
##############################################
/src/core/server/models/relations/authors.js-431-                    hasAppPermission,
/src/core/server/models/relations/authors.js:432:                    hasApiKeyPermission
/src/core/server/models/relations/authors.js-433-                ).then(({excludedAttrs}) => {
##############################################
/src/core/server/models/api-key.js-21- * 26 char hex string = 13 bytes
/src/core/server/models/api-key.js:22: * 64 char hex string JWT secret = 32 bytes
/src/core/server/models/api-key.js-23- */
/src/core/server/models/api-key.js:24:const createSecret = (type) => {
/src/core/server/models/api-key.js-25-    const bytes = type === 'content' ? 13 : 32;
##############################################
/src/core/server/models/api-key.js-28-
/src/core/server/models/api-key.js:29:const ApiKey = ghostBookshelf.Model.extend({
/src/core/server/models/api-key.js:30:    tableName: 'api_keys',
/src/core/server/models/api-key.js-31-
/src/core/server/models/api-key.js-32-    defaults() {
/src/core/server/models/api-key.js:33:        const secret = createSecret(this.get('type'));
/src/core/server/models/api-key.js-34-
##############################################
/src/core/server/models/api-key.js-72-    refreshSecret(data, options) {
/src/core/server/models/api-key.js:73:        const secret = createSecret(data.type);
/src/core/server/models/api-key.js-74-        return this.edit(Object.assign({}, data, {secret}), options);
##############################################
/src/core/server/models/api-key.js-77-
/src/core/server/models/api-key.js:78:const ApiKeys = ghostBookshelf.Collection.extend({
/src/core/server/models/api-key.js:79:    model: ApiKey
/src/core/server/models/api-key.js-80-});
##############################################
/src/core/server/models/api-key.js-82-module.exports = {
/src/core/server/models/api-key.js:83:    ApiKey: ghostBookshelf.model('ApiKey', ApiKey),
/src/core/server/models/api-key.js:84:    ApiKeys: ghostBookshelf.collection('ApiKeys', ApiKeys)
/src/core/server/models/api-key.js-85-};
##############################################
/src/core/server/models/client.js-14-        var env = config.get('env'),
/src/core/server/models/client.js:15:            secret = env.indexOf('testing') !== 0 ? crypto.randomBytes(6).toString('hex') : 'not_available';
/src/core/server/models/client.js-16-
##############################################
/src/core/server/models/subscriber.js-60-
/src/core/server/models/subscriber.js:61:    permissible: function permissible(postModelOrId, action, context, unsafeAttrs, loadedPermissions, hasUserPermission, hasAppPermission, hasApiKeyPermission) {
/src/core/server/models/subscriber.js-62-        // CASE: external is only allowed to add and edit subscribers
##############################################
/src/core/server/models/subscriber.js-68-
/src/core/server/models/subscriber.js:69:        if (hasUserPermission && hasAppPermission && hasApiKeyPermission) {
/src/core/server/models/subscriber.js-70-            return Promise.resolve();
##############################################
/src/core/server/models/integration.js-5-
/src/core/server/models/integration.js:6:    relationships: ['api_keys', 'webhooks'],
/src/core/server/models/integration.js-7-
/src/core/server/models/integration.js-8-    relationshipBelongsTo: {
/src/core/server/models/integration.js:9:        api_keys: 'api_keys',
/src/core/server/models/integration.js-10-        webhooks: 'webhooks'
##############################################
/src/core/server/models/integration.js-84-
/src/core/server/models/integration.js:85:    api_keys: function apiKeys() {
/src/core/server/models/integration.js:86:        return this.hasMany('ApiKey', 'integration_id');
/src/core/server/models/integration.js-87-    },
##############################################
/src/core/server/models/invite.js-44-
/src/core/server/models/invite.js:45:    permissible(inviteModel, action, context, unsafeAttrs, loadedPermissions, hasUserPermission, hasAppPermission, hasApiKeyPermission) {
/src/core/server/models/invite.js-46-        const isAdd = (action === 'add');
##############################################
/src/core/server/models/invite.js-48-        if (!isAdd) {
/src/core/server/models/invite.js:49:            if (hasUserPermission && hasAppPermission && hasApiKeyPermission) {
/src/core/server/models/invite.js-50-                return Promise.resolve();
##############################################
/src/core/server/models/invite.js-88-
/src/core/server/models/invite.js:89:                if (hasUserPermission && hasAppPermission && hasApiKeyPermission) {
/src/core/server/models/invite.js-90-                    return Promise.resolve();
##############################################
/src/core/server/models/post.js-902-    // NOTE: the `authors` extension is the parent of the post model. It also has a permissible function.
/src/core/server/models/post.js:903:    permissible: function permissible(postModel, action, context, unsafeAttrs, loadedPermissions, hasUserPermission, hasAppPermission, hasApiKeyPermission) {
/src/core/server/models/post.js-904-        let isContributor;
##############################################
/src/core/server/models/post.js-928-        isEditor = loadedPermissions.user && _.some(loadedPermissions.user.roles, {name: 'Editor'});
/src/core/server/models/post.js:929:        isIntegration = loadedPermissions.apiKey && _.some(loadedPermissions.apiKey.roles, {name: 'Admin Integration'});
/src/core/server/models/post.js-930-
##############################################
/src/core/server/models/post.js-957-
/src/core/server/models/post.js:958:        if (hasUserPermission && hasApiKeyPermission && hasAppPermission) {
/src/core/server/models/post.js-959-            return Promise.resolve({excludedAttrs});
##############################################
/src/core/server/models/settings.js-241-
/src/core/server/models/settings.js:242:    permissible: function permissible(modelId, action, context, unsafeAttrs, loadedPermissions, hasUserPermission, hasAppPermission, hasApiKeyPermission) {
/src/core/server/models/settings.js-243-        let isEdit = (action === 'edit');
##############################################
/src/core/server/models/settings.js-261-
/src/core/server/models/settings.js:262:        if (hasUserPermission && hasApiKeyPermission && hasAppPermission) {
/src/core/server/models/settings.js-263-            return Promise.resolve();
##############################################
/src/core/server/models/role.js-26-
/src/core/server/models/role.js:27:    api_keys: function apiKeys() {
/src/core/server/models/role.js:28:        return this.hasMany('ApiKey');
/src/core/server/models/role.js-29-    }
##############################################
/src/core/server/models/role.js-52-
/src/core/server/models/role.js:53:    permissible: function permissible(roleModelOrId, action, context, unsafeAttrs, loadedPermissions, hasUserPermission, hasAppPermission, hasApiKeyPermission) {
/src/core/server/models/role.js-54-        // If we passed in an id instead of a model, get the model
##############################################
/src/core/server/models/role.js-88-
/src/core/server/models/role.js:89:        if (action === 'assign' && loadedPermissions.apiKey) {
/src/core/server/models/role.js:90:            // apiKey cannot 'assign' the 'Owner' role
/src/core/server/models/role.js-91-            if (roleModel.get('name') === 'Owner') {
##############################################
/src/core/server/models/role.js-97-
/src/core/server/models/role.js:98:        if (hasUserPermission && hasAppPermission && hasApiKeyPermission) {
/src/core/server/models/role.js-99-            return Promise.resolve();
##############################################
/src/core/server/models/user.js-222-        // @TODO: move to api serialization when we drop v0.1
/src/core/server/models/user.js:223:        if (!options || !options.context || (!options.context.user && !options.context.internal && (!options.context.api_key || options.context.api_key.type === 'content'))) {
/src/core/server/models/user.js-224-            delete attrs.email;
##############################################
/src/core/server/models/user.js-670-
/src/core/server/models/user.js:671:    permissible: function permissible(userModelOrId, action, context, unsafeAttrs, loadedPermissions, hasUserPermission, hasAppPermission, hasApiKeyPermission) {
/src/core/server/models/user.js-672-        var self = this,
##############################################
/src/core/server/models/user.js-760-                    if (context.user === owner.id) {
/src/core/server/models/user.js:761:                        if (hasUserPermission && hasApiKeyPermission && hasAppPermission) {
/src/core/server/models/user.js-762-                            return Promise.resolve();
##############################################
/src/core/server/models/user.js-782-                            .then(() => {
/src/core/server/models/user.js:783:                                if (hasUserPermission && hasApiKeyPermission && hasAppPermission) {
/src/core/server/models/user.js-784-                                    return Promise.resolve();
##############################################
/src/core/server/models/user.js-792-
/src/core/server/models/user.js:793:                    if (hasUserPermission && hasApiKeyPermission && hasAppPermission) {
/src/core/server/models/user.js-794-                        return Promise.resolve();
##############################################
/src/core/server/models/user.js-802-
/src/core/server/models/user.js:803:        if (hasUserPermission && hasApiKeyPermission && hasAppPermission) {
/src/core/server/models/user.js-804-            return Promise.resolve();
##############################################
/src/core/server/api/v0.1/configuration.js-62-                    configuration.clientId = ghostAdmin.get('slug');
/src/core/server/api/v0.1/configuration.js:63:                    configuration.clientSecret = ghostAdmin.get('secret');
/src/core/server/api/v0.1/configuration.js-64-
##############################################
/src/core/server/api/canary/utils/serializers/input/posts.js-80-         * - context object is empty (functional call, content api access)
/src/core/server/api/canary/utils/serializers/input/posts.js:81:         * - api_key.type == 'content' ? content api access
/src/core/server/api/canary/utils/serializers/input/posts.js-82-         * - user exists? admin api access
##############################################
/src/core/server/api/canary/utils/serializers/input/posts.js-107-         * - context object is empty (functional call, content api access)
/src/core/server/api/canary/utils/serializers/input/posts.js:108:         * - api_key.type == 'content' ? content api access
/src/core/server/api/canary/utils/serializers/input/posts.js-109-         * - user exists? admin api access
##############################################
/src/core/server/api/canary/utils/serializers/output/utils/mapper.js-71-
/src/core/server/api/canary/utils/serializers/output/utils/mapper.js:72:    if (jsonModel.api_keys) {
/src/core/server/api/canary/utils/serializers/output/utils/mapper.js:73:        jsonModel.api_keys.forEach((key) => {
/src/core/server/api/canary/utils/serializers/output/utils/mapper.js-74-            if (key.type === 'admin') {
/src/core/server/api/canary/utils/serializers/output/utils/mapper.js:75:                key.secret = `${key.id}:${key.secret}`;
/src/core/server/api/canary/utils/serializers/output/utils/mapper.js-76-            }
##############################################
/src/core/server/api/canary/utils/index.js-29-    // @TODO: Remove, not used.
/src/core/server/api/canary/utils/index.js:30:    isAdminAPIKey: (frame) => {
/src/core/server/api/canary/utils/index.js:31:        return frame.options.context && Object.keys(frame.options.context).length !== 0 && frame.options.context.api_key &&
/src/core/server/api/canary/utils/index.js:32:            frame.options.context.api_key.type === 'admin';
/src/core/server/api/canary/utils/index.js-33-    }
##############################################
/src/core/server/api/canary/integrations.js-14-                include: {
/src/core/server/api/canary/integrations.js:15:                    values: ['api_keys', 'webhooks']
/src/core/server/api/canary/integrations.js-16-                }
##############################################
/src/core/server/api/canary/integrations.js-38-                include: {
/src/core/server/api/canary/integrations.js:39:                    values: ['api_keys', 'webhooks']
/src/core/server/api/canary/integrations.js-40-                }
##############################################
/src/core/server/api/canary/integrations.js-71-                include: {
/src/core/server/api/canary/integrations.js:72:                    values: ['api_keys', 'webhooks']
/src/core/server/api/canary/integrations.js-73-                }
##############################################
/src/core/server/api/canary/integrations.js-106-                include: {
/src/core/server/api/canary/integrations.js:107:                    values: ['api_keys', 'webhooks']
/src/core/server/api/canary/integrations.js-108-                }
##############################################
/src/core/server/api/canary/integrations.js-111-        query({data, options}) {
/src/core/server/api/canary/integrations.js:112:            const dataWithApiKeys = Object.assign({
/src/core/server/api/canary/integrations.js:113:                api_keys: [
/src/core/server/api/canary/integrations.js-114-                    {type: 'content'},
##############################################
/src/core/server/api/canary/integrations.js-117-            }, data);
/src/core/server/api/canary/integrations.js:118:            return models.Integration.add(dataWithApiKeys, options);
/src/core/server/api/canary/integrations.js-119-        }
##############################################
/src/core/server/api/shared/http.js-17-
/src/core/server/api/shared/http.js:18:        let apiKey = null;
/src/core/server/api/shared/http.js-19-        let integration = null;
##############################################
/src/core/server/api/shared/http.js-21-
/src/core/server/api/shared/http.js:22:        if (req.api_key) {
/src/core/server/api/shared/http.js:23:            apiKey = {
/src/core/server/api/shared/http.js:24:                id: req.api_key.get('id'),
/src/core/server/api/shared/http.js:25:                type: req.api_key.get('type')
/src/core/server/api/shared/http.js-26-            };
/src/core/server/api/shared/http.js-27-            integration = {
/src/core/server/api/shared/http.js:28:                id: req.api_key.get('integration_id')
/src/core/server/api/shared/http.js-29-            };
##############################################
/src/core/server/api/shared/http.js-44-            context: {
/src/core/server/api/shared/http.js:45:                api_key: apiKey,
/src/core/server/api/shared/http.js-46-                user: user,
##############################################
/src/core/server/api/v2/utils/serializers/input/posts.js-80-         * - context object is empty (functional call, content api access)
/src/core/server/api/v2/utils/serializers/input/posts.js:81:         * - api_key.type == 'content' ? content api access
/src/core/server/api/v2/utils/serializers/input/posts.js-82-         * - user exists? admin api access
##############################################
/src/core/server/api/v2/utils/serializers/input/posts.js-107-         * - context object is empty (functional call, content api access)
/src/core/server/api/v2/utils/serializers/input/posts.js:108:         * - api_key.type == 'content' ? content api access
/src/core/server/api/v2/utils/serializers/input/posts.js-109-         * - user exists? admin api access
##############################################
/src/core/server/api/v2/utils/serializers/output/utils/mapper.js-71-
/src/core/server/api/v2/utils/serializers/output/utils/mapper.js:72:    if (jsonModel.api_keys) {
/src/core/server/api/v2/utils/serializers/output/utils/mapper.js:73:        jsonModel.api_keys.forEach((key) => {
/src/core/server/api/v2/utils/serializers/output/utils/mapper.js-74-            if (key.type === 'admin') {
/src/core/server/api/v2/utils/serializers/output/utils/mapper.js:75:                key.secret = `${key.id}:${key.secret}`;
/src/core/server/api/v2/utils/serializers/output/utils/mapper.js-76-            }
##############################################
/src/core/server/api/v2/utils/index.js-29-    // @TODO: Remove, not used.
/src/core/server/api/v2/utils/index.js:30:    isAdminAPIKey: (frame) => {
/src/core/server/api/v2/utils/index.js:31:        return frame.options.context && Object.keys(frame.options.context).length !== 0 && frame.options.context.api_key &&
/src/core/server/api/v2/utils/index.js:32:            frame.options.context.api_key.type === 'admin';
/src/core/server/api/v2/utils/index.js-33-    }
##############################################
/src/core/server/api/v2/integrations.js-14-                include: {
/src/core/server/api/v2/integrations.js:15:                    values: ['api_keys', 'webhooks']
/src/core/server/api/v2/integrations.js-16-                }
##############################################
/src/core/server/api/v2/integrations.js-38-                include: {
/src/core/server/api/v2/integrations.js:39:                    values: ['api_keys', 'webhooks']
/src/core/server/api/v2/integrations.js-40-                }
##############################################
/src/core/server/api/v2/integrations.js-71-                include: {
/src/core/server/api/v2/integrations.js:72:                    values: ['api_keys', 'webhooks']
/src/core/server/api/v2/integrations.js-73-                }
##############################################
/src/core/server/api/v2/integrations.js-106-                include: {
/src/core/server/api/v2/integrations.js:107:                    values: ['api_keys', 'webhooks']
/src/core/server/api/v2/integrations.js-108-                }
##############################################
/src/core/server/api/v2/integrations.js-111-        query({data, options}) {
/src/core/server/api/v2/integrations.js:112:            const dataWithApiKeys = Object.assign({
/src/core/server/api/v2/integrations.js:113:                api_keys: [
/src/core/server/api/v2/integrations.js-114-                    {type: 'content'},
##############################################
/src/core/server/api/v2/integrations.js-117-            }, data);
/src/core/server/api/v2/integrations.js:118:            return models.Integration.add(dataWithApiKeys, options);
/src/core/server/api/v2/integrations.js-119-        }
##############################################
/src/core/server/public/ghost-sdk.js-43-            queryOptions.client_id = clientId;
/src/core/server/public/ghost-sdk.js:44:            queryOptions.client_secret = clientSecret;
/src/core/server/public/ghost-sdk.js-45-
##############################################
/src/core/server/public/ghost-sdk.js-57-        clientId = options.clientId ? options.clientId : '';
/src/core/server/public/ghost-sdk.js:58:        clientSecret = options.clientSecret ? options.clientSecret : '';
/src/core/server/public/ghost-sdk.js-59-        apiUrl = options.url ? options.url : (apiUrl.match(/{\{api-url}}/) ? '' : apiUrl);
##############################################
/src/core/server/public/ghost-sdk.min.js:1:!function(){var o,i,n,e,r="{{api-url}}";n={api:function(){var n,e=Array.prototype.slice.call(arguments),t=r;return(n=e.pop())&&"object"!=typeof n&&(e.push(n),n={}),(n=n||{}).client_id=o,n.client_secret=i,e.length&&e.forEach(function(n){t+=n.replace(/^\/|\/$/g,"")+"/"}),t+function(n){var e,t=[];if(!n)return"";for(e in n)n.hasOwnProperty(e)&&(n[e]||!1===n[e])&&t.push(e+"="+encodeURIComponent(n[e]));return t.length?"?"+t.join("&"):""}(n)}},e=function(n){o=n.clientId?n.clientId:"",i=n.clientSecret?n.clientSecret:"",r=n.url?n.url:r.match(/{\{api-url}}/)?"":r},"undefined"!=typeof window&&(window.ghost=window.ghost||{},window.ghost.url=n,window.ghost.init=e),"undefined"!=typeof module&&(module.exports={url:n,init:e})}();
##############################################
/src/core/server/adapters/scheduling/post-scheduling/index.js-20-        // @TODO: We are still using API v0.1
/src/core/server/adapters/scheduling/post-scheduling/index.js:21:        url: `${urlUtils.urlJoin(apiUrl, 'schedules', 'posts', model.get('id'))}?client_id=${client.get('slug')}&client_secret=${client.get('secret')}`,
/src/core/server/adapters/scheduling/post-scheduling/index.js-22-        extra: {
##############################################
/src/core/server/web/api/canary/admin/middleware.js-6-    // CASE: user is logged in, allow
/src/core/server/web/api/canary/admin/middleware.js:7:    if (!req.api_key) {
/src/core/server/web/api/canary/admin/middleware.js-8-        return next();
##############################################
/src/core/server/web/api/canary/content/middleware.js-16-module.exports.authenticatePublic = [
/src/core/server/web/api/canary/content/middleware.js:17:    shared.middlewares.brute.contentApiKey,
/src/core/server/web/api/canary/content/middleware.js-18-    auth.authenticate.authenticateContentApi,
##############################################
/src/core/server/web/api/v2/admin/middleware.js-6-    // CASE: user is logged in, allow
/src/core/server/web/api/v2/admin/middleware.js:7:    if (!req.api_key) {
/src/core/server/web/api/v2/admin/middleware.js-8-        return next();
##############################################
/src/core/server/web/api/v2/content/middleware.js-16-module.exports.authenticatePublic = [
/src/core/server/web/api/v2/content/middleware.js:17:    shared.middlewares.brute.contentApiKey,
/src/core/server/web/api/v2/content/middleware.js-18-    auth.authenticate.authenticateContentApi,
##############################################
/src/core/server/web/shared/middlewares/api/spam-prevention.js-12-const spamUserLogin = spam.user_login || {};
/src/core/server/web/shared/middlewares/api/spam-prevention.js:13:const spamContentApiKey = spam.content_api_key || {};
/src/core/server/web/shared/middlewares/api/spam-prevention.js-14-
##############################################
/src/core/server/web/shared/middlewares/api/spam-prevention.js-21-let userResetInstance;
/src/core/server/web/shared/middlewares/api/spam-prevention.js:22:let contentApiKeyInstance;
/src/core/server/web/shared/middlewares/api/spam-prevention.js-23-
##############################################
/src/core/server/web/shared/middlewares/api/spam-prevention.js-208-
/src/core/server/web/shared/middlewares/api/spam-prevention.js:209:const contentApiKey = () => {
/src/core/server/web/shared/middlewares/api/spam-prevention.js-210-    const ExpressBrute = require('express-brute');
##############################################
/src/core/server/web/shared/middlewares/api/spam-prevention.js-213-
/src/core/server/web/shared/middlewares/api/spam-prevention.js:214:    contentApiKeyInstance = contentApiKeyInstance || new ExpressBrute(memoryStore,
/src/core/server/web/shared/middlewares/api/spam-prevention.js-215-        extend({
##############################################
/src/core/server/web/shared/middlewares/api/spam-prevention.js-225-            handleStoreError: handleStoreError
/src/core/server/web/shared/middlewares/api/spam-prevention.js:226:        }, pick(spamContentApiKey, spamConfigKeys))
/src/core/server/web/shared/middlewares/api/spam-prevention.js-227-    );
/src/core/server/web/shared/middlewares/api/spam-prevention.js-228-
/src/core/server/web/shared/middlewares/api/spam-prevention.js:229:    return contentApiKeyInstance;
/src/core/server/web/shared/middlewares/api/spam-prevention.js-230-};
##############################################
/src/core/server/web/shared/middlewares/api/spam-prevention.js-237-    privateBlog: privateBlog,
/src/core/server/web/shared/middlewares/api/spam-prevention.js:238:    contentApiKey: contentApiKey
/src/core/server/web/shared/middlewares/api/spam-prevention.js-239-};
##############################################
/src/core/server/web/shared/middlewares/brute.js-80-     */
/src/core/server/web/shared/middlewares/brute.js:81:    contentApiKey(req, res, next) {
/src/core/server/web/shared/middlewares/brute.js:82:        return spamPrevention.contentApiKey().getMiddleware({
/src/core/server/web/shared/middlewares/brute.js-83-            ignoreIP: false
##############################################
/src/core/server/lib/security/tokens.js-22-        email = options.email,
/src/core/server/lib/security/tokens.js:23:        secret = options.secret;
/src/core/server/lib/security/tokens.js-24-
##############################################
/src/core/server/config/defaults.json-68-        },
/src/core/server/config/defaults.json:69:        "content_api_key": {
/src/core/server/config/defaults.json-70-            "minWait": 3600000,
##############################################
/src/core/server/data/migrations/versions/2.2/2-add-integrations-and-api-key-tables.js-3-
/src/core/server/data/migrations/versions/2.2/2-add-integrations-and-api-key-tables.js:4:const tables = ['integrations', 'api_keys'];
/src/core/server/data/migrations/versions/2.2/2-add-integrations-and-api-key-tables.js-5-const _private = {};
##############################################
/src/core/server/data/migrations/versions/2.2/4-insert-integration-and-api-key-permissions.js-5-
/src/core/server/data/migrations/versions/2.2/4-insert-integration-and-api-key-permissions.js:6:const resources = ['integration', 'api_key'];
/src/core/server/data/migrations/versions/2.2/4-insert-integration-and-api-key-permissions.js-7-const _private = {};
##############################################
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-15-
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:16:_private.addApiKeyRole = (options) => {
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-17-    const message = 'Adding "Admin Integration" role to roles table';
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:18:    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'Admin Integration'});
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-19-
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:20:    return models.Role.findOne({name: apiKeyRole.name}, options)
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-21-        .then((role) => {
##############################################
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-24-                    name: 'Role',
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:25:                    entries: [apiKeyRole]
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-26-                }, options).then(result => _private.printResult(result, message));
##############################################
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-32-
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:33:_private.addApiKeyPermissions = (options) => {
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-34-    const message = 'Adding permissions for the "Admin Integration" role';
##############################################
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-45-
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:46:_private.removeApiKeyPermissionsAndRole = (options) => {
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-47-    const message = 'Rollback: Removing "Admin Integration" role and permissions';
##############################################
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-71-
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:72:    return _private.addApiKeyRole(localOptions)
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:73:        .then(() => _private.addApiKeyPermissions(localOptions));
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-74-};
##############################################
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-81-
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js:82:    return _private.removeApiKeyPermissionsAndRole(localOptions);
/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js-83-};
##############################################
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-18-    const message = 'Adding "Scheduler Integration" role to roles table';
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js:19:    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'Scheduler Integration'});
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-20-
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js:21:    return models.Role.findOne({name: apiKeyRole.name}, options)
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-22-        .then((role) => {
##############################################
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-25-                    name: 'Role',
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js:26:                    entries: [apiKeyRole]
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-27-                }, options).then(result => _private.printResult(result, message));
##############################################
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-40-
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js:41:_private.removeApiKeyPermissionsAndRole = (options) => {
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-42-    const message = 'Rollback: Removing "Scheduler Integration" role and permissions';
##############################################
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-82-
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js:83:    return _private.removeApiKeyPermissionsAndRole(localOptions);
/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js-84-};
##############################################
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-15-
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:16:_private.addApiKeyRole = (options) => {
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-17-    const message = 'Adding "DB Backup Integration" role to roles table';
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:18:    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'DB Backup Integration'});
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-19-
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:20:    return models.Role.findOne({name: apiKeyRole.name}, options)
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-21-        .then((role) => {
##############################################
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-24-                    name: 'Role',
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:25:                    entries: [apiKeyRole]
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-26-                }, options).then(result => _private.printResult(result, message));
##############################################
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-32-
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:33:_private.addApiKeyPermissions = (options) => {
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-34-    const message = 'Adding permissions for the "DB Backup Integration" role';
##############################################
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-45-
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:46:_private.removeApiKeyPermissionsAndRole = (options) => {
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-47-    const message = 'Rollback: Removing "DB Backup Integration" role and permissions';
##############################################
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-71-
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:72:    return _private.addApiKeyRole(localOptions)
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:73:        .then(() => _private.addApiKeyPermissions(localOptions));
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-74-};
##############################################
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-81-
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js:82:    return _private.removeApiKeyPermissionsAndRole(localOptions);
/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js-83-};
##############################################
/src/core/server/data/schema/schema.js-352-    },
/src/core/server/data/schema/schema.js:353:    api_keys: {
/src/core/server/data/schema/schema.js-354-        id: {type: 'string', maxlength: 24, nullable: false, primary: true},
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-380-                    "action_type": "browse",
/src/core/server/data/schema/fixtures/fixtures.json:381:                    "object_type": "api_key"
/src/core/server/data/schema/fixtures/fixtures.json-382-                },
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-385-                    "action_type": "read",
/src/core/server/data/schema/fixtures/fixtures.json:386:                    "object_type": "api_key"
/src/core/server/data/schema/fixtures/fixtures.json-387-                },
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-390-                    "action_type": "edit",
/src/core/server/data/schema/fixtures/fixtures.json:391:                    "object_type": "api_key"
/src/core/server/data/schema/fixtures/fixtures.json-392-                },
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-395-                    "action_type": "add",
/src/core/server/data/schema/fixtures/fixtures.json:396:                    "object_type": "api_key"
/src/core/server/data/schema/fixtures/fixtures.json-397-                },
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-400-                    "action_type": "destroy",
/src/core/server/data/schema/fixtures/fixtures.json:401:                    "object_type": "api_key"
/src/core/server/data/schema/fixtures/fixtures.json-402-                },
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-587-                    "type": "builtin",
/src/core/server/data/schema/fixtures/fixtures.json:588:                    "api_keys": [{"type": "admin"}]
/src/core/server/data/schema/fixtures/fixtures.json-589-                },
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-594-                    "type": "internal",
/src/core/server/data/schema/fixtures/fixtures.json:595:                    "api_keys": [{"type": "admin", "role": "DB Backup Integration"}]
/src/core/server/data/schema/fixtures/fixtures.json-596-                },
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-601-                    "type": "internal",
/src/core/server/data/schema/fixtures/fixtures.json:602:                    "api_keys": [{"type": "admin", "role": "Scheduler Integration"}]
/src/core/server/data/schema/fixtures/fixtures.json-603-                }
##############################################
/src/core/server/data/schema/fixtures/fixtures.json-635-                    "integration": "all",
/src/core/server/data/schema/fixtures/fixtures.json:636:                    "api_key": "all",
/src/core/server/data/schema/fixtures/fixtures.json-637-                    "action": "all",
##############################################
/src/core/server/services/permissions/providers.js-57-
/src/core/server/services/permissions/providers.js:58:    apiKey(id) {
/src/core/server/services/permissions/providers.js:59:        return models.ApiKey.findOne({id}, {withRelated: ['role', 'role.permissions']})
/src/core/server/services/permissions/providers.js:60:            .then((foundApiKey) => {
/src/core/server/services/permissions/providers.js:61:                if (!foundApiKey) {
/src/core/server/services/permissions/providers.js-62-                    throw new common.errors.NotFoundError({
/src/core/server/services/permissions/providers.js:63:                        message: common.i18n.t('errors.models.api_key.apiKeyNotFound')
/src/core/server/services/permissions/providers.js-64-                    });
##############################################
/src/core/server/services/permissions/providers.js-68-                // so there's no need for permission deduplication
/src/core/server/services/permissions/providers.js:69:                const permissions = foundApiKey.related('role').related('permissions').models;
/src/core/server/services/permissions/providers.js:70:                const roles = [foundApiKey.toJSON().role];
/src/core/server/services/permissions/providers.js-71-
##############################################
/src/core/server/services/permissions/parse-context.js-5- * @param {Object|String} context
/src/core/server/services/permissions/parse-context.js:6: * @return {{internal: boolean, external: boolean, user: integer|null, app: integer|null, public: boolean, api_key: Object|null}}
/src/core/server/services/permissions/parse-context.js-7- */
##############################################
/src/core/server/services/permissions/parse-context.js-13-        user: null,
/src/core/server/services/permissions/parse-context.js:14:        api_key: null,
/src/core/server/services/permissions/parse-context.js-15-        app: null,
##############################################
/src/core/server/services/permissions/parse-context.js-35-
/src/core/server/services/permissions/parse-context.js:36:    if (context && context.api_key) {
/src/core/server/services/permissions/parse-context.js:37:        parsed.api_key = context.api_key;
/src/core/server/services/permissions/parse-context.js-38-        parsed.integration = context.integration;
/src/core/server/services/permissions/parse-context.js:39:        parsed.public = (context.api_key.type === 'content');
/src/core/server/services/permissions/parse-context.js-40-    }
##############################################
/src/core/server/services/permissions/can-this.js-52-                var userPermissions = loadedPermissions.user ? loadedPermissions.user.permissions : null,
/src/core/server/services/permissions/can-this.js:53:                    apiKeyPermissions = loadedPermissions.apiKey ? loadedPermissions.apiKey.permissions : null,
/src/core/server/services/permissions/can-this.js-54-                    appPermissions = loadedPermissions.app ? loadedPermissions.app.permissions : null,
/src/core/server/services/permissions/can-this.js-55-                    hasUserPermission,
/src/core/server/services/permissions/can-this.js:56:                    hasApiKeyPermission,
/src/core/server/services/permissions/can-this.js-57-                    hasAppPermission,
##############################################
/src/core/server/services/permissions/can-this.js-87-                // Check api key permissions if they were passed
/src/core/server/services/permissions/can-this.js:88:                hasApiKeyPermission = true;
/src/core/server/services/permissions/can-this.js:89:                if (!_.isNull(apiKeyPermissions)) {
/src/core/server/services/permissions/can-this.js-90-                    // api key request have no user, but we want the user permissions checks to pass
/src/core/server/services/permissions/can-this.js-91-                    hasUserPermission = true;
/src/core/server/services/permissions/can-this.js:92:                    hasApiKeyPermission = _.some(apiKeyPermissions, checkPermission);
/src/core/server/services/permissions/can-this.js-93-                }
##############################################
/src/core/server/services/permissions/can-this.js-103-                    return TargetModel.permissible(
/src/core/server/services/permissions/can-this.js:104:                        modelId, actType, context, unsafeAttrs, loadedPermissions, hasUserPermission, hasAppPermission, hasApiKeyPermission
/src/core/server/services/permissions/can-this.js-105-                    );
##############################################
/src/core/server/services/permissions/can-this.js-107-
/src/core/server/services/permissions/can-this.js:108:                if (hasUserPermission && hasApiKeyPermission && hasAppPermission) {
/src/core/server/services/permissions/can-this.js-109-                    return;
##############################################
/src/core/server/services/permissions/can-this.js-122-        userPermissionLoad,
/src/core/server/services/permissions/can-this.js:123:        apiKeyPermissionLoad,
/src/core/server/services/permissions/can-this.js-124-        appPermissionLoad,
##############################################
/src/core/server/services/permissions/can-this.js-126-
/src/core/server/services/permissions/can-this.js:127:    // Get context.user, context.api_key and context.app
/src/core/server/services/permissions/can-this.js-128-    context = parseContext(context);
##############################################
/src/core/server/services/permissions/can-this.js-142-    // Kick off loading of api key permissions if necessary
/src/core/server/services/permissions/can-this.js:143:    if (context.api_key) {
/src/core/server/services/permissions/can-this.js:144:        apiKeyPermissionLoad = providers.apiKey(context.api_key.id);
/src/core/server/services/permissions/can-this.js-145-    } else {
/src/core/server/services/permissions/can-this.js:146:        // Resolve null if no context.api_key
/src/core/server/services/permissions/can-this.js:147:        apiKeyPermissionLoad = Promise.resolve(null);
/src/core/server/services/permissions/can-this.js-148-    }
##############################################
/src/core/server/services/permissions/can-this.js-158-    // Wait for both user and app permissions to load
/src/core/server/services/permissions/can-this.js:159:    permissionsLoad = Promise.all([userPermissionLoad, apiKeyPermissionLoad, appPermissionLoad]).then(function (result) {
/src/core/server/services/permissions/can-this.js-160-        return {
/src/core/server/services/permissions/can-this.js-161-            user: result[0],
/src/core/server/services/permissions/can-this.js:162:            apiKey: result[1],
/src/core/server/services/permissions/can-this.js-163-            app: result[2]
##############################################
/src/core/server/services/auth/authorize.js-54-    authorizeContentApi(req, res, next) {
/src/core/server/services/auth/authorize.js:55:        const hasApiKey = req.api_key && req.api_key.id;
/src/core/server/services/auth/authorize.js-56-        const hasMember = req.member;
/src/core/server/services/auth/authorize.js:57:        if (hasApiKey) {
/src/core/server/services/auth/authorize.js-58-            return next();
##############################################
/src/core/server/services/auth/authorize.js-70-        const hasUser = req.user && req.user.id;
/src/core/server/services/auth/authorize.js:71:        const hasApiKey = req.api_key && req.api_key.id;
/src/core/server/services/auth/authorize.js-72-
/src/core/server/services/auth/authorize.js:73:        if (hasUser || hasApiKey) {
/src/core/server/services/auth/authorize.js-74-            return next();
##############################################
/src/core/server/services/auth/api-key/content.js-3-
/src/core/server/services/auth/api-key/content.js:4:const authenticateContentApiKey = function authenticateContentApiKey(req, res, next) {
/src/core/server/services/auth/api-key/content.js-5-    // allow fallthrough to other auth methods or final ensureAuthenticated check
##############################################
/src/core/server/services/auth/api-key/content.js-18-
/src/core/server/services/auth/api-key/content.js:19:    models.ApiKey.findOne({secret: key}).then((apiKey) => {
/src/core/server/services/auth/api-key/content.js:20:        if (!apiKey) {
/src/core/server/services/auth/api-key/content.js-21-            return next(new common.errors.UnauthorizedError({
/src/core/server/services/auth/api-key/content.js:22:                message: common.i18n.t('errors.middleware.auth.unknownContentApiKey'),
/src/core/server/services/auth/api-key/content.js:23:                code: 'UNKNOWN_CONTENT_API_KEY'
/src/core/server/services/auth/api-key/content.js-24-            }));
##############################################
/src/core/server/services/auth/api-key/content.js-26-
/src/core/server/services/auth/api-key/content.js:27:        if (apiKey.get('type') !== 'content') {
/src/core/server/services/auth/api-key/content.js-28-            return next(new common.errors.UnauthorizedError({
/src/core/server/services/auth/api-key/content.js:29:                message: common.i18n.t('errors.middleware.auth.invalidApiKeyType'),
/src/core/server/services/auth/api-key/content.js:30:                code: 'INVALID_API_KEY_TYPE'
/src/core/server/services/auth/api-key/content.js-31-            }));
##############################################
/src/core/server/services/auth/api-key/content.js-34-        // authenticated OK, store the api key on the request for later checks and logging
/src/core/server/services/auth/api-key/content.js:35:        req.api_key = apiKey;
/src/core/server/services/auth/api-key/content.js-36-        next();
##############################################
/src/core/server/services/auth/api-key/content.js-42-module.exports = {
/src/core/server/services/auth/api-key/content.js:43:    authenticateContentApiKey
/src/core/server/services/auth/api-key/content.js-44-};
##############################################
/src/core/server/services/auth/api-key/admin.js-26- * 1. extract the JWT token from the `Authorization: Ghost xxxx` header
/src/core/server/services/auth/api-key/admin.js:27: * 2. decode the JWT to extract the api_key id from the "key id" header claim
/src/core/server/services/auth/api-key/admin.js:28: * 3. find a matching api_key record
/src/core/server/services/auth/api-key/admin.js-29- * 4. verify the JWT (matching secret, matching URL path, not expired)
/src/core/server/services/auth/api-key/admin.js:30: * 5. place the api_key object on `req.api_key`
/src/core/server/services/auth/api-key/admin.js-31- *
/src/core/server/services/auth/api-key/admin.js-32- * There are some specifcs of the JWT that we expect:
/src/core/server/services/auth/api-key/admin.js:33: * - the "Key ID" header parameter should be set to the id of the api_key used to sign the token
/src/core/server/services/auth/api-key/admin.js-34- *   https://tools.ietf.org/html/rfc7515#section-4.1.4
##############################################
/src/core/server/services/auth/api-key/admin.js-41-    if (!req.headers || !req.headers.authorization) {
/src/core/server/services/auth/api-key/admin.js:42:        req.api_key = null;
/src/core/server/services/auth/api-key/admin.js-43-        return next();
##############################################
/src/core/server/services/auth/api-key/admin.js-63-
/src/core/server/services/auth/api-key/admin.js:64:    const apiKeyId = decoded.header.kid;
/src/core/server/services/auth/api-key/admin.js-65-
/src/core/server/services/auth/api-key/admin.js:66:    if (!apiKeyId) {
/src/core/server/services/auth/api-key/admin.js-67-        return next(new common.errors.BadRequestError({
##############################################
/src/core/server/services/auth/api-key/admin.js-72-
/src/core/server/services/auth/api-key/admin.js:73:    models.ApiKey.findOne({id: apiKeyId}).then((apiKey) => {
/src/core/server/services/auth/api-key/admin.js:74:        if (!apiKey) {
/src/core/server/services/auth/api-key/admin.js-75-            return next(new common.errors.UnauthorizedError({
/src/core/server/services/auth/api-key/admin.js:76:                message: common.i18n.t('errors.middleware.auth.unknownAdminApiKey'),
/src/core/server/services/auth/api-key/admin.js:77:                code: 'UNKNOWN_ADMIN_API_KEY'
/src/core/server/services/auth/api-key/admin.js-78-            }));
##############################################
/src/core/server/services/auth/api-key/admin.js-80-
/src/core/server/services/auth/api-key/admin.js:81:        if (apiKey.get('type') !== 'admin') {
/src/core/server/services/auth/api-key/admin.js-82-            return next(new common.errors.UnauthorizedError({
/src/core/server/services/auth/api-key/admin.js:83:                message: common.i18n.t('errors.middleware.auth.invalidApiKeyType'),
/src/core/server/services/auth/api-key/admin.js:84:                code: 'INVALID_API_KEY_TYPE'
/src/core/server/services/auth/api-key/admin.js-85-            }));
##############################################
/src/core/server/services/auth/api-key/admin.js-91-        // https://github.com/auth0/node-jsonwebtoken/issues/208#issuecomment-231861138
/src/core/server/services/auth/api-key/admin.js:92:        const secret = Buffer.from(apiKey.get('secret'), 'hex');
/src/core/server/services/auth/api-key/admin.js-93-
##############################################
/src/core/server/services/auth/api-key/admin.js-117-        // authenticated OK, store the api key on the request for later checks and logging
/src/core/server/services/auth/api-key/admin.js:118:        req.api_key = apiKey;
/src/core/server/services/auth/api-key/admin.js-119-        next();
##############################################
/src/core/server/services/auth/authenticate.js-5-const session = require('./session');
/src/core/server/services/auth/authenticate.js:6:const apiKeyAuth = require('./api-key');
/src/core/server/services/auth/authenticate.js-7-const members = require('./members');
##############################################
/src/core/server/services/auth/authenticate.js-36-
/src/core/server/services/auth/authenticate.js:37:        if (req.query && req.query.client_secret) {
/src/core/server/services/auth/authenticate.js:38:            req.body.client_secret = req.query.client_secret;
/src/core/server/services/auth/authenticate.js-39-        }
/src/core/server/services/auth/authenticate.js-40-
/src/core/server/services/auth/authenticate.js:41:        if (!req.body.client_id || !req.body.client_secret) {
/src/core/server/services/auth/authenticate.js-42-            return next(new common.errors.UnauthorizedError({
##############################################
/src/core/server/services/auth/authenticate.js-56-                delete req.body.client_id;
/src/core/server/services/auth/authenticate.js:57:                delete req.body.client_secret;
/src/core/server/services/auth/authenticate.js-58-
##############################################
/src/core/server/services/auth/authenticate.js-104-
/src/core/server/services/auth/authenticate.js:105:    authenticateAdminApi: [apiKeyAuth.admin.authenticate, session.authenticate],
/src/core/server/services/auth/authenticate.js-106-
/src/core/server/services/auth/authenticate.js:107:    authenticateContentApi: [apiKeyAuth.content.authenticateContentApiKey, members.authenticateMembersToken]
/src/core/server/services/auth/authenticate.js-108-};
##############################################
/src/core/server/services/auth/auth-strategies.js-22-                    var client = model.toJSON({withRelated: ['trustedDomains']});
/src/core/server/services/auth/auth-strategies.js:23:                    if (client.status === 'enabled' && client.secret === clientSecret) {
/src/core/server/services/auth/auth-strategies.js-24-                        return done(null, client);
##############################################
/src/core/server/services/members/api.js-160-function getAuthSecret() {
/src/core/server/services/members/api.js:161:    const hexSecret = settingsCache.get('members_email_auth_secret');
/src/core/server/services/members/api.js-162-    if (!hexSecret) {
##############################################
/src/core/server/services/members/api.js-165-    }
/src/core/server/services/members/api.js:166:    const secret = Buffer.from(hexSecret, 'hex');
/src/core/server/services/members/api.js-167-    if (secret.length < 64) {
