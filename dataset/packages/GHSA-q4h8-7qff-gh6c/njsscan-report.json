{
  "errors": [
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 19,
            "line": 1
          },
          "file": "/src/LICENSE",
          "source_hash": "be6353a7d2eef947d0010b096ae4975584bcc6e28e097a21a1a47fa1450b582c",
          "start": {
            "col": 15,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 19,
            "line": 1
          },
          "file": "/src/content/themes/casper/LICENSE",
          "source_hash": "be6353a7d2eef947d0010b096ae4975584bcc6e28e097a21a1a47fa1450b582c",
          "start": {
            "col": 15,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect2",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/vendor.min-9a614fcf6610a3db1a11c9b341a727e7.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/vendor.min-9a614fcf6610a3db1a11c9b341a727e7.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect2",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/codemirror/codemirror-16e64fa2ba6a41ae9a0085976fd70b73.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect2",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/codemirror/codemirror-16e64fa2ba6a41ae9a0085976fd70b73.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/simplemde/simplemde-bab9b741d534a9019ead8815258a6960.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.xss.express_xss",
      "type": "MatchTimeoutError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 19,
            "line": 1
          },
          "file": "/src/LICENSE",
          "source_hash": "be6353a7d2eef947d0010b096ae4975584bcc6e28e097a21a1a47fa1450b582c",
          "start": {
            "col": 15,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/ghost.min-b0a755237f752946124f52a7d192be0e.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.xss.express_xss",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/vendor.min-9a614fcf6610a3db1a11c9b341a727e7.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.xss.express_xss",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/codemirror/codemirror-16e64fa2ba6a41ae9a0085976fd70b73.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.xss.express_xss",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/simplemde/simplemde-bab9b741d534a9019ead8815258a6960.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect2",
      "type": "MatchTimeoutError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 19,
            "line": 1
          },
          "file": "/src/content/themes/casper/LICENSE",
          "source_hash": "be6353a7d2eef947d0010b096ae4975584bcc6e28e097a21a1a47fa1450b582c",
          "start": {
            "col": 15,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/simplemde/simplemde-bab9b741d534a9019ead8815258a6960.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect",
      "type": "MatchTimeoutError"
    }
  ],
  "njsscan_version": "0.2.8",
  "nodejs": {
    "cookie_session_default": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            48,
            51
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Consider changing the default session cookie name. An attacker can use it to fingerprint the server and target attacks accordingly.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_domain": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/session/middleware.js",
          "match_lines": [
            33,
            46
          ],
          "match_position": [
            27,
            11
          ],
          "match_string": "        UNO_SESSIONIONA = session({\n            store: new SessionStore(models.Session),\n            secret: settingsCache.get('session_secret'),\n            resave: false,\n            saveUninitialized: false,\n            name: 'ghost-admin-api-session',\n            cookie: {\n                maxAge: constants.SIX_MONTH_MS,\n                httpOnly: true,\n                path: urlUtils.getSubdir() + '/ghost',\n                sameSite: 'lax',\n                secure: urlUtils.isSSL(config.get('url'))\n            }\n        });"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            48,
            51
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_maxage": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            48,
            51
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-613: Insufficient Session Expiration",
        "description": "Session middleware settings: `maxAge` not set. Use it to set expiration date for cookies.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_path": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            48,
            51
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_samesite": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            48,
            51
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
        "description": "Default session middleware settings: `sameSite` attribute is not configured to strict or lax. These configurations provides protection against Cross Site Request Forgery attacks.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "cookie_session_no_secure": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/session/middleware.js",
          "match_lines": [
            33,
            46
          ],
          "match_position": [
            27,
            11
          ],
          "match_string": "        UNO_SESSIONIONA = session({\n            store: new SessionStore(models.Session),\n            secret: settingsCache.get('session_secret'),\n            resave: false,\n            saveUninitialized: false,\n            name: 'ghost-admin-api-session',\n            cookie: {\n                maxAge: constants.SIX_MONTH_MS,\n                httpOnly: true,\n                path: urlUtils.getSubdir() + '/ghost',\n                sameSite: 'lax',\n                secure: urlUtils.isSSL(config.get('url'))\n            }\n        });"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            48,
            51
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
        "description": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "express_open_redirect": {
      "files": [
        {
          "file_path": "/src/core/server/web/shared/middlewares/image/handle-image-sizes.js",
          "match_lines": [
            15,
            16
          ],
          "match_position": [
            9,
            34
          ],
          "match_string": "        const url = req.originalUrl.replace(`/size/${requestedDimension}`, '');\n        return res.redirect(url);"
        },
        {
          "file_path": "/src/core/server/web/admin/middleware.js",
          "match_lines": [
            4,
            10
          ],
          "match_position": [
            5,
            6
          ],
          "match_string": "    const subdir = urlUtils.getSubdir(),\n        ghostPathRegex = new RegExp(`^${subdir}/ghost/(.+)`),\n        ghostPathMatch = req.originalUrl.match(ghostPathRegex);\n\n    if (ghostPathMatch) {\n        return res.redirect(urlUtils.urlJoin(urlUtils.urlFor('admin'), '#', ghostPathMatch[1]));\n    }"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            106,
            107
          ],
          "match_position": [
            13,
            38
          ],
          "match_string": "            url += '?r=' + encodeURIComponent(req.url);\n            return res.redirect(url);"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            139,
            152
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        const forward = getRedirectUrl(req.query);\n\n        if (pass === bodyPass) {\n            hasher.update(bodyPass + salt, 'utf8');\n            req.session.token = hasher.digest('hex');\n            req.session.salt = salt;\n\n            return res.redirect(urlUtils.urlFor({relativeUrl: forward}));\n        } else {\n            res.error = {\n                message: common.i18n.t('errors.middleware.privateblogging.wrongPassword')\n            };\n            return next();\n        }"
        }
      ],
      "metadata": {
        "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
        "description": "Untrusted user input in redirect() can result in Open Redirect vulnerability.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "express_xss": {
      "files": [
        {
          "file_path": "/src/core/frontend/services/sitemap/handler.js",
          "match_lines": [
            25,
            33
          ],
          "match_position": [
            9,
            53
          ],
          "match_string": "        var type = req.params.resource,\n            page = 1;\n\n        res.set({\n            'Cache-Control': 'public, max-age=' + config.get('caching:sitemap:maxAge'),\n            'Content-Type': 'text/xml'\n        });\n\n        res.send(manager.getSiteMapXml(type, page));"
        },
        {
          "file_path": "/src/core/server/services/auth/passwordreset.js",
          "match_lines": [
            131,
            143
          ],
          "match_position": [
            5,
            63
          ],
          "match_string": "    const payload = {\n        mail: [{\n            message: {\n                to: data.email,\n                subject: common.i18n.t('common.api.authentication.mail.resetPassword'),\n                html: content.html,\n                text: content.text\n            },\n            options: {}\n        }]\n    };\n\n    return mailAPI.send(payload, {context: {internal: true}});"
        }
      ],
      "metadata": {
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "join_resolve_path_traversal": {
      "files": [
        {
          "file_path": "/src/core/server/web/shared/middlewares/serve-public-file.js",
          "match_lines": [
            10,
            10
          ],
          "match_position": [
            46,
            100
          ],
          "match_string": "    const filePath = file.match(/^public/) ? path.join(publicFilePath, file.replace(/^public/, '')) : path.join(publicFilePath, file);"
        }
      ],
      "metadata": {
        "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path Traversal)",
        "description": "Path constructed with user input can result in Path Traversal. Ensure that user input does not reach `join()` or `resolve()`. ",
        "owasp": "A5: Broken Access Control",
        "severity": "WARNING"
      }
    },
    "jwt_not_revoked": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/members/index.js",
          "match_lines": [
            21,
            45
          ],
          "match_position": [
            85,
            15
          ],
          "match_string": "            UNO_MEMBERINO = membersService.api.getPublicConfig().then(({issuer}) => jwt({\n                credentialsRequired: false,\n                requestProperty: 'member',\n                audience: siteOrigin,\n                issuer,\n                algorithm: 'RS512',\n                secret(req, payload, done) {\n                    membersService.api.getPublicConfig().then(({publicKey}) => {\n                        done(null, publicKey);\n                    }).catch(done);\n                },\n                getToken(req) {\n                    if (!req.get('authorization')) {\n                        return null;\n                    }\n\n                    const [scheme, credentials] = req.get('authorization').split(/\\s+/);\n\n                    if (scheme !== 'GhostMembers') {\n                        return null;\n                    }\n\n                    return credentials;\n                }\n            }));"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "node_api_key": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/api-key/admin.js",
          "match_lines": [
            92,
            92
          ],
          "match_position": [
            24,
            64
          ],
          "match_string": "        const secret = Buffer.from(apiKey.get('secret'), 'hex');"
        },
        {
          "file_path": "/src/core/server/models/integration.js",
          "match_lines": [
            86,
            86
          ],
          "match_position": [
            16,
            56
          ],
          "match_string": "        return this.hasMany('ApiKey', 'integration_id');"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded API Key is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/core/server/lib/security/identifier.js",
          "match_lines": [
            5,
            5
          ],
          "match_position": [
            23,
            36
          ],
          "match_string": "    return Math.floor(Math.random() * (max - min + 1)) + min;"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_logic_bypass": {
      "files": [
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            78,
            78
          ],
          "match_position": [
            32,
            80
          ],
          "match_string": "        model.statusChanging = model.get('status') !== model.previous('status');"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            124,
            124
          ],
          "match_position": [
            32,
            80
          ],
          "match_string": "        model.statusChanging = model.get('status') !== model.previous('status');"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            129,
            129
          ],
          "match_position": [
            38,
            82
          ],
          "match_string": "        model.resourceTypeChanging = model.get('page') !== model.previous('page');"
        }
      ],
      "metadata": {
        "cwe": "CWE-807: Reliance on Untrusted Inputs in a Security Decision",
        "description": "User controlled data is used for application business logic decision making. This expose protected data or functionality.",
        "owasp": "A5: Broken Access Control",
        "severity": "ERROR"
      }
    },
    "node_md5": {
      "files": [
        {
          "file_path": "/src/core/server/update-check.js",
          "match_lines": [
            117,
            117
          ],
          "match_position": [
            24,
            48
          ],
          "match_string": "        data.blog_id = crypto.createHash('md5').update(blogId).digest('hex');"
        },
        {
          "file_path": "/src/core/server/lib/image/gravatar.js",
          "match_lines": [
            8,
            8
          ],
          "match_position": [
            9,
            33
          ],
          "match_string": "        crypto.createHash('md5').update(userData.email.toLowerCase().trim()).digest('hex') +"
        },
        {
          "file_path": "/src/core/frontend/services/rss/cache.js",
          "match_lines": [
            6,
            6
          ],
          "match_position": [
            20,
            44
          ],
          "match_string": "    var dataHash = crypto.createHash('md5').update(JSON.stringify(data)).digest('hex');"
        },
        {
          "file_path": "/src/core/frontend/meta/asset_url.js",
          "match_lines": [
            41,
            41
          ],
          "match_position": [
            34,
            58
          ],
          "match_string": "        config.set('assetHash', (crypto.createHash('md5').update(Date.now().toString()).digest('hex')).substring(0, 10));"
        },
        {
          "file_path": "/src/core/server/web/shared/middlewares/serve-favicon.js",
          "match_lines": [
            17,
            17
          ],
          "match_position": [
            23,
            47
          ],
          "match_string": "            ETag: `\"${crypto.createHash('md5').update(buf, 'utf8').digest('hex')}\"`,"
        },
        {
          "file_path": "/src/core/server/web/shared/middlewares/serve-public-file.js",
          "match_lines": [
            37,
            37
          ],
          "match_position": [
            31,
            55
          ],
          "match_string": "                    ETag: `\"${crypto.createHash('md5').update(str, 'utf8').digest('hex')}\"`,"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "MD5 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_nosqli_injection": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/auth-strategies.js",
          "match_lines": [
            43,
            67
          ],
          "match_position": [
            21,
            22
          ],
          "match_string": "                    var token = model.toJSON();\n                    if (token.expires > Date.now()) {\n                        return models.User.findOne({id: token.user_id})\n                            .then(function then(model) {\n                                if (!model) {\n                                    return done(null, false);\n                                }\n\n                                if (!model.isActive()) {\n                                    throw new common.errors.NoPermissionError({\n                                        message: common.i18n.t('errors.models.user.accountSuspended')\n                                    });\n                                }\n\n                                var user = model.toJSON(),\n                                    info = {scope: '*'};\n\n                                return done(null, {id: user.id}, info);\n                            })\n                            .catch(function (err) {\n                                return done(err);\n                            });\n                    } else {\n                        return done(null, false);\n                    }"
        },
        {
          "file_path": "/src/core/server/services/auth/auth-strategies.js",
          "match_lines": [
            45,
            45
          ],
          "match_position": [
            32,
            72
          ],
          "match_string": "                        return models.User.findOne({id: token.user_id})"
        },
        {
          "file_path": "/src/core/server/services/auth/auth-strategies.js",
          "match_lines": [
            84,
            131
          ],
          "match_position": [
            9,
            11
          ],
          "match_string": "        var inviteToken = req.body.inviteToken,\n            options = {context: {internal: true}},\n            handleInviteToken, handleSetup, handleSignIn;\n\n        // CASE: socket hangs up for example\n        if (!ghostAuthAccessToken || !profile) {\n            return done(new common.errors.NoPermissionError({\n                help: 'Please try again.'\n            }));\n        }\n\n        handleInviteToken = function handleInviteToken() {\n            var user, invite;\n            inviteToken = security.url.decodeBase64(inviteToken);\n\n            return models.Invite.findOne({token: inviteToken}, options)\n                .then(function addInviteUser(_invite) {\n                    invite = _invite;\n\n                    if (!invite) {\n                        throw new common.errors.NotFoundError({\n                            message: common.i18n.t('errors.api.invites.inviteNotFound')\n                        });\n                    }\n\n                    if (invite.get('expires') < Date.now()) {\n                        throw new common.errors.NotFoundError({\n                            message: common.i18n.t('errors.api.invites.inviteExpired')\n                        });\n                    }\n\n                    return models.User.add({\n                        email: profile.email,\n                        name: profile.name,\n                        password: security.identifier.uid(50),\n                        roles: [invite.toJSON().role_id],\n                        ghost_auth_id: profile.id,\n                        ghost_auth_access_token: ghostAuthAccessToken\n                    }, options);\n                })\n                .then(function destroyInvite(_user) {\n                    user = _user;\n                    return invite.destroy(options);\n                })\n                .then(function () {\n                    return user;\n                });\n        };"
        },
        {
          "file_path": "/src/core/server/services/auth/auth-strategies.js",
          "match_lines": [
            97,
            130
          ],
          "match_position": [
            13,
            20
          ],
          "match_string": "            inviteToken = security.url.decodeBase64(inviteToken);\n\n            return models.Invite.findOne({token: inviteToken}, options)\n                .then(function addInviteUser(_invite) {\n                    invite = _invite;\n\n                    if (!invite) {\n                        throw new common.errors.NotFoundError({\n                            message: common.i18n.t('errors.api.invites.inviteNotFound')\n                        });\n                    }\n\n                    if (invite.get('expires') < Date.now()) {\n                        throw new common.errors.NotFoundError({\n                            message: common.i18n.t('errors.api.invites.inviteExpired')\n                        });\n                    }\n\n                    return models.User.add({\n                        email: profile.email,\n                        name: profile.name,\n                        password: security.identifier.uid(50),\n                        roles: [invite.toJSON().role_id],\n                        ghost_auth_id: profile.id,\n                        ghost_auth_access_token: ghostAuthAccessToken\n                    }, options);\n                })\n                .then(function destroyInvite(_user) {\n                    user = _user;\n                    return invite.destroy(options);\n                })\n                .then(function () {\n                    return user;\n                });"
        },
        {
          "file_path": "/src/core/server/services/auth/auth-strategies.js",
          "match_lines": [
            157,
            157
          ],
          "match_position": [
            20,
            77
          ],
          "match_string": "            return models.User.findOne({ghost_auth_id: profile.id}, options)"
        },
        {
          "file_path": "/src/core/server/models/stripe-customer-subscription.js",
          "match_lines": [
            7,
            8
          ],
          "match_position": [
            9,
            95
          ],
          "match_string": "        const subscriptionId = unfilteredOptions.subscription_id;\n        const model = await this.findOne({subscription_id: subscriptionId}, unfilteredOptions);"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            824,
            844
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        let options = this.filterOptions(unfilteredOptions, 'edit', {extraAllowedProperties: ['id']});\n\n        const editPost = () => {\n            options.forUpdate = true;\n\n            return ghostBookshelf.Model.edit.call(this, data, options)\n                .then((post) => {\n                    return this.findOne({\n                        status: 'all',\n                        id: options.id\n                    }, _.merge({transacting: options.transacting}, unfilteredOptions))\n                        .then((found) => {\n                            if (found) {\n                                // Pass along the updated attributes for checking status changes\n                                found._previousAttributes = post._previousAttributes;\n                                found._changed = post._changed;\n                                return found;\n                            }\n                        });\n                });\n        };"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            831,
            834
          ],
          "match_position": [
            28,
            87
          ],
          "match_string": "                    return this.findOne({\n                        status: 'all',\n                        id: options.id\n                    }, _.merge({transacting: options.transacting}, unfilteredOptions))"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            867,
            870
          ],
          "match_position": [
            28,
            87
          ],
          "match_string": "                    return this.findOne({\n                        status: 'all',\n                        id: post.id\n                    }, _.merge({transacting: options.transacting}, unfilteredOptions));"
        },
        {
          "file_path": "/src/core/server/models/base/listeners.js",
          "match_lines": [
            12,
            12
          ],
          "match_position": [
            5,
            57
          ],
          "match_string": "    models.User.findOne({id: tokenModel.get('user_id')})"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.15/2-insert-zapier-integration.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const fixtureIntegration = utils.findModelFixtureEntry('Integration', {slug: 'zapier'});\n\n    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)\n        .then((integration) => {\n            if (!integration) {\n                return utils.addFixturesForModel({\n                    name: 'Integration',\n                    entries: [fixtureIntegration]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.15/2-insert-zapier-integration.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            80
          ],
          "match_string": "    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)"
        },
        {
          "file_path": "/src/core/server/api/v2/utils/validators/input/invites.js",
          "match_lines": [
            7,
            7
          ],
          "match_position": [
            16,
            88
          ],
          "match_string": "        return models.User.findOne({email: frame.data.invites[0].email}, frame.options)"
        },
        {
          "file_path": "/src/core/server/api/v2/invites.js",
          "match_lines": [
            111,
            111
          ],
          "match_position": [
            20,
            94
          ],
          "match_string": "            return models.Invite.findOne({email: frame.data.invites[0].email}, frame.options)"
        },
        {
          "file_path": "/src/core/server/api/v2/authentication.js",
          "match_lines": [
            180,
            182
          ],
          "match_position": [
            21,
            97
          ],
          "match_string": "                    const email = frame.data.email;\n\n                    return models.Invite.findOne({email: email, status: 'sent'}, frame.options);"
        },
        {
          "file_path": "/src/core/server/services/auth/session/middleware.js",
          "match_lines": [
            122,
            122
          ],
          "match_position": [
            9,
            55
          ],
          "match_string": "        models.User.findOne({id: req.session.user_id})"
        },
        {
          "file_path": "/src/core/server/services/invitations/accept.js",
          "match_lines": [
            7,
            10
          ],
          "match_position": [
            5,
            92
          ],
          "match_string": "    const inviteToken = security.url.decodeBase64(data.token);\n    const options = {context: {internal: true}};\n\n    let invite = await models.Invite.findOne({token: inviteToken, status: 'sent'}, options);"
        },
        {
          "file_path": "/src/core/server/services/auth/api-key/admin.js",
          "match_lines": [
            64,
            122
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const apiKeyId = decoded.header.kid;\n\n    if (!apiKeyId) {\n        return next(new common.errors.BadRequestError({\n            message: common.i18n.t('errors.middleware.auth.adminApiKidMissing'),\n            code: 'MISSING_ADMIN_API_KID'\n        }));\n    }\n\n    models.ApiKey.findOne({id: apiKeyId}).then((apiKey) => {\n        if (!apiKey) {\n            return next(new common.errors.UnauthorizedError({\n                message: common.i18n.t('errors.middleware.auth.unknownAdminApiKey'),\n                code: 'UNKNOWN_ADMIN_API_KEY'\n            }));\n        }\n\n        if (apiKey.get('type') !== 'admin') {\n            return next(new common.errors.UnauthorizedError({\n                message: common.i18n.t('errors.middleware.auth.invalidApiKeyType'),\n                code: 'INVALID_API_KEY_TYPE'\n            }));\n        }\n\n        // Decoding from hex and transforming into bytes is here to\n        // keep comparison of the bytes that are stored in the secret.\n        // Useful context:\n        // https://github.com/auth0/node-jsonwebtoken/issues/208#issuecomment-231861138\n        const secret = Buffer.from(apiKey.get('secret'), 'hex');\n\n        const {pathname} = url.parse(req.originalUrl);\n        const [hasMatch, version = 'v2', api = 'admin'] = pathname.match(/ghost\\/api\\/([^/]+)\\/([^/]+)\\/(.+)*/); // eslint-disable-line no-unused-vars\n\n        // ensure the token was meant for this api version\n        const options = Object.assign({\n            audience: new RegExp(`\\/?${version}\\/${api}\\/?$`) // eslint-disable-line no-useless-escape\n        }, JWT_OPTIONS);\n\n        try {\n            jwt.verify(token, secret, options);\n        } catch (err) {\n            if (err.name === 'TokenExpiredError' || err.name === 'JsonWebTokenError') {\n                return next(new common.errors.UnauthorizedError({\n                    message: common.i18n.t('errors.middleware.auth.invalidTokenWithMessage', {message: err.message}),\n                    code: 'INVALID_JWT',\n                    err\n                }));\n            }\n\n            // unknown error\n            return next(new common.errors.InternalServerError({err}));\n        }\n\n        // authenticated OK, store the api key on the request for later checks and logging\n        req.api_key = apiKey;\n        next();\n    }).catch((err) => {\n        next(new common.errors.InternalServerError({err}));\n    });"
        },
        {
          "file_path": "/src/core/server/services/auth/api-key/content.js",
          "match_lines": [
            17,
            39
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    let key = req.query.key;\n\n    models.ApiKey.findOne({secret: key}).then((apiKey) => {\n        if (!apiKey) {\n            return next(new common.errors.UnauthorizedError({\n                message: common.i18n.t('errors.middleware.auth.unknownContentApiKey'),\n                code: 'UNKNOWN_CONTENT_API_KEY'\n            }));\n        }\n\n        if (apiKey.get('type') !== 'content') {\n            return next(new common.errors.UnauthorizedError({\n                message: common.i18n.t('errors.middleware.auth.invalidApiKeyType'),\n                code: 'INVALID_API_KEY_TYPE'\n            }));\n        }\n\n        // authenticated OK, store the api key on the request for later checks and logging\n        req.api_key = apiKey;\n        next();\n    }).catch((err) => {\n        next(new common.errors.InternalServerError({err}));\n    });"
        },
        {
          "file_path": "/src/core/server/models/session.js",
          "match_lines": [
            53,
            70
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        const sessionId = options.session_id;\n        const sessionData = data.session_data;\n        const userId = sessionData.user_id;\n        return this.findOne({session_id: sessionId}, options)\n            .then((model) => {\n                if (model) {\n                    return this.edit({\n                        session_data: sessionData\n                    }, Object.assign(options, {\n                        id: model.id\n                    }));\n                }\n                return this.add({\n                    session_id: sessionId,\n                    session_data: sessionData,\n                    user_id: userId\n                }, options);\n            });"
        },
        {
          "file_path": "/src/core/server/models/invite.js",
          "match_lines": [
            59,
            60
          ],
          "match_position": [
            16,
            48
          ],
          "match_string": "        return ghostBookshelf.model('Role')\n            .findOne({id: unsafeAttrs.role_id})"
        },
        {
          "file_path": "/src/core/server/models/member-stripe-customer.js",
          "match_lines": [
            7,
            8
          ],
          "match_position": [
            9,
            87
          ],
          "match_string": "        const customerId = data.customer_id;\n        const model = await this.findOne({customer_id: customerId}, unfilteredOptions);"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'Admin Integration'});\n\n    return models.Role.findOne({name: apiKeyRole.name}, options)\n        .then((role) => {\n            if (!role) {\n                return utils.addFixturesForModel({\n                    name: 'Role',\n                    entries: [apiKeyRole]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            65
          ],
          "match_string": "    return models.Role.findOne({name: apiKeyRole.name}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.22/1-multiple-authors-DML.js",
          "match_lines": [
            29,
            29
          ],
          "match_position": [
            32,
            127
          ],
          "match_string": "                        return models.User.findOne({id: post.get('author_id')}, _.merge({columns: userColumns}, localOptions))"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.25/2-demo-post.js",
          "match_lines": [
            23,
            54
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const demoPost = _.cloneDeep(fixtures.models[5].entries[0]);\n\n    return models.Post.findOne({slug: demoPost.slug, status: 'all'}, localOptions)\n        .then((model) => {\n            if (model) {\n                common.logging.warn(message3);\n                return;\n            }\n\n            return models.User.findOne({id: fixtures.models[4].entries[1].id}, localOptions)\n                .then((ghostAuthor) => {\n                    if (ghostAuthor) {\n                        userId = ghostAuthor.id;\n                        return;\n                    }\n\n                    return models.User.getOwnerUser(localOptions);\n                })\n                .then((ownerUser) => {\n                    if (!userId) {\n                        userId = ownerUser.id;\n                    }\n\n                    demoPost.created_by = userId;\n                    demoPost.author_id = userId;\n\n                    return models.Post.add(demoPost, localOptions);\n                })\n                .then(() => {\n                    common.logging.info(message2);\n                });\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.25/2-demo-post.js",
          "match_lines": [
            25,
            25
          ],
          "match_position": [
            12,
            83
          ],
          "match_string": "    return models.Post.findOne({slug: demoPost.slug, status: 'all'}, localOptions)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.25/2-demo-post.js",
          "match_lines": [
            32,
            32
          ],
          "match_position": [
            20,
            93
          ],
          "match_string": "            return models.User.findOne({id: fixtures.models[4].entries[1].id}, localOptions)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.21/1-add-contributor-role.js",
          "match_lines": [
            9,
            21
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const contributorRole = utils.findModelFixtureEntry('Role', {name: 'Contributor'}),\n        message = 'Adding \"Contributor\" role to roles table';\n\n    return models.Role.findOne({name: contributorRole.name}, options)\n        .then((role) => {\n            if (!role) {\n                logging.info(message);\n                return utils.addFixturesForModel({name: 'Role', entries: [contributorRole]}, options);\n            }\n\n            logging.warn(message);\n            return Promise.resolve();\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.21/1-add-contributor-role.js",
          "match_lines": [
            12,
            12
          ],
          "match_position": [
            12,
            70
          ],
          "match_string": "    return models.Role.findOne({name: contributorRole.name}, options)"
        },
        {
          "file_path": "/src/core/server/data/importer/importers/data/tags.js",
          "match_lines": [
            42,
            42
          ],
          "match_position": [
            22,
            79
          ],
          "match_string": "            ops.push(models[this.modelName].findOne({name: obj.name}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'DB Backup Integration'});\n\n    return models.Role.findOne({name: apiKeyRole.name}, options)\n        .then((role) => {\n            if (!role) {\n                return utils.addFixturesForModel({\n                    name: 'Role',\n                    entries: [apiKeyRole]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            65
          ],
          "match_string": "    return models.Role.findOne({name: apiKeyRole.name}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.27/2-insert-db-backup-integration.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const fixtureIntegration = utils.findModelFixtureEntry('Integration', {slug: 'ghost-backup'});\n\n    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)\n        .then((integration) => {\n            if (!integration) {\n                return utils.addFixturesForModel({\n                    name: 'Integration',\n                    entries: [fixtureIntegration]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.27/2-insert-db-backup-integration.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            80
          ],
          "match_string": "    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.7/1-add-backup-client.js",
          "match_lines": [
            1,
            30
          ],
          "match_position": [
            1,
            3
          ],
          "match_string": "const models = require('../../../../models'),\n    common = require('../../../../lib/common'),\n    fixtures = require('../../../schema/fixtures'),\n    _ = require('lodash'),\n    backupClient = fixtures.utils.findModelFixtureEntry('Client', {slug: 'ghost-backup'}),\n    Promise = require('bluebird'),\n    message = 'Adding \"Ghost Backup\" fixture into clients table',\n    message1 = 'Removing \"Ghost Backup\" fixture into clients table';\n\nmodule.exports.config = {\n    transaction: true\n};\n\nmodule.exports.up = function addGhostBackupClient(options) {\n    var localOptions = _.merge({\n        context: {internal: true}\n    }, options);\n\n    return models.Client\n        .findOne({slug: backupClient.slug}, localOptions)\n        .then(function (client) {\n            if (!client) {\n                common.logging.info(message);\n                return fixtures.utils.addFixturesForModel({name: 'Client', entries: [backupClient]}, localOptions);\n            } else {\n                common.logging.warn(message);\n                return Promise.resolve();\n            }\n        });\n};"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.7/1-add-backup-client.js",
          "match_lines": [
            1,
            48
          ],
          "match_position": [
            1,
            3
          ],
          "match_string": "const models = require('../../../../models'),\n    common = require('../../../../lib/common'),\n    fixtures = require('../../../schema/fixtures'),\n    _ = require('lodash'),\n    backupClient = fixtures.utils.findModelFixtureEntry('Client', {slug: 'ghost-backup'}),\n    Promise = require('bluebird'),\n    message = 'Adding \"Ghost Backup\" fixture into clients table',\n    message1 = 'Removing \"Ghost Backup\" fixture into clients table';\n\nmodule.exports.config = {\n    transaction: true\n};\n\nmodule.exports.up = function addGhostBackupClient(options) {\n    var localOptions = _.merge({\n        context: {internal: true}\n    }, options);\n\n    return models.Client\n        .findOne({slug: backupClient.slug}, localOptions)\n        .then(function (client) {\n            if (!client) {\n                common.logging.info(message);\n                return fixtures.utils.addFixturesForModel({name: 'Client', entries: [backupClient]}, localOptions);\n            } else {\n                common.logging.warn(message);\n                return Promise.resolve();\n            }\n        });\n};\n\nmodule.exports.down = function removeGhostBackupClient(options) {\n    var localOptions = _.merge({\n        context: {internal: true}\n    }, options);\n\n    return models.Client\n        .findOne({slug: backupClient.slug}, localOptions)\n        .then(function (client) {\n            if (client) {\n                common.logging.info(message1);\n                return fixtures.utils.removeFixturesForModel({name: 'Client', entries: [backupClient]}, localOptions);\n            } else {\n                common.logging.warn(message1);\n                return Promise.resolve();\n            }\n        });\n};"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.7/1-add-backup-client.js",
          "match_lines": [
            19,
            20
          ],
          "match_position": [
            12,
            58
          ],
          "match_string": "    return models.Client\n        .findOne({slug: backupClient.slug}, localOptions)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.7/1-add-backup-client.js",
          "match_lines": [
            37,
            38
          ],
          "match_position": [
            12,
            58
          ],
          "match_string": "    return models.Client\n        .findOne({slug: backupClient.slug}, localOptions)"
        },
        {
          "file_path": "/src/core/server/data/importer/importers/data/clients.js",
          "match_lines": [
            43,
            43
          ],
          "match_position": [
            22,
            79
          ],
          "match_string": "            ops.push(models[this.modelName].findOne({slug: obj.slug}, options)"
        },
        {
          "file_path": "/src/core/server/data/importer/importers/data/clients.js",
          "match_lines": [
            72,
            72
          ],
          "match_position": [
            28,
            85
          ],
          "match_string": "                    return models[this.modelName].findOne({name: obj.name}, options);"
        },
        {
          "file_path": "/src/core/server/api/v0.1/invites.js",
          "match_lines": [
            73,
            73
          ],
          "match_position": [
            20,
            84
          ],
          "match_string": "            return models.Invite.findOne({id: options.id}, omit(options, ['data']))"
        },
        {
          "file_path": "/src/core/server/api/v0.1/invites.js",
          "match_lines": [
            94,
            212
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        let loggedInUser = options.context.user,\n            tasks,\n            emailData,\n            invite;\n\n        function addInvite(options) {\n            const data = options.data;\n\n            return models.Invite.add(data.invites[0], omit(options, 'data'))\n                .then((_invite) => {\n                    invite = _invite;\n\n                    return settingsAPI.read({key: 'title'});\n                })\n                .then((response) => {\n                    const adminUrl = urlUtils.urlFor('admin', true);\n\n                    emailData = {\n                        blogName: response.settings[0].value,\n                        invitedByName: loggedInUser.get('name'),\n                        invitedByEmail: loggedInUser.get('email'),\n                        // @TODO: resetLink sounds weird\n                        resetLink: urlUtils.urlJoin(adminUrl, 'signup', security.url.encodeBase64(invite.get('token')), '/')\n                    };\n\n                    return mail.utils.generateContent({data: emailData, template: 'invite-user'});\n                }).then((emailContent) => {\n                    const payload = {\n                        mail: [{\n                            message: {\n                                to: invite.get('email'),\n                                subject: common.i18n.t('common.api.users.mail.invitedByName', {\n                                    invitedByName: emailData.invitedByName,\n                                    blogName: emailData.blogName\n                                }),\n                                html: emailContent.html,\n                                text: emailContent.text\n                            },\n                            options: {}\n                        }]\n                    };\n\n                    return mailAPI.send(payload, {context: {internal: true}});\n                }).then(() => {\n                    options.id = invite.id;\n                    return models.Invite.edit({status: 'sent'}, options);\n                }).then(() => {\n                    invite.set('status', 'sent');\n                    const inviteAsJSON = invite.toJSON();\n\n                    return {\n                        invites: [inviteAsJSON]\n                    };\n                }).catch((error) => {\n                    if (error && error.errorType === 'EmailError') {\n                        const errorMessage = common.i18n.t('errors.api.invites.errorSendingEmail.error', {\n                            message: error.message\n                        });\n                        const helpText = common.i18n.t('errors.api.invites.errorSendingEmail.help');\n                        error.message = `${errorMessage} ${helpText}`;\n                        common.logging.warn(error.message);\n                    }\n\n                    return Promise.reject(error);\n                });\n        }\n\n        function destroyOldInvite(options) {\n            const data = options.data;\n\n            return models.Invite.findOne({email: data.invites[0].email}, omit(options, 'data'))\n                .then((invite) => {\n                    if (!invite) {\n                        return Promise.resolve(options);\n                    }\n\n                    return invite.destroy(options);\n                })\n                .then(() => {\n                    return options;\n                });\n        }\n\n        function validation(options) {\n            if (!options.data.invites[0].email) {\n                return Promise.reject(new common.errors.ValidationError({message: common.i18n.t('errors.api.invites.emailIsRequired')}));\n            }\n\n            if (!options.data.invites[0].role_id) {\n                return Promise.reject(new common.errors.ValidationError({message: common.i18n.t('errors.api.invites.roleIsRequired')}));\n            }\n\n            return options;\n        }\n\n        function checkIfUserExists(options) {\n            return models.User.findOne({email: options.data.invites[0].email}, options)\n                .then((user) => {\n                    if (user) {\n                        return Promise.reject(new common.errors.ValidationError({\n                            message: common.i18n.t('errors.api.users.userAlreadyRegistered')\n                        }));\n                    }\n\n                    return options;\n                });\n        }\n\n        function fetchLoggedInUser(options) {\n            return models.User.findOne({id: loggedInUser}, merge({}, omit(options, 'data'), {withRelated: ['roles']}))\n                .then((user) => {\n                    if (!user) {\n                        return Promise.reject(new common.errors.NotFoundError({message: common.i18n.t('errors.api.users.userNotFound')}));\n                    }\n\n                    loggedInUser = user;\n                    return options;\n                });\n        }"
        },
        {
          "file_path": "/src/core/server/api/v0.1/invites.js",
          "match_lines": [
            162,
            174
          ],
          "match_position": [
            13,
            20
          ],
          "match_string": "            const data = options.data;\n\n            return models.Invite.findOne({email: data.invites[0].email}, omit(options, 'data'))\n                .then((invite) => {\n                    if (!invite) {\n                        return Promise.resolve(options);\n                    }\n\n                    return invite.destroy(options);\n                })\n                .then(() => {\n                    return options;\n                });"
        },
        {
          "file_path": "/src/core/server/api/v0.1/invites.js",
          "match_lines": [
            164,
            164
          ],
          "match_position": [
            20,
            96
          ],
          "match_string": "            return models.Invite.findOne({email: data.invites[0].email}, omit(options, 'data'))"
        },
        {
          "file_path": "/src/core/server/api/v0.1/invites.js",
          "match_lines": [
            190,
            190
          ],
          "match_position": [
            20,
            88
          ],
          "match_string": "            return models.User.findOne({email: options.data.invites[0].email}, options)"
        },
        {
          "file_path": "/src/core/server/api/v0.1/mail.js",
          "match_lines": [
            111,
            111
          ],
          "match_position": [
            20,
            67
          ],
          "match_string": "            return models.User.findOne({id: options.context.user});"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            483,
            508
          ],
          "match_position": [
            17,
            20
          ],
          "match_string": "                roleId = data.roles[0].id || data.roles[0];\n\n                return user.roles().fetch().then((roles) => {\n                    // return if the role is already assigned\n                    if (roles.models[0].id === roleId) {\n                        return;\n                    }\n                    return ghostBookshelf.model('Role').findOne({id: roleId});\n                }).then((roleToAssign) => {\n                    if (roleToAssign && roleToAssign.get('name') === 'Owner') {\n                        return Promise.reject(\n                            new common.errors.ValidationError({\n                                message: common.i18n.t('errors.models.user.methodDoesNotSupportOwnerRole')\n                            })\n                        );\n                    } else {\n                        // assign all other roles\n                        return user.roles().updatePivot({role_id: roleId});\n                    }\n                }).then(() => {\n                    options.status = 'all';\n                    return self.findOne({id: user.id}, options);\n                }).then((model) => {\n                    model._changed = user._changed;\n                    return model;\n                });"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            504,
            504
          ],
          "match_position": [
            28,
            64
          ],
          "match_string": "                    return self.findOne({id: user.id}, options);"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            529,
            596
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        var options = this.filterOptions(unfilteredOptions, 'add'),\n            self = this,\n            data = _.cloneDeep(dataToClone),\n            userData = this.filterData(data),\n            roles;\n\n        // check for too many roles\n        if (data.roles && data.roles.length > 1) {\n            return Promise.reject(new common.errors.ValidationError({\n                message: common.i18n.t('errors.models.user.onlyOneRolePerUserSupported')\n            }));\n        }\n\n        function getAuthorRole() {\n            return ghostBookshelf.model('Role').findOne({name: 'Author'}, _.pick(options, 'transacting'))\n                .then(function then(authorRole) {\n                    return [authorRole.get('id')];\n                });\n        }\n\n        /**\n         * We need this default author role because of the following Ghost feature:\n         * You setup your blog and you can invite people instantly, but without choosing a role.\n         * roles: [] -> no default role (used for owner creation, see fixtures.json)\n         * roles: undefined -> default role\n         */\n        roles = data.roles;\n        delete data.roles;\n\n        return ghostBookshelf.Model.add.call(self, userData, options)\n            .then(function then(addedUser) {\n                // Assign the userData to our created user so we can pass it back\n                userData = addedUser;\n            })\n            .then(function () {\n                if (!roles) {\n                    return getAuthorRole();\n                }\n\n                return Promise.resolve(roles);\n            })\n            .then(function (_roles) {\n                roles = _roles;\n\n                // CASE: it is possible to add roles by name, by id or by object\n                if (_.isString(roles[0]) && !ObjectId.isValid(roles[0])) {\n                    return Promise.map(roles, function (roleName) {\n                        return ghostBookshelf.model('Role').findOne({\n                            name: roleName\n                        }, options);\n                    }).then(function (roleModels) {\n                        roles = [];\n\n                        _.each(roleModels, function (roleModel) {\n                            roles.push(roleModel.id);\n                        });\n                    });\n                }\n\n                return Promise.resolve();\n            })\n            .then(function () {\n                return baseUtils.attach(User, userData.id, 'roles', roles, options);\n            })\n            .then(function then() {\n                // find and return the added user\n                return self.findOne({id: userData.id, status: 'all'}, options);\n            });"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            595,
            595
          ],
          "match_position": [
            24,
            79
          ],
          "match_string": "                return self.findOne({id: userData.id, status: 'all'}, options);"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            915,
            971
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        const options = ghostBookshelf.Model.filterOptions(unfilteredOptions, 'transferOwnership');\n        let ownerRole;\n        let contextUser;\n\n        return Promise.join(\n            ghostBookshelf.model('Role').findOne({name: 'Owner'}),\n            User.findOne({id: options.context.user}, {withRelated: ['roles']})\n        )\n            .then((results) => {\n                ownerRole = results[0];\n                contextUser = results[1];\n\n                // check if user has the owner role\n                const currentRoles = contextUser.toJSON(options).roles;\n                if (!_.some(currentRoles, {id: ownerRole.id})) {\n                    return Promise.reject(new common.errors.NoPermissionError({\n                        message: common.i18n.t('errors.models.user.onlyOwnerCanTransferOwnerRole')\n                    }));\n                }\n\n                return Promise.join(ghostBookshelf.model('Role').findOne({name: 'Administrator'}),\n                    User.findOne({id: object.id}, {withRelated: ['roles']}));\n            })\n            .then((results) => {\n                const adminRole = results[0];\n                const user = results[1];\n\n                if (!user) {\n                    return Promise.reject(new common.errors.NotFoundError({\n                        message: common.i18n.t('errors.models.user.userNotFound')\n                    }));\n                }\n\n                const {roles: currentRoles, status} = user.toJSON(options);\n\n                if (!_.some(currentRoles, {id: adminRole.id})) {\n                    return Promise.reject(new common.errors.ValidationError({\n                        message: common.i18n.t('errors.models.user.onlyAdmCanBeAssignedOwnerRole')\n                    }));\n                }\n\n                if (status !== 'active') {\n                    return Promise.reject(new common.errors.ValidationError({\n                        message: common.i18n.t('errors.models.user.onlyActiveAdmCanBeAssignedOwnerRole')\n                    }));\n                }\n\n                // convert owner to admin\n                return Promise.join(contextUser.roles().updatePivot({role_id: adminRole.id}),\n                    user.roles().updatePivot({role_id: ownerRole.id}),\n                    user.id);\n            })\n            .then((results) => {\n                return Users.forge()\n                    .query('whereIn', 'id', [contextUser.id, results[2]])\n                    .fetch({withRelated: ['roles']});\n            });"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            921,
            921
          ],
          "match_position": [
            13,
            79
          ],
          "match_string": "            User.findOne({id: options.context.user}, {withRelated: ['roles']})"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            936,
            936
          ],
          "match_position": [
            21,
            76
          ],
          "match_string": "                    User.findOne({id: object.id}, {withRelated: ['roles']}));"
        },
        {
          "file_path": "/src/core/server/models/api-key.js",
          "match_lines": [
            60,
            60
          ],
          "match_position": [
            24,
            126
          ],
          "match_string": "                return Role.findOne({name: attrs.role || 'Admin Integration'}, Object.assign({}, options, {columns: ['id']}))"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js",
          "match_lines": [
            19,
            31
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'Scheduler Integration'});\n\n    return models.Role.findOne({name: apiKeyRole.name}, options)\n        .then((role) => {\n            if (!role) {\n                return utils.addFixturesForModel({\n                    name: 'Role',\n                    entries: [apiKeyRole]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js",
          "match_lines": [
            21,
            21
          ],
          "match_position": [
            12,
            65
          ],
          "match_string": "    return models.Role.findOne({name: apiKeyRole.name}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.28/4-insert-scheduler-integration.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const fixtureIntegration = utils.findModelFixtureEntry('Integration', {slug: 'ghost-scheduler'});\n\n    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)\n        .then((integration) => {\n            if (!integration) {\n                return utils.addFixturesForModel({\n                    name: 'Integration',\n                    entries: [fixtureIntegration]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.28/4-insert-scheduler-integration.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            80
          ],
          "match_string": "    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)"
        },
        {
          "file_path": "/src/core/server/api/v2/session.js",
          "match_lines": [
            14,
            14
          ],
          "match_position": [
            16,
            63
          ],
          "match_string": "        return models.User.findOne({id: options.context.user});"
        },
        {
          "file_path": "/src/core/server/api/canary/utils/validators/input/invites.js",
          "match_lines": [
            7,
            7
          ],
          "match_position": [
            16,
            88
          ],
          "match_string": "        return models.User.findOne({email: frame.data.invites[0].email}, frame.options)"
        },
        {
          "file_path": "/src/core/server/api/canary/session.js",
          "match_lines": [
            14,
            14
          ],
          "match_position": [
            16,
            63
          ],
          "match_string": "        return models.User.findOne({id: options.context.user});"
        },
        {
          "file_path": "/src/core/server/api/canary/invites.js",
          "match_lines": [
            111,
            111
          ],
          "match_position": [
            20,
            94
          ],
          "match_string": "            return models.Invite.findOne({email: frame.data.invites[0].email}, frame.options)"
        },
        {
          "file_path": "/src/core/server/api/canary/authentication.js",
          "match_lines": [
            180,
            182
          ],
          "match_position": [
            21,
            97
          ],
          "match_string": "                    const email = frame.data.email;\n\n                    return models.Invite.findOne({email: email, status: 'sent'}, frame.options);"
        }
      ],
      "metadata": {
        "cwe": "CWE-943: Improper Neutralization of Special Elements in Data Query Logic",
        "description": "Untrusted user input in findOne() function can result in NoSQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_secret": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/api-key/admin.js",
          "match_lines": [
            92,
            92
          ],
          "match_position": [
            24,
            64
          ],
          "match_string": "        const secret = Buffer.from(apiKey.get('secret'), 'hex');"
        },
        {
          "file_path": "/src/core/server/services/members/api.js",
          "match_lines": [
            166,
            166
          ],
          "match_position": [
            20,
            49
          ],
          "match_string": "    const secret = Buffer.from(hexSecret, 'hex');"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded secret is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "node_sqli_injection": {
      "files": [
        {
          "file_path": "/src/core/server/api/shared/validators/input/all.js",
          "match_lines": [
            138,
            138
          ],
          "match_position": [
            21,
            74
          ],
          "match_string": "                if (jsonpath.query(frame.data[apiConfig.docName][0], key).length === 0) {"
        },
        {
          "file_path": "/src/core/server/models/plugins/has-posts.js",
          "match_lines": [
            35,
            35
          ],
          "match_position": [
            17,
            96
          ],
          "match_string": "                this.query(addHasPostsWhere(_.result(this, 'tableName'), this.shouldHavePosts));"
        },
        {
          "file_path": "/src/core/server/models/plugins/has-posts.js",
          "match_lines": [
            47,
            47
          ],
          "match_position": [
            17,
            96
          ],
          "match_string": "                this.query(addHasPostsWhere(_.result(this, 'tableName'), this.shouldHavePosts));"
        },
        {
          "file_path": "/src/core/server/api/canary/members.js",
          "match_lines": [
            161,
            173
          ],
          "match_position": [
            44,
            23
          ],
          "match_string": "                    return Promise.resolve(api.members.add.query({\n                        data: {\n                            members: [{\n                                email: entry.email,\n                                name: entry.name,\n                                note: entry.note\n                            }]\n                        },\n                        options: {\n                            context: frame.options.context,\n                            options: {send_email: false}\n                        }\n                    })).reflect();"
        },
        {
          "file_path": "/src/core/server/api/v2/subscribers.js",
          "match_lines": [
            183,
            188
          ],
          "match_position": [
            28,
            23
          ],
          "match_string": "                    return apiv2.subscribers.add.query({\n                        data: {subscribers: [{email: entry.email}]},\n                        options: {\n                            context: frame.options.context\n                        }\n                    }).reflect();"
        },
        {
          "file_path": "/src/core/server/api/canary/subscribers.js",
          "match_lines": [
            183,
            188
          ],
          "match_position": [
            28,
            23
          ],
          "match_string": "                    return apiCanary.subscribers.add.query({\n                        data: {subscribers: [{email: entry.email}]},\n                        options: {\n                            context: frame.options.context\n                        }\n                    }).reflect();"
        }
      ],
      "metadata": {
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "description": "Untrusted input concatinated with raw SQL query can result in SQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_timing_attack": {
      "files": [
        {
          "file_path": "/src/core/server/data/validation/index.js",
          "match_lines": [
            123,
            125
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        if (badPassword === password) {\n            validationResult.isValid = false;\n        }"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            5,
            42
          ],
          "match_string": "    return hasher.digest('hex') === hash;"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            141,
            152
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        if (pass === bodyPass) {\n            hasher.update(bodyPass + salt, 'utf8');\n            req.session.token = hasher.digest('hex');\n            req.session.salt = salt;\n\n            return res.redirect(urlUtils.urlFor({relativeUrl: forward}));\n        } else {\n            res.error = {\n                message: common.i18n.t('errors.middleware.privateblogging.wrongPassword')\n            };\n            return next();\n        }"
        }
      ],
      "metadata": {
        "cwe": "CWE-208: Observable Timing Discrepancy",
        "description": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_username": {
      "files": [
        {
          "file_path": "/src/content/themes/casper/gulpfile.js",
          "match_lines": [
            103,
            103
          ],
          "match_position": [
            7,
            28
          ],
          "match_string": "const USER_AGENT = 'Casper';"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/core/server/models/tag.js",
          "match_lines": [
            44,
            44
          ],
          "match_position": [
            13,
            42
          ],
          "match_string": "        if (/^#/.test(newTag.get('name'))) {"
        },
        {
          "file_path": "/src/core/server/web/shared/middlewares/image/handle-image-sizes.js",
          "match_lines": [
            9,
            9
          ],
          "match_position": [
            10,
            39
          ],
          "match_string": "    if (!SIZE_PATH_REGEX.test(req.url)) {"
        },
        {
          "file_path": "/src/core/frontend/services/routing/middlewares/page-param.js",
          "match_lines": [
            22,
            22
          ],
          "match_position": [
            13,
            35
          ],
          "match_string": "        if (rssRegex.test(req.url)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {
    "handlebar_mustache_template": {
      "files": [
        {
          "file_path": "/src/content/themes/casper/error.hbs",
          "match_lines": [
            47,
            47
          ],
          "match_position": [
            2041,
            2051
          ],
          "match_string": "{{{rule}}}"
        },
        {
          "file_path": "/src/core/server/translations/en.json",
          "match_lines": [
            488,
            488
          ],
          "match_position": [
            26219,
            26235
          ],
          "match_string": "{{{helperName}}}"
        },
        {
          "file_path": "/src/content/themes/casper/default.hbs",
          "match_lines": [
            81,
            81
          ],
          "match_position": [
            3388,
            3409
          ],
          "match_string": "{{{block \"scripts\"}}}"
        },
        {
          "file_path": "/src/core/server/views/error.hbs",
          "match_lines": [
            43,
            43
          ],
          "match_position": [
            1842,
            1852
          ],
          "match_string": "{{{rule}}}"
        }
      ],
      "metadata": {
        "cwe": "CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "The Handlebar.js/Mustache.js template has an unescaped variable. Untrusted user input passed to this variable results in Cross Site Scripting (XSS).",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  }
}