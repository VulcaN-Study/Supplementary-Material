/src/dist/getGenerators.js-48-    if (version && !prismaPath) {
/src/dist/getGenerators.js:49:        const potentialPath = eval(`require('path').join(__dirname, '..')`);
/src/dist/getGenerators.js-50-        // for pkg we need to make an exception
##############################################
/src/dist/getGenerators.js-252-        // download
/src/dist/getGenerators.js:253:        let binaryTargetBaseDir = eval(`require('path').join(__dirname, '..')`);
/src/dist/getGenerators.js-254-        if (version !== currentVersion) {
##############################################
/src/dist/IntrospectionEngine.js-88-        try {
/src/dist/IntrospectionEngine.js:89:            result = JSON.parse(response);
/src/dist/IntrospectionEngine.js-90-        }
##############################################
/src/dist/IntrospectionEngine.js-178-                    try {
/src/dist/IntrospectionEngine.js:179:                        const json = JSON.parse(msg);
/src/dist/IntrospectionEngine.js-180-                        if (json.backtrace) {
##############################################
/src/dist/migrateEngineCommands.js-44-            try {
/src/dist/migrateEngineCommands.js:45:                json = JSON.parse(e.stdout);
/src/dist/migrateEngineCommands.js-46-            }
##############################################
/src/dist/cli/getSchema.js-277-    const sliced = stdout.slice(firstCurly, lastCurly + 1);
/src/dist/cli/getSchema.js:278:    return JSON.parse(sliced);
/src/dist/cli/getSchema.js-279-}
##############################################
/src/dist/resolveBinary.js-36-    }
/src/dist/resolveBinary.js:37:    const dir = eval('__dirname');
/src/dist/resolveBinary.js-38-    const platform = await get_platform_1.getPlatform();
##############################################
/src/dist/resolveBinary.js-64-    // to make this work, we need to copy the binary to /tmp and execute it from there
/src/dist/resolveBinary.js:65:    const dir = eval('__dirname');
/src/dist/resolveBinary.js-66-    if (dir.startsWith('/snapshot/')) {
##############################################
/src/dist/engineCommands.js-93-        const stdout = result.stdout.slice(firstCurly);
/src/dist/engineCommands.js:94:        return JSON.parse(stdout);
/src/dist/engineCommands.js-95-    }
##############################################
/src/dist/engineCommands.js-114-            try {
/src/dist/engineCommands.js:115:                json = JSON.parse(output);
/src/dist/engineCommands.js-116-            }
##############################################
/src/dist/engineCommands.js-159-        }
/src/dist/engineCommands.js:160:        const data = JSON.parse(result.stdout);
/src/dist/engineCommands.js-161-        if (((_c = (_b = (_a = data.datasources) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.provider) === null || _c === void 0 ? void 0 : _c[0]) === 'sqlite' &&
##############################################
/src/dist/engineCommands.js-172-            try {
/src/dist/engineCommands.js:173:                jsonError = JSON.parse(error);
/src/dist/engineCommands.js-174-                message = `${chalk_1.default.redBright.bold('Get config ')}\n${chalk_1.default.redBright(jsonError.message)}\n`;
##############################################
/src/dist/utils/tryLoadEnvs.js-53-    if (parsedRootEnv && envPath && areNotTheSame && fs_1.default.existsSync(envPath)) {
/src/dist/utils/tryLoadEnvs.js:54:        const envConfig = dotenv_1.default.parse(fs_1.default.readFileSync(envPath));
/src/dist/utils/tryLoadEnvs.js-55-        const conflicts = [];
##############################################
/src/dist/utils/getEnvPaths.js-51-            try {
/src/dist/utils/getEnvPaths.js:52:                const pkg = JSON.parse(fs_1.default.readFileSync(pkgPath, 'utf8'));
/src/dist/utils/getEnvPaths.js-53-                if (pkg['name'] !== '.prisma/client') {
