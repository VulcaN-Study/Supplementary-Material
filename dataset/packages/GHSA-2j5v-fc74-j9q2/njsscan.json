{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 11,
          "line": 2
        },
        "extra": {
          "line": "\t\"esnext\": true,\r",
          "message": "Syntax error"
        },
        "path": "/src/.jshintrc",
        "start": {
          "col": 10,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 10,
          "line": 15
        },
        "extra": {
          "line": "css/*.map",
          "message": "Lexical error: end of file in comment"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 10,
          "line": 15
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 8,
          "line": 1
        },
        "extra": {
          "line": "The MIT License (MIT)",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 4,
          "line": 10
        },
        "extra": {
          "line": "Ad\u00e1n Lobato",
          "message": "Lexical error: unrecognised symbol, in token rule:\ufffd"
        },
        "path": "/src/lib/codemirror/AUTHORS",
        "start": {
          "col": 3,
          "line": 10
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 49,
          "line": 1
        },
        "extra": {
          "line": "Copyright (C) 2014 by Marijn Haverbeke <marijnh@gmail.com> and others",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/lib/codemirror/LICENSE",
        "start": {
          "col": 48,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/plugins/emoji-dialog/emoji-dialog.js",
          "match_lines": [
            274,
            274
          ],
          "match_position": [
            43,
            54
          ],
          "match_string": "\t\t\t\t$.getJSON(path + \"emoji.json?temp=\" + Math.random(), function(json) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_timing_attack": {
      "files": [
        {
          "file_path": "/src/lib/codemirror/addon/fold/brace-fold.js",
          "match_lines": [
            22,
            22
          ],
          "match_position": [
            9,
            29
          ],
          "match_string": "        if (pass == 1) break;"
        },
        {
          "file_path": "/src/lib/codemirror/addon/fold/comment-fold.js",
          "match_lines": [
            25,
            25
          ],
          "match_position": [
            7,
            28
          ],
          "match_string": "      if (pass == 1) return;"
        }
      ],
      "metadata": {
        "cwe": "CWE-208: Observable Timing Discrepancy",
        "description": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/lib/codemirror/mode/ruby/ruby.js",
          "match_lines": [
            200,
            200
          ],
          "match_position": [
            22,
            46
          ],
          "match_string": "          } else if (/[@\\$]/.test(stream.peek())) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/ruby/ruby.js",
          "match_lines": [
            239,
            244
          ],
          "match_position": [
            9,
            23
          ],
          "match_string": "        var word = stream.current();\n\n        style = state.lastTok == \".\" ? \"property\"\n\n          : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n\n          : /^[A-Z]/.test(word) ? \"tag\"\n\n          : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n\n          : \"variable\";"
        },
        {
          "file_path": "/src/lib/codemirror/mode/lua/lua.js",
          "match_lines": [
            87,
            87
          ],
          "match_position": [
            22,
            46
          ],
          "match_string": "    if (ch == \"[\" && /[\\[=]/.test(stream.peek()))"
        },
        {
          "file_path": "/src/lib/codemirror/mode/clojure/clojure.js",
          "match_lines": [
            92,
            92
          ],
          "match_position": [
            14,
            33
          ],
          "match_string": "        if ( tests.digit.test(ch) ) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/clojure/clojure.js",
          "match_lines": [
            169,
            169
          ],
          "match_position": [
            48,
            85
          ],
          "match_string": "                    } else if (ch == \"'\" && !( tests.digit_or_colon.test(stream.peek()) )) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/cobol/cobol.js",
          "match_lines": [
            161,
            161
          ],
          "match_position": [
            10,
            29
          ],
          "match_string": "    if ( tests.digit.test(ch) ) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/cobol/cobol.js",
          "match_lines": [
            219,
            219
          ],
          "match_position": [
            36,
            73
          ],
          "match_string": "        } else if (ch == \"'\" && !( tests.digit_or_colon.test(stream.peek()) )) {"
        },
        {
          "file_path": "/src/lib/codemirror/addon/hint/xml-hint.js",
          "match_lines": [
            20,
            28
          ],
          "match_position": [
            5,
            68
          ],
          "match_string": "    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n\n    if (token.end > cur.ch) {\n\n      token.end = cur.ch;\n\n      token.string = token.string.slice(0, cur.ch - token.start);\n\n    }\n\n    var inner = CodeMirror.innerMode(cm.getMode(), token.state);\n\n    if (inner.mode.name != \"xml\") return;\n\n    var result = [], replaceToken = false, prefix;\n\n    var tag = /\\btag\\b/.test(token.type) && !/>$/.test(token.string);"
        },
        {
          "file_path": "/src/lib/codemirror/addon/hint/xml-hint.js",
          "match_lines": [
            20,
            29
          ],
          "match_position": [
            5,
            49
          ],
          "match_string": "    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n\n    if (token.end > cur.ch) {\n\n      token.end = cur.ch;\n\n      token.string = token.string.slice(0, cur.ch - token.start);\n\n    }\n\n    var inner = CodeMirror.innerMode(cm.getMode(), token.state);\n\n    if (inner.mode.name != \"xml\") return;\n\n    var result = [], replaceToken = false, prefix;\n\n    var tag = /\\btag\\b/.test(token.type) && !/>$/.test(token.string);\n\n    var tagName = tag && /^\\w/.test(token.string), tagStart;"
        },
        {
          "file_path": "/src/lib/codemirror/addon/fold/comment-fold.js",
          "match_lines": [
            31,
            31
          ],
          "match_position": [
            9,
            72
          ],
          "match_string": "    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1)))) {"
        },
        {
          "file_path": "/src/editormd.amd.js",
          "match_lines": [
            3621,
            3621
          ],
          "match_position": [
            17,
            37
          ],
          "match_string": "            if (hasLinkReg.test(text))"
        },
        {
          "file_path": "/src/editormd.amd.js",
          "match_lines": [
            3643,
            3643
          ],
          "match_position": [
            29,
            59
          ],
          "match_string": "            var isChinese = /^[\\u4e00-\\u9fa5]+$/.test(text);"
        },
        {
          "file_path": "/src/editormd.js",
          "match_lines": [
            3551,
            3551
          ],
          "match_position": [
            17,
            37
          ],
          "match_string": "            if (hasLinkReg.test(text))"
        },
        {
          "file_path": "/src/editormd.js",
          "match_lines": [
            3573,
            3573
          ],
          "match_position": [
            29,
            59
          ],
          "match_string": "            var isChinese = /^[\\u4e00-\\u9fa5]+$/.test(text);"
        },
        {
          "file_path": "/src/src/editormd.js",
          "match_lines": [
            3539,
            3539
          ],
          "match_position": [
            17,
            37
          ],
          "match_string": "            if (hasLinkReg.test(text))"
        },
        {
          "file_path": "/src/src/editormd.js",
          "match_lines": [
            3561,
            3561
          ],
          "match_position": [
            29,
            59
          ],
          "match_string": "            var isChinese = /^[\\u4e00-\\u9fa5]+$/.test(text);"
        },
        {
          "file_path": "/src/tests/qunit/qunit-1.16.0.js",
          "match_lines": [
            540,
            540
          ],
          "match_position": [
            8,
            37
          ],
          "match_string": "\t\tif ( /qunit.js$/.test( e.sourceURL ) ) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/verilog/verilog.js",
          "match_lines": [
            432,
            432
          ],
          "match_position": [
            32,
            57
          ],
          "match_string": "        if ((stream.sol()) && (/\\\\SV/.test(stream.string))) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/verilog/verilog.js",
          "match_lines": [
            433,
            433
          ],
          "match_position": [
            22,
            56
          ],
          "match_string": "          curPunc = (/\\\\SVX_version/.test(stream.string))"
        },
        {
          "file_path": "/src/lib/codemirror/mode/shell/shell.js",
          "match_lines": [
            74,
            74
          ],
          "match_position": [
            27,
            48
          ],
          "match_string": "      if(stream.eol() || !/\\w/.test(stream.peek())) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/http/http.js",
          "match_lines": [
            25,
            25
          ],
          "match_position": [
            43,
            67
          ],
          "match_string": "    } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/eiffel/eiffel.js",
          "match_lines": [
            143,
            152
          ],
          "match_position": [
            9,
            23
          ],
          "match_string": "        var word = stream.current();\n\n        style = keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n\n          : operators.propertyIsEnumerable(stream.current()) ? \"operator\"\n\n          : /^[A-Z][A-Z_0-9]*$/g.test(word) ? \"tag\"\n\n          : /^0[bB][0-1]+$/g.test(word) ? \"number\"\n\n          : /^0[cC][0-7]+$/g.test(word) ? \"number\"\n\n          : /^0[xX][a-fA-F0-9]+$/g.test(word) ? \"number\"\n\n          : /^([0-9]+\\.[0-9]*)|([0-9]*\\.[0-9]+)$/g.test(word) ? \"number\"\n\n          : /^[0-9]+$/g.test(word) ? \"number\"\n\n          : \"variable\";"
        },
        {
          "file_path": "/src/lib/codemirror/mode/erlang/erlang.js",
          "match_lines": [
            295,
            295
          ],
          "match_position": [
            41,
            63
          ],
          "match_string": "    if (stream.current().length == 1 && re.test(stream.current())) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/erlang/erlang.js",
          "match_lines": [
            297,
            297
          ],
          "match_position": [
            14,
            33
          ],
          "match_string": "      while (re.test(stream.peek())) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/erlang/erlang.js",
          "match_lines": [
            309,
            309
          ],
          "match_position": [
            41,
            63
          ],
          "match_string": "    if (stream.current().length == 1 && re.test(stream.current())) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/erlang/erlang.js",
          "match_lines": [
            310,
            310
          ],
          "match_position": [
            14,
            33
          ],
          "match_string": "      while (re.test(stream.peek())) {"
        },
        {
          "file_path": "/src/lib/codemirror/addon/wrap/hardwrap.js",
          "match_lines": [
            34,
            34
          ],
          "match_position": [
            11,
            48
          ],
          "match_string": "      if (wrapOn.test(text.slice(at - 1, at + 1))) break;"
        },
        {
          "file_path": "/src/lib/codemirror/addon/search/match-highlighter.js",
          "match_lines": [
            115,
            115
          ],
          "match_position": [
            31,
            76
          ],
          "match_string": "    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&"
        },
        {
          "file_path": "/src/lib/codemirror/addon/search/match-highlighter.js",
          "match_lines": [
            116,
            116
          ],
          "match_position": [
            47,
            86
          ],
          "match_string": "      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));"
        },
        {
          "file_path": "/src/lib/codemirror/addon/runmode/colorize.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            11,
            37
          ],
          "match_string": "      if (isBlock.test(node.nodeType)) out.push(\"\\n\");"
        },
        {
          "file_path": "/src/lib/codemirror/mode/yaml/yaml.js",
          "match_lines": [
            25,
            25
          ],
          "match_position": [
            44,
            89
          ],
          "match_string": "      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/tiddlywiki.js",
          "match_lines": [
            148,
            148
          ],
          "match_position": [
            11,
            35
          ],
          "match_string": "      if (/[ti]/i.test(stream.peek()) && stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i)) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/smalltalk/smalltalk.js",
          "match_lines": [
            43,
            96
          ],
          "match_position": [
            5,
            39
          ],
          "match_string": "    var aChar = stream.next();\n\n\n\n    if (aChar === '\"') {\n\n      token = nextComment(stream, new Context(nextComment, context));\n\n\n\n    } else if (aChar === '\\'') {\n\n      token = nextString(stream, new Context(nextString, context));\n\n\n\n    } else if (aChar === '#') {\n\n      if (stream.peek() === '\\'') {\n\n        stream.next();\n\n        token = nextSymbol(stream, new Context(nextSymbol, context));\n\n      } else {\n\n        if (stream.eatWhile(/[^\\s.{}\\[\\]()]/))\n\n          token.name = 'string-2';\n\n        else\n\n          token.name = 'meta';\n\n      }\n\n\n\n    } else if (aChar === '$') {\n\n      if (stream.next() === '<') {\n\n        stream.eatWhile(/[^\\s>]/);\n\n        stream.next();\n\n      }\n\n      token.name = 'string-2';\n\n\n\n    } else if (aChar === '|' && state.expectVariable) {\n\n      token.context = new Context(nextTemporaries, context);\n\n\n\n    } else if (/[\\[\\]{}()]/.test(aChar)) {\n\n      token.name = 'bracket';\n\n      token.eos = /[\\[{(]/.test(aChar);\n\n\n\n      if (aChar === '[') {\n\n        state.indentation++;\n\n      } else if (aChar === ']') {\n\n        state.indentation = Math.max(0, state.indentation - 1);\n\n      }\n\n\n\n    } else if (specialChars.test(aChar)) {\n\n      stream.eatWhile(specialChars);\n\n      token.name = 'operator';\n\n      token.eos = aChar !== ';'; // ; cascaded message expression\n\n\n\n    } else if (/\\d/.test(aChar)) {\n\n      stream.eatWhile(/[\\w\\d]/);\n\n      token.name = 'number';\n\n\n\n    } else if (/[\\w_]/.test(aChar)) {\n\n      stream.eatWhile(/[\\w\\d_]/);\n\n      token.name = state.expectVariable ? (keywords.test(stream.current()) ? 'keyword' : 'variable') : null;\n\n\n\n    } else {\n\n      token.eos = state.expectVariable;"
        },
        {
          "file_path": "/src/lib/codemirror/mode/smalltalk/smalltalk.js",
          "match_lines": [
            93,
            93
          ],
          "match_position": [
            44,
            72
          ],
          "match_string": "      token.name = state.expectVariable ? (keywords.test(stream.current()) ? 'keyword' : 'variable') : null;"
        },
        {
          "file_path": "/src/lib/codemirror/mode/smarty/smarty.js",
          "match_lines": [
            69,
            69
          ],
          "match_position": [
            40,
            61
          ],
          "match_string": "          var isFollowedByWhitespace = /\\s/.test(stream.peek());"
        },
        {
          "file_path": "/src/lib/codemirror/mode/q/q.js",
          "match_lines": [
            21,
            52
          ],
          "match_position": [
            5,
            74
          ],
          "match_string": "    var sol=stream.sol(),c=stream.next();\n\n    curPunc=null;\n\n    if(sol)\n\n      if(c==\"/\")\n\n        return(state.tokenize=tokenLineComment)(stream,state);\n\n      else if(c==\"\\\\\"){\n\n        if(stream.eol()||/\\s/.test(stream.peek()))\n\n          return stream.skipToEnd(),/^\\\\\\s*$/.test(stream.current())?(state.tokenize=tokenCommentToEOF)(stream, state):state.tokenize=tokenBase,\"comment\";\n\n        else\n\n          return state.tokenize=tokenBase,\"builtin\";\n\n      }\n\n    if(/\\s/.test(c))\n\n      return stream.peek()==\"/\"?(stream.skipToEnd(),\"comment\"):\"whitespace\";\n\n    if(c=='\"')\n\n      return(state.tokenize=tokenString)(stream,state);\n\n    if(c=='`')\n\n      return stream.eatWhile(/[A-Z|a-z|\\d|_|:|\\/|\\.]/),\"symbol\";\n\n    if((\".\"==c&&/\\d/.test(stream.peek()))||/\\d/.test(c)){\n\n      var t=null;\n\n      stream.backUp(1);\n\n      if(stream.match(/^\\d{4}\\.\\d{2}(m|\\.\\d{2}([D|T](\\d{2}(:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?)?)?)?)/)\n\n      || stream.match(/^\\d+D(\\d{2}(:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?)?)/)\n\n      || stream.match(/^\\d{2}:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?/)\n\n      || stream.match(/^\\d+[ptuv]{1}/))\n\n        t=\"temporal\";\n\n      else if(stream.match(/^0[NwW]{1}/)\n\n      || stream.match(/^0x[\\d|a-f|A-F]*/)\n\n      || stream.match(/^[0|1]+[b]{1}/)\n\n      || stream.match(/^\\d+[chijn]{1}/)\n\n      || stream.match(/-?\\d*(\\.\\d*)?(e[+\\-]?\\d+)?(e|f)?/))\n\n        t=\"number\";\n\n      return(t&&(!(c=stream.peek())||E.test(c)))?t:(stream.next(),\"error\");"
        },
        {
          "file_path": "/src/lib/codemirror/mode/q/q.js",
          "match_lines": [
            27,
            27
          ],
          "match_position": [
            26,
            47
          ],
          "match_string": "        if(stream.eol()||/\\s/.test(stream.peek()))"
        },
        {
          "file_path": "/src/lib/codemirror/mode/q/q.js",
          "match_lines": [
            28,
            28
          ],
          "match_position": [
            37,
            66
          ],
          "match_string": "          return stream.skipToEnd(),/^\\\\\\s*$/.test(stream.current())?(state.tokenize=tokenCommentToEOF)(stream, state):state.tokenize=tokenBase,\"comment\";"
        },
        {
          "file_path": "/src/lib/codemirror/mode/q/q.js",
          "match_lines": [
            38,
            38
          ],
          "match_position": [
            17,
            38
          ],
          "match_string": "    if((\".\"==c&&/\\d/.test(stream.peek()))||/\\d/.test(c)){"
        },
        {
          "file_path": "/src/lib/codemirror/mode/q/q.js",
          "match_lines": [
            55,
            55
          ],
          "match_position": [
            51,
            79
          ],
          "match_string": "      return stream.eatWhile(/[A-Z|a-z|\\.|_|\\d]/),keywords.test(stream.current())?\"keyword\":\"variable\";"
        },
        {
          "file_path": "/src/lib/codemirror/mode/q/q.js",
          "match_lines": [
            63,
            63
          ],
          "match_position": [
            31,
            59
          ],
          "match_string": "    return stream.skipToEnd(),/\\/\\s*$/.test(stream.current())?(state.tokenize=tokenBlockComment)(stream,state):(state.tokenize=tokenBase),\"comment\";"
        },
        {
          "file_path": "/src/lib/codemirror/mode/q/q.js",
          "match_lines": [
            68,
            68
          ],
          "match_position": [
            11,
            40
          ],
          "match_string": "    if(f&&/^\\\\\\s*$/.test(stream.current()))"
        },
        {
          "file_path": "/src/lib/codemirror/mode/modelica/modelica.js",
          "match_lines": [
            145,
            145
          ],
          "match_position": [
            17,
            57
          ],
          "match_string": "        else if(isDoubleOperatorChar.test(ch+stream.peek())) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/commonlisp/commonlisp.js",
          "match_lines": [
            95,
            95
          ],
          "match_position": [
            35,
            65
          ],
          "match_string": "          if (type == \"symbol\" && assumeBody.test(stream.current()))"
        },
        {
          "file_path": "/src/lib/codemirror/mode/css/css.js",
          "match_lines": [
            59,
            59
          ],
          "match_position": [
            11,
            35
          ],
          "match_string": "      if (/[\\d.]/.test(stream.peek())) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/css/css.js",
          "match_lines": [
            160,
            160
          ],
          "match_position": [
            16,
            62
          ],
          "match_string": "    } else if (/@(media|supports|(-moz-)?document)/.test(type)) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/css/css.js",
          "match_lines": [
            162,
            162
          ],
          "match_position": [
            16,
            54
          ],
          "match_string": "    } else if (/@(font-face|counter-style)/.test(type)) {"
        },
        {
          "file_path": "/src/lib/codemirror/mode/css/css.js",
          "match_lines": [
            165,
            165
          ],
          "match_position": [
            16,
            62
          ],
          "match_string": "    } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {"
        },
        {
          "file_path": "/src/lib/codemirror/addon/fold/markdown-fold.js",
          "match_lines": [
            18,
            19
          ],
          "match_position": [
            5,
            52
          ],
          "match_string": "    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n\n    return tokentype && /\\bheader\\b/.test(tokentype);"
        },
        {
          "file_path": "/src/lib/codemirror/addon/fold/xml-fold.js",
          "match_lines": [
            29,
            30
          ],
          "match_position": [
            5,
            39
          ],
          "match_string": "    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n\n    return type && /\\btag\\b/.test(type);"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {
    "handlebar_mustache_template": {
      "files": [
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            3630,
            3640
          ],
          "match_string": "{{{<br>}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            4179,
            4199
          ],
          "match_string": "{{{\"\"\"WikiWord\"\"\"}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            2552,
            2559
          ],
          "match_string": "{{{~}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            3670,
            3680
          ],
          "match_string": "{{{----}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            2940,
            2965
          ],
          "match_string": "{{{~}}}): {{{~WikiWord}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            2449,
            2456
          ],
          "match_string": "{{{>}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            3949,
            3970
          ],
          "match_string": "{{{/%}}} and {{{%/}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            1434,
            1452
          ],
          "match_string": "{{{preformatted}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            3167,
            3199
          ],
          "match_string": "{{{|}}}): {{{[[title|target]]}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            3054,
            3076
          ],
          "match_string": "{{{[[tiddler name]]}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            3809,
            3828
          ],
          "match_string": "{{{<<macroName>>}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            3585,
            3609
          ],
          "match_string": "{{{<html> ... </html>}}}"
        },
        {
          "file_path": "/src/lib/codemirror/mode/tiddlywiki/index.html",
          "match_position": [
            3295,
            3344
          ],
          "match_string": "{{{@@CssProperty:value;CssProperty:value;...@@}}}"
        }
      ],
      "metadata": {
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "The Handlebar.js/Mustache.js template has an unescaped variable. Untrusted user input passed to this variable results in Cross Site Scripting (XSS).",
        "id": "handlebar_mustache_template",
        "input_case": "exact",
        "owasp": "A1: Injection",
        "pattern": "{{{.+}}}|{{[ ]*&[\\w]+.*}}",
        "severity": "ERROR",
        "type": "Regex"
      }
    }
  }
}
