<report_mosca>
 <Path>/src/src/rageshake/rageshake.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 152 -                  setInterval(this.flush.bind(this), FLUSH_RATE_MS);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/rageshake/rageshake.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 171 -                  // Later on we need to query everything based on an instance id.

 Line: 277 -                  const query = objectStore.index("id").openCursor(IDBKeyRange.only(id), 'prev');

 Line: 279 -                  query.onerror = (event) => {

 Line: 282 -                  query.onsuccess = (event) => {

 Line: 300 -              // To gather all the log IDs, query for all records in logslastmod.

 Line: 324 -                  const query = o.index("id").openKeyCursor(IDBKeyRange.only(id));

 Line: 325 -                  query.onsuccess = (event) => {

 Line: 414 -      const query = store.openCursor(keyRange);

 Line: 417 -          query.onerror = (event) => {

 Line: 421 -          query.onsuccess = (event) => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/boundThreepids.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 32 -              // Restructure for lookup query

 Line: 33 -              const query = threepids.map(({ medium, address }) => [medium, address]);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/FlairStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 87 -              setTimeout(() => {

 Line: 116 -          this._debounceTimeoutID = setTimeout(() => {

 Line: 210 -          setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/CustomRoomTagStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -  import RoomListStore, {LISTS_UPDATE_EVENT} from "./room-list/RoomListStore";

 Line: 64 -          RoomListStore.instance.on(LISTS_UPDATE_EVENT, this._onListsUpdated);

 Line: 132 -                  RoomListStore.instance.off(LISTS_UPDATE_EVENT, this._onListsUpdated);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/auth/CountryDropdown.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -          query = query.slice(1);

 Line: 37 -      if (country.iso2 == query.toUpperCase()) return true;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/messages/TextualBody.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 117 -                  setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/dialogs/DevtoolsDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 639 -          const id = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/dialogs/DevtoolsDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 35 -  import {UPDATE_EVENT} from "../../../stores/AsyncStore";

 Line: 252 -          query: PropTypes.string,

 Line: 256 -      static filterChildren(children, query) {

 Line: 258 -          const lcQuery = query.toLowerCase();

 Line: 348 -              queryEventType: '',

 Line: 349 -              queryStateKey: '',

 Line: 382 -          this.setState({ queryEventType: filterEventType });

 Line: 386 -          this.setState({ queryStateKey: filterStateKey });

 Line: 416 -              list = <FilteredList query={this.state.queryEventType} onChange={this.onQueryEventType}>

 Line: 435 -              list = <FilteredList query={this.state.queryStateKey} onChange={this.onQueryStateKey}>

 Line: 480 -              queryEventType: '',

 Line: 516 -          this.setState({ queryEventType });

 Line: 559 -                  <FilteredList query={this.state.queryEventType} onChange={this.onQueryEventType}>

 Line: 596 -              query: '',

 Line: 601 -          this.setState({ query });

 Line: 607 -                  <FilteredList query={this.state.query} onChange={this.onQuery}>

 Line: 714 -              query: '',

 Line: 741 -          WidgetStore.instance.on(UPDATE_EVENT, this.onWidgetStoreUpdate);

 Line: 745 -          WidgetStore.instance.off(UPDATE_EVENT, this.onWidgetStoreUpdate);

 Line: 779 -                  <FilteredList query={this.state.query} onChange={this.onQueryChange}>

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/dialogs/AddressPickerDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 186 -              this.queryChangedDebouncer = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/dialogs/AddressPickerDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 98 -              // The query being searched for

 Line: 99 -              query: "",

 Line: 101 -              // auto-completion results for the current search query.

 Line: 180 -          const query = ev.target.value;

 Line: 185 -          if (query.length > 0 && query !== '@' && query.length >= 2) {

 Line: 208 -                  query: "",

 Line: 220 -              query: "",

 Line: 235 -              query: "",

 Line: 241 -          const lowerCaseQuery = query.toLowerCase();

 Line: 244 -              query,

 Line: 261 -              this._processResults(results, query);

 Line: 275 -          const lowerCaseQuery = query.toLowerCase();

 Line: 290 -          this._processResults(results, query);

 Line: 297 -          const lowerCaseQuery = query.toLowerCase();

 Line: 347 -          this._processResults(sortedResults, query);

 Line: 356 -              query,

 Line: 360 -              term: query,

 Line: 362 -              // The query might have changed since we sent the request, so ignore

 Line: 363 -              // responses for anything other than the latest query.

 Line: 364 -              if (this.state.query !== query) {

 Line: 367 -              this._processResults(resp.results, query);

 Line: 389 -              query,

 Line: 392 -          const queryLowercase = query.toLowerCase();

 Line: 408 -          this._processResults(results, query);

 Line: 411 -      _processResults(results, query) {

 Line: 452 -          // If the query is a valid address, add an entry for that

 Line: 463 -                  address: query,

 Line: 468 -                  this._lookupThreepid(addrType, query);

 Line: 516 -              query: "",

 Line: 625 -          const query = [];

 Line: 630 -                  query.push(

 Line: 641 -          // Add the query at the end

 Line: 642 -          query.push(

 Line: 719 -                      <div className="mx_AddressPickerDialog_inputContainer">{ query }</div>

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/groups/GroupRoomList.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 101 -          query = (query || "").toLowerCase();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/groups/GroupMemberList.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 110 -          query = (query || "").toLowerCase();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/elements/LanguageDropdown.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -      if (language.value.toUpperCase() === query.toUpperCase()) return true;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/elements/AppPermission.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -          // HACK: We're relying on the query params when we should be relying on the widget's `data`.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/elements/PowerSelector.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 90 -              selectValue: isCustom ? "SELECT_VALUE_CUSTOM" : newProps.value,

 Line: 95 -          const isCustom = event.target.value === "SELECT_VALUE_CUSTOM";

 Line: 147 -              options.push({ value: "SELECT_VALUE_CUSTOM", text: _t("Custom level") });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/elements/Dropdown.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 113 -              // the current search query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/rooms/RoomPreviewBar.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 28 -  import {UPDATE_EVENT} from "../../../stores/AsyncStore";

 Line: 97 -          CommunityPrototypeStore.instance.on(UPDATE_EVENT, this._onCommunityUpdate);

 Line: 107 -          CommunityPrototypeStore.instance.off(UPDATE_EVENT, this._onCommunityUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/rooms/MessageComposer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 279 -              setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/rooms/MessageComposer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 36 -  import {UPDATE_EVENT} from "../../../stores/AsyncStore";

 Line: 260 -          WidgetStore.instance.on(UPDATE_EVENT, this._onWidgetUpdate);

 Line: 319 -          WidgetStore.instance.removeListener(UPDATE_EVENT, this._onWidgetUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/views/rooms/MemberList.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 363 -      _filterMembers(members, membership, query) {

 Line: 366 -                  query = query.toLowerCase();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/structures/ScrollPanel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 412 -              this._unfillDebouncer = setTimeout(() => {

 Line: 438 -          return new Promise(resolve => setTimeout(resolve, 1)).then(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/structures/MessagePanel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 194 -          // query, and we check this in a hot code path.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/structures/auth/SoftLogout.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 95 -          const queryParams = this.props.realQueryParams;

 Line: 96 -          const hasAllParams = queryParams && queryParams['loginToken'];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/structures/RoomDirectory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 343 -          this.filterTimeout = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/structures/RoomDirectory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 468 -          // which servers to start querying. However, there's no other way to join rooms in

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/components/structures/InteractiveAuth.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 114 -              this._intervalId = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/Searching.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -          query: body,

 Line: 106 -      // server-side next batch separately since the query is the json body of

 Line: 107 -      // the request and next_batch needs to be a query parameter.

 Line: 163 -          query: searchArgs,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/DecryptionFailureTracker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 111 -          this.checkInterval = setInterval(

 Line: 116 -          this.trackInterval = setInterval(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/async-components/views/dialogs/security/CreateSecretStorageDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 734 -              <p>{_t("Unable to query secret storage status")}</p>

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/ScalarMessaging.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 216 -      want external entities to be able to query any state event for any room, hence the

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/utils/Timer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 53 -              this._timerHandle = setTimeout(this._onTimeout, delta);

 Line: 76 -              this._timerHandle = setTimeout(this._onTimeout, this._timeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/utils/MultiInviter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 167 -                      setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/utils/UrlUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 32 -          // we ignore query / hash parts: these aren't relevant for IS server URLs

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/utils/permalinks/ElementPermalinkConstructor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 94 -          // Split optional query out of last part

 Line: 96 -          const [lastPart, query = ""] = lastPartMaybeWithQuery.split("?");

 Line: 110 -              const via = query.split(/&?via=/).filter(p => !!p);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/utils/permalinks/SpecPermalinkConstructor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 76 -                  const [roomId, query=""] = entity.split("?");

 Line: 77 -                  const via = query.split(/&?via=/g).filter(p => !!p);

 Line: 83 -              const [eventId, query=""] = eventIdAndQuery.split("?");

 Line: 84 -              const via = query.split(/&?via=/g).filter(p => !!p);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/scripts/reskindex.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 89 -      watchDebouncer = setTimeout(reskindex, 1000);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/actions/GroupActions.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 30 -     * @param {MatrixClient} matrixClient the matrix client to query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/rageshake/rageshake.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 162 -          setInterval(this.flush.bind(this), FLUSH_RATE_MS);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/rageshake/rageshake.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 178 -          // Later on we need to query everything based on an instance id.

 Line: 285 -          const query = objectStore.index("id").openCursor(IDBKeyRange.only(id), 'prev');

 Line: 288 -          query.onerror = event => {

 Line: 292 -          query.onsuccess = event => {

 Line: 313 -        // To gather all the log IDs, query for all records in logslastmod.

 Line: 333 -          const query = o.index("id").openKeyCursor(IDBKeyRange.only(id));

 Line: 335 -          query.onsuccess = event => {

 Line: 427 -    const query = store.openCursor(keyRange);

 Line: 431 -      query.onerror = event => {

 Line: 436 -      query.onsuccess = event => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/CallHandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 405 -          this.pstnSupportCheckTimer = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/boundThreepids.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -        }); // Restructure for lookup query

 Line: 44 -        const query = threepids.map(({

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/BasePlatform.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 58 -  const UPDATE_DEFER_KEY = "mx_defer_update";

 Line: 110 -      localStorage.removeItem(UPDATE_DEFER_KEY);

 Line: 139 -        const [version, deferUntil] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY));

 Line: 157 -      localStorage.setItem(UPDATE_DEFER_KEY, JSON.stringify([newVersion, date.getTime()]));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/notifications/NotificationState.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -  exports.NotificationStateSnapshot = exports.NotificationState = exports.NOTIFICATION_STATE_UPDATE = void 0;

 Line: 30 -  const NOTIFICATION_STATE_UPDATE = "update";

 Line: 31 -  exports.NOTIFICATION_STATE_UPDATE = NOTIFICATION_STATE_UPDATE;

 Line: 89 -        this.emit(NOTIFICATION_STATE_UPDATE);

 Line: 102 -      this.removeAllListeners(NOTIFICATION_STATE_UPDATE);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/notifications/ListNotificationState.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 82 -        state.off(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onRoomNotificationStateUpdate);

 Line: 87 -        state.on(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onRoomNotificationStateUpdate);

 Line: 106 -        state.off(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onRoomNotificationStateUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/FlairStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 90 -        setTimeout(() => {

 Line: 119 -      this._debounceTimeoutID = setTimeout(() => {

 Line: 217 -      setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/CustomRoomTagStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 100 -      _RoomListStore.default.instance.on(_RoomListStore.LISTS_UPDATE_EVENT, this._onListsUpdated);

 Line: 179 -            _RoomListStore.default.instance.off(_RoomListStore.LISTS_UPDATE_EVENT, this._onListsUpdated);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/WidgetStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 68 -        this.emit(_AsyncStore.UPDATE_EVENT, roomId);

 Line: 75 -        this.emit(_AsyncStore.UPDATE_EVENT, room.roomId);

 Line: 85 -        this.emit(_AsyncStore.UPDATE_EVENT, roomId);

 Line: 124 -      this.emit(_AsyncStore.UPDATE_EVENT, null); // emit for all rooms

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/AsyncStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -  exports.AsyncStore = exports.UPDATE_EVENT = void 0;

 Line: 34 -  const UPDATE_EVENT = "update";

 Line: 46 -   * All updates to the store happen on the UPDATE_EVENT event channel with the

 Line: 53 -  exports.UPDATE_EVENT = UPDATE_EVENT;

 Line: 111 -        this.emit(UPDATE_EVENT, this);

 Line: 119 -     * @param {boolean} quiet If true, the function will not raise an UPDATE_EVENT.

 Line: 130 -        if (!quiet) this.emit(UPDATE_EVENT, this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/CommunityPrototypeStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 64 -      return `${_AsyncStore.UPDATE_EVENT}:${roomId}`;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/NonUrgentToastStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -      this.emit(_AsyncStore.UPDATE_EVENT);

 Line: 69 -      this.emit(_AsyncStore.UPDATE_EVENT);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/room-list/RoomListStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 353 -          setTimeout(async () => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/room-list/RoomListStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -  exports.default = exports.RoomListStoreClass = exports.LISTS_UPDATE_EVENT = void 0;

 Line: 66 -  const LISTS_UPDATE_EVENT = "lists_update";

 Line: 67 -  exports.LISTS_UPDATE_EVENT = LISTS_UPDATE_EVENT;

 Line: 87 -        this.emit(LISTS_UPDATE_EVENT);

 Line: 110 -      this.algorithm.on(_Algorithm.LIST_UPDATED_EVENT, this.onAlgorithmListUpdated);

 Line: 136 -      this.algorithm.off(_Algorithm.LIST_UPDATED_EVENT, this.onAlgorithmListUpdated);

 Line: 139 -      this.algorithm.on(_Algorithm.LIST_UPDATED_EVENT, this.onAlgorithmListUpdated);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/room-list/algorithms/Algorithm.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -  exports.Algorithm = exports.LIST_UPDATED_EVENT = void 0;

 Line: 52 -  const LIST_UPDATED_EVENT = "list_updated_event"; // These are the causes which require a room to be known in order for us to handle them. If

 Line: 59 -  exports.LIST_UPDATED_EVENT = LIST_UPDATED_EVENT;

 Line: 204 -          this.emit(LIST_UPDATED_EVENT);

 Line: 332 -      this.emit(LIST_UPDATED_EVENT);

 Line: 391 -      this.emit(LIST_UPDATED_EVENT);

 Line: 460 -          this.emit(LIST_UPDATED_EVENT);

 Line: 509 -      this.emit(LIST_UPDATED_EVENT);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/room-list/MessagePreviewStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 184 -          this.emit(_AsyncStore.UPDATE_EVENT, this);

 Line: 193 -      this.emit(_AsyncStore.UPDATE_EVENT, this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/widgets/WidgetLayoutStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 155 -      _WidgetStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.updateFromWidgetStore);

 Line: 167 -      _WidgetStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.updateFromWidgetStore);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/local-echo/GenericEchoChamber.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -  exports.GenericEchoChamber = exports.PROPERTY_UPDATED = void 0;

 Line: 34 -  const PROPERTY_UPDATED = "property_updated";

 Line: 35 -  exports.PROPERTY_UPDATED = PROPERTY_UPDATED;

 Line: 94 -      this.emit(PROPERTY_UPDATED, key);

 Line: 103 -        this.emit(PROPERTY_UPDATED, key);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/stores/local-echo/RoomEchoChamber.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 79 -      this.emit(_GenericEchoChamber.PROPERTY_UPDATED, CachedRoomKey.NotificationVolume);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/settings/tabs/user/AppearanceUserSettingsTab.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 213 -        this.themeTimer = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/auth/CountryDropdown.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -      query = query.slice(1);

 Line: 51 -    if (country.iso2 == query.toUpperCase()) return true;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/host_signup/HostSignupContainer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 38 -    (0, _useEventEmitter.useEventEmitter)(_HostSignupStore.HostSignupStore.instance, _AsyncStore.UPDATE_EVENT, () => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/messages/TextualBody.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 204 -          setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/dialogs/InviteDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 684 -        this._debounceTimer = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/dialogs/DevtoolsDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 777 -      const id = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/dialogs/DevtoolsDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 324 -    static filterChildren(children, query) {

 Line: 326 -      const lcQuery = query.toLowerCase();

 Line: 405 -    query: _propTypes.default.string,

 Line: 426 -        queryEventType: '',

 Line: 427 -        queryStateKey: ''

 Line: 473 -        queryEventType: filterEventType

 Line: 479 -        queryStateKey: filterStateKey

 Line: 518 -          query: this.state.queryEventType,

 Line: 538 -          query: this.state.queryStateKey,

 Line: 581 -        queryEventType: ''

 Line: 629 -        queryEventType

 Line: 677 -        query: this.state.queryEventType,

 Line: 716 -      (0, _defineProperty2.default)(this, "onQuery", query => {

 Line: 718 -          query

 Line: 729 -        query: ''

 Line: 737 -        query: this.state.query,

 Line: 845 -      (0, _defineProperty2.default)(this, "onQueryChange", query => {

 Line: 847 -          query

 Line: 867 -        query: '',

 Line: 874 -      _WidgetStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onWidgetStoreUpdate);

 Line: 878 -      _WidgetStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.onWidgetStoreUpdate);

 Line: 918 -        query: this.state.query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/dialogs/AddressPickerDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 135 -          this.queryChangedDebouncer = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/dialogs/AddressPickerDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 127 -        const query = ev.target.value;

 Line: 134 -        if (query.length > 0 && query !== '@' && query.length >= 2) {

 Line: 157 -            query: "",

 Line: 168 -          query: ""

 Line: 181 -          query: ""

 Line: 232 -        // The query being searched for

 Line: 233 -        query: "",

 Line: 235 -        // auto-completion results for the current search query.

 Line: 264 -      const lowerCaseQuery = query.toLowerCase();

 Line: 267 -        query,

 Line: 288 -        this._processResults(results, query);

 Line: 302 -      const lowerCaseQuery = query.toLowerCase();

 Line: 321 -      this._processResults(results, query);

 Line: 329 -      const lowerCaseQuery = query.toLowerCase();

 Line: 379 -      this._processResults(sortedResults, query);

 Line: 389 -        query,

 Line: 394 -        term: query

 Line: 396 -        // The query might have changed since we sent the request, so ignore

 Line: 397 -        // responses for anything other than the latest query.

 Line: 398 -        if (this.state.query !== query) {

 Line: 402 -        this._processResults(resp.results, query);

 Line: 425 -        query,

 Line: 428 -      const queryLowercase = query.toLowerCase();

 Line: 444 -      this._processResults(results, query);

 Line: 447 -    _processResults(results, query) {

 Line: 488 -      }); // If the query is a valid address, add an entry for that

 Line: 504 -          address: query,

 Line: 510 -          this._lookupThreepid(addrType, query);

 Line: 559 -        query: "",

 Line: 642 -      const query = []; // create the invite list

 Line: 648 -          query.push( /*#__PURE__*/_react.default.createElement(AddressTile, {

 Line: 656 -      } // Add the query at the end

 Line: 659 -      query.push( /*#__PURE__*/_react.default.createElement("textarea", {

 Line: 745 -      }, query), error, addressSelector, this.props.extraNode, identityServer), /*#__PURE__*/_react.default.createElement(DialogButtons, {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/dialogs/ServerOfflineDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -      _EchoStore.EchoStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onEchosUpdated);

 Line: 69 -      _EchoStore.EchoStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onEchosUpdated);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/groups/GroupRoomList.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 129 -      query = (query || "").toLowerCase();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/groups/GroupMemberList.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 157 -      query = (query || "").toLowerCase();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/emojipicker/EmojiPicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 121 -        setTimeout(this.updateVisibility, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/emojipicker/EmojiPicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 237 -        query: this.state.filter,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/emojipicker/Search.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 51 -      // For some reason, neither the autoFocus nor just calling focus() here worked, so here's a setTimeout

 Line: 52 -      setTimeout(() => this.inputRef.current.focus(), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/elements/LanguageDropdown.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -    if (language.value.toUpperCase() === query.toUpperCase()) return true;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/elements/AppPermission.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 52 -      const params = new URLSearchParams(widgetUrl.search); // HACK: We're relying on the query params when we should be relying on the widget's `data`.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/elements/PowerSelector.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 44 -        const isCustom = event.target.value === "SELECT_VALUE_CUSTOM";

 Line: 111 -        selectValue: isCustom ? "SELECT_VALUE_CUSTOM" : newProps.value

 Line: 139 -          value: "SELECT_VALUE_CUSTOM",

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/elements/Dropdown.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 155 -        // the current search query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/elements/DesktopCapturerSourcePicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 117 -      // setInterval() first waits and then executes, therefore

 Line: 124 -      this.interval = setInterval(async () => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/toasts/VerificationRequestToast.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 127 -        this.intervalHandle = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/voip/CallView.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 174 -          this.controlsHideTimer = window.setTimeout(this.onControlsHideTimer, CONTROLS_HIDE_DELAY);

 Line: 209 -        this.controlsHideTimer = window.setTimeout(this.onControlsHideTimer, CONTROLS_HIDE_DELAY);

 Line: 215 -        this.controlsHideTimer = window.setTimeout(this.onControlsHideTimer, CONTROLS_HIDE_DELAY);

 Line: 343 -      this.controlsHideTimer = window.setTimeout(this.onControlsHideTimer, CONTROLS_HIDE_DELAY);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/Autocomplete.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 148 -        this.debounceCompletionsRequest = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/Autocomplete.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -  const COMPOSER_SELECTED = 0;

 Line: 67 -        if (this.countCompletions() === 0 || selectionOffset === COMPOSER_SELECTED) {

 Line: 82 -        selectionOffset: COMPOSER_SELECTED,

 Line: 121 -      this.queryRequested = query;

 Line: 133 -          selectionOffset: COMPOSER_SELECTED,

 Line: 160 -        // Only ever process the completions for the most recent query being processed

 Line: 174 -      let selectionOffset = COMPOSER_SELECTED;

 Line: 184 -          selectionOffset = COMPOSER_SELECTED;

 Line: 190 -      let hide = this.state.hide; // If `completion.command.command` is truthy, then a provider has matched with the query

 Line: 199 -        // Force complete is turned off each time since we can't edit the query in that case

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/RoomTile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 312 -      this.notificationState.on(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);

 Line: 314 -      this.roomProps.on(_GenericEchoChamber.PROPERTY_UPDATED, this.onRoomPropertyUpdate);

 Line: 378 -      this.notificationState.off(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/RoomPreviewBar.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 99 -      _CommunityPrototypeStore.CommunityPrototypeStore.instance.on(_AsyncStore.UPDATE_EVENT, this._onCommunityUpdate);

 Line: 109 -      _CommunityPrototypeStore.CommunityPrototypeStore.instance.off(_AsyncStore.UPDATE_EVENT, this._onCommunityUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/RoomListNumResults.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 36 -    (0, _useEventEmitter.useEventEmitter)(_RoomListStore.default.instance, _RoomListStore.LISTS_UPDATE_EVENT, () => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/RoomSublist.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 419 -      _RoomListStore.default.instance.on(_RoomListStore.LISTS_UPDATE_EVENT, this.onListsUpdated);

 Line: 565 -      _RoomListStore.default.instance.off(_RoomListStore.LISTS_UPDATE_EVENT, this.onListsUpdated);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/MessageComposer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 296 -          setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/MessageComposer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 316 -      _WidgetStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this._onWidgetUpdate);

 Line: 365 -      _WidgetStore.default.instance.removeListener(_AsyncStore.UPDATE_EVENT, this._onWidgetUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/BasicMessageComposer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 144 -          const query = emoticonMatch[1].replace("-", ""); // try both exact match and lower-case, this means that xd won't match xD but :P will match :p

 Line: 471 -          } else if (event.key === _Keyboard.Key.BACKSPACE || event.key === _Keyboard.Key.DELETE) {

 Line: 725 -      partCreator.setAutoCompleteCreator((0, _parts.getAutoCompleteCreator)(() => this.autocompleteRef.current, query => new Promise(resolve => this.setState({

 Line: 726 -        query

 Line: 758 -        const query = this.state.query;

 Line: 759 -        const queryLen = query.length;

 Line: 764 -          query: query,

 Line: 769 -            end: queryLen,

 Line: 770 -            start: queryLen

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/RoomBreadcrumbs.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 71 -        setTimeout(() => this.setState({

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/RoomBreadcrumbs.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 95 -      _BreadcrumbsStore.BreadcrumbsStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);

 Line: 101 -      _BreadcrumbsStore.BreadcrumbsStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/MemberList.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 422 -    _filterMembers(members, membership, query) {

 Line: 425 -          query = query.toLowerCase();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/NotificationBadge.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 58 -      this.props.notification.on(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);

 Line: 75 -      this.props.notification.off(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);

 Line: 82 -        prevProps.notification.off(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);

 Line: 85 -      this.props.notification.on(_NotificationState.NOTIFICATION_STATE_UPDATE, this.onNotificationUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/views/rooms/RoomList.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 354 -      _RoomListStore.default.instance.on(_RoomListStore.LISTS_UPDATE_EVENT, this.updateLists);

 Line: 361 -      _RoomListStore.default.instance.off(_RoomListStore.LISTS_UPDATE_EVENT, this.updateLists);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/ScrollPanel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 529 -        this._unfillDebouncer = setTimeout(() => {

 Line: 554 -      return new Promise(resolve => setTimeout(resolve, 1)).then(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/MessagePanel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 193 -      // query, and we check this in a hot code path.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/LoggedInView.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 94 -    return el.tagName === "INPUT" || el.tagName === "TEXTAREA" || el.tagName === "SELECT" || !!el.getAttribute("contenteditable");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/auth/SoftLogout.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 172 -      const queryParams = this.props.realQueryParams;

 Line: 173 -      const hasAllParams = queryParams && queryParams['loginToken'];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/auth/Registration.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 279 -          errorText: (0, _languageHandler._t)("Unable to query for supported registration methods."),

 Line: 318 -          console.log("Unable to query for supported registration methods.", e);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/NonUrgentToastContainer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -      _NonUrgentToastStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onUpdateToasts);

 Line: 52 -      _NonUrgentToastStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.onUpdateToasts);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/HomePage.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 105 -    (0, _useEventEmitter.useEventEmitter)(_OwnProfileStore.OwnProfileStore.instance, _AsyncStore.UPDATE_EVENT, () => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/RoomSearch.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 82 -          query: this.inputRef.current.value

 Line: 121 -        query: "",

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/UserMenu.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 502 -      _OwnProfileStore.OwnProfileStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onProfileUpdate);

 Line: 521 -      _OwnProfileStore.OwnProfileStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onProfileUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/RoomDirectory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 158 -        this.filterTimeout = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/RoomDirectory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 530 -      // which servers to start querying. However, there's no other way to join rooms in

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/RoomView.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1144 -      _WidgetEchoStore.default.on(_AsyncStore.UPDATE_EVENT, this.onWidgetEchoStoreUpdate);

 Line: 1146 -      _WidgetStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onWidgetStoreUpdate);

 Line: 1377 -      _WidgetEchoStore.default.removeListener(_AsyncStore.UPDATE_EVENT, this.onWidgetEchoStoreUpdate);

 Line: 1379 -      _WidgetStore.default.instance.removeListener(_AsyncStore.UPDATE_EVENT, this.onWidgetStoreUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/LeftPanel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 214 -      _BreadcrumbsStore.BreadcrumbsStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);

 Line: 216 -      _RoomListStore.default.instance.on(_RoomListStore.LISTS_UPDATE_EVENT, this.onBreadcrumbsUpdate);

 Line: 218 -      _OwnProfileStore.OwnProfileStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onBackgroundImageUpdate);

 Line: 236 -      _BreadcrumbsStore.BreadcrumbsStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);

 Line: 238 -      _RoomListStore.default.instance.off(_RoomListStore.LISTS_UPDATE_EVENT, this.onBreadcrumbsUpdate);

 Line: 240 -      _OwnProfileStore.OwnProfileStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onBackgroundImageUpdate);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/InteractiveAuth.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 140 -        this._intervalId = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/MatrixChat.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 611 -        this.accountPasswordTimer = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/structures/MatrixChat.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 701 -      } // the first thing to do is to try the token params in the query-string

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Searching.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 57 -      query: body

 Line: 104 -    // server-side next batch separately since the query is the json body of

 Line: 105 -    // the request and next_batch needs to be a query parameter.

 Line: 157 -      query: searchArgs

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/createRoom.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 300 -      setTimeout(resolve, timeout, false);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/autocomplete/QueryMatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 20 -   * Simple search matcher that matches any results with the query string anywhere

 Line: 21 -   * in the search string. Returns matches in the order the query string appears

 Line: 47 -      // query and the value being queried before matching

 Line: 52 -      // matches that are prefixed with the query.

 Line: 100 -      query = this.processQuery(query);

 Line: 103 -        query = query.replace(/[^\w]/g, '');

 Line: 128 -      } // Sort matches by where the query appeared in the search key, then by

 Line: 159 -      return query.toLowerCase();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/autocomplete/UserProvider.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 137 -      const fullMatch = command[0]; // Don't search if the query is a single "@"

 Line: 140 -        // Don't include the '@' in our search query - it's only used as a way to trigger completion

 Line: 141 -        const query = fullMatch.startsWith('@') ? fullMatch.substring(1) : fullMatch;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/autocomplete/AutocompleteProvider.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -     * Of the matched commands in the query, returns the first that contains or is contained by the selection, or null.

 Line: 66 -     * @param {string} query The query string

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/HtmlUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 510 -    // by an attempt to search for 'foobar'.  Then again, the search query probably wouldn't work either

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/emoji.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -    } // This is used as the string to match the query against when filtering emojis

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/DecryptionFailureTracker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 117 -      this.checkInterval = setInterval(() => this.checkFailures(Date.now()), DecryptionFailureTracker.CHECK_INTERVAL_MS);

 Line: 118 -      this.trackInterval = setInterval(() => this.trackFailures(), DecryptionFailureTracker.TRACK_INTERVAL_MS);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dispatcher/dispatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 63 -        setTimeout(super.dispatch.bind(this, payload), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Lifecycle.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 661 -    // (dis.dispatch uses `setTimeout`, which does not guarantee ordering.)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Lifecycle.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 116 -   * 1. if we have a guest access token in the fragment query params, it uses

 Line: 127 -   *     query-parameters extracted from the #-fragment of the starting URI.

 Line: 216 -   * @param {Object} queryParams    string->string map of the

 Line: 217 -   *     query-parameters extracted from the real query-string of the starting

 Line: 257 -      token: queryParams.loginToken,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/CountlyAnalytics.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 281 -      this.heartbeatIntervalId = setInterval(this.heartbeat.bind(this), HEARTBEAT_INTERVAL);

 Line: 661 -      this.activityIntervalId = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/CountlyAnalytics.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 45 -  const SESSION_UPDATE_INTERVAL = 60; // seconds

 Line: 487 -        if (last - this.lastBeat >= SESSION_UPDATE_INTERVAL) {

 Line: 810 -    , query

 Line: 814 -        query_length: query.length,

 Line: 815 -        query_num_words: query.split(" ").length

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/async-components/views/dialogs/security/CreateSecretStorageDialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 703 -      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Unable to query secret storage status")), /*#__PURE__*/_react.default.createElement("div", {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/effects/confetti/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 98 -          window.setTimeout(this.stop, timeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/effects/fireworks/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 73 -          window.setTimeout(this.stop, timeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/effects/snowfall/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 57 -          window.setTimeout(this.stop, timeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Keyboard.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 32 -    DELETE: "Delete",

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/emojipicker/recent.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -  const SETTING_NAME = "recent_emoji"; // we store more recents than we typically query but this lets us sort by weighted usage

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/ScalarMessaging.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 244 -      want external entities to be able to query any state event for any room, hence the

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/promise.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 37 -      setTimeout(resolve, ms, value);

 Line: 55 -      const timeoutId = setTimeout(resolve, ms, timeoutValue);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/Timer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 63 -        this._timerHandle = setTimeout(this._onTimeout, delta);

 Line: 90 -        this._timerHandle = setTimeout(this._onTimeout, this._timeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/MultiInviter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 197 -            setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/UrlUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -      // we ignore query / hash parts: these aren't relevant for IS server URLs

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/permalinks/ElementPermalinkConstructor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 148 -      } // Split optional query out of last part

 Line: 152 -      const [lastPart, query = ""] = lastPartMaybeWithQuery.split("?");

 Line: 166 -        const via = query.split(/&?via=/).filter(p => !!p);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/permalinks/SpecPermalinkConstructor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 124 -          const [roomId, query = ""] = entity.split("?");

 Line: 125 -          const via = query.split(/&?via=/g).filter(p => !!p);

 Line: 131 -        const [eventId, query = ""] = eventIdAndQuery.split("?");

 Line: 132 -        const via = query.split(/&?via=/g).filter(p => !!p);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/WidgetUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 202 -        const timerId = setTimeout(() => {

 Line: 272 -        const timerId = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/WidgetUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 595 -      const queryStringParts = ['conferenceDomain=$domain', 'conferenceId=$conferenceId', 'isAudioOnly=$isAudioOnly', 'displayName=$matrix_display_name', 'avatarUrl=$matrix_avatar_url', 'userId=$matrix_user_id', 'roomId=$matrix_room_id', 'theme=$theme'];

 Line: 598 -        queryStringParts.push(`auth=${opts.auth}`);

 Line: 601 -      const queryString = queryStringParts.join('&');

 Line: 613 -      const url = new URL("jitsi.html#" + queryString, baseUrl); // this strips hash fragment from baseUrl

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/hooks/useTimeout.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 38 -      const timeoutID = setTimeout(() => {

 Line: 61 -      const intervalID = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Analytics.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 316 -      this.heartbeatIntervalID = window.setInterval(this.ping.bind(this), HEARTBEAT_INTERVAL);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Analytics.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 51 -  // not include query parameters.

</Result>
</report_mosca>

