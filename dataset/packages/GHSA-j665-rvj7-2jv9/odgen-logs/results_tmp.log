|checker| success id$0$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$8$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$9$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$10$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$11$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$12$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$13$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$14$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$15$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$16$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$17$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$8$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$9$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$10$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$11$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$12$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$13$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$14$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$15$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$16$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$17$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$8$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$9$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$10$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$11$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$12$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$13$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$14$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$15$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$16$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$17$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$8$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$9$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$10$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$11$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$12$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$13$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$14$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$15$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$16$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$17$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$18$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$19$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$20$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$21$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$22$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$23$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$24$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$25$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$26$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$27$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$28$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$29$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$30$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$31$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$32$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$33$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$34$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$35$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$8$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$9$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$10$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$11$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$12$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$13$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$14$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$15$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$16$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$17$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$18$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$19$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$20$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$21$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$22$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$23$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$24$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$25$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$26$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$27$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$28$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$29$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$30$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$31$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$32$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$33$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$34$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$35$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$8$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$9$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$10$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$11$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$12$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$13$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$14$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$15$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$16$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$17$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$18$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$19$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$20$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$21$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$22$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$23$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$24$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$25$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$26$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$27$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$28$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$29$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 29			properties            = properties.split(',');
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$30$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 30			var properties_length = properties.length;
$FilePath$/src/mosc.js
Line 35				properties[i]     = properties[i].trim();
$FilePath$/src/mosc.js
Line 36			    property_parts    = properties[i].split(':');
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$31$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 38			    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
$FilePath$/src/mosc.js
Line 41			    property_parts[0] = property_parts[0].trim();
$FilePath$/src/mosc.js
Line 42			    var pvalue        = property_parts[1].trim();
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$32$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$33$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 17				var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$34$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 14		this.parse_properties = function (key, properties, baseObject, eval_dict)
	{
		function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}

		var propertyBase      = {}; 
		if(properties){ 
		   baseObject[key] = baseObject[key] || {}; 
		   propertyBase         = baseObject[key];
	    }else{
	    	propertyBase = baseObject;
	    	properties = key;
	    }
		properties            = properties.split(',');
		var properties_length = properties.length;
		var property_parts    = null;

		for(var i = 0; i < properties_length; i++)
		{
			properties[i]     = properties[i].trim();
		    property_parts    = properties[i].split(':');

		    emptyCheck(property_parts[0], 'Invalid key:value pair passed');
		    emptyCheck(property_parts[1], 'Invalid key:value pair passed');

		    property_parts[0] = property_parts[0].trim();
		    var pvalue        = property_parts[1].trim();
		    if(pvalue.indexOf('*') < 0){
		    	propertyBase[property_parts[0]] = pvalue;
		    }
		    else
		    {
		    	try
		    	{
		    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));
		    	}
		    	catch(e)
		    	{
		    		throw new Error('Context not found in eval_dict');
		    	}

		    }
			  
		} 
		return baseObject;
	}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

|checker| success id$35$color:green$: 
==========================
$FilePath$/src/mosc.js
Line 16			function get_eval_string(path) {
			var eval_prop = path.match(/\*([a-zA-Z_0-9]+)\*/)[1];
			return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
		}
$FilePath$/src/mosc.js
Line 18				return 'eval_dict["'+eval_prop+'"]' + path.replace(/\*[a-zA-Z_0-9]+\*/, '');
$FilePath$/src/mosc.js
Line 50			    		propertyBase[property_parts[0]] = eval(get_eval_string(pvalue));

