/src/runtime/server.mjs-770-			try {
/src/runtime/server.mjs:771:				return JSON.parse(buffer.toString());
/src/runtime/server.mjs-772-			} catch (err) {
##############################################
/src/runtime/server.mjs-2141-	const get_build_info = dev
/src/runtime/server.mjs:2142:		? () => JSON.parse(fs.readFileSync(path.join(build_dir, 'build.json'), 'utf-8'))
/src/runtime/server.mjs:2143:		: (assets => () => assets)(JSON.parse(fs.readFileSync(path.join(build_dir, 'build.json'), 'utf-8')));
/src/runtime/server.mjs-2144-
##############################################
/src/runtime/server.mjs-2168-			]
/src/runtime/server.mjs:2169:		}, req, res, statusCode, error || new Error('Unknown error in preload function'));
/src/runtime/server.mjs-2170-	}
##############################################
/src/runtime/server.mjs-2183-
/src/runtime/server.mjs:2184:		// preload main.js and current route
/src/runtime/server.mjs:2185:		// TODO detect other stuff we can preload? images, CSS, fonts?
/src/runtime/server.mjs:2186:		let preloaded_chunks = Array.isArray(build_info.assets.main) ? build_info.assets.main : [build_info.assets.main];
/src/runtime/server.mjs-2187-		if (!error && !is_service_worker_index) {
##############################################
/src/runtime/server.mjs-2191-				// using concat because it could be a string or an array. thanks webpack!
/src/runtime/server.mjs:2192:				preloaded_chunks = preloaded_chunks.concat(build_info.assets[part.name]);
/src/runtime/server.mjs-2193-			});
##############################################
/src/runtime/server.mjs-2197-			// TODO add dependencies and CSS
/src/runtime/server.mjs:2198:			const link = preloaded_chunks
/src/runtime/server.mjs-2199-				.filter(file => file && !file.match(/\.map$/))
/src/runtime/server.mjs:2200:				.map(file => `<${req.baseUrl}/client/${file}>;rel="modulepreload"`)
/src/runtime/server.mjs-2201-				.join(', ');
##############################################
/src/runtime/server.mjs-2204-		} else {
/src/runtime/server.mjs:2205:			const link = preloaded_chunks
/src/runtime/server.mjs-2206-				.filter(file => file && !file.match(/\.map$/))
##############################################
/src/runtime/server.mjs-2208-					const as = /\.css$/.test(file) ? 'style' : 'script';
/src/runtime/server.mjs:2209:					return `<${req.baseUrl}/client/${file}>;rel="preload";as="${as}"`;
/src/runtime/server.mjs-2210-				})
##############################################
/src/runtime/server.mjs-2218-		let redirect;
/src/runtime/server.mjs:2219:		let preload_error;
/src/runtime/server.mjs-2220-
/src/runtime/server.mjs:2221:		const preload_context = {
/src/runtime/server.mjs-2222-			redirect: (statusCode, location) => {
##############################################
/src/runtime/server.mjs-2229-			error: (statusCode, message) => {
/src/runtime/server.mjs:2230:				preload_error = { statusCode, message };
/src/runtime/server.mjs-2231-			},
##############################################
/src/runtime/server.mjs-2247-							{},
/src/runtime/server.mjs:2248:							cookie.parse(req.headers.cookie || ''),
/src/runtime/server.mjs:2249:							cookie.parse(opts.headers.cookie || '')
/src/runtime/server.mjs-2250-						);
##############################################
/src/runtime/server.mjs-2269-
/src/runtime/server.mjs:2270:		let preloaded;
/src/runtime/server.mjs-2271-		let match;
##############################################
/src/runtime/server.mjs-2274-		try {
/src/runtime/server.mjs:2275:			const root_preloaded = manifest.root_preload
/src/runtime/server.mjs:2276:				? manifest.root_preload.call(preload_context, {
/src/runtime/server.mjs-2277-					host: req.headers.host,
##############################################
/src/runtime/server.mjs-2286-
/src/runtime/server.mjs:2287:			let toPreload = [root_preloaded];
/src/runtime/server.mjs-2288-			if (!is_service_worker_index) {
##############################################
/src/runtime/server.mjs-2294-
/src/runtime/server.mjs:2295:					return part.preload
/src/runtime/server.mjs:2296:						? part.preload.call(preload_context, {
/src/runtime/server.mjs-2297-							host: req.headers.host,
##############################################
/src/runtime/server.mjs-2305-
/src/runtime/server.mjs:2306:			preloaded = await Promise.all(toPreload);
/src/runtime/server.mjs-2307-		} catch (err) {
##############################################
/src/runtime/server.mjs-2311-
/src/runtime/server.mjs:2312:			preload_error = { statusCode: 500, message: err };
/src/runtime/server.mjs:2313:			preloaded = []; // appease TypeScript
/src/runtime/server.mjs-2314-		}
##############################################
/src/runtime/server.mjs-2326-
/src/runtime/server.mjs:2327:			if (preload_error) {
/src/runtime/server.mjs:2328:				handle_error(req, res, preload_error.statusCode, preload_error.message);
/src/runtime/server.mjs-2329-				return;
##############################################
/src/runtime/server.mjs-2353-					},
/src/runtime/server.mjs:2354:					preloading: {
/src/runtime/server.mjs-2355-						subscribe: writable(null).subscribe
##############################################
/src/runtime/server.mjs-2362-				level0: {
/src/runtime/server.mjs:2363:					props: preloaded[0]
/src/runtime/server.mjs-2364-				},
##############################################
/src/runtime/server.mjs-2378-						component: part.component,
/src/runtime/server.mjs:2379:						props: preloaded[i + 1] || {},
/src/runtime/server.mjs-2380-						segment: segments[i]
##############################################
/src/runtime/server.mjs-2387-			const serialized = {
/src/runtime/server.mjs:2388:				preloaded: `[${preloaded.map(data => try_serialize(data)).join(',')}]`,
/src/runtime/server.mjs-2389-				session: session && try_serialize(session, err => {
##############################################
/src/runtime/server.mjs-2397-				`baseUrl:"${req.baseUrl}"`,
/src/runtime/server.mjs:2398:				serialized.preloaded && `preloaded:${serialized.preloaded}`,
/src/runtime/server.mjs-2399-				serialized.session && `session:${serialized.session}`
##############################################
/src/runtime/server.mjs-2411-					const legacy_main = `${req.baseUrl}/client/legacy/${build_info.legacy_assets.main}`;
/src/runtime/server.mjs:2412:					script += `(function(){try{eval("async function x(){}");var main="${main}"}catch(e){main="${legacy_main}"};var s=document.createElement("script");try{new Function("if(0)import('')")();s.src=main;s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main",main);}document.head.appendChild(s);}());`;
/src/runtime/server.mjs-2413-				} else {
##############################################
/src/runtime/app.mjs-4-import App from './internal/App.svelte';
/src/runtime/app.mjs:5:import { ignore, routes, root_preload, components, ErrorComponent } from './internal/manifest-client';
/src/runtime/app.mjs-6-
##############################################
/src/runtime/app.mjs-23-let current_token;
/src/runtime/app.mjs:24:let root_preloaded;
/src/runtime/app.mjs-25-let current_branch = [];
##############################################
/src/runtime/app.mjs-29-	page: writable({}),
/src/runtime/app.mjs:30:	preloading: writable(null),
/src/runtime/app.mjs-31-	session: writable(initial_data && initial_data.session)
##############################################
/src/runtime/app.mjs-127-	const { host, pathname, search } = location;
/src/runtime/app.mjs:128:	const { session, preloaded, status, error } = initial_data;
/src/runtime/app.mjs-129-
/src/runtime/app.mjs:130:	if (!root_preloaded) {
/src/runtime/app.mjs:131:		root_preloaded = preloaded && preloaded[0];
/src/runtime/app.mjs-132-	}
##############################################
/src/runtime/app.mjs-138-		level0: {
/src/runtime/app.mjs:139:			props: root_preloaded
/src/runtime/app.mjs-140-		},
##############################################
/src/runtime/app.mjs-147-		},
/src/runtime/app.mjs:148:		segments: preloaded
/src/runtime/app.mjs-149-
##############################################
/src/runtime/app.mjs-177-
/src/runtime/app.mjs:178:	if (root_component) stores.preloading.set(true);
/src/runtime/app.mjs-179-
##############################################
/src/runtime/app.mjs-216-	stores.page.set(page);
/src/runtime/app.mjs:217:	stores.preloading.set(false);
/src/runtime/app.mjs-218-
##############################################
/src/runtime/app.mjs-223-			page: { subscribe: stores.page.subscribe },
/src/runtime/app.mjs:224:			preloading: { subscribe: stores.preloading.subscribe },
/src/runtime/app.mjs-225-			session: stores.session
##############################################
/src/runtime/app.mjs-227-		props.level0 = {
/src/runtime/app.mjs:228:			props: await root_preloaded
/src/runtime/app.mjs-229-		};
##############################################
/src/runtime/app.mjs-254-function part_changed(i, segment, match, stringified_query) {
/src/runtime/app.mjs:255:	// TODO only check query string changes for preload functions
/src/runtime/app.mjs-256-	// that do in fact depend on it (using static analysis or
##############################################
/src/runtime/app.mjs-282-
/src/runtime/app.mjs:283:	const preload_context = {
/src/runtime/app.mjs-284-		fetch: (url, opts) => fetch(url, opts),
##############################################
/src/runtime/app.mjs-296-
/src/runtime/app.mjs:297:	if (!root_preloaded) {
/src/runtime/app.mjs:298:		root_preloaded = initial_data.preloaded[0] || root_preload.call(preload_context, {
/src/runtime/app.mjs-299-			host: page.host,
##############################################
/src/runtime/app.mjs-330-
/src/runtime/app.mjs:331:			const { default: component, preload } = await load_component(components[part.i]);
/src/runtime/app.mjs-332-
/src/runtime/app.mjs:333:			let preloaded;
/src/runtime/app.mjs:334:			if (ready || !initial_data.preloaded[i + 1]) {
/src/runtime/app.mjs:335:				preloaded = preload
/src/runtime/app.mjs:336:					? await preload.call(preload_context, {
/src/runtime/app.mjs-337-						host: page.host,
##############################################
/src/runtime/app.mjs-343-			} else {
/src/runtime/app.mjs:344:				preloaded = initial_data.preloaded[i + 1];
/src/runtime/app.mjs-345-			}
/src/runtime/app.mjs-346-
/src/runtime/app.mjs:347:			return (props[`level${j}`] = { component, props: preloaded, segment, match, part: part.i });
/src/runtime/app.mjs-348-		}));
##############################################
/src/runtime/internal/shared.mjs-4-
/src/runtime/internal/shared.mjs:5:export const preload = () => ({});
##############################################
/src/CHANGELOG.md-9-
/src/CHANGELOG.md:10:* Recheck whether a component has a `preload` whenever the file changes ([#611](https://github.com/sveltejs/sapper/issues/611))
/src/CHANGELOG.md-11-
##############################################
/src/CHANGELOG.md-58-
/src/CHANGELOG.md:59:* Prevent infinite loop if `preload` errors ([#677](https://github.com/sveltejs/sapper/pull/677))
/src/CHANGELOG.md-60-* Allow disabling of live reload ([#683](https://github.com/sveltejs/sapper/pull/683))
##############################################
/src/CHANGELOG.md-64-* Fix export queue ([#698](https://github.com/sveltejs/sapper/pull/698))
/src/CHANGELOG.md:65:* Rerun `preload` functions when query changes ([#701](https://github.com/sveltejs/sapper/issues/701))
/src/CHANGELOG.md-66-* Navigate when spread route changes ([#688](https://github.com/sveltejs/sapper/issues/688))
##############################################
/src/CHANGELOG.md-81-* Slot-based nested routes ([#573](https://github.com/sveltejs/sapper/issues/573))
/src/CHANGELOG.md:82:* Make `page`, `preloading` and `session` stores available to components ([#642](https://github.com/sveltejs/sapper/pull/642))
/src/CHANGELOG.md-83-* Handle missing/empty refs when exporting ([#602](https://github.com/sveltejs/sapper/issues/602))
##############################################
/src/CHANGELOG.md-85-* Fix redirects with base path ([#589](https://github.com/sveltejs/sapper/issues/589))
/src/CHANGELOG.md:86:* Add `<link rel="preload">` to exported HTML ([#568](https://github.com/sveltejs/sapper/pull/568))
/src/CHANGELOG.md-87-* Handle deep links that are invalid selectors on initial load ([#516](https://github.com/sveltejs/sapper/issues/516))
##############################################
/src/CHANGELOG.md-91-* Fix navigation from `/a/[id]` to `/b/[id]` ([#610](https://github.com/sveltejs/sapper/pull/610))
/src/CHANGELOG.md:92:* Allow `preload` functions to return falsy values ([#587](https://github.com/sveltejs/sapper/issues/587))
/src/CHANGELOG.md-93-* Mount error pages correctly ([#620](https://github.com/sveltejs/sapper/pull/620))
##############################################
/src/CHANGELOG.md-97-* Force refresh on `goto(current_url)` ([#484](https://github.com/sveltejs/sapper/pull/484))
/src/CHANGELOG.md:98:* Fix preloading navigation bug ([#532](https://github.com/sveltejs/sapper/issues/532))
/src/CHANGELOG.md-99-* Don't mutate opts.headers ([#528](https://github.com/sveltejs/sapper/issues/528))
##############################################
/src/CHANGELOG.md-113-* Include CSS chunks in webpack build info to avoid duplication ([#529](https://github.com/sveltejs/sapper/pull/529))
/src/CHANGELOG.md:114:* Fix preload `as` for styles ([#530](https://github.com/sveltejs/sapper/pull/530))
/src/CHANGELOG.md-115-
##############################################
/src/CHANGELOG.md-308-
/src/CHANGELOG.md:309:* Only set `preloading: true` on navigation, not prefetch ([#352](https://github.com/sveltejs/sapper/issues/352))
/src/CHANGELOG.md:310:* Provide fallback for missing preload errors ([#361](https://github.com/sveltejs/sapper/pull/361))
/src/CHANGELOG.md-311-
##############################################
/src/CHANGELOG.md-447-* Support per-request server-side `Store` with client-side hydration ([#178](https://github.com/sveltejs/sapper/issues/178))
/src/CHANGELOG.md:448:* Add `this.fetch` to `preload`, with credentials support ([#178](https://github.com/sveltejs/sapper/issues/178))
/src/CHANGELOG.md:449:* Exclude sourcemaps from preload links and `<script>` block ([#204](https://github.com/sveltejs/sapper/pull/204))
/src/CHANGELOG.md-450-* Register service worker in `<script>` block
##############################################
/src/CHANGELOG.md-482-
/src/CHANGELOG.md:483:* Use `devalue` instead of `serialize-javascript`, allowing `preload` to return non-POJOs and cyclical/repeated references, but *not* functions ([#112](https://github.com/sveltejs/sapper/issues/112))
/src/CHANGELOG.md-484-* Kill child process if webpack crashes ([#177](https://github.com/sveltejs/sapper/issues/177))
##############################################
/src/CHANGELOG.md-501-
/src/CHANGELOG.md:502:* Rename `preloadRoutes` to `prefetchRoutes` ([#166](https://github.com/sveltejs/sapper/issues/166))
/src/CHANGELOG.md-503-
##############################################
/src/CHANGELOG.md-510-* Update to webpack 4
/src/CHANGELOG.md:511:* Add `preloadRoutes` function — secondary routes are no longer automatically preloaded ([#160](https://github.com/sveltejs/sapper/issues/160))
/src/CHANGELOG.md-512-* `sapper build` outputs to `build`, `sapper build custom-dir` outputs to `custom-dir` ([#150](https://github.com/sveltejs/sapper/pull/150))
##############################################
/src/CHANGELOG.md-548-* Restructure app layout (see [migration guide](https://sapper.svelte.technology/guide#0-6-to-0-7)) ([#126](https://github.com/sveltejs/sapper/pull/126))
/src/CHANGELOG.md:549:* Support `this.redirect(status, location)` and `this.error(status, error)` in `preload` functions ([#127](https://github.com/sveltejs/sapper/pull/127))
/src/CHANGELOG.md-550-* Add `sapper dev` command
##############################################
/src/CHANGELOG.md-595-* DELETE requests are handled with `del` exports ([#77](https://github.com/sveltejs/sapper/issues/77))
/src/CHANGELOG.md:596:* Send preloaded data for first route to client, where possible ([#3](https://github.com/sveltejs/sapper/issues/3))
/src/CHANGELOG.md-597-
##############################################
/src/CHANGELOG.md-609-* Cancel navigation if overtaken by second navigation ([#48](https://github.com/sveltejs/sapper/issues/48))
/src/CHANGELOG.md:610:* Store preloaded data, to avoiding double prefetching ([#49](https://github.com/sveltejs/sapper/issues/49))
/src/CHANGELOG.md:611:* Pass server request object to `preload` ([#54](https://github.com/sveltejs/sapper/pull/54))
/src/CHANGELOG.md-612-* Nested routes ([#55](https://github.com/sveltejs/sapper/issues/55))
##############################################
/src/CHANGELOG.md-638-* Rebundle when routes and main.js change ([#34](https://github.com/sveltejs/sapper/pull/34))
/src/CHANGELOG.md:639:* Add `Link...preload` headers for JavaScript assets ([#2](https://github.com/sveltejs/sapper/issues/2))
/src/CHANGELOG.md-640-* Stream document up to first dynamic content ([#19](https://github.com/sveltejs/sapper/issues/19))
##############################################
/src/sapper-dev-client.js-28-	source.onmessage = function(event) {
/src/sapper-dev-client.js:29:		const data = JSON.parse(event.data);
/src/sapper-dev-client.js-30-		if (!data) return; // just a heartbeat
##############################################
/src/dist/export.js-279-			try {
/src/dist/export.js:280:				return JSON.parse(buffer.toString());
/src/dist/export.js-281-			} catch (err) {
##############################################
/src/dist/export.js-1709-function resolve(from, to) {
/src/dist/export.js:1710:	return Url.parse(Url.resolve(from, to));
/src/dist/export.js-1711-}
##############################################
/src/dist/export.js-1845-			if (type === 'text/html') {
/src/dist/export.js:1846:				// parse link rel=preload headers and embed them in the HTML
/src/dist/export.js:1847:				let link = httpLinkHeader.parse(r.headers.get('Link') || '');
/src/dist/export.js-1848-				link.refs.forEach((ref) => {
/src/dist/export.js:1849:					if (ref.rel === 'preload') {
/src/dist/export.js-1850-						body = body.replace('</head>',
/src/dist/export.js:1851:							`<link rel="preload" as=${JSON.stringify(ref.as)} href=${JSON.stringify(ref.uri)}></head>`);
/src/dist/export.js-1852-					}
##############################################
/src/dist/core.js-151-		export { default as Root } from '${__chunk_2.stringify(get_file(path_to_routes, manifest_data.root), false)}';
/src/dist/core.js:152:		export { preload as root_preload } from '${manifest_data.root.has_preload ? __chunk_2.stringify(get_file(path_to_routes, manifest_data.root), false) : './shared'}';
/src/dist/core.js-153-		export { default as ErrorComponent } from '${__chunk_2.stringify(get_file(path_to_routes, manifest_data.error), false)}';
##############################################
/src/dist/core.js-162-			import(${__chunk_2.stringify(__chunk_2.posixify(path.resolve(__dirname, '../sapper-dev-client.js')))}).then(client => {
/src/dist/core.js:163:				client.connect(${dev_port});
/src/dist/core.js-164-			});
##############################################
/src/dist/core.js-180-		manifest_data.components.map((component, i) =>
/src/dist/core.js:181:			`import component_${i}${component.has_preload ? `, { preload as preload_${i} }` : ''} from ${__chunk_2.stringify(get_file(path_to_routes, component))};`),
/src/dist/core.js:182:		`import root${manifest_data.root.has_preload ? `, { preload as root_preload }` : ''} from ${__chunk_2.stringify(get_file(path_to_routes, manifest_data.root))};`,
/src/dist/core.js-183-		`import error from ${__chunk_2.stringify(get_file(path_to_routes, manifest_data.error))};`
##############################################
/src/dist/core.js-226-								`component: component_${component_lookup[part.component.name]}`,
/src/dist/core.js:227:								part.component.has_preload && `preload: preload_${component_lookup[part.component.name]}`
/src/dist/core.js-228-							].filter(Boolean);
##############################################
/src/dist/core.js-241-			root,
/src/dist/core.js:242:			root_preload${manifest_data.root.has_preload ? '' : `: () => {}`},
/src/dist/core.js-243-			error
##############################################
/src/dist/core.js-356-			const json = Buffer.from(raw_map.slice(inline_sourcemap_header.length), 'base64').toString();
/src/dist/core.js:357:			map = JSON.parse(json);
/src/dist/core.js-358-		}
##############################################
/src/dist/core.js-1167-
/src/dist/core.js:1168:	function has_preload(file) {
/src/dist/core.js-1169-		const source = fs.readFileSync(path.join(cwd, file), 'utf-8');
/src/dist/core.js-1170-
/src/dist/core.js:1171:		if (/preload/.test(source)) {
/src/dist/core.js-1172-			try {
/src/dist/core.js-1173-				const { vars } = svelte.compile(source.replace(/<style\b[^>]*>[^]*?<\/style>/g, ''), { generate: false });
/src/dist/core.js:1174:				return vars.some((variable) => variable.module && variable.export_name === 'preload');
/src/dist/core.js-1175-			} catch (err) {}
##############################################
/src/dist/core.js-1188-				file: file,
/src/dist/core.js:1189:				has_preload: has_preload(file)
/src/dist/core.js-1190-			}
##############################################
/src/dist/core.js-1202-		file: null,
/src/dist/core.js:1203:		has_preload: false
/src/dist/core.js-1204-	};
##############################################
/src/dist/core.js-1210-		file: null,
/src/dist/core.js:1211:		has_preload: false
/src/dist/core.js-1212-	};
##############################################
/src/dist/core.js-1316-					file: item.file,
/src/dist/core.js:1317:					has_preload: has_preload(item.file)
/src/dist/core.js-1318-				};
##############################################
/src/dist/cli.js-295-
/src/dist/cli.js:296:		let [flag, alias] = utils.parse(str);
/src/dist/cli.js-297-		if (alias && alias.length > 1) [flag, alias]=[alias, flag];
##############################################
/src/dist/cli.js-682-
/src/dist/cli.js:683:prog.parse(process.argv, { unknown: (arg) => `Unknown option: ${arg}` });
/src/dist/cli.js-684-
##############################################
/src/dist/dev.js-442-
/src/dist/dev.js:443:		this._ = http.createServer((req, res) => {
/src/dist/dev.js-444-			if (req.url !== '/__sapper__') return;
##############################################
/src/dist/chunk.js-13-    return new Promise(function (fulfil) {
/src/dist/chunk.js:14:        var server = net.createServer();
/src/dist/chunk.js-15-        server.unref();
##############################################
/src/dist/chunk.js-19-        server.listen({ port: port }, function () {
/src/dist/chunk.js:20:            var server2 = net.createServer();
/src/dist/chunk.js-21-            server2.unref();
##############################################
/src/dist/chunk.js-43-        return new Promise(function (fulfil) {
/src/dist/chunk.js:44:            var server = net.createServer();
/src/dist/chunk.js-45-            server.unref();
##############################################
/src/dist/chunk.js-58-    return new Promise(function (fulfil) {
/src/dist/chunk.js:59:        var client = net.createConnection({ port: port }, function () {
/src/dist/chunk.js-60-            client.end();
##############################################
/src/dist/chunk.js-81-function get_port(port, cb) {
/src/dist/chunk.js:82:    var server = net.createServer();
/src/dist/chunk.js-83-    server.unref();
##############################################
/src/dist/chunk.js-93-function get_port_weird(port, cb) {
/src/dist/chunk.js:94:    var client = net.createConnection({ port: port }, function () {
/src/dist/chunk.js-95-        client.end();
##############################################
/src/dist/chunk.js-116-    var timeout;
/src/dist/chunk.js:117:    var socket = net.connect(port, 'localhost', function () {
/src/dist/chunk.js-118-        cb();
