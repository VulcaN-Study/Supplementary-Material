/src/dist/lib/AccessToken.js.map:1:{"version":3,"file":"AccessToken.js","sourceRoot":"","sources":["../../src/lib/AccessToken.ts"],"names":[],"mappings":";;;;;;AAAA,6DAAwC;AACxC,sCAAgE;AAMhE,oCAA2D;AAC3D,yCAGoB;AACpB,+BAA+B;AAC/B,uEAAoE;AAEpE;;;GAGG;AACH,SAAS,KAAK,CAAC,KAAa;IAC1B,OAAO,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;AAC9C,CAAC;AAED;;;GAGG;AACH,SAAS,QAAQ,CAAC,IAAY,EAAE,KAAa;IAC3C,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;IAE3B,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAI,SAAS,CACjB,wBAAwB,IAAI,mCAAmC,CAChE,CAAC;KACH;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;GAEG;AACH,SAAS,gBAAgB,CAAC,KAAa;IACrC,MAAM,YAAY,GAAY,IAAI,CAAC,KAAK,CAAC,YAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEtE,6BAAoB,CAAC,YAAY,CAAC,CAAC;IAEnC,OAAO;QACL,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC;QACzC,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,KAAK,CAAC;KAC9C,CAAC;AACJ,CAAC;AAED;;;;;;;;;;GAUG;AACI,KAAK,UAAU,MAAM,CAC1B,mBAA2B,EAC3B,OAA2B,EAC3B,MAAyB,EACzB,iBAAiB,GAAG,qCAA0B;IAE9C,iDAAiD;IACjD,MAAM,KAAK,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAEzC,0EAA0E;IAC1E,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAE/C,2CAA2C;IAC3C,IAAI,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAE;QACpD,MAAM,IAAI,iDAAuB,CAC/B,iCAAiC,EACjC,oBAAoB,GAAG,CAAC,QAAQ,EAAE,cAAc,KAAK,CAAC,QAAQ,EAAE,EAAE,CACnE,CAAC;KACH;IAED,uCAAuC;IACvC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,MAAM,gBAAS,CAClD,KAAK,EACL,MAAM,MAAM,CAAC,GAAG,CAAC,EACjB;QACE,QAAQ,EAAE,OAAO;QACjB,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,uCAA+B,CAAC;QACvD,WAAW,EAAE,GAAG,iBAAiB,GAAG;QACpC,cAAc,EAAE,GAAG,kCAAuB,GAAG;KAC9C,CACF,CAAC;IAEF,MAAM,WAAW,GAAG;QAClB,MAAM,EAAE,eAAe;QACvB,OAAO;QACP,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC/B,CAAC;IAEF,sBAAa,CAAC,WAAW,CAAC,CAAC;IAE3B,OAAO,WAAW,CAAC;AACrB,CAAC;AAzCD,wBAyCC","sourcesContent":["import jwtVerify from \"jose/jwt/verify\";\nimport { isAccessToken, isAccessTokenPayload } from \"../guards\";\nimport type {\n  AccessToken,\n  GetIssuersFunction,\n  GetKeySetFunction,\n} from \"../types\";\nimport { asymetricCryptographicAlgorithm } from \"../types\";\nimport {\n  clockToleranceInSeconds,\n  maxAccessTokenAgeInSeconds,\n} from \"./Defaults\";\nimport { decode } from \"./JWT\";\nimport { SolidTokenVerifierError } from \"./SolidTokenVerifierError\";\n\n/**\n * Remove the Bearer and DPoP prefixes from the authorization header\n * @param token\n */\nfunction value(token: string): string {\n  return token.replace(/^(DPoP|Bearer) /, \"\");\n}\n\n/**\n * URL Claims\n * Restricts to HTTPS, TODO: Check if we can restrict to HTTP over TLS if/when in the future\n */\nfunction urlClaim(type: string, claim: string): URL {\n  const url = new URL(claim);\n\n  if (url.protocol !== \"https:\") {\n    throw new TypeError(\n      `Verifiable URL claim ${type} needs to use the https protocol.`\n    );\n  }\n\n  return url;\n}\n\n/**\n * Checks the access token structure and its WebID and Issuer claims\n */\nfunction verifiableClaims(token: string): { iss: URL; webid: URL } {\n  const tokenPayload: unknown = JSON.parse(decode(token.split(\".\")[1]));\n\n  isAccessTokenPayload(tokenPayload);\n\n  return {\n    iss: urlClaim(\"issuer\", tokenPayload.iss),\n    webid: urlClaim(\"web_id\", tokenPayload.webid),\n  };\n}\n\n/**\n * Verify Access Token\n * - Retrieves identity issuers jwk sets using the webID claim\n * - Signature of Access Token JWT/JWS matches a key in the remote jwks\n * - Access Token max age 1 day\n * - Claims:\n *    - audience 'aud' is solid\n *    - algorithm 'alg' is an asymetric cryptographic algorithm\n *    - expiration 'exp' is not in the past\n *    - 'iat' is not in the future\n */\nexport async function verify(\n  authorizationHeader: string,\n  issuers: GetIssuersFunction,\n  keySet: GetKeySetFunction,\n  maxAccessTokenAge = maxAccessTokenAgeInSeconds\n): Promise<AccessToken> {\n  // Get JWT value for either DPoP or Bearer tokens\n  const token = value(authorizationHeader);\n\n  // Extract webid and issuer claims as URLs from valid Access token payload\n  const { iss, webid } = verifiableClaims(token);\n\n  // Check issuer claim against WebID issuers\n  if (!(await issuers(webid)).includes(iss.toString())) {\n    throw new SolidTokenVerifierError(\n      \"SolidIdentityInvalidIssuerClaim\",\n      `Incorrect issuer ${iss.toString()} for WebID ${webid.toString()}`\n    );\n  }\n\n  // Check token against issuer's key set\n  const { payload, protectedHeader } = await jwtVerify(\n    token,\n    await keySet(iss),\n    {\n      audience: \"solid\",\n      algorithms: Array.from(asymetricCryptographicAlgorithm),\n      maxTokenAge: `${maxAccessTokenAge}s`,\n      clockTolerance: `${clockToleranceInSeconds}s`,\n    }\n  );\n\n  const accessToken = {\n    header: protectedHeader,\n    payload,\n    signature: token.split(\".\")[2],\n  };\n\n  isAccessToken(accessToken);\n\n  return accessToken;\n}\n"]}
##############################################
/src/dist/lib/AccessToken.js-34-function verifiableClaims(token) {
/src/dist/lib/AccessToken.js:35:    const tokenPayload = JSON.parse(JWT_1.decode(token.split(".")[1]));
/src/dist/lib/AccessToken.js-36-    guards_1.isAccessTokenPayload(tokenPayload);
