/src/utils/string.js.map:1:{"version":3,"sources":["utils/string.ts"],"names":[],"mappings":";;AAAA,mCAAgC;AAIhC,SAAgB,kBAAkB,CAChC,GAAW,EACX,MAAc,EACd,eAA+B;IAE/B,IAAI,aAAK,CAAC,GAAG,CAAC;QAAE,OAAO,EAAE,CAAC;IAC1B,IAAI,GAAG,CAAC,MAAM,IAAI,MAAM;QAAE,OAAO,GAAG,CAAC;IACrC,OAAO,eAAe;QACpB,CAAC,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,eAAe,EAAE;QACjD,CAAC,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC;AACpC,CAAC;AAVD,gDAUC;AAED,SAAgB,YAAY,CAAC,GAAW;IACtC,IAAI;QACF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AARD,oCAQC;AAED,SAAgB,iBAAiB,CAAC,GAAW;IAC3C,IAAI,MAAM,CAAC;IAEX,IAAI;QACF,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC1B;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,EAAE,CAAC;KACX;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAVD,8CAUC;AAED,SAAgB,YAAY,CAAC,MAAc;IACzC,OAAO,GAAG,MAAM,EAAE;SACf,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;SACtC,OAAO,CAAC,IAAI,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;SACvC,OAAO,CACN,IAAI,MAAM,CAAC,aAAa,EAAE,GAAG,CAAC,EAC9B,CAAC,CAAC,EAAE,EAAU,EAAE,EAAU,EAAU,EAAE,CAAC,GAAG,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,EAAE,CAChF;SACA,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;SAClC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAS,EAAU,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;AACvE,CAAC;AAVD,oCAUC","file":"string.js","sourcesContent":["import { isNil } from './utils';\nimport { Maybe, IJson } from '../interfaces';\n\n\nexport function getTruncatedString(\n  str: string,\n  length: number,\n  punctuationMark?: Maybe<string>,\n): string {\n  if (isNil(str)) return '';\n  if (str.length <= length) return str;\n  return punctuationMark\n    ? `${str.substring(0, length)}${punctuationMark}`\n    : `${str.substring(0, length)}`;\n}\n\nexport function isJsonString(str: string): boolean {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function getJsonFromString(str: string): IJson {\n  let result;\n\n  try {\n    result = JSON.parse(str);\n  } catch (e) {\n    return {};\n  }\n\n  return result;\n}\n\nexport function toPascalCase(string: string): string {\n  return `${string}`\n    .replace(new RegExp(/[-_]+/, 'g'), ' ')\n    .replace(new RegExp(/[^\\w\\s]/, 'g'), '')\n    .replace(\n      new RegExp(/\\s+(.)(\\w+)/, 'g'),\n      (_, $2: string, $3: string): string => `${$2.toUpperCase()}${$3.toLowerCase()}`,\n    )\n    .replace(new RegExp(/\\s/, 'g'), '')\n    .replace(new RegExp(/\\w/), (s: string): string => s.toUpperCase());\n}\n"]}
##############################################
/src/utils/string.d.ts.map:1:{"version":3,"sources":["utils/string.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAG7C,wBAAgB,kBAAkB,CAChC,GAAG,EAAE,MAAM,EACX,MAAM,EAAE,MAAM,EACd,eAAe,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,GAC9B,MAAM,CAMR;AAED,wBAAgB,YAAY,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAQjD;AAED,wBAAgB,iBAAiB,CAAC,GAAG,EAAE,MAAM,GAAG,KAAK,CAUpD;AAED,wBAAgB,YAAY,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAUnD","file":"string.d.ts","sourcesContent":["import { isNil } from './utils';\nimport { Maybe, IJson } from '../interfaces';\n\n\nexport function getTruncatedString(\n  str: string,\n  length: number,\n  punctuationMark?: Maybe<string>,\n): string {\n  if (isNil(str)) return '';\n  if (str.length <= length) return str;\n  return punctuationMark\n    ? `${str.substring(0, length)}${punctuationMark}`\n    : `${str.substring(0, length)}`;\n}\n\nexport function isJsonString(str: string): boolean {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function getJsonFromString(str: string): IJson {\n  let result;\n\n  try {\n    result = JSON.parse(str);\n  } catch (e) {\n    return {};\n  }\n\n  return result;\n}\n\nexport function toPascalCase(string: string): string {\n  return `${string}`\n    .replace(new RegExp(/[-_]+/, 'g'), ' ')\n    .replace(new RegExp(/[^\\w\\s]/, 'g'), '')\n    .replace(\n      new RegExp(/\\s+(.)(\\w+)/, 'g'),\n      (_, $2: string, $3: string): string => `${$2.toUpperCase()}${$3.toLowerCase()}`,\n    )\n    .replace(new RegExp(/\\s/, 'g'), '')\n    .replace(new RegExp(/\\w/), (s: string): string => s.toUpperCase());\n}\n"]}
##############################################
/src/utils/string.js-15-    try {
/src/utils/string.js:16:        JSON.parse(str);
/src/utils/string.js-17-    }
##############################################
/src/utils/string.js-26-    try {
/src/utils/string.js:27:        result = JSON.parse(str);
/src/utils/string.js-28-    }
