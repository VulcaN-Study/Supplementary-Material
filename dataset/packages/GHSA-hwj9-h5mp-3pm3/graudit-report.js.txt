/src/README.md-415-
/src/README.md:416:fs.readFile('src/app.css', (err, css) => {
/src/README.md-417-  postcss([precss, autoprefixer])
##############################################
/src/README.md-419-    .then(result => {
/src/README.md:420:      fs.writeFile('dest/app.css', result.css, () => true)
/src/README.md-421-      if ( result.map ) {
/src/README.md:422:        fs.writeFile('dest/app.css.map', result.map.toString(), () => true)
/src/README.md-423-      }
##############################################
/src/lib/at-rule.d.ts-59- * ```js
/src/lib/at-rule.d.ts:60: * const root = postcss.parse('@charset "UTF-8"; @media print {}')
/src/lib/at-rule.d.ts-61- *
##############################################
/src/lib/at-rule.d.ts-77-   * ```js
/src/lib/at-rule.d.ts:78:   * const root  = postcss.parse('@media print {}')
/src/lib/at-rule.d.ts-79-   * media.name //=> 'media'
##############################################
/src/lib/at-rule.d.ts-89-   * ```js
/src/lib/at-rule.d.ts:90:   * const root  = postcss.parse('@media print, screen {}')
/src/lib/at-rule.d.ts-91-   * const media = root.first
##############################################
/src/lib/declaration.d.ts-45- * ```js
/src/lib/declaration.d.ts:46: * const root = postcss.parse('a { color: black }')
/src/lib/declaration.d.ts-47- * const decl = root.first.first
##############################################
/src/lib/declaration.d.ts-59-   * ```js
/src/lib/declaration.d.ts:60:   * const root = postcss.parse('a { color: black }')
/src/lib/declaration.d.ts-61-   * const decl = root.first.first
##############################################
/src/lib/declaration.d.ts-75-   * ```js
/src/lib/declaration.d.ts:76:   * const root = postcss.parse('a { color: black }')
/src/lib/declaration.d.ts-77-   * const decl = root.first.first
##############################################
/src/lib/declaration.d.ts-86-   * ```js
/src/lib/declaration.d.ts:87:   * const root = postcss.parse('a { color: black !important; color: red }')
/src/lib/declaration.d.ts-88-   * root.first.first.important //=> true
##############################################
/src/lib/declaration.d.ts-98-   * ```js
/src/lib/declaration.d.ts:99:   * const root = postcss.parse(':root { --one: 1 }')
/src/lib/declaration.d.ts-100-   * let one = root.first.first
##############################################
/src/lib/declaration.d.ts-104-   * ```js
/src/lib/declaration.d.ts:105:   * const root = postcss.parse('$one: 1')
/src/lib/declaration.d.ts-106-   * let one = root.first
##############################################
/src/lib/rule.d.ts-56- * ```js
/src/lib/rule.d.ts:57: * const root = postcss.parse('a{}')
/src/lib/rule.d.ts-58- * const rule = root.first
##############################################
/src/lib/rule.d.ts-70-   * ```js
/src/lib/rule.d.ts:71:   * const root = postcss.parse('a, b { }')
/src/lib/rule.d.ts-72-   * const rule = root.first
##############################################
/src/lib/rule.d.ts-82-   * ```js
/src/lib/rule.d.ts:83:   * const root = postcss.parse('a, b { }')
/src/lib/rule.d.ts-84-   * const rule = root.first
##############################################
/src/lib/node.d.ts-168-   * ```js
/src/lib/node.d.ts:169:   * const root = postcss.parse('a {\n  color:black\n}')
/src/lib/node.d.ts-170-   * root.first.first.raws //=> { before: '\n  ', between: ':' }
##############################################
/src/lib/node.d.ts-390-   * ```js
/src/lib/node.d.ts:391:   * const root = postcss.parse('a { background: white }')
/src/lib/node.d.ts-392-   * root.nodes[0].append({ prop: 'color', value: 'black' })
##############################################
/src/lib/input.d.ts-34- * ```js
/src/lib/input.d.ts:35: * const root  = postcss.parse(css, { from: file })
/src/lib/input.d.ts-36- * const input = root.source.input
##############################################
/src/lib/input.d.ts-43-   * ```js
/src/lib/input.d.ts:44:   * const input = postcss.parse('a{}', { from: file }).input
/src/lib/input.d.ts-45-   * input.css //=> "a{}"
##############################################
/src/lib/input.d.ts-64-   * ```js
/src/lib/input.d.ts:65:   * const root = postcss.parse(css, { from: 'a.css' })
/src/lib/input.d.ts-66-   * root.source.input.file //=> '/home/ai/a.css'
##############################################
/src/lib/input.d.ts-75-   * ```js
/src/lib/input.d.ts:76:   * const root = postcss.parse(css)
/src/lib/input.d.ts-77-   * root.source.input.file //=> undefined
##############################################
/src/lib/input.d.ts-98-   * ```js
/src/lib/input.d.ts:99:   * const root = postcss.parse(css, { from: 'a.css' })
/src/lib/input.d.ts-100-   * root.source.input.from //=> "/home/ai/a.css"
/src/lib/input.d.ts-101-   *
/src/lib/input.d.ts:102:   * const root = postcss.parse(css)
/src/lib/input.d.ts-103-   * root.source.input.from //=> "<input css 1>"
##############################################
/src/lib/css-syntax-error.d.ts-23- * try {
/src/lib/css-syntax-error.d.ts:24: *   postcss.parse('a{')
/src/lib/css-syntax-error.d.ts-25- * } catch (error) {
##############################################
/src/lib/result.d.ts-52- * ```js
/src/lib/result.d.ts:53: * const result2 = postcss.parse(css).toResult()
/src/lib/result.d.ts-54- * ```
##############################################
/src/lib/result.d.ts-112-   * ```js
/src/lib/result.d.ts:113:   * postcss.parse('a{}').toResult().css //=> "a{}"
/src/lib/result.d.ts-114-   * ```
##############################################
/src/lib/root.d.ts-24- * ```js
/src/lib/root.d.ts:25: * const root = postcss.parse('a{color:black} b{z-index:2}')
/src/lib/root.d.ts-26- * root.type         //=> 'root'
##############################################
/src/lib/root.d.ts-40-   * ```js
/src/lib/root.d.ts:41:   * const root1 = postcss.parse(css1, { from: 'a.css' })
/src/lib/root.d.ts:42:   * const root2 = postcss.parse(css2, { from: 'b.css' })
/src/lib/root.d.ts-43-   * root1.append(root2)
##############################################
/src/lib/postcss.d.ts-354-   * // Simple CSS concatenation with source map support
/src/lib/postcss.d.ts:355:   * const root1 = postcss.parse(css1, { from: file1 })
/src/lib/postcss.d.ts:356:   * const root2 = postcss.parse(css2, { from: file2 })
/src/lib/postcss.d.ts-357-   * root1.append(root2).toResult().css
##############################################
/src/lib/parse.js-10-  try {
/src/lib/parse.js:11:    parser.parse()
/src/lib/parse.js-12-  } catch (e) {
##############################################
/src/lib/container.d.ts-34-   * ```js
/src/lib/container.d.ts:35:   * const root = postcss.parse('a { color: black }')
/src/lib/container.d.ts-36-   * root.nodes.length           //=> 1
##############################################
/src/lib/container.d.ts-75-   * ```js
/src/lib/container.d.ts:76:   * const root = postcss.parse('a { color: black; z-index: 1 }')
/src/lib/container.d.ts-77-   * const rule = root.first
