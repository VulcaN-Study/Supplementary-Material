/src/examples/concurrent-proxy.js-34-//
/src/examples/concurrent-proxy.js:35:httpProxy.createServer(9000, 'localhost').listen(8000);
/src/examples/concurrent-proxy.js-36-
##############################################
/src/examples/concurrent-proxy.js-47-
/src/examples/concurrent-proxy.js:48:http.createServer(function (req, res) {
/src/examples/concurrent-proxy.js-49-      
##############################################
/src/examples/custom-proxy-error.js-34-//
/src/examples/custom-proxy-error.js:35:var server = httpProxy.createServer(function (req, res, proxy) {
/src/examples/custom-proxy-error.js-36-  proxy.proxyRequest(req, res, {
##############################################
/src/examples/web-socket-proxy.js-45-//
/src/examples/web-socket-proxy.js:46:var server = http.createServer(function (req, res) {
/src/examples/web-socket-proxy.js-47-  res.writeHead(200);
##############################################
/src/examples/web-socket-proxy.js-69-//
/src/examples/web-socket-proxy.js:70:var proxy = httpProxy.createServer(8080, 'localhost');
/src/examples/web-socket-proxy.js-71-proxy.listen(8081);
##############################################
/src/examples/latent-websocket-proxy.js-45-//
/src/examples/latent-websocket-proxy.js:46:var server = http.createServer(function (req, res) {
/src/examples/latent-websocket-proxy.js-47-  res.writeHead(200);
##############################################
/src/examples/latent-websocket-proxy.js-70-var proxy = new httpProxy.HttpProxy();
/src/examples/latent-websocket-proxy.js:71:var proxyServer = http.createServer(function (req, res) {
/src/examples/latent-websocket-proxy.js-72-  proxy.proxyRequest(req, res, {
##############################################
/src/examples/proxy-https-to-https.js-38-//
/src/examples/proxy-https-to-https.js:39:https.createServer(opts, function (req, res) {
/src/examples/proxy-https-to-https.js-40-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/examples/proxy-https-to-https.js-47-//
/src/examples/proxy-https-to-https.js:48:httpProxy.createServer(8000, 'localhost', {
/src/examples/proxy-https-to-https.js-49-  https: opts,
##############################################
/src/examples/forward-proxy.js-34-//
/src/examples/forward-proxy.js:35:httpProxy.createServer(9000, 'localhost', {
/src/examples/forward-proxy.js-36-  forward: {
##############################################
/src/examples/forward-proxy.js-44-//
/src/examples/forward-proxy.js:45:http.createServer(function (req, res) {
/src/examples/forward-proxy.js-46-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/examples/forward-proxy.js-53-//
/src/examples/forward-proxy.js:54:http.createServer(function (req, res) {
/src/examples/forward-proxy.js-55-  util.puts('Receiving forward for: ' + req.url);
##############################################
/src/examples/proxy-https-to-http.js-38-//
/src/examples/proxy-https-to-http.js:39:http.createServer(function (req, res) {
/src/examples/proxy-https-to-http.js-40-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/examples/proxy-https-to-http.js-47-//
/src/examples/proxy-https-to-http.js:48:httpProxy.createServer(8000, 'localhost', {
/src/examples/proxy-https-to-http.js-49-  https: opts
##############################################
/src/examples/standalone-websocket-proxy.js-45-//
/src/examples/standalone-websocket-proxy.js:46:var server = http.createServer(function (req, res) {
/src/examples/standalone-websocket-proxy.js-47-  res.writeHead(200);
##############################################
/src/examples/standalone-websocket-proxy.js-70-var proxy = new httpProxy.HttpProxy();
/src/examples/standalone-websocket-proxy.js:71:var proxyServer = http.createServer(function (req, res) {
/src/examples/standalone-websocket-proxy.js-72-  proxy.proxyRequest(req, res, {
##############################################
/src/examples/proxy-table.js-34-//
/src/examples/proxy-table.js:35:httpProxy.createServer({
/src/examples/proxy-table.js-36-  router: {
##############################################
/src/examples/proxy-table.js-43-//
/src/examples/proxy-table.js:44:http.createServer(function (req, res) {
/src/examples/proxy-table.js-45-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/examples/standalone-proxy.js-35-var proxy = new httpProxy.HttpProxy();
/src/examples/standalone-proxy.js:36:http.createServer(function (req, res) {
/src/examples/standalone-proxy.js-37-  var buffer = proxy.buffer(req);
##############################################
/src/examples/standalone-proxy.js-49-//
/src/examples/standalone-proxy.js:50:http.createServer(function (req, res) {
/src/examples/standalone-proxy.js-51-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/examples/jsonp-middleware.js-24-
/src/examples/jsonp-middleware.js:25:http.createServer(new Store().handler()).listen(7531)
/src/examples/jsonp-middleware.js-26-
/src/examples/jsonp-middleware.js:27:require('http-proxy').createServer(
/src/examples/jsonp-middleware.js-28-  require('connect-jsonp')(true),
##############################################
/src/examples/lib/store.js-56-          try {
/src/examples/lib/store.js:57:            obj = JSON.parse(body)
/src/examples/lib/store.js-58-          } catch (err) {
##############################################
/src/examples/bodyDecoder-middleware.js-4-
/src/examples/bodyDecoder-middleware.js:5:http.createServer(new Store().handler()).listen(7531, function () {
/src/examples/bodyDecoder-middleware.js-6-//try these commands:
##############################################
/src/examples/bodyDecoder-middleware.js-34-
/src/examples/bodyDecoder-middleware.js:35:  http.createServer(new Store().handler()).listen(2600, function () {
/src/examples/bodyDecoder-middleware.js-36-
##############################################
/src/examples/bodyDecoder-middleware.js-44-
/src/examples/bodyDecoder-middleware.js:45:    require('http-proxy').createServer(
/src/examples/bodyDecoder-middleware.js-46-      //refactor the body parser and re-streamer into a separate package
##############################################
/src/examples/url-middleware2.js-6-
/src/examples/url-middleware2.js:7:http.createServer(new Store().handler()).listen(7531)
/src/examples/url-middleware2.js-8-
/src/examples/url-middleware2.js-9-// Now we set up our proxy.
/src/examples/url-middleware2.js:10:httpProxy.createServer(
/src/examples/url-middleware2.js-11-  // This is where our middlewares go, with any options desired - in this case,
##############################################
/src/examples/url-middleware2.js-21-//
/src/examples/url-middleware2.js:22:http.createServer(
/src/examples/url-middleware2.js-23-  function (req, res) {
##############################################
/src/examples/url-middleware.js-34-//
/src/examples/url-middleware.js:35:httpProxy.createServer(
/src/examples/url-middleware.js-36-  //
##############################################
/src/examples/url-middleware.js-49-//
/src/examples/url-middleware.js:50:http.createServer(function (req, res) {
/src/examples/url-middleware.js-51-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/examples/gzip-middleware.js-34-//
/src/examples/gzip-middleware.js:35:httpProxy.createServer(
/src/examples/gzip-middleware.js-36-  require('connect-gzip').gzip({ matchType: /.?/ }),
##############################################
/src/examples/gzip-middleware.js-42-//
/src/examples/gzip-middleware.js:43:http.createServer(function (req, res) {
/src/examples/gzip-middleware.js-44-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/examples/latent-proxy.js-34-//
/src/examples/latent-proxy.js:35:httpProxy.createServer(function (req, res, proxy) {
/src/examples/latent-proxy.js-36-  var buffer = proxy.buffer(req);
##############################################
/src/examples/latent-proxy.js-48-//
/src/examples/latent-proxy.js:49:http.createServer(function (req, res) {
/src/examples/latent-proxy.js-50-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/examples/basic-proxy.js-44-//
/src/examples/basic-proxy.js:45:httpProxy.createServer(9000, 'localhost').listen(8000);
/src/examples/basic-proxy.js-46-
##############################################
/src/examples/basic-proxy.js-49-//
/src/examples/basic-proxy.js:50:http.createServer(function (req, res) {
/src/examples/basic-proxy.js-51-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/README.md-64-//
/src/README.md:65:httpProxy.createServer(9000, 'localhost').listen(8000);
/src/README.md-66-
##############################################
/src/README.md-69-//
/src/README.md:70:http.createServer(function (req, res) {
/src/README.md-71-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/README.md-85-//
/src/README.md:86:httpProxy.createServer(function (req, res, proxy) {
/src/README.md-87-  //
##############################################
/src/README.md-95-
/src/README.md:96:http.createServer(function (req, res) {
/src/README.md-97-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/README.md-111-//
/src/README.md:112:httpProxy.createServer(function (req, res, proxy) {
/src/README.md-113-  //
##############################################
/src/README.md-131-
/src/README.md:132:http.createServer(function (req, res) {
/src/README.md-133-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/README.md-152-//
/src/README.md:153:http.createServer(function (req, res) {
/src/README.md-154-  //
##############################################
/src/README.md-162-
/src/README.md:163:http.createServer(function (req, res) {
/src/README.md-164-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/README.md-185-``` js
/src/README.md:186:var proxyServer = httpProxy.createServer(options);
/src/README.md-187-proxyServer.listen(80);
##############################################
/src/README.md-208-``` js
/src/README.md:209:var proxyServerWithForwarding = httpProxy.createServer(9000, 'localhost', {
/src/README.md-210-  forward: {
##############################################
/src/README.md-244-//
/src/README.md:245:httpProxy.createServer(8000, 'localhost', options).listen(8001);
/src/README.md-246-
##############################################
/src/README.md-250-var proxy = new httpProxy.HttpProxy();
/src/README.md:251:https.createServer(options.https, function (req, res) {
/src/README.md-252-  proxy.proxyRequest(req, res, {
##############################################
/src/README.md-260-//
/src/README.md:261:http.createServer(function (req, res) {
/src/README.md-262-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/README.md-288-//
/src/README.md:289:httpProxy.createServer(8000, 'localhost', options).listen(8001);
/src/README.md-290-
##############################################
/src/README.md-299-
/src/README.md:300:https.createServer(options.https, function (req, res) {
/src/README.md-301-  proxy.proxyRequest(req, res, {
##############################################
/src/README.md-309-//
/src/README.md:310:https.createServer(options.https, function (req, res) {
/src/README.md-311-  res.writeHead(200, { 'Content-Type': 'text/plain' });
##############################################
/src/README.md-320-``` js
/src/README.md:321:httpProxy.createServer(
/src/README.md-322-  require('connect-gzip').gzip(),
##############################################
/src/README.md-327-## Proxying WebSockets
/src/README.md:328:Websockets are handled automatically when using the `httpProxy.createServer()`, but if you want to use it in conjunction with a stand-alone HTTP + WebSocket (such as [socket.io][5]) server here's how:
/src/README.md-329-
##############################################
/src/README.md-338-
/src/README.md:339:var server = http.createServer(function (req, res) {
/src/README.md-340-  //
##############################################
/src/bin/node-http-proxy-35-    var data = fs.readFileSync(argv.config);
/src/bin/node-http-proxy:36:    config = JSON.parse(data.toString());
/src/bin/node-http-proxy-37-  } catch (ex) {
##############################################
/src/bin/node-http-proxy-67-  var targetPort = location.length === 1 ? 80 : location[1];
/src/bin/node-http-proxy:68:  server = httpProxy.createServer(targetPort, location[0], config);
/src/bin/node-http-proxy-69-}
/src/bin/node-http-proxy-70-else if (config.router) {
/src/bin/node-http-proxy:71:  server = httpProxy.createServer(config);
/src/bin/node-http-proxy-72-}
##############################################
/src/vendor/websocket.js-494-        //      string as its first argument to connect to a UNIX socket.
/src/vendor/websocket.js:495:        var protocol, agent, port, u = urllib.parse(url);
/src/vendor/websocket.js-496-        if (u.protocol === 'ws:' || u.protocol === 'wss:') {
##############################################
/src/lib/node-http-proxy.js-152-//
/src/lib/node-http-proxy.js:153:// * `httpProxy.createServer(9000, 'localhost')`
/src/lib/node-http-proxy.js:154:// * `httpProxy.createServer(9000, 'localhost', options)
/src/lib/node-http-proxy.js:155:// * `httpPRoxy.createServer(function (req, res, proxy) { ... })`
/src/lib/node-http-proxy.js-156-//
##############################################
/src/lib/node-http-proxy.js-226-  server = options.https
/src/lib/node-http-proxy.js:227:    ? https.createServer(options.https, handler)
/src/lib/node-http-proxy.js:228:    : http.createServer(handler);
/src/lib/node-http-proxy.js-229-
##############################################
/src/lib/node-http-proxy.js-320-//      var buffer = httpProxy.buffer(req);
/src/lib/node-http-proxy.js:321://      fs.readFile(path, function(){
/src/lib/node-http-proxy.js-322-//         httpProxy.proxyRequest(req, res, host, port, buffer);
##############################################
/src/lib/proxy-table.js-59-    this.routeFile = router;
/src/lib/proxy-table.js:60:    this.setRoutes(JSON.parse(fs.readFileSync(router)).router);
/src/lib/proxy-table.js-61-    
/src/lib/proxy-table.js-62-    fs.watchFile(this.routeFile, function () {
/src/lib/proxy-table.js:63:      fs.readFile(self.routeFile, function (err, data) {
/src/lib/proxy-table.js-64-        if (err) throw err;
/src/lib/proxy-table.js:65:        self.setRoutes(JSON.parse(data).router);
/src/lib/proxy-table.js-66-        self.emit('routes', self.hostnameOnly === false ? self.routes : self.router);
##############################################
/src/test/helpers.js-202-      options = that.options,
/src/test/helpers.js:203:      proxyServer = httpProxy.createServer(targetPort, host, options);
/src/test/helpers.js-204-
##############################################
/src/test/helpers.js-215-  // Initialize the nodeProxy and start proxying the request
/src/test/helpers.js:216:  var that = this, proxyServer = httpProxy.createServer(function (req, res, proxy) {
/src/test/helpers.js-217-    var buffer = proxy.buffer(req);
##############################################
/src/test/helpers.js-237-TestRunner.prototype.startProxyServerWithTable = function (port, options, callback) {
/src/test/helpers.js:238:  var that = this, proxyServer = httpProxy.createServer(merge({}, options, this.options));
/src/test/helpers.js-239-  proxyServer.listen(port, function () {
##############################################
/src/test/helpers.js-265-  proxyServer = that.options.https
/src/test/helpers.js:266:                ? https.createServer(that.options.https, handler, that.options)
/src/test/helpers.js:267:                : http.createServer(handler, that.options);
/src/test/helpers.js-268-
##############################################
/src/test/helpers.js-280-TestRunner.prototype.startProxyServerWithForwarding = function (port, targetPort, host, options, callback) {
/src/test/helpers.js:281:  var that = this, proxyServer = httpProxy.createServer(targetPort, host, merge({}, options, this.options));
/src/test/helpers.js-282-  proxyServer.listen(port, function () {
##############################################
/src/test/helpers.js-298-  targetServer = this.options.target.https
/src/test/helpers.js:299:    ? https.createServer(this.options.target.https, handler)
/src/test/helpers.js:300:    : http.createServer(handler);
/src/test/helpers.js-301-
##############################################
/src/test/proxy-table-test.js-44-vows.describe('node-http-proxy/proxy-table/' + protocol).addBatch({
/src/test/proxy-table-test.js:45:  "When using server created by httpProxy.createServer()": {
/src/test/proxy-table-test.js-46-    "when passed a routing table": {
##############################################
/src/test/proxy-table-test.js-78-                data = fs.readFileSync(routeFile),
/src/test/proxy-table-test.js:79:                config = JSON.parse(data);
/src/test/proxy-table-test.js-80-
##############################################
/src/test/web-socket-proxy-test.js-94-  },
/src/test/web-socket-proxy-test.js:95:  "When using server created by httpProxy.createServer()": {
/src/test/web-socket-proxy-test.js-96-    "with no latency" : {
##############################################
/src/test/node-http-proxy-test.js-52-vows.describe('node-http-proxy/' + protocol).addBatch({
/src/test/node-http-proxy-test.js:53:  "When using server created by httpProxy.createServer()": {
/src/test/node-http-proxy-test.js-54-    "with no latency" : {
##############################################
/src/docs/node-http-proxy.html-105-<ul>
/src/docs/node-http-proxy.html:106:<li><code>httpProxy.createServer(9000, 'localhost')</code></li>
/src/docs/node-http-proxy.html:107:<li>`httpProxy.createServer(9000, 'localhost', options)</li>
/src/docs/node-http-proxy.html:108:<li><code>httpPRoxy.createServer(function (req, res, proxy) { ... })</code></li>
/src/docs/node-http-proxy.html-109-</ul>             </td>             <td class="code">               <div class="highlight"><pre><span class="nx">exports</span><span class="p">.</span><span class="nx">createServer</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
##############################################
/src/docs/node-http-proxy.html-219-<pre><code> var buffer = httpProxy.buffer(req);
/src/docs/node-http-proxy.html:220: fs.readFile(path, function(){
/src/docs/node-http-proxy.html-221-    httpProxy.proxyRequest(req, res, host, port, buffer);
