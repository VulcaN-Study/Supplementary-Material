{
  "errors": [],
  "nodejs": {
    "generic_path_traversal": {
      "files": [
        {
          "file_path": "/src/censorify/main.js",
          "match_lines": [
            12,
            52
          ],
          "match_position": [
            2,
            11
          ],
          "match_string": "\tvar urlObj = url.parse(req.url, true, false);\n\n\tconsole.log(urlObj.pathname);\n\n\tconsole.log(urlObj.query[\"q\"]);\n\n\tvar input = urlObj.query[\"q\"];\n\n\tif(urlObj.pathname.indexOf(citiesRoute) !== -1)\n\n\t{\n\n\t\tconsole.log(\"Use query string to find matching cities...\");\n\n\t\tvar jsonArray = [];\n\n\t\tfs.readFile('cities.dat.txt', function(err, data)\n\n\t\t{\n\n\t\t\tif(err)\n\n\t\t\t\tthrow err;\n\n\t\t\tvar cities = data.toString().split('\\n');\n\n\t\t\tfor(var i = 0; i < cities.length; i++)\n\n\t\t\t{\n\n\t\t\t\tif(cities[i].substring(0, input.length) === input)\n\n\t\t\t\t\tjsonArray.push({city:cities[i]});\n\n\t\t\t}\n\n\t\t\tres.writeHead(200);\n\n\t\t\tres.end(JSON.stringify(jsonArray));\n\n\t\t\tconsole.log(jsonArray);\n\n\t\t});\n\n\t}\t\n\n\telse\n\n\t{\n\n\t\tconsole.log(\"Grab the file and return it.\");\n\n\t\tconsole.log(urlObj.pathname.substring(1));\n\n\t\tvar srcStream = fs.createReadStream(urlObj.pathname.substring(1));\n\n\t\tsrcStream.on('open', function (err, data)\n\n\t\t{\n\n\t\t\tres.writeHead(200);\n\n\t\t\tsrcStream.pipe(res);\n\n\t\t});\n\n\n\n\t\tsrcStream.on('error', function (err)\n\n\t\t{\n\n\t\t\tif (err)\n\n\t\t\t{\n\n\t\t\t\tres.writeHead(404);\n\n\t\t\t\tres.end(JSON.stringify(err));\n\n\t\t\t\treturn;"
        },
        {
          "file_path": "/src/main.js",
          "match_lines": [
            12,
            52
          ],
          "match_position": [
            2,
            11
          ],
          "match_string": "\tvar urlObj = url.parse(req.url, true, false);\n\n\tconsole.log(urlObj.pathname);\n\n\tconsole.log(urlObj.query[\"q\"]);\n\n\tvar input = urlObj.query[\"q\"];\n\n\tif(urlObj.pathname.indexOf(citiesRoute) !== -1)\n\n\t{\n\n\t\tconsole.log(\"Use query string to find matching cities...\");\n\n\t\tvar jsonArray = [];\n\n\t\tfs.readFile('cities.dat.txt', function(err, data)\n\n\t\t{\n\n\t\t\tif(err)\n\n\t\t\t\tthrow err;\n\n\t\t\tvar cities = data.toString().split('\\n');\n\n\t\t\tfor(var i = 0; i < cities.length; i++)\n\n\t\t\t{\n\n\t\t\t\tif(cities[i].substring(0, input.length) === input)\n\n\t\t\t\t\tjsonArray.push({city:cities[i]});\n\n\t\t\t}\n\n\t\t\tres.writeHead(200);\n\n\t\t\tres.end(JSON.stringify(jsonArray));\n\n\t\t\tconsole.log(jsonArray);\n\n\t\t});\n\n\t}\t\n\n\telse\n\n\t{\n\n\t\tconsole.log(\"Grab the file and return it.\");\n\n\t\tconsole.log(urlObj.pathname.substring(1));\n\n\t\tvar srcStream = fs.createReadStream(urlObj.pathname.substring(1));\n\n\t\tsrcStream.on('open', function (err, data)\n\n\t\t{\n\n\t\t\tres.writeHead(200);\n\n\t\t\tsrcStream.pipe(res);\n\n\t\t});\n\n\n\n\t\tsrcStream.on('error', function (err)\n\n\t\t{\n\n\t\t\tif (err)\n\n\t\t\t{\n\n\t\t\t\tres.writeHead(404);\n\n\t\t\t\tres.end(JSON.stringify(err));\n\n\t\t\t\treturn;"
        }
      ],
      "metadata": {
        "cwe": "CWE-23: Relative Path Traversal",
        "description": "Untrusted user input in readFile()/readFileSync() can endup in Directory Traversal Attacks.",
        "owasp": "A5: Broken Access Control",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
