/src/lib/validator.js-97-    if(typeof formatString!=='string') {
/src/lib/validator.js:98:        value = new Date(Date.parse(value));
/src/lib/validator.js-99-        if(value) {
##############################################
/src/lib/request.js-22-                if (!o.filename) o.filename = file;
/src/lib/request.js:23:                file = fs.createReadStream(file);
/src/lib/request.js-24-                
##############################################
/src/lib/request.js-42-    // TODO: decide if reject unauthorized connections are needed, if so, implement and test it due to nodejs deprecation
/src/lib/request.js:43:    // and modify superagent request constructor to pass rejectUnauthorized flag when request instance is created
/src/lib/request.js:44:    // superagent.Request.prototype.rejectUnauthorized = function(reject){
/src/lib/request.js:45:    //     this._rejectUnauthorized = reject;
/src/lib/request.js-46-    //     return this;
##############################################
/src/lib/fsExt.js-85-                    // folders are created, so create file
/src/lib/fsExt.js:86:                    fs.writeFile(fp.fullPath, opts.data, opts.encoding, function(err){
/src/lib/fsExt.js-87-                        if (err) cb(new Error('fsExt.existsOrCreate: creating file failed').cause(err));
##############################################
/src/lib/fsExt.js-211-    if(!_modules[filePath]){
/src/lib/fsExt.js:212:        fs.readFile(filePath, { encoding: opts.encoding }, function(err, data) {
/src/lib/fsExt.js-213-            var loadingModule = {
##############################################
/src/lib/fsExt.js-220-                try {
/src/lib/fsExt.js:221:                    loadingModule.exports = JSON.parse(data, opts.jsonParse);
/src/lib/fsExt.js-222-                }
##############################################
/src/lib/fsExt.js-229-                try {
/src/lib/fsExt.js:230:                    eval(code);
/src/lib/fsExt.js-231-                }
##############################################
/src/lib/fsExt.js-290-            try {
/src/lib/fsExt.js:291:                loadingModule.exports = JSON.parse(data, opts.jsonParse);
/src/lib/fsExt.js-292-            }
##############################################
/src/lib/fsExt.js-299-            try {
/src/lib/fsExt.js:300:                eval(code);
/src/lib/fsExt.js-301-            }
##############################################
/src/lib/fsExt.js-353-    
/src/lib/fsExt.js:354:    fs.writeFile(filePath, data, function(err) {
/src/lib/fsExt.js-355-        if(err) {
##############################################
/src/lib/fsExt.js-383-    
/src/lib/fsExt.js:384:    fs.readFile(filePath, opts, function(err, data) {
/src/lib/fsExt.js-385-        if(err) {
##############################################
/src/lib/fsExt.js-416-    var headLine;
/src/lib/fsExt.js:417:    var instream = fs.createReadStream(filepath, opts);
/src/lib/fsExt.js-418-    var outstream = new Stream();
##############################################
/src/lib/fsExt.js-533-    var headLine;
/src/lib/fsExt.js:534:    var instream = fs.createReadStream(filepath, opts);
/src/lib/fsExt.js-535-    var outstream = new Stream();
##############################################
/src/lib/fsExt.js-657-                if(stat.isDirectory()) rmdirRecursive(file, rmFile);
/src/lib/fsExt.js:658:                else fs.unlink(file, rmFile);
/src/lib/fsExt.js-659-            });
##############################################
/src/lib/fsExt.js-713-                            });
/src/lib/fsExt.js:714:                            else fs.readFile(file, function(err, data){
/src/lib/fsExt.js-715-                                if (err) return clbk(err);
/src/lib/fsExt.js:716:                                fs.writeFile(newFile, data, copyFiles);
/src/lib/fsExt.js-717-                            });
##############################################
/src/lib/object.js-273-    if(typeof input === 'string' && (match = input.match(useIso8601 ? regexIso8601 : regexIsoJson))) {
/src/lib/object.js:274:        var milliseconds = Date.parse(match[0]);
/src/lib/object.js-275-        if (!isNaN(milliseconds)) {
##############################################
/src/lib/object.js-288-        if(typeof value === 'string' && (match = value.match(useIso8601 ? regexIso8601 : regexIsoJson))) {
/src/lib/object.js:289:            var milliseconds = Date.parse(match[0]);
/src/lib/object.js-290-            if (!isNaN(milliseconds)) {
##############################################
/src/lib/template.js-21-    compile: function(templateStrOrFncOrParser){
/src/lib/template.js:22:        if(typeof templateStrOrFncOrParser === 'string') return this.createRenderer( this.parse(templateStrOrFncOrParser) );
/src/lib/template.js-23-        else if(typeof templateStrOrFncOrParser === 'function') return templateStrOrFncOrParser;
##############################################
/src/lib/query.js-60-    if(!(object.isObject(raw) || raw instanceof RegExp)) throw new Error('value of $not must be an object or regex');
/src/lib/query.js:61:    return '!'+compile(map(JSON.parse(key), raw));
/src/lib/query.js-62-};
