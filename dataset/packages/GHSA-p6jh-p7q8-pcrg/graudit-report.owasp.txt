/src/lib/fsExt.js-190-    // opts.watchPersistent - watcher opts
/src/lib/fsExt.js:191:    // opts.isJson - if true, use json parse, instead of eval
/src/lib/fsExt.js-192-    // opts.jsonParse - custom json parse function
##############################################
/src/lib/fsExt.js-229-                try {
/src/lib/fsExt.js:230:                    eval(code);
/src/lib/fsExt.js-231-                }
/src/lib/fsExt.js-232-                catch(err) {
/src/lib/fsExt.js:233:                    return cb(new Error('fsExt.requireAsync: eval data failed').details({ filePath:filePath, cause:err }));
/src/lib/fsExt.js-234-                }
##############################################
/src/lib/fsExt.js-254-    // opts.watchPersistent - watch options
/src/lib/fsExt.js:255:    // opts.isJson - if true, use json parse, instead of eval
/src/lib/fsExt.js-256-    // opts.jsonParse - custom json parse function
##############################################
/src/lib/fsExt.js-299-            try {
/src/lib/fsExt.js:300:                eval(code);
/src/lib/fsExt.js-301-            }
/src/lib/fsExt.js-302-            catch(err) {
/src/lib/fsExt.js:303:                throw new Error('fsExt.requireSync: eval data failed').details({ filePath:filePath, cause:err });
/src/lib/fsExt.js-304-            }
##############################################
/src/lib/object.js-29-    globalsList:{
/src/lib/object.js:30:        js:['Promise','Generator','GeneratorFunction','Function','Buffer','ArrayBuffer','Reflect','Proxy','eval'],
/src/lib/object.js-31-        node:['setTimeout','clearTimeout','setInterval','clearInterval','setImmediate','clearImmediate','global','GLOBAL','require','process','__dirname','__filename','console','exports','module']
##############################################
/src/lib/template.js-81-
/src/lib/template.js:82:// javascript eval and async global objects
/src/lib/template.js-83-var isolatedVars = 'var '+object.globalsList.js.join(',')+';';
/src/lib/template.js:84:// Nodejs eval and async global objects
/src/lib/template.js-85-isolatedVars += 'var '+object.globalsList.node.join(',')+';';
##############################################
/src/lib/template.js-382-        //     - dive into html mode - only inside curly brackets {} and only by start of html tags
/src/lib/template.js:383:        //     - all content as code to eval
/src/lib/template.js-384-        else if(parser.mode === 'code'){
##############################################
/src/lib/template.js-447-                }
/src/lib/template.js:448:                else parser.parts.push( '\n'+ expStr ); // save prev string as code to eval
/src/lib/template.js-449-                
##############################################
/src/lib/template.js-466-                if(str[parser.lastSlicePosition] === '{') parser.lastSlicePosition++; // skip "{" if parent is curlyBrackets
/src/lib/template.js:467:                parser.parts.push( '\n'+str.slice(parser.lastSlicePosition, parser.position) ); // save prev string as code to eval, without "@"
/src/lib/template.js-468-                parser.lastSlicePosition = parser.position;
##############################################
/src/lib/template.js-507-                if(str[parser.lastSlicePosition] === '{') parser.lastSlicePosition++; // skip "{" if parent is curlyBrackets
/src/lib/template.js:508:                parser.parts.push('\n'+ str.slice(parser.lastSlicePosition, parser.position) ); // save prev string as code to eval
/src/lib/template.js-509-                parser.lastSlicePosition = parser.position;
