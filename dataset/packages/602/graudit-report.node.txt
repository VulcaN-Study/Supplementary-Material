/src/lib/ConnectionConfig.js-191-        // Try to parse this as a JSON expression first
/src/lib/ConnectionConfig.js:192:        options[key] = JSON.parse(value);
/src/lib/ConnectionConfig.js-193-      } catch (err) {
##############################################
/src/lib/protocol/sequences/Query.js-140-Query.prototype['RowDataPacket'] = function(packet, parser, connection) {
/src/lib/protocol/sequences/Query.js:141:  packet.parse(parser, this._resultSet.fieldPackets, this.typeCast, this.nestTables, connection);
/src/lib/protocol/sequences/Query.js-142-
##############################################
/src/lib/protocol/sequences/Query.js-151-  var self = this;
/src/lib/protocol/sequences/Query.js:152:  var localStream = fs.createReadStream(path, {
/src/lib/protocol/sequences/Query.js-153-    flag      : 'r',
##############################################
/src/lib/protocol/Protocol.js-261-  } else {
/src/lib/protocol/Protocol.js:262:    packet.parse(this._parser);
/src/lib/protocol/Protocol.js-263-  }
##############################################
/src/lib/protocol/Protocol.js-284-  try {
/src/lib/protocol/Protocol.js:285:    packet.parse(this._parser);
/src/lib/protocol/Protocol.js-286-  } finally {
