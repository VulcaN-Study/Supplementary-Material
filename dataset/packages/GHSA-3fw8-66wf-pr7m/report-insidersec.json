{
 "dra": [
  {
   "dra": "https://github.com/senchalabs/connect/wiki",
   "type": "url",
   "file": "/src/lib/index.js"
  },
  {
   "dra": "http://github.com/senchalabs/connect",
   "type": "url",
   "file": "/src/lib/index.js"
  },
  {
   "dra": "https://github.com/felixge/node-formidable",
   "type": "url",
   "file": "/src/lib/middleware/multipart.js"
  },
  {
   "dra": "http://github.com/visionmedia/connect-redis",
   "type": "url",
   "file": "/src/lib/middleware/session.js"
  },
  {
   "dra": "http://example.com?key=value",
   "type": "url",
   "file": "/src/lib/middleware/staticCache.js"
  },
  {
   "dra": "https://github.com/LearnBoost/connect-timeout",
   "type": "url",
   "file": "/src/lib/middleware/timeout.js"
  },
  {
   "dra": "https://github.com/visionmedia/node-cookie-signature",
   "type": "url",
   "file": "/src/lib/utils.js"
  }
 ],
 "sca": [
  {
   "cwe": "CWE-934",
   "cves": "CVE-2015-8859",
   "sast": "",
   "title": "Root Path Disclosure - send",
   "severity": "low",
   "advisoryId": 56,
   "description": "Versions of `send` prior to 0.11.2 are affected by an information leakage vulnerability which may allow an attacker to enumerate paths on the server filesystem.\n",
   "recomendation": "Update to version 0.11.1 or later."
  },
  {
   "cwe": "CWE-208",
   "cves": "CVE-2016-1000236",
   "sast": "",
   "title": "Timing Attack - cookie-signature",
   "severity": "moderate",
   "advisoryId": 134,
   "description": "Affected versions of `cookie-signature` are vulnerable to timing attacks as a result of using a fail-early comparison instead of a constant-time comparison. \n\nTiming attacks remove the exponential increase in entropy gained from increased secret length, by providing per-character feedback on the correctness of a guess via miniscule timing differences.\n\nUnder favorable network conditions, an attacker can exploit this to guess the secret in no more than `charset*length` guesses, instead of `charset^length` guesses required were the timing attack not present. \n",
   "recomendation": "Update to 1.0.6 or later."
  },
  {
   "cwe": "CWE-400",
   "cves": "CVE-2017-16119",
   "sast": "",
   "title": "Regular Expression Denial of Service - fresh",
   "severity": "high",
   "advisoryId": 526,
   "description": "Affected versions of `fresh` are vulnerable to regular expression denial of service when parsing specially crafted user input.",
   "recomendation": "Update to version 0.5.2 or later."
  },
  {
   "cwe": "CWE-471",
   "cves": "CVE-2017-1000048",
   "sast": "",
   "title": "Prototype Pollution Protection Bypass - qs",
   "severity": "high",
   "advisoryId": 1469,
   "description": "Affected version of `qs` are vulnerable to Prototype Pollution because it is possible to bypass the protection. The `qs.parse` function fails to properly prevent an object's prototype to be altered when parsing arbitrary input. Input containing `[` or `]` may bypass the prototype pollution protection and alter the Object prototype. This allows attackers to override properties that will exist in all objects, which may lead to Denial of Service or Remote Code Execution in specific circumstances.",
   "recomendation": "Upgrade to 6.0.4, 6.1.2, 6.2.3, 6.3.2 or later."
  },
  {
   "cwe": "CWE-730",
   "cves": "CVE-2014-10064",
   "sast": "",
   "title": "Denial-of-Service Extended Event Loop Blocking - qs",
   "severity": "high",
   "advisoryId": 28,
   "description": "Versions prior to 1.0.0 of `qs` are affected by a denial of service vulnerability that results from excessive recursion in parsing a deeply nested JSON string.\n\n",
   "recomendation": "Update to version 1.0.0 or later"
  },
  {
   "cwe": "CWE-730",
   "cves": "CVE-2014-7191",
   "sast": "",
   "title": "Denial-of-Service Memory Exhaustion - qs",
   "severity": "high",
   "advisoryId": 29,
   "description": "Versions prior to 1.0 of `qs` are affected by a denial of service condition. This condition is triggered by parsing a crafted string that deserializes into very large sparse arrays, resulting in the process running out of memory and eventually crashing.",
   "recomendation": "Update to version 1.0.0 or later."
  },
  {
   "cwe": "CWE-22",
   "cves": "CVE-2014-6394",
   "sast": "",
   "title": "Directory Traversal - send",
   "severity": "low",
   "advisoryId": 32,
   "description": "Versions 0.8.3 and earlier of `send` are affected by a directory traversal vulnerability. When relying on the root option to restrict file access it may be possible for an application consumer to escape out of the restricted directory and access files in a similarly named directory. \n\nFor example, `static(_dirname + '/public')` would allow access to `_dirname + '/public-restricted'`.",
   "recomendation": "Update to version 0.8.4 or later."
  }
 ],
 "sast": {
  "name": "connect",
  "version": "2.8.0",
  "averageCvss": 7.1,
  "securityScore": 29,
  "size": "155759 Bytes",
  "numberOfLines": 4004
 },
 "libraries": [
  {
   "name": "debug",
   "current": "*"
  },
  {
   "name": "buffer-crc32",
   "current": "0.2.1"
  },
  {
   "name": "bytes",
   "current": "0.2.0"
  },
  {
   "name": "fresh",
   "current": "0.1.0"
  },
  {
   "name": "cookie",
   "current": "0.0.5"
  },
  {
   "name": "send",
   "current": "0.1.1"
  },
  {
   "name": "pause",
   "current": "0.0.1"
  },
  {
   "name": "uid2",
   "current": "0.0.2"
  },
  {
   "name": "qs",
   "current": "0.6.5"
  },
  {
   "name": "formidable",
   "current": "1.0.14"
  },
  {
   "name": "cookie-signature",
   "current": "1.0.1"
  }
 ],
 "vulnerabilities": [
  {
   "cvss": 7.1,
   "cwe": "CWE-327",
   "line": 80,
   "class": "utils.js (80:6)",
   "vul_id": "1ab15c27d5d1cb327cf2d40c2039d3a9",
   "method": ".createHash('md5')",
   "column": 6,
   "longMessage": "The MD5 hash algorithm that was used is considered weak. It can also cause hash collisions.",
   "classMessage": "/lib/utils.js (80:6)",
   "shortMessage": "It is always recommended to use some CHF (Cryptographic Hash Function), which is mathematically strong and not reversible. SHA512 would be the most recommended hash for storing the password and it is also important to adopt some type of Salt, so that the Hash is more secure.",
   "affectedFiles": [
    "/lib/connect.js",
    "/lib/middleware/basicAuth.js",
    "/lib/middleware/compress.js",
    "/lib/middleware/cookieParser.js",
    "/lib/middleware/cookieSession.js",
    "/lib/middleware/csrf.js",
    "/lib/middleware/directory.js",
    "/lib/middleware/errorHandler.js",
    "/lib/middleware/favicon.js",
    "/lib/middleware/json.js",
    "/lib/middleware/limit.js",
    "/lib/middleware/multipart.js",
    "/lib/middleware/query.js",
    "/lib/middleware/session/cookie.js",
    "/lib/middleware/session/session.js",
    "/lib/middleware/session.js",
    "/lib/middleware/static.js",
    "/lib/middleware/staticCache.js",
    "/lib/middleware/urlencoded.js",
    "/lib/proto.js"
   ]
  }
 ]
}