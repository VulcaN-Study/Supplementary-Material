{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 36,
          "line": 2
        },
        "extra": {
          "line": "    \"vendor-prefix\"               : true,",
          "message": "Syntax error"
        },
        "path": "/src/.csslintrc",
        "start": {
          "col": 35,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 13,
          "line": 3
        },
        "extra": {
          "line": "  \"globals\":  {",
          "message": "Syntax error"
        },
        "path": "/src/.jshintrc",
        "start": {
          "col": 12,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "eval_nodejs": {
      "files": [
        {
          "file_path": "/src/dist/components/api.js",
          "match_lines": [
            43,
            1004
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.api.settings, parameters)\n\n          : $.extend({}, $.fn.api.settings),\n\n\n\n        // internal aliases\n\n        namespace       = settings.namespace,\n\n        metadata        = settings.metadata,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        className       = settings.className,\n\n\n\n        // define namespaces for modules\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        // element that creates request\n\n        $module         = $(this),\n\n        $form           = $module.closest(selector.form),\n\n\n\n        // context used for state\n\n        $context        = (settings.stateContext)\n\n          ? $(settings.stateContext)\n\n          : $module,\n\n\n\n        // request details\n\n        ajaxSettings,\n\n        requestSettings,\n\n        url,\n\n        data,\n\n        requestStartTime,\n\n\n\n        // standard module\n\n        element         = this,\n\n        context         = $context[0],\n\n        instance        = $module.data(moduleNamespace),\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          if(!methodInvoked) {\n\n            module.bind.events();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, instance)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module for', element);\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            var\n\n              triggerEvent = module.get.event()\n\n            ;\n\n            if( triggerEvent ) {\n\n              module.verbose('Attaching API events to element', triggerEvent);\n\n              $module\n\n                .on(triggerEvent + eventNamespace, module.event.trigger)\n\n              ;\n\n            }\n\n            else if(settings.on == 'now') {\n\n              module.debug('Querying API endpoint immediately');\n\n              module.query();\n\n            }\n\n          }\n\n        },\n\n\n\n        decode: {\n\n          json: function(response) {\n\n            if(response !== undefined && typeof response == 'string') {\n\n              try {\n\n               response = JSON.parse(response);\n\n              }\n\n              catch(e) {\n\n                // isnt json string\n\n              }\n\n            }\n\n            return response;\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cachedResponse: function(url) {\n\n            var\n\n              response\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            response = sessionStorage.getItem(url);\n\n            module.debug('Using cached response', url, response);\n\n            response = module.decode.json(response);\n\n            return response;\n\n          }\n\n        },\n\n        write: {\n\n          cachedResponse: function(url, response) {\n\n            if(response && response === '') {\n\n              module.debug('Response empty, not caching', response);\n\n              return;\n\n            }\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            if( $.isPlainObject(response) ) {\n\n              response = JSON.stringify(response);\n\n            }\n\n            sessionStorage.setItem(url, response);\n\n            module.verbose('Storing cached response for url', url, response);\n\n          }\n\n        },\n\n\n\n        query: function() {\n\n\n\n          if(module.is.disabled()) {\n\n            module.debug('Element is disabled API request aborted');\n\n            return;\n\n          }\n\n\n\n          if(module.is.loading()) {\n\n            if(settings.interruptRequests) {\n\n              module.debug('Interrupting previous request');\n\n              module.abort();\n\n            }\n\n            else {\n\n              module.debug('Cancelling request, previous request is still pending');\n\n              return;\n\n            }\n\n          }\n\n\n\n          // pass element metadata to url (value, text)\n\n          if(settings.defaultData) {\n\n            $.extend(true, settings.urlData, module.get.defaultData());\n\n          }\n\n\n\n          // Add form content\n\n          if(settings.serializeForm) {\n\n            settings.data = module.add.formData(settings.data);\n\n          }\n\n\n\n          // call beforesend and get any settings changes\n\n          requestSettings = module.get.settings();\n\n\n\n          // check if before send cancelled request\n\n          if(requestSettings === false) {\n\n            module.cancelled = true;\n\n            module.error(error.beforeSend);\n\n            return;\n\n          }\n\n          else {\n\n            module.cancelled = false;\n\n          }\n\n\n\n          // get url\n\n          url = module.get.templatedURL();\n\n\n\n          if(!url && !module.is.mocked()) {\n\n            module.error(error.missingURL);\n\n            return;\n\n          }\n\n\n\n          // replace variables\n\n          url = module.add.urlData( url );\n\n          // missing url parameters\n\n          if( !url && !module.is.mocked()) {\n\n            return;\n\n          }\n\n\n\n          requestSettings.url = settings.base + url;\n\n\n\n          // look for jQuery ajax parameters in settings\n\n          ajaxSettings = $.extend(true, {}, settings, {\n\n            type       : settings.method || settings.type,\n\n            data       : data,\n\n            url        : settings.base + url,\n\n            beforeSend : settings.beforeXHR,\n\n            success    : function() {},\n\n            failure    : function() {},\n\n            complete   : function() {}\n\n          });\n\n\n\n          module.debug('Querying URL', ajaxSettings.url);\n\n          module.verbose('Using AJAX settings', ajaxSettings);\n\n          if(settings.cache === 'local' && module.read.cachedResponse(url)) {\n\n            module.debug('Response returned from local cache');\n\n            module.request = module.create.request();\n\n            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);\n\n            return;\n\n          }\n\n\n\n          if( !settings.throttle ) {\n\n            module.debug('Sending request', data, ajaxSettings.method);\n\n            module.send.request();\n\n          }\n\n          else {\n\n            if(!settings.throttleFirstRequest && !module.timer) {\n\n              module.debug('Sending request', data, ajaxSettings.method);\n\n              module.send.request();\n\n              module.timer = setTimeout(function(){}, settings.throttle);\n\n            }\n\n            else {\n\n              module.debug('Throttling request', settings.throttle);\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.timer) {\n\n                  delete module.timer;\n\n                }\n\n                module.debug('Sending throttled request', data, ajaxSettings.method);\n\n                module.send.request();\n\n              }, settings.throttle);\n\n            }\n\n          }\n\n\n\n        },\n\n\n\n        should: {\n\n          removeError: function() {\n\n            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );\n\n          }\n\n        },\n\n\n\n        is: {\n\n          disabled: function() {\n\n            return ($module.filter(selector.disabled).length > 0);\n\n          },\n\n          expectingJSON: function() {\n\n            return settings.dataType === 'json' || settings.dataType === 'jsonp';\n\n          },\n\n          form: function() {\n\n            return $module.is('form') || $context.is('form');\n\n          },\n\n          mocked: function() {\n\n            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);\n\n          },\n\n          input: function() {\n\n            return $module.is('input');\n\n          },\n\n          loading: function() {\n\n            return (module.request)\n\n              ? (module.request.state() == 'pending')\n\n              : false\n\n            ;\n\n          },\n\n          abortedRequest: function(xhr) {\n\n            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\n\n              module.verbose('XHR request determined to be aborted');\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('XHR request was not aborted');\n\n              return false;\n\n            }\n\n          },\n\n          validResponse: function(response) {\n\n            if( (!module.is.expectingJSON()) || !$.isFunction(settings.successTest) ) {\n\n              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);\n\n              return true;\n\n            }\n\n            module.debug('Checking JSON returned success', settings.successTest, response);\n\n            if( settings.successTest(response) ) {\n\n              module.debug('Response passed success test', response);\n\n              return true;\n\n            }\n\n            else {\n\n              module.debug('Response failed success test', response);\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        was: {\n\n          cancelled: function() {\n\n            return (module.cancelled || false);\n\n          },\n\n          succesful: function() {\n\n            return (module.request && module.request.state() == 'resolved');\n\n          },\n\n          failure: function() {\n\n            return (module.request && module.request.state() == 'rejected');\n\n          },\n\n          complete: function() {\n\n            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );\n\n          }\n\n        },\n\n\n\n        add: {\n\n          urlData: function(url, urlData) {\n\n            var\n\n              requiredVariables,\n\n              optionalVariables\n\n            ;\n\n            if(url) {\n\n              requiredVariables = url.match(settings.regExp.required);\n\n              optionalVariables = url.match(settings.regExp.optional);\n\n              urlData           = urlData || settings.urlData;\n\n              if(requiredVariables) {\n\n                module.debug('Looking for required URL variables', requiredVariables);\n\n                $.each(requiredVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(2, templatedString.length - 3)\n\n                      : templatedString.substr(1, templatedString.length - 2),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // remove value\n\n                  if(value === undefined) {\n\n                    module.error(error.requiredParameter, variable, url);\n\n                    url = false;\n\n                    return false;\n\n                  }\n\n                  else {\n\n                    module.verbose('Found required variable', variable, value);\n\n                    value = (settings.encodeParameters)\n\n                      ? module.get.urlEncodedValue(value)\n\n                      : value\n\n                    ;\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                });\n\n              }\n\n              if(optionalVariables) {\n\n                module.debug('Looking for optional URL variables', requiredVariables);\n\n                $.each(optionalVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {/$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(3, templatedString.length - 4)\n\n                      : templatedString.substr(2, templatedString.length - 3),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // optional replacement\n\n                  if(value !== undefined) {\n\n                    module.verbose('Optional variable Found', variable, value);\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                  else {\n\n                    module.verbose('Optional variable not found', variable);\n\n                    // remove preceding slash if set\n\n                    if(url.indexOf('/' + templatedString) !== -1) {\n\n                      url = url.replace('/' + templatedString, '');\n\n                    }\n\n                    else {\n\n                      url = url.replace(templatedString, '');\n\n                    }\n\n                  }\n\n                });\n\n              }\n\n            }\n\n            return url;\n\n          },\n\n          formData: function(data) {\n\n            var\n\n              canSerialize = ($.fn.serializeObject !== undefined),\n\n              formData     = (canSerialize)\n\n                ? $form.serializeObject()\n\n                : $form.serialize(),\n\n              hasOtherData\n\n            ;\n\n            data         = data || settings.data;\n\n            hasOtherData = $.isPlainObject(data);\n\n\n\n            if(hasOtherData) {\n\n              if(canSerialize) {\n\n                module.debug('Extending existing data with form data', data, formData);\n\n                data = $.extend(true, {}, data, formData);\n\n              }\n\n              else {\n\n                module.error(error.missingSerialize);\n\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\n\n                data = formData;\n\n              }\n\n            }\n\n            else {\n\n              module.debug('Adding form data', formData);\n\n              data = formData;\n\n            }\n\n            return data;\n\n          }\n\n        },\n\n\n\n        send: {\n\n          request: function() {\n\n            module.set.loading();\n\n            module.request = module.create.request();\n\n            if( module.is.mocked() ) {\n\n              module.mockedXHR = module.create.mockedXHR();\n\n            }\n\n            else {\n\n              module.xhr = module.create.xhr();\n\n            }\n\n            settings.onRequest.call(context, module.request, module.xhr);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          trigger: function(event) {\n\n            module.query();\n\n            if(event.type == 'submit' || event.type == 'click') {\n\n              event.preventDefault();\n\n            }\n\n          },\n\n          xhr: {\n\n            always: function() {\n\n              // nothing special\n\n            },\n\n            done: function(response, textStatus, xhr) {\n\n              var\n\n                context            = this,\n\n                elapsedTime        = (new Date().getTime() - requestStartTime),\n\n                timeLeft           = (settings.loadingDuration - elapsedTime),\n\n                translatedResponse = ( $.isFunction(settings.onResponse) )\n\n                  ? module.is.expectingJSON()\n\n                    ? settings.onResponse.call(context, $.extend(true, {}, response))\n\n                    : settings.onResponse.call(context, response)\n\n                  : false\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(translatedResponse) {\n\n                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);\n\n                response = translatedResponse;\n\n              }\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.validResponse(response) ) {\n\n                  module.request.resolveWith(context, [response, xhr]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'invalid']);\n\n                }\n\n              }, timeLeft);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                context     = this,\n\n                elapsedTime = (new Date().getTime() - requestStartTime),\n\n                timeLeft    = (settings.loadingDuration - elapsedTime)\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.abortedRequest(xhr) ) {\n\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\n\n                }\n\n              }, timeLeft);\n\n            }\n\n          },\n\n          request: {\n\n            done: function(response, xhr) {\n\n              module.debug('Successful API Response', response);\n\n              if(settings.cache === 'local' && url) {\n\n                module.write.cachedResponse(url, response);\n\n                module.debug('Saving server response locally', module.cache);\n\n              }\n\n              settings.onSuccess.call(context, response, $module, xhr);\n\n            },\n\n            complete: function(firstParameter, secondParameter) {\n\n              var\n\n                xhr,\n\n                response\n\n              ;\n\n              // have to guess callback parameters based on request success\n\n              if( module.was.succesful() ) {\n\n                response = firstParameter;\n\n                xhr      = secondParameter;\n\n              }\n\n              else {\n\n                xhr      = firstParameter;\n\n                response = module.get.responseFromXHR(xhr);\n\n              }\n\n              module.remove.loading();\n\n              settings.onComplete.call(context, response, $module, xhr);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                // pull response from xhr if available\n\n                response     = module.get.responseFromXHR(xhr),\n\n                errorMessage = module.get.errorFromRequest(response, status, httpMessage)\n\n              ;\n\n              if(status == 'aborted') {\n\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\n\n                settings.onAbort.call(context, status, $module, xhr);\n\n                return true;\n\n              }\n\n              else if(status == 'invalid') {\n\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\n\n              }\n\n              else if(status == 'error') {\n\n                if(xhr !== undefined) {\n\n                  module.debug('XHR produced a server error', status, httpMessage);\n\n                  // make sure we have an error to display to console\n\n                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\n\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\n\n                  }\n\n                  settings.onError.call(context, errorMessage, $module, xhr);\n\n                }\n\n              }\n\n\n\n              if(settings.errorDuration && status !== 'aborted') {\n\n                module.debug('Adding error state');\n\n                module.set.error();\n\n                if( module.should.removeError() ) {\n\n                  setTimeout(module.remove.error, settings.errorDuration);\n\n                }\n\n              }\n\n              module.debug('API Request failed', errorMessage, xhr);\n\n              settings.onFailure.call(context, response, $module, xhr);\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n\n\n          request: function() {\n\n            // api request promise\n\n            return $.Deferred()\n\n              .always(module.event.request.complete)\n\n              .done(module.event.request.done)\n\n              .fail(module.event.request.fail)\n\n            ;\n\n          },\n\n\n\n          mockedXHR: function () {\n\n            var\n\n              // xhr does not simulate these properties of xhr but must return them\n\n              textStatus     = false,\n\n              status         = false,\n\n              httpMessage    = false,\n\n              responder      = settings.mockResponse      || settings.response,\n\n              asyncResponder = settings.mockResponseAsync || settings.responseAsync,\n\n              asyncCallback,\n\n              response,\n\n              mockedXHR\n\n            ;\n\n\n\n            mockedXHR = $.Deferred()\n\n              .always(module.event.xhr.complete)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n\n\n            if(responder) {\n\n              if( $.isFunction(responder) ) {\n\n                module.debug('Using specified synchronous callback', responder);\n\n                response = responder.call(context, requestSettings);\n\n              }\n\n              else {\n\n                module.debug('Using settings specified response', responder);\n\n                response = responder;\n\n              }\n\n              // simulating response\n\n              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n            }\n\n            else if( $.isFunction(asyncResponder) ) {\n\n              asyncCallback = function(response) {\n\n                module.debug('Async callback returned response', response);\n\n\n\n                if(response) {\n\n                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n                }\n\n                else {\n\n                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);\n\n                }\n\n              };\n\n              module.debug('Using specified async response callback', asyncResponder);\n\n              asyncResponder.call(context, requestSettings, asyncCallback);\n\n            }\n\n            return mockedXHR;\n\n          },\n\n\n\n          xhr: function() {\n\n            var\n\n              xhr\n\n            ;\n\n            // ajax request promise\n\n            xhr = $.ajax(ajaxSettings)\n\n              .always(module.event.xhr.always)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n            module.verbose('Created server request', xhr, ajaxSettings);\n\n            return xhr;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          error: function() {\n\n            module.verbose('Adding error state to element', $context);\n\n            $context.addClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Adding loading state to element', $context);\n\n            $context.addClass(className.loading);\n\n            requestStartTime = new Date().getTime();\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          error: function() {\n\n            module.verbose('Removing error state from element', $context);\n\n            $context.removeClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Removing loading state from element', $context);\n\n            $context.removeClass(className.loading);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          responseFromXHR: function(xhr) {\n\n            return $.isPlainObject(xhr)\n\n              ? (module.is.expectingJSON())\n\n                ? module.decode.json(xhr.responseText)\n\n                : xhr.responseText\n\n              : false\n\n            ;\n\n          },\n\n          errorFromRequest: function(response, status, httpMessage) {\n\n            return ($.isPlainObject(response) && response.error !== undefined)\n\n              ? response.error // use json error message\n\n              : (settings.error[status] !== undefined) // use server error message\n\n                ? settings.error[status]\n\n                : httpMessage\n\n            ;\n\n          },\n\n          request: function() {\n\n            return module.request || false;\n\n          },\n\n          xhr: function() {\n\n            return module.xhr || false;\n\n          },\n\n          settings: function() {\n\n            var\n\n              runSettings\n\n            ;\n\n            runSettings = settings.beforeSend.call(context, settings);\n\n            if(runSettings) {\n\n              if(runSettings.success !== undefined) {\n\n                module.debug('Legacy success callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.success);\n\n                runSettings.onSuccess = runSettings.success;\n\n              }\n\n              if(runSettings.failure !== undefined) {\n\n                module.debug('Legacy failure callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.failure);\n\n                runSettings.onFailure = runSettings.failure;\n\n              }\n\n              if(runSettings.complete !== undefined) {\n\n                module.debug('Legacy complete callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.complete);\n\n                runSettings.onComplete = runSettings.complete;\n\n              }\n\n            }\n\n            if(runSettings === undefined) {\n\n              module.error(error.noReturnedValue);\n\n            }\n\n            if(runSettings === false) {\n\n              return runSettings;\n\n            }\n\n            return (runSettings !== undefined)\n\n              ? $.extend(true, {}, runSettings)\n\n              : $.extend(true, {}, settings)\n\n            ;\n\n          },\n\n          urlEncodedValue: function(value) {\n\n            var\n\n              decodedValue   = window.decodeURIComponent(value),\n\n              encodedValue   = window.encodeURIComponent(value),\n\n              alreadyEncoded = (decodedValue !== value)\n\n            ;\n\n            if(alreadyEncoded) {\n\n              module.debug('URL value is already encoded, avoiding double encoding', value);\n\n              return value;\n\n            }\n\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\n\n            return encodedValue;\n\n          },\n\n          defaultData: function() {\n\n            var\n\n              data = {}\n\n            ;\n\n            if( !$.isWindow(element) ) {\n\n              if( module.is.input() ) {\n\n                data.value = $module.val();\n\n              }\n\n              else if( module.is.form() ) {\n\n\n\n              }\n\n              else {\n\n                data.text = $module.text();\n\n              }\n\n            }\n\n            return data;\n\n          },\n\n          event: function() {\n\n            if( $.isWindow(element) || settings.on == 'now' ) {\n\n              module.debug('API called without element, no events attached');\n\n              return false;\n\n            }\n\n            else if(settings.on == 'auto') {\n\n              if( $module.is('input') ) {\n\n                return (element.oninput !== undefined)\n\n                  ? 'input'\n\n                  : (element.onpropertychange !== undefined)\n\n                    ? 'propertychange'\n\n                    : 'keyup'\n\n                ;\n\n              }\n\n              else if( $module.is('form') ) {\n\n                return 'submit';\n\n              }\n\n              else {\n\n                return 'click';\n\n              }\n\n            }\n\n            else {\n\n              return settings.on;\n\n            }\n\n          },\n\n          templatedURL: function(action) {\n\n            action = action || $module.data(metadata.action) || settings.action || false;\n\n            url    = $module.data(metadata.url) || settings.url || false;\n\n            if(url) {\n\n              module.debug('Using specified url', url);\n\n              return url;\n\n            }\n\n            if(action) {\n\n              module.debug('Looking up url for action', action, settings.api);\n\n              if(settings.api[action] === undefined && !module.is.mocked()) {\n\n                module.error(error.missingAction, settings.action, settings.api);\n\n                return;\n\n              }\n\n              url = settings.api[action];\n\n            }\n\n            else if( module.is.form() ) {\n\n              url = $module.attr('action') || $context.attr('action') || false;\n\n              module.debug('No url or action specified, defaulting to form action', url);\n\n            }\n\n            return url;\n\n          }\n\n        },\n\n\n\n        abort: function() {\n\n          var\n\n            xhr = module.get.xhr()\n\n          ;\n\n          if( xhr && xhr.state() !== 'resolved') {\n\n            module.debug('Cancelling API request');\n\n            xhr.abort();\n\n          }\n\n        },\n\n\n\n        // reset state\n\n        reset: function() {\n\n          module.remove.error();\n\n          module.remove.loading();\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                //'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/components/dropdown.js",
          "match_lines": [
            41,
            3734
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.dropdown.settings, parameters)\n\n          : $.extend({}, $.fn.dropdown.settings),\n\n\n\n        className       = settings.className,\n\n        message         = settings.message,\n\n        fields          = settings.fields,\n\n        keys            = settings.keys,\n\n        metadata        = settings.metadata,\n\n        namespace       = settings.namespace,\n\n        regExp          = settings.regExp,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        templates       = settings.templates,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $module         = $(this),\n\n        $context        = $(settings.context),\n\n        $text           = $module.find(selector.text),\n\n        $search         = $module.find(selector.search),\n\n        $sizer          = $module.find(selector.sizer),\n\n        $input          = $module.find(selector.input),\n\n        $icon           = $module.find(selector.icon),\n\n        $clear          = $module.find(selector.clearIcon),\n\n\n\n        $combo = ($module.prev().find(selector.text).length > 0)\n\n          ? $module.prev().find(selector.text)\n\n          : $module.prev(),\n\n\n\n        $menu           = $module.children(selector.menu),\n\n        $item           = $menu.find(selector.item),\n\n        $divider        = settings.hideDividers ? $item.parent().children(selector.divider) : $(),\n\n\n\n        activated       = false,\n\n        itemActivated   = false,\n\n        internalChange  = false,\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        initialLoad,\n\n        pageLostFocus,\n\n        willRefocus,\n\n        elementNamespace,\n\n        id,\n\n        selectObserver,\n\n        menuObserver,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing dropdown', settings);\n\n\n\n          if( module.is.alreadySetup() ) {\n\n            module.setup.reference();\n\n          }\n\n          else {\n\n\n\n            module.setup.layout();\n\n\n\n            if(settings.values) {\n\n              module.change.values(settings.values);\n\n            }\n\n\n\n            module.refreshData();\n\n\n\n            module.save.defaults();\n\n            module.restore.selected();\n\n\n\n            module.create.id();\n\n            module.bind.events();\n\n\n\n            module.observeChanges();\n\n            module.instantiate();\n\n          }\n\n\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of dropdown', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous dropdown', $module);\n\n          module.remove.tabbable();\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n          $menu\n\n            .off(eventNamespace)\n\n          ;\n\n          $document\n\n            .off(elementNamespace)\n\n          ;\n\n          module.disconnect.menuObserver();\n\n          module.disconnect.selectObserver();\n\n        },\n\n\n\n        observeChanges: function() {\n\n          if('MutationObserver' in window) {\n\n            selectObserver = new MutationObserver(module.event.select.mutation);\n\n            menuObserver   = new MutationObserver(module.event.menu.mutation);\n\n            module.debug('Setting up mutation observer', selectObserver, menuObserver);\n\n            module.observe.select();\n\n            module.observe.menu();\n\n          }\n\n        },\n\n\n\n        disconnect: {\n\n          menuObserver: function() {\n\n            if(menuObserver) {\n\n              menuObserver.disconnect();\n\n            }\n\n          },\n\n          selectObserver: function() {\n\n            if(selectObserver) {\n\n              selectObserver.disconnect();\n\n            }\n\n          }\n\n        },\n\n        observe: {\n\n          select: function() {\n\n            if(module.has.input()) {\n\n              selectObserver.observe($module[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          },\n\n          menu: function() {\n\n            if(module.has.menu()) {\n\n              menuObserver.observe($menu[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n          id: function() {\n\n            id = (Math.random().toString(16) + '000000000').substr(2, 8);\n\n            elementNamespace = '.' + id;\n\n            module.verbose('Creating unique id for element', id);\n\n          },\n\n          userChoice: function(values) {\n\n            var\n\n              $userChoices,\n\n              $userChoice,\n\n              isUserValue,\n\n              html\n\n            ;\n\n            values = values || module.get.userValues();\n\n            if(!values) {\n\n              return false;\n\n            }\n\n            values = $.isArray(values)\n\n              ? values\n\n              : [values]\n\n            ;\n\n            $.each(values, function(index, value) {\n\n              if(module.get.item(value) === false) {\n\n                html         = settings.templates.addition( module.add.variables(message.addResult, value) );\n\n                $userChoice  = $('<div />')\n\n                  .html(html)\n\n                  .attr('data-' + metadata.value, value)\n\n                  .attr('data-' + metadata.text, value)\n\n                  .addClass(className.addition)\n\n                  .addClass(className.item)\n\n                ;\n\n                if(settings.hideAdditions) {\n\n                  $userChoice.addClass(className.hidden);\n\n                }\n\n                $userChoices = ($userChoices === undefined)\n\n                  ? $userChoice\n\n                  : $userChoices.add($userChoice)\n\n                ;\n\n                module.verbose('Creating user choices for value', value, $userChoice);\n\n              }\n\n            });\n\n            return $userChoices;\n\n          },\n\n          userLabels: function(value) {\n\n            var\n\n              userValues = module.get.userValues()\n\n            ;\n\n            if(userValues) {\n\n              module.debug('Adding user labels', userValues);\n\n              $.each(userValues, function(index, value) {\n\n                module.verbose('Adding custom user value');\n\n                module.add.label(value, value);\n\n              });\n\n            }\n\n          },\n\n          menu: function() {\n\n            $menu = $('<div />')\n\n              .addClass(className.menu)\n\n              .appendTo($module)\n\n            ;\n\n          },\n\n          sizer: function() {\n\n            $sizer = $('<span />')\n\n              .addClass(className.sizer)\n\n              .insertAfter($search)\n\n            ;\n\n          }\n\n        },\n\n\n\n        search: function(query) {\n\n          query = (query !== undefined)\n\n            ? query\n\n            : module.get.query()\n\n          ;\n\n          module.verbose('Searching for query', query);\n\n          if(module.has.minCharacters(query)) {\n\n            module.filter(query);\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        select: {\n\n          firstUnfiltered: function() {\n\n            module.verbose('Selecting first non-filtered element');\n\n            module.remove.selectedItem();\n\n            $item\n\n              .not(selector.unselectable)\n\n              .not(selector.addition + selector.hidden)\n\n                .eq(0)\n\n                .addClass(className.selected)\n\n            ;\n\n          },\n\n          nextAvailable: function($selected) {\n\n            $selected = $selected.eq(0);\n\n            var\n\n              $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),\n\n              $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),\n\n              hasNext        = ($nextAvailable.length > 0)\n\n            ;\n\n            if(hasNext) {\n\n              module.verbose('Moving selection to', $nextAvailable);\n\n              $nextAvailable.addClass(className.selected);\n\n            }\n\n            else {\n\n              module.verbose('Moving selection to', $prevAvailable);\n\n              $prevAvailable.addClass(className.selected);\n\n            }\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          api: function() {\n\n            var\n\n              apiSettings = {\n\n                debug   : settings.debug,\n\n                urlData : {\n\n                  value : module.get.value(),\n\n                  query : module.get.query()\n\n                },\n\n                on    : false\n\n              }\n\n            ;\n\n            module.verbose('First request, initializing API');\n\n            $module\n\n              .api(apiSettings)\n\n            ;\n\n          },\n\n          layout: function() {\n\n            if( $module.is('select') ) {\n\n              module.setup.select();\n\n              module.setup.returnedObject();\n\n            }\n\n            if( !module.has.menu() ) {\n\n              module.create.menu();\n\n            }\n\n            if ( module.is.selection() && module.is.clearable() && !module.has.clearItem() ) {\n\n              module.verbose('Adding clear icon');\n\n              $clear = $('<i />')\n\n                .addClass('remove icon')\n\n                .insertBefore($text)\n\n              ;\n\n            }\n\n            if( module.is.search() && !module.has.search() ) {\n\n              module.verbose('Adding search input');\n\n              $search = $('<input />')\n\n                .addClass(className.search)\n\n                .prop('autocomplete', 'off')\n\n                .insertBefore($text)\n\n              ;\n\n            }\n\n            if( module.is.multiple() && module.is.searchSelection() && !module.has.sizer()) {\n\n              module.create.sizer();\n\n            }\n\n            if(settings.allowTab) {\n\n              module.set.tabbable();\n\n            }\n\n          },\n\n          select: function() {\n\n            var\n\n              selectValues  = module.get.selectValues()\n\n            ;\n\n            module.debug('Dropdown initialized on a select', selectValues);\n\n            if( $module.is('select') ) {\n\n              $input = $module;\n\n            }\n\n            // see if select is placed correctly already\n\n            if($input.parent(selector.dropdown).length > 0) {\n\n              module.debug('UI dropdown already exists. Creating dropdown menu only');\n\n              $module = $input.closest(selector.dropdown);\n\n              if( !module.has.menu() ) {\n\n                module.create.menu();\n\n              }\n\n              $menu = $module.children(selector.menu);\n\n              module.setup.menu(selectValues);\n\n            }\n\n            else {\n\n              module.debug('Creating entire dropdown from select');\n\n              $module = $('<div />')\n\n                .attr('class', $input.attr('class') )\n\n                .addClass(className.selection)\n\n                .addClass(className.dropdown)\n\n                .html( templates.dropdown(selectValues) )\n\n                .insertBefore($input)\n\n              ;\n\n              if($input.hasClass(className.multiple) && $input.prop('multiple') === false) {\n\n                module.error(error.missingMultiple);\n\n                $input.prop('multiple', true);\n\n              }\n\n              if($input.is('[multiple]')) {\n\n                module.set.multiple();\n\n              }\n\n              if ($input.prop('disabled')) {\n\n                module.debug('Disabling dropdown');\n\n                $module.addClass(className.disabled);\n\n              }\n\n              $input\n\n                .removeAttr('class')\n\n                .detach()\n\n                .prependTo($module)\n\n              ;\n\n            }\n\n            module.refresh();\n\n          },\n\n          menu: function(values) {\n\n            $menu.html( templates.menu(values, fields));\n\n            $item    = $menu.find(selector.item);\n\n            $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n          },\n\n          reference: function() {\n\n            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');\n\n            // replace module reference\n\n            $module  = $module.parent(selector.dropdown);\n\n            instance = $module.data(moduleNamespace);\n\n            element  = $module.get(0);\n\n            module.refresh();\n\n            module.setup.returnedObject();\n\n          },\n\n          returnedObject: function() {\n\n            var\n\n              $firstModules = $allModules.slice(0, elementIndex),\n\n              $lastModules  = $allModules.slice(elementIndex + 1)\n\n            ;\n\n            // adjust all modules to use correct reference\n\n            $allModules = $firstModules.add($module).add($lastModules);\n\n          }\n\n        },\n\n\n\n        refresh: function() {\n\n          module.refreshSelectors();\n\n          module.refreshData();\n\n        },\n\n\n\n        refreshItems: function() {\n\n          $item    = $menu.find(selector.item);\n\n          $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n        },\n\n\n\n        refreshSelectors: function() {\n\n          module.verbose('Refreshing selector cache');\n\n          $text   = $module.find(selector.text);\n\n          $search = $module.find(selector.search);\n\n          $input  = $module.find(selector.input);\n\n          $icon   = $module.find(selector.icon);\n\n          $combo  = ($module.prev().find(selector.text).length > 0)\n\n            ? $module.prev().find(selector.text)\n\n            : $module.prev()\n\n          ;\n\n          $menu    = $module.children(selector.menu);\n\n          $item    = $menu.find(selector.item);\n\n          $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n        },\n\n\n\n        refreshData: function() {\n\n          module.verbose('Refreshing cached metadata');\n\n          $item\n\n            .removeData(metadata.text)\n\n            .removeData(metadata.value)\n\n          ;\n\n        },\n\n\n\n        clearData: function() {\n\n          module.verbose('Clearing metadata');\n\n          $item\n\n            .removeData(metadata.text)\n\n            .removeData(metadata.value)\n\n          ;\n\n          $module\n\n            .removeData(metadata.defaultText)\n\n            .removeData(metadata.defaultValue)\n\n            .removeData(metadata.placeholderText)\n\n          ;\n\n        },\n\n\n\n        toggle: function() {\n\n          module.verbose('Toggling menu visibility');\n\n          if( !module.is.active() ) {\n\n            module.show();\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        show: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if(!module.can.show() && module.is.remote()) {\n\n            module.debug('No API results retrieved, searching before show');\n\n            module.queryRemote(module.get.query(), module.show);\n\n          }\n\n          if( module.can.show() && !module.is.active() ) {\n\n            module.debug('Showing dropdown');\n\n            if(module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered()) ) {\n\n              module.remove.message();\n\n            }\n\n            if(module.is.allFiltered()) {\n\n              return true;\n\n            }\n\n            if(settings.onShow.call(element) !== false) {\n\n              module.animate.show(function() {\n\n                if( module.can.click() ) {\n\n                  module.bind.intent();\n\n                }\n\n                if(module.has.search()) {\n\n                  module.focusSearch();\n\n                }\n\n                module.set.visible();\n\n                callback.call(element);\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        hide: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if( module.is.active() && !module.is.animatingOutward() ) {\n\n            module.debug('Hiding dropdown');\n\n            if(settings.onHide.call(element) !== false) {\n\n              module.animate.hide(function() {\n\n                module.remove.visible();\n\n                // hidding search focus\n\n                if ( module.is.focusedOnSearch() ) {\n\n                  $search.blur();\n\n                }\n\n                callback.call(element);\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        hideOthers: function() {\n\n          module.verbose('Finding other dropdowns to hide');\n\n          $allModules\n\n            .not($module)\n\n              .has(selector.menu + '.' + className.visible)\n\n                .dropdown('hide')\n\n          ;\n\n        },\n\n\n\n        hideMenu: function() {\n\n          module.verbose('Hiding menu  instantaneously');\n\n          module.remove.active();\n\n          module.remove.visible();\n\n          $menu.transition('hide');\n\n        },\n\n\n\n        hideSubMenus: function() {\n\n          var\n\n            $subMenus = $menu.children(selector.item).find(selector.menu)\n\n          ;\n\n          module.verbose('Hiding sub menus', $subMenus);\n\n          $subMenus.transition('hide');\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            if(hasTouch) {\n\n              module.bind.touchEvents();\n\n            }\n\n            module.bind.keyboardEvents();\n\n            module.bind.inputEvents();\n\n            module.bind.mouseEvents();\n\n          },\n\n          touchEvents: function() {\n\n            module.debug('Touch device detected binding additional touch events');\n\n            if( module.is.searchSelection() ) {\n\n              // do nothing special yet\n\n            }\n\n            else if( module.is.single() ) {\n\n              $module\n\n                .on('touchstart' + eventNamespace, module.event.test.toggle)\n\n              ;\n\n            }\n\n            $menu\n\n              .on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter)\n\n            ;\n\n          },\n\n          keyboardEvents: function() {\n\n            module.verbose('Binding keyboard events');\n\n            $module\n\n              .on('keydown' + eventNamespace, module.event.keydown)\n\n            ;\n\n            if( module.has.search() ) {\n\n              $module\n\n                .on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input)\n\n              ;\n\n            }\n\n            if( module.is.multiple() ) {\n\n              $document\n\n                .on('keydown' + elementNamespace, module.event.document.keydown)\n\n              ;\n\n            }\n\n          },\n\n          inputEvents: function() {\n\n            module.verbose('Binding input change events');\n\n            $module\n\n              .on('change' + eventNamespace, selector.input, module.event.change)\n\n            ;\n\n          },\n\n          mouseEvents: function() {\n\n            module.verbose('Binding mouse events');\n\n            if(module.is.multiple()) {\n\n              $module\n\n                .on('click'   + eventNamespace, selector.label,  module.event.label.click)\n\n                .on('click'   + eventNamespace, selector.remove, module.event.remove.click)\n\n              ;\n\n            }\n\n            if( module.is.searchSelection() ) {\n\n              $module\n\n                .on('mousedown' + eventNamespace, module.event.mousedown)\n\n                .on('mouseup'   + eventNamespace, module.event.mouseup)\n\n                .on('mousedown' + eventNamespace, selector.menu,   module.event.menu.mousedown)\n\n                .on('mouseup'   + eventNamespace, selector.menu,   module.event.menu.mouseup)\n\n                .on('click'     + eventNamespace, selector.icon,   module.event.icon.click)\n\n                .on('click'     + eventNamespace, selector.clearIcon, module.event.clearIcon.click)\n\n                .on('focus'     + eventNamespace, selector.search, module.event.search.focus)\n\n                .on('click'     + eventNamespace, selector.search, module.event.search.focus)\n\n                .on('blur'      + eventNamespace, selector.search, module.event.search.blur)\n\n                .on('click'     + eventNamespace, selector.text,   module.event.text.focus)\n\n              ;\n\n              if(module.is.multiple()) {\n\n                $module\n\n                  .on('click' + eventNamespace, module.event.click)\n\n                ;\n\n              }\n\n            }\n\n            else {\n\n              if(settings.on == 'click') {\n\n                $module\n\n                  .on('click' + eventNamespace, selector.icon, module.event.icon.click)\n\n                  .on('click' + eventNamespace, module.event.test.toggle)\n\n                ;\n\n              }\n\n              else if(settings.on == 'hover') {\n\n                $module\n\n                  .on('mouseenter' + eventNamespace, module.delay.show)\n\n                  .on('mouseleave' + eventNamespace, module.delay.hide)\n\n                ;\n\n              }\n\n              else {\n\n                $module\n\n                  .on(settings.on + eventNamespace, module.toggle)\n\n                ;\n\n              }\n\n              $module\n\n                .on('mousedown' + eventNamespace, module.event.mousedown)\n\n                .on('mouseup'   + eventNamespace, module.event.mouseup)\n\n                .on('focus'     + eventNamespace, module.event.focus)\n\n                .on('click'     + eventNamespace, selector.clearIcon, module.event.clearIcon.click)\n\n              ;\n\n              if(module.has.menuSearch() ) {\n\n                $module\n\n                  .on('blur' + eventNamespace, selector.search, module.event.search.blur)\n\n                ;\n\n              }\n\n              else {\n\n                $module\n\n                  .on('blur' + eventNamespace, module.event.blur)\n\n                ;\n\n              }\n\n            }\n\n            $menu\n\n              .on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter)\n\n              .on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave)\n\n              .on('click'      + eventNamespace, selector.item, module.event.item.click)\n\n            ;\n\n          },\n\n          intent: function() {\n\n            module.verbose('Binding hide intent event to document');\n\n            if(hasTouch) {\n\n              $document\n\n                .on('touchstart' + elementNamespace, module.event.test.touch)\n\n                .on('touchmove'  + elementNamespace, module.event.test.touch)\n\n              ;\n\n            }\n\n            $document\n\n              .on('click' + elementNamespace, module.event.test.hide)\n\n            ;\n\n          }\n\n        },\n\n\n\n        unbind: {\n\n          intent: function() {\n\n            module.verbose('Removing hide intent event from document');\n\n            if(hasTouch) {\n\n              $document\n\n                .off('touchstart' + elementNamespace)\n\n                .off('touchmove' + elementNamespace)\n\n              ;\n\n            }\n\n            $document\n\n              .off('click' + elementNamespace)\n\n            ;\n\n          }\n\n        },\n\n\n\n        filter: function(query) {\n\n          var\n\n            searchTerm = (query !== undefined)\n\n              ? query\n\n              : module.get.query(),\n\n            afterFiltered = function() {\n\n              if(module.is.multiple()) {\n\n                module.filterActive();\n\n              }\n\n              if(query || (!query && module.get.activeItem().length == 0)) {\n\n                module.select.firstUnfiltered();\n\n              }\n\n              if( module.has.allResultsFiltered() ) {\n\n                if( settings.onNoResults.call(element, searchTerm) ) {\n\n                  if(settings.allowAdditions) {\n\n                    if(settings.hideAdditions) {\n\n                      module.verbose('User addition with no menu, setting empty style');\n\n                      module.set.empty();\n\n                      module.hideMenu();\n\n                    }\n\n                  }\n\n                  else {\n\n                    module.verbose('All items filtered, showing message', searchTerm);\n\n                    module.add.message(message.noResults);\n\n                  }\n\n                }\n\n                else {\n\n                  module.verbose('All items filtered, hiding dropdown', searchTerm);\n\n                  module.hideMenu();\n\n                }\n\n              }\n\n              else {\n\n                module.remove.empty();\n\n                module.remove.message();\n\n              }\n\n              if(settings.allowAdditions) {\n\n                module.add.userSuggestion(query);\n\n              }\n\n              if(module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch() ) {\n\n                module.show();\n\n              }\n\n            }\n\n          ;\n\n          if(settings.useLabels && module.has.maxSelections()) {\n\n            return;\n\n          }\n\n          if(settings.apiSettings) {\n\n            if( module.can.useAPI() ) {\n\n              module.queryRemote(searchTerm, function() {\n\n                if(settings.filterRemoteData) {\n\n                  module.filterItems(searchTerm);\n\n                }\n\n                afterFiltered();\n\n              });\n\n            }\n\n            else {\n\n              module.error(error.noAPI);\n\n            }\n\n          }\n\n          else {\n\n            module.filterItems(searchTerm);\n\n            afterFiltered();\n\n          }\n\n        },\n\n\n\n        queryRemote: function(query, callback) {\n\n          var\n\n            apiSettings = {\n\n              errorDuration : false,\n\n              cache         : 'local',\n\n              throttle      : settings.throttle,\n\n              urlData       : {\n\n                query: query\n\n              },\n\n              onError: function() {\n\n                module.add.message(message.serverError);\n\n                callback();\n\n              },\n\n              onFailure: function() {\n\n                module.add.message(message.serverError);\n\n                callback();\n\n              },\n\n              onSuccess : function(response) {\n\n                var\n\n                  values          = response[fields.remoteValues],\n\n                  hasRemoteValues = ($.isArray(values) && values.length > 0)\n\n                ;\n\n                if(hasRemoteValues) {\n\n                  module.remove.message();\n\n                  module.setup.menu({\n\n                    values: response[fields.remoteValues]\n\n                  });\n\n                }\n\n                else {\n\n                  module.add.message(message.noResults);\n\n                }\n\n                callback();\n\n              }\n\n            }\n\n          ;\n\n          if( !$module.api('get request') ) {\n\n            module.setup.api();\n\n          }\n\n          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);\n\n          $module\n\n            .api('setting', apiSettings)\n\n            .api('query')\n\n          ;\n\n        },\n\n\n\n        filterItems: function(query) {\n\n          var\n\n            searchTerm = (query !== undefined)\n\n              ? query\n\n              : module.get.query(),\n\n            results          =  null,\n\n            escapedTerm      = module.escape.string(searchTerm),\n\n            beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm')\n\n          ;\n\n          // avoid loop if we're matching nothing\n\n          if( module.has.query() ) {\n\n            results = [];\n\n\n\n            module.verbose('Searching for matching values', searchTerm);\n\n            $item\n\n              .each(function(){\n\n                var\n\n                  $choice = $(this),\n\n                  text,\n\n                  value\n\n                ;\n\n                if(settings.match == 'both' || settings.match == 'text') {\n\n                  text = String(module.get.choiceText($choice, false));\n\n                  if(text.search(beginsWithRegExp) !== -1) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, text)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, text)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                }\n\n                if(settings.match == 'both' || settings.match == 'value') {\n\n                  value = String(module.get.choiceValue($choice, text));\n\n                  if(value.search(beginsWithRegExp) !== -1) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, value)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, value)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                }\n\n              })\n\n            ;\n\n          }\n\n          module.debug('Showing only matched items', searchTerm);\n\n          module.remove.filteredItem();\n\n          if(results) {\n\n            $item\n\n              .not(results)\n\n              .addClass(className.filtered)\n\n            ;\n\n          }\n\n\n\n          if(!module.has.query()) {\n\n            $divider\n\n              .removeClass(className.hidden);\n\n          } else if(settings.hideDividers === true) {\n\n            $divider\n\n              .addClass(className.hidden);\n\n          } else if(settings.hideDividers === 'empty') {\n\n            $divider\n\n              .removeClass(className.hidden)\n\n              .filter(function() {\n\n                // First find the last divider in this divider group\n\n                // Dividers which are direct siblings are considered a group\n\n                var lastDivider = $(this).nextUntil(selector.item);\n\n\n\n                return (lastDivider.length ? lastDivider : $(this))\n\n                // Count all non-filtered items until the next divider (or end of the dropdown)\n\n                  .nextUntil(selector.divider)\n\n                  .filter(selector.item + \":not(.\" + className.filtered + \")\")\n\n                  // Hide divider if no items are found\n\n                  .length === 0;\n\n              })\n\n              .addClass(className.hidden);\n\n          }\n\n        },\n\n\n\n        fuzzySearch: function(query, term) {\n\n          var\n\n            termLength  = term.length,\n\n            queryLength = query.length\n\n          ;\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(queryLength > termLength) {\n\n            return false;\n\n          }\n\n          if(queryLength === termLength) {\n\n            return (query === term);\n\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n\n            var\n\n              queryCharacter = query.charCodeAt(characterIndex)\n\n            ;\n\n            while(nextCharacterIndex < termLength) {\n\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n\n                continue search;\n\n              }\n\n            }\n\n            return false;\n\n          }\n\n          return true;\n\n        },\n\n        exactSearch: function (query, term) {\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(term.indexOf(query) > -1) {\n\n             return true;\n\n          }\n\n          return false;\n\n        },\n\n        filterActive: function() {\n\n          if(settings.useLabels) {\n\n            $item.filter('.' + className.active)\n\n              .addClass(className.filtered)\n\n            ;\n\n          }\n\n        },\n\n\n\n        focusSearch: function(skipHandler) {\n\n          if( module.has.search() && !module.is.focusedOnSearch() ) {\n\n            if(skipHandler) {\n\n              $module.off('focus' + eventNamespace, selector.search);\n\n              $search.focus();\n\n              $module.on('focus'  + eventNamespace, selector.search, module.event.search.focus);\n\n            }\n\n            else {\n\n              $search.focus();\n\n            }\n\n          }\n\n        },\n\n\n\n        blurSearch: function() {\n\n          if( module.has.search() ) {\n\n            $search.blur();\n\n          }\n\n        },\n\n\n\n        forceSelection: function() {\n\n          var\n\n            $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),\n\n            $activeItem        = $item.not(className.filtered).filter('.' + className.active).eq(0),\n\n            $selectedItem      = ($currentlySelected.length > 0)\n\n              ? $currentlySelected\n\n              : $activeItem,\n\n            hasSelected = ($selectedItem.length > 0)\n\n          ;\n\n          if(hasSelected && !module.is.multiple()) {\n\n            module.debug('Forcing partial selection to selected item', $selectedItem);\n\n            module.event.item.click.call($selectedItem, {}, true);\n\n            return;\n\n          }\n\n          else {\n\n            if(settings.allowAdditions) {\n\n              module.set.selected(module.get.query());\n\n              module.remove.searchTerm();\n\n            }\n\n            else {\n\n              module.remove.searchTerm();\n\n            }\n\n          }\n\n        },\n\n\n\n        change: {\n\n          values: function(values) {\n\n            if(!settings.allowAdditions) {\n\n              module.clear();\n\n            }\n\n            module.debug('Creating dropdown with specified values', values);\n\n            module.setup.menu({values: values});\n\n            $.each(values, function(index, item) {\n\n              if(item.selected == true) {\n\n                module.debug('Setting initial selection to', item.value);\n\n                module.set.selected(item.value);\n\n                return true;\n\n              }\n\n            });\n\n          }\n\n        },\n\n\n\n        event: {\n\n          change: function() {\n\n            if(!internalChange) {\n\n              module.debug('Input changed, updating selection');\n\n              module.set.selected();\n\n            }\n\n          },\n\n          focus: function() {\n\n            if(settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {\n\n              module.show();\n\n            }\n\n          },\n\n          blur: function(event) {\n\n            pageLostFocus = (document.activeElement === this);\n\n            if(!activated && !pageLostFocus) {\n\n              module.remove.activeLabel();\n\n              module.hide();\n\n            }\n\n          },\n\n          mousedown: function() {\n\n            if(module.is.searchSelection()) {\n\n              // prevent menu hiding on immediate re-focus\n\n              willRefocus = true;\n\n            }\n\n            else {\n\n              // prevents focus callback from occurring on mousedown\n\n              activated = true;\n\n            }\n\n          },\n\n          mouseup: function() {\n\n            if(module.is.searchSelection()) {\n\n              // prevent menu hiding on immediate re-focus\n\n              willRefocus = false;\n\n            }\n\n            else {\n\n              activated = false;\n\n            }\n\n          },\n\n          click: function(event) {\n\n            var\n\n              $target = $(event.target)\n\n            ;\n\n            // focus search\n\n            if($target.is($module)) {\n\n              if(!module.is.focusedOnSearch()) {\n\n                module.focusSearch();\n\n              }\n\n              else {\n\n                module.show();\n\n              }\n\n            }\n\n          },\n\n          search: {\n\n            focus: function() {\n\n              activated = true;\n\n              if(module.is.multiple()) {\n\n                module.remove.activeLabel();\n\n              }\n\n              if(settings.showOnFocus || event.type !== 'focus') {\n\n                module.search();\n\n              }\n\n            },\n\n            blur: function(event) {\n\n              pageLostFocus = (document.activeElement === this);\n\n              if(module.is.searchSelection() && !willRefocus) {\n\n                if(!itemActivated && !pageLostFocus) {\n\n                  if(settings.forceSelection) {\n\n                    module.forceSelection();\n\n                  }\n\n                  module.hide();\n\n                }\n\n              }\n\n              willRefocus = false;\n\n            }\n\n          },\n\n          clearIcon: {\n\n            click: function(event) {\n\n              module.clear();\n\n              if(module.is.searchSelection()) {\n\n                module.remove.searchTerm();\n\n              }\n\n              module.hide();\n\n              event.stopPropagation();\n\n            }\n\n          },\n\n          icon: {\n\n            click: function(event) {\n\n              if(module.has.search()) {\n\n                if(!module.is.active()) {\n\n                    if(settings.showOnFocus){\n\n                      module.focusSearch();\n\n                    } else {\n\n                      module.toggle();\n\n                    }\n\n                } else {\n\n                  module.blurSearch();\n\n                }\n\n              } else {\n\n                module.toggle();\n\n              }\n\n            }\n\n          },\n\n          text: {\n\n            focus: function(event) {\n\n              activated = true;\n\n              module.focusSearch();\n\n            }\n\n          },\n\n          input: function(event) {\n\n            if(module.is.multiple() || module.is.searchSelection()) {\n\n              module.set.filtered();\n\n            }\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.search, settings.delay.search);\n\n          },\n\n          label: {\n\n            click: function(event) {\n\n              var\n\n                $label        = $(this),\n\n                $labels       = $module.find(selector.label),\n\n                $activeLabels = $labels.filter('.' + className.active),\n\n                $nextActive   = $label.nextAll('.' + className.active),\n\n                $prevActive   = $label.prevAll('.' + className.active),\n\n                $range = ($nextActive.length > 0)\n\n                  ? $label.nextUntil($nextActive).add($activeLabels).add($label)\n\n                  : $label.prevUntil($prevActive).add($activeLabels).add($label)\n\n              ;\n\n              if(event.shiftKey) {\n\n                $activeLabels.removeClass(className.active);\n\n                $range.addClass(className.active);\n\n              }\n\n              else if(event.ctrlKey) {\n\n                $label.toggleClass(className.active);\n\n              }\n\n              else {\n\n                $activeLabels.removeClass(className.active);\n\n                $label.addClass(className.active);\n\n              }\n\n              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));\n\n            }\n\n          },\n\n          remove: {\n\n            click: function() {\n\n              var\n\n                $label = $(this).parent()\n\n              ;\n\n              if( $label.hasClass(className.active) ) {\n\n                // remove all selected labels\n\n                module.remove.activeLabels();\n\n              }\n\n              else {\n\n                // remove this label only\n\n                module.remove.activeLabels( $label );\n\n              }\n\n            }\n\n          },\n\n          test: {\n\n            toggle: function(event) {\n\n              var\n\n                toggleBehavior = (module.is.multiple())\n\n                  ? module.show\n\n                  : module.toggle\n\n              ;\n\n              if(module.is.bubbledLabelClick(event) || module.is.bubbledIconClick(event)) {\n\n                return;\n\n              }\n\n              if( module.determine.eventOnElement(event, toggleBehavior) ) {\n\n                event.preventDefault();\n\n              }\n\n            },\n\n            touch: function(event) {\n\n              module.determine.eventOnElement(event, function() {\n\n                if(event.type == 'touchstart') {\n\n                  module.timer = setTimeout(function() {\n\n                    module.hide();\n\n                  }, settings.delay.touch);\n\n                }\n\n                else if(event.type == 'touchmove') {\n\n                  clearTimeout(module.timer);\n\n                }\n\n              });\n\n              event.stopPropagation();\n\n            },\n\n            hide: function(event) {\n\n              if(module.determine.eventInModule(event, module.hide)){\n\n                  event.preventDefault();\n\n              }\n\n            }\n\n          },\n\n          select: {\n\n            mutation: function(mutations) {\n\n              module.debug('<select> modified, recreating menu');\n\n              if(module.is.selectMutation(mutations)) {\n\n                module.disconnect.selectObserver();\n\n                module.refresh();\n\n                module.setup.select();\n\n                module.set.selected();\n\n                module.observe.select();\n\n              }\n\n            }\n\n          },\n\n          menu: {\n\n            mutation: function(mutations) {\n\n              var\n\n                mutation   = mutations[0],\n\n                $addedNode = mutation.addedNodes\n\n                  ? $(mutation.addedNodes[0])\n\n                  : $(false),\n\n                $removedNode = mutation.removedNodes\n\n                  ? $(mutation.removedNodes[0])\n\n                  : $(false),\n\n                $changedNodes  = $addedNode.add($removedNode),\n\n                isUserAddition = $changedNodes.is(selector.addition) || $changedNodes.closest(selector.addition).length > 0,\n\n                isMessage      = $changedNodes.is(selector.message)  || $changedNodes.closest(selector.message).length > 0\n\n              ;\n\n              if(isUserAddition || isMessage) {\n\n                module.debug('Updating item selector cache');\n\n                module.refreshItems();\n\n              }\n\n              else {\n\n                module.debug('Menu modified, updating selector cache');\n\n                module.refresh();\n\n              }\n\n            },\n\n            mousedown: function() {\n\n              itemActivated = true;\n\n            },\n\n            mouseup: function() {\n\n              itemActivated = false;\n\n            }\n\n          },\n\n          item: {\n\n            mouseenter: function(event) {\n\n              var\n\n                $target        = $(event.target),\n\n                $item          = $(this),\n\n                $subMenu       = $item.children(selector.menu),\n\n                $otherMenus    = $item.siblings(selector.item).children(selector.menu),\n\n                hasSubMenu     = ($subMenu.length > 0),\n\n                isBubbledEvent = ($subMenu.find($target).length > 0)\n\n              ;\n\n              if( !isBubbledEvent && hasSubMenu ) {\n\n                clearTimeout(module.itemTimer);\n\n                module.itemTimer = setTimeout(function() {\n\n                  module.verbose('Showing sub-menu', $subMenu);\n\n                  $.each($otherMenus, function() {\n\n                    module.animate.hide(false, $(this));\n\n                  });\n\n                  module.animate.show(false, $subMenu);\n\n                }, settings.delay.show);\n\n                event.preventDefault();\n\n              }\n\n            },\n\n            mouseleave: function(event) {\n\n              var\n\n                $subMenu = $(this).children(selector.menu)\n\n              ;\n\n              if($subMenu.length > 0) {\n\n                clearTimeout(module.itemTimer);\n\n                module.itemTimer = setTimeout(function() {\n\n                  module.verbose('Hiding sub-menu', $subMenu);\n\n                  module.animate.hide(false, $subMenu);\n\n                }, settings.delay.hide);\n\n              }\n\n            },\n\n            click: function (event, skipRefocus) {\n\n              var\n\n                $choice        = $(this),\n\n                $target        = (event)\n\n                  ? $(event.target)\n\n                  : $(''),\n\n                $subMenu       = $choice.find(selector.menu),\n\n                text           = module.get.choiceText($choice),\n\n                value          = module.get.choiceValue($choice, text),\n\n                hasSubMenu     = ($subMenu.length > 0),\n\n                isBubbledEvent = ($subMenu.find($target).length > 0)\n\n              ;\n\n              // prevents IE11 bug where menu receives focus even though `tabindex=-1`\n\n              if (!module.has.search() || !document.activeElement.isEqualNode($search[0])) {\n\n                $(document.activeElement).blur();\n\n              }\n\n              if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {\n\n                if(module.is.searchSelection()) {\n\n                  if(settings.allowAdditions) {\n\n                    module.remove.userAddition();\n\n                  }\n\n                  module.remove.searchTerm();\n\n                  if(!module.is.focusedOnSearch() && !(skipRefocus == true)) {\n\n                    module.focusSearch(true);\n\n                  }\n\n                }\n\n                if(!settings.useLabels) {\n\n                  module.remove.filteredItem();\n\n                  module.set.scrollPosition($choice);\n\n                }\n\n                module.determine.selectAction.call(this, text, value);\n\n              }\n\n            }\n\n          },\n\n\n\n          document: {\n\n            // label selection should occur even when element has no focus\n\n            keydown: function(event) {\n\n              var\n\n                pressedKey    = event.which,\n\n                isShortcutKey = module.is.inObject(pressedKey, keys)\n\n              ;\n\n              if(isShortcutKey) {\n\n                var\n\n                  $label            = $module.find(selector.label),\n\n                  $activeLabel      = $label.filter('.' + className.active),\n\n                  activeValue       = $activeLabel.data(metadata.value),\n\n                  labelIndex        = $label.index($activeLabel),\n\n                  labelCount        = $label.length,\n\n                  hasActiveLabel    = ($activeLabel.length > 0),\n\n                  hasMultipleActive = ($activeLabel.length > 1),\n\n                  isFirstLabel      = (labelIndex === 0),\n\n                  isLastLabel       = (labelIndex + 1 == labelCount),\n\n                  isSearch          = module.is.searchSelection(),\n\n                  isFocusedOnSearch = module.is.focusedOnSearch(),\n\n                  isFocused         = module.is.focused(),\n\n                  caretAtStart      = (isFocusedOnSearch && module.get.caretPosition() === 0),\n\n                  $nextLabel\n\n                ;\n\n                if(isSearch && !hasActiveLabel && !isFocusedOnSearch) {\n\n                  return;\n\n                }\n\n\n\n                if(pressedKey == keys.leftArrow) {\n\n                  // activate previous label\n\n                  if((isFocused || caretAtStart) && !hasActiveLabel) {\n\n                    module.verbose('Selecting previous label');\n\n                    $label.last().addClass(className.active);\n\n                  }\n\n                  else if(hasActiveLabel) {\n\n                    if(!event.shiftKey) {\n\n                      module.verbose('Selecting previous label');\n\n                      $label.removeClass(className.active);\n\n                    }\n\n                    else {\n\n                      module.verbose('Adding previous label to selection');\n\n                    }\n\n                    if(isFirstLabel && !hasMultipleActive) {\n\n                      $activeLabel.addClass(className.active);\n\n                    }\n\n                    else {\n\n                      $activeLabel.prev(selector.siblingLabel)\n\n                        .addClass(className.active)\n\n                        .end()\n\n                      ;\n\n                    }\n\n                    event.preventDefault();\n\n                  }\n\n                }\n\n                else if(pressedKey == keys.rightArrow) {\n\n                  // activate first label\n\n                  if(isFocused && !hasActiveLabel) {\n\n                    $label.first().addClass(className.active);\n\n                  }\n\n                  // activate next label\n\n                  if(hasActiveLabel) {\n\n                    if(!event.shiftKey) {\n\n                      module.verbose('Selecting next label');\n\n                      $label.removeClass(className.active);\n\n                    }\n\n                    else {\n\n                      module.verbose('Adding next label to selection');\n\n                    }\n\n                    if(isLastLabel) {\n\n                      if(isSearch) {\n\n                        if(!isFocusedOnSearch) {\n\n                          module.focusSearch();\n\n                        }\n\n                        else {\n\n                          $label.removeClass(className.active);\n\n                        }\n\n                      }\n\n                      else if(hasMultipleActive) {\n\n                        $activeLabel.next(selector.siblingLabel).addClass(className.active);\n\n                      }\n\n                      else {\n\n                        $activeLabel.addClass(className.active);\n\n                      }\n\n                    }\n\n                    else {\n\n                      $activeLabel.next(selector.siblingLabel).addClass(className.active);\n\n                    }\n\n                    event.preventDefault();\n\n                  }\n\n                }\n\n                else if(pressedKey == keys.deleteKey || pressedKey == keys.backspace) {\n\n                  if(hasActiveLabel) {\n\n                    module.verbose('Removing active labels');\n\n                    if(isLastLabel) {\n\n                      if(isSearch && !isFocusedOnSearch) {\n\n                        module.focusSearch();\n\n                      }\n\n                    }\n\n                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);\n\n                    module.remove.activeLabels($activeLabel);\n\n                    event.preventDefault();\n\n                  }\n\n                  else if(caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {\n\n                    module.verbose('Removing last label on input backspace');\n\n                    $activeLabel = $label.last().addClass(className.active);\n\n                    module.remove.activeLabels($activeLabel);\n\n                  }\n\n                }\n\n                else {\n\n                  $activeLabel.removeClass(className.active);\n\n                }\n\n              }\n\n            }\n\n          },\n\n\n\n          keydown: function(event) {\n\n            var\n\n              pressedKey    = event.which,\n\n              isShortcutKey = module.is.inObject(pressedKey, keys)\n\n            ;\n\n            if(isShortcutKey) {\n\n              var\n\n                $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),\n\n                $activeItem        = $menu.children('.' + className.active).eq(0),\n\n                $selectedItem      = ($currentlySelected.length > 0)\n\n                  ? $currentlySelected\n\n                  : $activeItem,\n\n                $visibleItems = ($selectedItem.length > 0)\n\n                  ? $selectedItem.siblings(':not(.' + className.filtered +')').addBack()\n\n                  : $menu.children(':not(.' + className.filtered +')'),\n\n                $subMenu              = $selectedItem.children(selector.menu),\n\n                $parentMenu           = $selectedItem.closest(selector.menu),\n\n                inVisibleMenu         = ($parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0),\n\n                hasSubMenu            = ($subMenu.length> 0),\n\n                hasSelectedItem       = ($selectedItem.length > 0),\n\n                selectedIsSelectable  = ($selectedItem.not(selector.unselectable).length > 0),\n\n                delimiterPressed      = (pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple()),\n\n                isAdditionWithoutMenu = (settings.allowAdditions && settings.hideAdditions && (pressedKey == keys.enter || delimiterPressed) && selectedIsSelectable),\n\n                $nextItem,\n\n                isSubMenuItem,\n\n                newIndex\n\n              ;\n\n              // allow selection with menu closed\n\n              if(isAdditionWithoutMenu) {\n\n                module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n\n                module.event.item.click.call($selectedItem, event);\n\n                if(module.is.searchSelection()) {\n\n                  module.remove.searchTerm();\n\n                }\n\n              }\n\n\n\n              // visible menu keyboard shortcuts\n\n              if( module.is.visible() ) {\n\n\n\n                // enter (select or open sub-menu)\n\n                if(pressedKey == keys.enter || delimiterPressed) {\n\n                  if(pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {\n\n                    module.verbose('Pressed enter on unselectable category, opening sub menu');\n\n                    pressedKey = keys.rightArrow;\n\n                  }\n\n                  else if(selectedIsSelectable) {\n\n                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n\n                    module.event.item.click.call($selectedItem, event);\n\n                    if(module.is.searchSelection()) {\n\n                      module.remove.searchTerm();\n\n                      if(module.is.multiple()) {\n\n                          $search.focus();\n\n                      }\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // sub-menu actions\n\n                if(hasSelectedItem) {\n\n\n\n                  if(pressedKey == keys.leftArrow) {\n\n\n\n                    isSubMenuItem = ($parentMenu[0] !== $menu[0]);\n\n\n\n                    if(isSubMenuItem) {\n\n                      module.verbose('Left key pressed, closing sub-menu');\n\n                      module.animate.hide(false, $parentMenu);\n\n                      $selectedItem\n\n                        .removeClass(className.selected)\n\n                      ;\n\n                      $parentMenu\n\n                        .closest(selector.item)\n\n                          .addClass(className.selected)\n\n                      ;\n\n                      event.preventDefault();\n\n                    }\n\n                  }\n\n\n\n                  // right arrow (show sub-menu)\n\n                  if(pressedKey == keys.rightArrow) {\n\n                    if(hasSubMenu) {\n\n                      module.verbose('Right key pressed, opening sub-menu');\n\n                      module.animate.show(false, $subMenu);\n\n                      $selectedItem\n\n                        .removeClass(className.selected)\n\n                      ;\n\n                      $subMenu\n\n                        .find(selector.item).eq(0)\n\n                          .addClass(className.selected)\n\n                      ;\n\n                      event.preventDefault();\n\n                    }\n\n                  }\n\n                }\n\n\n\n                // up arrow (traverse menu up)\n\n                if(pressedKey == keys.upArrow) {\n\n                  $nextItem = (hasSelectedItem && inVisibleMenu)\n\n                    ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)\n\n                    : $item.eq(0)\n\n                  ;\n\n                  if($visibleItems.index( $nextItem ) < 0) {\n\n                    module.verbose('Up key pressed but reached top of current menu');\n\n                    event.preventDefault();\n\n                    return;\n\n                  }\n\n                  else {\n\n                    module.verbose('Up key pressed, changing active item');\n\n                    $selectedItem\n\n                      .removeClass(className.selected)\n\n                    ;\n\n                    $nextItem\n\n                      .addClass(className.selected)\n\n                    ;\n\n                    module.set.scrollPosition($nextItem);\n\n                    if(settings.selectOnKeydown && module.is.single()) {\n\n                      module.set.selectedItem($nextItem);\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // down arrow (traverse menu down)\n\n                if(pressedKey == keys.downArrow) {\n\n                  $nextItem = (hasSelectedItem && inVisibleMenu)\n\n                    ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)\n\n                    : $item.eq(0)\n\n                  ;\n\n                  if($nextItem.length === 0) {\n\n                    module.verbose('Down key pressed but reached bottom of current menu');\n\n                    event.preventDefault();\n\n                    return;\n\n                  }\n\n                  else {\n\n                    module.verbose('Down key pressed, changing active item');\n\n                    $item\n\n                      .removeClass(className.selected)\n\n                    ;\n\n                    $nextItem\n\n                      .addClass(className.selected)\n\n                    ;\n\n                    module.set.scrollPosition($nextItem);\n\n                    if(settings.selectOnKeydown && module.is.single()) {\n\n                      module.set.selectedItem($nextItem);\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // page down (show next page)\n\n                if(pressedKey == keys.pageUp) {\n\n                  module.scrollPage('up');\n\n                  event.preventDefault();\n\n                }\n\n                if(pressedKey == keys.pageDown) {\n\n                  module.scrollPage('down');\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // escape (close menu)\n\n                if(pressedKey == keys.escape) {\n\n                  module.verbose('Escape key pressed, closing dropdown');\n\n                  module.hide();\n\n                }\n\n\n\n              }\n\n              else {\n\n                // delimiter key\n\n                if(delimiterPressed) {\n\n                  event.preventDefault();\n\n                }\n\n                // down arrow (open menu)\n\n                if(pressedKey == keys.downArrow && !module.is.visible()) {\n\n                  module.verbose('Down key pressed, showing dropdown');\n\n                  module.show();\n\n                  event.preventDefault();\n\n                }\n\n              }\n\n            }\n\n            else {\n\n              if( !module.has.search() ) {\n\n                module.set.selectedLetter( String.fromCharCode(pressedKey) );\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        trigger: {\n\n          change: function() {\n\n            var\n\n              events       = document.createEvent('HTMLEvents'),\n\n              inputElement = $input[0]\n\n            ;\n\n            if(inputElement) {\n\n              module.verbose('Triggering native change event');\n\n              events.initEvent('change', true, false);\n\n              inputElement.dispatchEvent(events);\n\n            }\n\n          }\n\n        },\n\n\n\n        determine: {\n\n          selectAction: function(text, value) {\n\n            module.verbose('Determining action', settings.action);\n\n            if( $.isFunction( module.action[settings.action] ) ) {\n\n              module.verbose('Triggering preset action', settings.action, text, value);\n\n              module.action[ settings.action ].call(element, text, value, this);\n\n            }\n\n            else if( $.isFunction(settings.action) ) {\n\n              module.verbose('Triggering user action', settings.action, text, value);\n\n              settings.action.call(element, text, value, this);\n\n            }\n\n            else {\n\n              module.error(error.action, settings.action);\n\n            }\n\n          },\n\n          eventInModule: function(event, callback) {\n\n            var\n\n              $target    = $(event.target),\n\n              inDocument = ($target.closest(document.documentElement).length > 0),\n\n              inModule   = ($target.closest($module).length > 0)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if(inDocument && !inModule) {\n\n              module.verbose('Triggering event', callback);\n\n              callback();\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('Event occurred in dropdown, canceling callback');\n\n              return false;\n\n            }\n\n          },\n\n          eventOnElement: function(event, callback) {\n\n            var\n\n              $target      = $(event.target),\n\n              $label       = $target.closest(selector.siblingLabel),\n\n              inVisibleDOM = document.body.contains(event.target),\n\n              notOnLabel   = ($module.find($label).length === 0),\n\n              notInMenu    = ($target.closest($menu).length === 0)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if(inVisibleDOM && notOnLabel && notInMenu) {\n\n              module.verbose('Triggering event', callback);\n\n              callback();\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('Event occurred in dropdown menu, canceling callback');\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        action: {\n\n\n\n          nothing: function() {},\n\n\n\n          activate: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            if( module.can.activate( $(element) ) ) {\n\n              module.set.selected(value, $(element));\n\n              if(!module.is.multiple()) {\n\n                module.hideAndClear();\n\n              }\n\n            }\n\n          },\n\n\n\n          select: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            if( module.can.activate( $(element) ) ) {\n\n              module.set.value(value, text, $(element));\n\n              if(!module.is.multiple()) {\n\n                module.hideAndClear();\n\n              }\n\n            }\n\n          },\n\n\n\n          combo: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            module.set.selected(value, $(element));\n\n            module.hideAndClear();\n\n          },\n\n\n\n          hide: function(text, value, element) {\n\n            module.set.value(value, text, $(element));\n\n            module.hideAndClear();\n\n          }\n\n\n\n        },\n\n\n\n        get: {\n\n          id: function() {\n\n            return id;\n\n          },\n\n          defaultText: function() {\n\n            return $module.data(metadata.defaultText);\n\n          },\n\n          defaultValue: function() {\n\n            return $module.data(metadata.defaultValue);\n\n          },\n\n          placeholderText: function() {\n\n            if(settings.placeholder != 'auto' && typeof settings.placeholder == 'string') {\n\n              return settings.placeholder;\n\n            }\n\n            return $module.data(metadata.placeholderText) || '';\n\n          },\n\n          text: function() {\n\n            return $text.text();\n\n          },\n\n          query: function() {\n\n            return $.trim($search.val());\n\n          },\n\n          searchWidth: function(value) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : $search.val()\n\n            ;\n\n            $sizer.text(value);\n\n            // prevent rounding issues\n\n            return Math.ceil( $sizer.width() + 1);\n\n          },\n\n          selectionCount: function() {\n\n            var\n\n              values = module.get.values(),\n\n              count\n\n            ;\n\n            count = ( module.is.multiple() )\n\n              ? $.isArray(values)\n\n                ? values.length\n\n                : 0\n\n              : (module.get.value() !== '')\n\n                ? 1\n\n                : 0\n\n            ;\n\n            return count;\n\n          },\n\n          transition: function($subMenu) {\n\n            return (settings.transition == 'auto')\n\n              ? module.is.upward($subMenu)\n\n                ? 'slide up'\n\n                : 'slide down'\n\n              : settings.transition\n\n            ;\n\n          },\n\n          userValues: function() {\n\n            var\n\n              values = module.get.values()\n\n            ;\n\n            if(!values) {\n\n              return false;\n\n            }\n\n            values = $.isArray(values)\n\n              ? values\n\n              : [values]\n\n            ;\n\n            return $.grep(values, function(value) {\n\n              return (module.get.item(value) === false);\n\n            });\n\n          },\n\n          uniqueArray: function(array) {\n\n            return $.grep(array, function (value, index) {\n\n                return $.inArray(value, array) === index;\n\n            });\n\n          },\n\n          caretPosition: function() {\n\n            var\n\n              input = $search.get(0),\n\n              range,\n\n              rangeLength\n\n            ;\n\n            if('selectionStart' in input) {\n\n              return input.selectionStart;\n\n            }\n\n            else if (document.selection) {\n\n              input.focus();\n\n              range       = document.selection.createRange();\n\n              rangeLength = range.text.length;\n\n              range.moveStart('character', -input.value.length);\n\n              return range.text.length - rangeLength;\n\n            }\n\n          },\n\n          value: function() {\n\n            var\n\n              value = ($input.length > 0)\n\n                ? $input.val()\n\n                : $module.data(metadata.value),\n\n              isEmptyMultiselect = ($.isArray(value) && value.length === 1 && value[0] === '')\n\n            ;\n\n            // prevents placeholder element from being selected when multiple\n\n            return (value === undefined || isEmptyMultiselect)\n\n              ? ''\n\n              : value\n\n            ;\n\n          },\n\n          values: function() {\n\n            var\n\n              value = module.get.value()\n\n            ;\n\n            if(value === '') {\n\n              return '';\n\n            }\n\n            return ( !module.has.selectInput() && module.is.multiple() )\n\n              ? (typeof value == 'string') // delimited string\n\n                ? value.split(settings.delimiter)\n\n                : ''\n\n              : value\n\n            ;\n\n          },\n\n          remoteValues: function() {\n\n            var\n\n              values = module.get.values(),\n\n              remoteValues = false\n\n            ;\n\n            if(values) {\n\n              if(typeof values == 'string') {\n\n                values = [values];\n\n              }\n\n              $.each(values, function(index, value) {\n\n                var\n\n                  name = module.read.remoteData(value)\n\n                ;\n\n                module.verbose('Restoring value from session data', name, value);\n\n                if(name) {\n\n                  if(!remoteValues) {\n\n                    remoteValues = {};\n\n                  }\n\n                  remoteValues[value] = name;\n\n                }\n\n              });\n\n            }\n\n            return remoteValues;\n\n          },\n\n          choiceText: function($choice, preserveHTML) {\n\n            preserveHTML = (preserveHTML !== undefined)\n\n              ? preserveHTML\n\n              : settings.preserveHTML\n\n            ;\n\n            if($choice) {\n\n              if($choice.find(selector.menu).length > 0) {\n\n                module.verbose('Retrieving text of element with sub-menu');\n\n                $choice = $choice.clone();\n\n                $choice.find(selector.menu).remove();\n\n                $choice.find(selector.menuIcon).remove();\n\n              }\n\n              return ($choice.data(metadata.text) !== undefined)\n\n                ? $choice.data(metadata.text)\n\n                : (preserveHTML)\n\n                  ? $.trim($choice.html())\n\n                  : $.trim($choice.text())\n\n              ;\n\n            }\n\n          },\n\n          choiceValue: function($choice, choiceText) {\n\n            choiceText = choiceText || module.get.choiceText($choice);\n\n            if(!$choice) {\n\n              return false;\n\n            }\n\n            return ($choice.data(metadata.value) !== undefined)\n\n              ? String( $choice.data(metadata.value) )\n\n              : (typeof choiceText === 'string')\n\n                ? $.trim(choiceText.toLowerCase())\n\n                : String(choiceText)\n\n            ;\n\n          },\n\n          inputEvent: function() {\n\n            var\n\n              input = $search[0]\n\n            ;\n\n            if(input) {\n\n              return (input.oninput !== undefined)\n\n                ? 'input'\n\n                : (input.onpropertychange !== undefined)\n\n                  ? 'propertychange'\n\n                  : 'keyup'\n\n              ;\n\n            }\n\n            return false;\n\n          },\n\n          selectValues: function() {\n\n            var\n\n              select = {}\n\n            ;\n\n            select.values = [];\n\n            $module\n\n              .find('option')\n\n                .each(function() {\n\n                  var\n\n                    $option  = $(this),\n\n                    name     = $option.html(),\n\n                    disabled = $option.attr('disabled'),\n\n                    value    = ( $option.attr('value') !== undefined )\n\n                      ? $option.attr('value')\n\n                      : name\n\n                  ;\n\n                  if(settings.placeholder === 'auto' && value === '') {\n\n                    select.placeholder = name;\n\n                  }\n\n                  else {\n\n                    select.values.push({\n\n                      name     : name,\n\n                      value    : value,\n\n                      disabled : disabled\n\n                    });\n\n                  }\n\n                })\n\n            ;\n\n            if(settings.placeholder && settings.placeholder !== 'auto') {\n\n              module.debug('Setting placeholder value to', settings.placeholder);\n\n              select.placeholder = settings.placeholder;\n\n            }\n\n            if(settings.sortSelect) {\n\n              if(settings.sortSelect === true) {\n\n                select.values.sort(function(a, b) {\n\n                  return (a.name > b.name)\n\n                    ? 1\n\n                    : -1\n\n                    ;\n\n                });\n\n              } else if(settings.sortSelect === 'natural') {\n\n                select.values.sort(function(a, b) {\n\n                  return (a.name.toLowerCase() > b.name.toLowerCase())\n\n                    ? 1\n\n                    : -1\n\n                    ;\n\n                });\n\n              } else if($.isFunction(settings.sortSelect)) {\n\n                select.values.sort(settings.sortSelect);\n\n              }\n\n              module.debug('Retrieved and sorted values from select', select);\n\n            }\n\n            else {\n\n              module.debug('Retrieved values from select', select);\n\n            }\n\n            return select;\n\n          },\n\n          activeItem: function() {\n\n            return $item.filter('.'  + className.active);\n\n          },\n\n          selectedItem: function() {\n\n            var\n\n              $selectedItem = $item.not(selector.unselectable).filter('.'  + className.selected)\n\n            ;\n\n            return ($selectedItem.length > 0)\n\n              ? $selectedItem\n\n              : $item.eq(0)\n\n            ;\n\n          },\n\n          itemWithAdditions: function(value) {\n\n            var\n\n              $items       = module.get.item(value),\n\n              $userItems   = module.create.userChoice(value),\n\n              hasUserItems = ($userItems && $userItems.length > 0)\n\n            ;\n\n            if(hasUserItems) {\n\n              $items = ($items.length > 0)\n\n                ? $items.add($userItems)\n\n                : $userItems\n\n              ;\n\n            }\n\n            return $items;\n\n          },\n\n          item: function(value, strict) {\n\n            var\n\n              $selectedItem = false,\n\n              shouldSearch,\n\n              isMultiple\n\n            ;\n\n            value = (value !== undefined)\n\n              ? value\n\n              : ( module.get.values() !== undefined)\n\n                ? module.get.values()\n\n                : module.get.text()\n\n            ;\n\n            shouldSearch = (isMultiple)\n\n              ? (value.length > 0)\n\n              : (value !== undefined && value !== null)\n\n            ;\n\n            isMultiple = (module.is.multiple() && $.isArray(value));\n\n            strict     = (value === '' || value === 0)\n\n              ? true\n\n              : strict || false\n\n            ;\n\n            if(shouldSearch) {\n\n              $item\n\n                .each(function() {\n\n                  var\n\n                    $choice       = $(this),\n\n                    optionText    = module.get.choiceText($choice),\n\n                    optionValue   = module.get.choiceValue($choice, optionText)\n\n                  ;\n\n                  // safe early exit\n\n                  if(optionValue === null || optionValue === undefined) {\n\n                    return;\n\n                  }\n\n                  if(isMultiple) {\n\n                    if($.inArray( String(optionValue), value) !== -1) {\n\n                      $selectedItem = ($selectedItem)\n\n                        ? $selectedItem.add($choice)\n\n                        : $choice\n\n                      ;\n\n                    }\n\n                  }\n\n                  else if(strict) {\n\n                    module.verbose('Ambiguous dropdown value using strict type check', $choice, value);\n\n                    if( optionValue === value) {\n\n                      $selectedItem = $choice;\n\n                      return true;\n\n                    }\n\n                  }\n\n                  else {\n\n                    if( String(optionValue) == String(value)) {\n\n                      module.verbose('Found select item by value', optionValue, value);\n\n                      $selectedItem = $choice;\n\n                      return true;\n\n                    }\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            return $selectedItem;\n\n          }\n\n        },\n\n\n\n        check: {\n\n          maxSelections: function(selectionCount) {\n\n            if(settings.maxSelections) {\n\n              selectionCount = (selectionCount !== undefined)\n\n                ? selectionCount\n\n                : module.get.selectionCount()\n\n              ;\n\n              if(selectionCount >= settings.maxSelections) {\n\n                module.debug('Maximum selection count reached');\n\n                if(settings.useLabels) {\n\n                  $item.addClass(className.filtered);\n\n                  module.add.message(message.maxSelections);\n\n                }\n\n                return true;\n\n              }\n\n              else {\n\n                module.verbose('No longer at maximum selection count');\n\n                module.remove.message();\n\n                module.remove.filteredItem();\n\n                if(module.is.searchSelection()) {\n\n                  module.filterItems();\n\n                }\n\n                return false;\n\n              }\n\n            }\n\n            return true;\n\n          }\n\n        },\n\n\n\n        restore: {\n\n          defaults: function() {\n\n            module.clear();\n\n            module.restore.defaultText();\n\n            module.restore.defaultValue();\n\n          },\n\n          defaultText: function() {\n\n            var\n\n              defaultText     = module.get.defaultText(),\n\n              placeholderText = module.get.placeholderText\n\n            ;\n\n            if(defaultText === placeholderText) {\n\n              module.debug('Restoring default placeholder text', defaultText);\n\n              module.set.placeholderText(defaultText);\n\n            }\n\n            else {\n\n              module.debug('Restoring default text', defaultText);\n\n              module.set.text(defaultText);\n\n            }\n\n          },\n\n          placeholderText: function() {\n\n            module.set.placeholderText();\n\n          },\n\n          defaultValue: function() {\n\n            var\n\n              defaultValue = module.get.defaultValue()\n\n            ;\n\n            if(defaultValue !== undefined) {\n\n              module.debug('Restoring default value', defaultValue);\n\n              if(defaultValue !== '') {\n\n                module.set.value(defaultValue);\n\n                module.set.selected();\n\n              }\n\n              else {\n\n                module.remove.activeItem();\n\n                module.remove.selectedItem();\n\n              }\n\n            }\n\n          },\n\n          labels: function() {\n\n            if(settings.allowAdditions) {\n\n              if(!settings.useLabels) {\n\n                module.error(error.labels);\n\n                settings.useLabels = true;\n\n              }\n\n              module.debug('Restoring selected values');\n\n              module.create.userLabels();\n\n            }\n\n            module.check.maxSelections();\n\n          },\n\n          selected: function() {\n\n            module.restore.values();\n\n            if(module.is.multiple()) {\n\n              module.debug('Restoring previously selected values and labels');\n\n              module.restore.labels();\n\n            }\n\n            else {\n\n              module.debug('Restoring previously selected values');\n\n            }\n\n          },\n\n          values: function() {\n\n            // prevents callbacks from occurring on initial load\n\n            module.set.initialLoad();\n\n            if(settings.apiSettings && settings.saveRemoteData && module.get.remoteValues()) {\n\n              module.restore.remoteValues();\n\n            }\n\n            else {\n\n              module.set.selected();\n\n            }\n\n            module.remove.initialLoad();\n\n          },\n\n          remoteValues: function() {\n\n            var\n\n              values = module.get.remoteValues()\n\n            ;\n\n            module.debug('Recreating selected from session data', values);\n\n            if(values) {\n\n              if( module.is.single() ) {\n\n                $.each(values, function(value, name) {\n\n                  module.set.text(name);\n\n                });\n\n              }\n\n              else {\n\n                $.each(values, function(value, name) {\n\n                  module.add.label(value, name);\n\n                });\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        read: {\n\n          remoteData: function(value) {\n\n            var\n\n              name\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            name = sessionStorage.getItem(value);\n\n            return (name !== undefined)\n\n              ? name\n\n              : false\n\n            ;\n\n          }\n\n        },\n\n\n\n        save: {\n\n          defaults: function() {\n\n            module.save.defaultText();\n\n            module.save.placeholderText();\n\n            module.save.defaultValue();\n\n          },\n\n          defaultValue: function() {\n\n            var\n\n              value = module.get.value()\n\n            ;\n\n            module.verbose('Saving default value as', value);\n\n            $module.data(metadata.defaultValue, value);\n\n          },\n\n          defaultText: function() {\n\n            var\n\n              text = module.get.text()\n\n            ;\n\n            module.verbose('Saving default text as', text);\n\n            $module.data(metadata.defaultText, text);\n\n          },\n\n          placeholderText: function() {\n\n            var\n\n              text\n\n            ;\n\n            if(settings.placeholder !== false && $text.hasClass(className.placeholder)) {\n\n              text = module.get.text();\n\n              module.verbose('Saving placeholder text as', text);\n\n              $module.data(metadata.placeholderText, text);\n\n            }\n\n          },\n\n          remoteData: function(name, value) {\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            module.verbose('Saving remote data to session storage', value, name);\n\n            sessionStorage.setItem(value, name);\n\n          }\n\n        },\n\n\n\n        clear: function() {\n\n          if(module.is.multiple() && settings.useLabels) {\n\n            module.remove.labels();\n\n          }\n\n          else {\n\n            module.remove.activeItem();\n\n            module.remove.selectedItem();\n\n            module.remove.filteredItem();\n\n          }\n\n          module.set.placeholderText();\n\n          module.clearValue();\n\n        },\n\n\n\n        clearValue: function() {\n\n          module.set.value('');\n\n        },\n\n\n\n        scrollPage: function(direction, $selectedItem) {\n\n          var\n\n            $currentItem  = $selectedItem || module.get.selectedItem(),\n\n            $menu         = $currentItem.closest(selector.menu),\n\n            menuHeight    = $menu.outerHeight(),\n\n            currentScroll = $menu.scrollTop(),\n\n            itemHeight    = $item.eq(0).outerHeight(),\n\n            itemsPerPage  = Math.floor(menuHeight / itemHeight),\n\n            maxScroll     = $menu.prop('scrollHeight'),\n\n            newScroll     = (direction == 'up')\n\n              ? currentScroll - (itemHeight * itemsPerPage)\n\n              : currentScroll + (itemHeight * itemsPerPage),\n\n            $selectableItem = $item.not(selector.unselectable),\n\n            isWithinRange,\n\n            $nextSelectedItem,\n\n            elementIndex\n\n          ;\n\n          elementIndex      = (direction == 'up')\n\n            ? $selectableItem.index($currentItem) - itemsPerPage\n\n            : $selectableItem.index($currentItem) + itemsPerPage\n\n          ;\n\n          isWithinRange = (direction == 'up')\n\n            ? (elementIndex >= 0)\n\n            : (elementIndex < $selectableItem.length)\n\n          ;\n\n          $nextSelectedItem = (isWithinRange)\n\n            ? $selectableItem.eq(elementIndex)\n\n            : (direction == 'up')\n\n              ? $selectableItem.first()\n\n              : $selectableItem.last()\n\n          ;\n\n          if($nextSelectedItem.length > 0) {\n\n            module.debug('Scrolling page', direction, $nextSelectedItem);\n\n            $currentItem\n\n              .removeClass(className.selected)\n\n            ;\n\n            $nextSelectedItem\n\n              .addClass(className.selected)\n\n            ;\n\n            if(settings.selectOnKeydown && module.is.single()) {\n\n              module.set.selectedItem($nextSelectedItem);\n\n            }\n\n            $menu\n\n              .scrollTop(newScroll)\n\n            ;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          filtered: function() {\n\n            var\n\n              isMultiple       = module.is.multiple(),\n\n              isSearch         = module.is.searchSelection(),\n\n              isSearchMultiple = (isMultiple && isSearch),\n\n              searchValue      = (isSearch)\n\n                ? module.get.query()\n\n                : '',\n\n              hasSearchValue   = (typeof searchValue === 'string' && searchValue.length > 0),\n\n              searchWidth      = module.get.searchWidth(),\n\n              valueIsSet       = searchValue !== ''\n\n            ;\n\n            if(isMultiple && hasSearchValue) {\n\n              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);\n\n              $search.css('width', searchWidth);\n\n            }\n\n            if(hasSearchValue || (isSearchMultiple && valueIsSet)) {\n\n              module.verbose('Hiding placeholder text');\n\n              $text.addClass(className.filtered);\n\n            }\n\n            else if(!isMultiple || (isSearchMultiple && !valueIsSet)) {\n\n              module.verbose('Showing placeholder text');\n\n              $text.removeClass(className.filtered);\n\n            }\n\n          },\n\n          empty: function() {\n\n            $module.addClass(className.empty);\n\n          },\n\n          loading: function() {\n\n            $module.addClass(className.loading);\n\n          },\n\n          placeholderText: function(text) {\n\n            text = text || module.get.placeholderText();\n\n            module.debug('Setting placeholder text', text);\n\n            module.set.text(text);\n\n            $text.addClass(className.placeholder);\n\n          },\n\n          tabbable: function() {\n\n            if( module.is.searchSelection() ) {\n\n              module.debug('Added tabindex to searchable dropdown');\n\n              $search\n\n                .val('')\n\n                .attr('tabindex', 0)\n\n              ;\n\n              $menu\n\n                .attr('tabindex', -1)\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Added tabindex to dropdown');\n\n              if( $module.attr('tabindex') === undefined) {\n\n                $module\n\n                  .attr('tabindex', 0)\n\n                ;\n\n                $menu\n\n                  .attr('tabindex', -1)\n\n                ;\n\n              }\n\n            }\n\n          },\n\n          initialLoad: function() {\n\n            module.verbose('Setting initial load');\n\n            initialLoad = true;\n\n          },\n\n          activeItem: function($item) {\n\n            if( settings.allowAdditions && $item.filter(selector.addition).length > 0 ) {\n\n              $item.addClass(className.filtered);\n\n            }\n\n            else {\n\n              $item.addClass(className.active);\n\n            }\n\n          },\n\n          partialSearch: function(text) {\n\n            var\n\n              length = module.get.query().length\n\n            ;\n\n            $search.val( text.substr(0, length));\n\n          },\n\n          scrollPosition: function($item, forceScroll) {\n\n            var\n\n              edgeTolerance = 5,\n\n              $menu,\n\n              hasActive,\n\n              offset,\n\n              itemHeight,\n\n              itemOffset,\n\n              menuOffset,\n\n              menuScroll,\n\n              menuHeight,\n\n              abovePage,\n\n              belowPage\n\n            ;\n\n\n\n            $item       = $item || module.get.selectedItem();\n\n            $menu       = $item.closest(selector.menu);\n\n            hasActive   = ($item && $item.length > 0);\n\n            forceScroll = (forceScroll !== undefined)\n\n              ? forceScroll\n\n              : false\n\n            ;\n\n            if($item && $menu.length > 0 && hasActive) {\n\n              itemOffset = $item.position().top;\n\n\n\n              $menu.addClass(className.loading);\n\n              menuScroll = $menu.scrollTop();\n\n              menuOffset = $menu.offset().top;\n\n              itemOffset = $item.offset().top;\n\n              offset     = menuScroll - menuOffset + itemOffset;\n\n              if(!forceScroll) {\n\n                menuHeight = $menu.height();\n\n                belowPage  = menuScroll + menuHeight < (offset + edgeTolerance);\n\n                abovePage  = ((offset - edgeTolerance) < menuScroll);\n\n              }\n\n              module.debug('Scrolling to active item', offset);\n\n              if(forceScroll || abovePage || belowPage) {\n\n                $menu.scrollTop(offset);\n\n              }\n\n              $menu.removeClass(className.loading);\n\n            }\n\n          },\n\n          text: function(text) {\n\n            if(settings.action === 'combo') {\n\n              module.debug('Changing combo button text', text, $combo);\n\n              if(settings.preserveHTML) {\n\n                $combo.html(text);\n\n              }\n\n              else {\n\n                $combo.text(text);\n\n              }\n\n            }\n\n            else if(settings.action === 'activate') {\n\n              if(text !== module.get.placeholderText()) {\n\n                $text.removeClass(className.placeholder);\n\n              }\n\n              module.debug('Changing text', text, $text);\n\n              $text\n\n                .removeClass(className.filtered)\n\n              ;\n\n              if(settings.preserveHTML) {\n\n                $text.html(text);\n\n              }\n\n              else {\n\n                $text.text(text);\n\n              }\n\n            }\n\n          },\n\n          selectedItem: function($item) {\n\n            var\n\n              value      = module.get.choiceValue($item),\n\n              searchText = module.get.choiceText($item, false),\n\n              text       = module.get.choiceText($item, true)\n\n            ;\n\n            module.debug('Setting user selection to item', $item);\n\n            module.remove.activeItem();\n\n            module.set.partialSearch(searchText);\n\n            module.set.activeItem($item);\n\n            module.set.selected(value, $item);\n\n            module.set.text(text);\n\n          },\n\n          selectedLetter: function(letter) {\n\n            var\n\n              $selectedItem         = $item.filter('.' + className.selected),\n\n              alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),\n\n              $nextValue            = false,\n\n              $nextItem\n\n            ;\n\n            // check next of same letter\n\n            if(alreadySelectedLetter) {\n\n              $nextItem = $selectedItem.nextAll($item).eq(0);\n\n              if( module.has.firstLetter($nextItem, letter) ) {\n\n                $nextValue  = $nextItem;\n\n              }\n\n            }\n\n            // check all values\n\n            if(!$nextValue) {\n\n              $item\n\n                .each(function(){\n\n                  if(module.has.firstLetter($(this), letter)) {\n\n                    $nextValue = $(this);\n\n                    return false;\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            // set next value\n\n            if($nextValue) {\n\n              module.verbose('Scrolling to next value with letter', letter);\n\n              module.set.scrollPosition($nextValue);\n\n              $selectedItem.removeClass(className.selected);\n\n              $nextValue.addClass(className.selected);\n\n              if(settings.selectOnKeydown && module.is.single()) {\n\n                module.set.selectedItem($nextValue);\n\n              }\n\n            }\n\n          },\n\n          direction: function($menu) {\n\n            if(settings.direction == 'auto') {\n\n              // reset position\n\n              module.remove.upward();\n\n\n\n              if(module.can.openDownward($menu)) {\n\n                module.remove.upward($menu);\n\n              }\n\n              else {\n\n                module.set.upward($menu);\n\n              }\n\n              if(!module.is.leftward($menu) && !module.can.openRightward($menu)) {\n\n                module.set.leftward($menu);\n\n              }\n\n            }\n\n            else if(settings.direction == 'upward') {\n\n              module.set.upward($menu);\n\n            }\n\n          },\n\n          upward: function($currentMenu) {\n\n            var $element = $currentMenu || $module;\n\n            $element.addClass(className.upward);\n\n          },\n\n          leftward: function($currentMenu) {\n\n            var $element = $currentMenu || $menu;\n\n            $element.addClass(className.leftward);\n\n          },\n\n          value: function(value, text, $selected) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              hasInput     = ($input.length > 0),\n\n              currentValue = module.get.values(),\n\n              stringValue  = (value !== undefined)\n\n                ? String(value)\n\n                : value,\n\n              newValue\n\n            ;\n\n            if(hasInput) {\n\n              if(!settings.allowReselection && stringValue == currentValue) {\n\n                module.verbose('Skipping value update already same value', value, currentValue);\n\n                if(!module.is.initialLoad()) {\n\n                  return;\n\n                }\n\n              }\n\n\n\n              if( module.is.single() && module.has.selectInput() && module.can.extendSelect() ) {\n\n                module.debug('Adding user option', value);\n\n                module.add.optionValue(value);\n\n              }\n\n              module.debug('Updating input value', escapedValue, currentValue);\n\n              internalChange = true;\n\n              $input\n\n                .val(escapedValue)\n\n              ;\n\n              if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n                module.debug('Input native change event ignored on initial load');\n\n              }\n\n              else {\n\n                module.trigger.change();\n\n              }\n\n              internalChange = false;\n\n            }\n\n            else {\n\n              module.verbose('Storing value in metadata', escapedValue, $input);\n\n              if(escapedValue !== currentValue) {\n\n                $module.data(metadata.value, stringValue);\n\n              }\n\n            }\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('No callback on initial load', settings.onChange);\n\n            }\n\n            else {\n\n              settings.onChange.call(element, value, text, $selected);\n\n            }\n\n          },\n\n          active: function() {\n\n            $module\n\n              .addClass(className.active)\n\n            ;\n\n          },\n\n          multiple: function() {\n\n            $module.addClass(className.multiple);\n\n          },\n\n          visible: function() {\n\n            $module.addClass(className.visible);\n\n          },\n\n          exactly: function(value, $selectedItem) {\n\n            module.debug('Setting selected to exact values');\n\n            module.clear();\n\n            module.set.selected(value, $selectedItem);\n\n          },\n\n          selected: function(value, $selectedItem) {\n\n            var\n\n              isMultiple = module.is.multiple(),\n\n              $userSelectedItem\n\n            ;\n\n            $selectedItem = (settings.allowAdditions)\n\n              ? $selectedItem || module.get.itemWithAdditions(value)\n\n              : $selectedItem || module.get.item(value)\n\n            ;\n\n            if(!$selectedItem) {\n\n              return;\n\n            }\n\n            module.debug('Setting selected menu item to', $selectedItem);\n\n            if(module.is.multiple()) {\n\n              module.remove.searchWidth();\n\n            }\n\n            if(module.is.single()) {\n\n              module.remove.activeItem();\n\n              module.remove.selectedItem();\n\n            }\n\n            else if(settings.useLabels) {\n\n              module.remove.selectedItem();\n\n            }\n\n            // select each item\n\n            $selectedItem\n\n              .each(function() {\n\n                var\n\n                  $selected      = $(this),\n\n                  selectedText   = module.get.choiceText($selected),\n\n                  selectedValue  = module.get.choiceValue($selected, selectedText),\n\n\n\n                  isFiltered     = $selected.hasClass(className.filtered),\n\n                  isActive       = $selected.hasClass(className.active),\n\n                  isUserValue    = $selected.hasClass(className.addition),\n\n                  shouldAnimate  = (isMultiple && $selectedItem.length == 1)\n\n                ;\n\n                if(isMultiple) {\n\n                  if(!isActive || isUserValue) {\n\n                    if(settings.apiSettings && settings.saveRemoteData) {\n\n                      module.save.remoteData(selectedText, selectedValue);\n\n                    }\n\n                    if(settings.useLabels) {\n\n                      module.add.label(selectedValue, selectedText, shouldAnimate);\n\n                      module.add.value(selectedValue, selectedText, $selected);\n\n                      module.set.activeItem($selected);\n\n                      module.filterActive();\n\n                      module.select.nextAvailable($selectedItem);\n\n                    }\n\n                    else {\n\n                      module.add.value(selectedValue, selectedText, $selected);\n\n                      module.set.text(module.add.variables(message.count));\n\n                      module.set.activeItem($selected);\n\n                    }\n\n                  }\n\n                  else if(!isFiltered) {\n\n                    module.debug('Selected active value, removing label');\n\n                    module.remove.selected(selectedValue);\n\n                  }\n\n                }\n\n                else {\n\n                  if(settings.apiSettings && settings.saveRemoteData) {\n\n                    module.save.remoteData(selectedText, selectedValue);\n\n                  }\n\n                  module.set.text(selectedText);\n\n                  module.set.value(selectedValue, selectedText, $selected);\n\n                  $selected\n\n                    .addClass(className.active)\n\n                    .addClass(className.selected)\n\n                  ;\n\n                }\n\n              })\n\n            ;\n\n          },\n\n        },\n\n\n\n        add: {\n\n          label: function(value, text, shouldAnimate) {\n\n            var\n\n              $next  = module.is.searchSelection()\n\n                ? $search\n\n                : $text,\n\n              escapedValue = module.escape.value(value),\n\n              $label\n\n            ;\n\n            if(settings.ignoreCase) {\n\n              escapedValue = escapedValue.toLowerCase();\n\n            }\n\n            $label =  $('<a />')\n\n              .addClass(className.label)\n\n              .attr('data-' + metadata.value, escapedValue)\n\n              .html(templates.label(escapedValue, text))\n\n            ;\n\n            $label = settings.onLabelCreate.call($label, escapedValue, text);\n\n\n\n            if(module.has.label(value)) {\n\n              module.debug('User selection already exists, skipping', escapedValue);\n\n              return;\n\n            }\n\n            if(settings.label.variation) {\n\n              $label.addClass(settings.label.variation);\n\n            }\n\n            if(shouldAnimate === true) {\n\n              module.debug('Animating in label', $label);\n\n              $label\n\n                .addClass(className.hidden)\n\n                .insertBefore($next)\n\n                .transition(settings.label.transition, settings.label.duration)\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Adding selection label', $label);\n\n              $label\n\n                .insertBefore($next)\n\n              ;\n\n            }\n\n          },\n\n          message: function(message) {\n\n            var\n\n              $message = $menu.children(selector.message),\n\n              html     = settings.templates.message(module.add.variables(message))\n\n            ;\n\n            if($message.length > 0) {\n\n              $message\n\n                .html(html)\n\n              ;\n\n            }\n\n            else {\n\n              $message = $('<div/>')\n\n                .html(html)\n\n                .addClass(className.message)\n\n                .appendTo($menu)\n\n              ;\n\n            }\n\n          },\n\n          optionValue: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $option      = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n\n              hasOption    = ($option.length > 0)\n\n            ;\n\n            if(hasOption) {\n\n              return;\n\n            }\n\n            // temporarily disconnect observer\n\n            module.disconnect.selectObserver();\n\n            if( module.is.single() ) {\n\n              module.verbose('Removing previous user addition');\n\n              $input.find('option.' + className.addition).remove();\n\n            }\n\n            $('<option/>')\n\n              .prop('value', escapedValue)\n\n              .addClass(className.addition)\n\n              .html(value)\n\n              .appendTo($input)\n\n            ;\n\n            module.verbose('Adding user addition as an <option>', value);\n\n            module.observe.select();\n\n          },\n\n          userSuggestion: function(value) {\n\n            var\n\n              $addition         = $menu.children(selector.addition),\n\n              $existingItem     = module.get.item(value),\n\n              alreadyHasValue   = $existingItem && $existingItem.not(selector.addition).length,\n\n              hasUserSuggestion = $addition.length > 0,\n\n              html\n\n            ;\n\n            if(settings.useLabels && module.has.maxSelections()) {\n\n              return;\n\n            }\n\n            if(value === '' || alreadyHasValue) {\n\n              $addition.remove();\n\n              return;\n\n            }\n\n            if(hasUserSuggestion) {\n\n              $addition\n\n                .data(metadata.value, value)\n\n                .data(metadata.text, value)\n\n                .attr('data-' + metadata.value, value)\n\n                .attr('data-' + metadata.text, value)\n\n                .removeClass(className.filtered)\n\n              ;\n\n              if(!settings.hideAdditions) {\n\n                html = settings.templates.addition( module.add.variables(message.addResult, value) );\n\n                $addition\n\n                  .html(html)\n\n                ;\n\n              }\n\n              module.verbose('Replacing user suggestion with new value', $addition);\n\n            }\n\n            else {\n\n              $addition = module.create.userChoice(value);\n\n              $addition\n\n                .prependTo($menu)\n\n              ;\n\n              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);\n\n            }\n\n            if(!settings.hideAdditions || module.is.allFiltered()) {\n\n              $addition\n\n                .addClass(className.selected)\n\n                .siblings()\n\n                .removeClass(className.selected)\n\n              ;\n\n            }\n\n            module.refreshItems();\n\n          },\n\n          variables: function(message, term) {\n\n            var\n\n              hasCount    = (message.search('{count}') !== -1),\n\n              hasMaxCount = (message.search('{maxCount}') !== -1),\n\n              hasTerm     = (message.search('{term}') !== -1),\n\n              values,\n\n              count,\n\n              query\n\n            ;\n\n            module.verbose('Adding templated variables to message', message);\n\n            if(hasCount) {\n\n              count  = module.get.selectionCount();\n\n              message = message.replace('{count}', count);\n\n            }\n\n            if(hasMaxCount) {\n\n              count  = module.get.selectionCount();\n\n              message = message.replace('{maxCount}', settings.maxSelections);\n\n            }\n\n            if(hasTerm) {\n\n              query   = term || module.get.query();\n\n              message = message.replace('{term}', query);\n\n            }\n\n            return message;\n\n          },\n\n          value: function(addedValue, addedText, $selectedItem) {\n\n            var\n\n              currentValue = module.get.values(),\n\n              newValue\n\n            ;\n\n            if(module.has.value(addedValue)) {\n\n              module.debug('Value already selected');\n\n              return;\n\n            }\n\n            if(addedValue === '') {\n\n              module.debug('Cannot select blank values from multiselect');\n\n              return;\n\n            }\n\n            // extend current array\n\n            if($.isArray(currentValue)) {\n\n              newValue = currentValue.concat([addedValue]);\n\n              newValue = module.get.uniqueArray(newValue);\n\n            }\n\n            else {\n\n              newValue = [addedValue];\n\n            }\n\n            // add values\n\n            if( module.has.selectInput() ) {\n\n              if(module.can.extendSelect()) {\n\n                module.debug('Adding value to select', addedValue, newValue, $input);\n\n                module.add.optionValue(addedValue);\n\n              }\n\n            }\n\n            else {\n\n              newValue = newValue.join(settings.delimiter);\n\n              module.debug('Setting hidden input to delimited value', newValue, $input);\n\n            }\n\n\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('Skipping onadd callback on initial load', settings.onAdd);\n\n            }\n\n            else {\n\n              settings.onAdd.call(element, addedValue, addedText, $selectedItem);\n\n            }\n\n            module.set.value(newValue, addedValue, addedText, $selectedItem);\n\n            module.check.maxSelections();\n\n          },\n\n        },\n\n\n\n        remove: {\n\n          active: function() {\n\n            $module.removeClass(className.active);\n\n          },\n\n          activeLabel: function() {\n\n            $module.find(selector.label).removeClass(className.active);\n\n          },\n\n          empty: function() {\n\n            $module.removeClass(className.empty);\n\n          },\n\n          loading: function() {\n\n            $module.removeClass(className.loading);\n\n          },\n\n          initialLoad: function() {\n\n            initialLoad = false;\n\n          },\n\n          upward: function($currentMenu) {\n\n            var $element = $currentMenu || $module;\n\n            $element.removeClass(className.upward);\n\n          },\n\n          leftward: function($currentMenu) {\n\n            var $element = $currentMenu || $menu;\n\n            $element.removeClass(className.leftward);\n\n          },\n\n          visible: function() {\n\n            $module.removeClass(className.visible);\n\n          },\n\n          activeItem: function() {\n\n            $item.removeClass(className.active);\n\n          },\n\n          filteredItem: function() {\n\n            if(settings.useLabels && module.has.maxSelections() ) {\n\n              return;\n\n            }\n\n            if(settings.useLabels && module.is.multiple()) {\n\n              $item.not('.' + className.active).removeClass(className.filtered);\n\n            }\n\n            else {\n\n              $item.removeClass(className.filtered);\n\n            }\n\n            if(settings.hideDividers) {\n\n              $divider.removeClass(className.hidden);\n\n            }\n\n            module.remove.empty();\n\n          },\n\n          optionValue: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $option      = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n\n              hasOption    = ($option.length > 0)\n\n            ;\n\n            if(!hasOption || !$option.hasClass(className.addition)) {\n\n              return;\n\n            }\n\n            // temporarily disconnect observer\n\n            if(selectObserver) {\n\n              selectObserver.disconnect();\n\n              module.verbose('Temporarily disconnecting mutation observer');\n\n            }\n\n            $option.remove();\n\n            module.verbose('Removing user addition as an <option>', escapedValue);\n\n            if(selectObserver) {\n\n              selectObserver.observe($input[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          },\n\n          message: function() {\n\n            $menu.children(selector.message).remove();\n\n          },\n\n          searchWidth: function() {\n\n            $search.css('width', '');\n\n          },\n\n          searchTerm: function() {\n\n            module.verbose('Cleared search term');\n\n            $search.val('');\n\n            module.set.filtered();\n\n          },\n\n          userAddition: function() {\n\n            $item.filter(selector.addition).remove();\n\n          },\n\n          selected: function(value, $selectedItem) {\n\n            $selectedItem = (settings.allowAdditions)\n\n              ? $selectedItem || module.get.itemWithAdditions(value)\n\n              : $selectedItem || module.get.item(value)\n\n            ;\n\n\n\n            if(!$selectedItem) {\n\n              return false;\n\n            }\n\n\n\n            $selectedItem\n\n              .each(function() {\n\n                var\n\n                  $selected     = $(this),\n\n                  selectedText  = module.get.choiceText($selected),\n\n                  selectedValue = module.get.choiceValue($selected, selectedText)\n\n                ;\n\n                if(module.is.multiple()) {\n\n                  if(settings.useLabels) {\n\n                    module.remove.value(selectedValue, selectedText, $selected);\n\n                    module.remove.label(selectedValue);\n\n                  }\n\n                  else {\n\n                    module.remove.value(selectedValue, selectedText, $selected);\n\n                    if(module.get.selectionCount() === 0) {\n\n                      module.set.placeholderText();\n\n                    }\n\n                    else {\n\n                      module.set.text(module.add.variables(message.count));\n\n                    }\n\n                  }\n\n                }\n\n                else {\n\n                  module.remove.value(selectedValue, selectedText, $selected);\n\n                }\n\n                $selected\n\n                  .removeClass(className.filtered)\n\n                  .removeClass(className.active)\n\n                ;\n\n                if(settings.useLabels) {\n\n                  $selected.removeClass(className.selected);\n\n                }\n\n              })\n\n            ;\n\n          },\n\n          selectedItem: function() {\n\n            $item.removeClass(className.selected);\n\n          },\n\n          value: function(removedValue, removedText, $removedItem) {\n\n            var\n\n              values = module.get.values(),\n\n              newValue\n\n            ;\n\n            if( module.has.selectInput() ) {\n\n              module.verbose('Input is <select> removing selected option', removedValue);\n\n              newValue = module.remove.arrayValue(removedValue, values);\n\n              module.remove.optionValue(removedValue);\n\n            }\n\n            else {\n\n              module.verbose('Removing from delimited values', removedValue);\n\n              newValue = module.remove.arrayValue(removedValue, values);\n\n              newValue = newValue.join(settings.delimiter);\n\n            }\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('No callback on initial load', settings.onRemove);\n\n            }\n\n            else {\n\n              settings.onRemove.call(element, removedValue, removedText, $removedItem);\n\n            }\n\n            module.set.value(newValue, removedText, $removedItem);\n\n            module.check.maxSelections();\n\n          },\n\n          arrayValue: function(removedValue, values) {\n\n            if( !$.isArray(values) ) {\n\n              values = [values];\n\n            }\n\n            values = $.grep(values, function(value){\n\n              return (removedValue != value);\n\n            });\n\n            module.verbose('Removed value from delimited string', removedValue, values);\n\n            return values;\n\n          },\n\n          label: function(value, shouldAnimate) {\n\n            var\n\n              $labels       = $module.find(selector.label),\n\n              $removedLabel = $labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(value) +'\"]')\n\n            ;\n\n            module.verbose('Removing label', $removedLabel);\n\n            $removedLabel.remove();\n\n          },\n\n          activeLabels: function($activeLabels) {\n\n            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);\n\n            module.verbose('Removing active label selections', $activeLabels);\n\n            module.remove.labels($activeLabels);\n\n          },\n\n          labels: function($labels) {\n\n            $labels = $labels || $module.find(selector.label);\n\n            module.verbose('Removing labels', $labels);\n\n            $labels\n\n              .each(function(){\n\n                var\n\n                  $label      = $(this),\n\n                  value       = $label.data(metadata.value),\n\n                  stringValue = (value !== undefined)\n\n                    ? String(value)\n\n                    : value,\n\n                  isUserValue = module.is.userValue(stringValue)\n\n                ;\n\n                if(settings.onLabelRemove.call($label, value) === false) {\n\n                  module.debug('Label remove callback cancelled removal');\n\n                  return;\n\n                }\n\n                module.remove.message();\n\n                if(isUserValue) {\n\n                  module.remove.value(stringValue);\n\n                  module.remove.label(stringValue);\n\n                }\n\n                else {\n\n                  // selected will also remove label\n\n                  module.remove.selected(stringValue);\n\n                }\n\n              })\n\n            ;\n\n          },\n\n          tabbable: function() {\n\n            if( module.is.searchSelection() ) {\n\n              module.debug('Searchable dropdown initialized');\n\n              $search\n\n                .removeAttr('tabindex')\n\n              ;\n\n              $menu\n\n                .removeAttr('tabindex')\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Simple selection dropdown initialized');\n\n              $module\n\n                .removeAttr('tabindex')\n\n              ;\n\n              $menu\n\n                .removeAttr('tabindex')\n\n              ;\n\n            }\n\n          },\n\n        },\n\n\n\n        has: {\n\n          menuSearch: function() {\n\n            return (module.has.search() && $search.closest($menu).length > 0);\n\n          },\n\n          clearItem: function() {\n\n            return ($clear.length > 0);\n\n          },\n\n          search: function() {\n\n            return ($search.length > 0);\n\n          },\n\n          sizer: function() {\n\n            return ($sizer.length > 0);\n\n          },\n\n          selectInput: function() {\n\n            return ( $input.is('select') );\n\n          },\n\n          minCharacters: function(searchTerm) {\n\n            if(settings.minCharacters) {\n\n              searchTerm = (searchTerm !== undefined)\n\n                ? String(searchTerm)\n\n                : String(module.get.query())\n\n              ;\n\n              return (searchTerm.length >= settings.minCharacters);\n\n            }\n\n            return true;\n\n          },\n\n          firstLetter: function($item, letter) {\n\n            var\n\n              text,\n\n              firstLetter\n\n            ;\n\n            if(!$item || $item.length === 0 || typeof letter !== 'string') {\n\n              return false;\n\n            }\n\n            text        = module.get.choiceText($item, false);\n\n            letter      = letter.toLowerCase();\n\n            firstLetter = String(text).charAt(0).toLowerCase();\n\n            return (letter == firstLetter);\n\n          },\n\n          input: function() {\n\n            return ($input.length > 0);\n\n          },\n\n          items: function() {\n\n            return ($item.length > 0);\n\n          },\n\n          menu: function() {\n\n            return ($menu.length > 0);\n\n          },\n\n          message: function() {\n\n            return ($menu.children(selector.message).length !== 0);\n\n          },\n\n          label: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $labels      = $module.find(selector.label)\n\n            ;\n\n            if(settings.ignoreCase) {\n\n              escapedValue = escapedValue.toLowerCase();\n\n            }\n\n            return ($labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(escapedValue) +'\"]').length > 0);\n\n          },\n\n          maxSelections: function() {\n\n            return (settings.maxSelections && module.get.selectionCount() >= settings.maxSelections);\n\n          },\n\n          allResultsFiltered: function() {\n\n            var\n\n              $normalResults = $item.not(selector.addition)\n\n            ;\n\n            return ($normalResults.filter(selector.unselectable).length === $normalResults.length);\n\n          },\n\n          userSuggestion: function() {\n\n            return ($menu.children(selector.addition).length > 0);\n\n          },\n\n          query: function() {\n\n            return (module.get.query() !== '');\n\n          },\n\n          value: function(value) {\n\n            return (settings.ignoreCase)\n\n              ? module.has.valueIgnoringCase(value)\n\n              : module.has.valueMatchingCase(value)\n\n            ;\n\n          },\n\n          valueMatchingCase: function(value) {\n\n            var\n\n              values   = module.get.values(),\n\n              hasValue = $.isArray(values)\n\n               ? values && ($.inArray(value, values) !== -1)\n\n               : (values == value)\n\n            ;\n\n            return (hasValue)\n\n              ? true\n\n              : false\n\n            ;\n\n          },\n\n          valueIgnoringCase: function(value) {\n\n            var\n\n              values   = module.get.values(),\n\n              hasValue = false\n\n            ;\n\n            if(!$.isArray(values)) {\n\n              values = [values];\n\n            }\n\n            $.each(values, function(index, existingValue) {\n\n              if(String(value).toLowerCase() == String(existingValue).toLowerCase()) {\n\n                hasValue = true;\n\n                return false;\n\n              }\n\n            });\n\n            return hasValue;\n\n          }\n\n        },\n\n\n\n        is: {\n\n          active: function() {\n\n            return $module.hasClass(className.active);\n\n          },\n\n          animatingInward: function() {\n\n            return $menu.transition('is inward');\n\n          },\n\n          animatingOutward: function() {\n\n            return $menu.transition('is outward');\n\n          },\n\n          bubbledLabelClick: function(event) {\n\n            return $(event.target).is('select, input') && $module.closest('label').length > 0;\n\n          },\n\n          bubbledIconClick: function(event) {\n\n            return $(event.target).closest($icon).length > 0;\n\n          },\n\n          alreadySetup: function() {\n\n            return ($module.is('select') && $module.parent(selector.dropdown).data(moduleNamespace) !== undefined && $module.prev().length === 0);\n\n          },\n\n          animating: function($subMenu) {\n\n            return ($subMenu)\n\n              ? $subMenu.transition && $subMenu.transition('is animating')\n\n              : $menu.transition    && $menu.transition('is animating')\n\n            ;\n\n          },\n\n          leftward: function($subMenu) {\n\n            var $selectedMenu = $subMenu || $menu;\n\n            return $selectedMenu.hasClass(className.leftward);\n\n          },\n\n          clearable: function() {\n\n            return ($module.hasClass(className.clearable) || settings.clearable);\n\n          },\n\n          disabled: function() {\n\n            return $module.hasClass(className.disabled);\n\n          },\n\n          focused: function() {\n\n            return (document.activeElement === $module[0]);\n\n          },\n\n          focusedOnSearch: function() {\n\n            return (document.activeElement === $search[0]);\n\n          },\n\n          allFiltered: function() {\n\n            return( (module.is.multiple() || module.has.search()) && !(settings.hideAdditions == false && module.has.userSuggestion()) && !module.has.message() && module.has.allResultsFiltered() );\n\n          },\n\n          hidden: function($subMenu) {\n\n            return !module.is.visible($subMenu);\n\n          },\n\n          initialLoad: function() {\n\n            return initialLoad;\n\n          },\n\n          inObject: function(needle, object) {\n\n            var\n\n              found = false\n\n            ;\n\n            $.each(object, function(index, property) {\n\n              if(property == needle) {\n\n                found = true;\n\n                return true;\n\n              }\n\n            });\n\n            return found;\n\n          },\n\n          multiple: function() {\n\n            return $module.hasClass(className.multiple);\n\n          },\n\n          remote: function() {\n\n            return settings.apiSettings && module.can.useAPI();\n\n          },\n\n          single: function() {\n\n            return !module.is.multiple();\n\n          },\n\n          selectMutation: function(mutations) {\n\n            var\n\n              selectChanged = false\n\n            ;\n\n            $.each(mutations, function(index, mutation) {\n\n              if($(mutation.target).is('select') || $(mutation.addedNodes).is('select')) {\n\n                selectChanged = true;\n\n                return false;\n\n              }\n\n            });\n\n            return selectChanged;\n\n          },\n\n          search: function() {\n\n            return $module.hasClass(className.search);\n\n          },\n\n          searchSelection: function() {\n\n            return ( module.has.search() && $search.parent(selector.dropdown).length === 1 );\n\n          },\n\n          selection: function() {\n\n            return $module.hasClass(className.selection);\n\n          },\n\n          userValue: function(value) {\n\n            return ($.inArray(value, module.get.userValues()) !== -1);\n\n          },\n\n          upward: function($menu) {\n\n            var $element = $menu || $module;\n\n            return $element.hasClass(className.upward);\n\n          },\n\n          visible: function($subMenu) {\n\n            return ($subMenu)\n\n              ? $subMenu.hasClass(className.visible)\n\n              : $menu.hasClass(className.visible)\n\n            ;\n\n          },\n\n          verticallyScrollableContext: function() {\n\n            var\n\n              overflowY = ($context.get(0) !== window)\n\n                ? $context.css('overflow-y')\n\n                : false\n\n            ;\n\n            return (overflowY == 'auto' || overflowY == 'scroll');\n\n          },\n\n          horizontallyScrollableContext: function() {\n\n            var\n\n              overflowX = ($context.get(0) !== window)\n\n                ? $context.css('overflow-X')\n\n                : false\n\n            ;\n\n            return (overflowX == 'auto' || overflowX == 'scroll');\n\n          }\n\n        },\n\n\n\n        can: {\n\n          activate: function($item) {\n\n            if(settings.useLabels) {\n\n              return true;\n\n            }\n\n            if(!module.has.maxSelections()) {\n\n              return true;\n\n            }\n\n            if(module.has.maxSelections() && $item.hasClass(className.active)) {\n\n              return true;\n\n            }\n\n            return false;\n\n          },\n\n          openDownward: function($subMenu) {\n\n            var\n\n              $currentMenu    = $subMenu || $menu,\n\n              canOpenDownward = true,\n\n              onScreen        = {},\n\n              calculations\n\n            ;\n\n            $currentMenu\n\n              .addClass(className.loading)\n\n            ;\n\n            calculations = {\n\n              context: {\n\n                offset    : ($context.get(0) === window)\n\n                  ? { top: 0, left: 0}\n\n                  : $context.offset(),\n\n                scrollTop : $context.scrollTop(),\n\n                height    : $context.outerHeight()\n\n              },\n\n              menu : {\n\n                offset: $currentMenu.offset(),\n\n                height: $currentMenu.outerHeight()\n\n              }\n\n            };\n\n            if(module.is.verticallyScrollableContext()) {\n\n              calculations.menu.offset.top += calculations.context.scrollTop;\n\n            }\n\n            onScreen = {\n\n              above : (calculations.context.scrollTop) <= calculations.menu.offset.top - calculations.context.offset.top - calculations.menu.height,\n\n              below : (calculations.context.scrollTop + calculations.context.height) >= calculations.menu.offset.top - calculations.context.offset.top + calculations.menu.height\n\n            };\n\n            if(onScreen.below) {\n\n              module.verbose('Dropdown can fit in context downward', onScreen);\n\n              canOpenDownward = true;\n\n            }\n\n            else if(!onScreen.below && !onScreen.above) {\n\n              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);\n\n              canOpenDownward = true;\n\n            }\n\n            else {\n\n              module.verbose('Dropdown cannot fit below, opening upward', onScreen);\n\n              canOpenDownward = false;\n\n            }\n\n            $currentMenu.removeClass(className.loading);\n\n            return canOpenDownward;\n\n          },\n\n          openRightward: function($subMenu) {\n\n            var\n\n              $currentMenu     = $subMenu || $menu,\n\n              canOpenRightward = true,\n\n              isOffscreenRight = false,\n\n              calculations\n\n            ;\n\n            $currentMenu\n\n              .addClass(className.loading)\n\n            ;\n\n            calculations = {\n\n              context: {\n\n                offset     : ($context.get(0) === window)\n\n                  ? { top: 0, left: 0}\n\n                  : $context.offset(),\n\n                scrollLeft : $context.scrollLeft(),\n\n                width      : $context.outerWidth()\n\n              },\n\n              menu: {\n\n                offset : $currentMenu.offset(),\n\n                width  : $currentMenu.outerWidth()\n\n              }\n\n            };\n\n            if(module.is.horizontallyScrollableContext()) {\n\n              calculations.menu.offset.left += calculations.context.scrollLeft;\n\n            }\n\n            isOffscreenRight = (calculations.menu.offset.left - calculations.context.offset.left + calculations.menu.width >= calculations.context.scrollLeft + calculations.context.width);\n\n            if(isOffscreenRight) {\n\n              module.verbose('Dropdown cannot fit in context rightward', isOffscreenRight);\n\n              canOpenRightward = false;\n\n            }\n\n            $currentMenu.removeClass(className.loading);\n\n            return canOpenRightward;\n\n          },\n\n          click: function() {\n\n            return (hasTouch || settings.on == 'click');\n\n          },\n\n          extendSelect: function() {\n\n            return settings.allowAdditions || settings.apiSettings;\n\n          },\n\n          show: function() {\n\n            return !module.is.disabled() && (module.has.items() || module.has.message());\n\n          },\n\n          useAPI: function() {\n\n            return $.fn.api !== undefined;\n\n          }\n\n        },\n\n\n\n        animate: {\n\n          show: function(callback, $subMenu) {\n\n            var\n\n              $currentMenu = $subMenu || $menu,\n\n              start = ($subMenu)\n\n                ? function() {}\n\n                : function() {\n\n                  module.hideSubMenus();\n\n                  module.hideOthers();\n\n                  module.set.active();\n\n                },\n\n              transition\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            module.verbose('Doing menu show animation', $currentMenu);\n\n            module.set.direction($subMenu);\n\n            transition = module.get.transition($subMenu);\n\n            if( module.is.selection() ) {\n\n              module.set.scrollPosition(module.get.selectedItem(), true);\n\n            }\n\n            if( module.is.hidden($currentMenu) || module.is.animating($currentMenu) ) {\n\n              if(transition == 'none') {\n\n                start();\n\n                $currentMenu.transition('show');\n\n                callback.call(element);\n\n              }\n\n              else if($.fn.transition !== undefined && $module.transition('is supported')) {\n\n                $currentMenu\n\n                  .transition({\n\n                    animation  : transition + ' in',\n\n                    debug      : settings.debug,\n\n                    verbose    : settings.verbose,\n\n                    duration   : settings.duration,\n\n                    queue      : true,\n\n                    onStart    : start,\n\n                    onComplete : function() {\n\n                      callback.call(element);\n\n                    }\n\n                  })\n\n                ;\n\n              }\n\n              else {\n\n                module.error(error.noTransition, transition);\n\n              }\n\n            }\n\n          },\n\n          hide: function(callback, $subMenu) {\n\n            var\n\n              $currentMenu = $subMenu || $menu,\n\n              duration = ($subMenu)\n\n                ? (settings.duration * 0.9)\n\n                : settings.duration,\n\n              start = ($subMenu)\n\n                ? function() {}\n\n                : function() {\n\n                  if( module.can.click() ) {\n\n                    module.unbind.intent();\n\n                  }\n\n                  module.remove.active();\n\n                },\n\n              transition = module.get.transition($subMenu)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if( module.is.visible($currentMenu) || module.is.animating($currentMenu) ) {\n\n              module.verbose('Doing menu hide animation', $currentMenu);\n\n\n\n              if(transition == 'none') {\n\n                start();\n\n                $currentMenu.transition('hide');\n\n                callback.call(element);\n\n              }\n\n              else if($.fn.transition !== undefined && $module.transition('is supported')) {\n\n                $currentMenu\n\n                  .transition({\n\n                    animation  : transition + ' out',\n\n                    duration   : settings.duration,\n\n                    debug      : settings.debug,\n\n                    verbose    : settings.verbose,\n\n                    queue      : false,\n\n                    onStart    : start,\n\n                    onComplete : function() {\n\n                      callback.call(element);\n\n                    }\n\n                  })\n\n                ;\n\n              }\n\n              else {\n\n                module.error(error.transition);\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        hideAndClear: function() {\n\n          module.remove.searchTerm();\n\n          if( module.has.maxSelections() ) {\n\n            return;\n\n          }\n\n          if(module.has.search()) {\n\n            module.hide(function() {\n\n              module.remove.filteredItem();\n\n            });\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        delay: {\n\n          show: function() {\n\n            module.verbose('Delaying show event to ensure user intent');\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.show, settings.delay.show);\n\n          },\n\n          hide: function() {\n\n            module.verbose('Delaying hide event to ensure user intent');\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.hide, settings.delay.hide);\n\n          }\n\n        },\n\n\n\n        escape: {\n\n          value: function(value) {\n\n            var\n\n              multipleValues = $.isArray(value),\n\n              stringValue    = (typeof value === 'string'),\n\n              isUnparsable   = (!stringValue && !multipleValues),\n\n              hasQuotes      = (stringValue && value.search(regExp.quote) !== -1),\n\n              values         = []\n\n            ;\n\n            if(isUnparsable || !hasQuotes) {\n\n              return value;\n\n            }\n\n            module.debug('Encoding quote values for use in select', value);\n\n            if(multipleValues) {\n\n              $.each(value, function(index, value){\n\n                values.push(value.replace(regExp.quote, '&quot;'));\n\n              });\n\n              return values;\n\n            }\n\n            return value.replace(regExp.quote, '&quot;');\n\n          },\n\n          string: function(text) {\n\n            text =  String(text);\n\n            return text.replace(regExp.escape, '\\\\$&');\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/components/nag.js",
          "match_lines": [
            37,
            419
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.nag.settings, parameters)\n\n          : $.extend({}, $.fn.nag.settings),\n\n\n\n        className       = settings.className,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        namespace       = settings.namespace,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = namespace + '-module',\n\n\n\n        $module         = $(this),\n\n\n\n        $close          = $module.find(selector.close),\n\n        $context        = (settings.context)\n\n          ? $(settings.context)\n\n          : $('body'),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        moduleOffset,\n\n        moduleHeight,\n\n\n\n        contextWidth,\n\n        contextHeight,\n\n        contextOffset,\n\n\n\n        yOffset,\n\n        yPosition,\n\n\n\n        timer,\n\n        module,\n\n\n\n        requestAnimationFrame = window.requestAnimationFrame\n\n          || window.mozRequestAnimationFrame\n\n          || window.webkitRequestAnimationFrame\n\n          || window.msRequestAnimationFrame\n\n          || function(callback) { setTimeout(callback, 0); }\n\n      ;\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing element');\n\n\n\n          $module\n\n            .on('click' + eventNamespace, selector.close, module.dismiss)\n\n            .data(moduleNamespace, module)\n\n          ;\n\n\n\n          if(settings.detachable && $module.parent()[0] !== $context[0]) {\n\n            $module\n\n              .detach()\n\n              .prependTo($context)\n\n            ;\n\n          }\n\n\n\n          if(settings.displayTime > 0) {\n\n            setTimeout(module.hide, settings.displayTime);\n\n          }\n\n          module.show();\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying instance');\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        show: function() {\n\n          if( module.should.show() && !$module.is(':visible') ) {\n\n            module.debug('Showing nag', settings.animation.show);\n\n            if(settings.animation.show == 'fade') {\n\n              $module\n\n                .fadeIn(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            else {\n\n              $module\n\n                .slideDown(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        hide: function() {\n\n          module.debug('Showing nag', settings.animation.hide);\n\n          if(settings.animation.show == 'fade') {\n\n            $module\n\n              .fadeIn(settings.duration, settings.easing)\n\n            ;\n\n          }\n\n          else {\n\n            $module\n\n              .slideUp(settings.duration, settings.easing)\n\n            ;\n\n          }\n\n        },\n\n\n\n        onHide: function() {\n\n          module.debug('Removing nag', settings.animation.hide);\n\n          $module.remove();\n\n          if (settings.onHide) {\n\n            settings.onHide();\n\n          }\n\n        },\n\n\n\n        dismiss: function(event) {\n\n          if(settings.storageMethod) {\n\n            module.storage.set(settings.key, settings.value);\n\n          }\n\n          module.hide();\n\n          event.stopImmediatePropagation();\n\n          event.preventDefault();\n\n        },\n\n\n\n        should: {\n\n          show: function() {\n\n            if(settings.persist) {\n\n              module.debug('Persistent nag is set, can show nag');\n\n              return true;\n\n            }\n\n            if( module.storage.get(settings.key) != settings.value.toString() ) {\n\n              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));\n\n              return true;\n\n            }\n\n            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));\n\n            return false;\n\n          }\n\n        },\n\n\n\n        get: {\n\n          storageOptions: function() {\n\n            var\n\n              options = {}\n\n            ;\n\n            if(settings.expires) {\n\n              options.expires = settings.expires;\n\n            }\n\n            if(settings.domain) {\n\n              options.domain = settings.domain;\n\n            }\n\n            if(settings.path) {\n\n              options.path = settings.path;\n\n            }\n\n            return options;\n\n          }\n\n        },\n\n\n\n        clear: function() {\n\n          module.storage.remove(settings.key);\n\n        },\n\n\n\n        storage: {\n\n          set: function(key, value) {\n\n            var\n\n              options = module.get.storageOptions()\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              window.localStorage.setItem(key, value);\n\n              module.debug('Value stored using local storage', key, value);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              window.sessionStorage.setItem(key, value);\n\n              module.debug('Value stored using session storage', key, value);\n\n            }\n\n            else if($.cookie !== undefined) {\n\n              $.cookie(key, value, options);\n\n              module.debug('Value stored using cookie', key, value, options);\n\n            }\n\n            else {\n\n              module.error(error.noCookieStorage);\n\n              return;\n\n            }\n\n          },\n\n          get: function(key, value) {\n\n            var\n\n              storedValue\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              storedValue = window.localStorage.getItem(key);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              storedValue = window.sessionStorage.getItem(key);\n\n            }\n\n            // get by cookie\n\n            else if($.cookie !== undefined) {\n\n              storedValue = $.cookie(key);\n\n            }\n\n            else {\n\n              module.error(error.noCookieStorage);\n\n            }\n\n            if(storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {\n\n              storedValue = undefined;\n\n            }\n\n            return storedValue;\n\n          },\n\n          remove: function(key) {\n\n            var\n\n              options = module.get.storageOptions()\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              window.localStorage.removeItem(key);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              window.sessionStorage.removeItem(key);\n\n            }\n\n            // store by cookie\n\n            else if($.cookie !== undefined) {\n\n              $.removeCookie(key, options);\n\n            }\n\n            else {\n\n              module.error(error.noStorage);\n\n            }\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/components/popup.js",
          "match_lines": [
            182,
            189
          ],
          "match_position": [
            13,
            63
          ],
          "match_string": "            var\n\n              delay = ($.isPlainObject(settings.delay))\n\n                ? settings.delay.show\n\n                : settings.delay\n\n            ;\n\n            clearTimeout(module.hideTimer);\n\n            if(!openedWithTouch) {\n\n              module.showTimer = setTimeout(module.show, delay);"
        },
        {
          "file_path": "/src/dist/components/popup.js",
          "match_lines": [
            193,
            199
          ],
          "match_position": [
            13,
            61
          ],
          "match_string": "            var\n\n              delay = ($.isPlainObject(settings.delay))\n\n                ? settings.delay.hide\n\n                : settings.delay\n\n            ;\n\n            clearTimeout(module.showTimer);\n\n            module.hideTimer = setTimeout(module.hide, delay);"
        },
        {
          "file_path": "/src/dist/components/progress.js",
          "match_lines": [
            40,
            815
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.progress.settings, parameters)\n\n          : $.extend({}, $.fn.progress.settings),\n\n\n\n        className       = settings.className,\n\n        metadata        = settings.metadata,\n\n        namespace       = settings.namespace,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $module         = $(this),\n\n        $bar            = $(this).find(selector.bar),\n\n        $progress       = $(this).find(selector.progress),\n\n        $label          = $(this).find(selector.label),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        animating = false,\n\n        transitionEnd,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing progress bar', settings);\n\n\n\n          module.set.duration();\n\n          module.set.transitionEvent();\n\n\n\n          module.read.metadata();\n\n          module.read.settings();\n\n\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of progress', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n        destroy: function() {\n\n          module.verbose('Destroying previous progress for', $module);\n\n          clearInterval(instance.interval);\n\n          module.remove.state();\n\n          $module.removeData(moduleNamespace);\n\n          instance = undefined;\n\n        },\n\n\n\n        reset: function() {\n\n          module.remove.nextValue();\n\n          module.update.progress(0);\n\n        },\n\n\n\n        complete: function() {\n\n          if(module.percent === undefined || module.percent < 100) {\n\n            module.remove.progressPoll();\n\n            module.set.percent(100);\n\n          }\n\n        },\n\n\n\n        read: {\n\n          metadata: function() {\n\n            var\n\n              data = {\n\n                percent : $module.data(metadata.percent),\n\n                total   : $module.data(metadata.total),\n\n                value   : $module.data(metadata.value)\n\n              }\n\n            ;\n\n            if(data.percent) {\n\n              module.debug('Current percent value set from metadata', data.percent);\n\n              module.set.percent(data.percent);\n\n            }\n\n            if(data.total) {\n\n              module.debug('Total value set from metadata', data.total);\n\n              module.set.total(data.total);\n\n            }\n\n            if(data.value) {\n\n              module.debug('Current value set from metadata', data.value);\n\n              module.set.value(data.value);\n\n              module.set.progress(data.value);\n\n            }\n\n          },\n\n          settings: function() {\n\n            if(settings.total !== false) {\n\n              module.debug('Current total set in settings', settings.total);\n\n              module.set.total(settings.total);\n\n            }\n\n            if(settings.value !== false) {\n\n              module.debug('Current value set in settings', settings.value);\n\n              module.set.value(settings.value);\n\n              module.set.progress(module.value);\n\n            }\n\n            if(settings.percent !== false) {\n\n              module.debug('Current percent set in settings', settings.percent);\n\n              module.set.percent(settings.percent);\n\n            }\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          transitionEnd: function(callback) {\n\n            var\n\n              transitionEnd = module.get.transitionEnd()\n\n            ;\n\n            $bar\n\n              .one(transitionEnd + eventNamespace, function(event) {\n\n                clearTimeout(module.failSafeTimer);\n\n                callback.call(this, event);\n\n              })\n\n            ;\n\n            module.failSafeTimer = setTimeout(function() {\n\n              $bar.triggerHandler(transitionEnd);\n\n            }, settings.duration + settings.failSafeDelay);\n\n            module.verbose('Adding fail safe timer', module.timer);\n\n          }\n\n        },\n\n\n\n        increment: function(incrementValue) {\n\n          var\n\n            maxValue,\n\n            startValue,\n\n            newValue\n\n          ;\n\n          if( module.has.total() ) {\n\n            startValue     = module.get.value();\n\n            incrementValue = incrementValue || 1;\n\n            newValue       = startValue + incrementValue;\n\n          }\n\n          else {\n\n            startValue     = module.get.percent();\n\n            incrementValue = incrementValue || module.get.randomValue();\n\n\n\n            newValue       = startValue + incrementValue;\n\n            maxValue       = 100;\n\n            module.debug('Incrementing percentage by', startValue, newValue);\n\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n\n          module.set.progress(newValue);\n\n        },\n\n        decrement: function(decrementValue) {\n\n          var\n\n            total     = module.get.total(),\n\n            startValue,\n\n            newValue\n\n          ;\n\n          if(total) {\n\n            startValue     =  module.get.value();\n\n            decrementValue =  decrementValue || 1;\n\n            newValue       =  startValue - decrementValue;\n\n            module.debug('Decrementing value by', decrementValue, startValue);\n\n          }\n\n          else {\n\n            startValue     =  module.get.percent();\n\n            decrementValue =  decrementValue || module.get.randomValue();\n\n            newValue       =  startValue - decrementValue;\n\n            module.debug('Decrementing percentage by', decrementValue, startValue);\n\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n\n          module.set.progress(newValue);\n\n        },\n\n\n\n        has: {\n\n          progressPoll: function() {\n\n            return module.progressPoll;\n\n          },\n\n          total: function() {\n\n            return (module.get.total() !== false);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          text: function(templateText) {\n\n            var\n\n              value   = module.value                || 0,\n\n              total   = module.total                || 0,\n\n              percent = (animating)\n\n                ? module.get.displayPercent()\n\n                : module.percent || 0,\n\n              left = (module.total > 0)\n\n                ? (total - value)\n\n                : (100 - percent)\n\n            ;\n\n            templateText = templateText || '';\n\n            templateText = templateText\n\n              .replace('{value}', value)\n\n              .replace('{total}', total)\n\n              .replace('{left}', left)\n\n              .replace('{percent}', percent)\n\n            ;\n\n            module.verbose('Adding variables to progress bar text', templateText);\n\n            return templateText;\n\n          },\n\n\n\n          normalizedValue: function(value) {\n\n            if(value < 0) {\n\n              module.debug('Value cannot decrement below 0');\n\n              return 0;\n\n            }\n\n            if(module.has.total()) {\n\n              if(value > module.total) {\n\n                module.debug('Value cannot increment above total', module.total);\n\n                return module.total;\n\n              }\n\n            }\n\n            else if(value > 100 ) {\n\n              module.debug('Value cannot increment above 100 percent');\n\n              return 100;\n\n            }\n\n            return value;\n\n          },\n\n\n\n          updateInterval: function() {\n\n            if(settings.updateInterval == 'auto') {\n\n              return settings.duration;\n\n            }\n\n            return settings.updateInterval;\n\n          },\n\n\n\n          randomValue: function() {\n\n            module.debug('Generating random increment percentage');\n\n            return Math.floor((Math.random() * settings.random.max) + settings.random.min);\n\n          },\n\n\n\n          numericValue: function(value) {\n\n            return (typeof value === 'string')\n\n              ? (value.replace(/[^\\d.]/g, '') !== '')\n\n                ? +(value.replace(/[^\\d.]/g, ''))\n\n                : false\n\n              : value\n\n            ;\n\n          },\n\n\n\n          transitionEnd: function() {\n\n            var\n\n              element     = document.createElement('element'),\n\n              transitions = {\n\n                'transition'       :'transitionend',\n\n                'OTransition'      :'oTransitionEnd',\n\n                'MozTransition'    :'transitionend',\n\n                'WebkitTransition' :'webkitTransitionEnd'\n\n              },\n\n              transition\n\n            ;\n\n            for(transition in transitions){\n\n              if( element.style[transition] !== undefined ){\n\n                return transitions[transition];\n\n              }\n\n            }\n\n          },\n\n\n\n          // gets current displayed percentage (if animating values this is the intermediary value)\n\n          displayPercent: function() {\n\n            var\n\n              barWidth       = $bar.width(),\n\n              totalWidth     = $module.width(),\n\n              minDisplay     = parseInt($bar.css('min-width'), 10),\n\n              displayPercent = (barWidth > minDisplay)\n\n                ? (barWidth / totalWidth * 100)\n\n                : module.percent\n\n            ;\n\n            return (settings.precision > 0)\n\n              ? Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision)\n\n              : Math.round(displayPercent)\n\n            ;\n\n          },\n\n\n\n          percent: function() {\n\n            return module.percent || 0;\n\n          },\n\n          value: function() {\n\n            return module.nextValue || module.value || 0;\n\n          },\n\n          total: function() {\n\n            return module.total || false;\n\n          }\n\n        },\n\n\n\n        create: {\n\n          progressPoll: function() {\n\n            module.progressPoll = setTimeout(function() {\n\n              module.update.toNextValue();\n\n              module.remove.progressPoll();\n\n            }, module.get.updateInterval());\n\n          },\n\n        },\n\n\n\n        is: {\n\n          complete: function() {\n\n            return module.is.success() || module.is.warning() || module.is.error();\n\n          },\n\n          success: function() {\n\n            return $module.hasClass(className.success);\n\n          },\n\n          warning: function() {\n\n            return $module.hasClass(className.warning);\n\n          },\n\n          error: function() {\n\n            return $module.hasClass(className.error);\n\n          },\n\n          active: function() {\n\n            return $module.hasClass(className.active);\n\n          },\n\n          visible: function() {\n\n            return $module.is(':visible');\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          progressPoll: function() {\n\n            module.verbose('Removing progress poll timer');\n\n            if(module.progressPoll) {\n\n              clearTimeout(module.progressPoll);\n\n              delete module.progressPoll;\n\n            }\n\n          },\n\n          nextValue: function() {\n\n            module.verbose('Removing progress value stored for next update');\n\n            delete module.nextValue;\n\n          },\n\n          state: function() {\n\n            module.verbose('Removing stored state');\n\n            delete module.total;\n\n            delete module.percent;\n\n            delete module.value;\n\n          },\n\n          active: function() {\n\n            module.verbose('Removing active state');\n\n            $module.removeClass(className.active);\n\n          },\n\n          success: function() {\n\n            module.verbose('Removing success state');\n\n            $module.removeClass(className.success);\n\n          },\n\n          warning: function() {\n\n            module.verbose('Removing warning state');\n\n            $module.removeClass(className.warning);\n\n          },\n\n          error: function() {\n\n            module.verbose('Removing error state');\n\n            $module.removeClass(className.error);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          barWidth: function(value) {\n\n            if(value > 100) {\n\n              module.error(error.tooHigh, value);\n\n            }\n\n            else if (value < 0) {\n\n              module.error(error.tooLow, value);\n\n            }\n\n            else {\n\n              $bar\n\n                .css('width', value + '%')\n\n              ;\n\n              $module\n\n                .attr('data-percent', parseInt(value, 10))\n\n              ;\n\n            }\n\n          },\n\n          duration: function(duration) {\n\n            duration = duration || settings.duration;\n\n            duration = (typeof duration == 'number')\n\n              ? duration + 'ms'\n\n              : duration\n\n            ;\n\n            module.verbose('Setting progress bar transition duration', duration);\n\n            $bar\n\n              .css({\n\n                'transition-duration':  duration\n\n              })\n\n            ;\n\n          },\n\n          percent: function(percent) {\n\n            percent = (typeof percent == 'string')\n\n              ? +(percent.replace('%', ''))\n\n              : percent\n\n            ;\n\n            // round display percentage\n\n            percent = (settings.precision > 0)\n\n              ? Math.round(percent * (10 * settings.precision)) / (10 * settings.precision)\n\n              : Math.round(percent)\n\n            ;\n\n            module.percent = percent;\n\n            if( !module.has.total() ) {\n\n              module.value = (settings.precision > 0)\n\n                ? Math.round( (percent / 100) * module.total * (10 * settings.precision)) / (10 * settings.precision)\n\n                : Math.round( (percent / 100) * module.total * 10) / 10\n\n              ;\n\n              if(settings.limitValues) {\n\n                module.value = (module.value > 100)\n\n                  ? 100\n\n                  : (module.value < 0)\n\n                    ? 0\n\n                    : module.value\n\n                ;\n\n              }\n\n            }\n\n            module.set.barWidth(percent);\n\n            module.set.labelInterval();\n\n            module.set.labels();\n\n            settings.onChange.call(element, percent, module.value, module.total);\n\n          },\n\n          labelInterval: function() {\n\n            var\n\n              animationCallback = function() {\n\n                module.verbose('Bar finished animating, removing continuous label updates');\n\n                clearInterval(module.interval);\n\n                animating = false;\n\n                module.set.labels();\n\n              }\n\n            ;\n\n            clearInterval(module.interval);\n\n            module.bind.transitionEnd(animationCallback);\n\n            animating = true;\n\n            module.interval = setInterval(function() {\n\n              var\n\n                isInDOM = $.contains(document.documentElement, element)\n\n              ;\n\n              if(!isInDOM) {\n\n                clearInterval(module.interval);\n\n                animating = false;\n\n              }\n\n              module.set.labels();\n\n            }, settings.framerate);\n\n          },\n\n          labels: function() {\n\n            module.verbose('Setting both bar progress and outer label text');\n\n            module.set.barLabel();\n\n            module.set.state();\n\n          },\n\n          label: function(text) {\n\n            text = text || '';\n\n            if(text) {\n\n              text = module.get.text(text);\n\n              module.verbose('Setting label to text', text);\n\n              $label.text(text);\n\n            }\n\n          },\n\n          state: function(percent) {\n\n            percent = (percent !== undefined)\n\n              ? percent\n\n              : module.percent\n\n            ;\n\n            if(percent === 100) {\n\n              if(settings.autoSuccess && !(module.is.warning() || module.is.error() || module.is.success())) {\n\n                module.set.success();\n\n                module.debug('Automatically triggering success at 100%');\n\n              }\n\n              else {\n\n                module.verbose('Reached 100% removing active state');\n\n                module.remove.active();\n\n                module.remove.progressPoll();\n\n              }\n\n            }\n\n            else if(percent > 0) {\n\n              module.verbose('Adjusting active progress bar label', percent);\n\n              module.set.active();\n\n            }\n\n            else {\n\n              module.remove.active();\n\n              module.set.label(settings.text.active);\n\n            }\n\n          },\n\n          barLabel: function(text) {\n\n            if(text !== undefined) {\n\n              $progress.text( module.get.text(text) );\n\n            }\n\n            else if(settings.label == 'ratio' && module.total) {\n\n              module.verbose('Adding ratio to bar label');\n\n              $progress.text( module.get.text(settings.text.ratio) );\n\n            }\n\n            else if(settings.label == 'percent') {\n\n              module.verbose('Adding percentage to bar label');\n\n              $progress.text( module.get.text(settings.text.percent) );\n\n            }\n\n          },\n\n          active: function(text) {\n\n            text = text || settings.text.active;\n\n            module.debug('Setting active state');\n\n            if(settings.showActivity && !module.is.active() ) {\n\n              $module.addClass(className.active);\n\n            }\n\n            module.remove.warning();\n\n            module.remove.error();\n\n            module.remove.success();\n\n            text = settings.onLabelUpdate('active', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onActive.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          success : function(text) {\n\n            text = text || settings.text.success || settings.text.active;\n\n            module.debug('Setting success state');\n\n            $module.addClass(className.success);\n\n            module.remove.active();\n\n            module.remove.warning();\n\n            module.remove.error();\n\n            module.complete();\n\n            if(settings.text.success) {\n\n              text = settings.onLabelUpdate('success', text, module.value, module.total);\n\n              module.set.label(text);\n\n            }\n\n            else {\n\n              text = settings.onLabelUpdate('active', text, module.value, module.total);\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onSuccess.call(element, module.total);\n\n            });\n\n          },\n\n          warning : function(text) {\n\n            text = text || settings.text.warning;\n\n            module.debug('Setting warning state');\n\n            $module.addClass(className.warning);\n\n            module.remove.active();\n\n            module.remove.success();\n\n            module.remove.error();\n\n            module.complete();\n\n            text = settings.onLabelUpdate('warning', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onWarning.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          error : function(text) {\n\n            text = text || settings.text.error;\n\n            module.debug('Setting error state');\n\n            $module.addClass(className.error);\n\n            module.remove.active();\n\n            module.remove.success();\n\n            module.remove.warning();\n\n            module.complete();\n\n            text = settings.onLabelUpdate('error', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onError.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          transitionEvent: function() {\n\n            transitionEnd = module.get.transitionEnd();\n\n          },\n\n          total: function(totalValue) {\n\n            module.total = totalValue;\n\n          },\n\n          value: function(value) {\n\n            module.value = value;\n\n          },\n\n          progress: function(value) {\n\n            if(!module.has.progressPoll()) {\n\n              module.debug('First update in progress update interval, immediately updating', value);\n\n              module.update.progress(value);\n\n              module.create.progressPoll();\n\n            }\n\n            else {\n\n              module.debug('Updated within interval, setting next update to use new value', value);\n\n              module.set.nextValue(value);\n\n            }\n\n          },\n\n          nextValue: function(value) {\n\n            module.nextValue = value;\n\n          }\n\n        },\n\n\n\n        update: {\n\n          toNextValue: function() {\n\n            var\n\n              nextValue = module.nextValue\n\n            ;\n\n            if(nextValue) {\n\n              module.debug('Update interval complete using last updated value', nextValue);\n\n              module.update.progress(nextValue);\n\n              module.remove.nextValue();\n\n            }\n\n          },\n\n          progress: function(value) {\n\n            var\n\n              percentComplete\n\n            ;\n\n            value = module.get.numericValue(value);\n\n            if(value === false) {\n\n              module.error(error.nonNumeric, value);\n\n            }\n\n            value = module.get.normalizedValue(value);\n\n            if( module.has.total() ) {\n\n              module.set.value(value);\n\n              percentComplete = (value / module.total) * 100;\n\n              module.debug('Calculating percent complete from total', percentComplete);\n\n              module.set.percent( percentComplete );\n\n            }\n\n            else {\n\n              percentComplete = value;\n\n              module.debug('Setting value to exact percentage value', percentComplete);\n\n              module.set.percent( percentComplete );\n\n            }\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/components/search.js",
          "match_lines": [
            37,
            1191
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.search.settings, parameters)\n\n          : $.extend({}, $.fn.search.settings),\n\n\n\n        className        = settings.className,\n\n        metadata         = settings.metadata,\n\n        regExp           = settings.regExp,\n\n        fields           = settings.fields,\n\n        selector         = settings.selector,\n\n        error            = settings.error,\n\n        namespace        = settings.namespace,\n\n\n\n        eventNamespace   = '.' + namespace,\n\n        moduleNamespace  = namespace + '-module',\n\n\n\n        $module          = $(this),\n\n        $prompt          = $module.find(selector.prompt),\n\n        $searchButton    = $module.find(selector.searchButton),\n\n        $results         = $module.find(selector.results),\n\n        $result          = $module.find(selector.result),\n\n        $category        = $module.find(selector.category),\n\n\n\n        element          = this,\n\n        instance         = $module.data(moduleNamespace),\n\n\n\n        disabledBubbled  = false,\n\n        resultsDismissed = false,\n\n\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing module');\n\n          module.get.settings();\n\n          module.determine.searchFields();\n\n          module.bind.events();\n\n          module.set.type();\n\n          module.create.results();\n\n          module.instantiate();\n\n        },\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n        destroy: function() {\n\n          module.verbose('Destroying instance');\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n        },\n\n\n\n        refresh: function() {\n\n          module.debug('Refreshing selector cache');\n\n          $prompt         = $module.find(selector.prompt);\n\n          $searchButton   = $module.find(selector.searchButton);\n\n          $category       = $module.find(selector.category);\n\n          $results        = $module.find(selector.results);\n\n          $result         = $module.find(selector.result);\n\n        },\n\n\n\n        refreshResults: function() {\n\n          $results = $module.find(selector.results);\n\n          $result  = $module.find(selector.result);\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.verbose('Binding events to search');\n\n            if(settings.automatic) {\n\n              $module\n\n                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)\n\n              ;\n\n              $prompt\n\n                .attr('autocomplete', 'off')\n\n              ;\n\n            }\n\n            $module\n\n              // prompt\n\n              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)\n\n              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)\n\n              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)\n\n              // search button\n\n              .on('click'     + eventNamespace, selector.searchButton, module.query)\n\n              // results\n\n              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)\n\n              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)\n\n              .on('click'     + eventNamespace, selector.result,  module.event.result.click)\n\n            ;\n\n          }\n\n        },\n\n\n\n        determine: {\n\n          searchFields: function() {\n\n            // this makes sure $.extend does not add specified search fields to default fields\n\n            // this is the only setting which should not extend defaults\n\n            if(parameters && parameters.searchFields !== undefined) {\n\n              settings.searchFields = parameters.searchFields;\n\n            }\n\n          }\n\n        },\n\n\n\n        event: {\n\n          input: function() {\n\n            if(settings.searchDelay) {\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.is.focused()) {\n\n                  module.query();\n\n                }\n\n              }, settings.searchDelay);\n\n            }\n\n            else {\n\n              module.query();\n\n            }\n\n          },\n\n          focus: function() {\n\n            module.set.focus();\n\n            if(settings.searchOnFocus && module.has.minimumCharacters() ) {\n\n              module.query(function() {\n\n                if(module.can.show() ) {\n\n                  module.showResults();\n\n                }\n\n              });\n\n            }\n\n          },\n\n          blur: function(event) {\n\n            var\n\n              pageLostFocus = (document.activeElement === this),\n\n              callback      = function() {\n\n                module.cancel.query();\n\n                module.remove.focus();\n\n                module.timer = setTimeout(module.hideResults, settings.hideDelay);\n\n              }\n\n            ;\n\n            if(pageLostFocus) {\n\n              return;\n\n            }\n\n            resultsDismissed = false;\n\n            if(module.resultsClicked) {\n\n              module.debug('Determining if user action caused search to close');\n\n              $module\n\n                .one('click.close' + eventNamespace, selector.results, function(event) {\n\n                  if(module.is.inMessage(event) || disabledBubbled) {\n\n                    $prompt.focus();\n\n                    return;\n\n                  }\n\n                  disabledBubbled = false;\n\n                  if( !module.is.animating() && !module.is.hidden()) {\n\n                    callback();\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Input blurred without user action, closing results');\n\n              callback();\n\n            }\n\n          },\n\n          result: {\n\n            mousedown: function() {\n\n              module.resultsClicked = true;\n\n            },\n\n            mouseup: function() {\n\n              module.resultsClicked = false;\n\n            },\n\n            click: function(event) {\n\n              module.debug('Search result selected');\n\n              var\n\n                $result = $(this),\n\n                $title  = $result.find(selector.title).eq(0),\n\n                $link   = $result.is('a[href]')\n\n                  ? $result\n\n                  : $result.find('a[href]').eq(0),\n\n                href    = $link.attr('href')   || false,\n\n                target  = $link.attr('target') || false,\n\n                title   = $title.html(),\n\n                // title is used for result lookup\n\n                value   = ($title.length > 0)\n\n                  ? $title.text()\n\n                  : false,\n\n                results = module.get.results(),\n\n                result  = $result.data(metadata.result) || module.get.result(value, results),\n\n                returnedValue\n\n              ;\n\n              if(value) {\n\n                module.set.value(value);\n\n              }\n\n              if( $.isFunction(settings.onSelect) ) {\n\n                if(settings.onSelect.call(element, result, results) === false) {\n\n                  module.debug('Custom onSelect callback cancelled default select action');\n\n                  disabledBubbled = true;\n\n                  return;\n\n                }\n\n              }\n\n              module.hideResults();\n\n              if(href) {\n\n                module.verbose('Opening search link found in result', $link);\n\n                if(target == '_blank' || event.ctrlKey) {\n\n                  window.open(href);\n\n                }\n\n                else {\n\n                  window.location.href = (href);\n\n                }\n\n              }\n\n            }\n\n          }\n\n        },\n\n        handleKeyboard: function(event) {\n\n          var\n\n            // force selector refresh\n\n            $result         = $module.find(selector.result),\n\n            $category       = $module.find(selector.category),\n\n            $activeResult   = $result.filter('.' + className.active),\n\n            currentIndex    = $result.index( $activeResult ),\n\n            resultSize      = $result.length,\n\n            hasActiveResult = $activeResult.length > 0,\n\n\n\n            keyCode         = event.which,\n\n            keys            = {\n\n              backspace : 8,\n\n              enter     : 13,\n\n              escape    : 27,\n\n              upArrow   : 38,\n\n              downArrow : 40\n\n            },\n\n            newIndex\n\n          ;\n\n          // search shortcuts\n\n          if(keyCode == keys.escape) {\n\n            module.verbose('Escape key pressed, blurring search field');\n\n            module.hideResults();\n\n            resultsDismissed = true;\n\n          }\n\n          if( module.is.visible() ) {\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, selecting active result');\n\n              if( $result.filter('.' + className.active).length > 0 ) {\n\n                module.event.result.click.call($result.filter('.' + className.active), event);\n\n                event.preventDefault();\n\n                return false;\n\n              }\n\n            }\n\n            else if(keyCode == keys.upArrow && hasActiveResult) {\n\n              module.verbose('Up key pressed, changing active result');\n\n              newIndex = (currentIndex - 1 < 0)\n\n                ? currentIndex\n\n                : currentIndex - 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n            else if(keyCode == keys.downArrow) {\n\n              module.verbose('Down key pressed, changing active result');\n\n              newIndex = (currentIndex + 1 >= resultSize)\n\n                ? currentIndex\n\n                : currentIndex + 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n          }\n\n          else {\n\n            // query shortcuts\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, executing query');\n\n              module.query();\n\n              module.set.buttonPressed();\n\n              $prompt.one('keyup', module.remove.buttonFocus);\n\n            }\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          api: function(searchTerm, callback) {\n\n            var\n\n              apiSettings = {\n\n                debug             : settings.debug,\n\n                on                : false,\n\n                cache             : settings.cache,\n\n                action            : 'search',\n\n                urlData           : {\n\n                  query : searchTerm\n\n                },\n\n                onSuccess         : function(response) {\n\n                  module.parse.response.call(element, response, searchTerm);\n\n                  callback();\n\n                },\n\n                onFailure         : function() {\n\n                  module.displayMessage(error.serverError);\n\n                  callback();\n\n                },\n\n                onAbort : function(response) {\n\n                },\n\n                onError           : module.error\n\n              },\n\n              searchHTML\n\n            ;\n\n            $.extend(true, apiSettings, settings.apiSettings);\n\n            module.verbose('Setting up API request', apiSettings);\n\n            $module.api(apiSettings);\n\n          }\n\n        },\n\n\n\n        can: {\n\n          useAPI: function() {\n\n            return $.fn.api !== undefined;\n\n          },\n\n          show: function() {\n\n            return module.is.focused() && !module.is.visible() && !module.is.empty();\n\n          },\n\n          transition: function() {\n\n            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');\n\n          }\n\n        },\n\n\n\n        is: {\n\n          animating: function() {\n\n            return $results.hasClass(className.animating);\n\n          },\n\n          hidden: function() {\n\n            return $results.hasClass(className.hidden);\n\n          },\n\n          inMessage: function(event) {\n\n            if(!event.target) {\n\n              return;\n\n            }\n\n            var\n\n              $target = $(event.target),\n\n              isInDOM = $.contains(document.documentElement, event.target)\n\n            ;\n\n            return (isInDOM && $target.closest(selector.message).length > 0);\n\n          },\n\n          empty: function() {\n\n            return ($results.html() === '');\n\n          },\n\n          visible: function() {\n\n            return ($results.filter(':visible').length > 0);\n\n          },\n\n          focused: function() {\n\n            return ($prompt.filter(':focus').length > 0);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          settings: function() {\n\n            if($.isPlainObject(parameters) && parameters.searchFullText) {\n\n              settings.fullTextSearch = parameters.searchFullText;\n\n              module.error(settings.error.oldSearchSyntax, element);\n\n            }\n\n          },\n\n          inputEvent: function() {\n\n            var\n\n              prompt = $prompt[0],\n\n              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)\n\n                ? 'input'\n\n                : (prompt !== undefined && prompt.onpropertychange !== undefined)\n\n                  ? 'propertychange'\n\n                  : 'keyup'\n\n            ;\n\n            return inputEvent;\n\n          },\n\n          value: function() {\n\n            return $prompt.val();\n\n          },\n\n          results: function() {\n\n            var\n\n              results = $module.data(metadata.results)\n\n            ;\n\n            return results;\n\n          },\n\n          result: function(value, results) {\n\n            var\n\n              lookupFields = ['title', 'id'],\n\n              result       = false\n\n            ;\n\n            value = (value !== undefined)\n\n              ? value\n\n              : module.get.value()\n\n            ;\n\n            results = (results !== undefined)\n\n              ? results\n\n              : module.get.results()\n\n            ;\n\n            if(settings.type === 'category') {\n\n              module.debug('Finding result that matches', value);\n\n              $.each(results, function(index, category) {\n\n                if($.isArray(category.results)) {\n\n                  result = module.search.object(value, category.results, lookupFields)[0];\n\n                  // don't continue searching if a result is found\n\n                  if(result) {\n\n                    return false;\n\n                  }\n\n                }\n\n              });\n\n            }\n\n            else {\n\n              module.debug('Finding result in results object', value);\n\n              result = module.search.object(value, results, lookupFields)[0];\n\n            }\n\n            return result || false;\n\n          },\n\n        },\n\n\n\n        select: {\n\n          firstResult: function() {\n\n            module.verbose('Selecting first result');\n\n            $result.first().addClass(className.active);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          focus: function() {\n\n            $module.addClass(className.focus);\n\n          },\n\n          loading: function() {\n\n            $module.addClass(className.loading);\n\n          },\n\n          value: function(value) {\n\n            module.verbose('Setting search input value', value);\n\n            $prompt\n\n              .val(value)\n\n            ;\n\n          },\n\n          type: function(type) {\n\n            type = type || settings.type;\n\n            if(settings.type == 'category') {\n\n              $module.addClass(settings.type);\n\n            }\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.addClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          loading: function() {\n\n            $module.removeClass(className.loading);\n\n          },\n\n          focus: function() {\n\n            $module.removeClass(className.focus);\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.removeClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        query: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          var\n\n            searchTerm = module.get.value(),\n\n            cache = module.read.cache(searchTerm)\n\n          ;\n\n          callback = callback || function() {};\n\n          if( module.has.minimumCharacters() )  {\n\n            if(cache) {\n\n              module.debug('Reading result from cache', searchTerm);\n\n              module.save.results(cache.results);\n\n              module.addResults(cache.html);\n\n              module.inject.id(cache.results);\n\n              callback();\n\n            }\n\n            else {\n\n              module.debug('Querying for', searchTerm);\n\n              if($.isPlainObject(settings.source) || $.isArray(settings.source)) {\n\n                module.search.local(searchTerm);\n\n                callback();\n\n              }\n\n              else if( module.can.useAPI() ) {\n\n                module.search.remote(searchTerm, callback);\n\n              }\n\n              else {\n\n                module.error(error.source);\n\n                callback();\n\n              }\n\n            }\n\n            settings.onSearchQuery.call(element, searchTerm);\n\n          }\n\n          else {\n\n            module.hideResults();\n\n          }\n\n        },\n\n\n\n        search: {\n\n          local: function(searchTerm) {\n\n            var\n\n              results = module.search.object(searchTerm, settings.content),\n\n              searchHTML\n\n            ;\n\n            module.set.loading();\n\n            module.save.results(results);\n\n            module.debug('Returned full local search results', results);\n\n            if(settings.maxResults > 0) {\n\n              module.debug('Using specified max results', results);\n\n              results = results.slice(0, settings.maxResults);\n\n            }\n\n            if(settings.type == 'category') {\n\n              results = module.create.categoryResults(results);\n\n            }\n\n            searchHTML = module.generateResults({\n\n              results: results\n\n            });\n\n            module.remove.loading();\n\n            module.addResults(searchHTML);\n\n            module.inject.id(results);\n\n            module.write.cache(searchTerm, {\n\n              html    : searchHTML,\n\n              results : results\n\n            });\n\n          },\n\n          remote: function(searchTerm, callback) {\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if($module.api('is loading')) {\n\n              $module.api('abort');\n\n            }\n\n            module.setup.api(searchTerm, callback);\n\n            $module\n\n              .api('query')\n\n            ;\n\n          },\n\n          object: function(searchTerm, source, searchFields) {\n\n            var\n\n              results      = [],\n\n              exactResults = [],\n\n              fuzzyResults = [],\n\n              searchExp    = searchTerm.toString().replace(regExp.escape, '\\\\$&'),\n\n              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),\n\n\n\n              // avoid duplicates when pushing results\n\n              addResult = function(array, result) {\n\n                var\n\n                  notResult      = ($.inArray(result, results) == -1),\n\n                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1),\n\n                  notExactResults = ($.inArray(result, exactResults) == -1)\n\n                ;\n\n                if(notResult && notFuzzyResult && notExactResults) {\n\n                  array.push(result);\n\n                }\n\n              }\n\n            ;\n\n            source = source || settings.source;\n\n            searchFields = (searchFields !== undefined)\n\n              ? searchFields\n\n              : settings.searchFields\n\n            ;\n\n\n\n            // search fields should be array to loop correctly\n\n            if(!$.isArray(searchFields)) {\n\n              searchFields = [searchFields];\n\n            }\n\n\n\n            // exit conditions if no source\n\n            if(source === undefined || source === false) {\n\n              module.error(error.source);\n\n              return [];\n\n            }\n\n            // iterate through search fields looking for matches\n\n            $.each(searchFields, function(index, field) {\n\n              $.each(source, function(label, content) {\n\n                var\n\n                  fieldExists = (typeof content[field] == 'string')\n\n                ;\n\n                if(fieldExists) {\n\n                  if( content[field].search(matchRegExp) !== -1) {\n\n                    // content starts with value (first in results)\n\n                    addResult(results, content);\n\n                  }\n\n                  else if(settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(exactResults, content);\n\n                  }\n\n                  else if(settings.fullTextSearch == true && module.fuzzySearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(fuzzyResults, content);\n\n                  }\n\n                }\n\n              });\n\n            });\n\n            $.merge(exactResults, fuzzyResults)\n\n            $.merge(results, exactResults);\n\n            return results;\n\n          }\n\n        },\n\n        exactSearch: function (query, term) {\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(term.indexOf(query) > -1) {\n\n             return true;\n\n          }\n\n          return false;\n\n        },\n\n        fuzzySearch: function(query, term) {\n\n          var\n\n            termLength  = term.length,\n\n            queryLength = query.length\n\n          ;\n\n          if(typeof query !== 'string') {\n\n            return false;\n\n          }\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(queryLength > termLength) {\n\n            return false;\n\n          }\n\n          if(queryLength === termLength) {\n\n            return (query === term);\n\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n\n            var\n\n              queryCharacter = query.charCodeAt(characterIndex)\n\n            ;\n\n            while(nextCharacterIndex < termLength) {\n\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n\n                continue search;\n\n              }\n\n            }\n\n            return false;\n\n          }\n\n          return true;\n\n        },\n\n\n\n        parse: {\n\n          response: function(response, searchTerm) {\n\n            var\n\n              searchHTML = module.generateResults(response)\n\n            ;\n\n            module.verbose('Parsing server response', response);\n\n            if(response !== undefined) {\n\n              if(searchTerm !== undefined && response[fields.results] !== undefined) {\n\n                module.addResults(searchHTML);\n\n                module.inject.id(response[fields.results]);\n\n                module.write.cache(searchTerm, {\n\n                  html    : searchHTML,\n\n                  results : response[fields.results]\n\n                });\n\n                module.save.results(response[fields.results]);\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        cancel: {\n\n          query: function() {\n\n            if( module.can.useAPI() ) {\n\n              $module.api('abort');\n\n            }\n\n          }\n\n        },\n\n\n\n        has: {\n\n          minimumCharacters: function() {\n\n            var\n\n              searchTerm    = module.get.value(),\n\n              numCharacters = searchTerm.length\n\n            ;\n\n            return (numCharacters >= settings.minCharacters);\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              return false;\n\n            }\n\n            var\n\n              html = $results.html()\n\n            ;\n\n            return html != '';\n\n          }\n\n        },\n\n\n\n        clear: {\n\n          cache: function(value) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(!value) {\n\n              module.debug('Clearing cache', value);\n\n              $module.removeData(metadata.cache);\n\n            }\n\n            else if(value && cache && cache[value]) {\n\n              module.debug('Removing value from cache', value);\n\n              delete cache[value];\n\n              $module.data(metadata.cache, cache);\n\n            }\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cache: function(name) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Checking cache for generated html for query', name);\n\n              return (typeof cache == 'object') && (cache[name] !== undefined)\n\n                ? cache[name]\n\n                : false\n\n              ;\n\n            }\n\n            return false;\n\n          }\n\n        },\n\n\n\n        create: {\n\n          categoryResults: function(results) {\n\n            var\n\n              categoryResults = {}\n\n            ;\n\n            $.each(results, function(index, result) {\n\n              if(!result.category) {\n\n                return;\n\n              }\n\n              if(categoryResults[result.category] === undefined) {\n\n                module.verbose('Creating new category of results', result.category);\n\n                categoryResults[result.category] = {\n\n                  name    : result.category,\n\n                  results : [result]\n\n                }\n\n              }\n\n              else {\n\n                categoryResults[result.category].results.push(result);\n\n              }\n\n            });\n\n            return categoryResults;\n\n          },\n\n          id: function(resultIndex, categoryIndex) {\n\n            var\n\n              resultID      = (resultIndex + 1), // not zero indexed\n\n              categoryID    = (categoryIndex + 1),\n\n              firstCharCode,\n\n              letterID,\n\n              id\n\n            ;\n\n            if(categoryIndex !== undefined) {\n\n              // start char code for \"A\"\n\n              letterID = String.fromCharCode(97 + categoryIndex);\n\n              id          = letterID + resultID;\n\n              module.verbose('Creating category result id', id);\n\n            }\n\n            else {\n\n              id = resultID;\n\n              module.verbose('Creating result id', id);\n\n            }\n\n            return id;\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              $results = $('<div />')\n\n                .addClass(className.results)\n\n                .appendTo($module)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        inject: {\n\n          result: function(result, resultIndex, categoryIndex) {\n\n            module.verbose('Injecting result into results');\n\n            var\n\n              $selectedResult = (categoryIndex !== undefined)\n\n                ? $results\n\n                    .children().eq(categoryIndex)\n\n                      .children(selector.results)\n\n                        .first()\n\n                        .children(selector.result)\n\n                          .eq(resultIndex)\n\n                : $results\n\n                    .children(selector.result).eq(resultIndex)\n\n            ;\n\n            module.verbose('Injecting results metadata', $selectedResult);\n\n            $selectedResult\n\n              .data(metadata.result, result)\n\n            ;\n\n          },\n\n          id: function(results) {\n\n            module.debug('Injecting unique ids into results');\n\n            var\n\n              // since results may be object, we must use counters\n\n              categoryIndex = 0,\n\n              resultIndex   = 0\n\n            ;\n\n            if(settings.type === 'category') {\n\n              // iterate through each category result\n\n              $.each(results, function(index, category) {\n\n                resultIndex = 0;\n\n                $.each(category.results, function(index, value) {\n\n                  var\n\n                    result = category.results[index]\n\n                  ;\n\n                  if(result.id === undefined) {\n\n                    result.id = module.create.id(resultIndex, categoryIndex);\n\n                  }\n\n                  module.inject.result(result, resultIndex, categoryIndex);\n\n                  resultIndex++;\n\n                });\n\n                categoryIndex++;\n\n              });\n\n            }\n\n            else {\n\n              // top level\n\n              $.each(results, function(index, value) {\n\n                var\n\n                  result = results[index]\n\n                ;\n\n                if(result.id === undefined) {\n\n                  result.id = module.create.id(resultIndex);\n\n                }\n\n                module.inject.result(result, resultIndex);\n\n                resultIndex++;\n\n              });\n\n            }\n\n            return results;\n\n          }\n\n        },\n\n\n\n        save: {\n\n          results: function(results) {\n\n            module.verbose('Saving current search results to metadata', results);\n\n            $module.data(metadata.results, results);\n\n          }\n\n        },\n\n\n\n        write: {\n\n          cache: function(name, value) {\n\n            var\n\n              cache = ($module.data(metadata.cache) !== undefined)\n\n                ? $module.data(metadata.cache)\n\n                : {}\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Writing generated html to cache', name, value);\n\n              cache[name] = value;\n\n              $module\n\n                .data(metadata.cache, cache)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        addResults: function(html) {\n\n          if( $.isFunction(settings.onResultsAdd) ) {\n\n            if( settings.onResultsAdd.call($results, html) === false ) {\n\n              module.debug('onResultsAdd callback cancelled default action');\n\n              return false;\n\n            }\n\n          }\n\n          if(html) {\n\n            $results\n\n              .html(html)\n\n            ;\n\n            module.refreshResults();\n\n            if(settings.selectFirstResult) {\n\n              module.select.firstResult();\n\n            }\n\n            module.showResults();\n\n          }\n\n          else {\n\n            module.hideResults(function() {\n\n              $results.empty();\n\n            });\n\n          }\n\n        },\n\n\n\n        showResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if(resultsDismissed) {\n\n            return;\n\n          }\n\n          if(!module.is.visible() && module.has.results()) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Showing results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' in',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Showing results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeIn(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsOpen.call($results);\n\n          }\n\n        },\n\n        hideResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if( module.is.visible() ) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Hiding results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' out',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Hiding results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeOut(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsClose.call($results);\n\n          }\n\n        },\n\n\n\n        generateResults: function(response) {\n\n          module.debug('Generating html from response', response);\n\n          var\n\n            template       = settings.templates[settings.type],\n\n            isProperObject = ($.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results])),\n\n            isProperArray  = ($.isArray(response[fields.results]) && response[fields.results].length > 0),\n\n            html           = ''\n\n          ;\n\n          if(isProperObject || isProperArray ) {\n\n            if(settings.maxResults > 0) {\n\n              if(isProperObject) {\n\n                if(settings.type == 'standard') {\n\n                  module.error(error.maxResults);\n\n                }\n\n              }\n\n              else {\n\n                response[fields.results] = response[fields.results].slice(0, settings.maxResults);\n\n              }\n\n            }\n\n            if($.isFunction(template)) {\n\n              html = template(response, fields);\n\n            }\n\n            else {\n\n              module.error(error.noTemplate, false);\n\n            }\n\n          }\n\n          else if(settings.showNoResults) {\n\n            html = module.displayMessage(error.noResults, 'empty', error.noResultsHeader);\n\n          }\n\n          settings.onResults.call(element, response);\n\n          return html;\n\n        },\n\n\n\n        displayMessage: function(text, type, header) {\n\n          type = type || 'standard';\n\n          module.debug('Displaying message', text, type, header);\n\n          module.addResults( settings.templates.message(text, type, header) );\n\n          return settings.templates.message(text, type, header);\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            settings[name] = value;\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if($allModules.length > 1) {\n\n              title += ' ' + '(' + $allModules.length + ')';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/components/toast.js",
          "match_lines": [
            37,
            481
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.toast.settings, parameters)\n\n          : $.extend({}, $.fn.toast.settings),\n\n\n\n        className       = settings.className,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        namespace       = settings.namespace,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = namespace + '-module',\n\n\n\n        $module         = $(this),\n\n        $toastBox       = $('<div/>',{'class':settings.className.box}),\n\n        $toast          = $('<div/>'),\n\n        $progress       = $('<div/>',{'class':settings.className.progress+' '+settings.class}),\n\n        $progressBar    = $('<div/>',{'class':'bar'}),\n\n\n\n        $close          = $('<i/>',{'class':'close icon'}),\n\n        $context        = (settings.context)\n\n          ? $(settings.context)\n\n          : $('body'),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        module\n\n      ;\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing element');\n\n          if(typeof settings.showProgress !== 'string' || ['top','bottom'].indexOf(settings.showProgress) === -1 ) {\n\n            settings.showProgress = false;\n\n          }\n\n          if (!module.has.container()) {\n\n            module.create.container();\n\n          }\n\n\n\n          module.create.toast();\n\n\n\n          module.bind.events();\n\n          \n\n          if(settings.displayTime > 0) {\n\n            module.closeTimer = setTimeout(module.close, settings.displayTime+(!!settings.showProgress ? 300 : 0));\n\n          }\n\n          module.show();\n\n        },\n\n\n\n        destroy: function() {\n\n          module.debug('Removing toast', $toast);\n\n          $toast.remove();\n\n          $toast = undefined;\n\n          settings.onRemove.call($toast, element);\n\n        },\n\n\n\n        show: function(callback) {\n\n          callback = callback || function(){};\n\n          module.debug('Showing toast');\n\n          if(settings.onShow.call($toast, element) === false) {\n\n            module.debug('onShow callback returned false, cancelling toast animation');\n\n            return;\n\n          }\n\n          module.animate.show(callback);\n\n        },\n\n\n\n        close: function(callback) {\n\n          if(module.closeTimer) {\n\n              clearTimeout(module.closeTimer);\n\n          }\n\n          callback = callback || function(){};\n\n          module.remove.visible();\n\n          module.unbind.events();\n\n          module.animate.close(callback);\n\n\n\n        },\n\n\n\n        create: {\n\n          container: function() {\n\n            module.verbose('Creating container');\n\n            $context.append('<div class=\"ui ' + settings.position + ' ' + className.container + '\"></div>');\n\n          },\n\n          toast: function() {\n\n            var $content = $('<div/>').addClass(className.content);\n\n            module.verbose('Creating toast');\n\n            if(settings.closeIcon) {\n\n                $toast.append($close);\n\n                $toast.css('cursor','default');\n\n            }\n\n\n\n            var iconClass = typeof settings.showIcon === 'string' ? settings.showIcon : settings.showIcon && settings.icons[settings.class] ? settings.icons[settings.class] : '';\n\n            if (iconClass != '') {\n\n               var $icon = $('<i/>').addClass(iconClass + ' ' + className.icon);\n\n\n\n              $toast\n\n                .addClass(className.icon)\n\n                .append($icon)\n\n              ;\n\n            }\n\n\n\n            if (settings.title !== '') {\n\n              var \n\n                $title = $('<div/>')\n\n                  .addClass(className.title)\n\n                  .text(settings.title)\n\n                ;\n\n\n\n              $content.append($title);\n\n            }\n\n\n\n            $content.append($('<div/>').html(settings.message));\n\n\n\n            $toast\n\n              .addClass(settings.class + ' ' + className.toast)\n\n              .append($content)\n\n            ;\n\n            $toast.css('opacity', settings.opacity);\n\n            if(settings.compact || $toast.hasClass('compact')) {\n\n                $toastBox.addClass('compact');\n\n            }\n\n            if($toast.hasClass('toast') && !$toast.hasClass('inverted')){\n\n              $progress.addClass('inverted');\n\n            } else {\n\n              $progress.removeClass('inverted');\n\n            }\n\n            $toast = $toastBox.append($toast);\n\n            if(!!settings.showProgress && settings.displayTime > 0){\n\n              $progress\n\n                .addClass(settings.showProgress)\n\n                .append($progressBar);\n\n              if ($progress.hasClass('top')) {\n\n                  $toast.prepend($progress);\n\n              } else {\n\n                  $toast.append($progress);\n\n              }\n\n              $progressBar.css('transition','width '+(settings.displayTime/1000)+'s linear');\n\n              $progressBar.width(settings.progressUp?'0%':'100%');\n\n              setTimeout(function() {\n\n                  if(typeof $progress !== 'undefined'){\n\n                    $progressBar.width(settings.progressUp?'100%':'0%');\n\n                }\n\n              },300);\n\n            }\n\n            if (settings.newestOnTop) {\n\n              $toast.prependTo(module.get.container());\n\n            }\n\n            else {\n\n              $toast.appendTo(module.get.container());\n\n            }\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.debug('Binding events to toast');\n\n            (settings.closeIcon ? $close : $toast)\n\n              .on('click' + eventNamespace, module.event.click)\n\n            ;\n\n          }\n\n        },\n\n\n\n        unbind: {\n\n          events: function() {\n\n            module.debug('Unbinding events to toast');\n\n            (settings.closeIcon ? $close : $toast)\n\n              .off('click' + eventNamespace)\n\n            ;\n\n          }\n\n        },\n\n\n\n        animate: {\n\n          show: function(callback) {\n\n            callback = $.isFunction(callback) ? callback : function(){};\n\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n\n              module.set.visible();\n\n              $toast\n\n                .transition({\n\n                  animation  : settings.transition.showMethod + ' in',\n\n                  queue      : false,\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.transition.showDuration,\n\n                  onComplete : function() {\n\n                    callback.call($toast, element);\n\n                    settings.onVisible.call($toast, element);\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.error(error.noTransition);\n\n            }\n\n          },\n\n          close: function(callback) {\n\n            callback = $.isFunction(callback) ? callback : function(){};\n\n            module.debug('Closing toast');\n\n            if(settings.onHide.call($toast, element) === false) {\n\n              module.debug('onHide callback returned false, cancelling toast animation');\n\n              return;\n\n            }\n\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n\n              $toast\n\n                .transition({\n\n                  animation  : settings.transition.hideMethod + ' out',\n\n                  queue      : false,\n\n                  duration   : settings.transition.hideDuration,\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n\n\n                  onBeforeHide: function(callback){\n\n                      callback = $.isFunction(callback)?callback : function(){};\n\n                      if(settings.transition.closeEasing !== ''){\n\n                          $toast.css('opacity',0);\n\n                          $toast.wrap('<div/>').parent().slideUp(500,settings.transition.closeEasing,function(){\n\n                              $toast.parent().remove();\n\n                              callback.call($toast);\n\n                          });\n\n                      } else {\n\n                        callback.call($toast);\n\n                      }\n\n                  },\n\n                  onComplete : function() {\n\n                    module.destroy();\n\n                    callback.call($toast, element);\n\n                    settings.onHidden.call($toast, element);\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.error(error.noTransition);\n\n            }\n\n          }\n\n        },\n\n\n\n        has: {\n\n          container: function() {\n\n            module.verbose('Determining if there is already a container');\n\n            return ($context.find(module.helpers.toClass(settings.position) + selector.container).length > 0);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          container: function() {\n\n            return ($context.find(module.helpers.toClass(settings.position) + selector.container)[0]);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          visible: function() {\n\n            $toast.addClass(className.visible);\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          visible: function() {\n\n            $toast.removeClass(className.visible);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          click: function() {\n\n            settings.onClick.call($toast, element);\n\n            module.close();\n\n          }\n\n        },\n\n\n\n        helpers: {\n\n          toClass: function(selector) {\n\n            var\n\n              classes = selector.split(' '),\n\n              result = ''\n\n            ;\n\n\n\n            classes.forEach(function (element) {\n\n              result += '.' + element;\n\n            });\n\n\n\n            return result;\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/components/visibility.js",
          "match_lines": [
            41,
            1186
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings        = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.visibility.settings, parameters)\n\n          : $.extend({}, $.fn.visibility.settings),\n\n\n\n        className       = settings.className,\n\n        namespace       = settings.namespace,\n\n        error           = settings.error,\n\n        metadata        = settings.metadata,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $window         = $(window),\n\n\n\n        $module         = $(this),\n\n        $context        = $(settings.context),\n\n\n\n        $placeholder,\n\n\n\n        selector        = $module.selector || '',\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        requestAnimationFrame = window.requestAnimationFrame\n\n          || window.mozRequestAnimationFrame\n\n          || window.webkitRequestAnimationFrame\n\n          || window.msRequestAnimationFrame\n\n          || function(callback) { setTimeout(callback, 0); },\n\n\n\n        element         = this,\n\n        disabled        = false,\n\n\n\n        contextObserver,\n\n        observer,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing', settings);\n\n\n\n          module.setup.cache();\n\n\n\n          if( module.should.trackChanges() ) {\n\n\n\n            if(settings.type == 'image') {\n\n              module.setup.image();\n\n            }\n\n            if(settings.type == 'fixed') {\n\n              module.setup.fixed();\n\n            }\n\n\n\n            if(settings.observeChanges) {\n\n              module.observeChanges();\n\n            }\n\n            module.bind.events();\n\n          }\n\n\n\n          module.save.position();\n\n          if( !module.is.visible() ) {\n\n            module.error(error.visible, $module);\n\n          }\n\n\n\n          if(settings.initialCheck) {\n\n            module.checkVisibility();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.debug('Storing instance', module);\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n          instance = module;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module');\n\n          if(observer) {\n\n            observer.disconnect();\n\n          }\n\n          if(contextObserver) {\n\n            contextObserver.disconnect();\n\n          }\n\n          $window\n\n            .off('load'   + eventNamespace, module.event.load)\n\n            .off('resize' + eventNamespace, module.event.resize)\n\n          ;\n\n          $context\n\n            .off('scroll'       + eventNamespace, module.event.scroll)\n\n            .off('scrollchange' + eventNamespace, module.event.scrollchange)\n\n          ;\n\n          if(settings.type == 'fixed') {\n\n            module.resetFixed();\n\n            module.remove.placeholder();\n\n          }\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n        },\n\n\n\n        observeChanges: function() {\n\n          if('MutationObserver' in window) {\n\n            contextObserver = new MutationObserver(module.event.contextChanged);\n\n            observer        = new MutationObserver(module.event.changed);\n\n            contextObserver.observe(document, {\n\n              childList : true,\n\n              subtree   : true\n\n            });\n\n            observer.observe(element, {\n\n              childList : true,\n\n              subtree   : true\n\n            });\n\n            module.debug('Setting up mutation observer', observer);\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.verbose('Binding visibility events to scroll and resize');\n\n            if(settings.refreshOnLoad) {\n\n              $window\n\n                .on('load'   + eventNamespace, module.event.load)\n\n              ;\n\n            }\n\n            $window\n\n              .on('resize' + eventNamespace, module.event.resize)\n\n            ;\n\n            // pub/sub pattern\n\n            $context\n\n              .off('scroll'      + eventNamespace)\n\n              .on('scroll'       + eventNamespace, module.event.scroll)\n\n              .on('scrollchange' + eventNamespace, module.event.scrollchange)\n\n            ;\n\n          }\n\n        },\n\n\n\n        event: {\n\n          changed: function(mutations) {\n\n            module.verbose('DOM tree modified, updating visibility calculations');\n\n            module.timer = setTimeout(function() {\n\n              module.verbose('DOM tree modified, updating sticky menu');\n\n              module.refresh();\n\n            }, 100);\n\n          },\n\n          contextChanged: function(mutations) {\n\n            [].forEach.call(mutations, function(mutation) {\n\n              if(mutation.removedNodes) {\n\n                [].forEach.call(mutation.removedNodes, function(node) {\n\n                  if(node == element || $(node).find(element).length > 0) {\n\n                    module.debug('Element removed from DOM, tearing down events');\n\n                    module.destroy();\n\n                  }\n\n                });\n\n              }\n\n            });\n\n          },\n\n          resize: function() {\n\n            module.debug('Window resized');\n\n            if(settings.refreshOnResize) {\n\n              requestAnimationFrame(module.refresh);\n\n            }\n\n          },\n\n          load: function() {\n\n            module.debug('Page finished loading');\n\n            requestAnimationFrame(module.refresh);\n\n          },\n\n          // publishes scrollchange event on one scroll\n\n          scroll: function() {\n\n            if(settings.throttle) {\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);\n\n              }, settings.throttle);\n\n            }\n\n            else {\n\n              requestAnimationFrame(function() {\n\n                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);\n\n              });\n\n            }\n\n          },\n\n          // subscribes to scrollchange\n\n          scrollchange: function(event, scrollPosition) {\n\n            module.checkVisibility(scrollPosition);\n\n          },\n\n        },\n\n\n\n        precache: function(images, callback) {\n\n          if (!(images instanceof Array)) {\n\n            images = [images];\n\n          }\n\n          var\n\n            imagesLength  = images.length,\n\n            loadedCounter = 0,\n\n            cache         = [],\n\n            cacheImage    = document.createElement('img'),\n\n            handleLoad    = function() {\n\n              loadedCounter++;\n\n              if (loadedCounter >= images.length) {\n\n                if ($.isFunction(callback)) {\n\n                  callback();\n\n                }\n\n              }\n\n            }\n\n          ;\n\n          while (imagesLength--) {\n\n            cacheImage         = document.createElement('img');\n\n            cacheImage.onload  = handleLoad;\n\n            cacheImage.onerror = handleLoad;\n\n            cacheImage.src     = images[imagesLength];\n\n            cache.push(cacheImage);\n\n          }\n\n        },\n\n\n\n        enableCallbacks: function() {\n\n          module.debug('Allowing callbacks to occur');\n\n          disabled = false;\n\n        },\n\n\n\n        disableCallbacks: function() {\n\n          module.debug('Disabling all callbacks temporarily');\n\n          disabled = true;\n\n        },\n\n\n\n        should: {\n\n          trackChanges: function() {\n\n            if(methodInvoked) {\n\n              module.debug('One time query, no need to bind events');\n\n              return false;\n\n            }\n\n            module.debug('Callbacks being attached');\n\n            return true;\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          cache: function() {\n\n            module.cache = {\n\n              occurred : {},\n\n              screen   : {},\n\n              element  : {},\n\n            };\n\n          },\n\n          image: function() {\n\n            var\n\n              src = $module.data(metadata.src)\n\n            ;\n\n            if(src) {\n\n              module.verbose('Lazy loading image', src);\n\n              settings.once           = true;\n\n              settings.observeChanges = false;\n\n\n\n              // show when top visible\n\n              settings.onOnScreen = function() {\n\n                module.debug('Image on screen', element);\n\n                module.precache(src, function() {\n\n                  module.set.image(src, function() {\n\n                    loadedCount++;\n\n                    if(loadedCount == moduleCount) {\n\n                      settings.onAllLoaded.call(this);\n\n                    }\n\n                    settings.onLoad.call(this);\n\n                  });\n\n                });\n\n              };\n\n            }\n\n          },\n\n          fixed: function() {\n\n            module.debug('Setting up fixed');\n\n            settings.once           = false;\n\n            settings.observeChanges = false;\n\n            settings.initialCheck   = true;\n\n            settings.refreshOnLoad  = true;\n\n            if(!parameters.transition) {\n\n              settings.transition = false;\n\n            }\n\n            module.create.placeholder();\n\n            module.debug('Added placeholder', $placeholder);\n\n            settings.onTopPassed = function() {\n\n              module.debug('Element passed, adding fixed position', $module);\n\n              module.show.placeholder();\n\n              module.set.fixed();\n\n              if(settings.transition) {\n\n                if($.fn.transition !== undefined) {\n\n                  $module.transition(settings.transition, settings.duration);\n\n                }\n\n              }\n\n            };\n\n            settings.onTopPassedReverse = function() {\n\n              module.debug('Element returned to position, removing fixed', $module);\n\n              module.hide.placeholder();\n\n              module.remove.fixed();\n\n            };\n\n          }\n\n        },\n\n\n\n        create: {\n\n          placeholder: function() {\n\n            module.verbose('Creating fixed position placeholder');\n\n            $placeholder = $module\n\n              .clone(false)\n\n              .css('display', 'none')\n\n              .addClass(className.placeholder)\n\n              .insertAfter($module)\n\n            ;\n\n          }\n\n        },\n\n\n\n        show: {\n\n          placeholder: function() {\n\n            module.verbose('Showing placeholder');\n\n            $placeholder\n\n              .css('display', 'block')\n\n              .css('visibility', 'hidden')\n\n            ;\n\n          }\n\n        },\n\n        hide: {\n\n          placeholder: function() {\n\n            module.verbose('Hiding placeholder');\n\n            $placeholder\n\n              .css('display', 'none')\n\n              .css('visibility', '')\n\n            ;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          fixed: function() {\n\n            module.verbose('Setting element to fixed position');\n\n            $module\n\n              .addClass(className.fixed)\n\n              .css({\n\n                position : 'fixed',\n\n                top      : settings.offset + 'px',\n\n                left     : 'auto',\n\n                zIndex   : settings.zIndex\n\n              })\n\n            ;\n\n            settings.onFixed.call(element);\n\n          },\n\n          image: function(src, callback) {\n\n            $module\n\n              .attr('src', src)\n\n            ;\n\n            if(settings.transition) {\n\n              if( $.fn.transition !== undefined) {\n\n                if($module.hasClass(className.visible)) {\n\n                  module.debug('Transition already occurred on this image, skipping animation');\n\n                  return;\n\n                }\n\n                $module.transition(settings.transition, settings.duration, callback);\n\n              }\n\n              else {\n\n                $module.fadeIn(settings.duration, callback);\n\n              }\n\n            }\n\n            else {\n\n              $module.show();\n\n            }\n\n          }\n\n        },\n\n\n\n        is: {\n\n          onScreen: function() {\n\n            var\n\n              calculations   = module.get.elementCalculations()\n\n            ;\n\n            return calculations.onScreen;\n\n          },\n\n          offScreen: function() {\n\n            var\n\n              calculations   = module.get.elementCalculations()\n\n            ;\n\n            return calculations.offScreen;\n\n          },\n\n          visible: function() {\n\n            if(module.cache && module.cache.element) {\n\n              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);\n\n            }\n\n            return false;\n\n          },\n\n          verticallyScrollableContext: function() {\n\n            var\n\n              overflowY = ($context.get(0) !== window)\n\n                ? $context.css('overflow-y')\n\n                : false\n\n            ;\n\n            return (overflowY == 'auto' || overflowY == 'scroll');\n\n          },\n\n          horizontallyScrollableContext: function() {\n\n            var\n\n              overflowX = ($context.get(0) !== window)\n\n                ? $context.css('overflow-x')\n\n                : false\n\n            ;\n\n            return (overflowX == 'auto' || overflowX == 'scroll');\n\n          }\n\n        },\n\n\n\n        refresh: function() {\n\n          module.debug('Refreshing constants (width/height)');\n\n          if(settings.type == 'fixed') {\n\n            module.resetFixed();\n\n          }\n\n          module.reset();\n\n          module.save.position();\n\n          if(settings.checkOnRefresh) {\n\n            module.checkVisibility();\n\n          }\n\n          settings.onRefresh.call(element);\n\n        },\n\n\n\n        resetFixed: function () {\n\n          module.remove.fixed();\n\n          module.remove.occurred();\n\n        },\n\n\n\n        reset: function() {\n\n          module.verbose('Resetting all cached values');\n\n          if( $.isPlainObject(module.cache) ) {\n\n            module.cache.screen = {};\n\n            module.cache.element = {};\n\n          }\n\n        },\n\n\n\n        checkVisibility: function(scroll) {\n\n          module.verbose('Checking visibility of element', module.cache.element);\n\n\n\n          if( !disabled && module.is.visible() ) {\n\n\n\n            // save scroll position\n\n            module.save.scroll(scroll);\n\n\n\n            // update calculations derived from scroll\n\n            module.save.calculations();\n\n\n\n            // percentage\n\n            module.passed();\n\n\n\n            // reverse (must be first)\n\n            module.passingReverse();\n\n            module.topVisibleReverse();\n\n            module.bottomVisibleReverse();\n\n            module.topPassedReverse();\n\n            module.bottomPassedReverse();\n\n\n\n            // one time\n\n            module.onScreen();\n\n            module.offScreen();\n\n            module.passing();\n\n            module.topVisible();\n\n            module.bottomVisible();\n\n            module.topPassed();\n\n            module.bottomPassed();\n\n\n\n            // on update callback\n\n            if(settings.onUpdate) {\n\n              settings.onUpdate.call(element, module.get.elementCalculations());\n\n            }\n\n          }\n\n        },\n\n\n\n        passed: function(amount, newCallback) {\n\n          var\n\n            calculations   = module.get.elementCalculations(),\n\n            amountInPixels\n\n          ;\n\n          // assign callback\n\n          if(amount && newCallback) {\n\n            settings.onPassed[amount] = newCallback;\n\n          }\n\n          else if(amount !== undefined) {\n\n            return (module.get.pixelsPassed(amount) > calculations.pixelsPassed);\n\n          }\n\n          else if(calculations.passing) {\n\n            $.each(settings.onPassed, function(amount, callback) {\n\n              if(calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {\n\n                module.execute(callback, amount);\n\n              }\n\n              else if(!settings.once) {\n\n                module.remove.occurred(callback);\n\n              }\n\n            });\n\n          }\n\n        },\n\n\n\n        onScreen: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onOnScreen,\n\n            callbackName = 'onScreen'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for onScreen', newCallback);\n\n            settings.onOnScreen = newCallback;\n\n          }\n\n          if(calculations.onScreen) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.onOnScreen;\n\n          }\n\n        },\n\n\n\n        offScreen: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onOffScreen,\n\n            callbackName = 'offScreen'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for offScreen', newCallback);\n\n            settings.onOffScreen = newCallback;\n\n          }\n\n          if(calculations.offScreen) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.onOffScreen;\n\n          }\n\n        },\n\n\n\n        passing: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onPassing,\n\n            callbackName = 'passing'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for passing', newCallback);\n\n            settings.onPassing = newCallback;\n\n          }\n\n          if(calculations.passing) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.passing;\n\n          }\n\n        },\n\n\n\n\n\n        topVisible: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopVisible,\n\n            callbackName = 'topVisible'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top visible', newCallback);\n\n            settings.onTopVisible = newCallback;\n\n          }\n\n          if(calculations.topVisible) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.topVisible;\n\n          }\n\n        },\n\n\n\n        bottomVisible: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomVisible,\n\n            callbackName = 'bottomVisible'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom visible', newCallback);\n\n            settings.onBottomVisible = newCallback;\n\n          }\n\n          if(calculations.bottomVisible) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.bottomVisible;\n\n          }\n\n        },\n\n\n\n        topPassed: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopPassed,\n\n            callbackName = 'topPassed'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top passed', newCallback);\n\n            settings.onTopPassed = newCallback;\n\n          }\n\n          if(calculations.topPassed) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.topPassed;\n\n          }\n\n        },\n\n\n\n        bottomPassed: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomPassed,\n\n            callbackName = 'bottomPassed'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom passed', newCallback);\n\n            settings.onBottomPassed = newCallback;\n\n          }\n\n          if(calculations.bottomPassed) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.bottomPassed;\n\n          }\n\n        },\n\n\n\n        passingReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onPassingReverse,\n\n            callbackName = 'passingReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for passing reverse', newCallback);\n\n            settings.onPassingReverse = newCallback;\n\n          }\n\n          if(!calculations.passing) {\n\n            if(module.get.occurred('passing')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return !calculations.passing;\n\n          }\n\n        },\n\n\n\n\n\n        topVisibleReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopVisibleReverse,\n\n            callbackName = 'topVisibleReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top visible reverse', newCallback);\n\n            settings.onTopVisibleReverse = newCallback;\n\n          }\n\n          if(!calculations.topVisible) {\n\n            if(module.get.occurred('topVisible')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.topVisible;\n\n          }\n\n        },\n\n\n\n        bottomVisibleReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomVisibleReverse,\n\n            callbackName = 'bottomVisibleReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom visible reverse', newCallback);\n\n            settings.onBottomVisibleReverse = newCallback;\n\n          }\n\n          if(!calculations.bottomVisible) {\n\n            if(module.get.occurred('bottomVisible')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.bottomVisible;\n\n          }\n\n        },\n\n\n\n        topPassedReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopPassedReverse,\n\n            callbackName = 'topPassedReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top passed reverse', newCallback);\n\n            settings.onTopPassedReverse = newCallback;\n\n          }\n\n          if(!calculations.topPassed) {\n\n            if(module.get.occurred('topPassed')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.onTopPassed;\n\n          }\n\n        },\n\n\n\n        bottomPassedReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomPassedReverse,\n\n            callbackName = 'bottomPassedReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom passed reverse', newCallback);\n\n            settings.onBottomPassedReverse = newCallback;\n\n          }\n\n          if(!calculations.bottomPassed) {\n\n            if(module.get.occurred('bottomPassed')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.bottomPassed;\n\n          }\n\n        },\n\n\n\n        execute: function(callback, callbackName) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            screen       = module.get.screenCalculations()\n\n          ;\n\n          callback = callback || false;\n\n          if(callback) {\n\n            if(settings.continuous) {\n\n              module.debug('Callback being called continuously', callbackName, calculations);\n\n              callback.call(element, calculations, screen);\n\n            }\n\n            else if(!module.get.occurred(callbackName)) {\n\n              module.debug('Conditions met', callbackName, calculations);\n\n              callback.call(element, calculations, screen);\n\n            }\n\n          }\n\n          module.save.occurred(callbackName);\n\n        },\n\n\n\n        remove: {\n\n          fixed: function() {\n\n            module.debug('Removing fixed position');\n\n            $module\n\n              .removeClass(className.fixed)\n\n              .css({\n\n                position : '',\n\n                top      : '',\n\n                left     : '',\n\n                zIndex   : ''\n\n              })\n\n            ;\n\n            settings.onUnfixed.call(element);\n\n          },\n\n          placeholder: function() {\n\n            module.debug('Removing placeholder content');\n\n            if($placeholder) {\n\n              $placeholder.remove();\n\n            }\n\n          },\n\n          occurred: function(callback) {\n\n            if(callback) {\n\n              var\n\n                occurred = module.cache.occurred\n\n              ;\n\n              if(occurred[callback] !== undefined && occurred[callback] === true) {\n\n                module.debug('Callback can now be called again', callback);\n\n                module.cache.occurred[callback] = false;\n\n              }\n\n            }\n\n            else {\n\n              module.cache.occurred = {};\n\n            }\n\n          }\n\n        },\n\n\n\n        save: {\n\n          calculations: function() {\n\n            module.verbose('Saving all calculations necessary to determine positioning');\n\n            module.save.direction();\n\n            module.save.screenCalculations();\n\n            module.save.elementCalculations();\n\n          },\n\n          occurred: function(callback) {\n\n            if(callback) {\n\n              if(module.cache.occurred[callback] === undefined || (module.cache.occurred[callback] !== true)) {\n\n                module.verbose('Saving callback occurred', callback);\n\n                module.cache.occurred[callback] = true;\n\n              }\n\n            }\n\n          },\n\n          scroll: function(scrollPosition) {\n\n            scrollPosition      = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;\n\n            module.cache.scroll = scrollPosition;\n\n          },\n\n          direction: function() {\n\n            var\n\n              scroll     = module.get.scroll(),\n\n              lastScroll = module.get.lastScroll(),\n\n              direction\n\n            ;\n\n            if(scroll > lastScroll && lastScroll) {\n\n              direction = 'down';\n\n            }\n\n            else if(scroll < lastScroll && lastScroll) {\n\n              direction = 'up';\n\n            }\n\n            else {\n\n              direction = 'static';\n\n            }\n\n            module.cache.direction = direction;\n\n            return module.cache.direction;\n\n          },\n\n          elementPosition: function() {\n\n            var\n\n              element = module.cache.element,\n\n              screen  = module.get.screenSize()\n\n            ;\n\n            module.verbose('Saving element position');\n\n            // (quicker than $.extend)\n\n            element.fits          = (element.height < screen.height);\n\n            element.offset        = $module.offset();\n\n            element.width         = $module.outerWidth();\n\n            element.height        = $module.outerHeight();\n\n            // compensate for scroll in context\n\n            if(module.is.verticallyScrollableContext()) {\n\n              element.offset.top += $context.scrollTop() - $context.offset().top;\n\n            }\n\n            if(module.is.horizontallyScrollableContext()) {\n\n              element.offset.left += $context.scrollLeft - $context.offset().left;\n\n            }\n\n            // store\n\n            module.cache.element = element;\n\n            return element;\n\n          },\n\n          elementCalculations: function() {\n\n            var\n\n              screen     = module.get.screenCalculations(),\n\n              element    = module.get.elementPosition()\n\n            ;\n\n            // offset\n\n            if(settings.includeMargin) {\n\n              element.margin        = {};\n\n              element.margin.top    = parseInt($module.css('margin-top'), 10);\n\n              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);\n\n              element.top    = element.offset.top - element.margin.top;\n\n              element.bottom = element.offset.top + element.height + element.margin.bottom;\n\n            }\n\n            else {\n\n              element.top    = element.offset.top;\n\n              element.bottom = element.offset.top + element.height;\n\n            }\n\n\n\n            // visibility\n\n            element.topPassed        = (screen.top >= element.top);\n\n            element.bottomPassed     = (screen.top >= element.bottom);\n\n            element.topVisible       = (screen.bottom >= element.top) && !element.topPassed;\n\n            element.bottomVisible    = (screen.bottom >= element.bottom) && !element.bottomPassed;\n\n            element.pixelsPassed     = 0;\n\n            element.percentagePassed = 0;\n\n\n\n            // meta calculations\n\n            element.onScreen  = ((element.topVisible || element.passing) && !element.bottomPassed);\n\n            element.passing   = (element.topPassed && !element.bottomPassed);\n\n            element.offScreen = (!element.onScreen);\n\n\n\n            // passing calculations\n\n            if(element.passing) {\n\n              element.pixelsPassed     = (screen.top - element.top);\n\n              element.percentagePassed = (screen.top - element.top) / element.height;\n\n            }\n\n            module.cache.element = element;\n\n            module.verbose('Updated element calculations', element);\n\n            return element;\n\n          },\n\n          screenCalculations: function() {\n\n            var\n\n              scroll = module.get.scroll()\n\n            ;\n\n            module.save.direction();\n\n            module.cache.screen.top    = scroll;\n\n            module.cache.screen.bottom = scroll + module.cache.screen.height;\n\n            return module.cache.screen;\n\n          },\n\n          screenSize: function() {\n\n            module.verbose('Saving window position');\n\n            module.cache.screen = {\n\n              height: $context.height()\n\n            };\n\n          },\n\n          position: function() {\n\n            module.save.screenSize();\n\n            module.save.elementPosition();\n\n          }\n\n        },\n\n\n\n        get: {\n\n          pixelsPassed: function(amount) {\n\n            var\n\n              element = module.get.elementCalculations()\n\n            ;\n\n            if(amount.search('%') > -1) {\n\n              return ( element.height * (parseInt(amount, 10) / 100) );\n\n            }\n\n            return parseInt(amount, 10);\n\n          },\n\n          occurred: function(callback) {\n\n            return (module.cache.occurred !== undefined)\n\n              ? module.cache.occurred[callback] || false\n\n              : false\n\n            ;\n\n          },\n\n          direction: function() {\n\n            if(module.cache.direction === undefined) {\n\n              module.save.direction();\n\n            }\n\n            return module.cache.direction;\n\n          },\n\n          elementPosition: function() {\n\n            if(module.cache.element === undefined) {\n\n              module.save.elementPosition();\n\n            }\n\n            return module.cache.element;\n\n          },\n\n          elementCalculations: function() {\n\n            if(module.cache.element === undefined) {\n\n              module.save.elementCalculations();\n\n            }\n\n            return module.cache.element;\n\n          },\n\n          screenCalculations: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.save.screenCalculations();\n\n            }\n\n            return module.cache.screen;\n\n          },\n\n          screenSize: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.save.screenSize();\n\n            }\n\n            return module.cache.screen;\n\n          },\n\n          scroll: function() {\n\n            if(module.cache.scroll === undefined) {\n\n              module.save.scroll();\n\n            }\n\n            return module.cache.scroll;\n\n          },\n\n          lastScroll: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.debug('First scroll event, no last scroll could be found');\n\n              return false;\n\n            }\n\n            return module.cache.screen.top;\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            settings[name] = value;\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            5906,
            9599
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.dropdown.settings, parameters)\n\n          : $.extend({}, $.fn.dropdown.settings),\n\n\n\n        className       = settings.className,\n\n        message         = settings.message,\n\n        fields          = settings.fields,\n\n        keys            = settings.keys,\n\n        metadata        = settings.metadata,\n\n        namespace       = settings.namespace,\n\n        regExp          = settings.regExp,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        templates       = settings.templates,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $module         = $(this),\n\n        $context        = $(settings.context),\n\n        $text           = $module.find(selector.text),\n\n        $search         = $module.find(selector.search),\n\n        $sizer          = $module.find(selector.sizer),\n\n        $input          = $module.find(selector.input),\n\n        $icon           = $module.find(selector.icon),\n\n        $clear          = $module.find(selector.clearIcon),\n\n\n\n        $combo = ($module.prev().find(selector.text).length > 0)\n\n          ? $module.prev().find(selector.text)\n\n          : $module.prev(),\n\n\n\n        $menu           = $module.children(selector.menu),\n\n        $item           = $menu.find(selector.item),\n\n        $divider        = settings.hideDividers ? $item.parent().children(selector.divider) : $(),\n\n\n\n        activated       = false,\n\n        itemActivated   = false,\n\n        internalChange  = false,\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        initialLoad,\n\n        pageLostFocus,\n\n        willRefocus,\n\n        elementNamespace,\n\n        id,\n\n        selectObserver,\n\n        menuObserver,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing dropdown', settings);\n\n\n\n          if( module.is.alreadySetup() ) {\n\n            module.setup.reference();\n\n          }\n\n          else {\n\n\n\n            module.setup.layout();\n\n\n\n            if(settings.values) {\n\n              module.change.values(settings.values);\n\n            }\n\n\n\n            module.refreshData();\n\n\n\n            module.save.defaults();\n\n            module.restore.selected();\n\n\n\n            module.create.id();\n\n            module.bind.events();\n\n\n\n            module.observeChanges();\n\n            module.instantiate();\n\n          }\n\n\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of dropdown', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous dropdown', $module);\n\n          module.remove.tabbable();\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n          $menu\n\n            .off(eventNamespace)\n\n          ;\n\n          $document\n\n            .off(elementNamespace)\n\n          ;\n\n          module.disconnect.menuObserver();\n\n          module.disconnect.selectObserver();\n\n        },\n\n\n\n        observeChanges: function() {\n\n          if('MutationObserver' in window) {\n\n            selectObserver = new MutationObserver(module.event.select.mutation);\n\n            menuObserver   = new MutationObserver(module.event.menu.mutation);\n\n            module.debug('Setting up mutation observer', selectObserver, menuObserver);\n\n            module.observe.select();\n\n            module.observe.menu();\n\n          }\n\n        },\n\n\n\n        disconnect: {\n\n          menuObserver: function() {\n\n            if(menuObserver) {\n\n              menuObserver.disconnect();\n\n            }\n\n          },\n\n          selectObserver: function() {\n\n            if(selectObserver) {\n\n              selectObserver.disconnect();\n\n            }\n\n          }\n\n        },\n\n        observe: {\n\n          select: function() {\n\n            if(module.has.input()) {\n\n              selectObserver.observe($module[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          },\n\n          menu: function() {\n\n            if(module.has.menu()) {\n\n              menuObserver.observe($menu[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n          id: function() {\n\n            id = (Math.random().toString(16) + '000000000').substr(2, 8);\n\n            elementNamespace = '.' + id;\n\n            module.verbose('Creating unique id for element', id);\n\n          },\n\n          userChoice: function(values) {\n\n            var\n\n              $userChoices,\n\n              $userChoice,\n\n              isUserValue,\n\n              html\n\n            ;\n\n            values = values || module.get.userValues();\n\n            if(!values) {\n\n              return false;\n\n            }\n\n            values = $.isArray(values)\n\n              ? values\n\n              : [values]\n\n            ;\n\n            $.each(values, function(index, value) {\n\n              if(module.get.item(value) === false) {\n\n                html         = settings.templates.addition( module.add.variables(message.addResult, value) );\n\n                $userChoice  = $('<div />')\n\n                  .html(html)\n\n                  .attr('data-' + metadata.value, value)\n\n                  .attr('data-' + metadata.text, value)\n\n                  .addClass(className.addition)\n\n                  .addClass(className.item)\n\n                ;\n\n                if(settings.hideAdditions) {\n\n                  $userChoice.addClass(className.hidden);\n\n                }\n\n                $userChoices = ($userChoices === undefined)\n\n                  ? $userChoice\n\n                  : $userChoices.add($userChoice)\n\n                ;\n\n                module.verbose('Creating user choices for value', value, $userChoice);\n\n              }\n\n            });\n\n            return $userChoices;\n\n          },\n\n          userLabels: function(value) {\n\n            var\n\n              userValues = module.get.userValues()\n\n            ;\n\n            if(userValues) {\n\n              module.debug('Adding user labels', userValues);\n\n              $.each(userValues, function(index, value) {\n\n                module.verbose('Adding custom user value');\n\n                module.add.label(value, value);\n\n              });\n\n            }\n\n          },\n\n          menu: function() {\n\n            $menu = $('<div />')\n\n              .addClass(className.menu)\n\n              .appendTo($module)\n\n            ;\n\n          },\n\n          sizer: function() {\n\n            $sizer = $('<span />')\n\n              .addClass(className.sizer)\n\n              .insertAfter($search)\n\n            ;\n\n          }\n\n        },\n\n\n\n        search: function(query) {\n\n          query = (query !== undefined)\n\n            ? query\n\n            : module.get.query()\n\n          ;\n\n          module.verbose('Searching for query', query);\n\n          if(module.has.minCharacters(query)) {\n\n            module.filter(query);\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        select: {\n\n          firstUnfiltered: function() {\n\n            module.verbose('Selecting first non-filtered element');\n\n            module.remove.selectedItem();\n\n            $item\n\n              .not(selector.unselectable)\n\n              .not(selector.addition + selector.hidden)\n\n                .eq(0)\n\n                .addClass(className.selected)\n\n            ;\n\n          },\n\n          nextAvailable: function($selected) {\n\n            $selected = $selected.eq(0);\n\n            var\n\n              $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),\n\n              $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),\n\n              hasNext        = ($nextAvailable.length > 0)\n\n            ;\n\n            if(hasNext) {\n\n              module.verbose('Moving selection to', $nextAvailable);\n\n              $nextAvailable.addClass(className.selected);\n\n            }\n\n            else {\n\n              module.verbose('Moving selection to', $prevAvailable);\n\n              $prevAvailable.addClass(className.selected);\n\n            }\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          api: function() {\n\n            var\n\n              apiSettings = {\n\n                debug   : settings.debug,\n\n                urlData : {\n\n                  value : module.get.value(),\n\n                  query : module.get.query()\n\n                },\n\n                on    : false\n\n              }\n\n            ;\n\n            module.verbose('First request, initializing API');\n\n            $module\n\n              .api(apiSettings)\n\n            ;\n\n          },\n\n          layout: function() {\n\n            if( $module.is('select') ) {\n\n              module.setup.select();\n\n              module.setup.returnedObject();\n\n            }\n\n            if( !module.has.menu() ) {\n\n              module.create.menu();\n\n            }\n\n            if ( module.is.selection() && module.is.clearable() && !module.has.clearItem() ) {\n\n              module.verbose('Adding clear icon');\n\n              $clear = $('<i />')\n\n                .addClass('remove icon')\n\n                .insertBefore($text)\n\n              ;\n\n            }\n\n            if( module.is.search() && !module.has.search() ) {\n\n              module.verbose('Adding search input');\n\n              $search = $('<input />')\n\n                .addClass(className.search)\n\n                .prop('autocomplete', 'off')\n\n                .insertBefore($text)\n\n              ;\n\n            }\n\n            if( module.is.multiple() && module.is.searchSelection() && !module.has.sizer()) {\n\n              module.create.sizer();\n\n            }\n\n            if(settings.allowTab) {\n\n              module.set.tabbable();\n\n            }\n\n          },\n\n          select: function() {\n\n            var\n\n              selectValues  = module.get.selectValues()\n\n            ;\n\n            module.debug('Dropdown initialized on a select', selectValues);\n\n            if( $module.is('select') ) {\n\n              $input = $module;\n\n            }\n\n            // see if select is placed correctly already\n\n            if($input.parent(selector.dropdown).length > 0) {\n\n              module.debug('UI dropdown already exists. Creating dropdown menu only');\n\n              $module = $input.closest(selector.dropdown);\n\n              if( !module.has.menu() ) {\n\n                module.create.menu();\n\n              }\n\n              $menu = $module.children(selector.menu);\n\n              module.setup.menu(selectValues);\n\n            }\n\n            else {\n\n              module.debug('Creating entire dropdown from select');\n\n              $module = $('<div />')\n\n                .attr('class', $input.attr('class') )\n\n                .addClass(className.selection)\n\n                .addClass(className.dropdown)\n\n                .html( templates.dropdown(selectValues) )\n\n                .insertBefore($input)\n\n              ;\n\n              if($input.hasClass(className.multiple) && $input.prop('multiple') === false) {\n\n                module.error(error.missingMultiple);\n\n                $input.prop('multiple', true);\n\n              }\n\n              if($input.is('[multiple]')) {\n\n                module.set.multiple();\n\n              }\n\n              if ($input.prop('disabled')) {\n\n                module.debug('Disabling dropdown');\n\n                $module.addClass(className.disabled);\n\n              }\n\n              $input\n\n                .removeAttr('class')\n\n                .detach()\n\n                .prependTo($module)\n\n              ;\n\n            }\n\n            module.refresh();\n\n          },\n\n          menu: function(values) {\n\n            $menu.html( templates.menu(values, fields));\n\n            $item    = $menu.find(selector.item);\n\n            $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n          },\n\n          reference: function() {\n\n            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');\n\n            // replace module reference\n\n            $module  = $module.parent(selector.dropdown);\n\n            instance = $module.data(moduleNamespace);\n\n            element  = $module.get(0);\n\n            module.refresh();\n\n            module.setup.returnedObject();\n\n          },\n\n          returnedObject: function() {\n\n            var\n\n              $firstModules = $allModules.slice(0, elementIndex),\n\n              $lastModules  = $allModules.slice(elementIndex + 1)\n\n            ;\n\n            // adjust all modules to use correct reference\n\n            $allModules = $firstModules.add($module).add($lastModules);\n\n          }\n\n        },\n\n\n\n        refresh: function() {\n\n          module.refreshSelectors();\n\n          module.refreshData();\n\n        },\n\n\n\n        refreshItems: function() {\n\n          $item    = $menu.find(selector.item);\n\n          $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n        },\n\n\n\n        refreshSelectors: function() {\n\n          module.verbose('Refreshing selector cache');\n\n          $text   = $module.find(selector.text);\n\n          $search = $module.find(selector.search);\n\n          $input  = $module.find(selector.input);\n\n          $icon   = $module.find(selector.icon);\n\n          $combo  = ($module.prev().find(selector.text).length > 0)\n\n            ? $module.prev().find(selector.text)\n\n            : $module.prev()\n\n          ;\n\n          $menu    = $module.children(selector.menu);\n\n          $item    = $menu.find(selector.item);\n\n          $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n        },\n\n\n\n        refreshData: function() {\n\n          module.verbose('Refreshing cached metadata');\n\n          $item\n\n            .removeData(metadata.text)\n\n            .removeData(metadata.value)\n\n          ;\n\n        },\n\n\n\n        clearData: function() {\n\n          module.verbose('Clearing metadata');\n\n          $item\n\n            .removeData(metadata.text)\n\n            .removeData(metadata.value)\n\n          ;\n\n          $module\n\n            .removeData(metadata.defaultText)\n\n            .removeData(metadata.defaultValue)\n\n            .removeData(metadata.placeholderText)\n\n          ;\n\n        },\n\n\n\n        toggle: function() {\n\n          module.verbose('Toggling menu visibility');\n\n          if( !module.is.active() ) {\n\n            module.show();\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        show: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if(!module.can.show() && module.is.remote()) {\n\n            module.debug('No API results retrieved, searching before show');\n\n            module.queryRemote(module.get.query(), module.show);\n\n          }\n\n          if( module.can.show() && !module.is.active() ) {\n\n            module.debug('Showing dropdown');\n\n            if(module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered()) ) {\n\n              module.remove.message();\n\n            }\n\n            if(module.is.allFiltered()) {\n\n              return true;\n\n            }\n\n            if(settings.onShow.call(element) !== false) {\n\n              module.animate.show(function() {\n\n                if( module.can.click() ) {\n\n                  module.bind.intent();\n\n                }\n\n                if(module.has.search()) {\n\n                  module.focusSearch();\n\n                }\n\n                module.set.visible();\n\n                callback.call(element);\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        hide: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if( module.is.active() && !module.is.animatingOutward() ) {\n\n            module.debug('Hiding dropdown');\n\n            if(settings.onHide.call(element) !== false) {\n\n              module.animate.hide(function() {\n\n                module.remove.visible();\n\n                // hidding search focus\n\n                if ( module.is.focusedOnSearch() ) {\n\n                  $search.blur();\n\n                }\n\n                callback.call(element);\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        hideOthers: function() {\n\n          module.verbose('Finding other dropdowns to hide');\n\n          $allModules\n\n            .not($module)\n\n              .has(selector.menu + '.' + className.visible)\n\n                .dropdown('hide')\n\n          ;\n\n        },\n\n\n\n        hideMenu: function() {\n\n          module.verbose('Hiding menu  instantaneously');\n\n          module.remove.active();\n\n          module.remove.visible();\n\n          $menu.transition('hide');\n\n        },\n\n\n\n        hideSubMenus: function() {\n\n          var\n\n            $subMenus = $menu.children(selector.item).find(selector.menu)\n\n          ;\n\n          module.verbose('Hiding sub menus', $subMenus);\n\n          $subMenus.transition('hide');\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            if(hasTouch) {\n\n              module.bind.touchEvents();\n\n            }\n\n            module.bind.keyboardEvents();\n\n            module.bind.inputEvents();\n\n            module.bind.mouseEvents();\n\n          },\n\n          touchEvents: function() {\n\n            module.debug('Touch device detected binding additional touch events');\n\n            if( module.is.searchSelection() ) {\n\n              // do nothing special yet\n\n            }\n\n            else if( module.is.single() ) {\n\n              $module\n\n                .on('touchstart' + eventNamespace, module.event.test.toggle)\n\n              ;\n\n            }\n\n            $menu\n\n              .on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter)\n\n            ;\n\n          },\n\n          keyboardEvents: function() {\n\n            module.verbose('Binding keyboard events');\n\n            $module\n\n              .on('keydown' + eventNamespace, module.event.keydown)\n\n            ;\n\n            if( module.has.search() ) {\n\n              $module\n\n                .on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input)\n\n              ;\n\n            }\n\n            if( module.is.multiple() ) {\n\n              $document\n\n                .on('keydown' + elementNamespace, module.event.document.keydown)\n\n              ;\n\n            }\n\n          },\n\n          inputEvents: function() {\n\n            module.verbose('Binding input change events');\n\n            $module\n\n              .on('change' + eventNamespace, selector.input, module.event.change)\n\n            ;\n\n          },\n\n          mouseEvents: function() {\n\n            module.verbose('Binding mouse events');\n\n            if(module.is.multiple()) {\n\n              $module\n\n                .on('click'   + eventNamespace, selector.label,  module.event.label.click)\n\n                .on('click'   + eventNamespace, selector.remove, module.event.remove.click)\n\n              ;\n\n            }\n\n            if( module.is.searchSelection() ) {\n\n              $module\n\n                .on('mousedown' + eventNamespace, module.event.mousedown)\n\n                .on('mouseup'   + eventNamespace, module.event.mouseup)\n\n                .on('mousedown' + eventNamespace, selector.menu,   module.event.menu.mousedown)\n\n                .on('mouseup'   + eventNamespace, selector.menu,   module.event.menu.mouseup)\n\n                .on('click'     + eventNamespace, selector.icon,   module.event.icon.click)\n\n                .on('click'     + eventNamespace, selector.clearIcon, module.event.clearIcon.click)\n\n                .on('focus'     + eventNamespace, selector.search, module.event.search.focus)\n\n                .on('click'     + eventNamespace, selector.search, module.event.search.focus)\n\n                .on('blur'      + eventNamespace, selector.search, module.event.search.blur)\n\n                .on('click'     + eventNamespace, selector.text,   module.event.text.focus)\n\n              ;\n\n              if(module.is.multiple()) {\n\n                $module\n\n                  .on('click' + eventNamespace, module.event.click)\n\n                ;\n\n              }\n\n            }\n\n            else {\n\n              if(settings.on == 'click') {\n\n                $module\n\n                  .on('click' + eventNamespace, selector.icon, module.event.icon.click)\n\n                  .on('click' + eventNamespace, module.event.test.toggle)\n\n                ;\n\n              }\n\n              else if(settings.on == 'hover') {\n\n                $module\n\n                  .on('mouseenter' + eventNamespace, module.delay.show)\n\n                  .on('mouseleave' + eventNamespace, module.delay.hide)\n\n                ;\n\n              }\n\n              else {\n\n                $module\n\n                  .on(settings.on + eventNamespace, module.toggle)\n\n                ;\n\n              }\n\n              $module\n\n                .on('mousedown' + eventNamespace, module.event.mousedown)\n\n                .on('mouseup'   + eventNamespace, module.event.mouseup)\n\n                .on('focus'     + eventNamespace, module.event.focus)\n\n                .on('click'     + eventNamespace, selector.clearIcon, module.event.clearIcon.click)\n\n              ;\n\n              if(module.has.menuSearch() ) {\n\n                $module\n\n                  .on('blur' + eventNamespace, selector.search, module.event.search.blur)\n\n                ;\n\n              }\n\n              else {\n\n                $module\n\n                  .on('blur' + eventNamespace, module.event.blur)\n\n                ;\n\n              }\n\n            }\n\n            $menu\n\n              .on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter)\n\n              .on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave)\n\n              .on('click'      + eventNamespace, selector.item, module.event.item.click)\n\n            ;\n\n          },\n\n          intent: function() {\n\n            module.verbose('Binding hide intent event to document');\n\n            if(hasTouch) {\n\n              $document\n\n                .on('touchstart' + elementNamespace, module.event.test.touch)\n\n                .on('touchmove'  + elementNamespace, module.event.test.touch)\n\n              ;\n\n            }\n\n            $document\n\n              .on('click' + elementNamespace, module.event.test.hide)\n\n            ;\n\n          }\n\n        },\n\n\n\n        unbind: {\n\n          intent: function() {\n\n            module.verbose('Removing hide intent event from document');\n\n            if(hasTouch) {\n\n              $document\n\n                .off('touchstart' + elementNamespace)\n\n                .off('touchmove' + elementNamespace)\n\n              ;\n\n            }\n\n            $document\n\n              .off('click' + elementNamespace)\n\n            ;\n\n          }\n\n        },\n\n\n\n        filter: function(query) {\n\n          var\n\n            searchTerm = (query !== undefined)\n\n              ? query\n\n              : module.get.query(),\n\n            afterFiltered = function() {\n\n              if(module.is.multiple()) {\n\n                module.filterActive();\n\n              }\n\n              if(query || (!query && module.get.activeItem().length == 0)) {\n\n                module.select.firstUnfiltered();\n\n              }\n\n              if( module.has.allResultsFiltered() ) {\n\n                if( settings.onNoResults.call(element, searchTerm) ) {\n\n                  if(settings.allowAdditions) {\n\n                    if(settings.hideAdditions) {\n\n                      module.verbose('User addition with no menu, setting empty style');\n\n                      module.set.empty();\n\n                      module.hideMenu();\n\n                    }\n\n                  }\n\n                  else {\n\n                    module.verbose('All items filtered, showing message', searchTerm);\n\n                    module.add.message(message.noResults);\n\n                  }\n\n                }\n\n                else {\n\n                  module.verbose('All items filtered, hiding dropdown', searchTerm);\n\n                  module.hideMenu();\n\n                }\n\n              }\n\n              else {\n\n                module.remove.empty();\n\n                module.remove.message();\n\n              }\n\n              if(settings.allowAdditions) {\n\n                module.add.userSuggestion(query);\n\n              }\n\n              if(module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch() ) {\n\n                module.show();\n\n              }\n\n            }\n\n          ;\n\n          if(settings.useLabels && module.has.maxSelections()) {\n\n            return;\n\n          }\n\n          if(settings.apiSettings) {\n\n            if( module.can.useAPI() ) {\n\n              module.queryRemote(searchTerm, function() {\n\n                if(settings.filterRemoteData) {\n\n                  module.filterItems(searchTerm);\n\n                }\n\n                afterFiltered();\n\n              });\n\n            }\n\n            else {\n\n              module.error(error.noAPI);\n\n            }\n\n          }\n\n          else {\n\n            module.filterItems(searchTerm);\n\n            afterFiltered();\n\n          }\n\n        },\n\n\n\n        queryRemote: function(query, callback) {\n\n          var\n\n            apiSettings = {\n\n              errorDuration : false,\n\n              cache         : 'local',\n\n              throttle      : settings.throttle,\n\n              urlData       : {\n\n                query: query\n\n              },\n\n              onError: function() {\n\n                module.add.message(message.serverError);\n\n                callback();\n\n              },\n\n              onFailure: function() {\n\n                module.add.message(message.serverError);\n\n                callback();\n\n              },\n\n              onSuccess : function(response) {\n\n                var\n\n                  values          = response[fields.remoteValues],\n\n                  hasRemoteValues = ($.isArray(values) && values.length > 0)\n\n                ;\n\n                if(hasRemoteValues) {\n\n                  module.remove.message();\n\n                  module.setup.menu({\n\n                    values: response[fields.remoteValues]\n\n                  });\n\n                }\n\n                else {\n\n                  module.add.message(message.noResults);\n\n                }\n\n                callback();\n\n              }\n\n            }\n\n          ;\n\n          if( !$module.api('get request') ) {\n\n            module.setup.api();\n\n          }\n\n          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);\n\n          $module\n\n            .api('setting', apiSettings)\n\n            .api('query')\n\n          ;\n\n        },\n\n\n\n        filterItems: function(query) {\n\n          var\n\n            searchTerm = (query !== undefined)\n\n              ? query\n\n              : module.get.query(),\n\n            results          =  null,\n\n            escapedTerm      = module.escape.string(searchTerm),\n\n            beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm')\n\n          ;\n\n          // avoid loop if we're matching nothing\n\n          if( module.has.query() ) {\n\n            results = [];\n\n\n\n            module.verbose('Searching for matching values', searchTerm);\n\n            $item\n\n              .each(function(){\n\n                var\n\n                  $choice = $(this),\n\n                  text,\n\n                  value\n\n                ;\n\n                if(settings.match == 'both' || settings.match == 'text') {\n\n                  text = String(module.get.choiceText($choice, false));\n\n                  if(text.search(beginsWithRegExp) !== -1) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, text)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, text)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                }\n\n                if(settings.match == 'both' || settings.match == 'value') {\n\n                  value = String(module.get.choiceValue($choice, text));\n\n                  if(value.search(beginsWithRegExp) !== -1) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, value)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, value)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                }\n\n              })\n\n            ;\n\n          }\n\n          module.debug('Showing only matched items', searchTerm);\n\n          module.remove.filteredItem();\n\n          if(results) {\n\n            $item\n\n              .not(results)\n\n              .addClass(className.filtered)\n\n            ;\n\n          }\n\n\n\n          if(!module.has.query()) {\n\n            $divider\n\n              .removeClass(className.hidden);\n\n          } else if(settings.hideDividers === true) {\n\n            $divider\n\n              .addClass(className.hidden);\n\n          } else if(settings.hideDividers === 'empty') {\n\n            $divider\n\n              .removeClass(className.hidden)\n\n              .filter(function() {\n\n                // First find the last divider in this divider group\n\n                // Dividers which are direct siblings are considered a group\n\n                var lastDivider = $(this).nextUntil(selector.item);\n\n\n\n                return (lastDivider.length ? lastDivider : $(this))\n\n                // Count all non-filtered items until the next divider (or end of the dropdown)\n\n                  .nextUntil(selector.divider)\n\n                  .filter(selector.item + \":not(.\" + className.filtered + \")\")\n\n                  // Hide divider if no items are found\n\n                  .length === 0;\n\n              })\n\n              .addClass(className.hidden);\n\n          }\n\n        },\n\n\n\n        fuzzySearch: function(query, term) {\n\n          var\n\n            termLength  = term.length,\n\n            queryLength = query.length\n\n          ;\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(queryLength > termLength) {\n\n            return false;\n\n          }\n\n          if(queryLength === termLength) {\n\n            return (query === term);\n\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n\n            var\n\n              queryCharacter = query.charCodeAt(characterIndex)\n\n            ;\n\n            while(nextCharacterIndex < termLength) {\n\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n\n                continue search;\n\n              }\n\n            }\n\n            return false;\n\n          }\n\n          return true;\n\n        },\n\n        exactSearch: function (query, term) {\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(term.indexOf(query) > -1) {\n\n             return true;\n\n          }\n\n          return false;\n\n        },\n\n        filterActive: function() {\n\n          if(settings.useLabels) {\n\n            $item.filter('.' + className.active)\n\n              .addClass(className.filtered)\n\n            ;\n\n          }\n\n        },\n\n\n\n        focusSearch: function(skipHandler) {\n\n          if( module.has.search() && !module.is.focusedOnSearch() ) {\n\n            if(skipHandler) {\n\n              $module.off('focus' + eventNamespace, selector.search);\n\n              $search.focus();\n\n              $module.on('focus'  + eventNamespace, selector.search, module.event.search.focus);\n\n            }\n\n            else {\n\n              $search.focus();\n\n            }\n\n          }\n\n        },\n\n\n\n        blurSearch: function() {\n\n          if( module.has.search() ) {\n\n            $search.blur();\n\n          }\n\n        },\n\n\n\n        forceSelection: function() {\n\n          var\n\n            $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),\n\n            $activeItem        = $item.not(className.filtered).filter('.' + className.active).eq(0),\n\n            $selectedItem      = ($currentlySelected.length > 0)\n\n              ? $currentlySelected\n\n              : $activeItem,\n\n            hasSelected = ($selectedItem.length > 0)\n\n          ;\n\n          if(hasSelected && !module.is.multiple()) {\n\n            module.debug('Forcing partial selection to selected item', $selectedItem);\n\n            module.event.item.click.call($selectedItem, {}, true);\n\n            return;\n\n          }\n\n          else {\n\n            if(settings.allowAdditions) {\n\n              module.set.selected(module.get.query());\n\n              module.remove.searchTerm();\n\n            }\n\n            else {\n\n              module.remove.searchTerm();\n\n            }\n\n          }\n\n        },\n\n\n\n        change: {\n\n          values: function(values) {\n\n            if(!settings.allowAdditions) {\n\n              module.clear();\n\n            }\n\n            module.debug('Creating dropdown with specified values', values);\n\n            module.setup.menu({values: values});\n\n            $.each(values, function(index, item) {\n\n              if(item.selected == true) {\n\n                module.debug('Setting initial selection to', item.value);\n\n                module.set.selected(item.value);\n\n                return true;\n\n              }\n\n            });\n\n          }\n\n        },\n\n\n\n        event: {\n\n          change: function() {\n\n            if(!internalChange) {\n\n              module.debug('Input changed, updating selection');\n\n              module.set.selected();\n\n            }\n\n          },\n\n          focus: function() {\n\n            if(settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {\n\n              module.show();\n\n            }\n\n          },\n\n          blur: function(event) {\n\n            pageLostFocus = (document.activeElement === this);\n\n            if(!activated && !pageLostFocus) {\n\n              module.remove.activeLabel();\n\n              module.hide();\n\n            }\n\n          },\n\n          mousedown: function() {\n\n            if(module.is.searchSelection()) {\n\n              // prevent menu hiding on immediate re-focus\n\n              willRefocus = true;\n\n            }\n\n            else {\n\n              // prevents focus callback from occurring on mousedown\n\n              activated = true;\n\n            }\n\n          },\n\n          mouseup: function() {\n\n            if(module.is.searchSelection()) {\n\n              // prevent menu hiding on immediate re-focus\n\n              willRefocus = false;\n\n            }\n\n            else {\n\n              activated = false;\n\n            }\n\n          },\n\n          click: function(event) {\n\n            var\n\n              $target = $(event.target)\n\n            ;\n\n            // focus search\n\n            if($target.is($module)) {\n\n              if(!module.is.focusedOnSearch()) {\n\n                module.focusSearch();\n\n              }\n\n              else {\n\n                module.show();\n\n              }\n\n            }\n\n          },\n\n          search: {\n\n            focus: function() {\n\n              activated = true;\n\n              if(module.is.multiple()) {\n\n                module.remove.activeLabel();\n\n              }\n\n              if(settings.showOnFocus || event.type !== 'focus') {\n\n                module.search();\n\n              }\n\n            },\n\n            blur: function(event) {\n\n              pageLostFocus = (document.activeElement === this);\n\n              if(module.is.searchSelection() && !willRefocus) {\n\n                if(!itemActivated && !pageLostFocus) {\n\n                  if(settings.forceSelection) {\n\n                    module.forceSelection();\n\n                  }\n\n                  module.hide();\n\n                }\n\n              }\n\n              willRefocus = false;\n\n            }\n\n          },\n\n          clearIcon: {\n\n            click: function(event) {\n\n              module.clear();\n\n              if(module.is.searchSelection()) {\n\n                module.remove.searchTerm();\n\n              }\n\n              module.hide();\n\n              event.stopPropagation();\n\n            }\n\n          },\n\n          icon: {\n\n            click: function(event) {\n\n              if(module.has.search()) {\n\n                if(!module.is.active()) {\n\n                    if(settings.showOnFocus){\n\n                      module.focusSearch();\n\n                    } else {\n\n                      module.toggle();\n\n                    }\n\n                } else {\n\n                  module.blurSearch();\n\n                }\n\n              } else {\n\n                module.toggle();\n\n              }\n\n            }\n\n          },\n\n          text: {\n\n            focus: function(event) {\n\n              activated = true;\n\n              module.focusSearch();\n\n            }\n\n          },\n\n          input: function(event) {\n\n            if(module.is.multiple() || module.is.searchSelection()) {\n\n              module.set.filtered();\n\n            }\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.search, settings.delay.search);\n\n          },\n\n          label: {\n\n            click: function(event) {\n\n              var\n\n                $label        = $(this),\n\n                $labels       = $module.find(selector.label),\n\n                $activeLabels = $labels.filter('.' + className.active),\n\n                $nextActive   = $label.nextAll('.' + className.active),\n\n                $prevActive   = $label.prevAll('.' + className.active),\n\n                $range = ($nextActive.length > 0)\n\n                  ? $label.nextUntil($nextActive).add($activeLabels).add($label)\n\n                  : $label.prevUntil($prevActive).add($activeLabels).add($label)\n\n              ;\n\n              if(event.shiftKey) {\n\n                $activeLabels.removeClass(className.active);\n\n                $range.addClass(className.active);\n\n              }\n\n              else if(event.ctrlKey) {\n\n                $label.toggleClass(className.active);\n\n              }\n\n              else {\n\n                $activeLabels.removeClass(className.active);\n\n                $label.addClass(className.active);\n\n              }\n\n              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));\n\n            }\n\n          },\n\n          remove: {\n\n            click: function() {\n\n              var\n\n                $label = $(this).parent()\n\n              ;\n\n              if( $label.hasClass(className.active) ) {\n\n                // remove all selected labels\n\n                module.remove.activeLabels();\n\n              }\n\n              else {\n\n                // remove this label only\n\n                module.remove.activeLabels( $label );\n\n              }\n\n            }\n\n          },\n\n          test: {\n\n            toggle: function(event) {\n\n              var\n\n                toggleBehavior = (module.is.multiple())\n\n                  ? module.show\n\n                  : module.toggle\n\n              ;\n\n              if(module.is.bubbledLabelClick(event) || module.is.bubbledIconClick(event)) {\n\n                return;\n\n              }\n\n              if( module.determine.eventOnElement(event, toggleBehavior) ) {\n\n                event.preventDefault();\n\n              }\n\n            },\n\n            touch: function(event) {\n\n              module.determine.eventOnElement(event, function() {\n\n                if(event.type == 'touchstart') {\n\n                  module.timer = setTimeout(function() {\n\n                    module.hide();\n\n                  }, settings.delay.touch);\n\n                }\n\n                else if(event.type == 'touchmove') {\n\n                  clearTimeout(module.timer);\n\n                }\n\n              });\n\n              event.stopPropagation();\n\n            },\n\n            hide: function(event) {\n\n              if(module.determine.eventInModule(event, module.hide)){\n\n                  event.preventDefault();\n\n              }\n\n            }\n\n          },\n\n          select: {\n\n            mutation: function(mutations) {\n\n              module.debug('<select> modified, recreating menu');\n\n              if(module.is.selectMutation(mutations)) {\n\n                module.disconnect.selectObserver();\n\n                module.refresh();\n\n                module.setup.select();\n\n                module.set.selected();\n\n                module.observe.select();\n\n              }\n\n            }\n\n          },\n\n          menu: {\n\n            mutation: function(mutations) {\n\n              var\n\n                mutation   = mutations[0],\n\n                $addedNode = mutation.addedNodes\n\n                  ? $(mutation.addedNodes[0])\n\n                  : $(false),\n\n                $removedNode = mutation.removedNodes\n\n                  ? $(mutation.removedNodes[0])\n\n                  : $(false),\n\n                $changedNodes  = $addedNode.add($removedNode),\n\n                isUserAddition = $changedNodes.is(selector.addition) || $changedNodes.closest(selector.addition).length > 0,\n\n                isMessage      = $changedNodes.is(selector.message)  || $changedNodes.closest(selector.message).length > 0\n\n              ;\n\n              if(isUserAddition || isMessage) {\n\n                module.debug('Updating item selector cache');\n\n                module.refreshItems();\n\n              }\n\n              else {\n\n                module.debug('Menu modified, updating selector cache');\n\n                module.refresh();\n\n              }\n\n            },\n\n            mousedown: function() {\n\n              itemActivated = true;\n\n            },\n\n            mouseup: function() {\n\n              itemActivated = false;\n\n            }\n\n          },\n\n          item: {\n\n            mouseenter: function(event) {\n\n              var\n\n                $target        = $(event.target),\n\n                $item          = $(this),\n\n                $subMenu       = $item.children(selector.menu),\n\n                $otherMenus    = $item.siblings(selector.item).children(selector.menu),\n\n                hasSubMenu     = ($subMenu.length > 0),\n\n                isBubbledEvent = ($subMenu.find($target).length > 0)\n\n              ;\n\n              if( !isBubbledEvent && hasSubMenu ) {\n\n                clearTimeout(module.itemTimer);\n\n                module.itemTimer = setTimeout(function() {\n\n                  module.verbose('Showing sub-menu', $subMenu);\n\n                  $.each($otherMenus, function() {\n\n                    module.animate.hide(false, $(this));\n\n                  });\n\n                  module.animate.show(false, $subMenu);\n\n                }, settings.delay.show);\n\n                event.preventDefault();\n\n              }\n\n            },\n\n            mouseleave: function(event) {\n\n              var\n\n                $subMenu = $(this).children(selector.menu)\n\n              ;\n\n              if($subMenu.length > 0) {\n\n                clearTimeout(module.itemTimer);\n\n                module.itemTimer = setTimeout(function() {\n\n                  module.verbose('Hiding sub-menu', $subMenu);\n\n                  module.animate.hide(false, $subMenu);\n\n                }, settings.delay.hide);\n\n              }\n\n            },\n\n            click: function (event, skipRefocus) {\n\n              var\n\n                $choice        = $(this),\n\n                $target        = (event)\n\n                  ? $(event.target)\n\n                  : $(''),\n\n                $subMenu       = $choice.find(selector.menu),\n\n                text           = module.get.choiceText($choice),\n\n                value          = module.get.choiceValue($choice, text),\n\n                hasSubMenu     = ($subMenu.length > 0),\n\n                isBubbledEvent = ($subMenu.find($target).length > 0)\n\n              ;\n\n              // prevents IE11 bug where menu receives focus even though `tabindex=-1`\n\n              if (!module.has.search() || !document.activeElement.isEqualNode($search[0])) {\n\n                $(document.activeElement).blur();\n\n              }\n\n              if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {\n\n                if(module.is.searchSelection()) {\n\n                  if(settings.allowAdditions) {\n\n                    module.remove.userAddition();\n\n                  }\n\n                  module.remove.searchTerm();\n\n                  if(!module.is.focusedOnSearch() && !(skipRefocus == true)) {\n\n                    module.focusSearch(true);\n\n                  }\n\n                }\n\n                if(!settings.useLabels) {\n\n                  module.remove.filteredItem();\n\n                  module.set.scrollPosition($choice);\n\n                }\n\n                module.determine.selectAction.call(this, text, value);\n\n              }\n\n            }\n\n          },\n\n\n\n          document: {\n\n            // label selection should occur even when element has no focus\n\n            keydown: function(event) {\n\n              var\n\n                pressedKey    = event.which,\n\n                isShortcutKey = module.is.inObject(pressedKey, keys)\n\n              ;\n\n              if(isShortcutKey) {\n\n                var\n\n                  $label            = $module.find(selector.label),\n\n                  $activeLabel      = $label.filter('.' + className.active),\n\n                  activeValue       = $activeLabel.data(metadata.value),\n\n                  labelIndex        = $label.index($activeLabel),\n\n                  labelCount        = $label.length,\n\n                  hasActiveLabel    = ($activeLabel.length > 0),\n\n                  hasMultipleActive = ($activeLabel.length > 1),\n\n                  isFirstLabel      = (labelIndex === 0),\n\n                  isLastLabel       = (labelIndex + 1 == labelCount),\n\n                  isSearch          = module.is.searchSelection(),\n\n                  isFocusedOnSearch = module.is.focusedOnSearch(),\n\n                  isFocused         = module.is.focused(),\n\n                  caretAtStart      = (isFocusedOnSearch && module.get.caretPosition() === 0),\n\n                  $nextLabel\n\n                ;\n\n                if(isSearch && !hasActiveLabel && !isFocusedOnSearch) {\n\n                  return;\n\n                }\n\n\n\n                if(pressedKey == keys.leftArrow) {\n\n                  // activate previous label\n\n                  if((isFocused || caretAtStart) && !hasActiveLabel) {\n\n                    module.verbose('Selecting previous label');\n\n                    $label.last().addClass(className.active);\n\n                  }\n\n                  else if(hasActiveLabel) {\n\n                    if(!event.shiftKey) {\n\n                      module.verbose('Selecting previous label');\n\n                      $label.removeClass(className.active);\n\n                    }\n\n                    else {\n\n                      module.verbose('Adding previous label to selection');\n\n                    }\n\n                    if(isFirstLabel && !hasMultipleActive) {\n\n                      $activeLabel.addClass(className.active);\n\n                    }\n\n                    else {\n\n                      $activeLabel.prev(selector.siblingLabel)\n\n                        .addClass(className.active)\n\n                        .end()\n\n                      ;\n\n                    }\n\n                    event.preventDefault();\n\n                  }\n\n                }\n\n                else if(pressedKey == keys.rightArrow) {\n\n                  // activate first label\n\n                  if(isFocused && !hasActiveLabel) {\n\n                    $label.first().addClass(className.active);\n\n                  }\n\n                  // activate next label\n\n                  if(hasActiveLabel) {\n\n                    if(!event.shiftKey) {\n\n                      module.verbose('Selecting next label');\n\n                      $label.removeClass(className.active);\n\n                    }\n\n                    else {\n\n                      module.verbose('Adding next label to selection');\n\n                    }\n\n                    if(isLastLabel) {\n\n                      if(isSearch) {\n\n                        if(!isFocusedOnSearch) {\n\n                          module.focusSearch();\n\n                        }\n\n                        else {\n\n                          $label.removeClass(className.active);\n\n                        }\n\n                      }\n\n                      else if(hasMultipleActive) {\n\n                        $activeLabel.next(selector.siblingLabel).addClass(className.active);\n\n                      }\n\n                      else {\n\n                        $activeLabel.addClass(className.active);\n\n                      }\n\n                    }\n\n                    else {\n\n                      $activeLabel.next(selector.siblingLabel).addClass(className.active);\n\n                    }\n\n                    event.preventDefault();\n\n                  }\n\n                }\n\n                else if(pressedKey == keys.deleteKey || pressedKey == keys.backspace) {\n\n                  if(hasActiveLabel) {\n\n                    module.verbose('Removing active labels');\n\n                    if(isLastLabel) {\n\n                      if(isSearch && !isFocusedOnSearch) {\n\n                        module.focusSearch();\n\n                      }\n\n                    }\n\n                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);\n\n                    module.remove.activeLabels($activeLabel);\n\n                    event.preventDefault();\n\n                  }\n\n                  else if(caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {\n\n                    module.verbose('Removing last label on input backspace');\n\n                    $activeLabel = $label.last().addClass(className.active);\n\n                    module.remove.activeLabels($activeLabel);\n\n                  }\n\n                }\n\n                else {\n\n                  $activeLabel.removeClass(className.active);\n\n                }\n\n              }\n\n            }\n\n          },\n\n\n\n          keydown: function(event) {\n\n            var\n\n              pressedKey    = event.which,\n\n              isShortcutKey = module.is.inObject(pressedKey, keys)\n\n            ;\n\n            if(isShortcutKey) {\n\n              var\n\n                $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),\n\n                $activeItem        = $menu.children('.' + className.active).eq(0),\n\n                $selectedItem      = ($currentlySelected.length > 0)\n\n                  ? $currentlySelected\n\n                  : $activeItem,\n\n                $visibleItems = ($selectedItem.length > 0)\n\n                  ? $selectedItem.siblings(':not(.' + className.filtered +')').addBack()\n\n                  : $menu.children(':not(.' + className.filtered +')'),\n\n                $subMenu              = $selectedItem.children(selector.menu),\n\n                $parentMenu           = $selectedItem.closest(selector.menu),\n\n                inVisibleMenu         = ($parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0),\n\n                hasSubMenu            = ($subMenu.length> 0),\n\n                hasSelectedItem       = ($selectedItem.length > 0),\n\n                selectedIsSelectable  = ($selectedItem.not(selector.unselectable).length > 0),\n\n                delimiterPressed      = (pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple()),\n\n                isAdditionWithoutMenu = (settings.allowAdditions && settings.hideAdditions && (pressedKey == keys.enter || delimiterPressed) && selectedIsSelectable),\n\n                $nextItem,\n\n                isSubMenuItem,\n\n                newIndex\n\n              ;\n\n              // allow selection with menu closed\n\n              if(isAdditionWithoutMenu) {\n\n                module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n\n                module.event.item.click.call($selectedItem, event);\n\n                if(module.is.searchSelection()) {\n\n                  module.remove.searchTerm();\n\n                }\n\n              }\n\n\n\n              // visible menu keyboard shortcuts\n\n              if( module.is.visible() ) {\n\n\n\n                // enter (select or open sub-menu)\n\n                if(pressedKey == keys.enter || delimiterPressed) {\n\n                  if(pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {\n\n                    module.verbose('Pressed enter on unselectable category, opening sub menu');\n\n                    pressedKey = keys.rightArrow;\n\n                  }\n\n                  else if(selectedIsSelectable) {\n\n                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n\n                    module.event.item.click.call($selectedItem, event);\n\n                    if(module.is.searchSelection()) {\n\n                      module.remove.searchTerm();\n\n                      if(module.is.multiple()) {\n\n                          $search.focus();\n\n                      }\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // sub-menu actions\n\n                if(hasSelectedItem) {\n\n\n\n                  if(pressedKey == keys.leftArrow) {\n\n\n\n                    isSubMenuItem = ($parentMenu[0] !== $menu[0]);\n\n\n\n                    if(isSubMenuItem) {\n\n                      module.verbose('Left key pressed, closing sub-menu');\n\n                      module.animate.hide(false, $parentMenu);\n\n                      $selectedItem\n\n                        .removeClass(className.selected)\n\n                      ;\n\n                      $parentMenu\n\n                        .closest(selector.item)\n\n                          .addClass(className.selected)\n\n                      ;\n\n                      event.preventDefault();\n\n                    }\n\n                  }\n\n\n\n                  // right arrow (show sub-menu)\n\n                  if(pressedKey == keys.rightArrow) {\n\n                    if(hasSubMenu) {\n\n                      module.verbose('Right key pressed, opening sub-menu');\n\n                      module.animate.show(false, $subMenu);\n\n                      $selectedItem\n\n                        .removeClass(className.selected)\n\n                      ;\n\n                      $subMenu\n\n                        .find(selector.item).eq(0)\n\n                          .addClass(className.selected)\n\n                      ;\n\n                      event.preventDefault();\n\n                    }\n\n                  }\n\n                }\n\n\n\n                // up arrow (traverse menu up)\n\n                if(pressedKey == keys.upArrow) {\n\n                  $nextItem = (hasSelectedItem && inVisibleMenu)\n\n                    ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)\n\n                    : $item.eq(0)\n\n                  ;\n\n                  if($visibleItems.index( $nextItem ) < 0) {\n\n                    module.verbose('Up key pressed but reached top of current menu');\n\n                    event.preventDefault();\n\n                    return;\n\n                  }\n\n                  else {\n\n                    module.verbose('Up key pressed, changing active item');\n\n                    $selectedItem\n\n                      .removeClass(className.selected)\n\n                    ;\n\n                    $nextItem\n\n                      .addClass(className.selected)\n\n                    ;\n\n                    module.set.scrollPosition($nextItem);\n\n                    if(settings.selectOnKeydown && module.is.single()) {\n\n                      module.set.selectedItem($nextItem);\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // down arrow (traverse menu down)\n\n                if(pressedKey == keys.downArrow) {\n\n                  $nextItem = (hasSelectedItem && inVisibleMenu)\n\n                    ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)\n\n                    : $item.eq(0)\n\n                  ;\n\n                  if($nextItem.length === 0) {\n\n                    module.verbose('Down key pressed but reached bottom of current menu');\n\n                    event.preventDefault();\n\n                    return;\n\n                  }\n\n                  else {\n\n                    module.verbose('Down key pressed, changing active item');\n\n                    $item\n\n                      .removeClass(className.selected)\n\n                    ;\n\n                    $nextItem\n\n                      .addClass(className.selected)\n\n                    ;\n\n                    module.set.scrollPosition($nextItem);\n\n                    if(settings.selectOnKeydown && module.is.single()) {\n\n                      module.set.selectedItem($nextItem);\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // page down (show next page)\n\n                if(pressedKey == keys.pageUp) {\n\n                  module.scrollPage('up');\n\n                  event.preventDefault();\n\n                }\n\n                if(pressedKey == keys.pageDown) {\n\n                  module.scrollPage('down');\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // escape (close menu)\n\n                if(pressedKey == keys.escape) {\n\n                  module.verbose('Escape key pressed, closing dropdown');\n\n                  module.hide();\n\n                }\n\n\n\n              }\n\n              else {\n\n                // delimiter key\n\n                if(delimiterPressed) {\n\n                  event.preventDefault();\n\n                }\n\n                // down arrow (open menu)\n\n                if(pressedKey == keys.downArrow && !module.is.visible()) {\n\n                  module.verbose('Down key pressed, showing dropdown');\n\n                  module.show();\n\n                  event.preventDefault();\n\n                }\n\n              }\n\n            }\n\n            else {\n\n              if( !module.has.search() ) {\n\n                module.set.selectedLetter( String.fromCharCode(pressedKey) );\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        trigger: {\n\n          change: function() {\n\n            var\n\n              events       = document.createEvent('HTMLEvents'),\n\n              inputElement = $input[0]\n\n            ;\n\n            if(inputElement) {\n\n              module.verbose('Triggering native change event');\n\n              events.initEvent('change', true, false);\n\n              inputElement.dispatchEvent(events);\n\n            }\n\n          }\n\n        },\n\n\n\n        determine: {\n\n          selectAction: function(text, value) {\n\n            module.verbose('Determining action', settings.action);\n\n            if( $.isFunction( module.action[settings.action] ) ) {\n\n              module.verbose('Triggering preset action', settings.action, text, value);\n\n              module.action[ settings.action ].call(element, text, value, this);\n\n            }\n\n            else if( $.isFunction(settings.action) ) {\n\n              module.verbose('Triggering user action', settings.action, text, value);\n\n              settings.action.call(element, text, value, this);\n\n            }\n\n            else {\n\n              module.error(error.action, settings.action);\n\n            }\n\n          },\n\n          eventInModule: function(event, callback) {\n\n            var\n\n              $target    = $(event.target),\n\n              inDocument = ($target.closest(document.documentElement).length > 0),\n\n              inModule   = ($target.closest($module).length > 0)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if(inDocument && !inModule) {\n\n              module.verbose('Triggering event', callback);\n\n              callback();\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('Event occurred in dropdown, canceling callback');\n\n              return false;\n\n            }\n\n          },\n\n          eventOnElement: function(event, callback) {\n\n            var\n\n              $target      = $(event.target),\n\n              $label       = $target.closest(selector.siblingLabel),\n\n              inVisibleDOM = document.body.contains(event.target),\n\n              notOnLabel   = ($module.find($label).length === 0),\n\n              notInMenu    = ($target.closest($menu).length === 0)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if(inVisibleDOM && notOnLabel && notInMenu) {\n\n              module.verbose('Triggering event', callback);\n\n              callback();\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('Event occurred in dropdown menu, canceling callback');\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        action: {\n\n\n\n          nothing: function() {},\n\n\n\n          activate: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            if( module.can.activate( $(element) ) ) {\n\n              module.set.selected(value, $(element));\n\n              if(!module.is.multiple()) {\n\n                module.hideAndClear();\n\n              }\n\n            }\n\n          },\n\n\n\n          select: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            if( module.can.activate( $(element) ) ) {\n\n              module.set.value(value, text, $(element));\n\n              if(!module.is.multiple()) {\n\n                module.hideAndClear();\n\n              }\n\n            }\n\n          },\n\n\n\n          combo: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            module.set.selected(value, $(element));\n\n            module.hideAndClear();\n\n          },\n\n\n\n          hide: function(text, value, element) {\n\n            module.set.value(value, text, $(element));\n\n            module.hideAndClear();\n\n          }\n\n\n\n        },\n\n\n\n        get: {\n\n          id: function() {\n\n            return id;\n\n          },\n\n          defaultText: function() {\n\n            return $module.data(metadata.defaultText);\n\n          },\n\n          defaultValue: function() {\n\n            return $module.data(metadata.defaultValue);\n\n          },\n\n          placeholderText: function() {\n\n            if(settings.placeholder != 'auto' && typeof settings.placeholder == 'string') {\n\n              return settings.placeholder;\n\n            }\n\n            return $module.data(metadata.placeholderText) || '';\n\n          },\n\n          text: function() {\n\n            return $text.text();\n\n          },\n\n          query: function() {\n\n            return $.trim($search.val());\n\n          },\n\n          searchWidth: function(value) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : $search.val()\n\n            ;\n\n            $sizer.text(value);\n\n            // prevent rounding issues\n\n            return Math.ceil( $sizer.width() + 1);\n\n          },\n\n          selectionCount: function() {\n\n            var\n\n              values = module.get.values(),\n\n              count\n\n            ;\n\n            count = ( module.is.multiple() )\n\n              ? $.isArray(values)\n\n                ? values.length\n\n                : 0\n\n              : (module.get.value() !== '')\n\n                ? 1\n\n                : 0\n\n            ;\n\n            return count;\n\n          },\n\n          transition: function($subMenu) {\n\n            return (settings.transition == 'auto')\n\n              ? module.is.upward($subMenu)\n\n                ? 'slide up'\n\n                : 'slide down'\n\n              : settings.transition\n\n            ;\n\n          },\n\n          userValues: function() {\n\n            var\n\n              values = module.get.values()\n\n            ;\n\n            if(!values) {\n\n              return false;\n\n            }\n\n            values = $.isArray(values)\n\n              ? values\n\n              : [values]\n\n            ;\n\n            return $.grep(values, function(value) {\n\n              return (module.get.item(value) === false);\n\n            });\n\n          },\n\n          uniqueArray: function(array) {\n\n            return $.grep(array, function (value, index) {\n\n                return $.inArray(value, array) === index;\n\n            });\n\n          },\n\n          caretPosition: function() {\n\n            var\n\n              input = $search.get(0),\n\n              range,\n\n              rangeLength\n\n            ;\n\n            if('selectionStart' in input) {\n\n              return input.selectionStart;\n\n            }\n\n            else if (document.selection) {\n\n              input.focus();\n\n              range       = document.selection.createRange();\n\n              rangeLength = range.text.length;\n\n              range.moveStart('character', -input.value.length);\n\n              return range.text.length - rangeLength;\n\n            }\n\n          },\n\n          value: function() {\n\n            var\n\n              value = ($input.length > 0)\n\n                ? $input.val()\n\n                : $module.data(metadata.value),\n\n              isEmptyMultiselect = ($.isArray(value) && value.length === 1 && value[0] === '')\n\n            ;\n\n            // prevents placeholder element from being selected when multiple\n\n            return (value === undefined || isEmptyMultiselect)\n\n              ? ''\n\n              : value\n\n            ;\n\n          },\n\n          values: function() {\n\n            var\n\n              value = module.get.value()\n\n            ;\n\n            if(value === '') {\n\n              return '';\n\n            }\n\n            return ( !module.has.selectInput() && module.is.multiple() )\n\n              ? (typeof value == 'string') // delimited string\n\n                ? value.split(settings.delimiter)\n\n                : ''\n\n              : value\n\n            ;\n\n          },\n\n          remoteValues: function() {\n\n            var\n\n              values = module.get.values(),\n\n              remoteValues = false\n\n            ;\n\n            if(values) {\n\n              if(typeof values == 'string') {\n\n                values = [values];\n\n              }\n\n              $.each(values, function(index, value) {\n\n                var\n\n                  name = module.read.remoteData(value)\n\n                ;\n\n                module.verbose('Restoring value from session data', name, value);\n\n                if(name) {\n\n                  if(!remoteValues) {\n\n                    remoteValues = {};\n\n                  }\n\n                  remoteValues[value] = name;\n\n                }\n\n              });\n\n            }\n\n            return remoteValues;\n\n          },\n\n          choiceText: function($choice, preserveHTML) {\n\n            preserveHTML = (preserveHTML !== undefined)\n\n              ? preserveHTML\n\n              : settings.preserveHTML\n\n            ;\n\n            if($choice) {\n\n              if($choice.find(selector.menu).length > 0) {\n\n                module.verbose('Retrieving text of element with sub-menu');\n\n                $choice = $choice.clone();\n\n                $choice.find(selector.menu).remove();\n\n                $choice.find(selector.menuIcon).remove();\n\n              }\n\n              return ($choice.data(metadata.text) !== undefined)\n\n                ? $choice.data(metadata.text)\n\n                : (preserveHTML)\n\n                  ? $.trim($choice.html())\n\n                  : $.trim($choice.text())\n\n              ;\n\n            }\n\n          },\n\n          choiceValue: function($choice, choiceText) {\n\n            choiceText = choiceText || module.get.choiceText($choice);\n\n            if(!$choice) {\n\n              return false;\n\n            }\n\n            return ($choice.data(metadata.value) !== undefined)\n\n              ? String( $choice.data(metadata.value) )\n\n              : (typeof choiceText === 'string')\n\n                ? $.trim(choiceText.toLowerCase())\n\n                : String(choiceText)\n\n            ;\n\n          },\n\n          inputEvent: function() {\n\n            var\n\n              input = $search[0]\n\n            ;\n\n            if(input) {\n\n              return (input.oninput !== undefined)\n\n                ? 'input'\n\n                : (input.onpropertychange !== undefined)\n\n                  ? 'propertychange'\n\n                  : 'keyup'\n\n              ;\n\n            }\n\n            return false;\n\n          },\n\n          selectValues: function() {\n\n            var\n\n              select = {}\n\n            ;\n\n            select.values = [];\n\n            $module\n\n              .find('option')\n\n                .each(function() {\n\n                  var\n\n                    $option  = $(this),\n\n                    name     = $option.html(),\n\n                    disabled = $option.attr('disabled'),\n\n                    value    = ( $option.attr('value') !== undefined )\n\n                      ? $option.attr('value')\n\n                      : name\n\n                  ;\n\n                  if(settings.placeholder === 'auto' && value === '') {\n\n                    select.placeholder = name;\n\n                  }\n\n                  else {\n\n                    select.values.push({\n\n                      name     : name,\n\n                      value    : value,\n\n                      disabled : disabled\n\n                    });\n\n                  }\n\n                })\n\n            ;\n\n            if(settings.placeholder && settings.placeholder !== 'auto') {\n\n              module.debug('Setting placeholder value to', settings.placeholder);\n\n              select.placeholder = settings.placeholder;\n\n            }\n\n            if(settings.sortSelect) {\n\n              if(settings.sortSelect === true) {\n\n                select.values.sort(function(a, b) {\n\n                  return (a.name > b.name)\n\n                    ? 1\n\n                    : -1\n\n                    ;\n\n                });\n\n              } else if(settings.sortSelect === 'natural') {\n\n                select.values.sort(function(a, b) {\n\n                  return (a.name.toLowerCase() > b.name.toLowerCase())\n\n                    ? 1\n\n                    : -1\n\n                    ;\n\n                });\n\n              } else if($.isFunction(settings.sortSelect)) {\n\n                select.values.sort(settings.sortSelect);\n\n              }\n\n              module.debug('Retrieved and sorted values from select', select);\n\n            }\n\n            else {\n\n              module.debug('Retrieved values from select', select);\n\n            }\n\n            return select;\n\n          },\n\n          activeItem: function() {\n\n            return $item.filter('.'  + className.active);\n\n          },\n\n          selectedItem: function() {\n\n            var\n\n              $selectedItem = $item.not(selector.unselectable).filter('.'  + className.selected)\n\n            ;\n\n            return ($selectedItem.length > 0)\n\n              ? $selectedItem\n\n              : $item.eq(0)\n\n            ;\n\n          },\n\n          itemWithAdditions: function(value) {\n\n            var\n\n              $items       = module.get.item(value),\n\n              $userItems   = module.create.userChoice(value),\n\n              hasUserItems = ($userItems && $userItems.length > 0)\n\n            ;\n\n            if(hasUserItems) {\n\n              $items = ($items.length > 0)\n\n                ? $items.add($userItems)\n\n                : $userItems\n\n              ;\n\n            }\n\n            return $items;\n\n          },\n\n          item: function(value, strict) {\n\n            var\n\n              $selectedItem = false,\n\n              shouldSearch,\n\n              isMultiple\n\n            ;\n\n            value = (value !== undefined)\n\n              ? value\n\n              : ( module.get.values() !== undefined)\n\n                ? module.get.values()\n\n                : module.get.text()\n\n            ;\n\n            shouldSearch = (isMultiple)\n\n              ? (value.length > 0)\n\n              : (value !== undefined && value !== null)\n\n            ;\n\n            isMultiple = (module.is.multiple() && $.isArray(value));\n\n            strict     = (value === '' || value === 0)\n\n              ? true\n\n              : strict || false\n\n            ;\n\n            if(shouldSearch) {\n\n              $item\n\n                .each(function() {\n\n                  var\n\n                    $choice       = $(this),\n\n                    optionText    = module.get.choiceText($choice),\n\n                    optionValue   = module.get.choiceValue($choice, optionText)\n\n                  ;\n\n                  // safe early exit\n\n                  if(optionValue === null || optionValue === undefined) {\n\n                    return;\n\n                  }\n\n                  if(isMultiple) {\n\n                    if($.inArray( String(optionValue), value) !== -1) {\n\n                      $selectedItem = ($selectedItem)\n\n                        ? $selectedItem.add($choice)\n\n                        : $choice\n\n                      ;\n\n                    }\n\n                  }\n\n                  else if(strict) {\n\n                    module.verbose('Ambiguous dropdown value using strict type check', $choice, value);\n\n                    if( optionValue === value) {\n\n                      $selectedItem = $choice;\n\n                      return true;\n\n                    }\n\n                  }\n\n                  else {\n\n                    if( String(optionValue) == String(value)) {\n\n                      module.verbose('Found select item by value', optionValue, value);\n\n                      $selectedItem = $choice;\n\n                      return true;\n\n                    }\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            return $selectedItem;\n\n          }\n\n        },\n\n\n\n        check: {\n\n          maxSelections: function(selectionCount) {\n\n            if(settings.maxSelections) {\n\n              selectionCount = (selectionCount !== undefined)\n\n                ? selectionCount\n\n                : module.get.selectionCount()\n\n              ;\n\n              if(selectionCount >= settings.maxSelections) {\n\n                module.debug('Maximum selection count reached');\n\n                if(settings.useLabels) {\n\n                  $item.addClass(className.filtered);\n\n                  module.add.message(message.maxSelections);\n\n                }\n\n                return true;\n\n              }\n\n              else {\n\n                module.verbose('No longer at maximum selection count');\n\n                module.remove.message();\n\n                module.remove.filteredItem();\n\n                if(module.is.searchSelection()) {\n\n                  module.filterItems();\n\n                }\n\n                return false;\n\n              }\n\n            }\n\n            return true;\n\n          }\n\n        },\n\n\n\n        restore: {\n\n          defaults: function() {\n\n            module.clear();\n\n            module.restore.defaultText();\n\n            module.restore.defaultValue();\n\n          },\n\n          defaultText: function() {\n\n            var\n\n              defaultText     = module.get.defaultText(),\n\n              placeholderText = module.get.placeholderText\n\n            ;\n\n            if(defaultText === placeholderText) {\n\n              module.debug('Restoring default placeholder text', defaultText);\n\n              module.set.placeholderText(defaultText);\n\n            }\n\n            else {\n\n              module.debug('Restoring default text', defaultText);\n\n              module.set.text(defaultText);\n\n            }\n\n          },\n\n          placeholderText: function() {\n\n            module.set.placeholderText();\n\n          },\n\n          defaultValue: function() {\n\n            var\n\n              defaultValue = module.get.defaultValue()\n\n            ;\n\n            if(defaultValue !== undefined) {\n\n              module.debug('Restoring default value', defaultValue);\n\n              if(defaultValue !== '') {\n\n                module.set.value(defaultValue);\n\n                module.set.selected();\n\n              }\n\n              else {\n\n                module.remove.activeItem();\n\n                module.remove.selectedItem();\n\n              }\n\n            }\n\n          },\n\n          labels: function() {\n\n            if(settings.allowAdditions) {\n\n              if(!settings.useLabels) {\n\n                module.error(error.labels);\n\n                settings.useLabels = true;\n\n              }\n\n              module.debug('Restoring selected values');\n\n              module.create.userLabels();\n\n            }\n\n            module.check.maxSelections();\n\n          },\n\n          selected: function() {\n\n            module.restore.values();\n\n            if(module.is.multiple()) {\n\n              module.debug('Restoring previously selected values and labels');\n\n              module.restore.labels();\n\n            }\n\n            else {\n\n              module.debug('Restoring previously selected values');\n\n            }\n\n          },\n\n          values: function() {\n\n            // prevents callbacks from occurring on initial load\n\n            module.set.initialLoad();\n\n            if(settings.apiSettings && settings.saveRemoteData && module.get.remoteValues()) {\n\n              module.restore.remoteValues();\n\n            }\n\n            else {\n\n              module.set.selected();\n\n            }\n\n            module.remove.initialLoad();\n\n          },\n\n          remoteValues: function() {\n\n            var\n\n              values = module.get.remoteValues()\n\n            ;\n\n            module.debug('Recreating selected from session data', values);\n\n            if(values) {\n\n              if( module.is.single() ) {\n\n                $.each(values, function(value, name) {\n\n                  module.set.text(name);\n\n                });\n\n              }\n\n              else {\n\n                $.each(values, function(value, name) {\n\n                  module.add.label(value, name);\n\n                });\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        read: {\n\n          remoteData: function(value) {\n\n            var\n\n              name\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            name = sessionStorage.getItem(value);\n\n            return (name !== undefined)\n\n              ? name\n\n              : false\n\n            ;\n\n          }\n\n        },\n\n\n\n        save: {\n\n          defaults: function() {\n\n            module.save.defaultText();\n\n            module.save.placeholderText();\n\n            module.save.defaultValue();\n\n          },\n\n          defaultValue: function() {\n\n            var\n\n              value = module.get.value()\n\n            ;\n\n            module.verbose('Saving default value as', value);\n\n            $module.data(metadata.defaultValue, value);\n\n          },\n\n          defaultText: function() {\n\n            var\n\n              text = module.get.text()\n\n            ;\n\n            module.verbose('Saving default text as', text);\n\n            $module.data(metadata.defaultText, text);\n\n          },\n\n          placeholderText: function() {\n\n            var\n\n              text\n\n            ;\n\n            if(settings.placeholder !== false && $text.hasClass(className.placeholder)) {\n\n              text = module.get.text();\n\n              module.verbose('Saving placeholder text as', text);\n\n              $module.data(metadata.placeholderText, text);\n\n            }\n\n          },\n\n          remoteData: function(name, value) {\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            module.verbose('Saving remote data to session storage', value, name);\n\n            sessionStorage.setItem(value, name);\n\n          }\n\n        },\n\n\n\n        clear: function() {\n\n          if(module.is.multiple() && settings.useLabels) {\n\n            module.remove.labels();\n\n          }\n\n          else {\n\n            module.remove.activeItem();\n\n            module.remove.selectedItem();\n\n            module.remove.filteredItem();\n\n          }\n\n          module.set.placeholderText();\n\n          module.clearValue();\n\n        },\n\n\n\n        clearValue: function() {\n\n          module.set.value('');\n\n        },\n\n\n\n        scrollPage: function(direction, $selectedItem) {\n\n          var\n\n            $currentItem  = $selectedItem || module.get.selectedItem(),\n\n            $menu         = $currentItem.closest(selector.menu),\n\n            menuHeight    = $menu.outerHeight(),\n\n            currentScroll = $menu.scrollTop(),\n\n            itemHeight    = $item.eq(0).outerHeight(),\n\n            itemsPerPage  = Math.floor(menuHeight / itemHeight),\n\n            maxScroll     = $menu.prop('scrollHeight'),\n\n            newScroll     = (direction == 'up')\n\n              ? currentScroll - (itemHeight * itemsPerPage)\n\n              : currentScroll + (itemHeight * itemsPerPage),\n\n            $selectableItem = $item.not(selector.unselectable),\n\n            isWithinRange,\n\n            $nextSelectedItem,\n\n            elementIndex\n\n          ;\n\n          elementIndex      = (direction == 'up')\n\n            ? $selectableItem.index($currentItem) - itemsPerPage\n\n            : $selectableItem.index($currentItem) + itemsPerPage\n\n          ;\n\n          isWithinRange = (direction == 'up')\n\n            ? (elementIndex >= 0)\n\n            : (elementIndex < $selectableItem.length)\n\n          ;\n\n          $nextSelectedItem = (isWithinRange)\n\n            ? $selectableItem.eq(elementIndex)\n\n            : (direction == 'up')\n\n              ? $selectableItem.first()\n\n              : $selectableItem.last()\n\n          ;\n\n          if($nextSelectedItem.length > 0) {\n\n            module.debug('Scrolling page', direction, $nextSelectedItem);\n\n            $currentItem\n\n              .removeClass(className.selected)\n\n            ;\n\n            $nextSelectedItem\n\n              .addClass(className.selected)\n\n            ;\n\n            if(settings.selectOnKeydown && module.is.single()) {\n\n              module.set.selectedItem($nextSelectedItem);\n\n            }\n\n            $menu\n\n              .scrollTop(newScroll)\n\n            ;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          filtered: function() {\n\n            var\n\n              isMultiple       = module.is.multiple(),\n\n              isSearch         = module.is.searchSelection(),\n\n              isSearchMultiple = (isMultiple && isSearch),\n\n              searchValue      = (isSearch)\n\n                ? module.get.query()\n\n                : '',\n\n              hasSearchValue   = (typeof searchValue === 'string' && searchValue.length > 0),\n\n              searchWidth      = module.get.searchWidth(),\n\n              valueIsSet       = searchValue !== ''\n\n            ;\n\n            if(isMultiple && hasSearchValue) {\n\n              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);\n\n              $search.css('width', searchWidth);\n\n            }\n\n            if(hasSearchValue || (isSearchMultiple && valueIsSet)) {\n\n              module.verbose('Hiding placeholder text');\n\n              $text.addClass(className.filtered);\n\n            }\n\n            else if(!isMultiple || (isSearchMultiple && !valueIsSet)) {\n\n              module.verbose('Showing placeholder text');\n\n              $text.removeClass(className.filtered);\n\n            }\n\n          },\n\n          empty: function() {\n\n            $module.addClass(className.empty);\n\n          },\n\n          loading: function() {\n\n            $module.addClass(className.loading);\n\n          },\n\n          placeholderText: function(text) {\n\n            text = text || module.get.placeholderText();\n\n            module.debug('Setting placeholder text', text);\n\n            module.set.text(text);\n\n            $text.addClass(className.placeholder);\n\n          },\n\n          tabbable: function() {\n\n            if( module.is.searchSelection() ) {\n\n              module.debug('Added tabindex to searchable dropdown');\n\n              $search\n\n                .val('')\n\n                .attr('tabindex', 0)\n\n              ;\n\n              $menu\n\n                .attr('tabindex', -1)\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Added tabindex to dropdown');\n\n              if( $module.attr('tabindex') === undefined) {\n\n                $module\n\n                  .attr('tabindex', 0)\n\n                ;\n\n                $menu\n\n                  .attr('tabindex', -1)\n\n                ;\n\n              }\n\n            }\n\n          },\n\n          initialLoad: function() {\n\n            module.verbose('Setting initial load');\n\n            initialLoad = true;\n\n          },\n\n          activeItem: function($item) {\n\n            if( settings.allowAdditions && $item.filter(selector.addition).length > 0 ) {\n\n              $item.addClass(className.filtered);\n\n            }\n\n            else {\n\n              $item.addClass(className.active);\n\n            }\n\n          },\n\n          partialSearch: function(text) {\n\n            var\n\n              length = module.get.query().length\n\n            ;\n\n            $search.val( text.substr(0, length));\n\n          },\n\n          scrollPosition: function($item, forceScroll) {\n\n            var\n\n              edgeTolerance = 5,\n\n              $menu,\n\n              hasActive,\n\n              offset,\n\n              itemHeight,\n\n              itemOffset,\n\n              menuOffset,\n\n              menuScroll,\n\n              menuHeight,\n\n              abovePage,\n\n              belowPage\n\n            ;\n\n\n\n            $item       = $item || module.get.selectedItem();\n\n            $menu       = $item.closest(selector.menu);\n\n            hasActive   = ($item && $item.length > 0);\n\n            forceScroll = (forceScroll !== undefined)\n\n              ? forceScroll\n\n              : false\n\n            ;\n\n            if($item && $menu.length > 0 && hasActive) {\n\n              itemOffset = $item.position().top;\n\n\n\n              $menu.addClass(className.loading);\n\n              menuScroll = $menu.scrollTop();\n\n              menuOffset = $menu.offset().top;\n\n              itemOffset = $item.offset().top;\n\n              offset     = menuScroll - menuOffset + itemOffset;\n\n              if(!forceScroll) {\n\n                menuHeight = $menu.height();\n\n                belowPage  = menuScroll + menuHeight < (offset + edgeTolerance);\n\n                abovePage  = ((offset - edgeTolerance) < menuScroll);\n\n              }\n\n              module.debug('Scrolling to active item', offset);\n\n              if(forceScroll || abovePage || belowPage) {\n\n                $menu.scrollTop(offset);\n\n              }\n\n              $menu.removeClass(className.loading);\n\n            }\n\n          },\n\n          text: function(text) {\n\n            if(settings.action === 'combo') {\n\n              module.debug('Changing combo button text', text, $combo);\n\n              if(settings.preserveHTML) {\n\n                $combo.html(text);\n\n              }\n\n              else {\n\n                $combo.text(text);\n\n              }\n\n            }\n\n            else if(settings.action === 'activate') {\n\n              if(text !== module.get.placeholderText()) {\n\n                $text.removeClass(className.placeholder);\n\n              }\n\n              module.debug('Changing text', text, $text);\n\n              $text\n\n                .removeClass(className.filtered)\n\n              ;\n\n              if(settings.preserveHTML) {\n\n                $text.html(text);\n\n              }\n\n              else {\n\n                $text.text(text);\n\n              }\n\n            }\n\n          },\n\n          selectedItem: function($item) {\n\n            var\n\n              value      = module.get.choiceValue($item),\n\n              searchText = module.get.choiceText($item, false),\n\n              text       = module.get.choiceText($item, true)\n\n            ;\n\n            module.debug('Setting user selection to item', $item);\n\n            module.remove.activeItem();\n\n            module.set.partialSearch(searchText);\n\n            module.set.activeItem($item);\n\n            module.set.selected(value, $item);\n\n            module.set.text(text);\n\n          },\n\n          selectedLetter: function(letter) {\n\n            var\n\n              $selectedItem         = $item.filter('.' + className.selected),\n\n              alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),\n\n              $nextValue            = false,\n\n              $nextItem\n\n            ;\n\n            // check next of same letter\n\n            if(alreadySelectedLetter) {\n\n              $nextItem = $selectedItem.nextAll($item).eq(0);\n\n              if( module.has.firstLetter($nextItem, letter) ) {\n\n                $nextValue  = $nextItem;\n\n              }\n\n            }\n\n            // check all values\n\n            if(!$nextValue) {\n\n              $item\n\n                .each(function(){\n\n                  if(module.has.firstLetter($(this), letter)) {\n\n                    $nextValue = $(this);\n\n                    return false;\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            // set next value\n\n            if($nextValue) {\n\n              module.verbose('Scrolling to next value with letter', letter);\n\n              module.set.scrollPosition($nextValue);\n\n              $selectedItem.removeClass(className.selected);\n\n              $nextValue.addClass(className.selected);\n\n              if(settings.selectOnKeydown && module.is.single()) {\n\n                module.set.selectedItem($nextValue);\n\n              }\n\n            }\n\n          },\n\n          direction: function($menu) {\n\n            if(settings.direction == 'auto') {\n\n              // reset position\n\n              module.remove.upward();\n\n\n\n              if(module.can.openDownward($menu)) {\n\n                module.remove.upward($menu);\n\n              }\n\n              else {\n\n                module.set.upward($menu);\n\n              }\n\n              if(!module.is.leftward($menu) && !module.can.openRightward($menu)) {\n\n                module.set.leftward($menu);\n\n              }\n\n            }\n\n            else if(settings.direction == 'upward') {\n\n              module.set.upward($menu);\n\n            }\n\n          },\n\n          upward: function($currentMenu) {\n\n            var $element = $currentMenu || $module;\n\n            $element.addClass(className.upward);\n\n          },\n\n          leftward: function($currentMenu) {\n\n            var $element = $currentMenu || $menu;\n\n            $element.addClass(className.leftward);\n\n          },\n\n          value: function(value, text, $selected) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              hasInput     = ($input.length > 0),\n\n              currentValue = module.get.values(),\n\n              stringValue  = (value !== undefined)\n\n                ? String(value)\n\n                : value,\n\n              newValue\n\n            ;\n\n            if(hasInput) {\n\n              if(!settings.allowReselection && stringValue == currentValue) {\n\n                module.verbose('Skipping value update already same value', value, currentValue);\n\n                if(!module.is.initialLoad()) {\n\n                  return;\n\n                }\n\n              }\n\n\n\n              if( module.is.single() && module.has.selectInput() && module.can.extendSelect() ) {\n\n                module.debug('Adding user option', value);\n\n                module.add.optionValue(value);\n\n              }\n\n              module.debug('Updating input value', escapedValue, currentValue);\n\n              internalChange = true;\n\n              $input\n\n                .val(escapedValue)\n\n              ;\n\n              if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n                module.debug('Input native change event ignored on initial load');\n\n              }\n\n              else {\n\n                module.trigger.change();\n\n              }\n\n              internalChange = false;\n\n            }\n\n            else {\n\n              module.verbose('Storing value in metadata', escapedValue, $input);\n\n              if(escapedValue !== currentValue) {\n\n                $module.data(metadata.value, stringValue);\n\n              }\n\n            }\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('No callback on initial load', settings.onChange);\n\n            }\n\n            else {\n\n              settings.onChange.call(element, value, text, $selected);\n\n            }\n\n          },\n\n          active: function() {\n\n            $module\n\n              .addClass(className.active)\n\n            ;\n\n          },\n\n          multiple: function() {\n\n            $module.addClass(className.multiple);\n\n          },\n\n          visible: function() {\n\n            $module.addClass(className.visible);\n\n          },\n\n          exactly: function(value, $selectedItem) {\n\n            module.debug('Setting selected to exact values');\n\n            module.clear();\n\n            module.set.selected(value, $selectedItem);\n\n          },\n\n          selected: function(value, $selectedItem) {\n\n            var\n\n              isMultiple = module.is.multiple(),\n\n              $userSelectedItem\n\n            ;\n\n            $selectedItem = (settings.allowAdditions)\n\n              ? $selectedItem || module.get.itemWithAdditions(value)\n\n              : $selectedItem || module.get.item(value)\n\n            ;\n\n            if(!$selectedItem) {\n\n              return;\n\n            }\n\n            module.debug('Setting selected menu item to', $selectedItem);\n\n            if(module.is.multiple()) {\n\n              module.remove.searchWidth();\n\n            }\n\n            if(module.is.single()) {\n\n              module.remove.activeItem();\n\n              module.remove.selectedItem();\n\n            }\n\n            else if(settings.useLabels) {\n\n              module.remove.selectedItem();\n\n            }\n\n            // select each item\n\n            $selectedItem\n\n              .each(function() {\n\n                var\n\n                  $selected      = $(this),\n\n                  selectedText   = module.get.choiceText($selected),\n\n                  selectedValue  = module.get.choiceValue($selected, selectedText),\n\n\n\n                  isFiltered     = $selected.hasClass(className.filtered),\n\n                  isActive       = $selected.hasClass(className.active),\n\n                  isUserValue    = $selected.hasClass(className.addition),\n\n                  shouldAnimate  = (isMultiple && $selectedItem.length == 1)\n\n                ;\n\n                if(isMultiple) {\n\n                  if(!isActive || isUserValue) {\n\n                    if(settings.apiSettings && settings.saveRemoteData) {\n\n                      module.save.remoteData(selectedText, selectedValue);\n\n                    }\n\n                    if(settings.useLabels) {\n\n                      module.add.label(selectedValue, selectedText, shouldAnimate);\n\n                      module.add.value(selectedValue, selectedText, $selected);\n\n                      module.set.activeItem($selected);\n\n                      module.filterActive();\n\n                      module.select.nextAvailable($selectedItem);\n\n                    }\n\n                    else {\n\n                      module.add.value(selectedValue, selectedText, $selected);\n\n                      module.set.text(module.add.variables(message.count));\n\n                      module.set.activeItem($selected);\n\n                    }\n\n                  }\n\n                  else if(!isFiltered) {\n\n                    module.debug('Selected active value, removing label');\n\n                    module.remove.selected(selectedValue);\n\n                  }\n\n                }\n\n                else {\n\n                  if(settings.apiSettings && settings.saveRemoteData) {\n\n                    module.save.remoteData(selectedText, selectedValue);\n\n                  }\n\n                  module.set.text(selectedText);\n\n                  module.set.value(selectedValue, selectedText, $selected);\n\n                  $selected\n\n                    .addClass(className.active)\n\n                    .addClass(className.selected)\n\n                  ;\n\n                }\n\n              })\n\n            ;\n\n          },\n\n        },\n\n\n\n        add: {\n\n          label: function(value, text, shouldAnimate) {\n\n            var\n\n              $next  = module.is.searchSelection()\n\n                ? $search\n\n                : $text,\n\n              escapedValue = module.escape.value(value),\n\n              $label\n\n            ;\n\n            if(settings.ignoreCase) {\n\n              escapedValue = escapedValue.toLowerCase();\n\n            }\n\n            $label =  $('<a />')\n\n              .addClass(className.label)\n\n              .attr('data-' + metadata.value, escapedValue)\n\n              .html(templates.label(escapedValue, text))\n\n            ;\n\n            $label = settings.onLabelCreate.call($label, escapedValue, text);\n\n\n\n            if(module.has.label(value)) {\n\n              module.debug('User selection already exists, skipping', escapedValue);\n\n              return;\n\n            }\n\n            if(settings.label.variation) {\n\n              $label.addClass(settings.label.variation);\n\n            }\n\n            if(shouldAnimate === true) {\n\n              module.debug('Animating in label', $label);\n\n              $label\n\n                .addClass(className.hidden)\n\n                .insertBefore($next)\n\n                .transition(settings.label.transition, settings.label.duration)\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Adding selection label', $label);\n\n              $label\n\n                .insertBefore($next)\n\n              ;\n\n            }\n\n          },\n\n          message: function(message) {\n\n            var\n\n              $message = $menu.children(selector.message),\n\n              html     = settings.templates.message(module.add.variables(message))\n\n            ;\n\n            if($message.length > 0) {\n\n              $message\n\n                .html(html)\n\n              ;\n\n            }\n\n            else {\n\n              $message = $('<div/>')\n\n                .html(html)\n\n                .addClass(className.message)\n\n                .appendTo($menu)\n\n              ;\n\n            }\n\n          },\n\n          optionValue: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $option      = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n\n              hasOption    = ($option.length > 0)\n\n            ;\n\n            if(hasOption) {\n\n              return;\n\n            }\n\n            // temporarily disconnect observer\n\n            module.disconnect.selectObserver();\n\n            if( module.is.single() ) {\n\n              module.verbose('Removing previous user addition');\n\n              $input.find('option.' + className.addition).remove();\n\n            }\n\n            $('<option/>')\n\n              .prop('value', escapedValue)\n\n              .addClass(className.addition)\n\n              .html(value)\n\n              .appendTo($input)\n\n            ;\n\n            module.verbose('Adding user addition as an <option>', value);\n\n            module.observe.select();\n\n          },\n\n          userSuggestion: function(value) {\n\n            var\n\n              $addition         = $menu.children(selector.addition),\n\n              $existingItem     = module.get.item(value),\n\n              alreadyHasValue   = $existingItem && $existingItem.not(selector.addition).length,\n\n              hasUserSuggestion = $addition.length > 0,\n\n              html\n\n            ;\n\n            if(settings.useLabels && module.has.maxSelections()) {\n\n              return;\n\n            }\n\n            if(value === '' || alreadyHasValue) {\n\n              $addition.remove();\n\n              return;\n\n            }\n\n            if(hasUserSuggestion) {\n\n              $addition\n\n                .data(metadata.value, value)\n\n                .data(metadata.text, value)\n\n                .attr('data-' + metadata.value, value)\n\n                .attr('data-' + metadata.text, value)\n\n                .removeClass(className.filtered)\n\n              ;\n\n              if(!settings.hideAdditions) {\n\n                html = settings.templates.addition( module.add.variables(message.addResult, value) );\n\n                $addition\n\n                  .html(html)\n\n                ;\n\n              }\n\n              module.verbose('Replacing user suggestion with new value', $addition);\n\n            }\n\n            else {\n\n              $addition = module.create.userChoice(value);\n\n              $addition\n\n                .prependTo($menu)\n\n              ;\n\n              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);\n\n            }\n\n            if(!settings.hideAdditions || module.is.allFiltered()) {\n\n              $addition\n\n                .addClass(className.selected)\n\n                .siblings()\n\n                .removeClass(className.selected)\n\n              ;\n\n            }\n\n            module.refreshItems();\n\n          },\n\n          variables: function(message, term) {\n\n            var\n\n              hasCount    = (message.search('{count}') !== -1),\n\n              hasMaxCount = (message.search('{maxCount}') !== -1),\n\n              hasTerm     = (message.search('{term}') !== -1),\n\n              values,\n\n              count,\n\n              query\n\n            ;\n\n            module.verbose('Adding templated variables to message', message);\n\n            if(hasCount) {\n\n              count  = module.get.selectionCount();\n\n              message = message.replace('{count}', count);\n\n            }\n\n            if(hasMaxCount) {\n\n              count  = module.get.selectionCount();\n\n              message = message.replace('{maxCount}', settings.maxSelections);\n\n            }\n\n            if(hasTerm) {\n\n              query   = term || module.get.query();\n\n              message = message.replace('{term}', query);\n\n            }\n\n            return message;\n\n          },\n\n          value: function(addedValue, addedText, $selectedItem) {\n\n            var\n\n              currentValue = module.get.values(),\n\n              newValue\n\n            ;\n\n            if(module.has.value(addedValue)) {\n\n              module.debug('Value already selected');\n\n              return;\n\n            }\n\n            if(addedValue === '') {\n\n              module.debug('Cannot select blank values from multiselect');\n\n              return;\n\n            }\n\n            // extend current array\n\n            if($.isArray(currentValue)) {\n\n              newValue = currentValue.concat([addedValue]);\n\n              newValue = module.get.uniqueArray(newValue);\n\n            }\n\n            else {\n\n              newValue = [addedValue];\n\n            }\n\n            // add values\n\n            if( module.has.selectInput() ) {\n\n              if(module.can.extendSelect()) {\n\n                module.debug('Adding value to select', addedValue, newValue, $input);\n\n                module.add.optionValue(addedValue);\n\n              }\n\n            }\n\n            else {\n\n              newValue = newValue.join(settings.delimiter);\n\n              module.debug('Setting hidden input to delimited value', newValue, $input);\n\n            }\n\n\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('Skipping onadd callback on initial load', settings.onAdd);\n\n            }\n\n            else {\n\n              settings.onAdd.call(element, addedValue, addedText, $selectedItem);\n\n            }\n\n            module.set.value(newValue, addedValue, addedText, $selectedItem);\n\n            module.check.maxSelections();\n\n          },\n\n        },\n\n\n\n        remove: {\n\n          active: function() {\n\n            $module.removeClass(className.active);\n\n          },\n\n          activeLabel: function() {\n\n            $module.find(selector.label).removeClass(className.active);\n\n          },\n\n          empty: function() {\n\n            $module.removeClass(className.empty);\n\n          },\n\n          loading: function() {\n\n            $module.removeClass(className.loading);\n\n          },\n\n          initialLoad: function() {\n\n            initialLoad = false;\n\n          },\n\n          upward: function($currentMenu) {\n\n            var $element = $currentMenu || $module;\n\n            $element.removeClass(className.upward);\n\n          },\n\n          leftward: function($currentMenu) {\n\n            var $element = $currentMenu || $menu;\n\n            $element.removeClass(className.leftward);\n\n          },\n\n          visible: function() {\n\n            $module.removeClass(className.visible);\n\n          },\n\n          activeItem: function() {\n\n            $item.removeClass(className.active);\n\n          },\n\n          filteredItem: function() {\n\n            if(settings.useLabels && module.has.maxSelections() ) {\n\n              return;\n\n            }\n\n            if(settings.useLabels && module.is.multiple()) {\n\n              $item.not('.' + className.active).removeClass(className.filtered);\n\n            }\n\n            else {\n\n              $item.removeClass(className.filtered);\n\n            }\n\n            if(settings.hideDividers) {\n\n              $divider.removeClass(className.hidden);\n\n            }\n\n            module.remove.empty();\n\n          },\n\n          optionValue: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $option      = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n\n              hasOption    = ($option.length > 0)\n\n            ;\n\n            if(!hasOption || !$option.hasClass(className.addition)) {\n\n              return;\n\n            }\n\n            // temporarily disconnect observer\n\n            if(selectObserver) {\n\n              selectObserver.disconnect();\n\n              module.verbose('Temporarily disconnecting mutation observer');\n\n            }\n\n            $option.remove();\n\n            module.verbose('Removing user addition as an <option>', escapedValue);\n\n            if(selectObserver) {\n\n              selectObserver.observe($input[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          },\n\n          message: function() {\n\n            $menu.children(selector.message).remove();\n\n          },\n\n          searchWidth: function() {\n\n            $search.css('width', '');\n\n          },\n\n          searchTerm: function() {\n\n            module.verbose('Cleared search term');\n\n            $search.val('');\n\n            module.set.filtered();\n\n          },\n\n          userAddition: function() {\n\n            $item.filter(selector.addition).remove();\n\n          },\n\n          selected: function(value, $selectedItem) {\n\n            $selectedItem = (settings.allowAdditions)\n\n              ? $selectedItem || module.get.itemWithAdditions(value)\n\n              : $selectedItem || module.get.item(value)\n\n            ;\n\n\n\n            if(!$selectedItem) {\n\n              return false;\n\n            }\n\n\n\n            $selectedItem\n\n              .each(function() {\n\n                var\n\n                  $selected     = $(this),\n\n                  selectedText  = module.get.choiceText($selected),\n\n                  selectedValue = module.get.choiceValue($selected, selectedText)\n\n                ;\n\n                if(module.is.multiple()) {\n\n                  if(settings.useLabels) {\n\n                    module.remove.value(selectedValue, selectedText, $selected);\n\n                    module.remove.label(selectedValue);\n\n                  }\n\n                  else {\n\n                    module.remove.value(selectedValue, selectedText, $selected);\n\n                    if(module.get.selectionCount() === 0) {\n\n                      module.set.placeholderText();\n\n                    }\n\n                    else {\n\n                      module.set.text(module.add.variables(message.count));\n\n                    }\n\n                  }\n\n                }\n\n                else {\n\n                  module.remove.value(selectedValue, selectedText, $selected);\n\n                }\n\n                $selected\n\n                  .removeClass(className.filtered)\n\n                  .removeClass(className.active)\n\n                ;\n\n                if(settings.useLabels) {\n\n                  $selected.removeClass(className.selected);\n\n                }\n\n              })\n\n            ;\n\n          },\n\n          selectedItem: function() {\n\n            $item.removeClass(className.selected);\n\n          },\n\n          value: function(removedValue, removedText, $removedItem) {\n\n            var\n\n              values = module.get.values(),\n\n              newValue\n\n            ;\n\n            if( module.has.selectInput() ) {\n\n              module.verbose('Input is <select> removing selected option', removedValue);\n\n              newValue = module.remove.arrayValue(removedValue, values);\n\n              module.remove.optionValue(removedValue);\n\n            }\n\n            else {\n\n              module.verbose('Removing from delimited values', removedValue);\n\n              newValue = module.remove.arrayValue(removedValue, values);\n\n              newValue = newValue.join(settings.delimiter);\n\n            }\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('No callback on initial load', settings.onRemove);\n\n            }\n\n            else {\n\n              settings.onRemove.call(element, removedValue, removedText, $removedItem);\n\n            }\n\n            module.set.value(newValue, removedText, $removedItem);\n\n            module.check.maxSelections();\n\n          },\n\n          arrayValue: function(removedValue, values) {\n\n            if( !$.isArray(values) ) {\n\n              values = [values];\n\n            }\n\n            values = $.grep(values, function(value){\n\n              return (removedValue != value);\n\n            });\n\n            module.verbose('Removed value from delimited string', removedValue, values);\n\n            return values;\n\n          },\n\n          label: function(value, shouldAnimate) {\n\n            var\n\n              $labels       = $module.find(selector.label),\n\n              $removedLabel = $labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(value) +'\"]')\n\n            ;\n\n            module.verbose('Removing label', $removedLabel);\n\n            $removedLabel.remove();\n\n          },\n\n          activeLabels: function($activeLabels) {\n\n            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);\n\n            module.verbose('Removing active label selections', $activeLabels);\n\n            module.remove.labels($activeLabels);\n\n          },\n\n          labels: function($labels) {\n\n            $labels = $labels || $module.find(selector.label);\n\n            module.verbose('Removing labels', $labels);\n\n            $labels\n\n              .each(function(){\n\n                var\n\n                  $label      = $(this),\n\n                  value       = $label.data(metadata.value),\n\n                  stringValue = (value !== undefined)\n\n                    ? String(value)\n\n                    : value,\n\n                  isUserValue = module.is.userValue(stringValue)\n\n                ;\n\n                if(settings.onLabelRemove.call($label, value) === false) {\n\n                  module.debug('Label remove callback cancelled removal');\n\n                  return;\n\n                }\n\n                module.remove.message();\n\n                if(isUserValue) {\n\n                  module.remove.value(stringValue);\n\n                  module.remove.label(stringValue);\n\n                }\n\n                else {\n\n                  // selected will also remove label\n\n                  module.remove.selected(stringValue);\n\n                }\n\n              })\n\n            ;\n\n          },\n\n          tabbable: function() {\n\n            if( module.is.searchSelection() ) {\n\n              module.debug('Searchable dropdown initialized');\n\n              $search\n\n                .removeAttr('tabindex')\n\n              ;\n\n              $menu\n\n                .removeAttr('tabindex')\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Simple selection dropdown initialized');\n\n              $module\n\n                .removeAttr('tabindex')\n\n              ;\n\n              $menu\n\n                .removeAttr('tabindex')\n\n              ;\n\n            }\n\n          },\n\n        },\n\n\n\n        has: {\n\n          menuSearch: function() {\n\n            return (module.has.search() && $search.closest($menu).length > 0);\n\n          },\n\n          clearItem: function() {\n\n            return ($clear.length > 0);\n\n          },\n\n          search: function() {\n\n            return ($search.length > 0);\n\n          },\n\n          sizer: function() {\n\n            return ($sizer.length > 0);\n\n          },\n\n          selectInput: function() {\n\n            return ( $input.is('select') );\n\n          },\n\n          minCharacters: function(searchTerm) {\n\n            if(settings.minCharacters) {\n\n              searchTerm = (searchTerm !== undefined)\n\n                ? String(searchTerm)\n\n                : String(module.get.query())\n\n              ;\n\n              return (searchTerm.length >= settings.minCharacters);\n\n            }\n\n            return true;\n\n          },\n\n          firstLetter: function($item, letter) {\n\n            var\n\n              text,\n\n              firstLetter\n\n            ;\n\n            if(!$item || $item.length === 0 || typeof letter !== 'string') {\n\n              return false;\n\n            }\n\n            text        = module.get.choiceText($item, false);\n\n            letter      = letter.toLowerCase();\n\n            firstLetter = String(text).charAt(0).toLowerCase();\n\n            return (letter == firstLetter);\n\n          },\n\n          input: function() {\n\n            return ($input.length > 0);\n\n          },\n\n          items: function() {\n\n            return ($item.length > 0);\n\n          },\n\n          menu: function() {\n\n            return ($menu.length > 0);\n\n          },\n\n          message: function() {\n\n            return ($menu.children(selector.message).length !== 0);\n\n          },\n\n          label: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $labels      = $module.find(selector.label)\n\n            ;\n\n            if(settings.ignoreCase) {\n\n              escapedValue = escapedValue.toLowerCase();\n\n            }\n\n            return ($labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(escapedValue) +'\"]').length > 0);\n\n          },\n\n          maxSelections: function() {\n\n            return (settings.maxSelections && module.get.selectionCount() >= settings.maxSelections);\n\n          },\n\n          allResultsFiltered: function() {\n\n            var\n\n              $normalResults = $item.not(selector.addition)\n\n            ;\n\n            return ($normalResults.filter(selector.unselectable).length === $normalResults.length);\n\n          },\n\n          userSuggestion: function() {\n\n            return ($menu.children(selector.addition).length > 0);\n\n          },\n\n          query: function() {\n\n            return (module.get.query() !== '');\n\n          },\n\n          value: function(value) {\n\n            return (settings.ignoreCase)\n\n              ? module.has.valueIgnoringCase(value)\n\n              : module.has.valueMatchingCase(value)\n\n            ;\n\n          },\n\n          valueMatchingCase: function(value) {\n\n            var\n\n              values   = module.get.values(),\n\n              hasValue = $.isArray(values)\n\n               ? values && ($.inArray(value, values) !== -1)\n\n               : (values == value)\n\n            ;\n\n            return (hasValue)\n\n              ? true\n\n              : false\n\n            ;\n\n          },\n\n          valueIgnoringCase: function(value) {\n\n            var\n\n              values   = module.get.values(),\n\n              hasValue = false\n\n            ;\n\n            if(!$.isArray(values)) {\n\n              values = [values];\n\n            }\n\n            $.each(values, function(index, existingValue) {\n\n              if(String(value).toLowerCase() == String(existingValue).toLowerCase()) {\n\n                hasValue = true;\n\n                return false;\n\n              }\n\n            });\n\n            return hasValue;\n\n          }\n\n        },\n\n\n\n        is: {\n\n          active: function() {\n\n            return $module.hasClass(className.active);\n\n          },\n\n          animatingInward: function() {\n\n            return $menu.transition('is inward');\n\n          },\n\n          animatingOutward: function() {\n\n            return $menu.transition('is outward');\n\n          },\n\n          bubbledLabelClick: function(event) {\n\n            return $(event.target).is('select, input') && $module.closest('label').length > 0;\n\n          },\n\n          bubbledIconClick: function(event) {\n\n            return $(event.target).closest($icon).length > 0;\n\n          },\n\n          alreadySetup: function() {\n\n            return ($module.is('select') && $module.parent(selector.dropdown).data(moduleNamespace) !== undefined && $module.prev().length === 0);\n\n          },\n\n          animating: function($subMenu) {\n\n            return ($subMenu)\n\n              ? $subMenu.transition && $subMenu.transition('is animating')\n\n              : $menu.transition    && $menu.transition('is animating')\n\n            ;\n\n          },\n\n          leftward: function($subMenu) {\n\n            var $selectedMenu = $subMenu || $menu;\n\n            return $selectedMenu.hasClass(className.leftward);\n\n          },\n\n          clearable: function() {\n\n            return ($module.hasClass(className.clearable) || settings.clearable);\n\n          },\n\n          disabled: function() {\n\n            return $module.hasClass(className.disabled);\n\n          },\n\n          focused: function() {\n\n            return (document.activeElement === $module[0]);\n\n          },\n\n          focusedOnSearch: function() {\n\n            return (document.activeElement === $search[0]);\n\n          },\n\n          allFiltered: function() {\n\n            return( (module.is.multiple() || module.has.search()) && !(settings.hideAdditions == false && module.has.userSuggestion()) && !module.has.message() && module.has.allResultsFiltered() );\n\n          },\n\n          hidden: function($subMenu) {\n\n            return !module.is.visible($subMenu);\n\n          },\n\n          initialLoad: function() {\n\n            return initialLoad;\n\n          },\n\n          inObject: function(needle, object) {\n\n            var\n\n              found = false\n\n            ;\n\n            $.each(object, function(index, property) {\n\n              if(property == needle) {\n\n                found = true;\n\n                return true;\n\n              }\n\n            });\n\n            return found;\n\n          },\n\n          multiple: function() {\n\n            return $module.hasClass(className.multiple);\n\n          },\n\n          remote: function() {\n\n            return settings.apiSettings && module.can.useAPI();\n\n          },\n\n          single: function() {\n\n            return !module.is.multiple();\n\n          },\n\n          selectMutation: function(mutations) {\n\n            var\n\n              selectChanged = false\n\n            ;\n\n            $.each(mutations, function(index, mutation) {\n\n              if($(mutation.target).is('select') || $(mutation.addedNodes).is('select')) {\n\n                selectChanged = true;\n\n                return false;\n\n              }\n\n            });\n\n            return selectChanged;\n\n          },\n\n          search: function() {\n\n            return $module.hasClass(className.search);\n\n          },\n\n          searchSelection: function() {\n\n            return ( module.has.search() && $search.parent(selector.dropdown).length === 1 );\n\n          },\n\n          selection: function() {\n\n            return $module.hasClass(className.selection);\n\n          },\n\n          userValue: function(value) {\n\n            return ($.inArray(value, module.get.userValues()) !== -1);\n\n          },\n\n          upward: function($menu) {\n\n            var $element = $menu || $module;\n\n            return $element.hasClass(className.upward);\n\n          },\n\n          visible: function($subMenu) {\n\n            return ($subMenu)\n\n              ? $subMenu.hasClass(className.visible)\n\n              : $menu.hasClass(className.visible)\n\n            ;\n\n          },\n\n          verticallyScrollableContext: function() {\n\n            var\n\n              overflowY = ($context.get(0) !== window)\n\n                ? $context.css('overflow-y')\n\n                : false\n\n            ;\n\n            return (overflowY == 'auto' || overflowY == 'scroll');\n\n          },\n\n          horizontallyScrollableContext: function() {\n\n            var\n\n              overflowX = ($context.get(0) !== window)\n\n                ? $context.css('overflow-X')\n\n                : false\n\n            ;\n\n            return (overflowX == 'auto' || overflowX == 'scroll');\n\n          }\n\n        },\n\n\n\n        can: {\n\n          activate: function($item) {\n\n            if(settings.useLabels) {\n\n              return true;\n\n            }\n\n            if(!module.has.maxSelections()) {\n\n              return true;\n\n            }\n\n            if(module.has.maxSelections() && $item.hasClass(className.active)) {\n\n              return true;\n\n            }\n\n            return false;\n\n          },\n\n          openDownward: function($subMenu) {\n\n            var\n\n              $currentMenu    = $subMenu || $menu,\n\n              canOpenDownward = true,\n\n              onScreen        = {},\n\n              calculations\n\n            ;\n\n            $currentMenu\n\n              .addClass(className.loading)\n\n            ;\n\n            calculations = {\n\n              context: {\n\n                offset    : ($context.get(0) === window)\n\n                  ? { top: 0, left: 0}\n\n                  : $context.offset(),\n\n                scrollTop : $context.scrollTop(),\n\n                height    : $context.outerHeight()\n\n              },\n\n              menu : {\n\n                offset: $currentMenu.offset(),\n\n                height: $currentMenu.outerHeight()\n\n              }\n\n            };\n\n            if(module.is.verticallyScrollableContext()) {\n\n              calculations.menu.offset.top += calculations.context.scrollTop;\n\n            }\n\n            onScreen = {\n\n              above : (calculations.context.scrollTop) <= calculations.menu.offset.top - calculations.context.offset.top - calculations.menu.height,\n\n              below : (calculations.context.scrollTop + calculations.context.height) >= calculations.menu.offset.top - calculations.context.offset.top + calculations.menu.height\n\n            };\n\n            if(onScreen.below) {\n\n              module.verbose('Dropdown can fit in context downward', onScreen);\n\n              canOpenDownward = true;\n\n            }\n\n            else if(!onScreen.below && !onScreen.above) {\n\n              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);\n\n              canOpenDownward = true;\n\n            }\n\n            else {\n\n              module.verbose('Dropdown cannot fit below, opening upward', onScreen);\n\n              canOpenDownward = false;\n\n            }\n\n            $currentMenu.removeClass(className.loading);\n\n            return canOpenDownward;\n\n          },\n\n          openRightward: function($subMenu) {\n\n            var\n\n              $currentMenu     = $subMenu || $menu,\n\n              canOpenRightward = true,\n\n              isOffscreenRight = false,\n\n              calculations\n\n            ;\n\n            $currentMenu\n\n              .addClass(className.loading)\n\n            ;\n\n            calculations = {\n\n              context: {\n\n                offset     : ($context.get(0) === window)\n\n                  ? { top: 0, left: 0}\n\n                  : $context.offset(),\n\n                scrollLeft : $context.scrollLeft(),\n\n                width      : $context.outerWidth()\n\n              },\n\n              menu: {\n\n                offset : $currentMenu.offset(),\n\n                width  : $currentMenu.outerWidth()\n\n              }\n\n            };\n\n            if(module.is.horizontallyScrollableContext()) {\n\n              calculations.menu.offset.left += calculations.context.scrollLeft;\n\n            }\n\n            isOffscreenRight = (calculations.menu.offset.left - calculations.context.offset.left + calculations.menu.width >= calculations.context.scrollLeft + calculations.context.width);\n\n            if(isOffscreenRight) {\n\n              module.verbose('Dropdown cannot fit in context rightward', isOffscreenRight);\n\n              canOpenRightward = false;\n\n            }\n\n            $currentMenu.removeClass(className.loading);\n\n            return canOpenRightward;\n\n          },\n\n          click: function() {\n\n            return (hasTouch || settings.on == 'click');\n\n          },\n\n          extendSelect: function() {\n\n            return settings.allowAdditions || settings.apiSettings;\n\n          },\n\n          show: function() {\n\n            return !module.is.disabled() && (module.has.items() || module.has.message());\n\n          },\n\n          useAPI: function() {\n\n            return $.fn.api !== undefined;\n\n          }\n\n        },\n\n\n\n        animate: {\n\n          show: function(callback, $subMenu) {\n\n            var\n\n              $currentMenu = $subMenu || $menu,\n\n              start = ($subMenu)\n\n                ? function() {}\n\n                : function() {\n\n                  module.hideSubMenus();\n\n                  module.hideOthers();\n\n                  module.set.active();\n\n                },\n\n              transition\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            module.verbose('Doing menu show animation', $currentMenu);\n\n            module.set.direction($subMenu);\n\n            transition = module.get.transition($subMenu);\n\n            if( module.is.selection() ) {\n\n              module.set.scrollPosition(module.get.selectedItem(), true);\n\n            }\n\n            if( module.is.hidden($currentMenu) || module.is.animating($currentMenu) ) {\n\n              if(transition == 'none') {\n\n                start();\n\n                $currentMenu.transition('show');\n\n                callback.call(element);\n\n              }\n\n              else if($.fn.transition !== undefined && $module.transition('is supported')) {\n\n                $currentMenu\n\n                  .transition({\n\n                    animation  : transition + ' in',\n\n                    debug      : settings.debug,\n\n                    verbose    : settings.verbose,\n\n                    duration   : settings.duration,\n\n                    queue      : true,\n\n                    onStart    : start,\n\n                    onComplete : function() {\n\n                      callback.call(element);\n\n                    }\n\n                  })\n\n                ;\n\n              }\n\n              else {\n\n                module.error(error.noTransition, transition);\n\n              }\n\n            }\n\n          },\n\n          hide: function(callback, $subMenu) {\n\n            var\n\n              $currentMenu = $subMenu || $menu,\n\n              duration = ($subMenu)\n\n                ? (settings.duration * 0.9)\n\n                : settings.duration,\n\n              start = ($subMenu)\n\n                ? function() {}\n\n                : function() {\n\n                  if( module.can.click() ) {\n\n                    module.unbind.intent();\n\n                  }\n\n                  module.remove.active();\n\n                },\n\n              transition = module.get.transition($subMenu)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if( module.is.visible($currentMenu) || module.is.animating($currentMenu) ) {\n\n              module.verbose('Doing menu hide animation', $currentMenu);\n\n\n\n              if(transition == 'none') {\n\n                start();\n\n                $currentMenu.transition('hide');\n\n                callback.call(element);\n\n              }\n\n              else if($.fn.transition !== undefined && $module.transition('is supported')) {\n\n                $currentMenu\n\n                  .transition({\n\n                    animation  : transition + ' out',\n\n                    duration   : settings.duration,\n\n                    debug      : settings.debug,\n\n                    verbose    : settings.verbose,\n\n                    queue      : false,\n\n                    onStart    : start,\n\n                    onComplete : function() {\n\n                      callback.call(element);\n\n                    }\n\n                  })\n\n                ;\n\n              }\n\n              else {\n\n                module.error(error.transition);\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        hideAndClear: function() {\n\n          module.remove.searchTerm();\n\n          if( module.has.maxSelections() ) {\n\n            return;\n\n          }\n\n          if(module.has.search()) {\n\n            module.hide(function() {\n\n              module.remove.filteredItem();\n\n            });\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        delay: {\n\n          show: function() {\n\n            module.verbose('Delaying show event to ensure user intent');\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.show, settings.delay.show);\n\n          },\n\n          hide: function() {\n\n            module.verbose('Delaying hide event to ensure user intent');\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.hide, settings.delay.hide);\n\n          }\n\n        },\n\n\n\n        escape: {\n\n          value: function(value) {\n\n            var\n\n              multipleValues = $.isArray(value),\n\n              stringValue    = (typeof value === 'string'),\n\n              isUnparsable   = (!stringValue && !multipleValues),\n\n              hasQuotes      = (stringValue && value.search(regExp.quote) !== -1),\n\n              values         = []\n\n            ;\n\n            if(isUnparsable || !hasQuotes) {\n\n              return value;\n\n            }\n\n            module.debug('Encoding quote values for use in select', value);\n\n            if(multipleValues) {\n\n              $.each(value, function(index, value){\n\n                values.push(value.replace(regExp.quote, '&quot;'));\n\n              });\n\n              return values;\n\n            }\n\n            return value.replace(regExp.quote, '&quot;');\n\n          },\n\n          string: function(text) {\n\n            text =  String(text);\n\n            return text.replace(regExp.escape, '\\\\$&');\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            11731,
            12113
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.nag.settings, parameters)\n\n          : $.extend({}, $.fn.nag.settings),\n\n\n\n        className       = settings.className,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        namespace       = settings.namespace,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = namespace + '-module',\n\n\n\n        $module         = $(this),\n\n\n\n        $close          = $module.find(selector.close),\n\n        $context        = (settings.context)\n\n          ? $(settings.context)\n\n          : $('body'),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        moduleOffset,\n\n        moduleHeight,\n\n\n\n        contextWidth,\n\n        contextHeight,\n\n        contextOffset,\n\n\n\n        yOffset,\n\n        yPosition,\n\n\n\n        timer,\n\n        module,\n\n\n\n        requestAnimationFrame = window.requestAnimationFrame\n\n          || window.mozRequestAnimationFrame\n\n          || window.webkitRequestAnimationFrame\n\n          || window.msRequestAnimationFrame\n\n          || function(callback) { setTimeout(callback, 0); }\n\n      ;\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing element');\n\n\n\n          $module\n\n            .on('click' + eventNamespace, selector.close, module.dismiss)\n\n            .data(moduleNamespace, module)\n\n          ;\n\n\n\n          if(settings.detachable && $module.parent()[0] !== $context[0]) {\n\n            $module\n\n              .detach()\n\n              .prependTo($context)\n\n            ;\n\n          }\n\n\n\n          if(settings.displayTime > 0) {\n\n            setTimeout(module.hide, settings.displayTime);\n\n          }\n\n          module.show();\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying instance');\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        show: function() {\n\n          if( module.should.show() && !$module.is(':visible') ) {\n\n            module.debug('Showing nag', settings.animation.show);\n\n            if(settings.animation.show == 'fade') {\n\n              $module\n\n                .fadeIn(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            else {\n\n              $module\n\n                .slideDown(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        hide: function() {\n\n          module.debug('Showing nag', settings.animation.hide);\n\n          if(settings.animation.show == 'fade') {\n\n            $module\n\n              .fadeIn(settings.duration, settings.easing)\n\n            ;\n\n          }\n\n          else {\n\n            $module\n\n              .slideUp(settings.duration, settings.easing)\n\n            ;\n\n          }\n\n        },\n\n\n\n        onHide: function() {\n\n          module.debug('Removing nag', settings.animation.hide);\n\n          $module.remove();\n\n          if (settings.onHide) {\n\n            settings.onHide();\n\n          }\n\n        },\n\n\n\n        dismiss: function(event) {\n\n          if(settings.storageMethod) {\n\n            module.storage.set(settings.key, settings.value);\n\n          }\n\n          module.hide();\n\n          event.stopImmediatePropagation();\n\n          event.preventDefault();\n\n        },\n\n\n\n        should: {\n\n          show: function() {\n\n            if(settings.persist) {\n\n              module.debug('Persistent nag is set, can show nag');\n\n              return true;\n\n            }\n\n            if( module.storage.get(settings.key) != settings.value.toString() ) {\n\n              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));\n\n              return true;\n\n            }\n\n            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));\n\n            return false;\n\n          }\n\n        },\n\n\n\n        get: {\n\n          storageOptions: function() {\n\n            var\n\n              options = {}\n\n            ;\n\n            if(settings.expires) {\n\n              options.expires = settings.expires;\n\n            }\n\n            if(settings.domain) {\n\n              options.domain = settings.domain;\n\n            }\n\n            if(settings.path) {\n\n              options.path = settings.path;\n\n            }\n\n            return options;\n\n          }\n\n        },\n\n\n\n        clear: function() {\n\n          module.storage.remove(settings.key);\n\n        },\n\n\n\n        storage: {\n\n          set: function(key, value) {\n\n            var\n\n              options = module.get.storageOptions()\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              window.localStorage.setItem(key, value);\n\n              module.debug('Value stored using local storage', key, value);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              window.sessionStorage.setItem(key, value);\n\n              module.debug('Value stored using session storage', key, value);\n\n            }\n\n            else if($.cookie !== undefined) {\n\n              $.cookie(key, value, options);\n\n              module.debug('Value stored using cookie', key, value, options);\n\n            }\n\n            else {\n\n              module.error(error.noCookieStorage);\n\n              return;\n\n            }\n\n          },\n\n          get: function(key, value) {\n\n            var\n\n              storedValue\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              storedValue = window.localStorage.getItem(key);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              storedValue = window.sessionStorage.getItem(key);\n\n            }\n\n            // get by cookie\n\n            else if($.cookie !== undefined) {\n\n              storedValue = $.cookie(key);\n\n            }\n\n            else {\n\n              module.error(error.noCookieStorage);\n\n            }\n\n            if(storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {\n\n              storedValue = undefined;\n\n            }\n\n            return storedValue;\n\n          },\n\n          remove: function(key) {\n\n            var\n\n              options = module.get.storageOptions()\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              window.localStorage.removeItem(key);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              window.sessionStorage.removeItem(key);\n\n            }\n\n            // store by cookie\n\n            else if($.cookie !== undefined) {\n\n              $.removeCookie(key, options);\n\n            }\n\n            else {\n\n              module.error(error.noStorage);\n\n            }\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            12384,
            12391
          ],
          "match_position": [
            13,
            63
          ],
          "match_string": "            var\n\n              delay = ($.isPlainObject(settings.delay))\n\n                ? settings.delay.show\n\n                : settings.delay\n\n            ;\n\n            clearTimeout(module.hideTimer);\n\n            if(!openedWithTouch) {\n\n              module.showTimer = setTimeout(module.show, delay);"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            12395,
            12401
          ],
          "match_position": [
            13,
            61
          ],
          "match_string": "            var\n\n              delay = ($.isPlainObject(settings.delay))\n\n                ? settings.delay.hide\n\n                : settings.delay\n\n            ;\n\n            clearTimeout(module.showTimer);\n\n            module.hideTimer = setTimeout(module.hide, delay);"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            13775,
            14550
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.progress.settings, parameters)\n\n          : $.extend({}, $.fn.progress.settings),\n\n\n\n        className       = settings.className,\n\n        metadata        = settings.metadata,\n\n        namespace       = settings.namespace,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $module         = $(this),\n\n        $bar            = $(this).find(selector.bar),\n\n        $progress       = $(this).find(selector.progress),\n\n        $label          = $(this).find(selector.label),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        animating = false,\n\n        transitionEnd,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing progress bar', settings);\n\n\n\n          module.set.duration();\n\n          module.set.transitionEvent();\n\n\n\n          module.read.metadata();\n\n          module.read.settings();\n\n\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of progress', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n        destroy: function() {\n\n          module.verbose('Destroying previous progress for', $module);\n\n          clearInterval(instance.interval);\n\n          module.remove.state();\n\n          $module.removeData(moduleNamespace);\n\n          instance = undefined;\n\n        },\n\n\n\n        reset: function() {\n\n          module.remove.nextValue();\n\n          module.update.progress(0);\n\n        },\n\n\n\n        complete: function() {\n\n          if(module.percent === undefined || module.percent < 100) {\n\n            module.remove.progressPoll();\n\n            module.set.percent(100);\n\n          }\n\n        },\n\n\n\n        read: {\n\n          metadata: function() {\n\n            var\n\n              data = {\n\n                percent : $module.data(metadata.percent),\n\n                total   : $module.data(metadata.total),\n\n                value   : $module.data(metadata.value)\n\n              }\n\n            ;\n\n            if(data.percent) {\n\n              module.debug('Current percent value set from metadata', data.percent);\n\n              module.set.percent(data.percent);\n\n            }\n\n            if(data.total) {\n\n              module.debug('Total value set from metadata', data.total);\n\n              module.set.total(data.total);\n\n            }\n\n            if(data.value) {\n\n              module.debug('Current value set from metadata', data.value);\n\n              module.set.value(data.value);\n\n              module.set.progress(data.value);\n\n            }\n\n          },\n\n          settings: function() {\n\n            if(settings.total !== false) {\n\n              module.debug('Current total set in settings', settings.total);\n\n              module.set.total(settings.total);\n\n            }\n\n            if(settings.value !== false) {\n\n              module.debug('Current value set in settings', settings.value);\n\n              module.set.value(settings.value);\n\n              module.set.progress(module.value);\n\n            }\n\n            if(settings.percent !== false) {\n\n              module.debug('Current percent set in settings', settings.percent);\n\n              module.set.percent(settings.percent);\n\n            }\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          transitionEnd: function(callback) {\n\n            var\n\n              transitionEnd = module.get.transitionEnd()\n\n            ;\n\n            $bar\n\n              .one(transitionEnd + eventNamespace, function(event) {\n\n                clearTimeout(module.failSafeTimer);\n\n                callback.call(this, event);\n\n              })\n\n            ;\n\n            module.failSafeTimer = setTimeout(function() {\n\n              $bar.triggerHandler(transitionEnd);\n\n            }, settings.duration + settings.failSafeDelay);\n\n            module.verbose('Adding fail safe timer', module.timer);\n\n          }\n\n        },\n\n\n\n        increment: function(incrementValue) {\n\n          var\n\n            maxValue,\n\n            startValue,\n\n            newValue\n\n          ;\n\n          if( module.has.total() ) {\n\n            startValue     = module.get.value();\n\n            incrementValue = incrementValue || 1;\n\n            newValue       = startValue + incrementValue;\n\n          }\n\n          else {\n\n            startValue     = module.get.percent();\n\n            incrementValue = incrementValue || module.get.randomValue();\n\n\n\n            newValue       = startValue + incrementValue;\n\n            maxValue       = 100;\n\n            module.debug('Incrementing percentage by', startValue, newValue);\n\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n\n          module.set.progress(newValue);\n\n        },\n\n        decrement: function(decrementValue) {\n\n          var\n\n            total     = module.get.total(),\n\n            startValue,\n\n            newValue\n\n          ;\n\n          if(total) {\n\n            startValue     =  module.get.value();\n\n            decrementValue =  decrementValue || 1;\n\n            newValue       =  startValue - decrementValue;\n\n            module.debug('Decrementing value by', decrementValue, startValue);\n\n          }\n\n          else {\n\n            startValue     =  module.get.percent();\n\n            decrementValue =  decrementValue || module.get.randomValue();\n\n            newValue       =  startValue - decrementValue;\n\n            module.debug('Decrementing percentage by', decrementValue, startValue);\n\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n\n          module.set.progress(newValue);\n\n        },\n\n\n\n        has: {\n\n          progressPoll: function() {\n\n            return module.progressPoll;\n\n          },\n\n          total: function() {\n\n            return (module.get.total() !== false);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          text: function(templateText) {\n\n            var\n\n              value   = module.value                || 0,\n\n              total   = module.total                || 0,\n\n              percent = (animating)\n\n                ? module.get.displayPercent()\n\n                : module.percent || 0,\n\n              left = (module.total > 0)\n\n                ? (total - value)\n\n                : (100 - percent)\n\n            ;\n\n            templateText = templateText || '';\n\n            templateText = templateText\n\n              .replace('{value}', value)\n\n              .replace('{total}', total)\n\n              .replace('{left}', left)\n\n              .replace('{percent}', percent)\n\n            ;\n\n            module.verbose('Adding variables to progress bar text', templateText);\n\n            return templateText;\n\n          },\n\n\n\n          normalizedValue: function(value) {\n\n            if(value < 0) {\n\n              module.debug('Value cannot decrement below 0');\n\n              return 0;\n\n            }\n\n            if(module.has.total()) {\n\n              if(value > module.total) {\n\n                module.debug('Value cannot increment above total', module.total);\n\n                return module.total;\n\n              }\n\n            }\n\n            else if(value > 100 ) {\n\n              module.debug('Value cannot increment above 100 percent');\n\n              return 100;\n\n            }\n\n            return value;\n\n          },\n\n\n\n          updateInterval: function() {\n\n            if(settings.updateInterval == 'auto') {\n\n              return settings.duration;\n\n            }\n\n            return settings.updateInterval;\n\n          },\n\n\n\n          randomValue: function() {\n\n            module.debug('Generating random increment percentage');\n\n            return Math.floor((Math.random() * settings.random.max) + settings.random.min);\n\n          },\n\n\n\n          numericValue: function(value) {\n\n            return (typeof value === 'string')\n\n              ? (value.replace(/[^\\d.]/g, '') !== '')\n\n                ? +(value.replace(/[^\\d.]/g, ''))\n\n                : false\n\n              : value\n\n            ;\n\n          },\n\n\n\n          transitionEnd: function() {\n\n            var\n\n              element     = document.createElement('element'),\n\n              transitions = {\n\n                'transition'       :'transitionend',\n\n                'OTransition'      :'oTransitionEnd',\n\n                'MozTransition'    :'transitionend',\n\n                'WebkitTransition' :'webkitTransitionEnd'\n\n              },\n\n              transition\n\n            ;\n\n            for(transition in transitions){\n\n              if( element.style[transition] !== undefined ){\n\n                return transitions[transition];\n\n              }\n\n            }\n\n          },\n\n\n\n          // gets current displayed percentage (if animating values this is the intermediary value)\n\n          displayPercent: function() {\n\n            var\n\n              barWidth       = $bar.width(),\n\n              totalWidth     = $module.width(),\n\n              minDisplay     = parseInt($bar.css('min-width'), 10),\n\n              displayPercent = (barWidth > minDisplay)\n\n                ? (barWidth / totalWidth * 100)\n\n                : module.percent\n\n            ;\n\n            return (settings.precision > 0)\n\n              ? Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision)\n\n              : Math.round(displayPercent)\n\n            ;\n\n          },\n\n\n\n          percent: function() {\n\n            return module.percent || 0;\n\n          },\n\n          value: function() {\n\n            return module.nextValue || module.value || 0;\n\n          },\n\n          total: function() {\n\n            return module.total || false;\n\n          }\n\n        },\n\n\n\n        create: {\n\n          progressPoll: function() {\n\n            module.progressPoll = setTimeout(function() {\n\n              module.update.toNextValue();\n\n              module.remove.progressPoll();\n\n            }, module.get.updateInterval());\n\n          },\n\n        },\n\n\n\n        is: {\n\n          complete: function() {\n\n            return module.is.success() || module.is.warning() || module.is.error();\n\n          },\n\n          success: function() {\n\n            return $module.hasClass(className.success);\n\n          },\n\n          warning: function() {\n\n            return $module.hasClass(className.warning);\n\n          },\n\n          error: function() {\n\n            return $module.hasClass(className.error);\n\n          },\n\n          active: function() {\n\n            return $module.hasClass(className.active);\n\n          },\n\n          visible: function() {\n\n            return $module.is(':visible');\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          progressPoll: function() {\n\n            module.verbose('Removing progress poll timer');\n\n            if(module.progressPoll) {\n\n              clearTimeout(module.progressPoll);\n\n              delete module.progressPoll;\n\n            }\n\n          },\n\n          nextValue: function() {\n\n            module.verbose('Removing progress value stored for next update');\n\n            delete module.nextValue;\n\n          },\n\n          state: function() {\n\n            module.verbose('Removing stored state');\n\n            delete module.total;\n\n            delete module.percent;\n\n            delete module.value;\n\n          },\n\n          active: function() {\n\n            module.verbose('Removing active state');\n\n            $module.removeClass(className.active);\n\n          },\n\n          success: function() {\n\n            module.verbose('Removing success state');\n\n            $module.removeClass(className.success);\n\n          },\n\n          warning: function() {\n\n            module.verbose('Removing warning state');\n\n            $module.removeClass(className.warning);\n\n          },\n\n          error: function() {\n\n            module.verbose('Removing error state');\n\n            $module.removeClass(className.error);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          barWidth: function(value) {\n\n            if(value > 100) {\n\n              module.error(error.tooHigh, value);\n\n            }\n\n            else if (value < 0) {\n\n              module.error(error.tooLow, value);\n\n            }\n\n            else {\n\n              $bar\n\n                .css('width', value + '%')\n\n              ;\n\n              $module\n\n                .attr('data-percent', parseInt(value, 10))\n\n              ;\n\n            }\n\n          },\n\n          duration: function(duration) {\n\n            duration = duration || settings.duration;\n\n            duration = (typeof duration == 'number')\n\n              ? duration + 'ms'\n\n              : duration\n\n            ;\n\n            module.verbose('Setting progress bar transition duration', duration);\n\n            $bar\n\n              .css({\n\n                'transition-duration':  duration\n\n              })\n\n            ;\n\n          },\n\n          percent: function(percent) {\n\n            percent = (typeof percent == 'string')\n\n              ? +(percent.replace('%', ''))\n\n              : percent\n\n            ;\n\n            // round display percentage\n\n            percent = (settings.precision > 0)\n\n              ? Math.round(percent * (10 * settings.precision)) / (10 * settings.precision)\n\n              : Math.round(percent)\n\n            ;\n\n            module.percent = percent;\n\n            if( !module.has.total() ) {\n\n              module.value = (settings.precision > 0)\n\n                ? Math.round( (percent / 100) * module.total * (10 * settings.precision)) / (10 * settings.precision)\n\n                : Math.round( (percent / 100) * module.total * 10) / 10\n\n              ;\n\n              if(settings.limitValues) {\n\n                module.value = (module.value > 100)\n\n                  ? 100\n\n                  : (module.value < 0)\n\n                    ? 0\n\n                    : module.value\n\n                ;\n\n              }\n\n            }\n\n            module.set.barWidth(percent);\n\n            module.set.labelInterval();\n\n            module.set.labels();\n\n            settings.onChange.call(element, percent, module.value, module.total);\n\n          },\n\n          labelInterval: function() {\n\n            var\n\n              animationCallback = function() {\n\n                module.verbose('Bar finished animating, removing continuous label updates');\n\n                clearInterval(module.interval);\n\n                animating = false;\n\n                module.set.labels();\n\n              }\n\n            ;\n\n            clearInterval(module.interval);\n\n            module.bind.transitionEnd(animationCallback);\n\n            animating = true;\n\n            module.interval = setInterval(function() {\n\n              var\n\n                isInDOM = $.contains(document.documentElement, element)\n\n              ;\n\n              if(!isInDOM) {\n\n                clearInterval(module.interval);\n\n                animating = false;\n\n              }\n\n              module.set.labels();\n\n            }, settings.framerate);\n\n          },\n\n          labels: function() {\n\n            module.verbose('Setting both bar progress and outer label text');\n\n            module.set.barLabel();\n\n            module.set.state();\n\n          },\n\n          label: function(text) {\n\n            text = text || '';\n\n            if(text) {\n\n              text = module.get.text(text);\n\n              module.verbose('Setting label to text', text);\n\n              $label.text(text);\n\n            }\n\n          },\n\n          state: function(percent) {\n\n            percent = (percent !== undefined)\n\n              ? percent\n\n              : module.percent\n\n            ;\n\n            if(percent === 100) {\n\n              if(settings.autoSuccess && !(module.is.warning() || module.is.error() || module.is.success())) {\n\n                module.set.success();\n\n                module.debug('Automatically triggering success at 100%');\n\n              }\n\n              else {\n\n                module.verbose('Reached 100% removing active state');\n\n                module.remove.active();\n\n                module.remove.progressPoll();\n\n              }\n\n            }\n\n            else if(percent > 0) {\n\n              module.verbose('Adjusting active progress bar label', percent);\n\n              module.set.active();\n\n            }\n\n            else {\n\n              module.remove.active();\n\n              module.set.label(settings.text.active);\n\n            }\n\n          },\n\n          barLabel: function(text) {\n\n            if(text !== undefined) {\n\n              $progress.text( module.get.text(text) );\n\n            }\n\n            else if(settings.label == 'ratio' && module.total) {\n\n              module.verbose('Adding ratio to bar label');\n\n              $progress.text( module.get.text(settings.text.ratio) );\n\n            }\n\n            else if(settings.label == 'percent') {\n\n              module.verbose('Adding percentage to bar label');\n\n              $progress.text( module.get.text(settings.text.percent) );\n\n            }\n\n          },\n\n          active: function(text) {\n\n            text = text || settings.text.active;\n\n            module.debug('Setting active state');\n\n            if(settings.showActivity && !module.is.active() ) {\n\n              $module.addClass(className.active);\n\n            }\n\n            module.remove.warning();\n\n            module.remove.error();\n\n            module.remove.success();\n\n            text = settings.onLabelUpdate('active', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onActive.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          success : function(text) {\n\n            text = text || settings.text.success || settings.text.active;\n\n            module.debug('Setting success state');\n\n            $module.addClass(className.success);\n\n            module.remove.active();\n\n            module.remove.warning();\n\n            module.remove.error();\n\n            module.complete();\n\n            if(settings.text.success) {\n\n              text = settings.onLabelUpdate('success', text, module.value, module.total);\n\n              module.set.label(text);\n\n            }\n\n            else {\n\n              text = settings.onLabelUpdate('active', text, module.value, module.total);\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onSuccess.call(element, module.total);\n\n            });\n\n          },\n\n          warning : function(text) {\n\n            text = text || settings.text.warning;\n\n            module.debug('Setting warning state');\n\n            $module.addClass(className.warning);\n\n            module.remove.active();\n\n            module.remove.success();\n\n            module.remove.error();\n\n            module.complete();\n\n            text = settings.onLabelUpdate('warning', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onWarning.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          error : function(text) {\n\n            text = text || settings.text.error;\n\n            module.debug('Setting error state');\n\n            $module.addClass(className.error);\n\n            module.remove.active();\n\n            module.remove.success();\n\n            module.remove.warning();\n\n            module.complete();\n\n            text = settings.onLabelUpdate('error', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onError.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          transitionEvent: function() {\n\n            transitionEnd = module.get.transitionEnd();\n\n          },\n\n          total: function(totalValue) {\n\n            module.total = totalValue;\n\n          },\n\n          value: function(value) {\n\n            module.value = value;\n\n          },\n\n          progress: function(value) {\n\n            if(!module.has.progressPoll()) {\n\n              module.debug('First update in progress update interval, immediately updating', value);\n\n              module.update.progress(value);\n\n              module.create.progressPoll();\n\n            }\n\n            else {\n\n              module.debug('Updated within interval, setting next update to use new value', value);\n\n              module.set.nextValue(value);\n\n            }\n\n          },\n\n          nextValue: function(value) {\n\n            module.nextValue = value;\n\n          }\n\n        },\n\n\n\n        update: {\n\n          toNextValue: function() {\n\n            var\n\n              nextValue = module.nextValue\n\n            ;\n\n            if(nextValue) {\n\n              module.debug('Update interval complete using last updated value', nextValue);\n\n              module.update.progress(nextValue);\n\n              module.remove.nextValue();\n\n            }\n\n          },\n\n          progress: function(value) {\n\n            var\n\n              percentComplete\n\n            ;\n\n            value = module.get.numericValue(value);\n\n            if(value === false) {\n\n              module.error(error.nonNumeric, value);\n\n            }\n\n            value = module.get.normalizedValue(value);\n\n            if( module.has.total() ) {\n\n              module.set.value(value);\n\n              percentComplete = (value / module.total) * 100;\n\n              module.debug('Calculating percent complete from total', percentComplete);\n\n              module.set.percent( percentComplete );\n\n            }\n\n            else {\n\n              percentComplete = value;\n\n              module.debug('Setting value to exact percentage value', percentComplete);\n\n              module.set.percent( percentComplete );\n\n            }\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            15487,
            16641
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.search.settings, parameters)\n\n          : $.extend({}, $.fn.search.settings),\n\n\n\n        className        = settings.className,\n\n        metadata         = settings.metadata,\n\n        regExp           = settings.regExp,\n\n        fields           = settings.fields,\n\n        selector         = settings.selector,\n\n        error            = settings.error,\n\n        namespace        = settings.namespace,\n\n\n\n        eventNamespace   = '.' + namespace,\n\n        moduleNamespace  = namespace + '-module',\n\n\n\n        $module          = $(this),\n\n        $prompt          = $module.find(selector.prompt),\n\n        $searchButton    = $module.find(selector.searchButton),\n\n        $results         = $module.find(selector.results),\n\n        $result          = $module.find(selector.result),\n\n        $category        = $module.find(selector.category),\n\n\n\n        element          = this,\n\n        instance         = $module.data(moduleNamespace),\n\n\n\n        disabledBubbled  = false,\n\n        resultsDismissed = false,\n\n\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing module');\n\n          module.get.settings();\n\n          module.determine.searchFields();\n\n          module.bind.events();\n\n          module.set.type();\n\n          module.create.results();\n\n          module.instantiate();\n\n        },\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n        destroy: function() {\n\n          module.verbose('Destroying instance');\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n        },\n\n\n\n        refresh: function() {\n\n          module.debug('Refreshing selector cache');\n\n          $prompt         = $module.find(selector.prompt);\n\n          $searchButton   = $module.find(selector.searchButton);\n\n          $category       = $module.find(selector.category);\n\n          $results        = $module.find(selector.results);\n\n          $result         = $module.find(selector.result);\n\n        },\n\n\n\n        refreshResults: function() {\n\n          $results = $module.find(selector.results);\n\n          $result  = $module.find(selector.result);\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.verbose('Binding events to search');\n\n            if(settings.automatic) {\n\n              $module\n\n                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)\n\n              ;\n\n              $prompt\n\n                .attr('autocomplete', 'off')\n\n              ;\n\n            }\n\n            $module\n\n              // prompt\n\n              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)\n\n              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)\n\n              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)\n\n              // search button\n\n              .on('click'     + eventNamespace, selector.searchButton, module.query)\n\n              // results\n\n              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)\n\n              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)\n\n              .on('click'     + eventNamespace, selector.result,  module.event.result.click)\n\n            ;\n\n          }\n\n        },\n\n\n\n        determine: {\n\n          searchFields: function() {\n\n            // this makes sure $.extend does not add specified search fields to default fields\n\n            // this is the only setting which should not extend defaults\n\n            if(parameters && parameters.searchFields !== undefined) {\n\n              settings.searchFields = parameters.searchFields;\n\n            }\n\n          }\n\n        },\n\n\n\n        event: {\n\n          input: function() {\n\n            if(settings.searchDelay) {\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.is.focused()) {\n\n                  module.query();\n\n                }\n\n              }, settings.searchDelay);\n\n            }\n\n            else {\n\n              module.query();\n\n            }\n\n          },\n\n          focus: function() {\n\n            module.set.focus();\n\n            if(settings.searchOnFocus && module.has.minimumCharacters() ) {\n\n              module.query(function() {\n\n                if(module.can.show() ) {\n\n                  module.showResults();\n\n                }\n\n              });\n\n            }\n\n          },\n\n          blur: function(event) {\n\n            var\n\n              pageLostFocus = (document.activeElement === this),\n\n              callback      = function() {\n\n                module.cancel.query();\n\n                module.remove.focus();\n\n                module.timer = setTimeout(module.hideResults, settings.hideDelay);\n\n              }\n\n            ;\n\n            if(pageLostFocus) {\n\n              return;\n\n            }\n\n            resultsDismissed = false;\n\n            if(module.resultsClicked) {\n\n              module.debug('Determining if user action caused search to close');\n\n              $module\n\n                .one('click.close' + eventNamespace, selector.results, function(event) {\n\n                  if(module.is.inMessage(event) || disabledBubbled) {\n\n                    $prompt.focus();\n\n                    return;\n\n                  }\n\n                  disabledBubbled = false;\n\n                  if( !module.is.animating() && !module.is.hidden()) {\n\n                    callback();\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Input blurred without user action, closing results');\n\n              callback();\n\n            }\n\n          },\n\n          result: {\n\n            mousedown: function() {\n\n              module.resultsClicked = true;\n\n            },\n\n            mouseup: function() {\n\n              module.resultsClicked = false;\n\n            },\n\n            click: function(event) {\n\n              module.debug('Search result selected');\n\n              var\n\n                $result = $(this),\n\n                $title  = $result.find(selector.title).eq(0),\n\n                $link   = $result.is('a[href]')\n\n                  ? $result\n\n                  : $result.find('a[href]').eq(0),\n\n                href    = $link.attr('href')   || false,\n\n                target  = $link.attr('target') || false,\n\n                title   = $title.html(),\n\n                // title is used for result lookup\n\n                value   = ($title.length > 0)\n\n                  ? $title.text()\n\n                  : false,\n\n                results = module.get.results(),\n\n                result  = $result.data(metadata.result) || module.get.result(value, results),\n\n                returnedValue\n\n              ;\n\n              if(value) {\n\n                module.set.value(value);\n\n              }\n\n              if( $.isFunction(settings.onSelect) ) {\n\n                if(settings.onSelect.call(element, result, results) === false) {\n\n                  module.debug('Custom onSelect callback cancelled default select action');\n\n                  disabledBubbled = true;\n\n                  return;\n\n                }\n\n              }\n\n              module.hideResults();\n\n              if(href) {\n\n                module.verbose('Opening search link found in result', $link);\n\n                if(target == '_blank' || event.ctrlKey) {\n\n                  window.open(href);\n\n                }\n\n                else {\n\n                  window.location.href = (href);\n\n                }\n\n              }\n\n            }\n\n          }\n\n        },\n\n        handleKeyboard: function(event) {\n\n          var\n\n            // force selector refresh\n\n            $result         = $module.find(selector.result),\n\n            $category       = $module.find(selector.category),\n\n            $activeResult   = $result.filter('.' + className.active),\n\n            currentIndex    = $result.index( $activeResult ),\n\n            resultSize      = $result.length,\n\n            hasActiveResult = $activeResult.length > 0,\n\n\n\n            keyCode         = event.which,\n\n            keys            = {\n\n              backspace : 8,\n\n              enter     : 13,\n\n              escape    : 27,\n\n              upArrow   : 38,\n\n              downArrow : 40\n\n            },\n\n            newIndex\n\n          ;\n\n          // search shortcuts\n\n          if(keyCode == keys.escape) {\n\n            module.verbose('Escape key pressed, blurring search field');\n\n            module.hideResults();\n\n            resultsDismissed = true;\n\n          }\n\n          if( module.is.visible() ) {\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, selecting active result');\n\n              if( $result.filter('.' + className.active).length > 0 ) {\n\n                module.event.result.click.call($result.filter('.' + className.active), event);\n\n                event.preventDefault();\n\n                return false;\n\n              }\n\n            }\n\n            else if(keyCode == keys.upArrow && hasActiveResult) {\n\n              module.verbose('Up key pressed, changing active result');\n\n              newIndex = (currentIndex - 1 < 0)\n\n                ? currentIndex\n\n                : currentIndex - 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n            else if(keyCode == keys.downArrow) {\n\n              module.verbose('Down key pressed, changing active result');\n\n              newIndex = (currentIndex + 1 >= resultSize)\n\n                ? currentIndex\n\n                : currentIndex + 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n          }\n\n          else {\n\n            // query shortcuts\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, executing query');\n\n              module.query();\n\n              module.set.buttonPressed();\n\n              $prompt.one('keyup', module.remove.buttonFocus);\n\n            }\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          api: function(searchTerm, callback) {\n\n            var\n\n              apiSettings = {\n\n                debug             : settings.debug,\n\n                on                : false,\n\n                cache             : settings.cache,\n\n                action            : 'search',\n\n                urlData           : {\n\n                  query : searchTerm\n\n                },\n\n                onSuccess         : function(response) {\n\n                  module.parse.response.call(element, response, searchTerm);\n\n                  callback();\n\n                },\n\n                onFailure         : function() {\n\n                  module.displayMessage(error.serverError);\n\n                  callback();\n\n                },\n\n                onAbort : function(response) {\n\n                },\n\n                onError           : module.error\n\n              },\n\n              searchHTML\n\n            ;\n\n            $.extend(true, apiSettings, settings.apiSettings);\n\n            module.verbose('Setting up API request', apiSettings);\n\n            $module.api(apiSettings);\n\n          }\n\n        },\n\n\n\n        can: {\n\n          useAPI: function() {\n\n            return $.fn.api !== undefined;\n\n          },\n\n          show: function() {\n\n            return module.is.focused() && !module.is.visible() && !module.is.empty();\n\n          },\n\n          transition: function() {\n\n            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');\n\n          }\n\n        },\n\n\n\n        is: {\n\n          animating: function() {\n\n            return $results.hasClass(className.animating);\n\n          },\n\n          hidden: function() {\n\n            return $results.hasClass(className.hidden);\n\n          },\n\n          inMessage: function(event) {\n\n            if(!event.target) {\n\n              return;\n\n            }\n\n            var\n\n              $target = $(event.target),\n\n              isInDOM = $.contains(document.documentElement, event.target)\n\n            ;\n\n            return (isInDOM && $target.closest(selector.message).length > 0);\n\n          },\n\n          empty: function() {\n\n            return ($results.html() === '');\n\n          },\n\n          visible: function() {\n\n            return ($results.filter(':visible').length > 0);\n\n          },\n\n          focused: function() {\n\n            return ($prompt.filter(':focus').length > 0);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          settings: function() {\n\n            if($.isPlainObject(parameters) && parameters.searchFullText) {\n\n              settings.fullTextSearch = parameters.searchFullText;\n\n              module.error(settings.error.oldSearchSyntax, element);\n\n            }\n\n          },\n\n          inputEvent: function() {\n\n            var\n\n              prompt = $prompt[0],\n\n              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)\n\n                ? 'input'\n\n                : (prompt !== undefined && prompt.onpropertychange !== undefined)\n\n                  ? 'propertychange'\n\n                  : 'keyup'\n\n            ;\n\n            return inputEvent;\n\n          },\n\n          value: function() {\n\n            return $prompt.val();\n\n          },\n\n          results: function() {\n\n            var\n\n              results = $module.data(metadata.results)\n\n            ;\n\n            return results;\n\n          },\n\n          result: function(value, results) {\n\n            var\n\n              lookupFields = ['title', 'id'],\n\n              result       = false\n\n            ;\n\n            value = (value !== undefined)\n\n              ? value\n\n              : module.get.value()\n\n            ;\n\n            results = (results !== undefined)\n\n              ? results\n\n              : module.get.results()\n\n            ;\n\n            if(settings.type === 'category') {\n\n              module.debug('Finding result that matches', value);\n\n              $.each(results, function(index, category) {\n\n                if($.isArray(category.results)) {\n\n                  result = module.search.object(value, category.results, lookupFields)[0];\n\n                  // don't continue searching if a result is found\n\n                  if(result) {\n\n                    return false;\n\n                  }\n\n                }\n\n              });\n\n            }\n\n            else {\n\n              module.debug('Finding result in results object', value);\n\n              result = module.search.object(value, results, lookupFields)[0];\n\n            }\n\n            return result || false;\n\n          },\n\n        },\n\n\n\n        select: {\n\n          firstResult: function() {\n\n            module.verbose('Selecting first result');\n\n            $result.first().addClass(className.active);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          focus: function() {\n\n            $module.addClass(className.focus);\n\n          },\n\n          loading: function() {\n\n            $module.addClass(className.loading);\n\n          },\n\n          value: function(value) {\n\n            module.verbose('Setting search input value', value);\n\n            $prompt\n\n              .val(value)\n\n            ;\n\n          },\n\n          type: function(type) {\n\n            type = type || settings.type;\n\n            if(settings.type == 'category') {\n\n              $module.addClass(settings.type);\n\n            }\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.addClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          loading: function() {\n\n            $module.removeClass(className.loading);\n\n          },\n\n          focus: function() {\n\n            $module.removeClass(className.focus);\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.removeClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        query: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          var\n\n            searchTerm = module.get.value(),\n\n            cache = module.read.cache(searchTerm)\n\n          ;\n\n          callback = callback || function() {};\n\n          if( module.has.minimumCharacters() )  {\n\n            if(cache) {\n\n              module.debug('Reading result from cache', searchTerm);\n\n              module.save.results(cache.results);\n\n              module.addResults(cache.html);\n\n              module.inject.id(cache.results);\n\n              callback();\n\n            }\n\n            else {\n\n              module.debug('Querying for', searchTerm);\n\n              if($.isPlainObject(settings.source) || $.isArray(settings.source)) {\n\n                module.search.local(searchTerm);\n\n                callback();\n\n              }\n\n              else if( module.can.useAPI() ) {\n\n                module.search.remote(searchTerm, callback);\n\n              }\n\n              else {\n\n                module.error(error.source);\n\n                callback();\n\n              }\n\n            }\n\n            settings.onSearchQuery.call(element, searchTerm);\n\n          }\n\n          else {\n\n            module.hideResults();\n\n          }\n\n        },\n\n\n\n        search: {\n\n          local: function(searchTerm) {\n\n            var\n\n              results = module.search.object(searchTerm, settings.content),\n\n              searchHTML\n\n            ;\n\n            module.set.loading();\n\n            module.save.results(results);\n\n            module.debug('Returned full local search results', results);\n\n            if(settings.maxResults > 0) {\n\n              module.debug('Using specified max results', results);\n\n              results = results.slice(0, settings.maxResults);\n\n            }\n\n            if(settings.type == 'category') {\n\n              results = module.create.categoryResults(results);\n\n            }\n\n            searchHTML = module.generateResults({\n\n              results: results\n\n            });\n\n            module.remove.loading();\n\n            module.addResults(searchHTML);\n\n            module.inject.id(results);\n\n            module.write.cache(searchTerm, {\n\n              html    : searchHTML,\n\n              results : results\n\n            });\n\n          },\n\n          remote: function(searchTerm, callback) {\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if($module.api('is loading')) {\n\n              $module.api('abort');\n\n            }\n\n            module.setup.api(searchTerm, callback);\n\n            $module\n\n              .api('query')\n\n            ;\n\n          },\n\n          object: function(searchTerm, source, searchFields) {\n\n            var\n\n              results      = [],\n\n              exactResults = [],\n\n              fuzzyResults = [],\n\n              searchExp    = searchTerm.toString().replace(regExp.escape, '\\\\$&'),\n\n              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),\n\n\n\n              // avoid duplicates when pushing results\n\n              addResult = function(array, result) {\n\n                var\n\n                  notResult      = ($.inArray(result, results) == -1),\n\n                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1),\n\n                  notExactResults = ($.inArray(result, exactResults) == -1)\n\n                ;\n\n                if(notResult && notFuzzyResult && notExactResults) {\n\n                  array.push(result);\n\n                }\n\n              }\n\n            ;\n\n            source = source || settings.source;\n\n            searchFields = (searchFields !== undefined)\n\n              ? searchFields\n\n              : settings.searchFields\n\n            ;\n\n\n\n            // search fields should be array to loop correctly\n\n            if(!$.isArray(searchFields)) {\n\n              searchFields = [searchFields];\n\n            }\n\n\n\n            // exit conditions if no source\n\n            if(source === undefined || source === false) {\n\n              module.error(error.source);\n\n              return [];\n\n            }\n\n            // iterate through search fields looking for matches\n\n            $.each(searchFields, function(index, field) {\n\n              $.each(source, function(label, content) {\n\n                var\n\n                  fieldExists = (typeof content[field] == 'string')\n\n                ;\n\n                if(fieldExists) {\n\n                  if( content[field].search(matchRegExp) !== -1) {\n\n                    // content starts with value (first in results)\n\n                    addResult(results, content);\n\n                  }\n\n                  else if(settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(exactResults, content);\n\n                  }\n\n                  else if(settings.fullTextSearch == true && module.fuzzySearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(fuzzyResults, content);\n\n                  }\n\n                }\n\n              });\n\n            });\n\n            $.merge(exactResults, fuzzyResults)\n\n            $.merge(results, exactResults);\n\n            return results;\n\n          }\n\n        },\n\n        exactSearch: function (query, term) {\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(term.indexOf(query) > -1) {\n\n             return true;\n\n          }\n\n          return false;\n\n        },\n\n        fuzzySearch: function(query, term) {\n\n          var\n\n            termLength  = term.length,\n\n            queryLength = query.length\n\n          ;\n\n          if(typeof query !== 'string') {\n\n            return false;\n\n          }\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(queryLength > termLength) {\n\n            return false;\n\n          }\n\n          if(queryLength === termLength) {\n\n            return (query === term);\n\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n\n            var\n\n              queryCharacter = query.charCodeAt(characterIndex)\n\n            ;\n\n            while(nextCharacterIndex < termLength) {\n\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n\n                continue search;\n\n              }\n\n            }\n\n            return false;\n\n          }\n\n          return true;\n\n        },\n\n\n\n        parse: {\n\n          response: function(response, searchTerm) {\n\n            var\n\n              searchHTML = module.generateResults(response)\n\n            ;\n\n            module.verbose('Parsing server response', response);\n\n            if(response !== undefined) {\n\n              if(searchTerm !== undefined && response[fields.results] !== undefined) {\n\n                module.addResults(searchHTML);\n\n                module.inject.id(response[fields.results]);\n\n                module.write.cache(searchTerm, {\n\n                  html    : searchHTML,\n\n                  results : response[fields.results]\n\n                });\n\n                module.save.results(response[fields.results]);\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        cancel: {\n\n          query: function() {\n\n            if( module.can.useAPI() ) {\n\n              $module.api('abort');\n\n            }\n\n          }\n\n        },\n\n\n\n        has: {\n\n          minimumCharacters: function() {\n\n            var\n\n              searchTerm    = module.get.value(),\n\n              numCharacters = searchTerm.length\n\n            ;\n\n            return (numCharacters >= settings.minCharacters);\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              return false;\n\n            }\n\n            var\n\n              html = $results.html()\n\n            ;\n\n            return html != '';\n\n          }\n\n        },\n\n\n\n        clear: {\n\n          cache: function(value) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(!value) {\n\n              module.debug('Clearing cache', value);\n\n              $module.removeData(metadata.cache);\n\n            }\n\n            else if(value && cache && cache[value]) {\n\n              module.debug('Removing value from cache', value);\n\n              delete cache[value];\n\n              $module.data(metadata.cache, cache);\n\n            }\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cache: function(name) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Checking cache for generated html for query', name);\n\n              return (typeof cache == 'object') && (cache[name] !== undefined)\n\n                ? cache[name]\n\n                : false\n\n              ;\n\n            }\n\n            return false;\n\n          }\n\n        },\n\n\n\n        create: {\n\n          categoryResults: function(results) {\n\n            var\n\n              categoryResults = {}\n\n            ;\n\n            $.each(results, function(index, result) {\n\n              if(!result.category) {\n\n                return;\n\n              }\n\n              if(categoryResults[result.category] === undefined) {\n\n                module.verbose('Creating new category of results', result.category);\n\n                categoryResults[result.category] = {\n\n                  name    : result.category,\n\n                  results : [result]\n\n                }\n\n              }\n\n              else {\n\n                categoryResults[result.category].results.push(result);\n\n              }\n\n            });\n\n            return categoryResults;\n\n          },\n\n          id: function(resultIndex, categoryIndex) {\n\n            var\n\n              resultID      = (resultIndex + 1), // not zero indexed\n\n              categoryID    = (categoryIndex + 1),\n\n              firstCharCode,\n\n              letterID,\n\n              id\n\n            ;\n\n            if(categoryIndex !== undefined) {\n\n              // start char code for \"A\"\n\n              letterID = String.fromCharCode(97 + categoryIndex);\n\n              id          = letterID + resultID;\n\n              module.verbose('Creating category result id', id);\n\n            }\n\n            else {\n\n              id = resultID;\n\n              module.verbose('Creating result id', id);\n\n            }\n\n            return id;\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              $results = $('<div />')\n\n                .addClass(className.results)\n\n                .appendTo($module)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        inject: {\n\n          result: function(result, resultIndex, categoryIndex) {\n\n            module.verbose('Injecting result into results');\n\n            var\n\n              $selectedResult = (categoryIndex !== undefined)\n\n                ? $results\n\n                    .children().eq(categoryIndex)\n\n                      .children(selector.results)\n\n                        .first()\n\n                        .children(selector.result)\n\n                          .eq(resultIndex)\n\n                : $results\n\n                    .children(selector.result).eq(resultIndex)\n\n            ;\n\n            module.verbose('Injecting results metadata', $selectedResult);\n\n            $selectedResult\n\n              .data(metadata.result, result)\n\n            ;\n\n          },\n\n          id: function(results) {\n\n            module.debug('Injecting unique ids into results');\n\n            var\n\n              // since results may be object, we must use counters\n\n              categoryIndex = 0,\n\n              resultIndex   = 0\n\n            ;\n\n            if(settings.type === 'category') {\n\n              // iterate through each category result\n\n              $.each(results, function(index, category) {\n\n                resultIndex = 0;\n\n                $.each(category.results, function(index, value) {\n\n                  var\n\n                    result = category.results[index]\n\n                  ;\n\n                  if(result.id === undefined) {\n\n                    result.id = module.create.id(resultIndex, categoryIndex);\n\n                  }\n\n                  module.inject.result(result, resultIndex, categoryIndex);\n\n                  resultIndex++;\n\n                });\n\n                categoryIndex++;\n\n              });\n\n            }\n\n            else {\n\n              // top level\n\n              $.each(results, function(index, value) {\n\n                var\n\n                  result = results[index]\n\n                ;\n\n                if(result.id === undefined) {\n\n                  result.id = module.create.id(resultIndex);\n\n                }\n\n                module.inject.result(result, resultIndex);\n\n                resultIndex++;\n\n              });\n\n            }\n\n            return results;\n\n          }\n\n        },\n\n\n\n        save: {\n\n          results: function(results) {\n\n            module.verbose('Saving current search results to metadata', results);\n\n            $module.data(metadata.results, results);\n\n          }\n\n        },\n\n\n\n        write: {\n\n          cache: function(name, value) {\n\n            var\n\n              cache = ($module.data(metadata.cache) !== undefined)\n\n                ? $module.data(metadata.cache)\n\n                : {}\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Writing generated html to cache', name, value);\n\n              cache[name] = value;\n\n              $module\n\n                .data(metadata.cache, cache)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        addResults: function(html) {\n\n          if( $.isFunction(settings.onResultsAdd) ) {\n\n            if( settings.onResultsAdd.call($results, html) === false ) {\n\n              module.debug('onResultsAdd callback cancelled default action');\n\n              return false;\n\n            }\n\n          }\n\n          if(html) {\n\n            $results\n\n              .html(html)\n\n            ;\n\n            module.refreshResults();\n\n            if(settings.selectFirstResult) {\n\n              module.select.firstResult();\n\n            }\n\n            module.showResults();\n\n          }\n\n          else {\n\n            module.hideResults(function() {\n\n              $results.empty();\n\n            });\n\n          }\n\n        },\n\n\n\n        showResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if(resultsDismissed) {\n\n            return;\n\n          }\n\n          if(!module.is.visible() && module.has.results()) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Showing results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' in',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Showing results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeIn(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsOpen.call($results);\n\n          }\n\n        },\n\n        hideResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if( module.is.visible() ) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Hiding results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' out',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Hiding results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeOut(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsClose.call($results);\n\n          }\n\n        },\n\n\n\n        generateResults: function(response) {\n\n          module.debug('Generating html from response', response);\n\n          var\n\n            template       = settings.templates[settings.type],\n\n            isProperObject = ($.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results])),\n\n            isProperArray  = ($.isArray(response[fields.results]) && response[fields.results].length > 0),\n\n            html           = ''\n\n          ;\n\n          if(isProperObject || isProperArray ) {\n\n            if(settings.maxResults > 0) {\n\n              if(isProperObject) {\n\n                if(settings.type == 'standard') {\n\n                  module.error(error.maxResults);\n\n                }\n\n              }\n\n              else {\n\n                response[fields.results] = response[fields.results].slice(0, settings.maxResults);\n\n              }\n\n            }\n\n            if($.isFunction(template)) {\n\n              html = template(response, fields);\n\n            }\n\n            else {\n\n              module.error(error.noTemplate, false);\n\n            }\n\n          }\n\n          else if(settings.showNoResults) {\n\n            html = module.displayMessage(error.noResults, 'empty', error.noResultsHeader);\n\n          }\n\n          settings.onResults.call(element, response);\n\n          return html;\n\n        },\n\n\n\n        displayMessage: function(text, type, header) {\n\n          type = type || 'standard';\n\n          module.debug('Displaying message', text, type, header);\n\n          module.addResults( settings.templates.message(text, type, header) );\n\n          return settings.templates.message(text, type, header);\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            settings[name] = value;\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if($allModules.length > 1) {\n\n              title += ' ' + '(' + $allModules.length + ')';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            20872,
            21316
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.toast.settings, parameters)\n\n          : $.extend({}, $.fn.toast.settings),\n\n\n\n        className       = settings.className,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        namespace       = settings.namespace,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = namespace + '-module',\n\n\n\n        $module         = $(this),\n\n        $toastBox       = $('<div/>',{'class':settings.className.box}),\n\n        $toast          = $('<div/>'),\n\n        $progress       = $('<div/>',{'class':settings.className.progress+' '+settings.class}),\n\n        $progressBar    = $('<div/>',{'class':'bar'}),\n\n\n\n        $close          = $('<i/>',{'class':'close icon'}),\n\n        $context        = (settings.context)\n\n          ? $(settings.context)\n\n          : $('body'),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        module\n\n      ;\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing element');\n\n          if(typeof settings.showProgress !== 'string' || ['top','bottom'].indexOf(settings.showProgress) === -1 ) {\n\n            settings.showProgress = false;\n\n          }\n\n          if (!module.has.container()) {\n\n            module.create.container();\n\n          }\n\n\n\n          module.create.toast();\n\n\n\n          module.bind.events();\n\n          \n\n          if(settings.displayTime > 0) {\n\n            module.closeTimer = setTimeout(module.close, settings.displayTime+(!!settings.showProgress ? 300 : 0));\n\n          }\n\n          module.show();\n\n        },\n\n\n\n        destroy: function() {\n\n          module.debug('Removing toast', $toast);\n\n          $toast.remove();\n\n          $toast = undefined;\n\n          settings.onRemove.call($toast, element);\n\n        },\n\n\n\n        show: function(callback) {\n\n          callback = callback || function(){};\n\n          module.debug('Showing toast');\n\n          if(settings.onShow.call($toast, element) === false) {\n\n            module.debug('onShow callback returned false, cancelling toast animation');\n\n            return;\n\n          }\n\n          module.animate.show(callback);\n\n        },\n\n\n\n        close: function(callback) {\n\n          if(module.closeTimer) {\n\n              clearTimeout(module.closeTimer);\n\n          }\n\n          callback = callback || function(){};\n\n          module.remove.visible();\n\n          module.unbind.events();\n\n          module.animate.close(callback);\n\n\n\n        },\n\n\n\n        create: {\n\n          container: function() {\n\n            module.verbose('Creating container');\n\n            $context.append('<div class=\"ui ' + settings.position + ' ' + className.container + '\"></div>');\n\n          },\n\n          toast: function() {\n\n            var $content = $('<div/>').addClass(className.content);\n\n            module.verbose('Creating toast');\n\n            if(settings.closeIcon) {\n\n                $toast.append($close);\n\n                $toast.css('cursor','default');\n\n            }\n\n\n\n            var iconClass = typeof settings.showIcon === 'string' ? settings.showIcon : settings.showIcon && settings.icons[settings.class] ? settings.icons[settings.class] : '';\n\n            if (iconClass != '') {\n\n               var $icon = $('<i/>').addClass(iconClass + ' ' + className.icon);\n\n\n\n              $toast\n\n                .addClass(className.icon)\n\n                .append($icon)\n\n              ;\n\n            }\n\n\n\n            if (settings.title !== '') {\n\n              var \n\n                $title = $('<div/>')\n\n                  .addClass(className.title)\n\n                  .text(settings.title)\n\n                ;\n\n\n\n              $content.append($title);\n\n            }\n\n\n\n            $content.append($('<div/>').html(settings.message));\n\n\n\n            $toast\n\n              .addClass(settings.class + ' ' + className.toast)\n\n              .append($content)\n\n            ;\n\n            $toast.css('opacity', settings.opacity);\n\n            if(settings.compact || $toast.hasClass('compact')) {\n\n                $toastBox.addClass('compact');\n\n            }\n\n            if($toast.hasClass('toast') && !$toast.hasClass('inverted')){\n\n              $progress.addClass('inverted');\n\n            } else {\n\n              $progress.removeClass('inverted');\n\n            }\n\n            $toast = $toastBox.append($toast);\n\n            if(!!settings.showProgress && settings.displayTime > 0){\n\n              $progress\n\n                .addClass(settings.showProgress)\n\n                .append($progressBar);\n\n              if ($progress.hasClass('top')) {\n\n                  $toast.prepend($progress);\n\n              } else {\n\n                  $toast.append($progress);\n\n              }\n\n              $progressBar.css('transition','width '+(settings.displayTime/1000)+'s linear');\n\n              $progressBar.width(settings.progressUp?'0%':'100%');\n\n              setTimeout(function() {\n\n                  if(typeof $progress !== 'undefined'){\n\n                    $progressBar.width(settings.progressUp?'100%':'0%');\n\n                }\n\n              },300);\n\n            }\n\n            if (settings.newestOnTop) {\n\n              $toast.prependTo(module.get.container());\n\n            }\n\n            else {\n\n              $toast.appendTo(module.get.container());\n\n            }\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.debug('Binding events to toast');\n\n            (settings.closeIcon ? $close : $toast)\n\n              .on('click' + eventNamespace, module.event.click)\n\n            ;\n\n          }\n\n        },\n\n\n\n        unbind: {\n\n          events: function() {\n\n            module.debug('Unbinding events to toast');\n\n            (settings.closeIcon ? $close : $toast)\n\n              .off('click' + eventNamespace)\n\n            ;\n\n          }\n\n        },\n\n\n\n        animate: {\n\n          show: function(callback) {\n\n            callback = $.isFunction(callback) ? callback : function(){};\n\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n\n              module.set.visible();\n\n              $toast\n\n                .transition({\n\n                  animation  : settings.transition.showMethod + ' in',\n\n                  queue      : false,\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.transition.showDuration,\n\n                  onComplete : function() {\n\n                    callback.call($toast, element);\n\n                    settings.onVisible.call($toast, element);\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.error(error.noTransition);\n\n            }\n\n          },\n\n          close: function(callback) {\n\n            callback = $.isFunction(callback) ? callback : function(){};\n\n            module.debug('Closing toast');\n\n            if(settings.onHide.call($toast, element) === false) {\n\n              module.debug('onHide callback returned false, cancelling toast animation');\n\n              return;\n\n            }\n\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n\n              $toast\n\n                .transition({\n\n                  animation  : settings.transition.hideMethod + ' out',\n\n                  queue      : false,\n\n                  duration   : settings.transition.hideDuration,\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n\n\n                  onBeforeHide: function(callback){\n\n                      callback = $.isFunction(callback)?callback : function(){};\n\n                      if(settings.transition.closeEasing !== ''){\n\n                          $toast.css('opacity',0);\n\n                          $toast.wrap('<div/>').parent().slideUp(500,settings.transition.closeEasing,function(){\n\n                              $toast.parent().remove();\n\n                              callback.call($toast);\n\n                          });\n\n                      } else {\n\n                        callback.call($toast);\n\n                      }\n\n                  },\n\n                  onComplete : function() {\n\n                    module.destroy();\n\n                    callback.call($toast, element);\n\n                    settings.onHidden.call($toast, element);\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.error(error.noTransition);\n\n            }\n\n          }\n\n        },\n\n\n\n        has: {\n\n          container: function() {\n\n            module.verbose('Determining if there is already a container');\n\n            return ($context.find(module.helpers.toClass(settings.position) + selector.container).length > 0);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          container: function() {\n\n            return ($context.find(module.helpers.toClass(settings.position) + selector.container)[0]);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          visible: function() {\n\n            $toast.addClass(className.visible);\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          visible: function() {\n\n            $toast.removeClass(className.visible);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          click: function() {\n\n            settings.onClick.call($toast, element);\n\n            module.close();\n\n          }\n\n        },\n\n\n\n        helpers: {\n\n          toClass: function(selector) {\n\n            var\n\n              classes = selector.split(' '),\n\n              result = ''\n\n            ;\n\n\n\n            classes.forEach(function (element) {\n\n              result += '.' + element;\n\n            });\n\n\n\n            return result;\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            22578,
            23539
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.api.settings, parameters)\n\n          : $.extend({}, $.fn.api.settings),\n\n\n\n        // internal aliases\n\n        namespace       = settings.namespace,\n\n        metadata        = settings.metadata,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        className       = settings.className,\n\n\n\n        // define namespaces for modules\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        // element that creates request\n\n        $module         = $(this),\n\n        $form           = $module.closest(selector.form),\n\n\n\n        // context used for state\n\n        $context        = (settings.stateContext)\n\n          ? $(settings.stateContext)\n\n          : $module,\n\n\n\n        // request details\n\n        ajaxSettings,\n\n        requestSettings,\n\n        url,\n\n        data,\n\n        requestStartTime,\n\n\n\n        // standard module\n\n        element         = this,\n\n        context         = $context[0],\n\n        instance        = $module.data(moduleNamespace),\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          if(!methodInvoked) {\n\n            module.bind.events();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, instance)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module for', element);\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            var\n\n              triggerEvent = module.get.event()\n\n            ;\n\n            if( triggerEvent ) {\n\n              module.verbose('Attaching API events to element', triggerEvent);\n\n              $module\n\n                .on(triggerEvent + eventNamespace, module.event.trigger)\n\n              ;\n\n            }\n\n            else if(settings.on == 'now') {\n\n              module.debug('Querying API endpoint immediately');\n\n              module.query();\n\n            }\n\n          }\n\n        },\n\n\n\n        decode: {\n\n          json: function(response) {\n\n            if(response !== undefined && typeof response == 'string') {\n\n              try {\n\n               response = JSON.parse(response);\n\n              }\n\n              catch(e) {\n\n                // isnt json string\n\n              }\n\n            }\n\n            return response;\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cachedResponse: function(url) {\n\n            var\n\n              response\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            response = sessionStorage.getItem(url);\n\n            module.debug('Using cached response', url, response);\n\n            response = module.decode.json(response);\n\n            return response;\n\n          }\n\n        },\n\n        write: {\n\n          cachedResponse: function(url, response) {\n\n            if(response && response === '') {\n\n              module.debug('Response empty, not caching', response);\n\n              return;\n\n            }\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            if( $.isPlainObject(response) ) {\n\n              response = JSON.stringify(response);\n\n            }\n\n            sessionStorage.setItem(url, response);\n\n            module.verbose('Storing cached response for url', url, response);\n\n          }\n\n        },\n\n\n\n        query: function() {\n\n\n\n          if(module.is.disabled()) {\n\n            module.debug('Element is disabled API request aborted');\n\n            return;\n\n          }\n\n\n\n          if(module.is.loading()) {\n\n            if(settings.interruptRequests) {\n\n              module.debug('Interrupting previous request');\n\n              module.abort();\n\n            }\n\n            else {\n\n              module.debug('Cancelling request, previous request is still pending');\n\n              return;\n\n            }\n\n          }\n\n\n\n          // pass element metadata to url (value, text)\n\n          if(settings.defaultData) {\n\n            $.extend(true, settings.urlData, module.get.defaultData());\n\n          }\n\n\n\n          // Add form content\n\n          if(settings.serializeForm) {\n\n            settings.data = module.add.formData(settings.data);\n\n          }\n\n\n\n          // call beforesend and get any settings changes\n\n          requestSettings = module.get.settings();\n\n\n\n          // check if before send cancelled request\n\n          if(requestSettings === false) {\n\n            module.cancelled = true;\n\n            module.error(error.beforeSend);\n\n            return;\n\n          }\n\n          else {\n\n            module.cancelled = false;\n\n          }\n\n\n\n          // get url\n\n          url = module.get.templatedURL();\n\n\n\n          if(!url && !module.is.mocked()) {\n\n            module.error(error.missingURL);\n\n            return;\n\n          }\n\n\n\n          // replace variables\n\n          url = module.add.urlData( url );\n\n          // missing url parameters\n\n          if( !url && !module.is.mocked()) {\n\n            return;\n\n          }\n\n\n\n          requestSettings.url = settings.base + url;\n\n\n\n          // look for jQuery ajax parameters in settings\n\n          ajaxSettings = $.extend(true, {}, settings, {\n\n            type       : settings.method || settings.type,\n\n            data       : data,\n\n            url        : settings.base + url,\n\n            beforeSend : settings.beforeXHR,\n\n            success    : function() {},\n\n            failure    : function() {},\n\n            complete   : function() {}\n\n          });\n\n\n\n          module.debug('Querying URL', ajaxSettings.url);\n\n          module.verbose('Using AJAX settings', ajaxSettings);\n\n          if(settings.cache === 'local' && module.read.cachedResponse(url)) {\n\n            module.debug('Response returned from local cache');\n\n            module.request = module.create.request();\n\n            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);\n\n            return;\n\n          }\n\n\n\n          if( !settings.throttle ) {\n\n            module.debug('Sending request', data, ajaxSettings.method);\n\n            module.send.request();\n\n          }\n\n          else {\n\n            if(!settings.throttleFirstRequest && !module.timer) {\n\n              module.debug('Sending request', data, ajaxSettings.method);\n\n              module.send.request();\n\n              module.timer = setTimeout(function(){}, settings.throttle);\n\n            }\n\n            else {\n\n              module.debug('Throttling request', settings.throttle);\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.timer) {\n\n                  delete module.timer;\n\n                }\n\n                module.debug('Sending throttled request', data, ajaxSettings.method);\n\n                module.send.request();\n\n              }, settings.throttle);\n\n            }\n\n          }\n\n\n\n        },\n\n\n\n        should: {\n\n          removeError: function() {\n\n            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );\n\n          }\n\n        },\n\n\n\n        is: {\n\n          disabled: function() {\n\n            return ($module.filter(selector.disabled).length > 0);\n\n          },\n\n          expectingJSON: function() {\n\n            return settings.dataType === 'json' || settings.dataType === 'jsonp';\n\n          },\n\n          form: function() {\n\n            return $module.is('form') || $context.is('form');\n\n          },\n\n          mocked: function() {\n\n            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);\n\n          },\n\n          input: function() {\n\n            return $module.is('input');\n\n          },\n\n          loading: function() {\n\n            return (module.request)\n\n              ? (module.request.state() == 'pending')\n\n              : false\n\n            ;\n\n          },\n\n          abortedRequest: function(xhr) {\n\n            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\n\n              module.verbose('XHR request determined to be aborted');\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('XHR request was not aborted');\n\n              return false;\n\n            }\n\n          },\n\n          validResponse: function(response) {\n\n            if( (!module.is.expectingJSON()) || !$.isFunction(settings.successTest) ) {\n\n              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);\n\n              return true;\n\n            }\n\n            module.debug('Checking JSON returned success', settings.successTest, response);\n\n            if( settings.successTest(response) ) {\n\n              module.debug('Response passed success test', response);\n\n              return true;\n\n            }\n\n            else {\n\n              module.debug('Response failed success test', response);\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        was: {\n\n          cancelled: function() {\n\n            return (module.cancelled || false);\n\n          },\n\n          succesful: function() {\n\n            return (module.request && module.request.state() == 'resolved');\n\n          },\n\n          failure: function() {\n\n            return (module.request && module.request.state() == 'rejected');\n\n          },\n\n          complete: function() {\n\n            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );\n\n          }\n\n        },\n\n\n\n        add: {\n\n          urlData: function(url, urlData) {\n\n            var\n\n              requiredVariables,\n\n              optionalVariables\n\n            ;\n\n            if(url) {\n\n              requiredVariables = url.match(settings.regExp.required);\n\n              optionalVariables = url.match(settings.regExp.optional);\n\n              urlData           = urlData || settings.urlData;\n\n              if(requiredVariables) {\n\n                module.debug('Looking for required URL variables', requiredVariables);\n\n                $.each(requiredVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(2, templatedString.length - 3)\n\n                      : templatedString.substr(1, templatedString.length - 2),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // remove value\n\n                  if(value === undefined) {\n\n                    module.error(error.requiredParameter, variable, url);\n\n                    url = false;\n\n                    return false;\n\n                  }\n\n                  else {\n\n                    module.verbose('Found required variable', variable, value);\n\n                    value = (settings.encodeParameters)\n\n                      ? module.get.urlEncodedValue(value)\n\n                      : value\n\n                    ;\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                });\n\n              }\n\n              if(optionalVariables) {\n\n                module.debug('Looking for optional URL variables', requiredVariables);\n\n                $.each(optionalVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {/$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(3, templatedString.length - 4)\n\n                      : templatedString.substr(2, templatedString.length - 3),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // optional replacement\n\n                  if(value !== undefined) {\n\n                    module.verbose('Optional variable Found', variable, value);\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                  else {\n\n                    module.verbose('Optional variable not found', variable);\n\n                    // remove preceding slash if set\n\n                    if(url.indexOf('/' + templatedString) !== -1) {\n\n                      url = url.replace('/' + templatedString, '');\n\n                    }\n\n                    else {\n\n                      url = url.replace(templatedString, '');\n\n                    }\n\n                  }\n\n                });\n\n              }\n\n            }\n\n            return url;\n\n          },\n\n          formData: function(data) {\n\n            var\n\n              canSerialize = ($.fn.serializeObject !== undefined),\n\n              formData     = (canSerialize)\n\n                ? $form.serializeObject()\n\n                : $form.serialize(),\n\n              hasOtherData\n\n            ;\n\n            data         = data || settings.data;\n\n            hasOtherData = $.isPlainObject(data);\n\n\n\n            if(hasOtherData) {\n\n              if(canSerialize) {\n\n                module.debug('Extending existing data with form data', data, formData);\n\n                data = $.extend(true, {}, data, formData);\n\n              }\n\n              else {\n\n                module.error(error.missingSerialize);\n\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\n\n                data = formData;\n\n              }\n\n            }\n\n            else {\n\n              module.debug('Adding form data', formData);\n\n              data = formData;\n\n            }\n\n            return data;\n\n          }\n\n        },\n\n\n\n        send: {\n\n          request: function() {\n\n            module.set.loading();\n\n            module.request = module.create.request();\n\n            if( module.is.mocked() ) {\n\n              module.mockedXHR = module.create.mockedXHR();\n\n            }\n\n            else {\n\n              module.xhr = module.create.xhr();\n\n            }\n\n            settings.onRequest.call(context, module.request, module.xhr);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          trigger: function(event) {\n\n            module.query();\n\n            if(event.type == 'submit' || event.type == 'click') {\n\n              event.preventDefault();\n\n            }\n\n          },\n\n          xhr: {\n\n            always: function() {\n\n              // nothing special\n\n            },\n\n            done: function(response, textStatus, xhr) {\n\n              var\n\n                context            = this,\n\n                elapsedTime        = (new Date().getTime() - requestStartTime),\n\n                timeLeft           = (settings.loadingDuration - elapsedTime),\n\n                translatedResponse = ( $.isFunction(settings.onResponse) )\n\n                  ? module.is.expectingJSON()\n\n                    ? settings.onResponse.call(context, $.extend(true, {}, response))\n\n                    : settings.onResponse.call(context, response)\n\n                  : false\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(translatedResponse) {\n\n                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);\n\n                response = translatedResponse;\n\n              }\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.validResponse(response) ) {\n\n                  module.request.resolveWith(context, [response, xhr]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'invalid']);\n\n                }\n\n              }, timeLeft);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                context     = this,\n\n                elapsedTime = (new Date().getTime() - requestStartTime),\n\n                timeLeft    = (settings.loadingDuration - elapsedTime)\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.abortedRequest(xhr) ) {\n\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\n\n                }\n\n              }, timeLeft);\n\n            }\n\n          },\n\n          request: {\n\n            done: function(response, xhr) {\n\n              module.debug('Successful API Response', response);\n\n              if(settings.cache === 'local' && url) {\n\n                module.write.cachedResponse(url, response);\n\n                module.debug('Saving server response locally', module.cache);\n\n              }\n\n              settings.onSuccess.call(context, response, $module, xhr);\n\n            },\n\n            complete: function(firstParameter, secondParameter) {\n\n              var\n\n                xhr,\n\n                response\n\n              ;\n\n              // have to guess callback parameters based on request success\n\n              if( module.was.succesful() ) {\n\n                response = firstParameter;\n\n                xhr      = secondParameter;\n\n              }\n\n              else {\n\n                xhr      = firstParameter;\n\n                response = module.get.responseFromXHR(xhr);\n\n              }\n\n              module.remove.loading();\n\n              settings.onComplete.call(context, response, $module, xhr);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                // pull response from xhr if available\n\n                response     = module.get.responseFromXHR(xhr),\n\n                errorMessage = module.get.errorFromRequest(response, status, httpMessage)\n\n              ;\n\n              if(status == 'aborted') {\n\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\n\n                settings.onAbort.call(context, status, $module, xhr);\n\n                return true;\n\n              }\n\n              else if(status == 'invalid') {\n\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\n\n              }\n\n              else if(status == 'error') {\n\n                if(xhr !== undefined) {\n\n                  module.debug('XHR produced a server error', status, httpMessage);\n\n                  // make sure we have an error to display to console\n\n                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\n\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\n\n                  }\n\n                  settings.onError.call(context, errorMessage, $module, xhr);\n\n                }\n\n              }\n\n\n\n              if(settings.errorDuration && status !== 'aborted') {\n\n                module.debug('Adding error state');\n\n                module.set.error();\n\n                if( module.should.removeError() ) {\n\n                  setTimeout(module.remove.error, settings.errorDuration);\n\n                }\n\n              }\n\n              module.debug('API Request failed', errorMessage, xhr);\n\n              settings.onFailure.call(context, response, $module, xhr);\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n\n\n          request: function() {\n\n            // api request promise\n\n            return $.Deferred()\n\n              .always(module.event.request.complete)\n\n              .done(module.event.request.done)\n\n              .fail(module.event.request.fail)\n\n            ;\n\n          },\n\n\n\n          mockedXHR: function () {\n\n            var\n\n              // xhr does not simulate these properties of xhr but must return them\n\n              textStatus     = false,\n\n              status         = false,\n\n              httpMessage    = false,\n\n              responder      = settings.mockResponse      || settings.response,\n\n              asyncResponder = settings.mockResponseAsync || settings.responseAsync,\n\n              asyncCallback,\n\n              response,\n\n              mockedXHR\n\n            ;\n\n\n\n            mockedXHR = $.Deferred()\n\n              .always(module.event.xhr.complete)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n\n\n            if(responder) {\n\n              if( $.isFunction(responder) ) {\n\n                module.debug('Using specified synchronous callback', responder);\n\n                response = responder.call(context, requestSettings);\n\n              }\n\n              else {\n\n                module.debug('Using settings specified response', responder);\n\n                response = responder;\n\n              }\n\n              // simulating response\n\n              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n            }\n\n            else if( $.isFunction(asyncResponder) ) {\n\n              asyncCallback = function(response) {\n\n                module.debug('Async callback returned response', response);\n\n\n\n                if(response) {\n\n                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n                }\n\n                else {\n\n                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);\n\n                }\n\n              };\n\n              module.debug('Using specified async response callback', asyncResponder);\n\n              asyncResponder.call(context, requestSettings, asyncCallback);\n\n            }\n\n            return mockedXHR;\n\n          },\n\n\n\n          xhr: function() {\n\n            var\n\n              xhr\n\n            ;\n\n            // ajax request promise\n\n            xhr = $.ajax(ajaxSettings)\n\n              .always(module.event.xhr.always)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n            module.verbose('Created server request', xhr, ajaxSettings);\n\n            return xhr;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          error: function() {\n\n            module.verbose('Adding error state to element', $context);\n\n            $context.addClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Adding loading state to element', $context);\n\n            $context.addClass(className.loading);\n\n            requestStartTime = new Date().getTime();\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          error: function() {\n\n            module.verbose('Removing error state from element', $context);\n\n            $context.removeClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Removing loading state from element', $context);\n\n            $context.removeClass(className.loading);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          responseFromXHR: function(xhr) {\n\n            return $.isPlainObject(xhr)\n\n              ? (module.is.expectingJSON())\n\n                ? module.decode.json(xhr.responseText)\n\n                : xhr.responseText\n\n              : false\n\n            ;\n\n          },\n\n          errorFromRequest: function(response, status, httpMessage) {\n\n            return ($.isPlainObject(response) && response.error !== undefined)\n\n              ? response.error // use json error message\n\n              : (settings.error[status] !== undefined) // use server error message\n\n                ? settings.error[status]\n\n                : httpMessage\n\n            ;\n\n          },\n\n          request: function() {\n\n            return module.request || false;\n\n          },\n\n          xhr: function() {\n\n            return module.xhr || false;\n\n          },\n\n          settings: function() {\n\n            var\n\n              runSettings\n\n            ;\n\n            runSettings = settings.beforeSend.call(context, settings);\n\n            if(runSettings) {\n\n              if(runSettings.success !== undefined) {\n\n                module.debug('Legacy success callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.success);\n\n                runSettings.onSuccess = runSettings.success;\n\n              }\n\n              if(runSettings.failure !== undefined) {\n\n                module.debug('Legacy failure callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.failure);\n\n                runSettings.onFailure = runSettings.failure;\n\n              }\n\n              if(runSettings.complete !== undefined) {\n\n                module.debug('Legacy complete callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.complete);\n\n                runSettings.onComplete = runSettings.complete;\n\n              }\n\n            }\n\n            if(runSettings === undefined) {\n\n              module.error(error.noReturnedValue);\n\n            }\n\n            if(runSettings === false) {\n\n              return runSettings;\n\n            }\n\n            return (runSettings !== undefined)\n\n              ? $.extend(true, {}, runSettings)\n\n              : $.extend(true, {}, settings)\n\n            ;\n\n          },\n\n          urlEncodedValue: function(value) {\n\n            var\n\n              decodedValue   = window.decodeURIComponent(value),\n\n              encodedValue   = window.encodeURIComponent(value),\n\n              alreadyEncoded = (decodedValue !== value)\n\n            ;\n\n            if(alreadyEncoded) {\n\n              module.debug('URL value is already encoded, avoiding double encoding', value);\n\n              return value;\n\n            }\n\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\n\n            return encodedValue;\n\n          },\n\n          defaultData: function() {\n\n            var\n\n              data = {}\n\n            ;\n\n            if( !$.isWindow(element) ) {\n\n              if( module.is.input() ) {\n\n                data.value = $module.val();\n\n              }\n\n              else if( module.is.form() ) {\n\n\n\n              }\n\n              else {\n\n                data.text = $module.text();\n\n              }\n\n            }\n\n            return data;\n\n          },\n\n          event: function() {\n\n            if( $.isWindow(element) || settings.on == 'now' ) {\n\n              module.debug('API called without element, no events attached');\n\n              return false;\n\n            }\n\n            else if(settings.on == 'auto') {\n\n              if( $module.is('input') ) {\n\n                return (element.oninput !== undefined)\n\n                  ? 'input'\n\n                  : (element.onpropertychange !== undefined)\n\n                    ? 'propertychange'\n\n                    : 'keyup'\n\n                ;\n\n              }\n\n              else if( $module.is('form') ) {\n\n                return 'submit';\n\n              }\n\n              else {\n\n                return 'click';\n\n              }\n\n            }\n\n            else {\n\n              return settings.on;\n\n            }\n\n          },\n\n          templatedURL: function(action) {\n\n            action = action || $module.data(metadata.action) || settings.action || false;\n\n            url    = $module.data(metadata.url) || settings.url || false;\n\n            if(url) {\n\n              module.debug('Using specified url', url);\n\n              return url;\n\n            }\n\n            if(action) {\n\n              module.debug('Looking up url for action', action, settings.api);\n\n              if(settings.api[action] === undefined && !module.is.mocked()) {\n\n                module.error(error.missingAction, settings.action, settings.api);\n\n                return;\n\n              }\n\n              url = settings.api[action];\n\n            }\n\n            else if( module.is.form() ) {\n\n              url = $module.attr('action') || $context.attr('action') || false;\n\n              module.debug('No url or action specified, defaulting to form action', url);\n\n            }\n\n            return url;\n\n          }\n\n        },\n\n\n\n        abort: function() {\n\n          var\n\n            xhr = module.get.xhr()\n\n          ;\n\n          if( xhr && xhr.state() !== 'resolved') {\n\n            module.debug('Cancelling API request');\n\n            xhr.abort();\n\n          }\n\n        },\n\n\n\n        // reset state\n\n        reset: function() {\n\n          module.remove.error();\n\n          module.remove.loading();\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                //'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            24453,
            25598
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings        = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.visibility.settings, parameters)\n\n          : $.extend({}, $.fn.visibility.settings),\n\n\n\n        className       = settings.className,\n\n        namespace       = settings.namespace,\n\n        error           = settings.error,\n\n        metadata        = settings.metadata,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $window         = $(window),\n\n\n\n        $module         = $(this),\n\n        $context        = $(settings.context),\n\n\n\n        $placeholder,\n\n\n\n        selector        = $module.selector || '',\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        requestAnimationFrame = window.requestAnimationFrame\n\n          || window.mozRequestAnimationFrame\n\n          || window.webkitRequestAnimationFrame\n\n          || window.msRequestAnimationFrame\n\n          || function(callback) { setTimeout(callback, 0); },\n\n\n\n        element         = this,\n\n        disabled        = false,\n\n\n\n        contextObserver,\n\n        observer,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing', settings);\n\n\n\n          module.setup.cache();\n\n\n\n          if( module.should.trackChanges() ) {\n\n\n\n            if(settings.type == 'image') {\n\n              module.setup.image();\n\n            }\n\n            if(settings.type == 'fixed') {\n\n              module.setup.fixed();\n\n            }\n\n\n\n            if(settings.observeChanges) {\n\n              module.observeChanges();\n\n            }\n\n            module.bind.events();\n\n          }\n\n\n\n          module.save.position();\n\n          if( !module.is.visible() ) {\n\n            module.error(error.visible, $module);\n\n          }\n\n\n\n          if(settings.initialCheck) {\n\n            module.checkVisibility();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.debug('Storing instance', module);\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n          instance = module;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module');\n\n          if(observer) {\n\n            observer.disconnect();\n\n          }\n\n          if(contextObserver) {\n\n            contextObserver.disconnect();\n\n          }\n\n          $window\n\n            .off('load'   + eventNamespace, module.event.load)\n\n            .off('resize' + eventNamespace, module.event.resize)\n\n          ;\n\n          $context\n\n            .off('scroll'       + eventNamespace, module.event.scroll)\n\n            .off('scrollchange' + eventNamespace, module.event.scrollchange)\n\n          ;\n\n          if(settings.type == 'fixed') {\n\n            module.resetFixed();\n\n            module.remove.placeholder();\n\n          }\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n        },\n\n\n\n        observeChanges: function() {\n\n          if('MutationObserver' in window) {\n\n            contextObserver = new MutationObserver(module.event.contextChanged);\n\n            observer        = new MutationObserver(module.event.changed);\n\n            contextObserver.observe(document, {\n\n              childList : true,\n\n              subtree   : true\n\n            });\n\n            observer.observe(element, {\n\n              childList : true,\n\n              subtree   : true\n\n            });\n\n            module.debug('Setting up mutation observer', observer);\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.verbose('Binding visibility events to scroll and resize');\n\n            if(settings.refreshOnLoad) {\n\n              $window\n\n                .on('load'   + eventNamespace, module.event.load)\n\n              ;\n\n            }\n\n            $window\n\n              .on('resize' + eventNamespace, module.event.resize)\n\n            ;\n\n            // pub/sub pattern\n\n            $context\n\n              .off('scroll'      + eventNamespace)\n\n              .on('scroll'       + eventNamespace, module.event.scroll)\n\n              .on('scrollchange' + eventNamespace, module.event.scrollchange)\n\n            ;\n\n          }\n\n        },\n\n\n\n        event: {\n\n          changed: function(mutations) {\n\n            module.verbose('DOM tree modified, updating visibility calculations');\n\n            module.timer = setTimeout(function() {\n\n              module.verbose('DOM tree modified, updating sticky menu');\n\n              module.refresh();\n\n            }, 100);\n\n          },\n\n          contextChanged: function(mutations) {\n\n            [].forEach.call(mutations, function(mutation) {\n\n              if(mutation.removedNodes) {\n\n                [].forEach.call(mutation.removedNodes, function(node) {\n\n                  if(node == element || $(node).find(element).length > 0) {\n\n                    module.debug('Element removed from DOM, tearing down events');\n\n                    module.destroy();\n\n                  }\n\n                });\n\n              }\n\n            });\n\n          },\n\n          resize: function() {\n\n            module.debug('Window resized');\n\n            if(settings.refreshOnResize) {\n\n              requestAnimationFrame(module.refresh);\n\n            }\n\n          },\n\n          load: function() {\n\n            module.debug('Page finished loading');\n\n            requestAnimationFrame(module.refresh);\n\n          },\n\n          // publishes scrollchange event on one scroll\n\n          scroll: function() {\n\n            if(settings.throttle) {\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);\n\n              }, settings.throttle);\n\n            }\n\n            else {\n\n              requestAnimationFrame(function() {\n\n                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);\n\n              });\n\n            }\n\n          },\n\n          // subscribes to scrollchange\n\n          scrollchange: function(event, scrollPosition) {\n\n            module.checkVisibility(scrollPosition);\n\n          },\n\n        },\n\n\n\n        precache: function(images, callback) {\n\n          if (!(images instanceof Array)) {\n\n            images = [images];\n\n          }\n\n          var\n\n            imagesLength  = images.length,\n\n            loadedCounter = 0,\n\n            cache         = [],\n\n            cacheImage    = document.createElement('img'),\n\n            handleLoad    = function() {\n\n              loadedCounter++;\n\n              if (loadedCounter >= images.length) {\n\n                if ($.isFunction(callback)) {\n\n                  callback();\n\n                }\n\n              }\n\n            }\n\n          ;\n\n          while (imagesLength--) {\n\n            cacheImage         = document.createElement('img');\n\n            cacheImage.onload  = handleLoad;\n\n            cacheImage.onerror = handleLoad;\n\n            cacheImage.src     = images[imagesLength];\n\n            cache.push(cacheImage);\n\n          }\n\n        },\n\n\n\n        enableCallbacks: function() {\n\n          module.debug('Allowing callbacks to occur');\n\n          disabled = false;\n\n        },\n\n\n\n        disableCallbacks: function() {\n\n          module.debug('Disabling all callbacks temporarily');\n\n          disabled = true;\n\n        },\n\n\n\n        should: {\n\n          trackChanges: function() {\n\n            if(methodInvoked) {\n\n              module.debug('One time query, no need to bind events');\n\n              return false;\n\n            }\n\n            module.debug('Callbacks being attached');\n\n            return true;\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          cache: function() {\n\n            module.cache = {\n\n              occurred : {},\n\n              screen   : {},\n\n              element  : {},\n\n            };\n\n          },\n\n          image: function() {\n\n            var\n\n              src = $module.data(metadata.src)\n\n            ;\n\n            if(src) {\n\n              module.verbose('Lazy loading image', src);\n\n              settings.once           = true;\n\n              settings.observeChanges = false;\n\n\n\n              // show when top visible\n\n              settings.onOnScreen = function() {\n\n                module.debug('Image on screen', element);\n\n                module.precache(src, function() {\n\n                  module.set.image(src, function() {\n\n                    loadedCount++;\n\n                    if(loadedCount == moduleCount) {\n\n                      settings.onAllLoaded.call(this);\n\n                    }\n\n                    settings.onLoad.call(this);\n\n                  });\n\n                });\n\n              };\n\n            }\n\n          },\n\n          fixed: function() {\n\n            module.debug('Setting up fixed');\n\n            settings.once           = false;\n\n            settings.observeChanges = false;\n\n            settings.initialCheck   = true;\n\n            settings.refreshOnLoad  = true;\n\n            if(!parameters.transition) {\n\n              settings.transition = false;\n\n            }\n\n            module.create.placeholder();\n\n            module.debug('Added placeholder', $placeholder);\n\n            settings.onTopPassed = function() {\n\n              module.debug('Element passed, adding fixed position', $module);\n\n              module.show.placeholder();\n\n              module.set.fixed();\n\n              if(settings.transition) {\n\n                if($.fn.transition !== undefined) {\n\n                  $module.transition(settings.transition, settings.duration);\n\n                }\n\n              }\n\n            };\n\n            settings.onTopPassedReverse = function() {\n\n              module.debug('Element returned to position, removing fixed', $module);\n\n              module.hide.placeholder();\n\n              module.remove.fixed();\n\n            };\n\n          }\n\n        },\n\n\n\n        create: {\n\n          placeholder: function() {\n\n            module.verbose('Creating fixed position placeholder');\n\n            $placeholder = $module\n\n              .clone(false)\n\n              .css('display', 'none')\n\n              .addClass(className.placeholder)\n\n              .insertAfter($module)\n\n            ;\n\n          }\n\n        },\n\n\n\n        show: {\n\n          placeholder: function() {\n\n            module.verbose('Showing placeholder');\n\n            $placeholder\n\n              .css('display', 'block')\n\n              .css('visibility', 'hidden')\n\n            ;\n\n          }\n\n        },\n\n        hide: {\n\n          placeholder: function() {\n\n            module.verbose('Hiding placeholder');\n\n            $placeholder\n\n              .css('display', 'none')\n\n              .css('visibility', '')\n\n            ;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          fixed: function() {\n\n            module.verbose('Setting element to fixed position');\n\n            $module\n\n              .addClass(className.fixed)\n\n              .css({\n\n                position : 'fixed',\n\n                top      : settings.offset + 'px',\n\n                left     : 'auto',\n\n                zIndex   : settings.zIndex\n\n              })\n\n            ;\n\n            settings.onFixed.call(element);\n\n          },\n\n          image: function(src, callback) {\n\n            $module\n\n              .attr('src', src)\n\n            ;\n\n            if(settings.transition) {\n\n              if( $.fn.transition !== undefined) {\n\n                if($module.hasClass(className.visible)) {\n\n                  module.debug('Transition already occurred on this image, skipping animation');\n\n                  return;\n\n                }\n\n                $module.transition(settings.transition, settings.duration, callback);\n\n              }\n\n              else {\n\n                $module.fadeIn(settings.duration, callback);\n\n              }\n\n            }\n\n            else {\n\n              $module.show();\n\n            }\n\n          }\n\n        },\n\n\n\n        is: {\n\n          onScreen: function() {\n\n            var\n\n              calculations   = module.get.elementCalculations()\n\n            ;\n\n            return calculations.onScreen;\n\n          },\n\n          offScreen: function() {\n\n            var\n\n              calculations   = module.get.elementCalculations()\n\n            ;\n\n            return calculations.offScreen;\n\n          },\n\n          visible: function() {\n\n            if(module.cache && module.cache.element) {\n\n              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);\n\n            }\n\n            return false;\n\n          },\n\n          verticallyScrollableContext: function() {\n\n            var\n\n              overflowY = ($context.get(0) !== window)\n\n                ? $context.css('overflow-y')\n\n                : false\n\n            ;\n\n            return (overflowY == 'auto' || overflowY == 'scroll');\n\n          },\n\n          horizontallyScrollableContext: function() {\n\n            var\n\n              overflowX = ($context.get(0) !== window)\n\n                ? $context.css('overflow-x')\n\n                : false\n\n            ;\n\n            return (overflowX == 'auto' || overflowX == 'scroll');\n\n          }\n\n        },\n\n\n\n        refresh: function() {\n\n          module.debug('Refreshing constants (width/height)');\n\n          if(settings.type == 'fixed') {\n\n            module.resetFixed();\n\n          }\n\n          module.reset();\n\n          module.save.position();\n\n          if(settings.checkOnRefresh) {\n\n            module.checkVisibility();\n\n          }\n\n          settings.onRefresh.call(element);\n\n        },\n\n\n\n        resetFixed: function () {\n\n          module.remove.fixed();\n\n          module.remove.occurred();\n\n        },\n\n\n\n        reset: function() {\n\n          module.verbose('Resetting all cached values');\n\n          if( $.isPlainObject(module.cache) ) {\n\n            module.cache.screen = {};\n\n            module.cache.element = {};\n\n          }\n\n        },\n\n\n\n        checkVisibility: function(scroll) {\n\n          module.verbose('Checking visibility of element', module.cache.element);\n\n\n\n          if( !disabled && module.is.visible() ) {\n\n\n\n            // save scroll position\n\n            module.save.scroll(scroll);\n\n\n\n            // update calculations derived from scroll\n\n            module.save.calculations();\n\n\n\n            // percentage\n\n            module.passed();\n\n\n\n            // reverse (must be first)\n\n            module.passingReverse();\n\n            module.topVisibleReverse();\n\n            module.bottomVisibleReverse();\n\n            module.topPassedReverse();\n\n            module.bottomPassedReverse();\n\n\n\n            // one time\n\n            module.onScreen();\n\n            module.offScreen();\n\n            module.passing();\n\n            module.topVisible();\n\n            module.bottomVisible();\n\n            module.topPassed();\n\n            module.bottomPassed();\n\n\n\n            // on update callback\n\n            if(settings.onUpdate) {\n\n              settings.onUpdate.call(element, module.get.elementCalculations());\n\n            }\n\n          }\n\n        },\n\n\n\n        passed: function(amount, newCallback) {\n\n          var\n\n            calculations   = module.get.elementCalculations(),\n\n            amountInPixels\n\n          ;\n\n          // assign callback\n\n          if(amount && newCallback) {\n\n            settings.onPassed[amount] = newCallback;\n\n          }\n\n          else if(amount !== undefined) {\n\n            return (module.get.pixelsPassed(amount) > calculations.pixelsPassed);\n\n          }\n\n          else if(calculations.passing) {\n\n            $.each(settings.onPassed, function(amount, callback) {\n\n              if(calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {\n\n                module.execute(callback, amount);\n\n              }\n\n              else if(!settings.once) {\n\n                module.remove.occurred(callback);\n\n              }\n\n            });\n\n          }\n\n        },\n\n\n\n        onScreen: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onOnScreen,\n\n            callbackName = 'onScreen'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for onScreen', newCallback);\n\n            settings.onOnScreen = newCallback;\n\n          }\n\n          if(calculations.onScreen) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.onOnScreen;\n\n          }\n\n        },\n\n\n\n        offScreen: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onOffScreen,\n\n            callbackName = 'offScreen'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for offScreen', newCallback);\n\n            settings.onOffScreen = newCallback;\n\n          }\n\n          if(calculations.offScreen) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.onOffScreen;\n\n          }\n\n        },\n\n\n\n        passing: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onPassing,\n\n            callbackName = 'passing'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for passing', newCallback);\n\n            settings.onPassing = newCallback;\n\n          }\n\n          if(calculations.passing) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.passing;\n\n          }\n\n        },\n\n\n\n\n\n        topVisible: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopVisible,\n\n            callbackName = 'topVisible'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top visible', newCallback);\n\n            settings.onTopVisible = newCallback;\n\n          }\n\n          if(calculations.topVisible) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.topVisible;\n\n          }\n\n        },\n\n\n\n        bottomVisible: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomVisible,\n\n            callbackName = 'bottomVisible'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom visible', newCallback);\n\n            settings.onBottomVisible = newCallback;\n\n          }\n\n          if(calculations.bottomVisible) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.bottomVisible;\n\n          }\n\n        },\n\n\n\n        topPassed: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopPassed,\n\n            callbackName = 'topPassed'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top passed', newCallback);\n\n            settings.onTopPassed = newCallback;\n\n          }\n\n          if(calculations.topPassed) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.topPassed;\n\n          }\n\n        },\n\n\n\n        bottomPassed: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomPassed,\n\n            callbackName = 'bottomPassed'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom passed', newCallback);\n\n            settings.onBottomPassed = newCallback;\n\n          }\n\n          if(calculations.bottomPassed) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.bottomPassed;\n\n          }\n\n        },\n\n\n\n        passingReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onPassingReverse,\n\n            callbackName = 'passingReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for passing reverse', newCallback);\n\n            settings.onPassingReverse = newCallback;\n\n          }\n\n          if(!calculations.passing) {\n\n            if(module.get.occurred('passing')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return !calculations.passing;\n\n          }\n\n        },\n\n\n\n\n\n        topVisibleReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopVisibleReverse,\n\n            callbackName = 'topVisibleReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top visible reverse', newCallback);\n\n            settings.onTopVisibleReverse = newCallback;\n\n          }\n\n          if(!calculations.topVisible) {\n\n            if(module.get.occurred('topVisible')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.topVisible;\n\n          }\n\n        },\n\n\n\n        bottomVisibleReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomVisibleReverse,\n\n            callbackName = 'bottomVisibleReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom visible reverse', newCallback);\n\n            settings.onBottomVisibleReverse = newCallback;\n\n          }\n\n          if(!calculations.bottomVisible) {\n\n            if(module.get.occurred('bottomVisible')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.bottomVisible;\n\n          }\n\n        },\n\n\n\n        topPassedReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopPassedReverse,\n\n            callbackName = 'topPassedReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top passed reverse', newCallback);\n\n            settings.onTopPassedReverse = newCallback;\n\n          }\n\n          if(!calculations.topPassed) {\n\n            if(module.get.occurred('topPassed')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.onTopPassed;\n\n          }\n\n        },\n\n\n\n        bottomPassedReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomPassedReverse,\n\n            callbackName = 'bottomPassedReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom passed reverse', newCallback);\n\n            settings.onBottomPassedReverse = newCallback;\n\n          }\n\n          if(!calculations.bottomPassed) {\n\n            if(module.get.occurred('bottomPassed')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.bottomPassed;\n\n          }\n\n        },\n\n\n\n        execute: function(callback, callbackName) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            screen       = module.get.screenCalculations()\n\n          ;\n\n          callback = callback || false;\n\n          if(callback) {\n\n            if(settings.continuous) {\n\n              module.debug('Callback being called continuously', callbackName, calculations);\n\n              callback.call(element, calculations, screen);\n\n            }\n\n            else if(!module.get.occurred(callbackName)) {\n\n              module.debug('Conditions met', callbackName, calculations);\n\n              callback.call(element, calculations, screen);\n\n            }\n\n          }\n\n          module.save.occurred(callbackName);\n\n        },\n\n\n\n        remove: {\n\n          fixed: function() {\n\n            module.debug('Removing fixed position');\n\n            $module\n\n              .removeClass(className.fixed)\n\n              .css({\n\n                position : '',\n\n                top      : '',\n\n                left     : '',\n\n                zIndex   : ''\n\n              })\n\n            ;\n\n            settings.onUnfixed.call(element);\n\n          },\n\n          placeholder: function() {\n\n            module.debug('Removing placeholder content');\n\n            if($placeholder) {\n\n              $placeholder.remove();\n\n            }\n\n          },\n\n          occurred: function(callback) {\n\n            if(callback) {\n\n              var\n\n                occurred = module.cache.occurred\n\n              ;\n\n              if(occurred[callback] !== undefined && occurred[callback] === true) {\n\n                module.debug('Callback can now be called again', callback);\n\n                module.cache.occurred[callback] = false;\n\n              }\n\n            }\n\n            else {\n\n              module.cache.occurred = {};\n\n            }\n\n          }\n\n        },\n\n\n\n        save: {\n\n          calculations: function() {\n\n            module.verbose('Saving all calculations necessary to determine positioning');\n\n            module.save.direction();\n\n            module.save.screenCalculations();\n\n            module.save.elementCalculations();\n\n          },\n\n          occurred: function(callback) {\n\n            if(callback) {\n\n              if(module.cache.occurred[callback] === undefined || (module.cache.occurred[callback] !== true)) {\n\n                module.verbose('Saving callback occurred', callback);\n\n                module.cache.occurred[callback] = true;\n\n              }\n\n            }\n\n          },\n\n          scroll: function(scrollPosition) {\n\n            scrollPosition      = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;\n\n            module.cache.scroll = scrollPosition;\n\n          },\n\n          direction: function() {\n\n            var\n\n              scroll     = module.get.scroll(),\n\n              lastScroll = module.get.lastScroll(),\n\n              direction\n\n            ;\n\n            if(scroll > lastScroll && lastScroll) {\n\n              direction = 'down';\n\n            }\n\n            else if(scroll < lastScroll && lastScroll) {\n\n              direction = 'up';\n\n            }\n\n            else {\n\n              direction = 'static';\n\n            }\n\n            module.cache.direction = direction;\n\n            return module.cache.direction;\n\n          },\n\n          elementPosition: function() {\n\n            var\n\n              element = module.cache.element,\n\n              screen  = module.get.screenSize()\n\n            ;\n\n            module.verbose('Saving element position');\n\n            // (quicker than $.extend)\n\n            element.fits          = (element.height < screen.height);\n\n            element.offset        = $module.offset();\n\n            element.width         = $module.outerWidth();\n\n            element.height        = $module.outerHeight();\n\n            // compensate for scroll in context\n\n            if(module.is.verticallyScrollableContext()) {\n\n              element.offset.top += $context.scrollTop() - $context.offset().top;\n\n            }\n\n            if(module.is.horizontallyScrollableContext()) {\n\n              element.offset.left += $context.scrollLeft - $context.offset().left;\n\n            }\n\n            // store\n\n            module.cache.element = element;\n\n            return element;\n\n          },\n\n          elementCalculations: function() {\n\n            var\n\n              screen     = module.get.screenCalculations(),\n\n              element    = module.get.elementPosition()\n\n            ;\n\n            // offset\n\n            if(settings.includeMargin) {\n\n              element.margin        = {};\n\n              element.margin.top    = parseInt($module.css('margin-top'), 10);\n\n              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);\n\n              element.top    = element.offset.top - element.margin.top;\n\n              element.bottom = element.offset.top + element.height + element.margin.bottom;\n\n            }\n\n            else {\n\n              element.top    = element.offset.top;\n\n              element.bottom = element.offset.top + element.height;\n\n            }\n\n\n\n            // visibility\n\n            element.topPassed        = (screen.top >= element.top);\n\n            element.bottomPassed     = (screen.top >= element.bottom);\n\n            element.topVisible       = (screen.bottom >= element.top) && !element.topPassed;\n\n            element.bottomVisible    = (screen.bottom >= element.bottom) && !element.bottomPassed;\n\n            element.pixelsPassed     = 0;\n\n            element.percentagePassed = 0;\n\n\n\n            // meta calculations\n\n            element.onScreen  = ((element.topVisible || element.passing) && !element.bottomPassed);\n\n            element.passing   = (element.topPassed && !element.bottomPassed);\n\n            element.offScreen = (!element.onScreen);\n\n\n\n            // passing calculations\n\n            if(element.passing) {\n\n              element.pixelsPassed     = (screen.top - element.top);\n\n              element.percentagePassed = (screen.top - element.top) / element.height;\n\n            }\n\n            module.cache.element = element;\n\n            module.verbose('Updated element calculations', element);\n\n            return element;\n\n          },\n\n          screenCalculations: function() {\n\n            var\n\n              scroll = module.get.scroll()\n\n            ;\n\n            module.save.direction();\n\n            module.cache.screen.top    = scroll;\n\n            module.cache.screen.bottom = scroll + module.cache.screen.height;\n\n            return module.cache.screen;\n\n          },\n\n          screenSize: function() {\n\n            module.verbose('Saving window position');\n\n            module.cache.screen = {\n\n              height: $context.height()\n\n            };\n\n          },\n\n          position: function() {\n\n            module.save.screenSize();\n\n            module.save.elementPosition();\n\n          }\n\n        },\n\n\n\n        get: {\n\n          pixelsPassed: function(amount) {\n\n            var\n\n              element = module.get.elementCalculations()\n\n            ;\n\n            if(amount.search('%') > -1) {\n\n              return ( element.height * (parseInt(amount, 10) / 100) );\n\n            }\n\n            return parseInt(amount, 10);\n\n          },\n\n          occurred: function(callback) {\n\n            return (module.cache.occurred !== undefined)\n\n              ? module.cache.occurred[callback] || false\n\n              : false\n\n            ;\n\n          },\n\n          direction: function() {\n\n            if(module.cache.direction === undefined) {\n\n              module.save.direction();\n\n            }\n\n            return module.cache.direction;\n\n          },\n\n          elementPosition: function() {\n\n            if(module.cache.element === undefined) {\n\n              module.save.elementPosition();\n\n            }\n\n            return module.cache.element;\n\n          },\n\n          elementCalculations: function() {\n\n            if(module.cache.element === undefined) {\n\n              module.save.elementCalculations();\n\n            }\n\n            return module.cache.element;\n\n          },\n\n          screenCalculations: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.save.screenCalculations();\n\n            }\n\n            return module.cache.screen;\n\n          },\n\n          screenSize: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.save.screenSize();\n\n            }\n\n            return module.cache.screen;\n\n          },\n\n          scroll: function() {\n\n            if(module.cache.scroll === undefined) {\n\n              module.save.scroll();\n\n            }\n\n            return module.cache.scroll;\n\n          },\n\n          lastScroll: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.debug('First scroll event, no last scroll could be found');\n\n              return false;\n\n            }\n\n            return module.cache.screen.top;\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            settings[name] = value;\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/src/definitions/behaviors/api.js",
          "match_lines": [
            43,
            1004
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.api.settings, parameters)\n\n          : $.extend({}, $.fn.api.settings),\n\n\n\n        // internal aliases\n\n        namespace       = settings.namespace,\n\n        metadata        = settings.metadata,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        className       = settings.className,\n\n\n\n        // define namespaces for modules\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        // element that creates request\n\n        $module         = $(this),\n\n        $form           = $module.closest(selector.form),\n\n\n\n        // context used for state\n\n        $context        = (settings.stateContext)\n\n          ? $(settings.stateContext)\n\n          : $module,\n\n\n\n        // request details\n\n        ajaxSettings,\n\n        requestSettings,\n\n        url,\n\n        data,\n\n        requestStartTime,\n\n\n\n        // standard module\n\n        element         = this,\n\n        context         = $context[0],\n\n        instance        = $module.data(moduleNamespace),\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          if(!methodInvoked) {\n\n            module.bind.events();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, instance)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module for', element);\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            var\n\n              triggerEvent = module.get.event()\n\n            ;\n\n            if( triggerEvent ) {\n\n              module.verbose('Attaching API events to element', triggerEvent);\n\n              $module\n\n                .on(triggerEvent + eventNamespace, module.event.trigger)\n\n              ;\n\n            }\n\n            else if(settings.on == 'now') {\n\n              module.debug('Querying API endpoint immediately');\n\n              module.query();\n\n            }\n\n          }\n\n        },\n\n\n\n        decode: {\n\n          json: function(response) {\n\n            if(response !== undefined && typeof response == 'string') {\n\n              try {\n\n               response = JSON.parse(response);\n\n              }\n\n              catch(e) {\n\n                // isnt json string\n\n              }\n\n            }\n\n            return response;\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cachedResponse: function(url) {\n\n            var\n\n              response\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            response = sessionStorage.getItem(url);\n\n            module.debug('Using cached response', url, response);\n\n            response = module.decode.json(response);\n\n            return response;\n\n          }\n\n        },\n\n        write: {\n\n          cachedResponse: function(url, response) {\n\n            if(response && response === '') {\n\n              module.debug('Response empty, not caching', response);\n\n              return;\n\n            }\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            if( $.isPlainObject(response) ) {\n\n              response = JSON.stringify(response);\n\n            }\n\n            sessionStorage.setItem(url, response);\n\n            module.verbose('Storing cached response for url', url, response);\n\n          }\n\n        },\n\n\n\n        query: function() {\n\n\n\n          if(module.is.disabled()) {\n\n            module.debug('Element is disabled API request aborted');\n\n            return;\n\n          }\n\n\n\n          if(module.is.loading()) {\n\n            if(settings.interruptRequests) {\n\n              module.debug('Interrupting previous request');\n\n              module.abort();\n\n            }\n\n            else {\n\n              module.debug('Cancelling request, previous request is still pending');\n\n              return;\n\n            }\n\n          }\n\n\n\n          // pass element metadata to url (value, text)\n\n          if(settings.defaultData) {\n\n            $.extend(true, settings.urlData, module.get.defaultData());\n\n          }\n\n\n\n          // Add form content\n\n          if(settings.serializeForm) {\n\n            settings.data = module.add.formData(settings.data);\n\n          }\n\n\n\n          // call beforesend and get any settings changes\n\n          requestSettings = module.get.settings();\n\n\n\n          // check if before send cancelled request\n\n          if(requestSettings === false) {\n\n            module.cancelled = true;\n\n            module.error(error.beforeSend);\n\n            return;\n\n          }\n\n          else {\n\n            module.cancelled = false;\n\n          }\n\n\n\n          // get url\n\n          url = module.get.templatedURL();\n\n\n\n          if(!url && !module.is.mocked()) {\n\n            module.error(error.missingURL);\n\n            return;\n\n          }\n\n\n\n          // replace variables\n\n          url = module.add.urlData( url );\n\n          // missing url parameters\n\n          if( !url && !module.is.mocked()) {\n\n            return;\n\n          }\n\n\n\n          requestSettings.url = settings.base + url;\n\n\n\n          // look for jQuery ajax parameters in settings\n\n          ajaxSettings = $.extend(true, {}, settings, {\n\n            type       : settings.method || settings.type,\n\n            data       : data,\n\n            url        : settings.base + url,\n\n            beforeSend : settings.beforeXHR,\n\n            success    : function() {},\n\n            failure    : function() {},\n\n            complete   : function() {}\n\n          });\n\n\n\n          module.debug('Querying URL', ajaxSettings.url);\n\n          module.verbose('Using AJAX settings', ajaxSettings);\n\n          if(settings.cache === 'local' && module.read.cachedResponse(url)) {\n\n            module.debug('Response returned from local cache');\n\n            module.request = module.create.request();\n\n            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);\n\n            return;\n\n          }\n\n\n\n          if( !settings.throttle ) {\n\n            module.debug('Sending request', data, ajaxSettings.method);\n\n            module.send.request();\n\n          }\n\n          else {\n\n            if(!settings.throttleFirstRequest && !module.timer) {\n\n              module.debug('Sending request', data, ajaxSettings.method);\n\n              module.send.request();\n\n              module.timer = setTimeout(function(){}, settings.throttle);\n\n            }\n\n            else {\n\n              module.debug('Throttling request', settings.throttle);\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.timer) {\n\n                  delete module.timer;\n\n                }\n\n                module.debug('Sending throttled request', data, ajaxSettings.method);\n\n                module.send.request();\n\n              }, settings.throttle);\n\n            }\n\n          }\n\n\n\n        },\n\n\n\n        should: {\n\n          removeError: function() {\n\n            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );\n\n          }\n\n        },\n\n\n\n        is: {\n\n          disabled: function() {\n\n            return ($module.filter(selector.disabled).length > 0);\n\n          },\n\n          expectingJSON: function() {\n\n            return settings.dataType === 'json' || settings.dataType === 'jsonp';\n\n          },\n\n          form: function() {\n\n            return $module.is('form') || $context.is('form');\n\n          },\n\n          mocked: function() {\n\n            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);\n\n          },\n\n          input: function() {\n\n            return $module.is('input');\n\n          },\n\n          loading: function() {\n\n            return (module.request)\n\n              ? (module.request.state() == 'pending')\n\n              : false\n\n            ;\n\n          },\n\n          abortedRequest: function(xhr) {\n\n            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\n\n              module.verbose('XHR request determined to be aborted');\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('XHR request was not aborted');\n\n              return false;\n\n            }\n\n          },\n\n          validResponse: function(response) {\n\n            if( (!module.is.expectingJSON()) || !$.isFunction(settings.successTest) ) {\n\n              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);\n\n              return true;\n\n            }\n\n            module.debug('Checking JSON returned success', settings.successTest, response);\n\n            if( settings.successTest(response) ) {\n\n              module.debug('Response passed success test', response);\n\n              return true;\n\n            }\n\n            else {\n\n              module.debug('Response failed success test', response);\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        was: {\n\n          cancelled: function() {\n\n            return (module.cancelled || false);\n\n          },\n\n          succesful: function() {\n\n            return (module.request && module.request.state() == 'resolved');\n\n          },\n\n          failure: function() {\n\n            return (module.request && module.request.state() == 'rejected');\n\n          },\n\n          complete: function() {\n\n            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );\n\n          }\n\n        },\n\n\n\n        add: {\n\n          urlData: function(url, urlData) {\n\n            var\n\n              requiredVariables,\n\n              optionalVariables\n\n            ;\n\n            if(url) {\n\n              requiredVariables = url.match(settings.regExp.required);\n\n              optionalVariables = url.match(settings.regExp.optional);\n\n              urlData           = urlData || settings.urlData;\n\n              if(requiredVariables) {\n\n                module.debug('Looking for required URL variables', requiredVariables);\n\n                $.each(requiredVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(2, templatedString.length - 3)\n\n                      : templatedString.substr(1, templatedString.length - 2),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // remove value\n\n                  if(value === undefined) {\n\n                    module.error(error.requiredParameter, variable, url);\n\n                    url = false;\n\n                    return false;\n\n                  }\n\n                  else {\n\n                    module.verbose('Found required variable', variable, value);\n\n                    value = (settings.encodeParameters)\n\n                      ? module.get.urlEncodedValue(value)\n\n                      : value\n\n                    ;\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                });\n\n              }\n\n              if(optionalVariables) {\n\n                module.debug('Looking for optional URL variables', requiredVariables);\n\n                $.each(optionalVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {/$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(3, templatedString.length - 4)\n\n                      : templatedString.substr(2, templatedString.length - 3),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // optional replacement\n\n                  if(value !== undefined) {\n\n                    module.verbose('Optional variable Found', variable, value);\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                  else {\n\n                    module.verbose('Optional variable not found', variable);\n\n                    // remove preceding slash if set\n\n                    if(url.indexOf('/' + templatedString) !== -1) {\n\n                      url = url.replace('/' + templatedString, '');\n\n                    }\n\n                    else {\n\n                      url = url.replace(templatedString, '');\n\n                    }\n\n                  }\n\n                });\n\n              }\n\n            }\n\n            return url;\n\n          },\n\n          formData: function(data) {\n\n            var\n\n              canSerialize = ($.fn.serializeObject !== undefined),\n\n              formData     = (canSerialize)\n\n                ? $form.serializeObject()\n\n                : $form.serialize(),\n\n              hasOtherData\n\n            ;\n\n            data         = data || settings.data;\n\n            hasOtherData = $.isPlainObject(data);\n\n\n\n            if(hasOtherData) {\n\n              if(canSerialize) {\n\n                module.debug('Extending existing data with form data', data, formData);\n\n                data = $.extend(true, {}, data, formData);\n\n              }\n\n              else {\n\n                module.error(error.missingSerialize);\n\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\n\n                data = formData;\n\n              }\n\n            }\n\n            else {\n\n              module.debug('Adding form data', formData);\n\n              data = formData;\n\n            }\n\n            return data;\n\n          }\n\n        },\n\n\n\n        send: {\n\n          request: function() {\n\n            module.set.loading();\n\n            module.request = module.create.request();\n\n            if( module.is.mocked() ) {\n\n              module.mockedXHR = module.create.mockedXHR();\n\n            }\n\n            else {\n\n              module.xhr = module.create.xhr();\n\n            }\n\n            settings.onRequest.call(context, module.request, module.xhr);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          trigger: function(event) {\n\n            module.query();\n\n            if(event.type == 'submit' || event.type == 'click') {\n\n              event.preventDefault();\n\n            }\n\n          },\n\n          xhr: {\n\n            always: function() {\n\n              // nothing special\n\n            },\n\n            done: function(response, textStatus, xhr) {\n\n              var\n\n                context            = this,\n\n                elapsedTime        = (new Date().getTime() - requestStartTime),\n\n                timeLeft           = (settings.loadingDuration - elapsedTime),\n\n                translatedResponse = ( $.isFunction(settings.onResponse) )\n\n                  ? module.is.expectingJSON()\n\n                    ? settings.onResponse.call(context, $.extend(true, {}, response))\n\n                    : settings.onResponse.call(context, response)\n\n                  : false\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(translatedResponse) {\n\n                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);\n\n                response = translatedResponse;\n\n              }\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.validResponse(response) ) {\n\n                  module.request.resolveWith(context, [response, xhr]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'invalid']);\n\n                }\n\n              }, timeLeft);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                context     = this,\n\n                elapsedTime = (new Date().getTime() - requestStartTime),\n\n                timeLeft    = (settings.loadingDuration - elapsedTime)\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.abortedRequest(xhr) ) {\n\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\n\n                }\n\n              }, timeLeft);\n\n            }\n\n          },\n\n          request: {\n\n            done: function(response, xhr) {\n\n              module.debug('Successful API Response', response);\n\n              if(settings.cache === 'local' && url) {\n\n                module.write.cachedResponse(url, response);\n\n                module.debug('Saving server response locally', module.cache);\n\n              }\n\n              settings.onSuccess.call(context, response, $module, xhr);\n\n            },\n\n            complete: function(firstParameter, secondParameter) {\n\n              var\n\n                xhr,\n\n                response\n\n              ;\n\n              // have to guess callback parameters based on request success\n\n              if( module.was.succesful() ) {\n\n                response = firstParameter;\n\n                xhr      = secondParameter;\n\n              }\n\n              else {\n\n                xhr      = firstParameter;\n\n                response = module.get.responseFromXHR(xhr);\n\n              }\n\n              module.remove.loading();\n\n              settings.onComplete.call(context, response, $module, xhr);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                // pull response from xhr if available\n\n                response     = module.get.responseFromXHR(xhr),\n\n                errorMessage = module.get.errorFromRequest(response, status, httpMessage)\n\n              ;\n\n              if(status == 'aborted') {\n\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\n\n                settings.onAbort.call(context, status, $module, xhr);\n\n                return true;\n\n              }\n\n              else if(status == 'invalid') {\n\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\n\n              }\n\n              else if(status == 'error') {\n\n                if(xhr !== undefined) {\n\n                  module.debug('XHR produced a server error', status, httpMessage);\n\n                  // make sure we have an error to display to console\n\n                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\n\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\n\n                  }\n\n                  settings.onError.call(context, errorMessage, $module, xhr);\n\n                }\n\n              }\n\n\n\n              if(settings.errorDuration && status !== 'aborted') {\n\n                module.debug('Adding error state');\n\n                module.set.error();\n\n                if( module.should.removeError() ) {\n\n                  setTimeout(module.remove.error, settings.errorDuration);\n\n                }\n\n              }\n\n              module.debug('API Request failed', errorMessage, xhr);\n\n              settings.onFailure.call(context, response, $module, xhr);\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n\n\n          request: function() {\n\n            // api request promise\n\n            return $.Deferred()\n\n              .always(module.event.request.complete)\n\n              .done(module.event.request.done)\n\n              .fail(module.event.request.fail)\n\n            ;\n\n          },\n\n\n\n          mockedXHR: function () {\n\n            var\n\n              // xhr does not simulate these properties of xhr but must return them\n\n              textStatus     = false,\n\n              status         = false,\n\n              httpMessage    = false,\n\n              responder      = settings.mockResponse      || settings.response,\n\n              asyncResponder = settings.mockResponseAsync || settings.responseAsync,\n\n              asyncCallback,\n\n              response,\n\n              mockedXHR\n\n            ;\n\n\n\n            mockedXHR = $.Deferred()\n\n              .always(module.event.xhr.complete)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n\n\n            if(responder) {\n\n              if( $.isFunction(responder) ) {\n\n                module.debug('Using specified synchronous callback', responder);\n\n                response = responder.call(context, requestSettings);\n\n              }\n\n              else {\n\n                module.debug('Using settings specified response', responder);\n\n                response = responder;\n\n              }\n\n              // simulating response\n\n              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n            }\n\n            else if( $.isFunction(asyncResponder) ) {\n\n              asyncCallback = function(response) {\n\n                module.debug('Async callback returned response', response);\n\n\n\n                if(response) {\n\n                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n                }\n\n                else {\n\n                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);\n\n                }\n\n              };\n\n              module.debug('Using specified async response callback', asyncResponder);\n\n              asyncResponder.call(context, requestSettings, asyncCallback);\n\n            }\n\n            return mockedXHR;\n\n          },\n\n\n\n          xhr: function() {\n\n            var\n\n              xhr\n\n            ;\n\n            // ajax request promise\n\n            xhr = $.ajax(ajaxSettings)\n\n              .always(module.event.xhr.always)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n            module.verbose('Created server request', xhr, ajaxSettings);\n\n            return xhr;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          error: function() {\n\n            module.verbose('Adding error state to element', $context);\n\n            $context.addClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Adding loading state to element', $context);\n\n            $context.addClass(className.loading);\n\n            requestStartTime = new Date().getTime();\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          error: function() {\n\n            module.verbose('Removing error state from element', $context);\n\n            $context.removeClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Removing loading state from element', $context);\n\n            $context.removeClass(className.loading);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          responseFromXHR: function(xhr) {\n\n            return $.isPlainObject(xhr)\n\n              ? (module.is.expectingJSON())\n\n                ? module.decode.json(xhr.responseText)\n\n                : xhr.responseText\n\n              : false\n\n            ;\n\n          },\n\n          errorFromRequest: function(response, status, httpMessage) {\n\n            return ($.isPlainObject(response) && response.error !== undefined)\n\n              ? response.error // use json error message\n\n              : (settings.error[status] !== undefined) // use server error message\n\n                ? settings.error[status]\n\n                : httpMessage\n\n            ;\n\n          },\n\n          request: function() {\n\n            return module.request || false;\n\n          },\n\n          xhr: function() {\n\n            return module.xhr || false;\n\n          },\n\n          settings: function() {\n\n            var\n\n              runSettings\n\n            ;\n\n            runSettings = settings.beforeSend.call(context, settings);\n\n            if(runSettings) {\n\n              if(runSettings.success !== undefined) {\n\n                module.debug('Legacy success callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.success);\n\n                runSettings.onSuccess = runSettings.success;\n\n              }\n\n              if(runSettings.failure !== undefined) {\n\n                module.debug('Legacy failure callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.failure);\n\n                runSettings.onFailure = runSettings.failure;\n\n              }\n\n              if(runSettings.complete !== undefined) {\n\n                module.debug('Legacy complete callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.complete);\n\n                runSettings.onComplete = runSettings.complete;\n\n              }\n\n            }\n\n            if(runSettings === undefined) {\n\n              module.error(error.noReturnedValue);\n\n            }\n\n            if(runSettings === false) {\n\n              return runSettings;\n\n            }\n\n            return (runSettings !== undefined)\n\n              ? $.extend(true, {}, runSettings)\n\n              : $.extend(true, {}, settings)\n\n            ;\n\n          },\n\n          urlEncodedValue: function(value) {\n\n            var\n\n              decodedValue   = window.decodeURIComponent(value),\n\n              encodedValue   = window.encodeURIComponent(value),\n\n              alreadyEncoded = (decodedValue !== value)\n\n            ;\n\n            if(alreadyEncoded) {\n\n              module.debug('URL value is already encoded, avoiding double encoding', value);\n\n              return value;\n\n            }\n\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\n\n            return encodedValue;\n\n          },\n\n          defaultData: function() {\n\n            var\n\n              data = {}\n\n            ;\n\n            if( !$.isWindow(element) ) {\n\n              if( module.is.input() ) {\n\n                data.value = $module.val();\n\n              }\n\n              else if( module.is.form() ) {\n\n\n\n              }\n\n              else {\n\n                data.text = $module.text();\n\n              }\n\n            }\n\n            return data;\n\n          },\n\n          event: function() {\n\n            if( $.isWindow(element) || settings.on == 'now' ) {\n\n              module.debug('API called without element, no events attached');\n\n              return false;\n\n            }\n\n            else if(settings.on == 'auto') {\n\n              if( $module.is('input') ) {\n\n                return (element.oninput !== undefined)\n\n                  ? 'input'\n\n                  : (element.onpropertychange !== undefined)\n\n                    ? 'propertychange'\n\n                    : 'keyup'\n\n                ;\n\n              }\n\n              else if( $module.is('form') ) {\n\n                return 'submit';\n\n              }\n\n              else {\n\n                return 'click';\n\n              }\n\n            }\n\n            else {\n\n              return settings.on;\n\n            }\n\n          },\n\n          templatedURL: function(action) {\n\n            action = action || $module.data(metadata.action) || settings.action || false;\n\n            url    = $module.data(metadata.url) || settings.url || false;\n\n            if(url) {\n\n              module.debug('Using specified url', url);\n\n              return url;\n\n            }\n\n            if(action) {\n\n              module.debug('Looking up url for action', action, settings.api);\n\n              if(settings.api[action] === undefined && !module.is.mocked()) {\n\n                module.error(error.missingAction, settings.action, settings.api);\n\n                return;\n\n              }\n\n              url = settings.api[action];\n\n            }\n\n            else if( module.is.form() ) {\n\n              url = $module.attr('action') || $context.attr('action') || false;\n\n              module.debug('No url or action specified, defaulting to form action', url);\n\n            }\n\n            return url;\n\n          }\n\n        },\n\n\n\n        abort: function() {\n\n          var\n\n            xhr = module.get.xhr()\n\n          ;\n\n          if( xhr && xhr.state() !== 'resolved') {\n\n            module.debug('Cancelling API request');\n\n            xhr.abort();\n\n          }\n\n        },\n\n\n\n        // reset state\n\n        reset: function() {\n\n          module.remove.error();\n\n          module.remove.loading();\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                //'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/src/definitions/behaviors/visibility.js",
          "match_lines": [
            41,
            1186
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings        = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.visibility.settings, parameters)\n\n          : $.extend({}, $.fn.visibility.settings),\n\n\n\n        className       = settings.className,\n\n        namespace       = settings.namespace,\n\n        error           = settings.error,\n\n        metadata        = settings.metadata,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $window         = $(window),\n\n\n\n        $module         = $(this),\n\n        $context        = $(settings.context),\n\n\n\n        $placeholder,\n\n\n\n        selector        = $module.selector || '',\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        requestAnimationFrame = window.requestAnimationFrame\n\n          || window.mozRequestAnimationFrame\n\n          || window.webkitRequestAnimationFrame\n\n          || window.msRequestAnimationFrame\n\n          || function(callback) { setTimeout(callback, 0); },\n\n\n\n        element         = this,\n\n        disabled        = false,\n\n\n\n        contextObserver,\n\n        observer,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing', settings);\n\n\n\n          module.setup.cache();\n\n\n\n          if( module.should.trackChanges() ) {\n\n\n\n            if(settings.type == 'image') {\n\n              module.setup.image();\n\n            }\n\n            if(settings.type == 'fixed') {\n\n              module.setup.fixed();\n\n            }\n\n\n\n            if(settings.observeChanges) {\n\n              module.observeChanges();\n\n            }\n\n            module.bind.events();\n\n          }\n\n\n\n          module.save.position();\n\n          if( !module.is.visible() ) {\n\n            module.error(error.visible, $module);\n\n          }\n\n\n\n          if(settings.initialCheck) {\n\n            module.checkVisibility();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.debug('Storing instance', module);\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n          instance = module;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module');\n\n          if(observer) {\n\n            observer.disconnect();\n\n          }\n\n          if(contextObserver) {\n\n            contextObserver.disconnect();\n\n          }\n\n          $window\n\n            .off('load'   + eventNamespace, module.event.load)\n\n            .off('resize' + eventNamespace, module.event.resize)\n\n          ;\n\n          $context\n\n            .off('scroll'       + eventNamespace, module.event.scroll)\n\n            .off('scrollchange' + eventNamespace, module.event.scrollchange)\n\n          ;\n\n          if(settings.type == 'fixed') {\n\n            module.resetFixed();\n\n            module.remove.placeholder();\n\n          }\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n        },\n\n\n\n        observeChanges: function() {\n\n          if('MutationObserver' in window) {\n\n            contextObserver = new MutationObserver(module.event.contextChanged);\n\n            observer        = new MutationObserver(module.event.changed);\n\n            contextObserver.observe(document, {\n\n              childList : true,\n\n              subtree   : true\n\n            });\n\n            observer.observe(element, {\n\n              childList : true,\n\n              subtree   : true\n\n            });\n\n            module.debug('Setting up mutation observer', observer);\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.verbose('Binding visibility events to scroll and resize');\n\n            if(settings.refreshOnLoad) {\n\n              $window\n\n                .on('load'   + eventNamespace, module.event.load)\n\n              ;\n\n            }\n\n            $window\n\n              .on('resize' + eventNamespace, module.event.resize)\n\n            ;\n\n            // pub/sub pattern\n\n            $context\n\n              .off('scroll'      + eventNamespace)\n\n              .on('scroll'       + eventNamespace, module.event.scroll)\n\n              .on('scrollchange' + eventNamespace, module.event.scrollchange)\n\n            ;\n\n          }\n\n        },\n\n\n\n        event: {\n\n          changed: function(mutations) {\n\n            module.verbose('DOM tree modified, updating visibility calculations');\n\n            module.timer = setTimeout(function() {\n\n              module.verbose('DOM tree modified, updating sticky menu');\n\n              module.refresh();\n\n            }, 100);\n\n          },\n\n          contextChanged: function(mutations) {\n\n            [].forEach.call(mutations, function(mutation) {\n\n              if(mutation.removedNodes) {\n\n                [].forEach.call(mutation.removedNodes, function(node) {\n\n                  if(node == element || $(node).find(element).length > 0) {\n\n                    module.debug('Element removed from DOM, tearing down events');\n\n                    module.destroy();\n\n                  }\n\n                });\n\n              }\n\n            });\n\n          },\n\n          resize: function() {\n\n            module.debug('Window resized');\n\n            if(settings.refreshOnResize) {\n\n              requestAnimationFrame(module.refresh);\n\n            }\n\n          },\n\n          load: function() {\n\n            module.debug('Page finished loading');\n\n            requestAnimationFrame(module.refresh);\n\n          },\n\n          // publishes scrollchange event on one scroll\n\n          scroll: function() {\n\n            if(settings.throttle) {\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);\n\n              }, settings.throttle);\n\n            }\n\n            else {\n\n              requestAnimationFrame(function() {\n\n                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);\n\n              });\n\n            }\n\n          },\n\n          // subscribes to scrollchange\n\n          scrollchange: function(event, scrollPosition) {\n\n            module.checkVisibility(scrollPosition);\n\n          },\n\n        },\n\n\n\n        precache: function(images, callback) {\n\n          if (!(images instanceof Array)) {\n\n            images = [images];\n\n          }\n\n          var\n\n            imagesLength  = images.length,\n\n            loadedCounter = 0,\n\n            cache         = [],\n\n            cacheImage    = document.createElement('img'),\n\n            handleLoad    = function() {\n\n              loadedCounter++;\n\n              if (loadedCounter >= images.length) {\n\n                if ($.isFunction(callback)) {\n\n                  callback();\n\n                }\n\n              }\n\n            }\n\n          ;\n\n          while (imagesLength--) {\n\n            cacheImage         = document.createElement('img');\n\n            cacheImage.onload  = handleLoad;\n\n            cacheImage.onerror = handleLoad;\n\n            cacheImage.src     = images[imagesLength];\n\n            cache.push(cacheImage);\n\n          }\n\n        },\n\n\n\n        enableCallbacks: function() {\n\n          module.debug('Allowing callbacks to occur');\n\n          disabled = false;\n\n        },\n\n\n\n        disableCallbacks: function() {\n\n          module.debug('Disabling all callbacks temporarily');\n\n          disabled = true;\n\n        },\n\n\n\n        should: {\n\n          trackChanges: function() {\n\n            if(methodInvoked) {\n\n              module.debug('One time query, no need to bind events');\n\n              return false;\n\n            }\n\n            module.debug('Callbacks being attached');\n\n            return true;\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          cache: function() {\n\n            module.cache = {\n\n              occurred : {},\n\n              screen   : {},\n\n              element  : {},\n\n            };\n\n          },\n\n          image: function() {\n\n            var\n\n              src = $module.data(metadata.src)\n\n            ;\n\n            if(src) {\n\n              module.verbose('Lazy loading image', src);\n\n              settings.once           = true;\n\n              settings.observeChanges = false;\n\n\n\n              // show when top visible\n\n              settings.onOnScreen = function() {\n\n                module.debug('Image on screen', element);\n\n                module.precache(src, function() {\n\n                  module.set.image(src, function() {\n\n                    loadedCount++;\n\n                    if(loadedCount == moduleCount) {\n\n                      settings.onAllLoaded.call(this);\n\n                    }\n\n                    settings.onLoad.call(this);\n\n                  });\n\n                });\n\n              };\n\n            }\n\n          },\n\n          fixed: function() {\n\n            module.debug('Setting up fixed');\n\n            settings.once           = false;\n\n            settings.observeChanges = false;\n\n            settings.initialCheck   = true;\n\n            settings.refreshOnLoad  = true;\n\n            if(!parameters.transition) {\n\n              settings.transition = false;\n\n            }\n\n            module.create.placeholder();\n\n            module.debug('Added placeholder', $placeholder);\n\n            settings.onTopPassed = function() {\n\n              module.debug('Element passed, adding fixed position', $module);\n\n              module.show.placeholder();\n\n              module.set.fixed();\n\n              if(settings.transition) {\n\n                if($.fn.transition !== undefined) {\n\n                  $module.transition(settings.transition, settings.duration);\n\n                }\n\n              }\n\n            };\n\n            settings.onTopPassedReverse = function() {\n\n              module.debug('Element returned to position, removing fixed', $module);\n\n              module.hide.placeholder();\n\n              module.remove.fixed();\n\n            };\n\n          }\n\n        },\n\n\n\n        create: {\n\n          placeholder: function() {\n\n            module.verbose('Creating fixed position placeholder');\n\n            $placeholder = $module\n\n              .clone(false)\n\n              .css('display', 'none')\n\n              .addClass(className.placeholder)\n\n              .insertAfter($module)\n\n            ;\n\n          }\n\n        },\n\n\n\n        show: {\n\n          placeholder: function() {\n\n            module.verbose('Showing placeholder');\n\n            $placeholder\n\n              .css('display', 'block')\n\n              .css('visibility', 'hidden')\n\n            ;\n\n          }\n\n        },\n\n        hide: {\n\n          placeholder: function() {\n\n            module.verbose('Hiding placeholder');\n\n            $placeholder\n\n              .css('display', 'none')\n\n              .css('visibility', '')\n\n            ;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          fixed: function() {\n\n            module.verbose('Setting element to fixed position');\n\n            $module\n\n              .addClass(className.fixed)\n\n              .css({\n\n                position : 'fixed',\n\n                top      : settings.offset + 'px',\n\n                left     : 'auto',\n\n                zIndex   : settings.zIndex\n\n              })\n\n            ;\n\n            settings.onFixed.call(element);\n\n          },\n\n          image: function(src, callback) {\n\n            $module\n\n              .attr('src', src)\n\n            ;\n\n            if(settings.transition) {\n\n              if( $.fn.transition !== undefined) {\n\n                if($module.hasClass(className.visible)) {\n\n                  module.debug('Transition already occurred on this image, skipping animation');\n\n                  return;\n\n                }\n\n                $module.transition(settings.transition, settings.duration, callback);\n\n              }\n\n              else {\n\n                $module.fadeIn(settings.duration, callback);\n\n              }\n\n            }\n\n            else {\n\n              $module.show();\n\n            }\n\n          }\n\n        },\n\n\n\n        is: {\n\n          onScreen: function() {\n\n            var\n\n              calculations   = module.get.elementCalculations()\n\n            ;\n\n            return calculations.onScreen;\n\n          },\n\n          offScreen: function() {\n\n            var\n\n              calculations   = module.get.elementCalculations()\n\n            ;\n\n            return calculations.offScreen;\n\n          },\n\n          visible: function() {\n\n            if(module.cache && module.cache.element) {\n\n              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);\n\n            }\n\n            return false;\n\n          },\n\n          verticallyScrollableContext: function() {\n\n            var\n\n              overflowY = ($context.get(0) !== window)\n\n                ? $context.css('overflow-y')\n\n                : false\n\n            ;\n\n            return (overflowY == 'auto' || overflowY == 'scroll');\n\n          },\n\n          horizontallyScrollableContext: function() {\n\n            var\n\n              overflowX = ($context.get(0) !== window)\n\n                ? $context.css('overflow-x')\n\n                : false\n\n            ;\n\n            return (overflowX == 'auto' || overflowX == 'scroll');\n\n          }\n\n        },\n\n\n\n        refresh: function() {\n\n          module.debug('Refreshing constants (width/height)');\n\n          if(settings.type == 'fixed') {\n\n            module.resetFixed();\n\n          }\n\n          module.reset();\n\n          module.save.position();\n\n          if(settings.checkOnRefresh) {\n\n            module.checkVisibility();\n\n          }\n\n          settings.onRefresh.call(element);\n\n        },\n\n\n\n        resetFixed: function () {\n\n          module.remove.fixed();\n\n          module.remove.occurred();\n\n        },\n\n\n\n        reset: function() {\n\n          module.verbose('Resetting all cached values');\n\n          if( $.isPlainObject(module.cache) ) {\n\n            module.cache.screen = {};\n\n            module.cache.element = {};\n\n          }\n\n        },\n\n\n\n        checkVisibility: function(scroll) {\n\n          module.verbose('Checking visibility of element', module.cache.element);\n\n\n\n          if( !disabled && module.is.visible() ) {\n\n\n\n            // save scroll position\n\n            module.save.scroll(scroll);\n\n\n\n            // update calculations derived from scroll\n\n            module.save.calculations();\n\n\n\n            // percentage\n\n            module.passed();\n\n\n\n            // reverse (must be first)\n\n            module.passingReverse();\n\n            module.topVisibleReverse();\n\n            module.bottomVisibleReverse();\n\n            module.topPassedReverse();\n\n            module.bottomPassedReverse();\n\n\n\n            // one time\n\n            module.onScreen();\n\n            module.offScreen();\n\n            module.passing();\n\n            module.topVisible();\n\n            module.bottomVisible();\n\n            module.topPassed();\n\n            module.bottomPassed();\n\n\n\n            // on update callback\n\n            if(settings.onUpdate) {\n\n              settings.onUpdate.call(element, module.get.elementCalculations());\n\n            }\n\n          }\n\n        },\n\n\n\n        passed: function(amount, newCallback) {\n\n          var\n\n            calculations   = module.get.elementCalculations(),\n\n            amountInPixels\n\n          ;\n\n          // assign callback\n\n          if(amount && newCallback) {\n\n            settings.onPassed[amount] = newCallback;\n\n          }\n\n          else if(amount !== undefined) {\n\n            return (module.get.pixelsPassed(amount) > calculations.pixelsPassed);\n\n          }\n\n          else if(calculations.passing) {\n\n            $.each(settings.onPassed, function(amount, callback) {\n\n              if(calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {\n\n                module.execute(callback, amount);\n\n              }\n\n              else if(!settings.once) {\n\n                module.remove.occurred(callback);\n\n              }\n\n            });\n\n          }\n\n        },\n\n\n\n        onScreen: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onOnScreen,\n\n            callbackName = 'onScreen'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for onScreen', newCallback);\n\n            settings.onOnScreen = newCallback;\n\n          }\n\n          if(calculations.onScreen) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.onOnScreen;\n\n          }\n\n        },\n\n\n\n        offScreen: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onOffScreen,\n\n            callbackName = 'offScreen'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for offScreen', newCallback);\n\n            settings.onOffScreen = newCallback;\n\n          }\n\n          if(calculations.offScreen) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.onOffScreen;\n\n          }\n\n        },\n\n\n\n        passing: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onPassing,\n\n            callbackName = 'passing'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for passing', newCallback);\n\n            settings.onPassing = newCallback;\n\n          }\n\n          if(calculations.passing) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return calculations.passing;\n\n          }\n\n        },\n\n\n\n\n\n        topVisible: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopVisible,\n\n            callbackName = 'topVisible'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top visible', newCallback);\n\n            settings.onTopVisible = newCallback;\n\n          }\n\n          if(calculations.topVisible) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.topVisible;\n\n          }\n\n        },\n\n\n\n        bottomVisible: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomVisible,\n\n            callbackName = 'bottomVisible'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom visible', newCallback);\n\n            settings.onBottomVisible = newCallback;\n\n          }\n\n          if(calculations.bottomVisible) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.bottomVisible;\n\n          }\n\n        },\n\n\n\n        topPassed: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopPassed,\n\n            callbackName = 'topPassed'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top passed', newCallback);\n\n            settings.onTopPassed = newCallback;\n\n          }\n\n          if(calculations.topPassed) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.topPassed;\n\n          }\n\n        },\n\n\n\n        bottomPassed: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomPassed,\n\n            callbackName = 'bottomPassed'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom passed', newCallback);\n\n            settings.onBottomPassed = newCallback;\n\n          }\n\n          if(calculations.bottomPassed) {\n\n            module.execute(callback, callbackName);\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return calculations.bottomPassed;\n\n          }\n\n        },\n\n\n\n        passingReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onPassingReverse,\n\n            callbackName = 'passingReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for passing reverse', newCallback);\n\n            settings.onPassingReverse = newCallback;\n\n          }\n\n          if(!calculations.passing) {\n\n            if(module.get.occurred('passing')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback !== undefined) {\n\n            return !calculations.passing;\n\n          }\n\n        },\n\n\n\n\n\n        topVisibleReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopVisibleReverse,\n\n            callbackName = 'topVisibleReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top visible reverse', newCallback);\n\n            settings.onTopVisibleReverse = newCallback;\n\n          }\n\n          if(!calculations.topVisible) {\n\n            if(module.get.occurred('topVisible')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.topVisible;\n\n          }\n\n        },\n\n\n\n        bottomVisibleReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomVisibleReverse,\n\n            callbackName = 'bottomVisibleReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom visible reverse', newCallback);\n\n            settings.onBottomVisibleReverse = newCallback;\n\n          }\n\n          if(!calculations.bottomVisible) {\n\n            if(module.get.occurred('bottomVisible')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.bottomVisible;\n\n          }\n\n        },\n\n\n\n        topPassedReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onTopPassedReverse,\n\n            callbackName = 'topPassedReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for top passed reverse', newCallback);\n\n            settings.onTopPassedReverse = newCallback;\n\n          }\n\n          if(!calculations.topPassed) {\n\n            if(module.get.occurred('topPassed')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.onTopPassed;\n\n          }\n\n        },\n\n\n\n        bottomPassedReverse: function(newCallback) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            callback     = newCallback || settings.onBottomPassedReverse,\n\n            callbackName = 'bottomPassedReverse'\n\n          ;\n\n          if(newCallback) {\n\n            module.debug('Adding callback for bottom passed reverse', newCallback);\n\n            settings.onBottomPassedReverse = newCallback;\n\n          }\n\n          if(!calculations.bottomPassed) {\n\n            if(module.get.occurred('bottomPassed')) {\n\n              module.execute(callback, callbackName);\n\n            }\n\n          }\n\n          else if(!settings.once) {\n\n            module.remove.occurred(callbackName);\n\n          }\n\n          if(newCallback === undefined) {\n\n            return !calculations.bottomPassed;\n\n          }\n\n        },\n\n\n\n        execute: function(callback, callbackName) {\n\n          var\n\n            calculations = module.get.elementCalculations(),\n\n            screen       = module.get.screenCalculations()\n\n          ;\n\n          callback = callback || false;\n\n          if(callback) {\n\n            if(settings.continuous) {\n\n              module.debug('Callback being called continuously', callbackName, calculations);\n\n              callback.call(element, calculations, screen);\n\n            }\n\n            else if(!module.get.occurred(callbackName)) {\n\n              module.debug('Conditions met', callbackName, calculations);\n\n              callback.call(element, calculations, screen);\n\n            }\n\n          }\n\n          module.save.occurred(callbackName);\n\n        },\n\n\n\n        remove: {\n\n          fixed: function() {\n\n            module.debug('Removing fixed position');\n\n            $module\n\n              .removeClass(className.fixed)\n\n              .css({\n\n                position : '',\n\n                top      : '',\n\n                left     : '',\n\n                zIndex   : ''\n\n              })\n\n            ;\n\n            settings.onUnfixed.call(element);\n\n          },\n\n          placeholder: function() {\n\n            module.debug('Removing placeholder content');\n\n            if($placeholder) {\n\n              $placeholder.remove();\n\n            }\n\n          },\n\n          occurred: function(callback) {\n\n            if(callback) {\n\n              var\n\n                occurred = module.cache.occurred\n\n              ;\n\n              if(occurred[callback] !== undefined && occurred[callback] === true) {\n\n                module.debug('Callback can now be called again', callback);\n\n                module.cache.occurred[callback] = false;\n\n              }\n\n            }\n\n            else {\n\n              module.cache.occurred = {};\n\n            }\n\n          }\n\n        },\n\n\n\n        save: {\n\n          calculations: function() {\n\n            module.verbose('Saving all calculations necessary to determine positioning');\n\n            module.save.direction();\n\n            module.save.screenCalculations();\n\n            module.save.elementCalculations();\n\n          },\n\n          occurred: function(callback) {\n\n            if(callback) {\n\n              if(module.cache.occurred[callback] === undefined || (module.cache.occurred[callback] !== true)) {\n\n                module.verbose('Saving callback occurred', callback);\n\n                module.cache.occurred[callback] = true;\n\n              }\n\n            }\n\n          },\n\n          scroll: function(scrollPosition) {\n\n            scrollPosition      = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;\n\n            module.cache.scroll = scrollPosition;\n\n          },\n\n          direction: function() {\n\n            var\n\n              scroll     = module.get.scroll(),\n\n              lastScroll = module.get.lastScroll(),\n\n              direction\n\n            ;\n\n            if(scroll > lastScroll && lastScroll) {\n\n              direction = 'down';\n\n            }\n\n            else if(scroll < lastScroll && lastScroll) {\n\n              direction = 'up';\n\n            }\n\n            else {\n\n              direction = 'static';\n\n            }\n\n            module.cache.direction = direction;\n\n            return module.cache.direction;\n\n          },\n\n          elementPosition: function() {\n\n            var\n\n              element = module.cache.element,\n\n              screen  = module.get.screenSize()\n\n            ;\n\n            module.verbose('Saving element position');\n\n            // (quicker than $.extend)\n\n            element.fits          = (element.height < screen.height);\n\n            element.offset        = $module.offset();\n\n            element.width         = $module.outerWidth();\n\n            element.height        = $module.outerHeight();\n\n            // compensate for scroll in context\n\n            if(module.is.verticallyScrollableContext()) {\n\n              element.offset.top += $context.scrollTop() - $context.offset().top;\n\n            }\n\n            if(module.is.horizontallyScrollableContext()) {\n\n              element.offset.left += $context.scrollLeft - $context.offset().left;\n\n            }\n\n            // store\n\n            module.cache.element = element;\n\n            return element;\n\n          },\n\n          elementCalculations: function() {\n\n            var\n\n              screen     = module.get.screenCalculations(),\n\n              element    = module.get.elementPosition()\n\n            ;\n\n            // offset\n\n            if(settings.includeMargin) {\n\n              element.margin        = {};\n\n              element.margin.top    = parseInt($module.css('margin-top'), 10);\n\n              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);\n\n              element.top    = element.offset.top - element.margin.top;\n\n              element.bottom = element.offset.top + element.height + element.margin.bottom;\n\n            }\n\n            else {\n\n              element.top    = element.offset.top;\n\n              element.bottom = element.offset.top + element.height;\n\n            }\n\n\n\n            // visibility\n\n            element.topPassed        = (screen.top >= element.top);\n\n            element.bottomPassed     = (screen.top >= element.bottom);\n\n            element.topVisible       = (screen.bottom >= element.top) && !element.topPassed;\n\n            element.bottomVisible    = (screen.bottom >= element.bottom) && !element.bottomPassed;\n\n            element.pixelsPassed     = 0;\n\n            element.percentagePassed = 0;\n\n\n\n            // meta calculations\n\n            element.onScreen  = ((element.topVisible || element.passing) && !element.bottomPassed);\n\n            element.passing   = (element.topPassed && !element.bottomPassed);\n\n            element.offScreen = (!element.onScreen);\n\n\n\n            // passing calculations\n\n            if(element.passing) {\n\n              element.pixelsPassed     = (screen.top - element.top);\n\n              element.percentagePassed = (screen.top - element.top) / element.height;\n\n            }\n\n            module.cache.element = element;\n\n            module.verbose('Updated element calculations', element);\n\n            return element;\n\n          },\n\n          screenCalculations: function() {\n\n            var\n\n              scroll = module.get.scroll()\n\n            ;\n\n            module.save.direction();\n\n            module.cache.screen.top    = scroll;\n\n            module.cache.screen.bottom = scroll + module.cache.screen.height;\n\n            return module.cache.screen;\n\n          },\n\n          screenSize: function() {\n\n            module.verbose('Saving window position');\n\n            module.cache.screen = {\n\n              height: $context.height()\n\n            };\n\n          },\n\n          position: function() {\n\n            module.save.screenSize();\n\n            module.save.elementPosition();\n\n          }\n\n        },\n\n\n\n        get: {\n\n          pixelsPassed: function(amount) {\n\n            var\n\n              element = module.get.elementCalculations()\n\n            ;\n\n            if(amount.search('%') > -1) {\n\n              return ( element.height * (parseInt(amount, 10) / 100) );\n\n            }\n\n            return parseInt(amount, 10);\n\n          },\n\n          occurred: function(callback) {\n\n            return (module.cache.occurred !== undefined)\n\n              ? module.cache.occurred[callback] || false\n\n              : false\n\n            ;\n\n          },\n\n          direction: function() {\n\n            if(module.cache.direction === undefined) {\n\n              module.save.direction();\n\n            }\n\n            return module.cache.direction;\n\n          },\n\n          elementPosition: function() {\n\n            if(module.cache.element === undefined) {\n\n              module.save.elementPosition();\n\n            }\n\n            return module.cache.element;\n\n          },\n\n          elementCalculations: function() {\n\n            if(module.cache.element === undefined) {\n\n              module.save.elementCalculations();\n\n            }\n\n            return module.cache.element;\n\n          },\n\n          screenCalculations: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.save.screenCalculations();\n\n            }\n\n            return module.cache.screen;\n\n          },\n\n          screenSize: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.save.screenSize();\n\n            }\n\n            return module.cache.screen;\n\n          },\n\n          scroll: function() {\n\n            if(module.cache.scroll === undefined) {\n\n              module.save.scroll();\n\n            }\n\n            return module.cache.scroll;\n\n          },\n\n          lastScroll: function() {\n\n            if(module.cache.screen === undefined) {\n\n              module.debug('First scroll event, no last scroll could be found');\n\n              return false;\n\n            }\n\n            return module.cache.screen.top;\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            settings[name] = value;\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/src/definitions/modules/dropdown.js",
          "match_lines": [
            41,
            3734
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.dropdown.settings, parameters)\n\n          : $.extend({}, $.fn.dropdown.settings),\n\n\n\n        className       = settings.className,\n\n        message         = settings.message,\n\n        fields          = settings.fields,\n\n        keys            = settings.keys,\n\n        metadata        = settings.metadata,\n\n        namespace       = settings.namespace,\n\n        regExp          = settings.regExp,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        templates       = settings.templates,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $module         = $(this),\n\n        $context        = $(settings.context),\n\n        $text           = $module.find(selector.text),\n\n        $search         = $module.find(selector.search),\n\n        $sizer          = $module.find(selector.sizer),\n\n        $input          = $module.find(selector.input),\n\n        $icon           = $module.find(selector.icon),\n\n        $clear          = $module.find(selector.clearIcon),\n\n\n\n        $combo = ($module.prev().find(selector.text).length > 0)\n\n          ? $module.prev().find(selector.text)\n\n          : $module.prev(),\n\n\n\n        $menu           = $module.children(selector.menu),\n\n        $item           = $menu.find(selector.item),\n\n        $divider        = settings.hideDividers ? $item.parent().children(selector.divider) : $(),\n\n\n\n        activated       = false,\n\n        itemActivated   = false,\n\n        internalChange  = false,\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        initialLoad,\n\n        pageLostFocus,\n\n        willRefocus,\n\n        elementNamespace,\n\n        id,\n\n        selectObserver,\n\n        menuObserver,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing dropdown', settings);\n\n\n\n          if( module.is.alreadySetup() ) {\n\n            module.setup.reference();\n\n          }\n\n          else {\n\n\n\n            module.setup.layout();\n\n\n\n            if(settings.values) {\n\n              module.change.values(settings.values);\n\n            }\n\n\n\n            module.refreshData();\n\n\n\n            module.save.defaults();\n\n            module.restore.selected();\n\n\n\n            module.create.id();\n\n            module.bind.events();\n\n\n\n            module.observeChanges();\n\n            module.instantiate();\n\n          }\n\n\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of dropdown', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous dropdown', $module);\n\n          module.remove.tabbable();\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n          $menu\n\n            .off(eventNamespace)\n\n          ;\n\n          $document\n\n            .off(elementNamespace)\n\n          ;\n\n          module.disconnect.menuObserver();\n\n          module.disconnect.selectObserver();\n\n        },\n\n\n\n        observeChanges: function() {\n\n          if('MutationObserver' in window) {\n\n            selectObserver = new MutationObserver(module.event.select.mutation);\n\n            menuObserver   = new MutationObserver(module.event.menu.mutation);\n\n            module.debug('Setting up mutation observer', selectObserver, menuObserver);\n\n            module.observe.select();\n\n            module.observe.menu();\n\n          }\n\n        },\n\n\n\n        disconnect: {\n\n          menuObserver: function() {\n\n            if(menuObserver) {\n\n              menuObserver.disconnect();\n\n            }\n\n          },\n\n          selectObserver: function() {\n\n            if(selectObserver) {\n\n              selectObserver.disconnect();\n\n            }\n\n          }\n\n        },\n\n        observe: {\n\n          select: function() {\n\n            if(module.has.input()) {\n\n              selectObserver.observe($module[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          },\n\n          menu: function() {\n\n            if(module.has.menu()) {\n\n              menuObserver.observe($menu[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n          id: function() {\n\n            id = (Math.random().toString(16) + '000000000').substr(2, 8);\n\n            elementNamespace = '.' + id;\n\n            module.verbose('Creating unique id for element', id);\n\n          },\n\n          userChoice: function(values) {\n\n            var\n\n              $userChoices,\n\n              $userChoice,\n\n              isUserValue,\n\n              html\n\n            ;\n\n            values = values || module.get.userValues();\n\n            if(!values) {\n\n              return false;\n\n            }\n\n            values = $.isArray(values)\n\n              ? values\n\n              : [values]\n\n            ;\n\n            $.each(values, function(index, value) {\n\n              if(module.get.item(value) === false) {\n\n                html         = settings.templates.addition( module.add.variables(message.addResult, value) );\n\n                $userChoice  = $('<div />')\n\n                  .html(html)\n\n                  .attr('data-' + metadata.value, value)\n\n                  .attr('data-' + metadata.text, value)\n\n                  .addClass(className.addition)\n\n                  .addClass(className.item)\n\n                ;\n\n                if(settings.hideAdditions) {\n\n                  $userChoice.addClass(className.hidden);\n\n                }\n\n                $userChoices = ($userChoices === undefined)\n\n                  ? $userChoice\n\n                  : $userChoices.add($userChoice)\n\n                ;\n\n                module.verbose('Creating user choices for value', value, $userChoice);\n\n              }\n\n            });\n\n            return $userChoices;\n\n          },\n\n          userLabels: function(value) {\n\n            var\n\n              userValues = module.get.userValues()\n\n            ;\n\n            if(userValues) {\n\n              module.debug('Adding user labels', userValues);\n\n              $.each(userValues, function(index, value) {\n\n                module.verbose('Adding custom user value');\n\n                module.add.label(value, value);\n\n              });\n\n            }\n\n          },\n\n          menu: function() {\n\n            $menu = $('<div />')\n\n              .addClass(className.menu)\n\n              .appendTo($module)\n\n            ;\n\n          },\n\n          sizer: function() {\n\n            $sizer = $('<span />')\n\n              .addClass(className.sizer)\n\n              .insertAfter($search)\n\n            ;\n\n          }\n\n        },\n\n\n\n        search: function(query) {\n\n          query = (query !== undefined)\n\n            ? query\n\n            : module.get.query()\n\n          ;\n\n          module.verbose('Searching for query', query);\n\n          if(module.has.minCharacters(query)) {\n\n            module.filter(query);\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        select: {\n\n          firstUnfiltered: function() {\n\n            module.verbose('Selecting first non-filtered element');\n\n            module.remove.selectedItem();\n\n            $item\n\n              .not(selector.unselectable)\n\n              .not(selector.addition + selector.hidden)\n\n                .eq(0)\n\n                .addClass(className.selected)\n\n            ;\n\n          },\n\n          nextAvailable: function($selected) {\n\n            $selected = $selected.eq(0);\n\n            var\n\n              $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),\n\n              $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),\n\n              hasNext        = ($nextAvailable.length > 0)\n\n            ;\n\n            if(hasNext) {\n\n              module.verbose('Moving selection to', $nextAvailable);\n\n              $nextAvailable.addClass(className.selected);\n\n            }\n\n            else {\n\n              module.verbose('Moving selection to', $prevAvailable);\n\n              $prevAvailable.addClass(className.selected);\n\n            }\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          api: function() {\n\n            var\n\n              apiSettings = {\n\n                debug   : settings.debug,\n\n                urlData : {\n\n                  value : module.get.value(),\n\n                  query : module.get.query()\n\n                },\n\n                on    : false\n\n              }\n\n            ;\n\n            module.verbose('First request, initializing API');\n\n            $module\n\n              .api(apiSettings)\n\n            ;\n\n          },\n\n          layout: function() {\n\n            if( $module.is('select') ) {\n\n              module.setup.select();\n\n              module.setup.returnedObject();\n\n            }\n\n            if( !module.has.menu() ) {\n\n              module.create.menu();\n\n            }\n\n            if ( module.is.selection() && module.is.clearable() && !module.has.clearItem() ) {\n\n              module.verbose('Adding clear icon');\n\n              $clear = $('<i />')\n\n                .addClass('remove icon')\n\n                .insertBefore($text)\n\n              ;\n\n            }\n\n            if( module.is.search() && !module.has.search() ) {\n\n              module.verbose('Adding search input');\n\n              $search = $('<input />')\n\n                .addClass(className.search)\n\n                .prop('autocomplete', 'off')\n\n                .insertBefore($text)\n\n              ;\n\n            }\n\n            if( module.is.multiple() && module.is.searchSelection() && !module.has.sizer()) {\n\n              module.create.sizer();\n\n            }\n\n            if(settings.allowTab) {\n\n              module.set.tabbable();\n\n            }\n\n          },\n\n          select: function() {\n\n            var\n\n              selectValues  = module.get.selectValues()\n\n            ;\n\n            module.debug('Dropdown initialized on a select', selectValues);\n\n            if( $module.is('select') ) {\n\n              $input = $module;\n\n            }\n\n            // see if select is placed correctly already\n\n            if($input.parent(selector.dropdown).length > 0) {\n\n              module.debug('UI dropdown already exists. Creating dropdown menu only');\n\n              $module = $input.closest(selector.dropdown);\n\n              if( !module.has.menu() ) {\n\n                module.create.menu();\n\n              }\n\n              $menu = $module.children(selector.menu);\n\n              module.setup.menu(selectValues);\n\n            }\n\n            else {\n\n              module.debug('Creating entire dropdown from select');\n\n              $module = $('<div />')\n\n                .attr('class', $input.attr('class') )\n\n                .addClass(className.selection)\n\n                .addClass(className.dropdown)\n\n                .html( templates.dropdown(selectValues) )\n\n                .insertBefore($input)\n\n              ;\n\n              if($input.hasClass(className.multiple) && $input.prop('multiple') === false) {\n\n                module.error(error.missingMultiple);\n\n                $input.prop('multiple', true);\n\n              }\n\n              if($input.is('[multiple]')) {\n\n                module.set.multiple();\n\n              }\n\n              if ($input.prop('disabled')) {\n\n                module.debug('Disabling dropdown');\n\n                $module.addClass(className.disabled);\n\n              }\n\n              $input\n\n                .removeAttr('class')\n\n                .detach()\n\n                .prependTo($module)\n\n              ;\n\n            }\n\n            module.refresh();\n\n          },\n\n          menu: function(values) {\n\n            $menu.html( templates.menu(values, fields));\n\n            $item    = $menu.find(selector.item);\n\n            $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n          },\n\n          reference: function() {\n\n            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');\n\n            // replace module reference\n\n            $module  = $module.parent(selector.dropdown);\n\n            instance = $module.data(moduleNamespace);\n\n            element  = $module.get(0);\n\n            module.refresh();\n\n            module.setup.returnedObject();\n\n          },\n\n          returnedObject: function() {\n\n            var\n\n              $firstModules = $allModules.slice(0, elementIndex),\n\n              $lastModules  = $allModules.slice(elementIndex + 1)\n\n            ;\n\n            // adjust all modules to use correct reference\n\n            $allModules = $firstModules.add($module).add($lastModules);\n\n          }\n\n        },\n\n\n\n        refresh: function() {\n\n          module.refreshSelectors();\n\n          module.refreshData();\n\n        },\n\n\n\n        refreshItems: function() {\n\n          $item    = $menu.find(selector.item);\n\n          $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n        },\n\n\n\n        refreshSelectors: function() {\n\n          module.verbose('Refreshing selector cache');\n\n          $text   = $module.find(selector.text);\n\n          $search = $module.find(selector.search);\n\n          $input  = $module.find(selector.input);\n\n          $icon   = $module.find(selector.icon);\n\n          $combo  = ($module.prev().find(selector.text).length > 0)\n\n            ? $module.prev().find(selector.text)\n\n            : $module.prev()\n\n          ;\n\n          $menu    = $module.children(selector.menu);\n\n          $item    = $menu.find(selector.item);\n\n          $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();\n\n        },\n\n\n\n        refreshData: function() {\n\n          module.verbose('Refreshing cached metadata');\n\n          $item\n\n            .removeData(metadata.text)\n\n            .removeData(metadata.value)\n\n          ;\n\n        },\n\n\n\n        clearData: function() {\n\n          module.verbose('Clearing metadata');\n\n          $item\n\n            .removeData(metadata.text)\n\n            .removeData(metadata.value)\n\n          ;\n\n          $module\n\n            .removeData(metadata.defaultText)\n\n            .removeData(metadata.defaultValue)\n\n            .removeData(metadata.placeholderText)\n\n          ;\n\n        },\n\n\n\n        toggle: function() {\n\n          module.verbose('Toggling menu visibility');\n\n          if( !module.is.active() ) {\n\n            module.show();\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        show: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if(!module.can.show() && module.is.remote()) {\n\n            module.debug('No API results retrieved, searching before show');\n\n            module.queryRemote(module.get.query(), module.show);\n\n          }\n\n          if( module.can.show() && !module.is.active() ) {\n\n            module.debug('Showing dropdown');\n\n            if(module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered()) ) {\n\n              module.remove.message();\n\n            }\n\n            if(module.is.allFiltered()) {\n\n              return true;\n\n            }\n\n            if(settings.onShow.call(element) !== false) {\n\n              module.animate.show(function() {\n\n                if( module.can.click() ) {\n\n                  module.bind.intent();\n\n                }\n\n                if(module.has.search()) {\n\n                  module.focusSearch();\n\n                }\n\n                module.set.visible();\n\n                callback.call(element);\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        hide: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if( module.is.active() && !module.is.animatingOutward() ) {\n\n            module.debug('Hiding dropdown');\n\n            if(settings.onHide.call(element) !== false) {\n\n              module.animate.hide(function() {\n\n                module.remove.visible();\n\n                // hidding search focus\n\n                if ( module.is.focusedOnSearch() ) {\n\n                  $search.blur();\n\n                }\n\n                callback.call(element);\n\n              });\n\n            }\n\n          }\n\n        },\n\n\n\n        hideOthers: function() {\n\n          module.verbose('Finding other dropdowns to hide');\n\n          $allModules\n\n            .not($module)\n\n              .has(selector.menu + '.' + className.visible)\n\n                .dropdown('hide')\n\n          ;\n\n        },\n\n\n\n        hideMenu: function() {\n\n          module.verbose('Hiding menu  instantaneously');\n\n          module.remove.active();\n\n          module.remove.visible();\n\n          $menu.transition('hide');\n\n        },\n\n\n\n        hideSubMenus: function() {\n\n          var\n\n            $subMenus = $menu.children(selector.item).find(selector.menu)\n\n          ;\n\n          module.verbose('Hiding sub menus', $subMenus);\n\n          $subMenus.transition('hide');\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            if(hasTouch) {\n\n              module.bind.touchEvents();\n\n            }\n\n            module.bind.keyboardEvents();\n\n            module.bind.inputEvents();\n\n            module.bind.mouseEvents();\n\n          },\n\n          touchEvents: function() {\n\n            module.debug('Touch device detected binding additional touch events');\n\n            if( module.is.searchSelection() ) {\n\n              // do nothing special yet\n\n            }\n\n            else if( module.is.single() ) {\n\n              $module\n\n                .on('touchstart' + eventNamespace, module.event.test.toggle)\n\n              ;\n\n            }\n\n            $menu\n\n              .on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter)\n\n            ;\n\n          },\n\n          keyboardEvents: function() {\n\n            module.verbose('Binding keyboard events');\n\n            $module\n\n              .on('keydown' + eventNamespace, module.event.keydown)\n\n            ;\n\n            if( module.has.search() ) {\n\n              $module\n\n                .on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input)\n\n              ;\n\n            }\n\n            if( module.is.multiple() ) {\n\n              $document\n\n                .on('keydown' + elementNamespace, module.event.document.keydown)\n\n              ;\n\n            }\n\n          },\n\n          inputEvents: function() {\n\n            module.verbose('Binding input change events');\n\n            $module\n\n              .on('change' + eventNamespace, selector.input, module.event.change)\n\n            ;\n\n          },\n\n          mouseEvents: function() {\n\n            module.verbose('Binding mouse events');\n\n            if(module.is.multiple()) {\n\n              $module\n\n                .on('click'   + eventNamespace, selector.label,  module.event.label.click)\n\n                .on('click'   + eventNamespace, selector.remove, module.event.remove.click)\n\n              ;\n\n            }\n\n            if( module.is.searchSelection() ) {\n\n              $module\n\n                .on('mousedown' + eventNamespace, module.event.mousedown)\n\n                .on('mouseup'   + eventNamespace, module.event.mouseup)\n\n                .on('mousedown' + eventNamespace, selector.menu,   module.event.menu.mousedown)\n\n                .on('mouseup'   + eventNamespace, selector.menu,   module.event.menu.mouseup)\n\n                .on('click'     + eventNamespace, selector.icon,   module.event.icon.click)\n\n                .on('click'     + eventNamespace, selector.clearIcon, module.event.clearIcon.click)\n\n                .on('focus'     + eventNamespace, selector.search, module.event.search.focus)\n\n                .on('click'     + eventNamespace, selector.search, module.event.search.focus)\n\n                .on('blur'      + eventNamespace, selector.search, module.event.search.blur)\n\n                .on('click'     + eventNamespace, selector.text,   module.event.text.focus)\n\n              ;\n\n              if(module.is.multiple()) {\n\n                $module\n\n                  .on('click' + eventNamespace, module.event.click)\n\n                ;\n\n              }\n\n            }\n\n            else {\n\n              if(settings.on == 'click') {\n\n                $module\n\n                  .on('click' + eventNamespace, selector.icon, module.event.icon.click)\n\n                  .on('click' + eventNamespace, module.event.test.toggle)\n\n                ;\n\n              }\n\n              else if(settings.on == 'hover') {\n\n                $module\n\n                  .on('mouseenter' + eventNamespace, module.delay.show)\n\n                  .on('mouseleave' + eventNamespace, module.delay.hide)\n\n                ;\n\n              }\n\n              else {\n\n                $module\n\n                  .on(settings.on + eventNamespace, module.toggle)\n\n                ;\n\n              }\n\n              $module\n\n                .on('mousedown' + eventNamespace, module.event.mousedown)\n\n                .on('mouseup'   + eventNamespace, module.event.mouseup)\n\n                .on('focus'     + eventNamespace, module.event.focus)\n\n                .on('click'     + eventNamespace, selector.clearIcon, module.event.clearIcon.click)\n\n              ;\n\n              if(module.has.menuSearch() ) {\n\n                $module\n\n                  .on('blur' + eventNamespace, selector.search, module.event.search.blur)\n\n                ;\n\n              }\n\n              else {\n\n                $module\n\n                  .on('blur' + eventNamespace, module.event.blur)\n\n                ;\n\n              }\n\n            }\n\n            $menu\n\n              .on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter)\n\n              .on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave)\n\n              .on('click'      + eventNamespace, selector.item, module.event.item.click)\n\n            ;\n\n          },\n\n          intent: function() {\n\n            module.verbose('Binding hide intent event to document');\n\n            if(hasTouch) {\n\n              $document\n\n                .on('touchstart' + elementNamespace, module.event.test.touch)\n\n                .on('touchmove'  + elementNamespace, module.event.test.touch)\n\n              ;\n\n            }\n\n            $document\n\n              .on('click' + elementNamespace, module.event.test.hide)\n\n            ;\n\n          }\n\n        },\n\n\n\n        unbind: {\n\n          intent: function() {\n\n            module.verbose('Removing hide intent event from document');\n\n            if(hasTouch) {\n\n              $document\n\n                .off('touchstart' + elementNamespace)\n\n                .off('touchmove' + elementNamespace)\n\n              ;\n\n            }\n\n            $document\n\n              .off('click' + elementNamespace)\n\n            ;\n\n          }\n\n        },\n\n\n\n        filter: function(query) {\n\n          var\n\n            searchTerm = (query !== undefined)\n\n              ? query\n\n              : module.get.query(),\n\n            afterFiltered = function() {\n\n              if(module.is.multiple()) {\n\n                module.filterActive();\n\n              }\n\n              if(query || (!query && module.get.activeItem().length == 0)) {\n\n                module.select.firstUnfiltered();\n\n              }\n\n              if( module.has.allResultsFiltered() ) {\n\n                if( settings.onNoResults.call(element, searchTerm) ) {\n\n                  if(settings.allowAdditions) {\n\n                    if(settings.hideAdditions) {\n\n                      module.verbose('User addition with no menu, setting empty style');\n\n                      module.set.empty();\n\n                      module.hideMenu();\n\n                    }\n\n                  }\n\n                  else {\n\n                    module.verbose('All items filtered, showing message', searchTerm);\n\n                    module.add.message(message.noResults);\n\n                  }\n\n                }\n\n                else {\n\n                  module.verbose('All items filtered, hiding dropdown', searchTerm);\n\n                  module.hideMenu();\n\n                }\n\n              }\n\n              else {\n\n                module.remove.empty();\n\n                module.remove.message();\n\n              }\n\n              if(settings.allowAdditions) {\n\n                module.add.userSuggestion(query);\n\n              }\n\n              if(module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch() ) {\n\n                module.show();\n\n              }\n\n            }\n\n          ;\n\n          if(settings.useLabels && module.has.maxSelections()) {\n\n            return;\n\n          }\n\n          if(settings.apiSettings) {\n\n            if( module.can.useAPI() ) {\n\n              module.queryRemote(searchTerm, function() {\n\n                if(settings.filterRemoteData) {\n\n                  module.filterItems(searchTerm);\n\n                }\n\n                afterFiltered();\n\n              });\n\n            }\n\n            else {\n\n              module.error(error.noAPI);\n\n            }\n\n          }\n\n          else {\n\n            module.filterItems(searchTerm);\n\n            afterFiltered();\n\n          }\n\n        },\n\n\n\n        queryRemote: function(query, callback) {\n\n          var\n\n            apiSettings = {\n\n              errorDuration : false,\n\n              cache         : 'local',\n\n              throttle      : settings.throttle,\n\n              urlData       : {\n\n                query: query\n\n              },\n\n              onError: function() {\n\n                module.add.message(message.serverError);\n\n                callback();\n\n              },\n\n              onFailure: function() {\n\n                module.add.message(message.serverError);\n\n                callback();\n\n              },\n\n              onSuccess : function(response) {\n\n                var\n\n                  values          = response[fields.remoteValues],\n\n                  hasRemoteValues = ($.isArray(values) && values.length > 0)\n\n                ;\n\n                if(hasRemoteValues) {\n\n                  module.remove.message();\n\n                  module.setup.menu({\n\n                    values: response[fields.remoteValues]\n\n                  });\n\n                }\n\n                else {\n\n                  module.add.message(message.noResults);\n\n                }\n\n                callback();\n\n              }\n\n            }\n\n          ;\n\n          if( !$module.api('get request') ) {\n\n            module.setup.api();\n\n          }\n\n          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);\n\n          $module\n\n            .api('setting', apiSettings)\n\n            .api('query')\n\n          ;\n\n        },\n\n\n\n        filterItems: function(query) {\n\n          var\n\n            searchTerm = (query !== undefined)\n\n              ? query\n\n              : module.get.query(),\n\n            results          =  null,\n\n            escapedTerm      = module.escape.string(searchTerm),\n\n            beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm')\n\n          ;\n\n          // avoid loop if we're matching nothing\n\n          if( module.has.query() ) {\n\n            results = [];\n\n\n\n            module.verbose('Searching for matching values', searchTerm);\n\n            $item\n\n              .each(function(){\n\n                var\n\n                  $choice = $(this),\n\n                  text,\n\n                  value\n\n                ;\n\n                if(settings.match == 'both' || settings.match == 'text') {\n\n                  text = String(module.get.choiceText($choice, false));\n\n                  if(text.search(beginsWithRegExp) !== -1) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, text)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, text)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                }\n\n                if(settings.match == 'both' || settings.match == 'value') {\n\n                  value = String(module.get.choiceValue($choice, text));\n\n                  if(value.search(beginsWithRegExp) !== -1) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, value)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                  else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, value)) {\n\n                    results.push(this);\n\n                    return true;\n\n                  }\n\n                }\n\n              })\n\n            ;\n\n          }\n\n          module.debug('Showing only matched items', searchTerm);\n\n          module.remove.filteredItem();\n\n          if(results) {\n\n            $item\n\n              .not(results)\n\n              .addClass(className.filtered)\n\n            ;\n\n          }\n\n\n\n          if(!module.has.query()) {\n\n            $divider\n\n              .removeClass(className.hidden);\n\n          } else if(settings.hideDividers === true) {\n\n            $divider\n\n              .addClass(className.hidden);\n\n          } else if(settings.hideDividers === 'empty') {\n\n            $divider\n\n              .removeClass(className.hidden)\n\n              .filter(function() {\n\n                // First find the last divider in this divider group\n\n                // Dividers which are direct siblings are considered a group\n\n                var lastDivider = $(this).nextUntil(selector.item);\n\n\n\n                return (lastDivider.length ? lastDivider : $(this))\n\n                // Count all non-filtered items until the next divider (or end of the dropdown)\n\n                  .nextUntil(selector.divider)\n\n                  .filter(selector.item + \":not(.\" + className.filtered + \")\")\n\n                  // Hide divider if no items are found\n\n                  .length === 0;\n\n              })\n\n              .addClass(className.hidden);\n\n          }\n\n        },\n\n\n\n        fuzzySearch: function(query, term) {\n\n          var\n\n            termLength  = term.length,\n\n            queryLength = query.length\n\n          ;\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(queryLength > termLength) {\n\n            return false;\n\n          }\n\n          if(queryLength === termLength) {\n\n            return (query === term);\n\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n\n            var\n\n              queryCharacter = query.charCodeAt(characterIndex)\n\n            ;\n\n            while(nextCharacterIndex < termLength) {\n\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n\n                continue search;\n\n              }\n\n            }\n\n            return false;\n\n          }\n\n          return true;\n\n        },\n\n        exactSearch: function (query, term) {\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(term.indexOf(query) > -1) {\n\n             return true;\n\n          }\n\n          return false;\n\n        },\n\n        filterActive: function() {\n\n          if(settings.useLabels) {\n\n            $item.filter('.' + className.active)\n\n              .addClass(className.filtered)\n\n            ;\n\n          }\n\n        },\n\n\n\n        focusSearch: function(skipHandler) {\n\n          if( module.has.search() && !module.is.focusedOnSearch() ) {\n\n            if(skipHandler) {\n\n              $module.off('focus' + eventNamespace, selector.search);\n\n              $search.focus();\n\n              $module.on('focus'  + eventNamespace, selector.search, module.event.search.focus);\n\n            }\n\n            else {\n\n              $search.focus();\n\n            }\n\n          }\n\n        },\n\n\n\n        blurSearch: function() {\n\n          if( module.has.search() ) {\n\n            $search.blur();\n\n          }\n\n        },\n\n\n\n        forceSelection: function() {\n\n          var\n\n            $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),\n\n            $activeItem        = $item.not(className.filtered).filter('.' + className.active).eq(0),\n\n            $selectedItem      = ($currentlySelected.length > 0)\n\n              ? $currentlySelected\n\n              : $activeItem,\n\n            hasSelected = ($selectedItem.length > 0)\n\n          ;\n\n          if(hasSelected && !module.is.multiple()) {\n\n            module.debug('Forcing partial selection to selected item', $selectedItem);\n\n            module.event.item.click.call($selectedItem, {}, true);\n\n            return;\n\n          }\n\n          else {\n\n            if(settings.allowAdditions) {\n\n              module.set.selected(module.get.query());\n\n              module.remove.searchTerm();\n\n            }\n\n            else {\n\n              module.remove.searchTerm();\n\n            }\n\n          }\n\n        },\n\n\n\n        change: {\n\n          values: function(values) {\n\n            if(!settings.allowAdditions) {\n\n              module.clear();\n\n            }\n\n            module.debug('Creating dropdown with specified values', values);\n\n            module.setup.menu({values: values});\n\n            $.each(values, function(index, item) {\n\n              if(item.selected == true) {\n\n                module.debug('Setting initial selection to', item.value);\n\n                module.set.selected(item.value);\n\n                return true;\n\n              }\n\n            });\n\n          }\n\n        },\n\n\n\n        event: {\n\n          change: function() {\n\n            if(!internalChange) {\n\n              module.debug('Input changed, updating selection');\n\n              module.set.selected();\n\n            }\n\n          },\n\n          focus: function() {\n\n            if(settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {\n\n              module.show();\n\n            }\n\n          },\n\n          blur: function(event) {\n\n            pageLostFocus = (document.activeElement === this);\n\n            if(!activated && !pageLostFocus) {\n\n              module.remove.activeLabel();\n\n              module.hide();\n\n            }\n\n          },\n\n          mousedown: function() {\n\n            if(module.is.searchSelection()) {\n\n              // prevent menu hiding on immediate re-focus\n\n              willRefocus = true;\n\n            }\n\n            else {\n\n              // prevents focus callback from occurring on mousedown\n\n              activated = true;\n\n            }\n\n          },\n\n          mouseup: function() {\n\n            if(module.is.searchSelection()) {\n\n              // prevent menu hiding on immediate re-focus\n\n              willRefocus = false;\n\n            }\n\n            else {\n\n              activated = false;\n\n            }\n\n          },\n\n          click: function(event) {\n\n            var\n\n              $target = $(event.target)\n\n            ;\n\n            // focus search\n\n            if($target.is($module)) {\n\n              if(!module.is.focusedOnSearch()) {\n\n                module.focusSearch();\n\n              }\n\n              else {\n\n                module.show();\n\n              }\n\n            }\n\n          },\n\n          search: {\n\n            focus: function() {\n\n              activated = true;\n\n              if(module.is.multiple()) {\n\n                module.remove.activeLabel();\n\n              }\n\n              if(settings.showOnFocus || event.type !== 'focus') {\n\n                module.search();\n\n              }\n\n            },\n\n            blur: function(event) {\n\n              pageLostFocus = (document.activeElement === this);\n\n              if(module.is.searchSelection() && !willRefocus) {\n\n                if(!itemActivated && !pageLostFocus) {\n\n                  if(settings.forceSelection) {\n\n                    module.forceSelection();\n\n                  }\n\n                  module.hide();\n\n                }\n\n              }\n\n              willRefocus = false;\n\n            }\n\n          },\n\n          clearIcon: {\n\n            click: function(event) {\n\n              module.clear();\n\n              if(module.is.searchSelection()) {\n\n                module.remove.searchTerm();\n\n              }\n\n              module.hide();\n\n              event.stopPropagation();\n\n            }\n\n          },\n\n          icon: {\n\n            click: function(event) {\n\n              if(module.has.search()) {\n\n                if(!module.is.active()) {\n\n                    if(settings.showOnFocus){\n\n                      module.focusSearch();\n\n                    } else {\n\n                      module.toggle();\n\n                    }\n\n                } else {\n\n                  module.blurSearch();\n\n                }\n\n              } else {\n\n                module.toggle();\n\n              }\n\n            }\n\n          },\n\n          text: {\n\n            focus: function(event) {\n\n              activated = true;\n\n              module.focusSearch();\n\n            }\n\n          },\n\n          input: function(event) {\n\n            if(module.is.multiple() || module.is.searchSelection()) {\n\n              module.set.filtered();\n\n            }\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.search, settings.delay.search);\n\n          },\n\n          label: {\n\n            click: function(event) {\n\n              var\n\n                $label        = $(this),\n\n                $labels       = $module.find(selector.label),\n\n                $activeLabels = $labels.filter('.' + className.active),\n\n                $nextActive   = $label.nextAll('.' + className.active),\n\n                $prevActive   = $label.prevAll('.' + className.active),\n\n                $range = ($nextActive.length > 0)\n\n                  ? $label.nextUntil($nextActive).add($activeLabels).add($label)\n\n                  : $label.prevUntil($prevActive).add($activeLabels).add($label)\n\n              ;\n\n              if(event.shiftKey) {\n\n                $activeLabels.removeClass(className.active);\n\n                $range.addClass(className.active);\n\n              }\n\n              else if(event.ctrlKey) {\n\n                $label.toggleClass(className.active);\n\n              }\n\n              else {\n\n                $activeLabels.removeClass(className.active);\n\n                $label.addClass(className.active);\n\n              }\n\n              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));\n\n            }\n\n          },\n\n          remove: {\n\n            click: function() {\n\n              var\n\n                $label = $(this).parent()\n\n              ;\n\n              if( $label.hasClass(className.active) ) {\n\n                // remove all selected labels\n\n                module.remove.activeLabels();\n\n              }\n\n              else {\n\n                // remove this label only\n\n                module.remove.activeLabels( $label );\n\n              }\n\n            }\n\n          },\n\n          test: {\n\n            toggle: function(event) {\n\n              var\n\n                toggleBehavior = (module.is.multiple())\n\n                  ? module.show\n\n                  : module.toggle\n\n              ;\n\n              if(module.is.bubbledLabelClick(event) || module.is.bubbledIconClick(event)) {\n\n                return;\n\n              }\n\n              if( module.determine.eventOnElement(event, toggleBehavior) ) {\n\n                event.preventDefault();\n\n              }\n\n            },\n\n            touch: function(event) {\n\n              module.determine.eventOnElement(event, function() {\n\n                if(event.type == 'touchstart') {\n\n                  module.timer = setTimeout(function() {\n\n                    module.hide();\n\n                  }, settings.delay.touch);\n\n                }\n\n                else if(event.type == 'touchmove') {\n\n                  clearTimeout(module.timer);\n\n                }\n\n              });\n\n              event.stopPropagation();\n\n            },\n\n            hide: function(event) {\n\n              if(module.determine.eventInModule(event, module.hide)){\n\n                  event.preventDefault();\n\n              }\n\n            }\n\n          },\n\n          select: {\n\n            mutation: function(mutations) {\n\n              module.debug('<select> modified, recreating menu');\n\n              if(module.is.selectMutation(mutations)) {\n\n                module.disconnect.selectObserver();\n\n                module.refresh();\n\n                module.setup.select();\n\n                module.set.selected();\n\n                module.observe.select();\n\n              }\n\n            }\n\n          },\n\n          menu: {\n\n            mutation: function(mutations) {\n\n              var\n\n                mutation   = mutations[0],\n\n                $addedNode = mutation.addedNodes\n\n                  ? $(mutation.addedNodes[0])\n\n                  : $(false),\n\n                $removedNode = mutation.removedNodes\n\n                  ? $(mutation.removedNodes[0])\n\n                  : $(false),\n\n                $changedNodes  = $addedNode.add($removedNode),\n\n                isUserAddition = $changedNodes.is(selector.addition) || $changedNodes.closest(selector.addition).length > 0,\n\n                isMessage      = $changedNodes.is(selector.message)  || $changedNodes.closest(selector.message).length > 0\n\n              ;\n\n              if(isUserAddition || isMessage) {\n\n                module.debug('Updating item selector cache');\n\n                module.refreshItems();\n\n              }\n\n              else {\n\n                module.debug('Menu modified, updating selector cache');\n\n                module.refresh();\n\n              }\n\n            },\n\n            mousedown: function() {\n\n              itemActivated = true;\n\n            },\n\n            mouseup: function() {\n\n              itemActivated = false;\n\n            }\n\n          },\n\n          item: {\n\n            mouseenter: function(event) {\n\n              var\n\n                $target        = $(event.target),\n\n                $item          = $(this),\n\n                $subMenu       = $item.children(selector.menu),\n\n                $otherMenus    = $item.siblings(selector.item).children(selector.menu),\n\n                hasSubMenu     = ($subMenu.length > 0),\n\n                isBubbledEvent = ($subMenu.find($target).length > 0)\n\n              ;\n\n              if( !isBubbledEvent && hasSubMenu ) {\n\n                clearTimeout(module.itemTimer);\n\n                module.itemTimer = setTimeout(function() {\n\n                  module.verbose('Showing sub-menu', $subMenu);\n\n                  $.each($otherMenus, function() {\n\n                    module.animate.hide(false, $(this));\n\n                  });\n\n                  module.animate.show(false, $subMenu);\n\n                }, settings.delay.show);\n\n                event.preventDefault();\n\n              }\n\n            },\n\n            mouseleave: function(event) {\n\n              var\n\n                $subMenu = $(this).children(selector.menu)\n\n              ;\n\n              if($subMenu.length > 0) {\n\n                clearTimeout(module.itemTimer);\n\n                module.itemTimer = setTimeout(function() {\n\n                  module.verbose('Hiding sub-menu', $subMenu);\n\n                  module.animate.hide(false, $subMenu);\n\n                }, settings.delay.hide);\n\n              }\n\n            },\n\n            click: function (event, skipRefocus) {\n\n              var\n\n                $choice        = $(this),\n\n                $target        = (event)\n\n                  ? $(event.target)\n\n                  : $(''),\n\n                $subMenu       = $choice.find(selector.menu),\n\n                text           = module.get.choiceText($choice),\n\n                value          = module.get.choiceValue($choice, text),\n\n                hasSubMenu     = ($subMenu.length > 0),\n\n                isBubbledEvent = ($subMenu.find($target).length > 0)\n\n              ;\n\n              // prevents IE11 bug where menu receives focus even though `tabindex=-1`\n\n              if (!module.has.search() || !document.activeElement.isEqualNode($search[0])) {\n\n                $(document.activeElement).blur();\n\n              }\n\n              if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {\n\n                if(module.is.searchSelection()) {\n\n                  if(settings.allowAdditions) {\n\n                    module.remove.userAddition();\n\n                  }\n\n                  module.remove.searchTerm();\n\n                  if(!module.is.focusedOnSearch() && !(skipRefocus == true)) {\n\n                    module.focusSearch(true);\n\n                  }\n\n                }\n\n                if(!settings.useLabels) {\n\n                  module.remove.filteredItem();\n\n                  module.set.scrollPosition($choice);\n\n                }\n\n                module.determine.selectAction.call(this, text, value);\n\n              }\n\n            }\n\n          },\n\n\n\n          document: {\n\n            // label selection should occur even when element has no focus\n\n            keydown: function(event) {\n\n              var\n\n                pressedKey    = event.which,\n\n                isShortcutKey = module.is.inObject(pressedKey, keys)\n\n              ;\n\n              if(isShortcutKey) {\n\n                var\n\n                  $label            = $module.find(selector.label),\n\n                  $activeLabel      = $label.filter('.' + className.active),\n\n                  activeValue       = $activeLabel.data(metadata.value),\n\n                  labelIndex        = $label.index($activeLabel),\n\n                  labelCount        = $label.length,\n\n                  hasActiveLabel    = ($activeLabel.length > 0),\n\n                  hasMultipleActive = ($activeLabel.length > 1),\n\n                  isFirstLabel      = (labelIndex === 0),\n\n                  isLastLabel       = (labelIndex + 1 == labelCount),\n\n                  isSearch          = module.is.searchSelection(),\n\n                  isFocusedOnSearch = module.is.focusedOnSearch(),\n\n                  isFocused         = module.is.focused(),\n\n                  caretAtStart      = (isFocusedOnSearch && module.get.caretPosition() === 0),\n\n                  $nextLabel\n\n                ;\n\n                if(isSearch && !hasActiveLabel && !isFocusedOnSearch) {\n\n                  return;\n\n                }\n\n\n\n                if(pressedKey == keys.leftArrow) {\n\n                  // activate previous label\n\n                  if((isFocused || caretAtStart) && !hasActiveLabel) {\n\n                    module.verbose('Selecting previous label');\n\n                    $label.last().addClass(className.active);\n\n                  }\n\n                  else if(hasActiveLabel) {\n\n                    if(!event.shiftKey) {\n\n                      module.verbose('Selecting previous label');\n\n                      $label.removeClass(className.active);\n\n                    }\n\n                    else {\n\n                      module.verbose('Adding previous label to selection');\n\n                    }\n\n                    if(isFirstLabel && !hasMultipleActive) {\n\n                      $activeLabel.addClass(className.active);\n\n                    }\n\n                    else {\n\n                      $activeLabel.prev(selector.siblingLabel)\n\n                        .addClass(className.active)\n\n                        .end()\n\n                      ;\n\n                    }\n\n                    event.preventDefault();\n\n                  }\n\n                }\n\n                else if(pressedKey == keys.rightArrow) {\n\n                  // activate first label\n\n                  if(isFocused && !hasActiveLabel) {\n\n                    $label.first().addClass(className.active);\n\n                  }\n\n                  // activate next label\n\n                  if(hasActiveLabel) {\n\n                    if(!event.shiftKey) {\n\n                      module.verbose('Selecting next label');\n\n                      $label.removeClass(className.active);\n\n                    }\n\n                    else {\n\n                      module.verbose('Adding next label to selection');\n\n                    }\n\n                    if(isLastLabel) {\n\n                      if(isSearch) {\n\n                        if(!isFocusedOnSearch) {\n\n                          module.focusSearch();\n\n                        }\n\n                        else {\n\n                          $label.removeClass(className.active);\n\n                        }\n\n                      }\n\n                      else if(hasMultipleActive) {\n\n                        $activeLabel.next(selector.siblingLabel).addClass(className.active);\n\n                      }\n\n                      else {\n\n                        $activeLabel.addClass(className.active);\n\n                      }\n\n                    }\n\n                    else {\n\n                      $activeLabel.next(selector.siblingLabel).addClass(className.active);\n\n                    }\n\n                    event.preventDefault();\n\n                  }\n\n                }\n\n                else if(pressedKey == keys.deleteKey || pressedKey == keys.backspace) {\n\n                  if(hasActiveLabel) {\n\n                    module.verbose('Removing active labels');\n\n                    if(isLastLabel) {\n\n                      if(isSearch && !isFocusedOnSearch) {\n\n                        module.focusSearch();\n\n                      }\n\n                    }\n\n                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);\n\n                    module.remove.activeLabels($activeLabel);\n\n                    event.preventDefault();\n\n                  }\n\n                  else if(caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {\n\n                    module.verbose('Removing last label on input backspace');\n\n                    $activeLabel = $label.last().addClass(className.active);\n\n                    module.remove.activeLabels($activeLabel);\n\n                  }\n\n                }\n\n                else {\n\n                  $activeLabel.removeClass(className.active);\n\n                }\n\n              }\n\n            }\n\n          },\n\n\n\n          keydown: function(event) {\n\n            var\n\n              pressedKey    = event.which,\n\n              isShortcutKey = module.is.inObject(pressedKey, keys)\n\n            ;\n\n            if(isShortcutKey) {\n\n              var\n\n                $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),\n\n                $activeItem        = $menu.children('.' + className.active).eq(0),\n\n                $selectedItem      = ($currentlySelected.length > 0)\n\n                  ? $currentlySelected\n\n                  : $activeItem,\n\n                $visibleItems = ($selectedItem.length > 0)\n\n                  ? $selectedItem.siblings(':not(.' + className.filtered +')').addBack()\n\n                  : $menu.children(':not(.' + className.filtered +')'),\n\n                $subMenu              = $selectedItem.children(selector.menu),\n\n                $parentMenu           = $selectedItem.closest(selector.menu),\n\n                inVisibleMenu         = ($parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0),\n\n                hasSubMenu            = ($subMenu.length> 0),\n\n                hasSelectedItem       = ($selectedItem.length > 0),\n\n                selectedIsSelectable  = ($selectedItem.not(selector.unselectable).length > 0),\n\n                delimiterPressed      = (pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple()),\n\n                isAdditionWithoutMenu = (settings.allowAdditions && settings.hideAdditions && (pressedKey == keys.enter || delimiterPressed) && selectedIsSelectable),\n\n                $nextItem,\n\n                isSubMenuItem,\n\n                newIndex\n\n              ;\n\n              // allow selection with menu closed\n\n              if(isAdditionWithoutMenu) {\n\n                module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n\n                module.event.item.click.call($selectedItem, event);\n\n                if(module.is.searchSelection()) {\n\n                  module.remove.searchTerm();\n\n                }\n\n              }\n\n\n\n              // visible menu keyboard shortcuts\n\n              if( module.is.visible() ) {\n\n\n\n                // enter (select or open sub-menu)\n\n                if(pressedKey == keys.enter || delimiterPressed) {\n\n                  if(pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {\n\n                    module.verbose('Pressed enter on unselectable category, opening sub menu');\n\n                    pressedKey = keys.rightArrow;\n\n                  }\n\n                  else if(selectedIsSelectable) {\n\n                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n\n                    module.event.item.click.call($selectedItem, event);\n\n                    if(module.is.searchSelection()) {\n\n                      module.remove.searchTerm();\n\n                      if(module.is.multiple()) {\n\n                          $search.focus();\n\n                      }\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // sub-menu actions\n\n                if(hasSelectedItem) {\n\n\n\n                  if(pressedKey == keys.leftArrow) {\n\n\n\n                    isSubMenuItem = ($parentMenu[0] !== $menu[0]);\n\n\n\n                    if(isSubMenuItem) {\n\n                      module.verbose('Left key pressed, closing sub-menu');\n\n                      module.animate.hide(false, $parentMenu);\n\n                      $selectedItem\n\n                        .removeClass(className.selected)\n\n                      ;\n\n                      $parentMenu\n\n                        .closest(selector.item)\n\n                          .addClass(className.selected)\n\n                      ;\n\n                      event.preventDefault();\n\n                    }\n\n                  }\n\n\n\n                  // right arrow (show sub-menu)\n\n                  if(pressedKey == keys.rightArrow) {\n\n                    if(hasSubMenu) {\n\n                      module.verbose('Right key pressed, opening sub-menu');\n\n                      module.animate.show(false, $subMenu);\n\n                      $selectedItem\n\n                        .removeClass(className.selected)\n\n                      ;\n\n                      $subMenu\n\n                        .find(selector.item).eq(0)\n\n                          .addClass(className.selected)\n\n                      ;\n\n                      event.preventDefault();\n\n                    }\n\n                  }\n\n                }\n\n\n\n                // up arrow (traverse menu up)\n\n                if(pressedKey == keys.upArrow) {\n\n                  $nextItem = (hasSelectedItem && inVisibleMenu)\n\n                    ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)\n\n                    : $item.eq(0)\n\n                  ;\n\n                  if($visibleItems.index( $nextItem ) < 0) {\n\n                    module.verbose('Up key pressed but reached top of current menu');\n\n                    event.preventDefault();\n\n                    return;\n\n                  }\n\n                  else {\n\n                    module.verbose('Up key pressed, changing active item');\n\n                    $selectedItem\n\n                      .removeClass(className.selected)\n\n                    ;\n\n                    $nextItem\n\n                      .addClass(className.selected)\n\n                    ;\n\n                    module.set.scrollPosition($nextItem);\n\n                    if(settings.selectOnKeydown && module.is.single()) {\n\n                      module.set.selectedItem($nextItem);\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // down arrow (traverse menu down)\n\n                if(pressedKey == keys.downArrow) {\n\n                  $nextItem = (hasSelectedItem && inVisibleMenu)\n\n                    ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)\n\n                    : $item.eq(0)\n\n                  ;\n\n                  if($nextItem.length === 0) {\n\n                    module.verbose('Down key pressed but reached bottom of current menu');\n\n                    event.preventDefault();\n\n                    return;\n\n                  }\n\n                  else {\n\n                    module.verbose('Down key pressed, changing active item');\n\n                    $item\n\n                      .removeClass(className.selected)\n\n                    ;\n\n                    $nextItem\n\n                      .addClass(className.selected)\n\n                    ;\n\n                    module.set.scrollPosition($nextItem);\n\n                    if(settings.selectOnKeydown && module.is.single()) {\n\n                      module.set.selectedItem($nextItem);\n\n                    }\n\n                  }\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // page down (show next page)\n\n                if(pressedKey == keys.pageUp) {\n\n                  module.scrollPage('up');\n\n                  event.preventDefault();\n\n                }\n\n                if(pressedKey == keys.pageDown) {\n\n                  module.scrollPage('down');\n\n                  event.preventDefault();\n\n                }\n\n\n\n                // escape (close menu)\n\n                if(pressedKey == keys.escape) {\n\n                  module.verbose('Escape key pressed, closing dropdown');\n\n                  module.hide();\n\n                }\n\n\n\n              }\n\n              else {\n\n                // delimiter key\n\n                if(delimiterPressed) {\n\n                  event.preventDefault();\n\n                }\n\n                // down arrow (open menu)\n\n                if(pressedKey == keys.downArrow && !module.is.visible()) {\n\n                  module.verbose('Down key pressed, showing dropdown');\n\n                  module.show();\n\n                  event.preventDefault();\n\n                }\n\n              }\n\n            }\n\n            else {\n\n              if( !module.has.search() ) {\n\n                module.set.selectedLetter( String.fromCharCode(pressedKey) );\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        trigger: {\n\n          change: function() {\n\n            var\n\n              events       = document.createEvent('HTMLEvents'),\n\n              inputElement = $input[0]\n\n            ;\n\n            if(inputElement) {\n\n              module.verbose('Triggering native change event');\n\n              events.initEvent('change', true, false);\n\n              inputElement.dispatchEvent(events);\n\n            }\n\n          }\n\n        },\n\n\n\n        determine: {\n\n          selectAction: function(text, value) {\n\n            module.verbose('Determining action', settings.action);\n\n            if( $.isFunction( module.action[settings.action] ) ) {\n\n              module.verbose('Triggering preset action', settings.action, text, value);\n\n              module.action[ settings.action ].call(element, text, value, this);\n\n            }\n\n            else if( $.isFunction(settings.action) ) {\n\n              module.verbose('Triggering user action', settings.action, text, value);\n\n              settings.action.call(element, text, value, this);\n\n            }\n\n            else {\n\n              module.error(error.action, settings.action);\n\n            }\n\n          },\n\n          eventInModule: function(event, callback) {\n\n            var\n\n              $target    = $(event.target),\n\n              inDocument = ($target.closest(document.documentElement).length > 0),\n\n              inModule   = ($target.closest($module).length > 0)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if(inDocument && !inModule) {\n\n              module.verbose('Triggering event', callback);\n\n              callback();\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('Event occurred in dropdown, canceling callback');\n\n              return false;\n\n            }\n\n          },\n\n          eventOnElement: function(event, callback) {\n\n            var\n\n              $target      = $(event.target),\n\n              $label       = $target.closest(selector.siblingLabel),\n\n              inVisibleDOM = document.body.contains(event.target),\n\n              notOnLabel   = ($module.find($label).length === 0),\n\n              notInMenu    = ($target.closest($menu).length === 0)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if(inVisibleDOM && notOnLabel && notInMenu) {\n\n              module.verbose('Triggering event', callback);\n\n              callback();\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('Event occurred in dropdown menu, canceling callback');\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        action: {\n\n\n\n          nothing: function() {},\n\n\n\n          activate: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            if( module.can.activate( $(element) ) ) {\n\n              module.set.selected(value, $(element));\n\n              if(!module.is.multiple()) {\n\n                module.hideAndClear();\n\n              }\n\n            }\n\n          },\n\n\n\n          select: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            if( module.can.activate( $(element) ) ) {\n\n              module.set.value(value, text, $(element));\n\n              if(!module.is.multiple()) {\n\n                module.hideAndClear();\n\n              }\n\n            }\n\n          },\n\n\n\n          combo: function(text, value, element) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : text\n\n            ;\n\n            module.set.selected(value, $(element));\n\n            module.hideAndClear();\n\n          },\n\n\n\n          hide: function(text, value, element) {\n\n            module.set.value(value, text, $(element));\n\n            module.hideAndClear();\n\n          }\n\n\n\n        },\n\n\n\n        get: {\n\n          id: function() {\n\n            return id;\n\n          },\n\n          defaultText: function() {\n\n            return $module.data(metadata.defaultText);\n\n          },\n\n          defaultValue: function() {\n\n            return $module.data(metadata.defaultValue);\n\n          },\n\n          placeholderText: function() {\n\n            if(settings.placeholder != 'auto' && typeof settings.placeholder == 'string') {\n\n              return settings.placeholder;\n\n            }\n\n            return $module.data(metadata.placeholderText) || '';\n\n          },\n\n          text: function() {\n\n            return $text.text();\n\n          },\n\n          query: function() {\n\n            return $.trim($search.val());\n\n          },\n\n          searchWidth: function(value) {\n\n            value = (value !== undefined)\n\n              ? value\n\n              : $search.val()\n\n            ;\n\n            $sizer.text(value);\n\n            // prevent rounding issues\n\n            return Math.ceil( $sizer.width() + 1);\n\n          },\n\n          selectionCount: function() {\n\n            var\n\n              values = module.get.values(),\n\n              count\n\n            ;\n\n            count = ( module.is.multiple() )\n\n              ? $.isArray(values)\n\n                ? values.length\n\n                : 0\n\n              : (module.get.value() !== '')\n\n                ? 1\n\n                : 0\n\n            ;\n\n            return count;\n\n          },\n\n          transition: function($subMenu) {\n\n            return (settings.transition == 'auto')\n\n              ? module.is.upward($subMenu)\n\n                ? 'slide up'\n\n                : 'slide down'\n\n              : settings.transition\n\n            ;\n\n          },\n\n          userValues: function() {\n\n            var\n\n              values = module.get.values()\n\n            ;\n\n            if(!values) {\n\n              return false;\n\n            }\n\n            values = $.isArray(values)\n\n              ? values\n\n              : [values]\n\n            ;\n\n            return $.grep(values, function(value) {\n\n              return (module.get.item(value) === false);\n\n            });\n\n          },\n\n          uniqueArray: function(array) {\n\n            return $.grep(array, function (value, index) {\n\n                return $.inArray(value, array) === index;\n\n            });\n\n          },\n\n          caretPosition: function() {\n\n            var\n\n              input = $search.get(0),\n\n              range,\n\n              rangeLength\n\n            ;\n\n            if('selectionStart' in input) {\n\n              return input.selectionStart;\n\n            }\n\n            else if (document.selection) {\n\n              input.focus();\n\n              range       = document.selection.createRange();\n\n              rangeLength = range.text.length;\n\n              range.moveStart('character', -input.value.length);\n\n              return range.text.length - rangeLength;\n\n            }\n\n          },\n\n          value: function() {\n\n            var\n\n              value = ($input.length > 0)\n\n                ? $input.val()\n\n                : $module.data(metadata.value),\n\n              isEmptyMultiselect = ($.isArray(value) && value.length === 1 && value[0] === '')\n\n            ;\n\n            // prevents placeholder element from being selected when multiple\n\n            return (value === undefined || isEmptyMultiselect)\n\n              ? ''\n\n              : value\n\n            ;\n\n          },\n\n          values: function() {\n\n            var\n\n              value = module.get.value()\n\n            ;\n\n            if(value === '') {\n\n              return '';\n\n            }\n\n            return ( !module.has.selectInput() && module.is.multiple() )\n\n              ? (typeof value == 'string') // delimited string\n\n                ? value.split(settings.delimiter)\n\n                : ''\n\n              : value\n\n            ;\n\n          },\n\n          remoteValues: function() {\n\n            var\n\n              values = module.get.values(),\n\n              remoteValues = false\n\n            ;\n\n            if(values) {\n\n              if(typeof values == 'string') {\n\n                values = [values];\n\n              }\n\n              $.each(values, function(index, value) {\n\n                var\n\n                  name = module.read.remoteData(value)\n\n                ;\n\n                module.verbose('Restoring value from session data', name, value);\n\n                if(name) {\n\n                  if(!remoteValues) {\n\n                    remoteValues = {};\n\n                  }\n\n                  remoteValues[value] = name;\n\n                }\n\n              });\n\n            }\n\n            return remoteValues;\n\n          },\n\n          choiceText: function($choice, preserveHTML) {\n\n            preserveHTML = (preserveHTML !== undefined)\n\n              ? preserveHTML\n\n              : settings.preserveHTML\n\n            ;\n\n            if($choice) {\n\n              if($choice.find(selector.menu).length > 0) {\n\n                module.verbose('Retrieving text of element with sub-menu');\n\n                $choice = $choice.clone();\n\n                $choice.find(selector.menu).remove();\n\n                $choice.find(selector.menuIcon).remove();\n\n              }\n\n              return ($choice.data(metadata.text) !== undefined)\n\n                ? $choice.data(metadata.text)\n\n                : (preserveHTML)\n\n                  ? $.trim($choice.html())\n\n                  : $.trim($choice.text())\n\n              ;\n\n            }\n\n          },\n\n          choiceValue: function($choice, choiceText) {\n\n            choiceText = choiceText || module.get.choiceText($choice);\n\n            if(!$choice) {\n\n              return false;\n\n            }\n\n            return ($choice.data(metadata.value) !== undefined)\n\n              ? String( $choice.data(metadata.value) )\n\n              : (typeof choiceText === 'string')\n\n                ? $.trim(choiceText.toLowerCase())\n\n                : String(choiceText)\n\n            ;\n\n          },\n\n          inputEvent: function() {\n\n            var\n\n              input = $search[0]\n\n            ;\n\n            if(input) {\n\n              return (input.oninput !== undefined)\n\n                ? 'input'\n\n                : (input.onpropertychange !== undefined)\n\n                  ? 'propertychange'\n\n                  : 'keyup'\n\n              ;\n\n            }\n\n            return false;\n\n          },\n\n          selectValues: function() {\n\n            var\n\n              select = {}\n\n            ;\n\n            select.values = [];\n\n            $module\n\n              .find('option')\n\n                .each(function() {\n\n                  var\n\n                    $option  = $(this),\n\n                    name     = $option.html(),\n\n                    disabled = $option.attr('disabled'),\n\n                    value    = ( $option.attr('value') !== undefined )\n\n                      ? $option.attr('value')\n\n                      : name\n\n                  ;\n\n                  if(settings.placeholder === 'auto' && value === '') {\n\n                    select.placeholder = name;\n\n                  }\n\n                  else {\n\n                    select.values.push({\n\n                      name     : name,\n\n                      value    : value,\n\n                      disabled : disabled\n\n                    });\n\n                  }\n\n                })\n\n            ;\n\n            if(settings.placeholder && settings.placeholder !== 'auto') {\n\n              module.debug('Setting placeholder value to', settings.placeholder);\n\n              select.placeholder = settings.placeholder;\n\n            }\n\n            if(settings.sortSelect) {\n\n              if(settings.sortSelect === true) {\n\n                select.values.sort(function(a, b) {\n\n                  return (a.name > b.name)\n\n                    ? 1\n\n                    : -1\n\n                    ;\n\n                });\n\n              } else if(settings.sortSelect === 'natural') {\n\n                select.values.sort(function(a, b) {\n\n                  return (a.name.toLowerCase() > b.name.toLowerCase())\n\n                    ? 1\n\n                    : -1\n\n                    ;\n\n                });\n\n              } else if($.isFunction(settings.sortSelect)) {\n\n                select.values.sort(settings.sortSelect);\n\n              }\n\n              module.debug('Retrieved and sorted values from select', select);\n\n            }\n\n            else {\n\n              module.debug('Retrieved values from select', select);\n\n            }\n\n            return select;\n\n          },\n\n          activeItem: function() {\n\n            return $item.filter('.'  + className.active);\n\n          },\n\n          selectedItem: function() {\n\n            var\n\n              $selectedItem = $item.not(selector.unselectable).filter('.'  + className.selected)\n\n            ;\n\n            return ($selectedItem.length > 0)\n\n              ? $selectedItem\n\n              : $item.eq(0)\n\n            ;\n\n          },\n\n          itemWithAdditions: function(value) {\n\n            var\n\n              $items       = module.get.item(value),\n\n              $userItems   = module.create.userChoice(value),\n\n              hasUserItems = ($userItems && $userItems.length > 0)\n\n            ;\n\n            if(hasUserItems) {\n\n              $items = ($items.length > 0)\n\n                ? $items.add($userItems)\n\n                : $userItems\n\n              ;\n\n            }\n\n            return $items;\n\n          },\n\n          item: function(value, strict) {\n\n            var\n\n              $selectedItem = false,\n\n              shouldSearch,\n\n              isMultiple\n\n            ;\n\n            value = (value !== undefined)\n\n              ? value\n\n              : ( module.get.values() !== undefined)\n\n                ? module.get.values()\n\n                : module.get.text()\n\n            ;\n\n            shouldSearch = (isMultiple)\n\n              ? (value.length > 0)\n\n              : (value !== undefined && value !== null)\n\n            ;\n\n            isMultiple = (module.is.multiple() && $.isArray(value));\n\n            strict     = (value === '' || value === 0)\n\n              ? true\n\n              : strict || false\n\n            ;\n\n            if(shouldSearch) {\n\n              $item\n\n                .each(function() {\n\n                  var\n\n                    $choice       = $(this),\n\n                    optionText    = module.get.choiceText($choice),\n\n                    optionValue   = module.get.choiceValue($choice, optionText)\n\n                  ;\n\n                  // safe early exit\n\n                  if(optionValue === null || optionValue === undefined) {\n\n                    return;\n\n                  }\n\n                  if(isMultiple) {\n\n                    if($.inArray( String(optionValue), value) !== -1) {\n\n                      $selectedItem = ($selectedItem)\n\n                        ? $selectedItem.add($choice)\n\n                        : $choice\n\n                      ;\n\n                    }\n\n                  }\n\n                  else if(strict) {\n\n                    module.verbose('Ambiguous dropdown value using strict type check', $choice, value);\n\n                    if( optionValue === value) {\n\n                      $selectedItem = $choice;\n\n                      return true;\n\n                    }\n\n                  }\n\n                  else {\n\n                    if( String(optionValue) == String(value)) {\n\n                      module.verbose('Found select item by value', optionValue, value);\n\n                      $selectedItem = $choice;\n\n                      return true;\n\n                    }\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            return $selectedItem;\n\n          }\n\n        },\n\n\n\n        check: {\n\n          maxSelections: function(selectionCount) {\n\n            if(settings.maxSelections) {\n\n              selectionCount = (selectionCount !== undefined)\n\n                ? selectionCount\n\n                : module.get.selectionCount()\n\n              ;\n\n              if(selectionCount >= settings.maxSelections) {\n\n                module.debug('Maximum selection count reached');\n\n                if(settings.useLabels) {\n\n                  $item.addClass(className.filtered);\n\n                  module.add.message(message.maxSelections);\n\n                }\n\n                return true;\n\n              }\n\n              else {\n\n                module.verbose('No longer at maximum selection count');\n\n                module.remove.message();\n\n                module.remove.filteredItem();\n\n                if(module.is.searchSelection()) {\n\n                  module.filterItems();\n\n                }\n\n                return false;\n\n              }\n\n            }\n\n            return true;\n\n          }\n\n        },\n\n\n\n        restore: {\n\n          defaults: function() {\n\n            module.clear();\n\n            module.restore.defaultText();\n\n            module.restore.defaultValue();\n\n          },\n\n          defaultText: function() {\n\n            var\n\n              defaultText     = module.get.defaultText(),\n\n              placeholderText = module.get.placeholderText\n\n            ;\n\n            if(defaultText === placeholderText) {\n\n              module.debug('Restoring default placeholder text', defaultText);\n\n              module.set.placeholderText(defaultText);\n\n            }\n\n            else {\n\n              module.debug('Restoring default text', defaultText);\n\n              module.set.text(defaultText);\n\n            }\n\n          },\n\n          placeholderText: function() {\n\n            module.set.placeholderText();\n\n          },\n\n          defaultValue: function() {\n\n            var\n\n              defaultValue = module.get.defaultValue()\n\n            ;\n\n            if(defaultValue !== undefined) {\n\n              module.debug('Restoring default value', defaultValue);\n\n              if(defaultValue !== '') {\n\n                module.set.value(defaultValue);\n\n                module.set.selected();\n\n              }\n\n              else {\n\n                module.remove.activeItem();\n\n                module.remove.selectedItem();\n\n              }\n\n            }\n\n          },\n\n          labels: function() {\n\n            if(settings.allowAdditions) {\n\n              if(!settings.useLabels) {\n\n                module.error(error.labels);\n\n                settings.useLabels = true;\n\n              }\n\n              module.debug('Restoring selected values');\n\n              module.create.userLabels();\n\n            }\n\n            module.check.maxSelections();\n\n          },\n\n          selected: function() {\n\n            module.restore.values();\n\n            if(module.is.multiple()) {\n\n              module.debug('Restoring previously selected values and labels');\n\n              module.restore.labels();\n\n            }\n\n            else {\n\n              module.debug('Restoring previously selected values');\n\n            }\n\n          },\n\n          values: function() {\n\n            // prevents callbacks from occurring on initial load\n\n            module.set.initialLoad();\n\n            if(settings.apiSettings && settings.saveRemoteData && module.get.remoteValues()) {\n\n              module.restore.remoteValues();\n\n            }\n\n            else {\n\n              module.set.selected();\n\n            }\n\n            module.remove.initialLoad();\n\n          },\n\n          remoteValues: function() {\n\n            var\n\n              values = module.get.remoteValues()\n\n            ;\n\n            module.debug('Recreating selected from session data', values);\n\n            if(values) {\n\n              if( module.is.single() ) {\n\n                $.each(values, function(value, name) {\n\n                  module.set.text(name);\n\n                });\n\n              }\n\n              else {\n\n                $.each(values, function(value, name) {\n\n                  module.add.label(value, name);\n\n                });\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        read: {\n\n          remoteData: function(value) {\n\n            var\n\n              name\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            name = sessionStorage.getItem(value);\n\n            return (name !== undefined)\n\n              ? name\n\n              : false\n\n            ;\n\n          }\n\n        },\n\n\n\n        save: {\n\n          defaults: function() {\n\n            module.save.defaultText();\n\n            module.save.placeholderText();\n\n            module.save.defaultValue();\n\n          },\n\n          defaultValue: function() {\n\n            var\n\n              value = module.get.value()\n\n            ;\n\n            module.verbose('Saving default value as', value);\n\n            $module.data(metadata.defaultValue, value);\n\n          },\n\n          defaultText: function() {\n\n            var\n\n              text = module.get.text()\n\n            ;\n\n            module.verbose('Saving default text as', text);\n\n            $module.data(metadata.defaultText, text);\n\n          },\n\n          placeholderText: function() {\n\n            var\n\n              text\n\n            ;\n\n            if(settings.placeholder !== false && $text.hasClass(className.placeholder)) {\n\n              text = module.get.text();\n\n              module.verbose('Saving placeholder text as', text);\n\n              $module.data(metadata.placeholderText, text);\n\n            }\n\n          },\n\n          remoteData: function(name, value) {\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            module.verbose('Saving remote data to session storage', value, name);\n\n            sessionStorage.setItem(value, name);\n\n          }\n\n        },\n\n\n\n        clear: function() {\n\n          if(module.is.multiple() && settings.useLabels) {\n\n            module.remove.labels();\n\n          }\n\n          else {\n\n            module.remove.activeItem();\n\n            module.remove.selectedItem();\n\n            module.remove.filteredItem();\n\n          }\n\n          module.set.placeholderText();\n\n          module.clearValue();\n\n        },\n\n\n\n        clearValue: function() {\n\n          module.set.value('');\n\n        },\n\n\n\n        scrollPage: function(direction, $selectedItem) {\n\n          var\n\n            $currentItem  = $selectedItem || module.get.selectedItem(),\n\n            $menu         = $currentItem.closest(selector.menu),\n\n            menuHeight    = $menu.outerHeight(),\n\n            currentScroll = $menu.scrollTop(),\n\n            itemHeight    = $item.eq(0).outerHeight(),\n\n            itemsPerPage  = Math.floor(menuHeight / itemHeight),\n\n            maxScroll     = $menu.prop('scrollHeight'),\n\n            newScroll     = (direction == 'up')\n\n              ? currentScroll - (itemHeight * itemsPerPage)\n\n              : currentScroll + (itemHeight * itemsPerPage),\n\n            $selectableItem = $item.not(selector.unselectable),\n\n            isWithinRange,\n\n            $nextSelectedItem,\n\n            elementIndex\n\n          ;\n\n          elementIndex      = (direction == 'up')\n\n            ? $selectableItem.index($currentItem) - itemsPerPage\n\n            : $selectableItem.index($currentItem) + itemsPerPage\n\n          ;\n\n          isWithinRange = (direction == 'up')\n\n            ? (elementIndex >= 0)\n\n            : (elementIndex < $selectableItem.length)\n\n          ;\n\n          $nextSelectedItem = (isWithinRange)\n\n            ? $selectableItem.eq(elementIndex)\n\n            : (direction == 'up')\n\n              ? $selectableItem.first()\n\n              : $selectableItem.last()\n\n          ;\n\n          if($nextSelectedItem.length > 0) {\n\n            module.debug('Scrolling page', direction, $nextSelectedItem);\n\n            $currentItem\n\n              .removeClass(className.selected)\n\n            ;\n\n            $nextSelectedItem\n\n              .addClass(className.selected)\n\n            ;\n\n            if(settings.selectOnKeydown && module.is.single()) {\n\n              module.set.selectedItem($nextSelectedItem);\n\n            }\n\n            $menu\n\n              .scrollTop(newScroll)\n\n            ;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          filtered: function() {\n\n            var\n\n              isMultiple       = module.is.multiple(),\n\n              isSearch         = module.is.searchSelection(),\n\n              isSearchMultiple = (isMultiple && isSearch),\n\n              searchValue      = (isSearch)\n\n                ? module.get.query()\n\n                : '',\n\n              hasSearchValue   = (typeof searchValue === 'string' && searchValue.length > 0),\n\n              searchWidth      = module.get.searchWidth(),\n\n              valueIsSet       = searchValue !== ''\n\n            ;\n\n            if(isMultiple && hasSearchValue) {\n\n              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);\n\n              $search.css('width', searchWidth);\n\n            }\n\n            if(hasSearchValue || (isSearchMultiple && valueIsSet)) {\n\n              module.verbose('Hiding placeholder text');\n\n              $text.addClass(className.filtered);\n\n            }\n\n            else if(!isMultiple || (isSearchMultiple && !valueIsSet)) {\n\n              module.verbose('Showing placeholder text');\n\n              $text.removeClass(className.filtered);\n\n            }\n\n          },\n\n          empty: function() {\n\n            $module.addClass(className.empty);\n\n          },\n\n          loading: function() {\n\n            $module.addClass(className.loading);\n\n          },\n\n          placeholderText: function(text) {\n\n            text = text || module.get.placeholderText();\n\n            module.debug('Setting placeholder text', text);\n\n            module.set.text(text);\n\n            $text.addClass(className.placeholder);\n\n          },\n\n          tabbable: function() {\n\n            if( module.is.searchSelection() ) {\n\n              module.debug('Added tabindex to searchable dropdown');\n\n              $search\n\n                .val('')\n\n                .attr('tabindex', 0)\n\n              ;\n\n              $menu\n\n                .attr('tabindex', -1)\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Added tabindex to dropdown');\n\n              if( $module.attr('tabindex') === undefined) {\n\n                $module\n\n                  .attr('tabindex', 0)\n\n                ;\n\n                $menu\n\n                  .attr('tabindex', -1)\n\n                ;\n\n              }\n\n            }\n\n          },\n\n          initialLoad: function() {\n\n            module.verbose('Setting initial load');\n\n            initialLoad = true;\n\n          },\n\n          activeItem: function($item) {\n\n            if( settings.allowAdditions && $item.filter(selector.addition).length > 0 ) {\n\n              $item.addClass(className.filtered);\n\n            }\n\n            else {\n\n              $item.addClass(className.active);\n\n            }\n\n          },\n\n          partialSearch: function(text) {\n\n            var\n\n              length = module.get.query().length\n\n            ;\n\n            $search.val( text.substr(0, length));\n\n          },\n\n          scrollPosition: function($item, forceScroll) {\n\n            var\n\n              edgeTolerance = 5,\n\n              $menu,\n\n              hasActive,\n\n              offset,\n\n              itemHeight,\n\n              itemOffset,\n\n              menuOffset,\n\n              menuScroll,\n\n              menuHeight,\n\n              abovePage,\n\n              belowPage\n\n            ;\n\n\n\n            $item       = $item || module.get.selectedItem();\n\n            $menu       = $item.closest(selector.menu);\n\n            hasActive   = ($item && $item.length > 0);\n\n            forceScroll = (forceScroll !== undefined)\n\n              ? forceScroll\n\n              : false\n\n            ;\n\n            if($item && $menu.length > 0 && hasActive) {\n\n              itemOffset = $item.position().top;\n\n\n\n              $menu.addClass(className.loading);\n\n              menuScroll = $menu.scrollTop();\n\n              menuOffset = $menu.offset().top;\n\n              itemOffset = $item.offset().top;\n\n              offset     = menuScroll - menuOffset + itemOffset;\n\n              if(!forceScroll) {\n\n                menuHeight = $menu.height();\n\n                belowPage  = menuScroll + menuHeight < (offset + edgeTolerance);\n\n                abovePage  = ((offset - edgeTolerance) < menuScroll);\n\n              }\n\n              module.debug('Scrolling to active item', offset);\n\n              if(forceScroll || abovePage || belowPage) {\n\n                $menu.scrollTop(offset);\n\n              }\n\n              $menu.removeClass(className.loading);\n\n            }\n\n          },\n\n          text: function(text) {\n\n            if(settings.action === 'combo') {\n\n              module.debug('Changing combo button text', text, $combo);\n\n              if(settings.preserveHTML) {\n\n                $combo.html(text);\n\n              }\n\n              else {\n\n                $combo.text(text);\n\n              }\n\n            }\n\n            else if(settings.action === 'activate') {\n\n              if(text !== module.get.placeholderText()) {\n\n                $text.removeClass(className.placeholder);\n\n              }\n\n              module.debug('Changing text', text, $text);\n\n              $text\n\n                .removeClass(className.filtered)\n\n              ;\n\n              if(settings.preserveHTML) {\n\n                $text.html(text);\n\n              }\n\n              else {\n\n                $text.text(text);\n\n              }\n\n            }\n\n          },\n\n          selectedItem: function($item) {\n\n            var\n\n              value      = module.get.choiceValue($item),\n\n              searchText = module.get.choiceText($item, false),\n\n              text       = module.get.choiceText($item, true)\n\n            ;\n\n            module.debug('Setting user selection to item', $item);\n\n            module.remove.activeItem();\n\n            module.set.partialSearch(searchText);\n\n            module.set.activeItem($item);\n\n            module.set.selected(value, $item);\n\n            module.set.text(text);\n\n          },\n\n          selectedLetter: function(letter) {\n\n            var\n\n              $selectedItem         = $item.filter('.' + className.selected),\n\n              alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),\n\n              $nextValue            = false,\n\n              $nextItem\n\n            ;\n\n            // check next of same letter\n\n            if(alreadySelectedLetter) {\n\n              $nextItem = $selectedItem.nextAll($item).eq(0);\n\n              if( module.has.firstLetter($nextItem, letter) ) {\n\n                $nextValue  = $nextItem;\n\n              }\n\n            }\n\n            // check all values\n\n            if(!$nextValue) {\n\n              $item\n\n                .each(function(){\n\n                  if(module.has.firstLetter($(this), letter)) {\n\n                    $nextValue = $(this);\n\n                    return false;\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            // set next value\n\n            if($nextValue) {\n\n              module.verbose('Scrolling to next value with letter', letter);\n\n              module.set.scrollPosition($nextValue);\n\n              $selectedItem.removeClass(className.selected);\n\n              $nextValue.addClass(className.selected);\n\n              if(settings.selectOnKeydown && module.is.single()) {\n\n                module.set.selectedItem($nextValue);\n\n              }\n\n            }\n\n          },\n\n          direction: function($menu) {\n\n            if(settings.direction == 'auto') {\n\n              // reset position\n\n              module.remove.upward();\n\n\n\n              if(module.can.openDownward($menu)) {\n\n                module.remove.upward($menu);\n\n              }\n\n              else {\n\n                module.set.upward($menu);\n\n              }\n\n              if(!module.is.leftward($menu) && !module.can.openRightward($menu)) {\n\n                module.set.leftward($menu);\n\n              }\n\n            }\n\n            else if(settings.direction == 'upward') {\n\n              module.set.upward($menu);\n\n            }\n\n          },\n\n          upward: function($currentMenu) {\n\n            var $element = $currentMenu || $module;\n\n            $element.addClass(className.upward);\n\n          },\n\n          leftward: function($currentMenu) {\n\n            var $element = $currentMenu || $menu;\n\n            $element.addClass(className.leftward);\n\n          },\n\n          value: function(value, text, $selected) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              hasInput     = ($input.length > 0),\n\n              currentValue = module.get.values(),\n\n              stringValue  = (value !== undefined)\n\n                ? String(value)\n\n                : value,\n\n              newValue\n\n            ;\n\n            if(hasInput) {\n\n              if(!settings.allowReselection && stringValue == currentValue) {\n\n                module.verbose('Skipping value update already same value', value, currentValue);\n\n                if(!module.is.initialLoad()) {\n\n                  return;\n\n                }\n\n              }\n\n\n\n              if( module.is.single() && module.has.selectInput() && module.can.extendSelect() ) {\n\n                module.debug('Adding user option', value);\n\n                module.add.optionValue(value);\n\n              }\n\n              module.debug('Updating input value', escapedValue, currentValue);\n\n              internalChange = true;\n\n              $input\n\n                .val(escapedValue)\n\n              ;\n\n              if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n                module.debug('Input native change event ignored on initial load');\n\n              }\n\n              else {\n\n                module.trigger.change();\n\n              }\n\n              internalChange = false;\n\n            }\n\n            else {\n\n              module.verbose('Storing value in metadata', escapedValue, $input);\n\n              if(escapedValue !== currentValue) {\n\n                $module.data(metadata.value, stringValue);\n\n              }\n\n            }\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('No callback on initial load', settings.onChange);\n\n            }\n\n            else {\n\n              settings.onChange.call(element, value, text, $selected);\n\n            }\n\n          },\n\n          active: function() {\n\n            $module\n\n              .addClass(className.active)\n\n            ;\n\n          },\n\n          multiple: function() {\n\n            $module.addClass(className.multiple);\n\n          },\n\n          visible: function() {\n\n            $module.addClass(className.visible);\n\n          },\n\n          exactly: function(value, $selectedItem) {\n\n            module.debug('Setting selected to exact values');\n\n            module.clear();\n\n            module.set.selected(value, $selectedItem);\n\n          },\n\n          selected: function(value, $selectedItem) {\n\n            var\n\n              isMultiple = module.is.multiple(),\n\n              $userSelectedItem\n\n            ;\n\n            $selectedItem = (settings.allowAdditions)\n\n              ? $selectedItem || module.get.itemWithAdditions(value)\n\n              : $selectedItem || module.get.item(value)\n\n            ;\n\n            if(!$selectedItem) {\n\n              return;\n\n            }\n\n            module.debug('Setting selected menu item to', $selectedItem);\n\n            if(module.is.multiple()) {\n\n              module.remove.searchWidth();\n\n            }\n\n            if(module.is.single()) {\n\n              module.remove.activeItem();\n\n              module.remove.selectedItem();\n\n            }\n\n            else if(settings.useLabels) {\n\n              module.remove.selectedItem();\n\n            }\n\n            // select each item\n\n            $selectedItem\n\n              .each(function() {\n\n                var\n\n                  $selected      = $(this),\n\n                  selectedText   = module.get.choiceText($selected),\n\n                  selectedValue  = module.get.choiceValue($selected, selectedText),\n\n\n\n                  isFiltered     = $selected.hasClass(className.filtered),\n\n                  isActive       = $selected.hasClass(className.active),\n\n                  isUserValue    = $selected.hasClass(className.addition),\n\n                  shouldAnimate  = (isMultiple && $selectedItem.length == 1)\n\n                ;\n\n                if(isMultiple) {\n\n                  if(!isActive || isUserValue) {\n\n                    if(settings.apiSettings && settings.saveRemoteData) {\n\n                      module.save.remoteData(selectedText, selectedValue);\n\n                    }\n\n                    if(settings.useLabels) {\n\n                      module.add.label(selectedValue, selectedText, shouldAnimate);\n\n                      module.add.value(selectedValue, selectedText, $selected);\n\n                      module.set.activeItem($selected);\n\n                      module.filterActive();\n\n                      module.select.nextAvailable($selectedItem);\n\n                    }\n\n                    else {\n\n                      module.add.value(selectedValue, selectedText, $selected);\n\n                      module.set.text(module.add.variables(message.count));\n\n                      module.set.activeItem($selected);\n\n                    }\n\n                  }\n\n                  else if(!isFiltered) {\n\n                    module.debug('Selected active value, removing label');\n\n                    module.remove.selected(selectedValue);\n\n                  }\n\n                }\n\n                else {\n\n                  if(settings.apiSettings && settings.saveRemoteData) {\n\n                    module.save.remoteData(selectedText, selectedValue);\n\n                  }\n\n                  module.set.text(selectedText);\n\n                  module.set.value(selectedValue, selectedText, $selected);\n\n                  $selected\n\n                    .addClass(className.active)\n\n                    .addClass(className.selected)\n\n                  ;\n\n                }\n\n              })\n\n            ;\n\n          },\n\n        },\n\n\n\n        add: {\n\n          label: function(value, text, shouldAnimate) {\n\n            var\n\n              $next  = module.is.searchSelection()\n\n                ? $search\n\n                : $text,\n\n              escapedValue = module.escape.value(value),\n\n              $label\n\n            ;\n\n            if(settings.ignoreCase) {\n\n              escapedValue = escapedValue.toLowerCase();\n\n            }\n\n            $label =  $('<a />')\n\n              .addClass(className.label)\n\n              .attr('data-' + metadata.value, escapedValue)\n\n              .html(templates.label(escapedValue, text))\n\n            ;\n\n            $label = settings.onLabelCreate.call($label, escapedValue, text);\n\n\n\n            if(module.has.label(value)) {\n\n              module.debug('User selection already exists, skipping', escapedValue);\n\n              return;\n\n            }\n\n            if(settings.label.variation) {\n\n              $label.addClass(settings.label.variation);\n\n            }\n\n            if(shouldAnimate === true) {\n\n              module.debug('Animating in label', $label);\n\n              $label\n\n                .addClass(className.hidden)\n\n                .insertBefore($next)\n\n                .transition(settings.label.transition, settings.label.duration)\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Adding selection label', $label);\n\n              $label\n\n                .insertBefore($next)\n\n              ;\n\n            }\n\n          },\n\n          message: function(message) {\n\n            var\n\n              $message = $menu.children(selector.message),\n\n              html     = settings.templates.message(module.add.variables(message))\n\n            ;\n\n            if($message.length > 0) {\n\n              $message\n\n                .html(html)\n\n              ;\n\n            }\n\n            else {\n\n              $message = $('<div/>')\n\n                .html(html)\n\n                .addClass(className.message)\n\n                .appendTo($menu)\n\n              ;\n\n            }\n\n          },\n\n          optionValue: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $option      = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n\n              hasOption    = ($option.length > 0)\n\n            ;\n\n            if(hasOption) {\n\n              return;\n\n            }\n\n            // temporarily disconnect observer\n\n            module.disconnect.selectObserver();\n\n            if( module.is.single() ) {\n\n              module.verbose('Removing previous user addition');\n\n              $input.find('option.' + className.addition).remove();\n\n            }\n\n            $('<option/>')\n\n              .prop('value', escapedValue)\n\n              .addClass(className.addition)\n\n              .html(value)\n\n              .appendTo($input)\n\n            ;\n\n            module.verbose('Adding user addition as an <option>', value);\n\n            module.observe.select();\n\n          },\n\n          userSuggestion: function(value) {\n\n            var\n\n              $addition         = $menu.children(selector.addition),\n\n              $existingItem     = module.get.item(value),\n\n              alreadyHasValue   = $existingItem && $existingItem.not(selector.addition).length,\n\n              hasUserSuggestion = $addition.length > 0,\n\n              html\n\n            ;\n\n            if(settings.useLabels && module.has.maxSelections()) {\n\n              return;\n\n            }\n\n            if(value === '' || alreadyHasValue) {\n\n              $addition.remove();\n\n              return;\n\n            }\n\n            if(hasUserSuggestion) {\n\n              $addition\n\n                .data(metadata.value, value)\n\n                .data(metadata.text, value)\n\n                .attr('data-' + metadata.value, value)\n\n                .attr('data-' + metadata.text, value)\n\n                .removeClass(className.filtered)\n\n              ;\n\n              if(!settings.hideAdditions) {\n\n                html = settings.templates.addition( module.add.variables(message.addResult, value) );\n\n                $addition\n\n                  .html(html)\n\n                ;\n\n              }\n\n              module.verbose('Replacing user suggestion with new value', $addition);\n\n            }\n\n            else {\n\n              $addition = module.create.userChoice(value);\n\n              $addition\n\n                .prependTo($menu)\n\n              ;\n\n              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);\n\n            }\n\n            if(!settings.hideAdditions || module.is.allFiltered()) {\n\n              $addition\n\n                .addClass(className.selected)\n\n                .siblings()\n\n                .removeClass(className.selected)\n\n              ;\n\n            }\n\n            module.refreshItems();\n\n          },\n\n          variables: function(message, term) {\n\n            var\n\n              hasCount    = (message.search('{count}') !== -1),\n\n              hasMaxCount = (message.search('{maxCount}') !== -1),\n\n              hasTerm     = (message.search('{term}') !== -1),\n\n              values,\n\n              count,\n\n              query\n\n            ;\n\n            module.verbose('Adding templated variables to message', message);\n\n            if(hasCount) {\n\n              count  = module.get.selectionCount();\n\n              message = message.replace('{count}', count);\n\n            }\n\n            if(hasMaxCount) {\n\n              count  = module.get.selectionCount();\n\n              message = message.replace('{maxCount}', settings.maxSelections);\n\n            }\n\n            if(hasTerm) {\n\n              query   = term || module.get.query();\n\n              message = message.replace('{term}', query);\n\n            }\n\n            return message;\n\n          },\n\n          value: function(addedValue, addedText, $selectedItem) {\n\n            var\n\n              currentValue = module.get.values(),\n\n              newValue\n\n            ;\n\n            if(module.has.value(addedValue)) {\n\n              module.debug('Value already selected');\n\n              return;\n\n            }\n\n            if(addedValue === '') {\n\n              module.debug('Cannot select blank values from multiselect');\n\n              return;\n\n            }\n\n            // extend current array\n\n            if($.isArray(currentValue)) {\n\n              newValue = currentValue.concat([addedValue]);\n\n              newValue = module.get.uniqueArray(newValue);\n\n            }\n\n            else {\n\n              newValue = [addedValue];\n\n            }\n\n            // add values\n\n            if( module.has.selectInput() ) {\n\n              if(module.can.extendSelect()) {\n\n                module.debug('Adding value to select', addedValue, newValue, $input);\n\n                module.add.optionValue(addedValue);\n\n              }\n\n            }\n\n            else {\n\n              newValue = newValue.join(settings.delimiter);\n\n              module.debug('Setting hidden input to delimited value', newValue, $input);\n\n            }\n\n\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('Skipping onadd callback on initial load', settings.onAdd);\n\n            }\n\n            else {\n\n              settings.onAdd.call(element, addedValue, addedText, $selectedItem);\n\n            }\n\n            module.set.value(newValue, addedValue, addedText, $selectedItem);\n\n            module.check.maxSelections();\n\n          },\n\n        },\n\n\n\n        remove: {\n\n          active: function() {\n\n            $module.removeClass(className.active);\n\n          },\n\n          activeLabel: function() {\n\n            $module.find(selector.label).removeClass(className.active);\n\n          },\n\n          empty: function() {\n\n            $module.removeClass(className.empty);\n\n          },\n\n          loading: function() {\n\n            $module.removeClass(className.loading);\n\n          },\n\n          initialLoad: function() {\n\n            initialLoad = false;\n\n          },\n\n          upward: function($currentMenu) {\n\n            var $element = $currentMenu || $module;\n\n            $element.removeClass(className.upward);\n\n          },\n\n          leftward: function($currentMenu) {\n\n            var $element = $currentMenu || $menu;\n\n            $element.removeClass(className.leftward);\n\n          },\n\n          visible: function() {\n\n            $module.removeClass(className.visible);\n\n          },\n\n          activeItem: function() {\n\n            $item.removeClass(className.active);\n\n          },\n\n          filteredItem: function() {\n\n            if(settings.useLabels && module.has.maxSelections() ) {\n\n              return;\n\n            }\n\n            if(settings.useLabels && module.is.multiple()) {\n\n              $item.not('.' + className.active).removeClass(className.filtered);\n\n            }\n\n            else {\n\n              $item.removeClass(className.filtered);\n\n            }\n\n            if(settings.hideDividers) {\n\n              $divider.removeClass(className.hidden);\n\n            }\n\n            module.remove.empty();\n\n          },\n\n          optionValue: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $option      = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n\n              hasOption    = ($option.length > 0)\n\n            ;\n\n            if(!hasOption || !$option.hasClass(className.addition)) {\n\n              return;\n\n            }\n\n            // temporarily disconnect observer\n\n            if(selectObserver) {\n\n              selectObserver.disconnect();\n\n              module.verbose('Temporarily disconnecting mutation observer');\n\n            }\n\n            $option.remove();\n\n            module.verbose('Removing user addition as an <option>', escapedValue);\n\n            if(selectObserver) {\n\n              selectObserver.observe($input[0], {\n\n                childList : true,\n\n                subtree   : true\n\n              });\n\n            }\n\n          },\n\n          message: function() {\n\n            $menu.children(selector.message).remove();\n\n          },\n\n          searchWidth: function() {\n\n            $search.css('width', '');\n\n          },\n\n          searchTerm: function() {\n\n            module.verbose('Cleared search term');\n\n            $search.val('');\n\n            module.set.filtered();\n\n          },\n\n          userAddition: function() {\n\n            $item.filter(selector.addition).remove();\n\n          },\n\n          selected: function(value, $selectedItem) {\n\n            $selectedItem = (settings.allowAdditions)\n\n              ? $selectedItem || module.get.itemWithAdditions(value)\n\n              : $selectedItem || module.get.item(value)\n\n            ;\n\n\n\n            if(!$selectedItem) {\n\n              return false;\n\n            }\n\n\n\n            $selectedItem\n\n              .each(function() {\n\n                var\n\n                  $selected     = $(this),\n\n                  selectedText  = module.get.choiceText($selected),\n\n                  selectedValue = module.get.choiceValue($selected, selectedText)\n\n                ;\n\n                if(module.is.multiple()) {\n\n                  if(settings.useLabels) {\n\n                    module.remove.value(selectedValue, selectedText, $selected);\n\n                    module.remove.label(selectedValue);\n\n                  }\n\n                  else {\n\n                    module.remove.value(selectedValue, selectedText, $selected);\n\n                    if(module.get.selectionCount() === 0) {\n\n                      module.set.placeholderText();\n\n                    }\n\n                    else {\n\n                      module.set.text(module.add.variables(message.count));\n\n                    }\n\n                  }\n\n                }\n\n                else {\n\n                  module.remove.value(selectedValue, selectedText, $selected);\n\n                }\n\n                $selected\n\n                  .removeClass(className.filtered)\n\n                  .removeClass(className.active)\n\n                ;\n\n                if(settings.useLabels) {\n\n                  $selected.removeClass(className.selected);\n\n                }\n\n              })\n\n            ;\n\n          },\n\n          selectedItem: function() {\n\n            $item.removeClass(className.selected);\n\n          },\n\n          value: function(removedValue, removedText, $removedItem) {\n\n            var\n\n              values = module.get.values(),\n\n              newValue\n\n            ;\n\n            if( module.has.selectInput() ) {\n\n              module.verbose('Input is <select> removing selected option', removedValue);\n\n              newValue = module.remove.arrayValue(removedValue, values);\n\n              module.remove.optionValue(removedValue);\n\n            }\n\n            else {\n\n              module.verbose('Removing from delimited values', removedValue);\n\n              newValue = module.remove.arrayValue(removedValue, values);\n\n              newValue = newValue.join(settings.delimiter);\n\n            }\n\n            if(settings.fireOnInit === false && module.is.initialLoad()) {\n\n              module.verbose('No callback on initial load', settings.onRemove);\n\n            }\n\n            else {\n\n              settings.onRemove.call(element, removedValue, removedText, $removedItem);\n\n            }\n\n            module.set.value(newValue, removedText, $removedItem);\n\n            module.check.maxSelections();\n\n          },\n\n          arrayValue: function(removedValue, values) {\n\n            if( !$.isArray(values) ) {\n\n              values = [values];\n\n            }\n\n            values = $.grep(values, function(value){\n\n              return (removedValue != value);\n\n            });\n\n            module.verbose('Removed value from delimited string', removedValue, values);\n\n            return values;\n\n          },\n\n          label: function(value, shouldAnimate) {\n\n            var\n\n              $labels       = $module.find(selector.label),\n\n              $removedLabel = $labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(value) +'\"]')\n\n            ;\n\n            module.verbose('Removing label', $removedLabel);\n\n            $removedLabel.remove();\n\n          },\n\n          activeLabels: function($activeLabels) {\n\n            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);\n\n            module.verbose('Removing active label selections', $activeLabels);\n\n            module.remove.labels($activeLabels);\n\n          },\n\n          labels: function($labels) {\n\n            $labels = $labels || $module.find(selector.label);\n\n            module.verbose('Removing labels', $labels);\n\n            $labels\n\n              .each(function(){\n\n                var\n\n                  $label      = $(this),\n\n                  value       = $label.data(metadata.value),\n\n                  stringValue = (value !== undefined)\n\n                    ? String(value)\n\n                    : value,\n\n                  isUserValue = module.is.userValue(stringValue)\n\n                ;\n\n                if(settings.onLabelRemove.call($label, value) === false) {\n\n                  module.debug('Label remove callback cancelled removal');\n\n                  return;\n\n                }\n\n                module.remove.message();\n\n                if(isUserValue) {\n\n                  module.remove.value(stringValue);\n\n                  module.remove.label(stringValue);\n\n                }\n\n                else {\n\n                  // selected will also remove label\n\n                  module.remove.selected(stringValue);\n\n                }\n\n              })\n\n            ;\n\n          },\n\n          tabbable: function() {\n\n            if( module.is.searchSelection() ) {\n\n              module.debug('Searchable dropdown initialized');\n\n              $search\n\n                .removeAttr('tabindex')\n\n              ;\n\n              $menu\n\n                .removeAttr('tabindex')\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Simple selection dropdown initialized');\n\n              $module\n\n                .removeAttr('tabindex')\n\n              ;\n\n              $menu\n\n                .removeAttr('tabindex')\n\n              ;\n\n            }\n\n          },\n\n        },\n\n\n\n        has: {\n\n          menuSearch: function() {\n\n            return (module.has.search() && $search.closest($menu).length > 0);\n\n          },\n\n          clearItem: function() {\n\n            return ($clear.length > 0);\n\n          },\n\n          search: function() {\n\n            return ($search.length > 0);\n\n          },\n\n          sizer: function() {\n\n            return ($sizer.length > 0);\n\n          },\n\n          selectInput: function() {\n\n            return ( $input.is('select') );\n\n          },\n\n          minCharacters: function(searchTerm) {\n\n            if(settings.minCharacters) {\n\n              searchTerm = (searchTerm !== undefined)\n\n                ? String(searchTerm)\n\n                : String(module.get.query())\n\n              ;\n\n              return (searchTerm.length >= settings.minCharacters);\n\n            }\n\n            return true;\n\n          },\n\n          firstLetter: function($item, letter) {\n\n            var\n\n              text,\n\n              firstLetter\n\n            ;\n\n            if(!$item || $item.length === 0 || typeof letter !== 'string') {\n\n              return false;\n\n            }\n\n            text        = module.get.choiceText($item, false);\n\n            letter      = letter.toLowerCase();\n\n            firstLetter = String(text).charAt(0).toLowerCase();\n\n            return (letter == firstLetter);\n\n          },\n\n          input: function() {\n\n            return ($input.length > 0);\n\n          },\n\n          items: function() {\n\n            return ($item.length > 0);\n\n          },\n\n          menu: function() {\n\n            return ($menu.length > 0);\n\n          },\n\n          message: function() {\n\n            return ($menu.children(selector.message).length !== 0);\n\n          },\n\n          label: function(value) {\n\n            var\n\n              escapedValue = module.escape.value(value),\n\n              $labels      = $module.find(selector.label)\n\n            ;\n\n            if(settings.ignoreCase) {\n\n              escapedValue = escapedValue.toLowerCase();\n\n            }\n\n            return ($labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(escapedValue) +'\"]').length > 0);\n\n          },\n\n          maxSelections: function() {\n\n            return (settings.maxSelections && module.get.selectionCount() >= settings.maxSelections);\n\n          },\n\n          allResultsFiltered: function() {\n\n            var\n\n              $normalResults = $item.not(selector.addition)\n\n            ;\n\n            return ($normalResults.filter(selector.unselectable).length === $normalResults.length);\n\n          },\n\n          userSuggestion: function() {\n\n            return ($menu.children(selector.addition).length > 0);\n\n          },\n\n          query: function() {\n\n            return (module.get.query() !== '');\n\n          },\n\n          value: function(value) {\n\n            return (settings.ignoreCase)\n\n              ? module.has.valueIgnoringCase(value)\n\n              : module.has.valueMatchingCase(value)\n\n            ;\n\n          },\n\n          valueMatchingCase: function(value) {\n\n            var\n\n              values   = module.get.values(),\n\n              hasValue = $.isArray(values)\n\n               ? values && ($.inArray(value, values) !== -1)\n\n               : (values == value)\n\n            ;\n\n            return (hasValue)\n\n              ? true\n\n              : false\n\n            ;\n\n          },\n\n          valueIgnoringCase: function(value) {\n\n            var\n\n              values   = module.get.values(),\n\n              hasValue = false\n\n            ;\n\n            if(!$.isArray(values)) {\n\n              values = [values];\n\n            }\n\n            $.each(values, function(index, existingValue) {\n\n              if(String(value).toLowerCase() == String(existingValue).toLowerCase()) {\n\n                hasValue = true;\n\n                return false;\n\n              }\n\n            });\n\n            return hasValue;\n\n          }\n\n        },\n\n\n\n        is: {\n\n          active: function() {\n\n            return $module.hasClass(className.active);\n\n          },\n\n          animatingInward: function() {\n\n            return $menu.transition('is inward');\n\n          },\n\n          animatingOutward: function() {\n\n            return $menu.transition('is outward');\n\n          },\n\n          bubbledLabelClick: function(event) {\n\n            return $(event.target).is('select, input') && $module.closest('label').length > 0;\n\n          },\n\n          bubbledIconClick: function(event) {\n\n            return $(event.target).closest($icon).length > 0;\n\n          },\n\n          alreadySetup: function() {\n\n            return ($module.is('select') && $module.parent(selector.dropdown).data(moduleNamespace) !== undefined && $module.prev().length === 0);\n\n          },\n\n          animating: function($subMenu) {\n\n            return ($subMenu)\n\n              ? $subMenu.transition && $subMenu.transition('is animating')\n\n              : $menu.transition    && $menu.transition('is animating')\n\n            ;\n\n          },\n\n          leftward: function($subMenu) {\n\n            var $selectedMenu = $subMenu || $menu;\n\n            return $selectedMenu.hasClass(className.leftward);\n\n          },\n\n          clearable: function() {\n\n            return ($module.hasClass(className.clearable) || settings.clearable);\n\n          },\n\n          disabled: function() {\n\n            return $module.hasClass(className.disabled);\n\n          },\n\n          focused: function() {\n\n            return (document.activeElement === $module[0]);\n\n          },\n\n          focusedOnSearch: function() {\n\n            return (document.activeElement === $search[0]);\n\n          },\n\n          allFiltered: function() {\n\n            return( (module.is.multiple() || module.has.search()) && !(settings.hideAdditions == false && module.has.userSuggestion()) && !module.has.message() && module.has.allResultsFiltered() );\n\n          },\n\n          hidden: function($subMenu) {\n\n            return !module.is.visible($subMenu);\n\n          },\n\n          initialLoad: function() {\n\n            return initialLoad;\n\n          },\n\n          inObject: function(needle, object) {\n\n            var\n\n              found = false\n\n            ;\n\n            $.each(object, function(index, property) {\n\n              if(property == needle) {\n\n                found = true;\n\n                return true;\n\n              }\n\n            });\n\n            return found;\n\n          },\n\n          multiple: function() {\n\n            return $module.hasClass(className.multiple);\n\n          },\n\n          remote: function() {\n\n            return settings.apiSettings && module.can.useAPI();\n\n          },\n\n          single: function() {\n\n            return !module.is.multiple();\n\n          },\n\n          selectMutation: function(mutations) {\n\n            var\n\n              selectChanged = false\n\n            ;\n\n            $.each(mutations, function(index, mutation) {\n\n              if($(mutation.target).is('select') || $(mutation.addedNodes).is('select')) {\n\n                selectChanged = true;\n\n                return false;\n\n              }\n\n            });\n\n            return selectChanged;\n\n          },\n\n          search: function() {\n\n            return $module.hasClass(className.search);\n\n          },\n\n          searchSelection: function() {\n\n            return ( module.has.search() && $search.parent(selector.dropdown).length === 1 );\n\n          },\n\n          selection: function() {\n\n            return $module.hasClass(className.selection);\n\n          },\n\n          userValue: function(value) {\n\n            return ($.inArray(value, module.get.userValues()) !== -1);\n\n          },\n\n          upward: function($menu) {\n\n            var $element = $menu || $module;\n\n            return $element.hasClass(className.upward);\n\n          },\n\n          visible: function($subMenu) {\n\n            return ($subMenu)\n\n              ? $subMenu.hasClass(className.visible)\n\n              : $menu.hasClass(className.visible)\n\n            ;\n\n          },\n\n          verticallyScrollableContext: function() {\n\n            var\n\n              overflowY = ($context.get(0) !== window)\n\n                ? $context.css('overflow-y')\n\n                : false\n\n            ;\n\n            return (overflowY == 'auto' || overflowY == 'scroll');\n\n          },\n\n          horizontallyScrollableContext: function() {\n\n            var\n\n              overflowX = ($context.get(0) !== window)\n\n                ? $context.css('overflow-X')\n\n                : false\n\n            ;\n\n            return (overflowX == 'auto' || overflowX == 'scroll');\n\n          }\n\n        },\n\n\n\n        can: {\n\n          activate: function($item) {\n\n            if(settings.useLabels) {\n\n              return true;\n\n            }\n\n            if(!module.has.maxSelections()) {\n\n              return true;\n\n            }\n\n            if(module.has.maxSelections() && $item.hasClass(className.active)) {\n\n              return true;\n\n            }\n\n            return false;\n\n          },\n\n          openDownward: function($subMenu) {\n\n            var\n\n              $currentMenu    = $subMenu || $menu,\n\n              canOpenDownward = true,\n\n              onScreen        = {},\n\n              calculations\n\n            ;\n\n            $currentMenu\n\n              .addClass(className.loading)\n\n            ;\n\n            calculations = {\n\n              context: {\n\n                offset    : ($context.get(0) === window)\n\n                  ? { top: 0, left: 0}\n\n                  : $context.offset(),\n\n                scrollTop : $context.scrollTop(),\n\n                height    : $context.outerHeight()\n\n              },\n\n              menu : {\n\n                offset: $currentMenu.offset(),\n\n                height: $currentMenu.outerHeight()\n\n              }\n\n            };\n\n            if(module.is.verticallyScrollableContext()) {\n\n              calculations.menu.offset.top += calculations.context.scrollTop;\n\n            }\n\n            onScreen = {\n\n              above : (calculations.context.scrollTop) <= calculations.menu.offset.top - calculations.context.offset.top - calculations.menu.height,\n\n              below : (calculations.context.scrollTop + calculations.context.height) >= calculations.menu.offset.top - calculations.context.offset.top + calculations.menu.height\n\n            };\n\n            if(onScreen.below) {\n\n              module.verbose('Dropdown can fit in context downward', onScreen);\n\n              canOpenDownward = true;\n\n            }\n\n            else if(!onScreen.below && !onScreen.above) {\n\n              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);\n\n              canOpenDownward = true;\n\n            }\n\n            else {\n\n              module.verbose('Dropdown cannot fit below, opening upward', onScreen);\n\n              canOpenDownward = false;\n\n            }\n\n            $currentMenu.removeClass(className.loading);\n\n            return canOpenDownward;\n\n          },\n\n          openRightward: function($subMenu) {\n\n            var\n\n              $currentMenu     = $subMenu || $menu,\n\n              canOpenRightward = true,\n\n              isOffscreenRight = false,\n\n              calculations\n\n            ;\n\n            $currentMenu\n\n              .addClass(className.loading)\n\n            ;\n\n            calculations = {\n\n              context: {\n\n                offset     : ($context.get(0) === window)\n\n                  ? { top: 0, left: 0}\n\n                  : $context.offset(),\n\n                scrollLeft : $context.scrollLeft(),\n\n                width      : $context.outerWidth()\n\n              },\n\n              menu: {\n\n                offset : $currentMenu.offset(),\n\n                width  : $currentMenu.outerWidth()\n\n              }\n\n            };\n\n            if(module.is.horizontallyScrollableContext()) {\n\n              calculations.menu.offset.left += calculations.context.scrollLeft;\n\n            }\n\n            isOffscreenRight = (calculations.menu.offset.left - calculations.context.offset.left + calculations.menu.width >= calculations.context.scrollLeft + calculations.context.width);\n\n            if(isOffscreenRight) {\n\n              module.verbose('Dropdown cannot fit in context rightward', isOffscreenRight);\n\n              canOpenRightward = false;\n\n            }\n\n            $currentMenu.removeClass(className.loading);\n\n            return canOpenRightward;\n\n          },\n\n          click: function() {\n\n            return (hasTouch || settings.on == 'click');\n\n          },\n\n          extendSelect: function() {\n\n            return settings.allowAdditions || settings.apiSettings;\n\n          },\n\n          show: function() {\n\n            return !module.is.disabled() && (module.has.items() || module.has.message());\n\n          },\n\n          useAPI: function() {\n\n            return $.fn.api !== undefined;\n\n          }\n\n        },\n\n\n\n        animate: {\n\n          show: function(callback, $subMenu) {\n\n            var\n\n              $currentMenu = $subMenu || $menu,\n\n              start = ($subMenu)\n\n                ? function() {}\n\n                : function() {\n\n                  module.hideSubMenus();\n\n                  module.hideOthers();\n\n                  module.set.active();\n\n                },\n\n              transition\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            module.verbose('Doing menu show animation', $currentMenu);\n\n            module.set.direction($subMenu);\n\n            transition = module.get.transition($subMenu);\n\n            if( module.is.selection() ) {\n\n              module.set.scrollPosition(module.get.selectedItem(), true);\n\n            }\n\n            if( module.is.hidden($currentMenu) || module.is.animating($currentMenu) ) {\n\n              if(transition == 'none') {\n\n                start();\n\n                $currentMenu.transition('show');\n\n                callback.call(element);\n\n              }\n\n              else if($.fn.transition !== undefined && $module.transition('is supported')) {\n\n                $currentMenu\n\n                  .transition({\n\n                    animation  : transition + ' in',\n\n                    debug      : settings.debug,\n\n                    verbose    : settings.verbose,\n\n                    duration   : settings.duration,\n\n                    queue      : true,\n\n                    onStart    : start,\n\n                    onComplete : function() {\n\n                      callback.call(element);\n\n                    }\n\n                  })\n\n                ;\n\n              }\n\n              else {\n\n                module.error(error.noTransition, transition);\n\n              }\n\n            }\n\n          },\n\n          hide: function(callback, $subMenu) {\n\n            var\n\n              $currentMenu = $subMenu || $menu,\n\n              duration = ($subMenu)\n\n                ? (settings.duration * 0.9)\n\n                : settings.duration,\n\n              start = ($subMenu)\n\n                ? function() {}\n\n                : function() {\n\n                  if( module.can.click() ) {\n\n                    module.unbind.intent();\n\n                  }\n\n                  module.remove.active();\n\n                },\n\n              transition = module.get.transition($subMenu)\n\n            ;\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if( module.is.visible($currentMenu) || module.is.animating($currentMenu) ) {\n\n              module.verbose('Doing menu hide animation', $currentMenu);\n\n\n\n              if(transition == 'none') {\n\n                start();\n\n                $currentMenu.transition('hide');\n\n                callback.call(element);\n\n              }\n\n              else if($.fn.transition !== undefined && $module.transition('is supported')) {\n\n                $currentMenu\n\n                  .transition({\n\n                    animation  : transition + ' out',\n\n                    duration   : settings.duration,\n\n                    debug      : settings.debug,\n\n                    verbose    : settings.verbose,\n\n                    queue      : false,\n\n                    onStart    : start,\n\n                    onComplete : function() {\n\n                      callback.call(element);\n\n                    }\n\n                  })\n\n                ;\n\n              }\n\n              else {\n\n                module.error(error.transition);\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        hideAndClear: function() {\n\n          module.remove.searchTerm();\n\n          if( module.has.maxSelections() ) {\n\n            return;\n\n          }\n\n          if(module.has.search()) {\n\n            module.hide(function() {\n\n              module.remove.filteredItem();\n\n            });\n\n          }\n\n          else {\n\n            module.hide();\n\n          }\n\n        },\n\n\n\n        delay: {\n\n          show: function() {\n\n            module.verbose('Delaying show event to ensure user intent');\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.show, settings.delay.show);\n\n          },\n\n          hide: function() {\n\n            module.verbose('Delaying hide event to ensure user intent');\n\n            clearTimeout(module.timer);\n\n            module.timer = setTimeout(module.hide, settings.delay.hide);\n\n          }\n\n        },\n\n\n\n        escape: {\n\n          value: function(value) {\n\n            var\n\n              multipleValues = $.isArray(value),\n\n              stringValue    = (typeof value === 'string'),\n\n              isUnparsable   = (!stringValue && !multipleValues),\n\n              hasQuotes      = (stringValue && value.search(regExp.quote) !== -1),\n\n              values         = []\n\n            ;\n\n            if(isUnparsable || !hasQuotes) {\n\n              return value;\n\n            }\n\n            module.debug('Encoding quote values for use in select', value);\n\n            if(multipleValues) {\n\n              $.each(value, function(index, value){\n\n                values.push(value.replace(regExp.quote, '&quot;'));\n\n              });\n\n              return values;\n\n            }\n\n            return value.replace(regExp.quote, '&quot;');\n\n          },\n\n          string: function(text) {\n\n            text =  String(text);\n\n            return text.replace(regExp.escape, '\\\\$&');\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/src/definitions/modules/nag.js",
          "match_lines": [
            37,
            419
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.nag.settings, parameters)\n\n          : $.extend({}, $.fn.nag.settings),\n\n\n\n        className       = settings.className,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        namespace       = settings.namespace,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = namespace + '-module',\n\n\n\n        $module         = $(this),\n\n\n\n        $close          = $module.find(selector.close),\n\n        $context        = (settings.context)\n\n          ? $(settings.context)\n\n          : $('body'),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        moduleOffset,\n\n        moduleHeight,\n\n\n\n        contextWidth,\n\n        contextHeight,\n\n        contextOffset,\n\n\n\n        yOffset,\n\n        yPosition,\n\n\n\n        timer,\n\n        module,\n\n\n\n        requestAnimationFrame = window.requestAnimationFrame\n\n          || window.mozRequestAnimationFrame\n\n          || window.webkitRequestAnimationFrame\n\n          || window.msRequestAnimationFrame\n\n          || function(callback) { setTimeout(callback, 0); }\n\n      ;\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing element');\n\n\n\n          $module\n\n            .on('click' + eventNamespace, selector.close, module.dismiss)\n\n            .data(moduleNamespace, module)\n\n          ;\n\n\n\n          if(settings.detachable && $module.parent()[0] !== $context[0]) {\n\n            $module\n\n              .detach()\n\n              .prependTo($context)\n\n            ;\n\n          }\n\n\n\n          if(settings.displayTime > 0) {\n\n            setTimeout(module.hide, settings.displayTime);\n\n          }\n\n          module.show();\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying instance');\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        show: function() {\n\n          if( module.should.show() && !$module.is(':visible') ) {\n\n            module.debug('Showing nag', settings.animation.show);\n\n            if(settings.animation.show == 'fade') {\n\n              $module\n\n                .fadeIn(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            else {\n\n              $module\n\n                .slideDown(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        hide: function() {\n\n          module.debug('Showing nag', settings.animation.hide);\n\n          if(settings.animation.show == 'fade') {\n\n            $module\n\n              .fadeIn(settings.duration, settings.easing)\n\n            ;\n\n          }\n\n          else {\n\n            $module\n\n              .slideUp(settings.duration, settings.easing)\n\n            ;\n\n          }\n\n        },\n\n\n\n        onHide: function() {\n\n          module.debug('Removing nag', settings.animation.hide);\n\n          $module.remove();\n\n          if (settings.onHide) {\n\n            settings.onHide();\n\n          }\n\n        },\n\n\n\n        dismiss: function(event) {\n\n          if(settings.storageMethod) {\n\n            module.storage.set(settings.key, settings.value);\n\n          }\n\n          module.hide();\n\n          event.stopImmediatePropagation();\n\n          event.preventDefault();\n\n        },\n\n\n\n        should: {\n\n          show: function() {\n\n            if(settings.persist) {\n\n              module.debug('Persistent nag is set, can show nag');\n\n              return true;\n\n            }\n\n            if( module.storage.get(settings.key) != settings.value.toString() ) {\n\n              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));\n\n              return true;\n\n            }\n\n            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));\n\n            return false;\n\n          }\n\n        },\n\n\n\n        get: {\n\n          storageOptions: function() {\n\n            var\n\n              options = {}\n\n            ;\n\n            if(settings.expires) {\n\n              options.expires = settings.expires;\n\n            }\n\n            if(settings.domain) {\n\n              options.domain = settings.domain;\n\n            }\n\n            if(settings.path) {\n\n              options.path = settings.path;\n\n            }\n\n            return options;\n\n          }\n\n        },\n\n\n\n        clear: function() {\n\n          module.storage.remove(settings.key);\n\n        },\n\n\n\n        storage: {\n\n          set: function(key, value) {\n\n            var\n\n              options = module.get.storageOptions()\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              window.localStorage.setItem(key, value);\n\n              module.debug('Value stored using local storage', key, value);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              window.sessionStorage.setItem(key, value);\n\n              module.debug('Value stored using session storage', key, value);\n\n            }\n\n            else if($.cookie !== undefined) {\n\n              $.cookie(key, value, options);\n\n              module.debug('Value stored using cookie', key, value, options);\n\n            }\n\n            else {\n\n              module.error(error.noCookieStorage);\n\n              return;\n\n            }\n\n          },\n\n          get: function(key, value) {\n\n            var\n\n              storedValue\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              storedValue = window.localStorage.getItem(key);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              storedValue = window.sessionStorage.getItem(key);\n\n            }\n\n            // get by cookie\n\n            else if($.cookie !== undefined) {\n\n              storedValue = $.cookie(key);\n\n            }\n\n            else {\n\n              module.error(error.noCookieStorage);\n\n            }\n\n            if(storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {\n\n              storedValue = undefined;\n\n            }\n\n            return storedValue;\n\n          },\n\n          remove: function(key) {\n\n            var\n\n              options = module.get.storageOptions()\n\n            ;\n\n            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n\n              window.localStorage.removeItem(key);\n\n            }\n\n            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n\n              window.sessionStorage.removeItem(key);\n\n            }\n\n            // store by cookie\n\n            else if($.cookie !== undefined) {\n\n              $.removeCookie(key, options);\n\n            }\n\n            else {\n\n              module.error(error.noStorage);\n\n            }\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/src/definitions/modules/popup.js",
          "match_lines": [
            182,
            189
          ],
          "match_position": [
            13,
            63
          ],
          "match_string": "            var\n\n              delay = ($.isPlainObject(settings.delay))\n\n                ? settings.delay.show\n\n                : settings.delay\n\n            ;\n\n            clearTimeout(module.hideTimer);\n\n            if(!openedWithTouch) {\n\n              module.showTimer = setTimeout(module.show, delay);"
        },
        {
          "file_path": "/src/src/definitions/modules/popup.js",
          "match_lines": [
            193,
            199
          ],
          "match_position": [
            13,
            61
          ],
          "match_string": "            var\n\n              delay = ($.isPlainObject(settings.delay))\n\n                ? settings.delay.hide\n\n                : settings.delay\n\n            ;\n\n            clearTimeout(module.showTimer);\n\n            module.hideTimer = setTimeout(module.hide, delay);"
        },
        {
          "file_path": "/src/src/definitions/modules/progress.js",
          "match_lines": [
            40,
            815
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.progress.settings, parameters)\n\n          : $.extend({}, $.fn.progress.settings),\n\n\n\n        className       = settings.className,\n\n        metadata        = settings.metadata,\n\n        namespace       = settings.namespace,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        $module         = $(this),\n\n        $bar            = $(this).find(selector.bar),\n\n        $progress       = $(this).find(selector.progress),\n\n        $label          = $(this).find(selector.label),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        animating = false,\n\n        transitionEnd,\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.debug('Initializing progress bar', settings);\n\n\n\n          module.set.duration();\n\n          module.set.transitionEvent();\n\n\n\n          module.read.metadata();\n\n          module.read.settings();\n\n\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of progress', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n        destroy: function() {\n\n          module.verbose('Destroying previous progress for', $module);\n\n          clearInterval(instance.interval);\n\n          module.remove.state();\n\n          $module.removeData(moduleNamespace);\n\n          instance = undefined;\n\n        },\n\n\n\n        reset: function() {\n\n          module.remove.nextValue();\n\n          module.update.progress(0);\n\n        },\n\n\n\n        complete: function() {\n\n          if(module.percent === undefined || module.percent < 100) {\n\n            module.remove.progressPoll();\n\n            module.set.percent(100);\n\n          }\n\n        },\n\n\n\n        read: {\n\n          metadata: function() {\n\n            var\n\n              data = {\n\n                percent : $module.data(metadata.percent),\n\n                total   : $module.data(metadata.total),\n\n                value   : $module.data(metadata.value)\n\n              }\n\n            ;\n\n            if(data.percent) {\n\n              module.debug('Current percent value set from metadata', data.percent);\n\n              module.set.percent(data.percent);\n\n            }\n\n            if(data.total) {\n\n              module.debug('Total value set from metadata', data.total);\n\n              module.set.total(data.total);\n\n            }\n\n            if(data.value) {\n\n              module.debug('Current value set from metadata', data.value);\n\n              module.set.value(data.value);\n\n              module.set.progress(data.value);\n\n            }\n\n          },\n\n          settings: function() {\n\n            if(settings.total !== false) {\n\n              module.debug('Current total set in settings', settings.total);\n\n              module.set.total(settings.total);\n\n            }\n\n            if(settings.value !== false) {\n\n              module.debug('Current value set in settings', settings.value);\n\n              module.set.value(settings.value);\n\n              module.set.progress(module.value);\n\n            }\n\n            if(settings.percent !== false) {\n\n              module.debug('Current percent set in settings', settings.percent);\n\n              module.set.percent(settings.percent);\n\n            }\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          transitionEnd: function(callback) {\n\n            var\n\n              transitionEnd = module.get.transitionEnd()\n\n            ;\n\n            $bar\n\n              .one(transitionEnd + eventNamespace, function(event) {\n\n                clearTimeout(module.failSafeTimer);\n\n                callback.call(this, event);\n\n              })\n\n            ;\n\n            module.failSafeTimer = setTimeout(function() {\n\n              $bar.triggerHandler(transitionEnd);\n\n            }, settings.duration + settings.failSafeDelay);\n\n            module.verbose('Adding fail safe timer', module.timer);\n\n          }\n\n        },\n\n\n\n        increment: function(incrementValue) {\n\n          var\n\n            maxValue,\n\n            startValue,\n\n            newValue\n\n          ;\n\n          if( module.has.total() ) {\n\n            startValue     = module.get.value();\n\n            incrementValue = incrementValue || 1;\n\n            newValue       = startValue + incrementValue;\n\n          }\n\n          else {\n\n            startValue     = module.get.percent();\n\n            incrementValue = incrementValue || module.get.randomValue();\n\n\n\n            newValue       = startValue + incrementValue;\n\n            maxValue       = 100;\n\n            module.debug('Incrementing percentage by', startValue, newValue);\n\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n\n          module.set.progress(newValue);\n\n        },\n\n        decrement: function(decrementValue) {\n\n          var\n\n            total     = module.get.total(),\n\n            startValue,\n\n            newValue\n\n          ;\n\n          if(total) {\n\n            startValue     =  module.get.value();\n\n            decrementValue =  decrementValue || 1;\n\n            newValue       =  startValue - decrementValue;\n\n            module.debug('Decrementing value by', decrementValue, startValue);\n\n          }\n\n          else {\n\n            startValue     =  module.get.percent();\n\n            decrementValue =  decrementValue || module.get.randomValue();\n\n            newValue       =  startValue - decrementValue;\n\n            module.debug('Decrementing percentage by', decrementValue, startValue);\n\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n\n          module.set.progress(newValue);\n\n        },\n\n\n\n        has: {\n\n          progressPoll: function() {\n\n            return module.progressPoll;\n\n          },\n\n          total: function() {\n\n            return (module.get.total() !== false);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          text: function(templateText) {\n\n            var\n\n              value   = module.value                || 0,\n\n              total   = module.total                || 0,\n\n              percent = (animating)\n\n                ? module.get.displayPercent()\n\n                : module.percent || 0,\n\n              left = (module.total > 0)\n\n                ? (total - value)\n\n                : (100 - percent)\n\n            ;\n\n            templateText = templateText || '';\n\n            templateText = templateText\n\n              .replace('{value}', value)\n\n              .replace('{total}', total)\n\n              .replace('{left}', left)\n\n              .replace('{percent}', percent)\n\n            ;\n\n            module.verbose('Adding variables to progress bar text', templateText);\n\n            return templateText;\n\n          },\n\n\n\n          normalizedValue: function(value) {\n\n            if(value < 0) {\n\n              module.debug('Value cannot decrement below 0');\n\n              return 0;\n\n            }\n\n            if(module.has.total()) {\n\n              if(value > module.total) {\n\n                module.debug('Value cannot increment above total', module.total);\n\n                return module.total;\n\n              }\n\n            }\n\n            else if(value > 100 ) {\n\n              module.debug('Value cannot increment above 100 percent');\n\n              return 100;\n\n            }\n\n            return value;\n\n          },\n\n\n\n          updateInterval: function() {\n\n            if(settings.updateInterval == 'auto') {\n\n              return settings.duration;\n\n            }\n\n            return settings.updateInterval;\n\n          },\n\n\n\n          randomValue: function() {\n\n            module.debug('Generating random increment percentage');\n\n            return Math.floor((Math.random() * settings.random.max) + settings.random.min);\n\n          },\n\n\n\n          numericValue: function(value) {\n\n            return (typeof value === 'string')\n\n              ? (value.replace(/[^\\d.]/g, '') !== '')\n\n                ? +(value.replace(/[^\\d.]/g, ''))\n\n                : false\n\n              : value\n\n            ;\n\n          },\n\n\n\n          transitionEnd: function() {\n\n            var\n\n              element     = document.createElement('element'),\n\n              transitions = {\n\n                'transition'       :'transitionend',\n\n                'OTransition'      :'oTransitionEnd',\n\n                'MozTransition'    :'transitionend',\n\n                'WebkitTransition' :'webkitTransitionEnd'\n\n              },\n\n              transition\n\n            ;\n\n            for(transition in transitions){\n\n              if( element.style[transition] !== undefined ){\n\n                return transitions[transition];\n\n              }\n\n            }\n\n          },\n\n\n\n          // gets current displayed percentage (if animating values this is the intermediary value)\n\n          displayPercent: function() {\n\n            var\n\n              barWidth       = $bar.width(),\n\n              totalWidth     = $module.width(),\n\n              minDisplay     = parseInt($bar.css('min-width'), 10),\n\n              displayPercent = (barWidth > minDisplay)\n\n                ? (barWidth / totalWidth * 100)\n\n                : module.percent\n\n            ;\n\n            return (settings.precision > 0)\n\n              ? Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision)\n\n              : Math.round(displayPercent)\n\n            ;\n\n          },\n\n\n\n          percent: function() {\n\n            return module.percent || 0;\n\n          },\n\n          value: function() {\n\n            return module.nextValue || module.value || 0;\n\n          },\n\n          total: function() {\n\n            return module.total || false;\n\n          }\n\n        },\n\n\n\n        create: {\n\n          progressPoll: function() {\n\n            module.progressPoll = setTimeout(function() {\n\n              module.update.toNextValue();\n\n              module.remove.progressPoll();\n\n            }, module.get.updateInterval());\n\n          },\n\n        },\n\n\n\n        is: {\n\n          complete: function() {\n\n            return module.is.success() || module.is.warning() || module.is.error();\n\n          },\n\n          success: function() {\n\n            return $module.hasClass(className.success);\n\n          },\n\n          warning: function() {\n\n            return $module.hasClass(className.warning);\n\n          },\n\n          error: function() {\n\n            return $module.hasClass(className.error);\n\n          },\n\n          active: function() {\n\n            return $module.hasClass(className.active);\n\n          },\n\n          visible: function() {\n\n            return $module.is(':visible');\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          progressPoll: function() {\n\n            module.verbose('Removing progress poll timer');\n\n            if(module.progressPoll) {\n\n              clearTimeout(module.progressPoll);\n\n              delete module.progressPoll;\n\n            }\n\n          },\n\n          nextValue: function() {\n\n            module.verbose('Removing progress value stored for next update');\n\n            delete module.nextValue;\n\n          },\n\n          state: function() {\n\n            module.verbose('Removing stored state');\n\n            delete module.total;\n\n            delete module.percent;\n\n            delete module.value;\n\n          },\n\n          active: function() {\n\n            module.verbose('Removing active state');\n\n            $module.removeClass(className.active);\n\n          },\n\n          success: function() {\n\n            module.verbose('Removing success state');\n\n            $module.removeClass(className.success);\n\n          },\n\n          warning: function() {\n\n            module.verbose('Removing warning state');\n\n            $module.removeClass(className.warning);\n\n          },\n\n          error: function() {\n\n            module.verbose('Removing error state');\n\n            $module.removeClass(className.error);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          barWidth: function(value) {\n\n            if(value > 100) {\n\n              module.error(error.tooHigh, value);\n\n            }\n\n            else if (value < 0) {\n\n              module.error(error.tooLow, value);\n\n            }\n\n            else {\n\n              $bar\n\n                .css('width', value + '%')\n\n              ;\n\n              $module\n\n                .attr('data-percent', parseInt(value, 10))\n\n              ;\n\n            }\n\n          },\n\n          duration: function(duration) {\n\n            duration = duration || settings.duration;\n\n            duration = (typeof duration == 'number')\n\n              ? duration + 'ms'\n\n              : duration\n\n            ;\n\n            module.verbose('Setting progress bar transition duration', duration);\n\n            $bar\n\n              .css({\n\n                'transition-duration':  duration\n\n              })\n\n            ;\n\n          },\n\n          percent: function(percent) {\n\n            percent = (typeof percent == 'string')\n\n              ? +(percent.replace('%', ''))\n\n              : percent\n\n            ;\n\n            // round display percentage\n\n            percent = (settings.precision > 0)\n\n              ? Math.round(percent * (10 * settings.precision)) / (10 * settings.precision)\n\n              : Math.round(percent)\n\n            ;\n\n            module.percent = percent;\n\n            if( !module.has.total() ) {\n\n              module.value = (settings.precision > 0)\n\n                ? Math.round( (percent / 100) * module.total * (10 * settings.precision)) / (10 * settings.precision)\n\n                : Math.round( (percent / 100) * module.total * 10) / 10\n\n              ;\n\n              if(settings.limitValues) {\n\n                module.value = (module.value > 100)\n\n                  ? 100\n\n                  : (module.value < 0)\n\n                    ? 0\n\n                    : module.value\n\n                ;\n\n              }\n\n            }\n\n            module.set.barWidth(percent);\n\n            module.set.labelInterval();\n\n            module.set.labels();\n\n            settings.onChange.call(element, percent, module.value, module.total);\n\n          },\n\n          labelInterval: function() {\n\n            var\n\n              animationCallback = function() {\n\n                module.verbose('Bar finished animating, removing continuous label updates');\n\n                clearInterval(module.interval);\n\n                animating = false;\n\n                module.set.labels();\n\n              }\n\n            ;\n\n            clearInterval(module.interval);\n\n            module.bind.transitionEnd(animationCallback);\n\n            animating = true;\n\n            module.interval = setInterval(function() {\n\n              var\n\n                isInDOM = $.contains(document.documentElement, element)\n\n              ;\n\n              if(!isInDOM) {\n\n                clearInterval(module.interval);\n\n                animating = false;\n\n              }\n\n              module.set.labels();\n\n            }, settings.framerate);\n\n          },\n\n          labels: function() {\n\n            module.verbose('Setting both bar progress and outer label text');\n\n            module.set.barLabel();\n\n            module.set.state();\n\n          },\n\n          label: function(text) {\n\n            text = text || '';\n\n            if(text) {\n\n              text = module.get.text(text);\n\n              module.verbose('Setting label to text', text);\n\n              $label.text(text);\n\n            }\n\n          },\n\n          state: function(percent) {\n\n            percent = (percent !== undefined)\n\n              ? percent\n\n              : module.percent\n\n            ;\n\n            if(percent === 100) {\n\n              if(settings.autoSuccess && !(module.is.warning() || module.is.error() || module.is.success())) {\n\n                module.set.success();\n\n                module.debug('Automatically triggering success at 100%');\n\n              }\n\n              else {\n\n                module.verbose('Reached 100% removing active state');\n\n                module.remove.active();\n\n                module.remove.progressPoll();\n\n              }\n\n            }\n\n            else if(percent > 0) {\n\n              module.verbose('Adjusting active progress bar label', percent);\n\n              module.set.active();\n\n            }\n\n            else {\n\n              module.remove.active();\n\n              module.set.label(settings.text.active);\n\n            }\n\n          },\n\n          barLabel: function(text) {\n\n            if(text !== undefined) {\n\n              $progress.text( module.get.text(text) );\n\n            }\n\n            else if(settings.label == 'ratio' && module.total) {\n\n              module.verbose('Adding ratio to bar label');\n\n              $progress.text( module.get.text(settings.text.ratio) );\n\n            }\n\n            else if(settings.label == 'percent') {\n\n              module.verbose('Adding percentage to bar label');\n\n              $progress.text( module.get.text(settings.text.percent) );\n\n            }\n\n          },\n\n          active: function(text) {\n\n            text = text || settings.text.active;\n\n            module.debug('Setting active state');\n\n            if(settings.showActivity && !module.is.active() ) {\n\n              $module.addClass(className.active);\n\n            }\n\n            module.remove.warning();\n\n            module.remove.error();\n\n            module.remove.success();\n\n            text = settings.onLabelUpdate('active', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onActive.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          success : function(text) {\n\n            text = text || settings.text.success || settings.text.active;\n\n            module.debug('Setting success state');\n\n            $module.addClass(className.success);\n\n            module.remove.active();\n\n            module.remove.warning();\n\n            module.remove.error();\n\n            module.complete();\n\n            if(settings.text.success) {\n\n              text = settings.onLabelUpdate('success', text, module.value, module.total);\n\n              module.set.label(text);\n\n            }\n\n            else {\n\n              text = settings.onLabelUpdate('active', text, module.value, module.total);\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onSuccess.call(element, module.total);\n\n            });\n\n          },\n\n          warning : function(text) {\n\n            text = text || settings.text.warning;\n\n            module.debug('Setting warning state');\n\n            $module.addClass(className.warning);\n\n            module.remove.active();\n\n            module.remove.success();\n\n            module.remove.error();\n\n            module.complete();\n\n            text = settings.onLabelUpdate('warning', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onWarning.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          error : function(text) {\n\n            text = text || settings.text.error;\n\n            module.debug('Setting error state');\n\n            $module.addClass(className.error);\n\n            module.remove.active();\n\n            module.remove.success();\n\n            module.remove.warning();\n\n            module.complete();\n\n            text = settings.onLabelUpdate('error', text, module.value, module.total);\n\n            if(text) {\n\n              module.set.label(text);\n\n            }\n\n            module.bind.transitionEnd(function() {\n\n              settings.onError.call(element, module.value, module.total);\n\n            });\n\n          },\n\n          transitionEvent: function() {\n\n            transitionEnd = module.get.transitionEnd();\n\n          },\n\n          total: function(totalValue) {\n\n            module.total = totalValue;\n\n          },\n\n          value: function(value) {\n\n            module.value = value;\n\n          },\n\n          progress: function(value) {\n\n            if(!module.has.progressPoll()) {\n\n              module.debug('First update in progress update interval, immediately updating', value);\n\n              module.update.progress(value);\n\n              module.create.progressPoll();\n\n            }\n\n            else {\n\n              module.debug('Updated within interval, setting next update to use new value', value);\n\n              module.set.nextValue(value);\n\n            }\n\n          },\n\n          nextValue: function(value) {\n\n            module.nextValue = value;\n\n          }\n\n        },\n\n\n\n        update: {\n\n          toNextValue: function() {\n\n            var\n\n              nextValue = module.nextValue\n\n            ;\n\n            if(nextValue) {\n\n              module.debug('Update interval complete using last updated value', nextValue);\n\n              module.update.progress(nextValue);\n\n              module.remove.nextValue();\n\n            }\n\n          },\n\n          progress: function(value) {\n\n            var\n\n              percentComplete\n\n            ;\n\n            value = module.get.numericValue(value);\n\n            if(value === false) {\n\n              module.error(error.nonNumeric, value);\n\n            }\n\n            value = module.get.normalizedValue(value);\n\n            if( module.has.total() ) {\n\n              module.set.value(value);\n\n              percentComplete = (value / module.total) * 100;\n\n              module.debug('Calculating percent complete from total', percentComplete);\n\n              module.set.percent( percentComplete );\n\n            }\n\n            else {\n\n              percentComplete = value;\n\n              module.debug('Setting value to exact percentage value', percentComplete);\n\n              module.set.percent( percentComplete );\n\n            }\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/src/definitions/modules/search.js",
          "match_lines": [
            37,
            1191
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.search.settings, parameters)\n\n          : $.extend({}, $.fn.search.settings),\n\n\n\n        className        = settings.className,\n\n        metadata         = settings.metadata,\n\n        regExp           = settings.regExp,\n\n        fields           = settings.fields,\n\n        selector         = settings.selector,\n\n        error            = settings.error,\n\n        namespace        = settings.namespace,\n\n\n\n        eventNamespace   = '.' + namespace,\n\n        moduleNamespace  = namespace + '-module',\n\n\n\n        $module          = $(this),\n\n        $prompt          = $module.find(selector.prompt),\n\n        $searchButton    = $module.find(selector.searchButton),\n\n        $results         = $module.find(selector.results),\n\n        $result          = $module.find(selector.result),\n\n        $category        = $module.find(selector.category),\n\n\n\n        element          = this,\n\n        instance         = $module.data(moduleNamespace),\n\n\n\n        disabledBubbled  = false,\n\n        resultsDismissed = false,\n\n\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing module');\n\n          module.get.settings();\n\n          module.determine.searchFields();\n\n          module.bind.events();\n\n          module.set.type();\n\n          module.create.results();\n\n          module.instantiate();\n\n        },\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n        destroy: function() {\n\n          module.verbose('Destroying instance');\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n        },\n\n\n\n        refresh: function() {\n\n          module.debug('Refreshing selector cache');\n\n          $prompt         = $module.find(selector.prompt);\n\n          $searchButton   = $module.find(selector.searchButton);\n\n          $category       = $module.find(selector.category);\n\n          $results        = $module.find(selector.results);\n\n          $result         = $module.find(selector.result);\n\n        },\n\n\n\n        refreshResults: function() {\n\n          $results = $module.find(selector.results);\n\n          $result  = $module.find(selector.result);\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.verbose('Binding events to search');\n\n            if(settings.automatic) {\n\n              $module\n\n                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)\n\n              ;\n\n              $prompt\n\n                .attr('autocomplete', 'off')\n\n              ;\n\n            }\n\n            $module\n\n              // prompt\n\n              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)\n\n              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)\n\n              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)\n\n              // search button\n\n              .on('click'     + eventNamespace, selector.searchButton, module.query)\n\n              // results\n\n              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)\n\n              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)\n\n              .on('click'     + eventNamespace, selector.result,  module.event.result.click)\n\n            ;\n\n          }\n\n        },\n\n\n\n        determine: {\n\n          searchFields: function() {\n\n            // this makes sure $.extend does not add specified search fields to default fields\n\n            // this is the only setting which should not extend defaults\n\n            if(parameters && parameters.searchFields !== undefined) {\n\n              settings.searchFields = parameters.searchFields;\n\n            }\n\n          }\n\n        },\n\n\n\n        event: {\n\n          input: function() {\n\n            if(settings.searchDelay) {\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.is.focused()) {\n\n                  module.query();\n\n                }\n\n              }, settings.searchDelay);\n\n            }\n\n            else {\n\n              module.query();\n\n            }\n\n          },\n\n          focus: function() {\n\n            module.set.focus();\n\n            if(settings.searchOnFocus && module.has.minimumCharacters() ) {\n\n              module.query(function() {\n\n                if(module.can.show() ) {\n\n                  module.showResults();\n\n                }\n\n              });\n\n            }\n\n          },\n\n          blur: function(event) {\n\n            var\n\n              pageLostFocus = (document.activeElement === this),\n\n              callback      = function() {\n\n                module.cancel.query();\n\n                module.remove.focus();\n\n                module.timer = setTimeout(module.hideResults, settings.hideDelay);\n\n              }\n\n            ;\n\n            if(pageLostFocus) {\n\n              return;\n\n            }\n\n            resultsDismissed = false;\n\n            if(module.resultsClicked) {\n\n              module.debug('Determining if user action caused search to close');\n\n              $module\n\n                .one('click.close' + eventNamespace, selector.results, function(event) {\n\n                  if(module.is.inMessage(event) || disabledBubbled) {\n\n                    $prompt.focus();\n\n                    return;\n\n                  }\n\n                  disabledBubbled = false;\n\n                  if( !module.is.animating() && !module.is.hidden()) {\n\n                    callback();\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Input blurred without user action, closing results');\n\n              callback();\n\n            }\n\n          },\n\n          result: {\n\n            mousedown: function() {\n\n              module.resultsClicked = true;\n\n            },\n\n            mouseup: function() {\n\n              module.resultsClicked = false;\n\n            },\n\n            click: function(event) {\n\n              module.debug('Search result selected');\n\n              var\n\n                $result = $(this),\n\n                $title  = $result.find(selector.title).eq(0),\n\n                $link   = $result.is('a[href]')\n\n                  ? $result\n\n                  : $result.find('a[href]').eq(0),\n\n                href    = $link.attr('href')   || false,\n\n                target  = $link.attr('target') || false,\n\n                title   = $title.html(),\n\n                // title is used for result lookup\n\n                value   = ($title.length > 0)\n\n                  ? $title.text()\n\n                  : false,\n\n                results = module.get.results(),\n\n                result  = $result.data(metadata.result) || module.get.result(value, results),\n\n                returnedValue\n\n              ;\n\n              if(value) {\n\n                module.set.value(value);\n\n              }\n\n              if( $.isFunction(settings.onSelect) ) {\n\n                if(settings.onSelect.call(element, result, results) === false) {\n\n                  module.debug('Custom onSelect callback cancelled default select action');\n\n                  disabledBubbled = true;\n\n                  return;\n\n                }\n\n              }\n\n              module.hideResults();\n\n              if(href) {\n\n                module.verbose('Opening search link found in result', $link);\n\n                if(target == '_blank' || event.ctrlKey) {\n\n                  window.open(href);\n\n                }\n\n                else {\n\n                  window.location.href = (href);\n\n                }\n\n              }\n\n            }\n\n          }\n\n        },\n\n        handleKeyboard: function(event) {\n\n          var\n\n            // force selector refresh\n\n            $result         = $module.find(selector.result),\n\n            $category       = $module.find(selector.category),\n\n            $activeResult   = $result.filter('.' + className.active),\n\n            currentIndex    = $result.index( $activeResult ),\n\n            resultSize      = $result.length,\n\n            hasActiveResult = $activeResult.length > 0,\n\n\n\n            keyCode         = event.which,\n\n            keys            = {\n\n              backspace : 8,\n\n              enter     : 13,\n\n              escape    : 27,\n\n              upArrow   : 38,\n\n              downArrow : 40\n\n            },\n\n            newIndex\n\n          ;\n\n          // search shortcuts\n\n          if(keyCode == keys.escape) {\n\n            module.verbose('Escape key pressed, blurring search field');\n\n            module.hideResults();\n\n            resultsDismissed = true;\n\n          }\n\n          if( module.is.visible() ) {\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, selecting active result');\n\n              if( $result.filter('.' + className.active).length > 0 ) {\n\n                module.event.result.click.call($result.filter('.' + className.active), event);\n\n                event.preventDefault();\n\n                return false;\n\n              }\n\n            }\n\n            else if(keyCode == keys.upArrow && hasActiveResult) {\n\n              module.verbose('Up key pressed, changing active result');\n\n              newIndex = (currentIndex - 1 < 0)\n\n                ? currentIndex\n\n                : currentIndex - 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n            else if(keyCode == keys.downArrow) {\n\n              module.verbose('Down key pressed, changing active result');\n\n              newIndex = (currentIndex + 1 >= resultSize)\n\n                ? currentIndex\n\n                : currentIndex + 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n          }\n\n          else {\n\n            // query shortcuts\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, executing query');\n\n              module.query();\n\n              module.set.buttonPressed();\n\n              $prompt.one('keyup', module.remove.buttonFocus);\n\n            }\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          api: function(searchTerm, callback) {\n\n            var\n\n              apiSettings = {\n\n                debug             : settings.debug,\n\n                on                : false,\n\n                cache             : settings.cache,\n\n                action            : 'search',\n\n                urlData           : {\n\n                  query : searchTerm\n\n                },\n\n                onSuccess         : function(response) {\n\n                  module.parse.response.call(element, response, searchTerm);\n\n                  callback();\n\n                },\n\n                onFailure         : function() {\n\n                  module.displayMessage(error.serverError);\n\n                  callback();\n\n                },\n\n                onAbort : function(response) {\n\n                },\n\n                onError           : module.error\n\n              },\n\n              searchHTML\n\n            ;\n\n            $.extend(true, apiSettings, settings.apiSettings);\n\n            module.verbose('Setting up API request', apiSettings);\n\n            $module.api(apiSettings);\n\n          }\n\n        },\n\n\n\n        can: {\n\n          useAPI: function() {\n\n            return $.fn.api !== undefined;\n\n          },\n\n          show: function() {\n\n            return module.is.focused() && !module.is.visible() && !module.is.empty();\n\n          },\n\n          transition: function() {\n\n            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');\n\n          }\n\n        },\n\n\n\n        is: {\n\n          animating: function() {\n\n            return $results.hasClass(className.animating);\n\n          },\n\n          hidden: function() {\n\n            return $results.hasClass(className.hidden);\n\n          },\n\n          inMessage: function(event) {\n\n            if(!event.target) {\n\n              return;\n\n            }\n\n            var\n\n              $target = $(event.target),\n\n              isInDOM = $.contains(document.documentElement, event.target)\n\n            ;\n\n            return (isInDOM && $target.closest(selector.message).length > 0);\n\n          },\n\n          empty: function() {\n\n            return ($results.html() === '');\n\n          },\n\n          visible: function() {\n\n            return ($results.filter(':visible').length > 0);\n\n          },\n\n          focused: function() {\n\n            return ($prompt.filter(':focus').length > 0);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          settings: function() {\n\n            if($.isPlainObject(parameters) && parameters.searchFullText) {\n\n              settings.fullTextSearch = parameters.searchFullText;\n\n              module.error(settings.error.oldSearchSyntax, element);\n\n            }\n\n          },\n\n          inputEvent: function() {\n\n            var\n\n              prompt = $prompt[0],\n\n              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)\n\n                ? 'input'\n\n                : (prompt !== undefined && prompt.onpropertychange !== undefined)\n\n                  ? 'propertychange'\n\n                  : 'keyup'\n\n            ;\n\n            return inputEvent;\n\n          },\n\n          value: function() {\n\n            return $prompt.val();\n\n          },\n\n          results: function() {\n\n            var\n\n              results = $module.data(metadata.results)\n\n            ;\n\n            return results;\n\n          },\n\n          result: function(value, results) {\n\n            var\n\n              lookupFields = ['title', 'id'],\n\n              result       = false\n\n            ;\n\n            value = (value !== undefined)\n\n              ? value\n\n              : module.get.value()\n\n            ;\n\n            results = (results !== undefined)\n\n              ? results\n\n              : module.get.results()\n\n            ;\n\n            if(settings.type === 'category') {\n\n              module.debug('Finding result that matches', value);\n\n              $.each(results, function(index, category) {\n\n                if($.isArray(category.results)) {\n\n                  result = module.search.object(value, category.results, lookupFields)[0];\n\n                  // don't continue searching if a result is found\n\n                  if(result) {\n\n                    return false;\n\n                  }\n\n                }\n\n              });\n\n            }\n\n            else {\n\n              module.debug('Finding result in results object', value);\n\n              result = module.search.object(value, results, lookupFields)[0];\n\n            }\n\n            return result || false;\n\n          },\n\n        },\n\n\n\n        select: {\n\n          firstResult: function() {\n\n            module.verbose('Selecting first result');\n\n            $result.first().addClass(className.active);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          focus: function() {\n\n            $module.addClass(className.focus);\n\n          },\n\n          loading: function() {\n\n            $module.addClass(className.loading);\n\n          },\n\n          value: function(value) {\n\n            module.verbose('Setting search input value', value);\n\n            $prompt\n\n              .val(value)\n\n            ;\n\n          },\n\n          type: function(type) {\n\n            type = type || settings.type;\n\n            if(settings.type == 'category') {\n\n              $module.addClass(settings.type);\n\n            }\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.addClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          loading: function() {\n\n            $module.removeClass(className.loading);\n\n          },\n\n          focus: function() {\n\n            $module.removeClass(className.focus);\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.removeClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        query: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          var\n\n            searchTerm = module.get.value(),\n\n            cache = module.read.cache(searchTerm)\n\n          ;\n\n          callback = callback || function() {};\n\n          if( module.has.minimumCharacters() )  {\n\n            if(cache) {\n\n              module.debug('Reading result from cache', searchTerm);\n\n              module.save.results(cache.results);\n\n              module.addResults(cache.html);\n\n              module.inject.id(cache.results);\n\n              callback();\n\n            }\n\n            else {\n\n              module.debug('Querying for', searchTerm);\n\n              if($.isPlainObject(settings.source) || $.isArray(settings.source)) {\n\n                module.search.local(searchTerm);\n\n                callback();\n\n              }\n\n              else if( module.can.useAPI() ) {\n\n                module.search.remote(searchTerm, callback);\n\n              }\n\n              else {\n\n                module.error(error.source);\n\n                callback();\n\n              }\n\n            }\n\n            settings.onSearchQuery.call(element, searchTerm);\n\n          }\n\n          else {\n\n            module.hideResults();\n\n          }\n\n        },\n\n\n\n        search: {\n\n          local: function(searchTerm) {\n\n            var\n\n              results = module.search.object(searchTerm, settings.content),\n\n              searchHTML\n\n            ;\n\n            module.set.loading();\n\n            module.save.results(results);\n\n            module.debug('Returned full local search results', results);\n\n            if(settings.maxResults > 0) {\n\n              module.debug('Using specified max results', results);\n\n              results = results.slice(0, settings.maxResults);\n\n            }\n\n            if(settings.type == 'category') {\n\n              results = module.create.categoryResults(results);\n\n            }\n\n            searchHTML = module.generateResults({\n\n              results: results\n\n            });\n\n            module.remove.loading();\n\n            module.addResults(searchHTML);\n\n            module.inject.id(results);\n\n            module.write.cache(searchTerm, {\n\n              html    : searchHTML,\n\n              results : results\n\n            });\n\n          },\n\n          remote: function(searchTerm, callback) {\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if($module.api('is loading')) {\n\n              $module.api('abort');\n\n            }\n\n            module.setup.api(searchTerm, callback);\n\n            $module\n\n              .api('query')\n\n            ;\n\n          },\n\n          object: function(searchTerm, source, searchFields) {\n\n            var\n\n              results      = [],\n\n              exactResults = [],\n\n              fuzzyResults = [],\n\n              searchExp    = searchTerm.toString().replace(regExp.escape, '\\\\$&'),\n\n              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),\n\n\n\n              // avoid duplicates when pushing results\n\n              addResult = function(array, result) {\n\n                var\n\n                  notResult      = ($.inArray(result, results) == -1),\n\n                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1),\n\n                  notExactResults = ($.inArray(result, exactResults) == -1)\n\n                ;\n\n                if(notResult && notFuzzyResult && notExactResults) {\n\n                  array.push(result);\n\n                }\n\n              }\n\n            ;\n\n            source = source || settings.source;\n\n            searchFields = (searchFields !== undefined)\n\n              ? searchFields\n\n              : settings.searchFields\n\n            ;\n\n\n\n            // search fields should be array to loop correctly\n\n            if(!$.isArray(searchFields)) {\n\n              searchFields = [searchFields];\n\n            }\n\n\n\n            // exit conditions if no source\n\n            if(source === undefined || source === false) {\n\n              module.error(error.source);\n\n              return [];\n\n            }\n\n            // iterate through search fields looking for matches\n\n            $.each(searchFields, function(index, field) {\n\n              $.each(source, function(label, content) {\n\n                var\n\n                  fieldExists = (typeof content[field] == 'string')\n\n                ;\n\n                if(fieldExists) {\n\n                  if( content[field].search(matchRegExp) !== -1) {\n\n                    // content starts with value (first in results)\n\n                    addResult(results, content);\n\n                  }\n\n                  else if(settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(exactResults, content);\n\n                  }\n\n                  else if(settings.fullTextSearch == true && module.fuzzySearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(fuzzyResults, content);\n\n                  }\n\n                }\n\n              });\n\n            });\n\n            $.merge(exactResults, fuzzyResults)\n\n            $.merge(results, exactResults);\n\n            return results;\n\n          }\n\n        },\n\n        exactSearch: function (query, term) {\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(term.indexOf(query) > -1) {\n\n             return true;\n\n          }\n\n          return false;\n\n        },\n\n        fuzzySearch: function(query, term) {\n\n          var\n\n            termLength  = term.length,\n\n            queryLength = query.length\n\n          ;\n\n          if(typeof query !== 'string') {\n\n            return false;\n\n          }\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(queryLength > termLength) {\n\n            return false;\n\n          }\n\n          if(queryLength === termLength) {\n\n            return (query === term);\n\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n\n            var\n\n              queryCharacter = query.charCodeAt(characterIndex)\n\n            ;\n\n            while(nextCharacterIndex < termLength) {\n\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n\n                continue search;\n\n              }\n\n            }\n\n            return false;\n\n          }\n\n          return true;\n\n        },\n\n\n\n        parse: {\n\n          response: function(response, searchTerm) {\n\n            var\n\n              searchHTML = module.generateResults(response)\n\n            ;\n\n            module.verbose('Parsing server response', response);\n\n            if(response !== undefined) {\n\n              if(searchTerm !== undefined && response[fields.results] !== undefined) {\n\n                module.addResults(searchHTML);\n\n                module.inject.id(response[fields.results]);\n\n                module.write.cache(searchTerm, {\n\n                  html    : searchHTML,\n\n                  results : response[fields.results]\n\n                });\n\n                module.save.results(response[fields.results]);\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        cancel: {\n\n          query: function() {\n\n            if( module.can.useAPI() ) {\n\n              $module.api('abort');\n\n            }\n\n          }\n\n        },\n\n\n\n        has: {\n\n          minimumCharacters: function() {\n\n            var\n\n              searchTerm    = module.get.value(),\n\n              numCharacters = searchTerm.length\n\n            ;\n\n            return (numCharacters >= settings.minCharacters);\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              return false;\n\n            }\n\n            var\n\n              html = $results.html()\n\n            ;\n\n            return html != '';\n\n          }\n\n        },\n\n\n\n        clear: {\n\n          cache: function(value) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(!value) {\n\n              module.debug('Clearing cache', value);\n\n              $module.removeData(metadata.cache);\n\n            }\n\n            else if(value && cache && cache[value]) {\n\n              module.debug('Removing value from cache', value);\n\n              delete cache[value];\n\n              $module.data(metadata.cache, cache);\n\n            }\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cache: function(name) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Checking cache for generated html for query', name);\n\n              return (typeof cache == 'object') && (cache[name] !== undefined)\n\n                ? cache[name]\n\n                : false\n\n              ;\n\n            }\n\n            return false;\n\n          }\n\n        },\n\n\n\n        create: {\n\n          categoryResults: function(results) {\n\n            var\n\n              categoryResults = {}\n\n            ;\n\n            $.each(results, function(index, result) {\n\n              if(!result.category) {\n\n                return;\n\n              }\n\n              if(categoryResults[result.category] === undefined) {\n\n                module.verbose('Creating new category of results', result.category);\n\n                categoryResults[result.category] = {\n\n                  name    : result.category,\n\n                  results : [result]\n\n                }\n\n              }\n\n              else {\n\n                categoryResults[result.category].results.push(result);\n\n              }\n\n            });\n\n            return categoryResults;\n\n          },\n\n          id: function(resultIndex, categoryIndex) {\n\n            var\n\n              resultID      = (resultIndex + 1), // not zero indexed\n\n              categoryID    = (categoryIndex + 1),\n\n              firstCharCode,\n\n              letterID,\n\n              id\n\n            ;\n\n            if(categoryIndex !== undefined) {\n\n              // start char code for \"A\"\n\n              letterID = String.fromCharCode(97 + categoryIndex);\n\n              id          = letterID + resultID;\n\n              module.verbose('Creating category result id', id);\n\n            }\n\n            else {\n\n              id = resultID;\n\n              module.verbose('Creating result id', id);\n\n            }\n\n            return id;\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              $results = $('<div />')\n\n                .addClass(className.results)\n\n                .appendTo($module)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        inject: {\n\n          result: function(result, resultIndex, categoryIndex) {\n\n            module.verbose('Injecting result into results');\n\n            var\n\n              $selectedResult = (categoryIndex !== undefined)\n\n                ? $results\n\n                    .children().eq(categoryIndex)\n\n                      .children(selector.results)\n\n                        .first()\n\n                        .children(selector.result)\n\n                          .eq(resultIndex)\n\n                : $results\n\n                    .children(selector.result).eq(resultIndex)\n\n            ;\n\n            module.verbose('Injecting results metadata', $selectedResult);\n\n            $selectedResult\n\n              .data(metadata.result, result)\n\n            ;\n\n          },\n\n          id: function(results) {\n\n            module.debug('Injecting unique ids into results');\n\n            var\n\n              // since results may be object, we must use counters\n\n              categoryIndex = 0,\n\n              resultIndex   = 0\n\n            ;\n\n            if(settings.type === 'category') {\n\n              // iterate through each category result\n\n              $.each(results, function(index, category) {\n\n                resultIndex = 0;\n\n                $.each(category.results, function(index, value) {\n\n                  var\n\n                    result = category.results[index]\n\n                  ;\n\n                  if(result.id === undefined) {\n\n                    result.id = module.create.id(resultIndex, categoryIndex);\n\n                  }\n\n                  module.inject.result(result, resultIndex, categoryIndex);\n\n                  resultIndex++;\n\n                });\n\n                categoryIndex++;\n\n              });\n\n            }\n\n            else {\n\n              // top level\n\n              $.each(results, function(index, value) {\n\n                var\n\n                  result = results[index]\n\n                ;\n\n                if(result.id === undefined) {\n\n                  result.id = module.create.id(resultIndex);\n\n                }\n\n                module.inject.result(result, resultIndex);\n\n                resultIndex++;\n\n              });\n\n            }\n\n            return results;\n\n          }\n\n        },\n\n\n\n        save: {\n\n          results: function(results) {\n\n            module.verbose('Saving current search results to metadata', results);\n\n            $module.data(metadata.results, results);\n\n          }\n\n        },\n\n\n\n        write: {\n\n          cache: function(name, value) {\n\n            var\n\n              cache = ($module.data(metadata.cache) !== undefined)\n\n                ? $module.data(metadata.cache)\n\n                : {}\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Writing generated html to cache', name, value);\n\n              cache[name] = value;\n\n              $module\n\n                .data(metadata.cache, cache)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        addResults: function(html) {\n\n          if( $.isFunction(settings.onResultsAdd) ) {\n\n            if( settings.onResultsAdd.call($results, html) === false ) {\n\n              module.debug('onResultsAdd callback cancelled default action');\n\n              return false;\n\n            }\n\n          }\n\n          if(html) {\n\n            $results\n\n              .html(html)\n\n            ;\n\n            module.refreshResults();\n\n            if(settings.selectFirstResult) {\n\n              module.select.firstResult();\n\n            }\n\n            module.showResults();\n\n          }\n\n          else {\n\n            module.hideResults(function() {\n\n              $results.empty();\n\n            });\n\n          }\n\n        },\n\n\n\n        showResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if(resultsDismissed) {\n\n            return;\n\n          }\n\n          if(!module.is.visible() && module.has.results()) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Showing results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' in',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Showing results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeIn(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsOpen.call($results);\n\n          }\n\n        },\n\n        hideResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if( module.is.visible() ) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Hiding results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' out',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Hiding results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeOut(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsClose.call($results);\n\n          }\n\n        },\n\n\n\n        generateResults: function(response) {\n\n          module.debug('Generating html from response', response);\n\n          var\n\n            template       = settings.templates[settings.type],\n\n            isProperObject = ($.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results])),\n\n            isProperArray  = ($.isArray(response[fields.results]) && response[fields.results].length > 0),\n\n            html           = ''\n\n          ;\n\n          if(isProperObject || isProperArray ) {\n\n            if(settings.maxResults > 0) {\n\n              if(isProperObject) {\n\n                if(settings.type == 'standard') {\n\n                  module.error(error.maxResults);\n\n                }\n\n              }\n\n              else {\n\n                response[fields.results] = response[fields.results].slice(0, settings.maxResults);\n\n              }\n\n            }\n\n            if($.isFunction(template)) {\n\n              html = template(response, fields);\n\n            }\n\n            else {\n\n              module.error(error.noTemplate, false);\n\n            }\n\n          }\n\n          else if(settings.showNoResults) {\n\n            html = module.displayMessage(error.noResults, 'empty', error.noResultsHeader);\n\n          }\n\n          settings.onResults.call(element, response);\n\n          return html;\n\n        },\n\n\n\n        displayMessage: function(text, type, header) {\n\n          type = type || 'standard';\n\n          module.debug('Displaying message', text, type, header);\n\n          module.addResults( settings.templates.message(text, type, header) );\n\n          return settings.templates.message(text, type, header);\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            settings[name] = value;\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if($allModules.length > 1) {\n\n              title += ' ' + '(' + $allModules.length + ')';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/src/definitions/modules/toast.js",
          "match_lines": [
            37,
            481
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.toast.settings, parameters)\n\n          : $.extend({}, $.fn.toast.settings),\n\n\n\n        className       = settings.className,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        namespace       = settings.namespace,\n\n\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = namespace + '-module',\n\n\n\n        $module         = $(this),\n\n        $toastBox       = $('<div/>',{'class':settings.className.box}),\n\n        $toast          = $('<div/>'),\n\n        $progress       = $('<div/>',{'class':settings.className.progress+' '+settings.class}),\n\n        $progressBar    = $('<div/>',{'class':'bar'}),\n\n\n\n        $close          = $('<i/>',{'class':'close icon'}),\n\n        $context        = (settings.context)\n\n          ? $(settings.context)\n\n          : $('body'),\n\n\n\n        element         = this,\n\n        instance        = $module.data(moduleNamespace),\n\n\n\n        module\n\n      ;\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing element');\n\n          if(typeof settings.showProgress !== 'string' || ['top','bottom'].indexOf(settings.showProgress) === -1 ) {\n\n            settings.showProgress = false;\n\n          }\n\n          if (!module.has.container()) {\n\n            module.create.container();\n\n          }\n\n\n\n          module.create.toast();\n\n\n\n          module.bind.events();\n\n          \n\n          if(settings.displayTime > 0) {\n\n            module.closeTimer = setTimeout(module.close, settings.displayTime+(!!settings.showProgress ? 300 : 0));\n\n          }\n\n          module.show();\n\n        },\n\n\n\n        destroy: function() {\n\n          module.debug('Removing toast', $toast);\n\n          $toast.remove();\n\n          $toast = undefined;\n\n          settings.onRemove.call($toast, element);\n\n        },\n\n\n\n        show: function(callback) {\n\n          callback = callback || function(){};\n\n          module.debug('Showing toast');\n\n          if(settings.onShow.call($toast, element) === false) {\n\n            module.debug('onShow callback returned false, cancelling toast animation');\n\n            return;\n\n          }\n\n          module.animate.show(callback);\n\n        },\n\n\n\n        close: function(callback) {\n\n          if(module.closeTimer) {\n\n              clearTimeout(module.closeTimer);\n\n          }\n\n          callback = callback || function(){};\n\n          module.remove.visible();\n\n          module.unbind.events();\n\n          module.animate.close(callback);\n\n\n\n        },\n\n\n\n        create: {\n\n          container: function() {\n\n            module.verbose('Creating container');\n\n            $context.append('<div class=\"ui ' + settings.position + ' ' + className.container + '\"></div>');\n\n          },\n\n          toast: function() {\n\n            var $content = $('<div/>').addClass(className.content);\n\n            module.verbose('Creating toast');\n\n            if(settings.closeIcon) {\n\n                $toast.append($close);\n\n                $toast.css('cursor','default');\n\n            }\n\n\n\n            var iconClass = typeof settings.showIcon === 'string' ? settings.showIcon : settings.showIcon && settings.icons[settings.class] ? settings.icons[settings.class] : '';\n\n            if (iconClass != '') {\n\n               var $icon = $('<i/>').addClass(iconClass + ' ' + className.icon);\n\n\n\n              $toast\n\n                .addClass(className.icon)\n\n                .append($icon)\n\n              ;\n\n            }\n\n\n\n            if (settings.title !== '') {\n\n              var \n\n                $title = $('<div/>')\n\n                  .addClass(className.title)\n\n                  .text(settings.title)\n\n                ;\n\n\n\n              $content.append($title);\n\n            }\n\n\n\n            $content.append($('<div/>').html(settings.message));\n\n\n\n            $toast\n\n              .addClass(settings.class + ' ' + className.toast)\n\n              .append($content)\n\n            ;\n\n            $toast.css('opacity', settings.opacity);\n\n            if(settings.compact || $toast.hasClass('compact')) {\n\n                $toastBox.addClass('compact');\n\n            }\n\n            if($toast.hasClass('toast') && !$toast.hasClass('inverted')){\n\n              $progress.addClass('inverted');\n\n            } else {\n\n              $progress.removeClass('inverted');\n\n            }\n\n            $toast = $toastBox.append($toast);\n\n            if(!!settings.showProgress && settings.displayTime > 0){\n\n              $progress\n\n                .addClass(settings.showProgress)\n\n                .append($progressBar);\n\n              if ($progress.hasClass('top')) {\n\n                  $toast.prepend($progress);\n\n              } else {\n\n                  $toast.append($progress);\n\n              }\n\n              $progressBar.css('transition','width '+(settings.displayTime/1000)+'s linear');\n\n              $progressBar.width(settings.progressUp?'0%':'100%');\n\n              setTimeout(function() {\n\n                  if(typeof $progress !== 'undefined'){\n\n                    $progressBar.width(settings.progressUp?'100%':'0%');\n\n                }\n\n              },300);\n\n            }\n\n            if (settings.newestOnTop) {\n\n              $toast.prependTo(module.get.container());\n\n            }\n\n            else {\n\n              $toast.appendTo(module.get.container());\n\n            }\n\n          }\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.debug('Binding events to toast');\n\n            (settings.closeIcon ? $close : $toast)\n\n              .on('click' + eventNamespace, module.event.click)\n\n            ;\n\n          }\n\n        },\n\n\n\n        unbind: {\n\n          events: function() {\n\n            module.debug('Unbinding events to toast');\n\n            (settings.closeIcon ? $close : $toast)\n\n              .off('click' + eventNamespace)\n\n            ;\n\n          }\n\n        },\n\n\n\n        animate: {\n\n          show: function(callback) {\n\n            callback = $.isFunction(callback) ? callback : function(){};\n\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n\n              module.set.visible();\n\n              $toast\n\n                .transition({\n\n                  animation  : settings.transition.showMethod + ' in',\n\n                  queue      : false,\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.transition.showDuration,\n\n                  onComplete : function() {\n\n                    callback.call($toast, element);\n\n                    settings.onVisible.call($toast, element);\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.error(error.noTransition);\n\n            }\n\n          },\n\n          close: function(callback) {\n\n            callback = $.isFunction(callback) ? callback : function(){};\n\n            module.debug('Closing toast');\n\n            if(settings.onHide.call($toast, element) === false) {\n\n              module.debug('onHide callback returned false, cancelling toast animation');\n\n              return;\n\n            }\n\n            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n\n              $toast\n\n                .transition({\n\n                  animation  : settings.transition.hideMethod + ' out',\n\n                  queue      : false,\n\n                  duration   : settings.transition.hideDuration,\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n\n\n                  onBeforeHide: function(callback){\n\n                      callback = $.isFunction(callback)?callback : function(){};\n\n                      if(settings.transition.closeEasing !== ''){\n\n                          $toast.css('opacity',0);\n\n                          $toast.wrap('<div/>').parent().slideUp(500,settings.transition.closeEasing,function(){\n\n                              $toast.parent().remove();\n\n                              callback.call($toast);\n\n                          });\n\n                      } else {\n\n                        callback.call($toast);\n\n                      }\n\n                  },\n\n                  onComplete : function() {\n\n                    module.destroy();\n\n                    callback.call($toast, element);\n\n                    settings.onHidden.call($toast, element);\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.error(error.noTransition);\n\n            }\n\n          }\n\n        },\n\n\n\n        has: {\n\n          container: function() {\n\n            module.verbose('Determining if there is already a container');\n\n            return ($context.find(module.helpers.toClass(settings.position) + selector.container).length > 0);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          container: function() {\n\n            return ($context.find(module.helpers.toClass(settings.position) + selector.container)[0]);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          visible: function() {\n\n            $toast.addClass(className.visible);\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          visible: function() {\n\n            $toast.removeClass(className.visible);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          click: function() {\n\n            settings.onClick.call($toast, element);\n\n            module.close();\n\n          }\n\n        },\n\n\n\n        helpers: {\n\n          toClass: function(selector) {\n\n            var\n\n              classes = selector.split(' '),\n\n              result = ''\n\n            ;\n\n\n\n            classes.forEach(function (element) {\n\n              result += '.' + element;\n\n            });\n\n\n\n            return result;\n\n          }\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        }
      ],
      "metadata": {
        "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/dist/components/dropdown.js",
          "match_lines": [
            191,
            191
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/dist/components/modal.js",
          "match_lines": [
            141,
            141
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/dist/components/modal.js",
          "match_lines": [
            239,
            239
          ],
          "match_position": [
            21,
            32
          ],
          "match_string": "            return (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/dist/components/popup.js",
          "match_lines": [
            303,
            303
          ],
          "match_position": [
            17,
            28
          ],
          "match_string": "          id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/dist/components/progress.js",
          "match_lines": [
            269,
            269
          ],
          "match_position": [
            32,
            43
          ],
          "match_string": "            return Math.floor((Math.random() * settings.random.max) + settings.random.min);"
        },
        {
          "file_path": "/src/dist/components/sidebar.js",
          "match_lines": [
            117,
            117
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2,8);"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            6056,
            6056
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            10744,
            10744
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            10842,
            10842
          ],
          "match_position": [
            21,
            32
          ],
          "match_string": "            return (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            12505,
            12505
          ],
          "match_position": [
            17,
            28
          ],
          "match_string": "          id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            14004,
            14004
          ],
          "match_position": [
            32,
            43
          ],
          "match_string": "            return Math.floor((Math.random() * settings.random.max) + settings.random.min);"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            18005,
            18005
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2,8);"
        },
        {
          "file_path": "/src/src/definitions/modules/dropdown.js",
          "match_lines": [
            191,
            191
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/src/definitions/modules/modal.js",
          "match_lines": [
            141,
            141
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/src/definitions/modules/modal.js",
          "match_lines": [
            239,
            239
          ],
          "match_position": [
            21,
            32
          ],
          "match_string": "            return (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/src/definitions/modules/popup.js",
          "match_lines": [
            303,
            303
          ],
          "match_position": [
            17,
            28
          ],
          "match_string": "          id = (Math.random().toString(16) + '000000000').substr(2, 8);"
        },
        {
          "file_path": "/src/src/definitions/modules/progress.js",
          "match_lines": [
            269,
            269
          ],
          "match_position": [
            32,
            43
          ],
          "match_string": "            return Math.floor((Math.random() * settings.random.max) + settings.random.min);"
        },
        {
          "file_path": "/src/src/definitions/modules/sidebar.js",
          "match_lines": [
            117,
            117
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "            id = (Math.random().toString(16) + '000000000').substr(2,8);"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/dist/components/form.js",
          "match_lines": [
            1406,
            1406
          ],
          "match_position": [
            9,
            29
          ],
          "match_string": "        intRegExp.test(value) &&"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            1907,
            1907
          ],
          "match_position": [
            9,
            29
          ],
          "match_string": "        intRegExp.test(value) &&"
        },
        {
          "file_path": "/src/src/definitions/behaviors/form.js",
          "match_lines": [
            1406,
            1406
          ],
          "match_position": [
            9,
            29
          ],
          "match_string": "        intRegExp.test(value) &&"
        },
        {
          "file_path": "/src/test/helpers/sinon.js",
          "match_lines": [
            367,
            367
          ],
          "match_position": [
            20,
            39
          ],
          "match_string": "            return matcher.test(object);"
        },
        {
          "file_path": "/src/test/helpers/sinon.js",
          "match_lines": [
            3733,
            3733
          ],
          "match_position": [
            42,
            70
          ],
          "match_string": "            if (unsafeHeaders[header] || /^(Sec-|Proxy-)/.test(header)) {"
        },
        {
          "file_path": "/src/test/helpers/sinon.js",
          "match_lines": [
            4778,
            4778
          ],
          "match_position": [
            17,
            36
          ],
          "match_string": "            if (matcher.test(actual)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    },
    "regex_injection_dos": {
      "files": [
        {
          "file_path": "/src/dist/components/api.js",
          "match_lines": [
            43,
            1004
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.api.settings, parameters)\n\n          : $.extend({}, $.fn.api.settings),\n\n\n\n        // internal aliases\n\n        namespace       = settings.namespace,\n\n        metadata        = settings.metadata,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        className       = settings.className,\n\n\n\n        // define namespaces for modules\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        // element that creates request\n\n        $module         = $(this),\n\n        $form           = $module.closest(selector.form),\n\n\n\n        // context used for state\n\n        $context        = (settings.stateContext)\n\n          ? $(settings.stateContext)\n\n          : $module,\n\n\n\n        // request details\n\n        ajaxSettings,\n\n        requestSettings,\n\n        url,\n\n        data,\n\n        requestStartTime,\n\n\n\n        // standard module\n\n        element         = this,\n\n        context         = $context[0],\n\n        instance        = $module.data(moduleNamespace),\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          if(!methodInvoked) {\n\n            module.bind.events();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, instance)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module for', element);\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            var\n\n              triggerEvent = module.get.event()\n\n            ;\n\n            if( triggerEvent ) {\n\n              module.verbose('Attaching API events to element', triggerEvent);\n\n              $module\n\n                .on(triggerEvent + eventNamespace, module.event.trigger)\n\n              ;\n\n            }\n\n            else if(settings.on == 'now') {\n\n              module.debug('Querying API endpoint immediately');\n\n              module.query();\n\n            }\n\n          }\n\n        },\n\n\n\n        decode: {\n\n          json: function(response) {\n\n            if(response !== undefined && typeof response == 'string') {\n\n              try {\n\n               response = JSON.parse(response);\n\n              }\n\n              catch(e) {\n\n                // isnt json string\n\n              }\n\n            }\n\n            return response;\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cachedResponse: function(url) {\n\n            var\n\n              response\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            response = sessionStorage.getItem(url);\n\n            module.debug('Using cached response', url, response);\n\n            response = module.decode.json(response);\n\n            return response;\n\n          }\n\n        },\n\n        write: {\n\n          cachedResponse: function(url, response) {\n\n            if(response && response === '') {\n\n              module.debug('Response empty, not caching', response);\n\n              return;\n\n            }\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            if( $.isPlainObject(response) ) {\n\n              response = JSON.stringify(response);\n\n            }\n\n            sessionStorage.setItem(url, response);\n\n            module.verbose('Storing cached response for url', url, response);\n\n          }\n\n        },\n\n\n\n        query: function() {\n\n\n\n          if(module.is.disabled()) {\n\n            module.debug('Element is disabled API request aborted');\n\n            return;\n\n          }\n\n\n\n          if(module.is.loading()) {\n\n            if(settings.interruptRequests) {\n\n              module.debug('Interrupting previous request');\n\n              module.abort();\n\n            }\n\n            else {\n\n              module.debug('Cancelling request, previous request is still pending');\n\n              return;\n\n            }\n\n          }\n\n\n\n          // pass element metadata to url (value, text)\n\n          if(settings.defaultData) {\n\n            $.extend(true, settings.urlData, module.get.defaultData());\n\n          }\n\n\n\n          // Add form content\n\n          if(settings.serializeForm) {\n\n            settings.data = module.add.formData(settings.data);\n\n          }\n\n\n\n          // call beforesend and get any settings changes\n\n          requestSettings = module.get.settings();\n\n\n\n          // check if before send cancelled request\n\n          if(requestSettings === false) {\n\n            module.cancelled = true;\n\n            module.error(error.beforeSend);\n\n            return;\n\n          }\n\n          else {\n\n            module.cancelled = false;\n\n          }\n\n\n\n          // get url\n\n          url = module.get.templatedURL();\n\n\n\n          if(!url && !module.is.mocked()) {\n\n            module.error(error.missingURL);\n\n            return;\n\n          }\n\n\n\n          // replace variables\n\n          url = module.add.urlData( url );\n\n          // missing url parameters\n\n          if( !url && !module.is.mocked()) {\n\n            return;\n\n          }\n\n\n\n          requestSettings.url = settings.base + url;\n\n\n\n          // look for jQuery ajax parameters in settings\n\n          ajaxSettings = $.extend(true, {}, settings, {\n\n            type       : settings.method || settings.type,\n\n            data       : data,\n\n            url        : settings.base + url,\n\n            beforeSend : settings.beforeXHR,\n\n            success    : function() {},\n\n            failure    : function() {},\n\n            complete   : function() {}\n\n          });\n\n\n\n          module.debug('Querying URL', ajaxSettings.url);\n\n          module.verbose('Using AJAX settings', ajaxSettings);\n\n          if(settings.cache === 'local' && module.read.cachedResponse(url)) {\n\n            module.debug('Response returned from local cache');\n\n            module.request = module.create.request();\n\n            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);\n\n            return;\n\n          }\n\n\n\n          if( !settings.throttle ) {\n\n            module.debug('Sending request', data, ajaxSettings.method);\n\n            module.send.request();\n\n          }\n\n          else {\n\n            if(!settings.throttleFirstRequest && !module.timer) {\n\n              module.debug('Sending request', data, ajaxSettings.method);\n\n              module.send.request();\n\n              module.timer = setTimeout(function(){}, settings.throttle);\n\n            }\n\n            else {\n\n              module.debug('Throttling request', settings.throttle);\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.timer) {\n\n                  delete module.timer;\n\n                }\n\n                module.debug('Sending throttled request', data, ajaxSettings.method);\n\n                module.send.request();\n\n              }, settings.throttle);\n\n            }\n\n          }\n\n\n\n        },\n\n\n\n        should: {\n\n          removeError: function() {\n\n            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );\n\n          }\n\n        },\n\n\n\n        is: {\n\n          disabled: function() {\n\n            return ($module.filter(selector.disabled).length > 0);\n\n          },\n\n          expectingJSON: function() {\n\n            return settings.dataType === 'json' || settings.dataType === 'jsonp';\n\n          },\n\n          form: function() {\n\n            return $module.is('form') || $context.is('form');\n\n          },\n\n          mocked: function() {\n\n            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);\n\n          },\n\n          input: function() {\n\n            return $module.is('input');\n\n          },\n\n          loading: function() {\n\n            return (module.request)\n\n              ? (module.request.state() == 'pending')\n\n              : false\n\n            ;\n\n          },\n\n          abortedRequest: function(xhr) {\n\n            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\n\n              module.verbose('XHR request determined to be aborted');\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('XHR request was not aborted');\n\n              return false;\n\n            }\n\n          },\n\n          validResponse: function(response) {\n\n            if( (!module.is.expectingJSON()) || !$.isFunction(settings.successTest) ) {\n\n              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);\n\n              return true;\n\n            }\n\n            module.debug('Checking JSON returned success', settings.successTest, response);\n\n            if( settings.successTest(response) ) {\n\n              module.debug('Response passed success test', response);\n\n              return true;\n\n            }\n\n            else {\n\n              module.debug('Response failed success test', response);\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        was: {\n\n          cancelled: function() {\n\n            return (module.cancelled || false);\n\n          },\n\n          succesful: function() {\n\n            return (module.request && module.request.state() == 'resolved');\n\n          },\n\n          failure: function() {\n\n            return (module.request && module.request.state() == 'rejected');\n\n          },\n\n          complete: function() {\n\n            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );\n\n          }\n\n        },\n\n\n\n        add: {\n\n          urlData: function(url, urlData) {\n\n            var\n\n              requiredVariables,\n\n              optionalVariables\n\n            ;\n\n            if(url) {\n\n              requiredVariables = url.match(settings.regExp.required);\n\n              optionalVariables = url.match(settings.regExp.optional);\n\n              urlData           = urlData || settings.urlData;\n\n              if(requiredVariables) {\n\n                module.debug('Looking for required URL variables', requiredVariables);\n\n                $.each(requiredVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(2, templatedString.length - 3)\n\n                      : templatedString.substr(1, templatedString.length - 2),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // remove value\n\n                  if(value === undefined) {\n\n                    module.error(error.requiredParameter, variable, url);\n\n                    url = false;\n\n                    return false;\n\n                  }\n\n                  else {\n\n                    module.verbose('Found required variable', variable, value);\n\n                    value = (settings.encodeParameters)\n\n                      ? module.get.urlEncodedValue(value)\n\n                      : value\n\n                    ;\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                });\n\n              }\n\n              if(optionalVariables) {\n\n                module.debug('Looking for optional URL variables', requiredVariables);\n\n                $.each(optionalVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {/$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(3, templatedString.length - 4)\n\n                      : templatedString.substr(2, templatedString.length - 3),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // optional replacement\n\n                  if(value !== undefined) {\n\n                    module.verbose('Optional variable Found', variable, value);\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                  else {\n\n                    module.verbose('Optional variable not found', variable);\n\n                    // remove preceding slash if set\n\n                    if(url.indexOf('/' + templatedString) !== -1) {\n\n                      url = url.replace('/' + templatedString, '');\n\n                    }\n\n                    else {\n\n                      url = url.replace(templatedString, '');\n\n                    }\n\n                  }\n\n                });\n\n              }\n\n            }\n\n            return url;\n\n          },\n\n          formData: function(data) {\n\n            var\n\n              canSerialize = ($.fn.serializeObject !== undefined),\n\n              formData     = (canSerialize)\n\n                ? $form.serializeObject()\n\n                : $form.serialize(),\n\n              hasOtherData\n\n            ;\n\n            data         = data || settings.data;\n\n            hasOtherData = $.isPlainObject(data);\n\n\n\n            if(hasOtherData) {\n\n              if(canSerialize) {\n\n                module.debug('Extending existing data with form data', data, formData);\n\n                data = $.extend(true, {}, data, formData);\n\n              }\n\n              else {\n\n                module.error(error.missingSerialize);\n\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\n\n                data = formData;\n\n              }\n\n            }\n\n            else {\n\n              module.debug('Adding form data', formData);\n\n              data = formData;\n\n            }\n\n            return data;\n\n          }\n\n        },\n\n\n\n        send: {\n\n          request: function() {\n\n            module.set.loading();\n\n            module.request = module.create.request();\n\n            if( module.is.mocked() ) {\n\n              module.mockedXHR = module.create.mockedXHR();\n\n            }\n\n            else {\n\n              module.xhr = module.create.xhr();\n\n            }\n\n            settings.onRequest.call(context, module.request, module.xhr);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          trigger: function(event) {\n\n            module.query();\n\n            if(event.type == 'submit' || event.type == 'click') {\n\n              event.preventDefault();\n\n            }\n\n          },\n\n          xhr: {\n\n            always: function() {\n\n              // nothing special\n\n            },\n\n            done: function(response, textStatus, xhr) {\n\n              var\n\n                context            = this,\n\n                elapsedTime        = (new Date().getTime() - requestStartTime),\n\n                timeLeft           = (settings.loadingDuration - elapsedTime),\n\n                translatedResponse = ( $.isFunction(settings.onResponse) )\n\n                  ? module.is.expectingJSON()\n\n                    ? settings.onResponse.call(context, $.extend(true, {}, response))\n\n                    : settings.onResponse.call(context, response)\n\n                  : false\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(translatedResponse) {\n\n                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);\n\n                response = translatedResponse;\n\n              }\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.validResponse(response) ) {\n\n                  module.request.resolveWith(context, [response, xhr]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'invalid']);\n\n                }\n\n              }, timeLeft);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                context     = this,\n\n                elapsedTime = (new Date().getTime() - requestStartTime),\n\n                timeLeft    = (settings.loadingDuration - elapsedTime)\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.abortedRequest(xhr) ) {\n\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\n\n                }\n\n              }, timeLeft);\n\n            }\n\n          },\n\n          request: {\n\n            done: function(response, xhr) {\n\n              module.debug('Successful API Response', response);\n\n              if(settings.cache === 'local' && url) {\n\n                module.write.cachedResponse(url, response);\n\n                module.debug('Saving server response locally', module.cache);\n\n              }\n\n              settings.onSuccess.call(context, response, $module, xhr);\n\n            },\n\n            complete: function(firstParameter, secondParameter) {\n\n              var\n\n                xhr,\n\n                response\n\n              ;\n\n              // have to guess callback parameters based on request success\n\n              if( module.was.succesful() ) {\n\n                response = firstParameter;\n\n                xhr      = secondParameter;\n\n              }\n\n              else {\n\n                xhr      = firstParameter;\n\n                response = module.get.responseFromXHR(xhr);\n\n              }\n\n              module.remove.loading();\n\n              settings.onComplete.call(context, response, $module, xhr);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                // pull response from xhr if available\n\n                response     = module.get.responseFromXHR(xhr),\n\n                errorMessage = module.get.errorFromRequest(response, status, httpMessage)\n\n              ;\n\n              if(status == 'aborted') {\n\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\n\n                settings.onAbort.call(context, status, $module, xhr);\n\n                return true;\n\n              }\n\n              else if(status == 'invalid') {\n\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\n\n              }\n\n              else if(status == 'error') {\n\n                if(xhr !== undefined) {\n\n                  module.debug('XHR produced a server error', status, httpMessage);\n\n                  // make sure we have an error to display to console\n\n                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\n\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\n\n                  }\n\n                  settings.onError.call(context, errorMessage, $module, xhr);\n\n                }\n\n              }\n\n\n\n              if(settings.errorDuration && status !== 'aborted') {\n\n                module.debug('Adding error state');\n\n                module.set.error();\n\n                if( module.should.removeError() ) {\n\n                  setTimeout(module.remove.error, settings.errorDuration);\n\n                }\n\n              }\n\n              module.debug('API Request failed', errorMessage, xhr);\n\n              settings.onFailure.call(context, response, $module, xhr);\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n\n\n          request: function() {\n\n            // api request promise\n\n            return $.Deferred()\n\n              .always(module.event.request.complete)\n\n              .done(module.event.request.done)\n\n              .fail(module.event.request.fail)\n\n            ;\n\n          },\n\n\n\n          mockedXHR: function () {\n\n            var\n\n              // xhr does not simulate these properties of xhr but must return them\n\n              textStatus     = false,\n\n              status         = false,\n\n              httpMessage    = false,\n\n              responder      = settings.mockResponse      || settings.response,\n\n              asyncResponder = settings.mockResponseAsync || settings.responseAsync,\n\n              asyncCallback,\n\n              response,\n\n              mockedXHR\n\n            ;\n\n\n\n            mockedXHR = $.Deferred()\n\n              .always(module.event.xhr.complete)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n\n\n            if(responder) {\n\n              if( $.isFunction(responder) ) {\n\n                module.debug('Using specified synchronous callback', responder);\n\n                response = responder.call(context, requestSettings);\n\n              }\n\n              else {\n\n                module.debug('Using settings specified response', responder);\n\n                response = responder;\n\n              }\n\n              // simulating response\n\n              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n            }\n\n            else if( $.isFunction(asyncResponder) ) {\n\n              asyncCallback = function(response) {\n\n                module.debug('Async callback returned response', response);\n\n\n\n                if(response) {\n\n                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n                }\n\n                else {\n\n                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);\n\n                }\n\n              };\n\n              module.debug('Using specified async response callback', asyncResponder);\n\n              asyncResponder.call(context, requestSettings, asyncCallback);\n\n            }\n\n            return mockedXHR;\n\n          },\n\n\n\n          xhr: function() {\n\n            var\n\n              xhr\n\n            ;\n\n            // ajax request promise\n\n            xhr = $.ajax(ajaxSettings)\n\n              .always(module.event.xhr.always)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n            module.verbose('Created server request', xhr, ajaxSettings);\n\n            return xhr;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          error: function() {\n\n            module.verbose('Adding error state to element', $context);\n\n            $context.addClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Adding loading state to element', $context);\n\n            $context.addClass(className.loading);\n\n            requestStartTime = new Date().getTime();\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          error: function() {\n\n            module.verbose('Removing error state from element', $context);\n\n            $context.removeClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Removing loading state from element', $context);\n\n            $context.removeClass(className.loading);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          responseFromXHR: function(xhr) {\n\n            return $.isPlainObject(xhr)\n\n              ? (module.is.expectingJSON())\n\n                ? module.decode.json(xhr.responseText)\n\n                : xhr.responseText\n\n              : false\n\n            ;\n\n          },\n\n          errorFromRequest: function(response, status, httpMessage) {\n\n            return ($.isPlainObject(response) && response.error !== undefined)\n\n              ? response.error // use json error message\n\n              : (settings.error[status] !== undefined) // use server error message\n\n                ? settings.error[status]\n\n                : httpMessage\n\n            ;\n\n          },\n\n          request: function() {\n\n            return module.request || false;\n\n          },\n\n          xhr: function() {\n\n            return module.xhr || false;\n\n          },\n\n          settings: function() {\n\n            var\n\n              runSettings\n\n            ;\n\n            runSettings = settings.beforeSend.call(context, settings);\n\n            if(runSettings) {\n\n              if(runSettings.success !== undefined) {\n\n                module.debug('Legacy success callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.success);\n\n                runSettings.onSuccess = runSettings.success;\n\n              }\n\n              if(runSettings.failure !== undefined) {\n\n                module.debug('Legacy failure callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.failure);\n\n                runSettings.onFailure = runSettings.failure;\n\n              }\n\n              if(runSettings.complete !== undefined) {\n\n                module.debug('Legacy complete callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.complete);\n\n                runSettings.onComplete = runSettings.complete;\n\n              }\n\n            }\n\n            if(runSettings === undefined) {\n\n              module.error(error.noReturnedValue);\n\n            }\n\n            if(runSettings === false) {\n\n              return runSettings;\n\n            }\n\n            return (runSettings !== undefined)\n\n              ? $.extend(true, {}, runSettings)\n\n              : $.extend(true, {}, settings)\n\n            ;\n\n          },\n\n          urlEncodedValue: function(value) {\n\n            var\n\n              decodedValue   = window.decodeURIComponent(value),\n\n              encodedValue   = window.encodeURIComponent(value),\n\n              alreadyEncoded = (decodedValue !== value)\n\n            ;\n\n            if(alreadyEncoded) {\n\n              module.debug('URL value is already encoded, avoiding double encoding', value);\n\n              return value;\n\n            }\n\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\n\n            return encodedValue;\n\n          },\n\n          defaultData: function() {\n\n            var\n\n              data = {}\n\n            ;\n\n            if( !$.isWindow(element) ) {\n\n              if( module.is.input() ) {\n\n                data.value = $module.val();\n\n              }\n\n              else if( module.is.form() ) {\n\n\n\n              }\n\n              else {\n\n                data.text = $module.text();\n\n              }\n\n            }\n\n            return data;\n\n          },\n\n          event: function() {\n\n            if( $.isWindow(element) || settings.on == 'now' ) {\n\n              module.debug('API called without element, no events attached');\n\n              return false;\n\n            }\n\n            else if(settings.on == 'auto') {\n\n              if( $module.is('input') ) {\n\n                return (element.oninput !== undefined)\n\n                  ? 'input'\n\n                  : (element.onpropertychange !== undefined)\n\n                    ? 'propertychange'\n\n                    : 'keyup'\n\n                ;\n\n              }\n\n              else if( $module.is('form') ) {\n\n                return 'submit';\n\n              }\n\n              else {\n\n                return 'click';\n\n              }\n\n            }\n\n            else {\n\n              return settings.on;\n\n            }\n\n          },\n\n          templatedURL: function(action) {\n\n            action = action || $module.data(metadata.action) || settings.action || false;\n\n            url    = $module.data(metadata.url) || settings.url || false;\n\n            if(url) {\n\n              module.debug('Using specified url', url);\n\n              return url;\n\n            }\n\n            if(action) {\n\n              module.debug('Looking up url for action', action, settings.api);\n\n              if(settings.api[action] === undefined && !module.is.mocked()) {\n\n                module.error(error.missingAction, settings.action, settings.api);\n\n                return;\n\n              }\n\n              url = settings.api[action];\n\n            }\n\n            else if( module.is.form() ) {\n\n              url = $module.attr('action') || $context.attr('action') || false;\n\n              module.debug('No url or action specified, defaulting to form action', url);\n\n            }\n\n            return url;\n\n          }\n\n        },\n\n\n\n        abort: function() {\n\n          var\n\n            xhr = module.get.xhr()\n\n          ;\n\n          if( xhr && xhr.state() !== 'resolved') {\n\n            module.debug('Cancelling API request');\n\n            xhr.abort();\n\n          }\n\n        },\n\n\n\n        // reset state\n\n        reset: function() {\n\n          module.remove.error();\n\n          module.remove.loading();\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                //'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/dist/semantic.js",
          "match_lines": [
            22578,
            23539
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.api.settings, parameters)\n\n          : $.extend({}, $.fn.api.settings),\n\n\n\n        // internal aliases\n\n        namespace       = settings.namespace,\n\n        metadata        = settings.metadata,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        className       = settings.className,\n\n\n\n        // define namespaces for modules\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        // element that creates request\n\n        $module         = $(this),\n\n        $form           = $module.closest(selector.form),\n\n\n\n        // context used for state\n\n        $context        = (settings.stateContext)\n\n          ? $(settings.stateContext)\n\n          : $module,\n\n\n\n        // request details\n\n        ajaxSettings,\n\n        requestSettings,\n\n        url,\n\n        data,\n\n        requestStartTime,\n\n\n\n        // standard module\n\n        element         = this,\n\n        context         = $context[0],\n\n        instance        = $module.data(moduleNamespace),\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          if(!methodInvoked) {\n\n            module.bind.events();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, instance)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module for', element);\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            var\n\n              triggerEvent = module.get.event()\n\n            ;\n\n            if( triggerEvent ) {\n\n              module.verbose('Attaching API events to element', triggerEvent);\n\n              $module\n\n                .on(triggerEvent + eventNamespace, module.event.trigger)\n\n              ;\n\n            }\n\n            else if(settings.on == 'now') {\n\n              module.debug('Querying API endpoint immediately');\n\n              module.query();\n\n            }\n\n          }\n\n        },\n\n\n\n        decode: {\n\n          json: function(response) {\n\n            if(response !== undefined && typeof response == 'string') {\n\n              try {\n\n               response = JSON.parse(response);\n\n              }\n\n              catch(e) {\n\n                // isnt json string\n\n              }\n\n            }\n\n            return response;\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cachedResponse: function(url) {\n\n            var\n\n              response\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            response = sessionStorage.getItem(url);\n\n            module.debug('Using cached response', url, response);\n\n            response = module.decode.json(response);\n\n            return response;\n\n          }\n\n        },\n\n        write: {\n\n          cachedResponse: function(url, response) {\n\n            if(response && response === '') {\n\n              module.debug('Response empty, not caching', response);\n\n              return;\n\n            }\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            if( $.isPlainObject(response) ) {\n\n              response = JSON.stringify(response);\n\n            }\n\n            sessionStorage.setItem(url, response);\n\n            module.verbose('Storing cached response for url', url, response);\n\n          }\n\n        },\n\n\n\n        query: function() {\n\n\n\n          if(module.is.disabled()) {\n\n            module.debug('Element is disabled API request aborted');\n\n            return;\n\n          }\n\n\n\n          if(module.is.loading()) {\n\n            if(settings.interruptRequests) {\n\n              module.debug('Interrupting previous request');\n\n              module.abort();\n\n            }\n\n            else {\n\n              module.debug('Cancelling request, previous request is still pending');\n\n              return;\n\n            }\n\n          }\n\n\n\n          // pass element metadata to url (value, text)\n\n          if(settings.defaultData) {\n\n            $.extend(true, settings.urlData, module.get.defaultData());\n\n          }\n\n\n\n          // Add form content\n\n          if(settings.serializeForm) {\n\n            settings.data = module.add.formData(settings.data);\n\n          }\n\n\n\n          // call beforesend and get any settings changes\n\n          requestSettings = module.get.settings();\n\n\n\n          // check if before send cancelled request\n\n          if(requestSettings === false) {\n\n            module.cancelled = true;\n\n            module.error(error.beforeSend);\n\n            return;\n\n          }\n\n          else {\n\n            module.cancelled = false;\n\n          }\n\n\n\n          // get url\n\n          url = module.get.templatedURL();\n\n\n\n          if(!url && !module.is.mocked()) {\n\n            module.error(error.missingURL);\n\n            return;\n\n          }\n\n\n\n          // replace variables\n\n          url = module.add.urlData( url );\n\n          // missing url parameters\n\n          if( !url && !module.is.mocked()) {\n\n            return;\n\n          }\n\n\n\n          requestSettings.url = settings.base + url;\n\n\n\n          // look for jQuery ajax parameters in settings\n\n          ajaxSettings = $.extend(true, {}, settings, {\n\n            type       : settings.method || settings.type,\n\n            data       : data,\n\n            url        : settings.base + url,\n\n            beforeSend : settings.beforeXHR,\n\n            success    : function() {},\n\n            failure    : function() {},\n\n            complete   : function() {}\n\n          });\n\n\n\n          module.debug('Querying URL', ajaxSettings.url);\n\n          module.verbose('Using AJAX settings', ajaxSettings);\n\n          if(settings.cache === 'local' && module.read.cachedResponse(url)) {\n\n            module.debug('Response returned from local cache');\n\n            module.request = module.create.request();\n\n            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);\n\n            return;\n\n          }\n\n\n\n          if( !settings.throttle ) {\n\n            module.debug('Sending request', data, ajaxSettings.method);\n\n            module.send.request();\n\n          }\n\n          else {\n\n            if(!settings.throttleFirstRequest && !module.timer) {\n\n              module.debug('Sending request', data, ajaxSettings.method);\n\n              module.send.request();\n\n              module.timer = setTimeout(function(){}, settings.throttle);\n\n            }\n\n            else {\n\n              module.debug('Throttling request', settings.throttle);\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.timer) {\n\n                  delete module.timer;\n\n                }\n\n                module.debug('Sending throttled request', data, ajaxSettings.method);\n\n                module.send.request();\n\n              }, settings.throttle);\n\n            }\n\n          }\n\n\n\n        },\n\n\n\n        should: {\n\n          removeError: function() {\n\n            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );\n\n          }\n\n        },\n\n\n\n        is: {\n\n          disabled: function() {\n\n            return ($module.filter(selector.disabled).length > 0);\n\n          },\n\n          expectingJSON: function() {\n\n            return settings.dataType === 'json' || settings.dataType === 'jsonp';\n\n          },\n\n          form: function() {\n\n            return $module.is('form') || $context.is('form');\n\n          },\n\n          mocked: function() {\n\n            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);\n\n          },\n\n          input: function() {\n\n            return $module.is('input');\n\n          },\n\n          loading: function() {\n\n            return (module.request)\n\n              ? (module.request.state() == 'pending')\n\n              : false\n\n            ;\n\n          },\n\n          abortedRequest: function(xhr) {\n\n            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\n\n              module.verbose('XHR request determined to be aborted');\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('XHR request was not aborted');\n\n              return false;\n\n            }\n\n          },\n\n          validResponse: function(response) {\n\n            if( (!module.is.expectingJSON()) || !$.isFunction(settings.successTest) ) {\n\n              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);\n\n              return true;\n\n            }\n\n            module.debug('Checking JSON returned success', settings.successTest, response);\n\n            if( settings.successTest(response) ) {\n\n              module.debug('Response passed success test', response);\n\n              return true;\n\n            }\n\n            else {\n\n              module.debug('Response failed success test', response);\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        was: {\n\n          cancelled: function() {\n\n            return (module.cancelled || false);\n\n          },\n\n          succesful: function() {\n\n            return (module.request && module.request.state() == 'resolved');\n\n          },\n\n          failure: function() {\n\n            return (module.request && module.request.state() == 'rejected');\n\n          },\n\n          complete: function() {\n\n            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );\n\n          }\n\n        },\n\n\n\n        add: {\n\n          urlData: function(url, urlData) {\n\n            var\n\n              requiredVariables,\n\n              optionalVariables\n\n            ;\n\n            if(url) {\n\n              requiredVariables = url.match(settings.regExp.required);\n\n              optionalVariables = url.match(settings.regExp.optional);\n\n              urlData           = urlData || settings.urlData;\n\n              if(requiredVariables) {\n\n                module.debug('Looking for required URL variables', requiredVariables);\n\n                $.each(requiredVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(2, templatedString.length - 3)\n\n                      : templatedString.substr(1, templatedString.length - 2),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // remove value\n\n                  if(value === undefined) {\n\n                    module.error(error.requiredParameter, variable, url);\n\n                    url = false;\n\n                    return false;\n\n                  }\n\n                  else {\n\n                    module.verbose('Found required variable', variable, value);\n\n                    value = (settings.encodeParameters)\n\n                      ? module.get.urlEncodedValue(value)\n\n                      : value\n\n                    ;\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                });\n\n              }\n\n              if(optionalVariables) {\n\n                module.debug('Looking for optional URL variables', requiredVariables);\n\n                $.each(optionalVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {/$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(3, templatedString.length - 4)\n\n                      : templatedString.substr(2, templatedString.length - 3),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // optional replacement\n\n                  if(value !== undefined) {\n\n                    module.verbose('Optional variable Found', variable, value);\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                  else {\n\n                    module.verbose('Optional variable not found', variable);\n\n                    // remove preceding slash if set\n\n                    if(url.indexOf('/' + templatedString) !== -1) {\n\n                      url = url.replace('/' + templatedString, '');\n\n                    }\n\n                    else {\n\n                      url = url.replace(templatedString, '');\n\n                    }\n\n                  }\n\n                });\n\n              }\n\n            }\n\n            return url;\n\n          },\n\n          formData: function(data) {\n\n            var\n\n              canSerialize = ($.fn.serializeObject !== undefined),\n\n              formData     = (canSerialize)\n\n                ? $form.serializeObject()\n\n                : $form.serialize(),\n\n              hasOtherData\n\n            ;\n\n            data         = data || settings.data;\n\n            hasOtherData = $.isPlainObject(data);\n\n\n\n            if(hasOtherData) {\n\n              if(canSerialize) {\n\n                module.debug('Extending existing data with form data', data, formData);\n\n                data = $.extend(true, {}, data, formData);\n\n              }\n\n              else {\n\n                module.error(error.missingSerialize);\n\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\n\n                data = formData;\n\n              }\n\n            }\n\n            else {\n\n              module.debug('Adding form data', formData);\n\n              data = formData;\n\n            }\n\n            return data;\n\n          }\n\n        },\n\n\n\n        send: {\n\n          request: function() {\n\n            module.set.loading();\n\n            module.request = module.create.request();\n\n            if( module.is.mocked() ) {\n\n              module.mockedXHR = module.create.mockedXHR();\n\n            }\n\n            else {\n\n              module.xhr = module.create.xhr();\n\n            }\n\n            settings.onRequest.call(context, module.request, module.xhr);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          trigger: function(event) {\n\n            module.query();\n\n            if(event.type == 'submit' || event.type == 'click') {\n\n              event.preventDefault();\n\n            }\n\n          },\n\n          xhr: {\n\n            always: function() {\n\n              // nothing special\n\n            },\n\n            done: function(response, textStatus, xhr) {\n\n              var\n\n                context            = this,\n\n                elapsedTime        = (new Date().getTime() - requestStartTime),\n\n                timeLeft           = (settings.loadingDuration - elapsedTime),\n\n                translatedResponse = ( $.isFunction(settings.onResponse) )\n\n                  ? module.is.expectingJSON()\n\n                    ? settings.onResponse.call(context, $.extend(true, {}, response))\n\n                    : settings.onResponse.call(context, response)\n\n                  : false\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(translatedResponse) {\n\n                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);\n\n                response = translatedResponse;\n\n              }\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.validResponse(response) ) {\n\n                  module.request.resolveWith(context, [response, xhr]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'invalid']);\n\n                }\n\n              }, timeLeft);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                context     = this,\n\n                elapsedTime = (new Date().getTime() - requestStartTime),\n\n                timeLeft    = (settings.loadingDuration - elapsedTime)\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.abortedRequest(xhr) ) {\n\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\n\n                }\n\n              }, timeLeft);\n\n            }\n\n          },\n\n          request: {\n\n            done: function(response, xhr) {\n\n              module.debug('Successful API Response', response);\n\n              if(settings.cache === 'local' && url) {\n\n                module.write.cachedResponse(url, response);\n\n                module.debug('Saving server response locally', module.cache);\n\n              }\n\n              settings.onSuccess.call(context, response, $module, xhr);\n\n            },\n\n            complete: function(firstParameter, secondParameter) {\n\n              var\n\n                xhr,\n\n                response\n\n              ;\n\n              // have to guess callback parameters based on request success\n\n              if( module.was.succesful() ) {\n\n                response = firstParameter;\n\n                xhr      = secondParameter;\n\n              }\n\n              else {\n\n                xhr      = firstParameter;\n\n                response = module.get.responseFromXHR(xhr);\n\n              }\n\n              module.remove.loading();\n\n              settings.onComplete.call(context, response, $module, xhr);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                // pull response from xhr if available\n\n                response     = module.get.responseFromXHR(xhr),\n\n                errorMessage = module.get.errorFromRequest(response, status, httpMessage)\n\n              ;\n\n              if(status == 'aborted') {\n\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\n\n                settings.onAbort.call(context, status, $module, xhr);\n\n                return true;\n\n              }\n\n              else if(status == 'invalid') {\n\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\n\n              }\n\n              else if(status == 'error') {\n\n                if(xhr !== undefined) {\n\n                  module.debug('XHR produced a server error', status, httpMessage);\n\n                  // make sure we have an error to display to console\n\n                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\n\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\n\n                  }\n\n                  settings.onError.call(context, errorMessage, $module, xhr);\n\n                }\n\n              }\n\n\n\n              if(settings.errorDuration && status !== 'aborted') {\n\n                module.debug('Adding error state');\n\n                module.set.error();\n\n                if( module.should.removeError() ) {\n\n                  setTimeout(module.remove.error, settings.errorDuration);\n\n                }\n\n              }\n\n              module.debug('API Request failed', errorMessage, xhr);\n\n              settings.onFailure.call(context, response, $module, xhr);\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n\n\n          request: function() {\n\n            // api request promise\n\n            return $.Deferred()\n\n              .always(module.event.request.complete)\n\n              .done(module.event.request.done)\n\n              .fail(module.event.request.fail)\n\n            ;\n\n          },\n\n\n\n          mockedXHR: function () {\n\n            var\n\n              // xhr does not simulate these properties of xhr but must return them\n\n              textStatus     = false,\n\n              status         = false,\n\n              httpMessage    = false,\n\n              responder      = settings.mockResponse      || settings.response,\n\n              asyncResponder = settings.mockResponseAsync || settings.responseAsync,\n\n              asyncCallback,\n\n              response,\n\n              mockedXHR\n\n            ;\n\n\n\n            mockedXHR = $.Deferred()\n\n              .always(module.event.xhr.complete)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n\n\n            if(responder) {\n\n              if( $.isFunction(responder) ) {\n\n                module.debug('Using specified synchronous callback', responder);\n\n                response = responder.call(context, requestSettings);\n\n              }\n\n              else {\n\n                module.debug('Using settings specified response', responder);\n\n                response = responder;\n\n              }\n\n              // simulating response\n\n              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n            }\n\n            else if( $.isFunction(asyncResponder) ) {\n\n              asyncCallback = function(response) {\n\n                module.debug('Async callback returned response', response);\n\n\n\n                if(response) {\n\n                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n                }\n\n                else {\n\n                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);\n\n                }\n\n              };\n\n              module.debug('Using specified async response callback', asyncResponder);\n\n              asyncResponder.call(context, requestSettings, asyncCallback);\n\n            }\n\n            return mockedXHR;\n\n          },\n\n\n\n          xhr: function() {\n\n            var\n\n              xhr\n\n            ;\n\n            // ajax request promise\n\n            xhr = $.ajax(ajaxSettings)\n\n              .always(module.event.xhr.always)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n            module.verbose('Created server request', xhr, ajaxSettings);\n\n            return xhr;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          error: function() {\n\n            module.verbose('Adding error state to element', $context);\n\n            $context.addClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Adding loading state to element', $context);\n\n            $context.addClass(className.loading);\n\n            requestStartTime = new Date().getTime();\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          error: function() {\n\n            module.verbose('Removing error state from element', $context);\n\n            $context.removeClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Removing loading state from element', $context);\n\n            $context.removeClass(className.loading);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          responseFromXHR: function(xhr) {\n\n            return $.isPlainObject(xhr)\n\n              ? (module.is.expectingJSON())\n\n                ? module.decode.json(xhr.responseText)\n\n                : xhr.responseText\n\n              : false\n\n            ;\n\n          },\n\n          errorFromRequest: function(response, status, httpMessage) {\n\n            return ($.isPlainObject(response) && response.error !== undefined)\n\n              ? response.error // use json error message\n\n              : (settings.error[status] !== undefined) // use server error message\n\n                ? settings.error[status]\n\n                : httpMessage\n\n            ;\n\n          },\n\n          request: function() {\n\n            return module.request || false;\n\n          },\n\n          xhr: function() {\n\n            return module.xhr || false;\n\n          },\n\n          settings: function() {\n\n            var\n\n              runSettings\n\n            ;\n\n            runSettings = settings.beforeSend.call(context, settings);\n\n            if(runSettings) {\n\n              if(runSettings.success !== undefined) {\n\n                module.debug('Legacy success callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.success);\n\n                runSettings.onSuccess = runSettings.success;\n\n              }\n\n              if(runSettings.failure !== undefined) {\n\n                module.debug('Legacy failure callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.failure);\n\n                runSettings.onFailure = runSettings.failure;\n\n              }\n\n              if(runSettings.complete !== undefined) {\n\n                module.debug('Legacy complete callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.complete);\n\n                runSettings.onComplete = runSettings.complete;\n\n              }\n\n            }\n\n            if(runSettings === undefined) {\n\n              module.error(error.noReturnedValue);\n\n            }\n\n            if(runSettings === false) {\n\n              return runSettings;\n\n            }\n\n            return (runSettings !== undefined)\n\n              ? $.extend(true, {}, runSettings)\n\n              : $.extend(true, {}, settings)\n\n            ;\n\n          },\n\n          urlEncodedValue: function(value) {\n\n            var\n\n              decodedValue   = window.decodeURIComponent(value),\n\n              encodedValue   = window.encodeURIComponent(value),\n\n              alreadyEncoded = (decodedValue !== value)\n\n            ;\n\n            if(alreadyEncoded) {\n\n              module.debug('URL value is already encoded, avoiding double encoding', value);\n\n              return value;\n\n            }\n\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\n\n            return encodedValue;\n\n          },\n\n          defaultData: function() {\n\n            var\n\n              data = {}\n\n            ;\n\n            if( !$.isWindow(element) ) {\n\n              if( module.is.input() ) {\n\n                data.value = $module.val();\n\n              }\n\n              else if( module.is.form() ) {\n\n\n\n              }\n\n              else {\n\n                data.text = $module.text();\n\n              }\n\n            }\n\n            return data;\n\n          },\n\n          event: function() {\n\n            if( $.isWindow(element) || settings.on == 'now' ) {\n\n              module.debug('API called without element, no events attached');\n\n              return false;\n\n            }\n\n            else if(settings.on == 'auto') {\n\n              if( $module.is('input') ) {\n\n                return (element.oninput !== undefined)\n\n                  ? 'input'\n\n                  : (element.onpropertychange !== undefined)\n\n                    ? 'propertychange'\n\n                    : 'keyup'\n\n                ;\n\n              }\n\n              else if( $module.is('form') ) {\n\n                return 'submit';\n\n              }\n\n              else {\n\n                return 'click';\n\n              }\n\n            }\n\n            else {\n\n              return settings.on;\n\n            }\n\n          },\n\n          templatedURL: function(action) {\n\n            action = action || $module.data(metadata.action) || settings.action || false;\n\n            url    = $module.data(metadata.url) || settings.url || false;\n\n            if(url) {\n\n              module.debug('Using specified url', url);\n\n              return url;\n\n            }\n\n            if(action) {\n\n              module.debug('Looking up url for action', action, settings.api);\n\n              if(settings.api[action] === undefined && !module.is.mocked()) {\n\n                module.error(error.missingAction, settings.action, settings.api);\n\n                return;\n\n              }\n\n              url = settings.api[action];\n\n            }\n\n            else if( module.is.form() ) {\n\n              url = $module.attr('action') || $context.attr('action') || false;\n\n              module.debug('No url or action specified, defaulting to form action', url);\n\n            }\n\n            return url;\n\n          }\n\n        },\n\n\n\n        abort: function() {\n\n          var\n\n            xhr = module.get.xhr()\n\n          ;\n\n          if( xhr && xhr.state() !== 'resolved') {\n\n            module.debug('Cancelling API request');\n\n            xhr.abort();\n\n          }\n\n        },\n\n\n\n        // reset state\n\n        reset: function() {\n\n          module.remove.error();\n\n          module.remove.loading();\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                //'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/src/definitions/behaviors/api.js",
          "match_lines": [
            43,
            1004
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.api.settings, parameters)\n\n          : $.extend({}, $.fn.api.settings),\n\n\n\n        // internal aliases\n\n        namespace       = settings.namespace,\n\n        metadata        = settings.metadata,\n\n        selector        = settings.selector,\n\n        error           = settings.error,\n\n        className       = settings.className,\n\n\n\n        // define namespaces for modules\n\n        eventNamespace  = '.' + namespace,\n\n        moduleNamespace = 'module-' + namespace,\n\n\n\n        // element that creates request\n\n        $module         = $(this),\n\n        $form           = $module.closest(selector.form),\n\n\n\n        // context used for state\n\n        $context        = (settings.stateContext)\n\n          ? $(settings.stateContext)\n\n          : $module,\n\n\n\n        // request details\n\n        ajaxSettings,\n\n        requestSettings,\n\n        url,\n\n        data,\n\n        requestStartTime,\n\n\n\n        // standard module\n\n        element         = this,\n\n        context         = $context[0],\n\n        instance        = $module.data(moduleNamespace),\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          if(!methodInvoked) {\n\n            module.bind.events();\n\n          }\n\n          module.instantiate();\n\n        },\n\n\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, instance)\n\n          ;\n\n        },\n\n\n\n        destroy: function() {\n\n          module.verbose('Destroying previous module for', element);\n\n          $module\n\n            .removeData(moduleNamespace)\n\n            .off(eventNamespace)\n\n          ;\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            var\n\n              triggerEvent = module.get.event()\n\n            ;\n\n            if( triggerEvent ) {\n\n              module.verbose('Attaching API events to element', triggerEvent);\n\n              $module\n\n                .on(triggerEvent + eventNamespace, module.event.trigger)\n\n              ;\n\n            }\n\n            else if(settings.on == 'now') {\n\n              module.debug('Querying API endpoint immediately');\n\n              module.query();\n\n            }\n\n          }\n\n        },\n\n\n\n        decode: {\n\n          json: function(response) {\n\n            if(response !== undefined && typeof response == 'string') {\n\n              try {\n\n               response = JSON.parse(response);\n\n              }\n\n              catch(e) {\n\n                // isnt json string\n\n              }\n\n            }\n\n            return response;\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cachedResponse: function(url) {\n\n            var\n\n              response\n\n            ;\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            response = sessionStorage.getItem(url);\n\n            module.debug('Using cached response', url, response);\n\n            response = module.decode.json(response);\n\n            return response;\n\n          }\n\n        },\n\n        write: {\n\n          cachedResponse: function(url, response) {\n\n            if(response && response === '') {\n\n              module.debug('Response empty, not caching', response);\n\n              return;\n\n            }\n\n            if(window.Storage === undefined) {\n\n              module.error(error.noStorage);\n\n              return;\n\n            }\n\n            if( $.isPlainObject(response) ) {\n\n              response = JSON.stringify(response);\n\n            }\n\n            sessionStorage.setItem(url, response);\n\n            module.verbose('Storing cached response for url', url, response);\n\n          }\n\n        },\n\n\n\n        query: function() {\n\n\n\n          if(module.is.disabled()) {\n\n            module.debug('Element is disabled API request aborted');\n\n            return;\n\n          }\n\n\n\n          if(module.is.loading()) {\n\n            if(settings.interruptRequests) {\n\n              module.debug('Interrupting previous request');\n\n              module.abort();\n\n            }\n\n            else {\n\n              module.debug('Cancelling request, previous request is still pending');\n\n              return;\n\n            }\n\n          }\n\n\n\n          // pass element metadata to url (value, text)\n\n          if(settings.defaultData) {\n\n            $.extend(true, settings.urlData, module.get.defaultData());\n\n          }\n\n\n\n          // Add form content\n\n          if(settings.serializeForm) {\n\n            settings.data = module.add.formData(settings.data);\n\n          }\n\n\n\n          // call beforesend and get any settings changes\n\n          requestSettings = module.get.settings();\n\n\n\n          // check if before send cancelled request\n\n          if(requestSettings === false) {\n\n            module.cancelled = true;\n\n            module.error(error.beforeSend);\n\n            return;\n\n          }\n\n          else {\n\n            module.cancelled = false;\n\n          }\n\n\n\n          // get url\n\n          url = module.get.templatedURL();\n\n\n\n          if(!url && !module.is.mocked()) {\n\n            module.error(error.missingURL);\n\n            return;\n\n          }\n\n\n\n          // replace variables\n\n          url = module.add.urlData( url );\n\n          // missing url parameters\n\n          if( !url && !module.is.mocked()) {\n\n            return;\n\n          }\n\n\n\n          requestSettings.url = settings.base + url;\n\n\n\n          // look for jQuery ajax parameters in settings\n\n          ajaxSettings = $.extend(true, {}, settings, {\n\n            type       : settings.method || settings.type,\n\n            data       : data,\n\n            url        : settings.base + url,\n\n            beforeSend : settings.beforeXHR,\n\n            success    : function() {},\n\n            failure    : function() {},\n\n            complete   : function() {}\n\n          });\n\n\n\n          module.debug('Querying URL', ajaxSettings.url);\n\n          module.verbose('Using AJAX settings', ajaxSettings);\n\n          if(settings.cache === 'local' && module.read.cachedResponse(url)) {\n\n            module.debug('Response returned from local cache');\n\n            module.request = module.create.request();\n\n            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);\n\n            return;\n\n          }\n\n\n\n          if( !settings.throttle ) {\n\n            module.debug('Sending request', data, ajaxSettings.method);\n\n            module.send.request();\n\n          }\n\n          else {\n\n            if(!settings.throttleFirstRequest && !module.timer) {\n\n              module.debug('Sending request', data, ajaxSettings.method);\n\n              module.send.request();\n\n              module.timer = setTimeout(function(){}, settings.throttle);\n\n            }\n\n            else {\n\n              module.debug('Throttling request', settings.throttle);\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.timer) {\n\n                  delete module.timer;\n\n                }\n\n                module.debug('Sending throttled request', data, ajaxSettings.method);\n\n                module.send.request();\n\n              }, settings.throttle);\n\n            }\n\n          }\n\n\n\n        },\n\n\n\n        should: {\n\n          removeError: function() {\n\n            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );\n\n          }\n\n        },\n\n\n\n        is: {\n\n          disabled: function() {\n\n            return ($module.filter(selector.disabled).length > 0);\n\n          },\n\n          expectingJSON: function() {\n\n            return settings.dataType === 'json' || settings.dataType === 'jsonp';\n\n          },\n\n          form: function() {\n\n            return $module.is('form') || $context.is('form');\n\n          },\n\n          mocked: function() {\n\n            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);\n\n          },\n\n          input: function() {\n\n            return $module.is('input');\n\n          },\n\n          loading: function() {\n\n            return (module.request)\n\n              ? (module.request.state() == 'pending')\n\n              : false\n\n            ;\n\n          },\n\n          abortedRequest: function(xhr) {\n\n            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\n\n              module.verbose('XHR request determined to be aborted');\n\n              return true;\n\n            }\n\n            else {\n\n              module.verbose('XHR request was not aborted');\n\n              return false;\n\n            }\n\n          },\n\n          validResponse: function(response) {\n\n            if( (!module.is.expectingJSON()) || !$.isFunction(settings.successTest) ) {\n\n              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);\n\n              return true;\n\n            }\n\n            module.debug('Checking JSON returned success', settings.successTest, response);\n\n            if( settings.successTest(response) ) {\n\n              module.debug('Response passed success test', response);\n\n              return true;\n\n            }\n\n            else {\n\n              module.debug('Response failed success test', response);\n\n              return false;\n\n            }\n\n          }\n\n        },\n\n\n\n        was: {\n\n          cancelled: function() {\n\n            return (module.cancelled || false);\n\n          },\n\n          succesful: function() {\n\n            return (module.request && module.request.state() == 'resolved');\n\n          },\n\n          failure: function() {\n\n            return (module.request && module.request.state() == 'rejected');\n\n          },\n\n          complete: function() {\n\n            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );\n\n          }\n\n        },\n\n\n\n        add: {\n\n          urlData: function(url, urlData) {\n\n            var\n\n              requiredVariables,\n\n              optionalVariables\n\n            ;\n\n            if(url) {\n\n              requiredVariables = url.match(settings.regExp.required);\n\n              optionalVariables = url.match(settings.regExp.optional);\n\n              urlData           = urlData || settings.urlData;\n\n              if(requiredVariables) {\n\n                module.debug('Looking for required URL variables', requiredVariables);\n\n                $.each(requiredVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(2, templatedString.length - 3)\n\n                      : templatedString.substr(1, templatedString.length - 2),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // remove value\n\n                  if(value === undefined) {\n\n                    module.error(error.requiredParameter, variable, url);\n\n                    url = false;\n\n                    return false;\n\n                  }\n\n                  else {\n\n                    module.verbose('Found required variable', variable, value);\n\n                    value = (settings.encodeParameters)\n\n                      ? module.get.urlEncodedValue(value)\n\n                      : value\n\n                    ;\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                });\n\n              }\n\n              if(optionalVariables) {\n\n                module.debug('Looking for optional URL variables', requiredVariables);\n\n                $.each(optionalVariables, function(index, templatedString) {\n\n                  var\n\n                    // allow legacy {/$var} style\n\n                    variable = (templatedString.indexOf('$') !== -1)\n\n                      ? templatedString.substr(3, templatedString.length - 4)\n\n                      : templatedString.substr(2, templatedString.length - 3),\n\n                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)\n\n                      ? urlData[variable]\n\n                      : ($module.data(variable) !== undefined)\n\n                        ? $module.data(variable)\n\n                        : ($context.data(variable) !== undefined)\n\n                          ? $context.data(variable)\n\n                          : urlData[variable]\n\n                  ;\n\n                  // optional replacement\n\n                  if(value !== undefined) {\n\n                    module.verbose('Optional variable Found', variable, value);\n\n                    url = url.replace(templatedString, value);\n\n                  }\n\n                  else {\n\n                    module.verbose('Optional variable not found', variable);\n\n                    // remove preceding slash if set\n\n                    if(url.indexOf('/' + templatedString) !== -1) {\n\n                      url = url.replace('/' + templatedString, '');\n\n                    }\n\n                    else {\n\n                      url = url.replace(templatedString, '');\n\n                    }\n\n                  }\n\n                });\n\n              }\n\n            }\n\n            return url;\n\n          },\n\n          formData: function(data) {\n\n            var\n\n              canSerialize = ($.fn.serializeObject !== undefined),\n\n              formData     = (canSerialize)\n\n                ? $form.serializeObject()\n\n                : $form.serialize(),\n\n              hasOtherData\n\n            ;\n\n            data         = data || settings.data;\n\n            hasOtherData = $.isPlainObject(data);\n\n\n\n            if(hasOtherData) {\n\n              if(canSerialize) {\n\n                module.debug('Extending existing data with form data', data, formData);\n\n                data = $.extend(true, {}, data, formData);\n\n              }\n\n              else {\n\n                module.error(error.missingSerialize);\n\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\n\n                data = formData;\n\n              }\n\n            }\n\n            else {\n\n              module.debug('Adding form data', formData);\n\n              data = formData;\n\n            }\n\n            return data;\n\n          }\n\n        },\n\n\n\n        send: {\n\n          request: function() {\n\n            module.set.loading();\n\n            module.request = module.create.request();\n\n            if( module.is.mocked() ) {\n\n              module.mockedXHR = module.create.mockedXHR();\n\n            }\n\n            else {\n\n              module.xhr = module.create.xhr();\n\n            }\n\n            settings.onRequest.call(context, module.request, module.xhr);\n\n          }\n\n        },\n\n\n\n        event: {\n\n          trigger: function(event) {\n\n            module.query();\n\n            if(event.type == 'submit' || event.type == 'click') {\n\n              event.preventDefault();\n\n            }\n\n          },\n\n          xhr: {\n\n            always: function() {\n\n              // nothing special\n\n            },\n\n            done: function(response, textStatus, xhr) {\n\n              var\n\n                context            = this,\n\n                elapsedTime        = (new Date().getTime() - requestStartTime),\n\n                timeLeft           = (settings.loadingDuration - elapsedTime),\n\n                translatedResponse = ( $.isFunction(settings.onResponse) )\n\n                  ? module.is.expectingJSON()\n\n                    ? settings.onResponse.call(context, $.extend(true, {}, response))\n\n                    : settings.onResponse.call(context, response)\n\n                  : false\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(translatedResponse) {\n\n                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);\n\n                response = translatedResponse;\n\n              }\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.validResponse(response) ) {\n\n                  module.request.resolveWith(context, [response, xhr]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'invalid']);\n\n                }\n\n              }, timeLeft);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                context     = this,\n\n                elapsedTime = (new Date().getTime() - requestStartTime),\n\n                timeLeft    = (settings.loadingDuration - elapsedTime)\n\n              ;\n\n              timeLeft = (timeLeft > 0)\n\n                ? timeLeft\n\n                : 0\n\n              ;\n\n              if(timeLeft > 0) {\n\n                module.debug('Response completed early delaying state change by', timeLeft);\n\n              }\n\n              setTimeout(function() {\n\n                if( module.is.abortedRequest(xhr) ) {\n\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\n\n                }\n\n                else {\n\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\n\n                }\n\n              }, timeLeft);\n\n            }\n\n          },\n\n          request: {\n\n            done: function(response, xhr) {\n\n              module.debug('Successful API Response', response);\n\n              if(settings.cache === 'local' && url) {\n\n                module.write.cachedResponse(url, response);\n\n                module.debug('Saving server response locally', module.cache);\n\n              }\n\n              settings.onSuccess.call(context, response, $module, xhr);\n\n            },\n\n            complete: function(firstParameter, secondParameter) {\n\n              var\n\n                xhr,\n\n                response\n\n              ;\n\n              // have to guess callback parameters based on request success\n\n              if( module.was.succesful() ) {\n\n                response = firstParameter;\n\n                xhr      = secondParameter;\n\n              }\n\n              else {\n\n                xhr      = firstParameter;\n\n                response = module.get.responseFromXHR(xhr);\n\n              }\n\n              module.remove.loading();\n\n              settings.onComplete.call(context, response, $module, xhr);\n\n            },\n\n            fail: function(xhr, status, httpMessage) {\n\n              var\n\n                // pull response from xhr if available\n\n                response     = module.get.responseFromXHR(xhr),\n\n                errorMessage = module.get.errorFromRequest(response, status, httpMessage)\n\n              ;\n\n              if(status == 'aborted') {\n\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\n\n                settings.onAbort.call(context, status, $module, xhr);\n\n                return true;\n\n              }\n\n              else if(status == 'invalid') {\n\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\n\n              }\n\n              else if(status == 'error') {\n\n                if(xhr !== undefined) {\n\n                  module.debug('XHR produced a server error', status, httpMessage);\n\n                  // make sure we have an error to display to console\n\n                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\n\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\n\n                  }\n\n                  settings.onError.call(context, errorMessage, $module, xhr);\n\n                }\n\n              }\n\n\n\n              if(settings.errorDuration && status !== 'aborted') {\n\n                module.debug('Adding error state');\n\n                module.set.error();\n\n                if( module.should.removeError() ) {\n\n                  setTimeout(module.remove.error, settings.errorDuration);\n\n                }\n\n              }\n\n              module.debug('API Request failed', errorMessage, xhr);\n\n              settings.onFailure.call(context, response, $module, xhr);\n\n            }\n\n          }\n\n        },\n\n\n\n        create: {\n\n\n\n          request: function() {\n\n            // api request promise\n\n            return $.Deferred()\n\n              .always(module.event.request.complete)\n\n              .done(module.event.request.done)\n\n              .fail(module.event.request.fail)\n\n            ;\n\n          },\n\n\n\n          mockedXHR: function () {\n\n            var\n\n              // xhr does not simulate these properties of xhr but must return them\n\n              textStatus     = false,\n\n              status         = false,\n\n              httpMessage    = false,\n\n              responder      = settings.mockResponse      || settings.response,\n\n              asyncResponder = settings.mockResponseAsync || settings.responseAsync,\n\n              asyncCallback,\n\n              response,\n\n              mockedXHR\n\n            ;\n\n\n\n            mockedXHR = $.Deferred()\n\n              .always(module.event.xhr.complete)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n\n\n            if(responder) {\n\n              if( $.isFunction(responder) ) {\n\n                module.debug('Using specified synchronous callback', responder);\n\n                response = responder.call(context, requestSettings);\n\n              }\n\n              else {\n\n                module.debug('Using settings specified response', responder);\n\n                response = responder;\n\n              }\n\n              // simulating response\n\n              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n            }\n\n            else if( $.isFunction(asyncResponder) ) {\n\n              asyncCallback = function(response) {\n\n                module.debug('Async callback returned response', response);\n\n\n\n                if(response) {\n\n                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);\n\n                }\n\n                else {\n\n                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);\n\n                }\n\n              };\n\n              module.debug('Using specified async response callback', asyncResponder);\n\n              asyncResponder.call(context, requestSettings, asyncCallback);\n\n            }\n\n            return mockedXHR;\n\n          },\n\n\n\n          xhr: function() {\n\n            var\n\n              xhr\n\n            ;\n\n            // ajax request promise\n\n            xhr = $.ajax(ajaxSettings)\n\n              .always(module.event.xhr.always)\n\n              .done(module.event.xhr.done)\n\n              .fail(module.event.xhr.fail)\n\n            ;\n\n            module.verbose('Created server request', xhr, ajaxSettings);\n\n            return xhr;\n\n          }\n\n        },\n\n\n\n        set: {\n\n          error: function() {\n\n            module.verbose('Adding error state to element', $context);\n\n            $context.addClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Adding loading state to element', $context);\n\n            $context.addClass(className.loading);\n\n            requestStartTime = new Date().getTime();\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          error: function() {\n\n            module.verbose('Removing error state from element', $context);\n\n            $context.removeClass(className.error);\n\n          },\n\n          loading: function() {\n\n            module.verbose('Removing loading state from element', $context);\n\n            $context.removeClass(className.loading);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          responseFromXHR: function(xhr) {\n\n            return $.isPlainObject(xhr)\n\n              ? (module.is.expectingJSON())\n\n                ? module.decode.json(xhr.responseText)\n\n                : xhr.responseText\n\n              : false\n\n            ;\n\n          },\n\n          errorFromRequest: function(response, status, httpMessage) {\n\n            return ($.isPlainObject(response) && response.error !== undefined)\n\n              ? response.error // use json error message\n\n              : (settings.error[status] !== undefined) // use server error message\n\n                ? settings.error[status]\n\n                : httpMessage\n\n            ;\n\n          },\n\n          request: function() {\n\n            return module.request || false;\n\n          },\n\n          xhr: function() {\n\n            return module.xhr || false;\n\n          },\n\n          settings: function() {\n\n            var\n\n              runSettings\n\n            ;\n\n            runSettings = settings.beforeSend.call(context, settings);\n\n            if(runSettings) {\n\n              if(runSettings.success !== undefined) {\n\n                module.debug('Legacy success callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.success);\n\n                runSettings.onSuccess = runSettings.success;\n\n              }\n\n              if(runSettings.failure !== undefined) {\n\n                module.debug('Legacy failure callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.failure);\n\n                runSettings.onFailure = runSettings.failure;\n\n              }\n\n              if(runSettings.complete !== undefined) {\n\n                module.debug('Legacy complete callback detected', runSettings);\n\n                module.error(error.legacyParameters, runSettings.complete);\n\n                runSettings.onComplete = runSettings.complete;\n\n              }\n\n            }\n\n            if(runSettings === undefined) {\n\n              module.error(error.noReturnedValue);\n\n            }\n\n            if(runSettings === false) {\n\n              return runSettings;\n\n            }\n\n            return (runSettings !== undefined)\n\n              ? $.extend(true, {}, runSettings)\n\n              : $.extend(true, {}, settings)\n\n            ;\n\n          },\n\n          urlEncodedValue: function(value) {\n\n            var\n\n              decodedValue   = window.decodeURIComponent(value),\n\n              encodedValue   = window.encodeURIComponent(value),\n\n              alreadyEncoded = (decodedValue !== value)\n\n            ;\n\n            if(alreadyEncoded) {\n\n              module.debug('URL value is already encoded, avoiding double encoding', value);\n\n              return value;\n\n            }\n\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\n\n            return encodedValue;\n\n          },\n\n          defaultData: function() {\n\n            var\n\n              data = {}\n\n            ;\n\n            if( !$.isWindow(element) ) {\n\n              if( module.is.input() ) {\n\n                data.value = $module.val();\n\n              }\n\n              else if( module.is.form() ) {\n\n\n\n              }\n\n              else {\n\n                data.text = $module.text();\n\n              }\n\n            }\n\n            return data;\n\n          },\n\n          event: function() {\n\n            if( $.isWindow(element) || settings.on == 'now' ) {\n\n              module.debug('API called without element, no events attached');\n\n              return false;\n\n            }\n\n            else if(settings.on == 'auto') {\n\n              if( $module.is('input') ) {\n\n                return (element.oninput !== undefined)\n\n                  ? 'input'\n\n                  : (element.onpropertychange !== undefined)\n\n                    ? 'propertychange'\n\n                    : 'keyup'\n\n                ;\n\n              }\n\n              else if( $module.is('form') ) {\n\n                return 'submit';\n\n              }\n\n              else {\n\n                return 'click';\n\n              }\n\n            }\n\n            else {\n\n              return settings.on;\n\n            }\n\n          },\n\n          templatedURL: function(action) {\n\n            action = action || $module.data(metadata.action) || settings.action || false;\n\n            url    = $module.data(metadata.url) || settings.url || false;\n\n            if(url) {\n\n              module.debug('Using specified url', url);\n\n              return url;\n\n            }\n\n            if(action) {\n\n              module.debug('Looking up url for action', action, settings.api);\n\n              if(settings.api[action] === undefined && !module.is.mocked()) {\n\n                module.error(error.missingAction, settings.action, settings.api);\n\n                return;\n\n              }\n\n              url = settings.api[action];\n\n            }\n\n            else if( module.is.form() ) {\n\n              url = $module.attr('action') || $context.attr('action') || false;\n\n              module.debug('No url or action specified, defaulting to form action', url);\n\n            }\n\n            return url;\n\n          }\n\n        },\n\n\n\n        abort: function() {\n\n          var\n\n            xhr = module.get.xhr()\n\n          ;\n\n          if( xhr && xhr.state() !== 'resolved') {\n\n            module.debug('Cancelling API request');\n\n            xhr.abort();\n\n          }\n\n        },\n\n\n\n        // reset state\n\n        reset: function() {\n\n          module.remove.error();\n\n          module.remove.loading();\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          module.debug('Changing setting', name, value);\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            if($.isPlainObject(settings[name])) {\n\n              $.extend(true, settings[name], value);\n\n            }\n\n            else {\n\n              settings[name] = value;\n\n            }\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                //'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                module.error(error.method, query);\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if ( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        }
      ],
      "metadata": {
        "cwe": "CWE-400: Uncontrolled Resource Consumption",
        "description": "User controlled data in RegExp() can make the application vulnerable to layer 7 DoS.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
