<report_mosca>
 <Path>/src/dist/server/export.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -      var config, nextDir, buildId, buildStats, outDir, exportPathMap, exportPaths, renderOpts, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, path, _exportPathMap$path, page, _exportPathMap$path$q, query, req, res, htmlFilename, baseDir, htmlFilepath, html, log;

 Line: 195 -              _exportPathMap$path = exportPathMap[path], page = _exportPathMap$path.page, _exportPathMap$path$q = _exportPathMap$path.query, query = _exportPathMap$path$q === undefined ? {} : _exportPathMap$path$q;

 Line: 214 -              return (0, _render.renderToHTML)(req, res, page, query, renderOpts);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/server/build/loaders/emit-file-loader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -    var query = _loaderUtils2.default.getOptions(this);

 Line: 20 -        query.validateFileName(resourcePath);

 Line: 27 -    var name = query.name || '[hash].[ext]';

 Line: 28 -    var context = query.context || this.options.context;

 Line: 29 -    var regExp = query.regExp;

 Line: 31 -    var interpolateName = query.interpolateName || function (name) {

 Line: 41 -      var transformed = query.transform({ content: content, sourceMap: sourceMap, interpolatedName: interpolatedName });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/server/render.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 36 -    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(req, res, pathname, query, opts) {

 Line: 43 -              return renderToHTML(req, res, pathname, query, opts);

 Line: 64 -    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(err, req, res, pathname, query, opts) {

 Line: 71 -              return renderErrorToHTML(err, req, res, query, opts);

 Line: 92 -    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(req, res, pathname, query) {

 Line: 137 -              ctx = { err: err, req: req, res: res, pathname: pathname, query: query, asPath: asPath };

 Line: 160 -                  router: new _router.Router(pathname, query, asPath)

 Line: 211 -                  query: query,

 Line: 376 -  function renderToHTML(req, res, pathname, query, opts) {

 Line: 377 -    return doRender(req, res, pathname, query, opts);

 Line: 380 -  function renderErrorToHTML(err, req, res, pathname, query) {

 Line: 383 -    return doRender(req, res, pathname, query, (0, _extends3.default)({}, opts, { err: err, page: '_error' }));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/server/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 168 -        // Parse the querystring ourselves if the user doesn't handle querystring parsing

 Line: 791 -              var pathname, query;

 Line: 796 -                      pathname = parsedUrl.pathname, query = parsedUrl.query;

 Line: 798 -                      return _this3.render(req, res, pathname, query);

 Line: 946 -        var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(req, res, pathname, query, parsedUrl) {

 Line: 973 -                  return this.renderToHTML(req, res, pathname, query);

 Line: 1007 -        var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20(req, res, pathname, query) {

 Line: 1030 -                  return _context20.abrupt('return', this.renderErrorToHTML(compilationErr, req, res, pathname, query));

 Line: 1035 -                  return (0, _render.renderToHTML)(req, res, pathname, query, this.renderOpts);

 Line: 1051 -                  return _context20.abrupt('return', this.renderErrorToHTML(null, req, res, pathname, query));

 Line: 1056 -                  return _context20.abrupt('return', this.renderErrorToHTML(_context20.t0, req, res, pathname, query));

 Line: 1075 -        var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(err, req, res, pathname, query) {

 Line: 1082 -                  return this.renderErrorToHTML(err, req, res, pathname, query);

 Line: 1105 -        var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(err, req, res, pathname, query) {

 Line: 1128 -                  return _context22.abrupt('return', (0, _render.renderErrorToHTML)(compilationErr, req, res, pathname, query, this.renderOpts));

 Line: 1133 -                  return (0, _render.renderErrorToHTML)(err, req, res, pathname, query, this.renderOpts);

 Line: 1149 -                  return _context22.abrupt('return', (0, _render.renderErrorToHTML)(_context22.t0, req, res, pathname, query, this.renderOpts));

 Line: 1173 -          var pathname, query;

 Line: 1178 -                  pathname = parsedUrl.pathname, query = parsedUrl.query;

 Line: 1181 -                  return _context23.abrupt('return', this.renderError(null, req, res, pathname, query));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/server/on-demand-entry-handler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 154 -            setTimeout(function () {

 Line: 183 -    var disposeHandler = setInterval(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/server/on-demand-entry-handler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 293 -                query = _parse.query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/client/on-demand-entries-client.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 113 -                  pingerTimeout = setTimeout(resolve, 5000);

 Line: 148 -    setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/client/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 107 -              initProps = { err: error, pathname: pathname, query: query, asPath: asPath };

 Line: 157 -              return (0, _utils.loadGetInitialProps)(Component, { err: err, pathname: _pathname, query: _query, asPath: _asPath });

 Line: 241 -      query = _window$__NEXT_DATA__.query,

 Line: 385 -            exports.router = router = (0, _router2.createRouter)(pathname, query, asPath, {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/lib/app.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 143 -        // If we call scrollIntoView() in here without a setTimeout

 Line: 145 -        setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/lib/app.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 189 -      query: router.query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/lib/router/router.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -    function Router(pathname, query, as) {

 Line: 89 -      this.query = query;

 Line: 98 -        this.changeState('replaceState', (0, _url2.format)({ pathname: pathname, query: query }), (0, _utils.getURL)());

 Line: 108 -          var pathname, query, _e$state, url, as, options;

 Line: 128 -                  pathname = this.pathname, query = this.query;

 Line: 130 -                  this.changeState('replaceState', (0, _url2.format)({ pathname: pathname, query: query }), (0, _utils.getURL)());

 Line: 171 -          var pathname, query, url, routeInfo, error;

 Line: 187 -                  pathname = this.pathname, query = this.query;

 Line: 193 -                  return this.getRouteInfo(route, pathname, query, url);

 Line: 261 -          var url, as, _parse, pathname, query, route, _options$shallow, shallow, routeInfo, _routeInfo, error, hash;

 Line: 294 -                  _parse = (0, _url2.parse)(url, true), pathname = _parse.pathname, query = _parse.query;

 Line: 301 -                  if (!this.urlIsNew(pathname, query)) {

 Line: 327 -                  return this.getRouteInfo(route, pathname, query, as);

 Line: 349 -                  this.set(route, pathname, query, as, (0, _extends3.default)({}, routeInfo, { hash: hash }));

 Line: 392 -        var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(route, pathname, query, as) {

 Line: 429 -                  ctx = { pathname: pathname, query: query, asPath: as };

 Line: 487 -                  _ctx = { err: _context4.t1, pathname: pathname, query: query };

 Line: 516 -      value: function set(route, pathname, query, as, data) {

 Line: 519 -        this.query = query;

 Line: 565 -      value: function urlIsNew(pathname, query) {

</Result>
</report_mosca>

