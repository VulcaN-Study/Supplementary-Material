/src/src/commands/registration/rnto.js-13-
/src/src/commands/registration/rnto.js:14:    return Promise.try(() => this.fs.rename(from, to))
/src/src/commands/registration/rnto.js-15-    .then(() => {
##############################################
/src/src/commands/registration/site/index.js-9-    const rawSubCommand = _.get(command, 'arg', '');
/src/src/commands/registration/site/index.js:10:    const subCommand = this.commands.parse(rawSubCommand);
/src/src/commands/registration/site/index.js-11-    const subLog = log.child({subverb: subCommand.directive});
##############################################
/src/src/commands/index.js-37-  handle(command) {
/src/src/commands/index.js:38:    if (typeof command === 'string') command = this.parse(command);
/src/src/commands/index.js-39-
##############################################
/src/src/helpers/find-port.js-20-  return () => new Promise((resolve, reject) => {
/src/src/helpers/find-port.js:21:    const portCheckServer = net.createServer();
/src/src/helpers/find-port.js-22-    portCheckServer.maxConnections = 0;
##############################################
/src/src/index.js-36-    this.log = this.options.log;
/src/src/index.js:37:    this.url = nodeUrl.parse(this.options.url);
/src/src/index.js-38-    this.getNextPasvPort = getNextPortFactory(
##############################################
/src/src/index.js-60-
/src/src/index.js:61:    this.server = (this.isTLS ? tls : net).createServer(serverOptions, serverConnectionHandler);
/src/src/index.js-62-    this.server.on('error', (err) => this.log.error(err, '[Event] error'));
##############################################
/src/src/connector/active.js-31-      this.dataSocket.on('error', (err) => this.server && this.server.emit('client-error', {connection: this.connection, context: 'dataSocket', error: err}));
/src/src/connector/active.js:32:      this.dataSocket.connect({host, port, family}, () => {
/src/src/connector/active.js-33-        this.dataSocket.pause();
##############################################
/src/src/connector/passive.js-62-      const serverOptions = Object.assign({}, this.connection.secure ? this.server.options.tls : {}, {pauseOnConnect: true});
/src/src/connector/passive.js:63:      this.dataServer = (this.connection.secure ? tls : net).createServer(serverOptions, connectionHandler);
/src/src/connector/passive.js-64-      this.dataServer.maxConnections = 1;
##############################################
/src/src/fs.js-82-    const stream = createWriteStream(fsPath, {flags: !append ? 'w+' : 'a+', start});
/src/src/fs.js:83:    stream.once('error', () => fsAsync.unlink(fsPath));
/src/src/fs.js-84-    stream.once('close', () => stream.end());
##############################################
/src/src/fs.js-110-      if (stat.isDirectory()) return fsAsync.rmdir(fsPath);
/src/src/fs.js:111:      else return fsAsync.unlink(fsPath);
/src/src/fs.js-112-    });
##############################################
/src/src/fs.js-123-    const {fsPath: toPath} = this._resolvePath(to);
/src/src/fs.js:124:    return fsAsync.rename(fromPath, toPath);
/src/src/fs.js-125-  }
##############################################
/src/bin/index.js-56-    })
/src/bin/index.js:57:    .parse();
/src/bin/index.js-58-}
