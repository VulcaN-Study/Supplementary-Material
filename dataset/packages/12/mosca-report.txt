<report_mosca>
 <Path>/src/examples/cache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 31 -          setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/methods.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 14 -      setTimeout(function () {

 Line: 32 -              setTimeout(function () {

 Line: 38 -                      setTimeout(function () {

 Line: 44 -                              setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/prerequisites.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 24 -      setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/tails.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 13 -      setTimeout(function () {

 Line: 20 -      setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/validation.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 28 -          { method: 'GET', path: '/', config: { handler: internals.get, validate: { query: { username: Joi.string() } } } },

 Line: 29 -          { method: 'GET', path: '/admin', config: { handler: internals.get, validate: { query: Joi.object({ username: Joi.string().required(), password: Joi.string() }).and('username', 'password') } } },

 Line: 30 -          { method: 'GET', path: '/users', config: { handler: internals.get, validate: { query: { email: Joi.string().email().required().min(18) } } } },

 Line: 31 -          { method: 'GET', path: '/config', config: { handler: internals.get, validate: { query: { choices: Joi.array().required() } } } },

 Line: 32 -          { method: 'GET', path: '/test', config: { handler: internals.get, validate: { query: { num: Joi.number().min(0) } } } },

 Line: 33 -          { method: 'GET', path: '/test2', config: { handler: internals.get, validate: { query: Joi.object({ p1: Joi.string().required() }).rename('p1', 'itemId') } } },

 Line: 34 -          { method: 'GET', path: '/simple', config: { handler: internals.get, validate: { query: { input: Joi.string().min(3) } } } }

 Line: 43 -      server.route({ method: 'POST', path: '/users/{id}', config: { handler: internals.payload, validate: { query: {}, payload: schema } } });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/server.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -      { method: 'GET', path: '/products', config: { handler: getProducts, validate: { query: { name: Joi.string() } } } },

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/serverSentEvents.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 30 -          var interval = setInterval(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schema.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 223 -          query: Joi.alternatives(Joi.object(), Joi.func()).allow(null, false, true),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/request.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 120 -          req.socket.setTimeout(server.settings.timeout.socket || 0);     // Value can be false or positive

 Line: 306 -              self._serverTimeoutId = setTimeout(timeoutReply, serverTimeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/request.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 174 -      this.path = this.url.pathname || '';                // pathname excludes query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/defaults.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 126 -          'DELETE',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/views.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 380 -                  query: request.query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/validation.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 100 -              query: request.query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 355 -              self._eventLoopTimer = setTimeout(measure, self.settings.load.sampleInterval);

 Line: 422 -      var timeoutId = setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 202 -                          this.settings.security._xframe = 'ALLOW-FROM ' + this.settings.security.xframe.source;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/payload.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 172 -              var iv = setInterval(function () {

 Line: 183 -                  setTimeout(function () {

 Line: 193 -              setTimeout(function () {

 Line: 235 -              setTimeout(function () {

 Line: 364 -                  var iv = setInterval(function () {

 Line: 379 -                  setTimeout(function () {

 Line: 1133 -                  setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/request.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 57 -              setTimeout(t2, 10);

 Line: 284 -              setTimeout(function () {

 Line: 587 -              setTimeout(function () {

 Line: 590 -                  setTimeout(done, 10);

 Line: 617 -              setTimeout(function () {

 Line: 653 -              setTimeout(function () {

 Line: 688 -              setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/request.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 506 -      it('parses nested query string', function (done) {

 Line: 765 -          it('sets url, path, and query', function (done) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/pack.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 938 -                          setTimeout(function () {

 Line: 1355 -              setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/response.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 2044 -              setTimeout(function () {

 Line: 2317 -                          setTimeout(function () {

 Line: 2358 -                      setTimeout(function () {

 Line: 2412 -                          setTimeout(function () {

 Line: 2425 -                  setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/response.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 125 -                  expect(res.headers['access-control-allow-methods']).to.equal('GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS');

 Line: 186 -                  expect(res.headers['access-control-allow-methods']).to.equal('GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS');

 Line: 625 -                  expect(res.headers['x-frame-options']).to.equal('ALLOW-FROM http://example.com');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/router.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 246 -          server.route({ method: ['HEAD', 'GET', 'PUT', 'POST', 'DELETE'], path: '/', handler: function (request, reply) { reply(request.route.method); } });

 Line: 266 -                          server.inject({ method: 'DELETE', url: '/' }, function (res) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/proxy.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 915 -          upstream.route({ method: 'GET', path: '/timeout1', handler: function (request, reply) { setTimeout(function () { reply('Ok'); }, 10); } });

 Line: 932 -          upstream.route({ method: 'GET', path: '/timeout2', handler: function (request, reply) { setTimeout(function () { reply('Ok'); }, 10); } });

 Line: 1028 -          upstream.route({ method: 'GET', path: '/timeout2', handler: function (request, reply) { setTimeout(function () { reply('Ok'); }, 10); } });

 Line: 1044 -          upstream.route({ method: 'GET', path: '/timeout1', handler: function (request, reply) { setTimeout(function () { reply('Ok'); }, 10); } });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/validation.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -                      query: {

 Line: 56 -                      query: {

 Line: 94 -                      query: {

 Line: 117 -                      query: {

 Line: 140 -                      query: null

 Line: 161 -                      query: function (value, options, next) {

 Line: 163 -                          return next(value.a === '123' ? null : new Error('Bad query'));

 Line: 176 -                  expect(res.result.message).to.equal('Bad query');

 Line: 239 -                      query: false

 Line: 260 -                      query: false

 Line: 287 -                      query: Joi.object({

 Line: 310 -                      query: {

 Line: 338 -                      query: {

 Line: 368 -                      query: {

 Line: 393 -                      query: {

 Line: 407 -              expect(res.result).to.equal('Got error in query where a is bad');

 Line: 421 -                      query: {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/server.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 181 -                          setTimeout(function () {

 Line: 1232 -              setTimeout(function () {

 Line: 1247 -              setTimeout(function () {

 Line: 1276 -                  setTimeout(function () {

 Line: 1281 -                  setTimeout(function () {

 Line: 1325 -                  setTimeout(next, 10);

 Line: 1438 -                  setTimeout(function () {

 Line: 1449 -                  setTimeout(function () {

 Line: 1491 -                  setTimeout(function () {

 Line: 1505 -                          setTimeout(function () {

 Line: 1540 -                  var orig = Net.Socket.prototype.setTimeout;

 Line: 1541 -                  Net.Socket.prototype.setTimeout = function () {

 Line: 1544 -                      Net.Socket.prototype.setTimeout = orig;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/clientTimeout.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 50 -              setTimeout(function () {

 Line: 100 -                  setTimeout(function () {

 Line: 105 -                  setTimeout(function () {

 Line: 164 -              setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/security.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 252 -          it('does not exist in query validation response message', function (done) {

 Line: 261 -                      validate: { query: { name: Joi.string() } }

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/protect.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 131 -              setTimeout(function () {

</Result>
</report_mosca>

