/src/lib/mixins_after.js-35-
/src/lib/mixins_after.js:36:      let urlObj = url.parse(snippet.href, false, true);
/src/lib/mixins_after.js-37-
##############################################
/src/lib/mixins_after.js-45-      if (!urlObj.protocol) {
/src/lib/mixins_after.js:46:        urlObj.protocol = url.parse(env.src).protocol;
/src/lib/mixins_after.js-47-        snippet.href = url.format(urlObj);
##############################################
/src/lib/mixins_after.js-72-      // Get path without get params
/src/lib/mixins_after.js:73:      let pathname = url.parse(snippet.href).pathname;
/src/lib/mixins_after.js-74-
##############################################
/src/lib/mixins_after.js-140-    env.result.snippets.forEach(snippet => {
/src/lib/mixins_after.js:141:      if (snippet.href && url.parse(snippet.href).protocol === 'https:' && snippet.tags.indexOf('ssl') === -1) {
/src/lib/mixins_after.js-142-        snippet.tags.push('ssl');
##############################################
/src/lib/mixins_after.js-250-
/src/lib/mixins_after.js:251:      if (supportedExt.indexOf(path.extname(url.parse(snippet.href).pathname).toLowerCase()) === -1) {
/src/lib/mixins_after.js-252-        next();
##############################################
/src/lib/fetchers.js-147-        try {
/src/lib/fetchers.js:148:          env.data.oembed = JSON.parse(body);
/src/lib/fetchers.js-149-        } catch (__) {
##############################################
/src/lib/index.js-261-
/src/lib/index.js:262:  let urlObj = urlLib.parse(url);
/src/lib/index.js-263-
##############################################
/src/lib/templates/player.lodash-21-  var param = player.media.autoplay.split('=');
/src/lib/templates/player.lodash:22:  var parts = self.utils.url.parse(href, true);
/src/lib/templates/player.lodash-23-
##############################################
/src/lib/domains/vimeo.com.js-11-
/src/lib/domains/vimeo.com.js:12:let tpl = url.parse('https://vimeo.com/api/oembed.json?url=foobar', true, true);
/src/lib/domains/vimeo.com.js-13-delete tpl.search;
##############################################
/src/lib/domains/vimeo.com.js-52-        try {
/src/lib/domains/vimeo.com.js:53:          env.data.oembed = JSON.parse(body);
/src/lib/domains/vimeo.com.js-54-        } catch (__) {
##############################################
/src/lib/domains/youtube.com.js-10-
/src/lib/domains/youtube.com.js:11:let tpl = url.parse('http://www.youtube.com/oembed?format=json&url=foobar', true, true);
/src/lib/domains/youtube.com.js-12-delete tpl.search;
##############################################
/src/lib/domains/youtube.com.js-28-    function youtube_fetcher(env, callback) {
/src/lib/domains/youtube.com.js:29:      let urlObj = url.parse(env.src, true);
/src/lib/domains/youtube.com.js-30-
##############################################
/src/lib/domains/youtube.com.js-34-      if (urlObj.pathname === '/' && urlObj.hash) {
/src/lib/domains/youtube.com.js:35:        urlObj = url.parse(env.src.replace(/\/#\//, '/'), true);
/src/lib/domains/youtube.com.js-36-      }
##############################################
/src/lib/domains/youtube.com.js-85-
/src/lib/domains/youtube.com.js:86:          env.data.oembed = JSON.parse(body);
/src/lib/domains/youtube.com.js-87-        } catch (__) {
