<report_mosca>
 <Path>/src/superagent.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 620 -  RequestBase.prototype._setTimeouts = function() {

 Line: 625 -      this._timer = setTimeout(function(){

 Line: 631 -      this._responseTimeoutTimer = setTimeout(function(){

 Line: 1718 -    this._setTimeouts();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/superagent.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 573 -   * Compose querystring to append to req.url

 Line: 578 -    var query = this._query.join('&');

 Line: 580 -      this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;

 Line: 587 -        var queryArr = this.url.substring(index + 1).split('&');

 Line: 589 -          queryArr.sort(this._sort);

 Line: 591 -          queryArr.sort();

 Line: 593 -        this.url = this.url.substring(0, index) + '?' + queryArr.join('&');

 Line: 1568 -   * Add query-string `val`.

 Line: 1707 -    // querystring

 Line: 1847 -   * OPTIONS query to `url` with optional callback `fn(res)`.

 Line: 1865 -   * DELETE `url` with optional `data` and callback `fn(res)`.

 Line: 1875 -    var req = request('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/request-base.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 604 -  RequestBase.prototype._setTimeouts = function() {

 Line: 609 -      this._timer = setTimeout(function(){

 Line: 615 -      this._responseTimeoutTimer = setTimeout(function(){

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/request-base.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 557 -   * Compose querystring to append to req.url

 Line: 562 -    var query = this._query.join('&');

 Line: 564 -      this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;

 Line: 571 -        var queryArr = this.url.substring(index + 1).split('&');

 Line: 573 -          queryArr.sort(this._sort);

 Line: 575 -          queryArr.sort();

 Line: 577 -        this.url = this.url.substring(0, index) + '?' + queryArr.join('&');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/client.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 686 -    this._setTimeouts();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/client.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 536 -   * Add query-string `val`.

 Line: 675 -    // querystring

 Line: 815 -   * OPTIONS query to `url` with optional callback `fn(res)`.

 Line: 833 -   * DELETE `url` with optional `data` and callback `fn(res)`.

 Line: 843 -    var req = request('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 755 -    this._setTimeouts();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 293 -   * Add query-string `val`.

 Line: 566 -      var query = qs.stringify(this.qs, { indices: false, strictNullHandling: true });

</Result>
</report_mosca>

