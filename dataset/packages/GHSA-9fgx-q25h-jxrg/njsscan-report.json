{
  "errors": [
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/ghost.min-0b72317d016b2b13fa892673785f45f5.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect2",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/vendor.min-3afd0f95b9e50c6660737c1f2ae26765.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/simplemde/simplemde-1f8ccff0dd405606a22864b214fa253d.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/codemirror/codemirror-993b89ee64b558b2ae87953d44ab3f22.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_no_secure",
      "type": "MatchTimeoutError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 19,
            "line": 1
          },
          "file": "/src/LICENSE",
          "source_hash": "a065c2fb3149421ffb783ae9ce4df051381de5055a54266b312834d822db237e",
          "start": {
            "col": 15,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 19,
            "line": 1
          },
          "file": "/src/content/themes/casper/LICENSE",
          "source_hash": "a065c2fb3149421ffb783ae9ce4df051381de5055a54266b312834d822db237e",
          "start": {
            "col": 15,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/vendor.min-3afd0f95b9e50c6660737c1f2ae26765.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.xss.express_xss",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/ghost.min-0b72317d016b2b13fa892673785f45f5.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect",
      "type": "MatchTimeoutError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 19,
            "line": 1
          },
          "file": "/src/content/themes/casper/LICENSE",
          "source_hash": "a065c2fb3149421ffb783ae9ce4df051381de5055a54266b312834d822db237e",
          "start": {
            "col": 15,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/vendor.min-3afd0f95b9e50c6660737c1f2ae26765.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect2",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/simplemde/simplemde-1f8ccff0dd405606a22864b214fa253d.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.xss.express_xss",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/ghost.min-0b72317d016b2b13fa892673785f45f5.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.xss.express_xss",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/codemirror/codemirror-993b89ee64b558b2ae87953d44ab3f22.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_no_samesite",
      "type": "MatchTimeoutError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 19,
            "line": 1
          },
          "file": "/src/LICENSE",
          "source_hash": "a065c2fb3149421ffb783ae9ce4df051381de5055a54266b312834d822db237e",
          "start": {
            "col": 15,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/codemirror/codemirror-993b89ee64b558b2ae87953d44ab3f22.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/core/built/assets/simplemde/simplemde-1f8ccff0dd405606a22864b214fa253d.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.redirect.express_open_redirect2",
      "type": "MatchTimeoutError"
    }
  ],
  "njsscan_version": "0.2.8",
  "nodejs": {
    "cookie_session_no_domain": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            49,
            54
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            name: 'ghost-private',\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false,\n            sameSite: 'none'\n        })(req, res, next);"
        },
        {
          "file_path": "/src/core/server/services/auth/session/express-session.js",
          "match_lines": [
            10,
            23
          ],
          "match_position": [
            34,
            3
          ],
          "match_string": "const expressSessionMiddleware = session({\n    store: new SessionStore(models.Session),\n    secret: settingsCache.get('session_secret'),\n    resave: false,\n    saveUninitialized: false,\n    name: 'ghost-admin-api-session',\n    cookie: {\n        maxAge: constants.SIX_MONTH_MS,\n        httpOnly: true,\n        path: urlUtils.getSubdir() + '/ghost',\n        sameSite: 'lax',\n        secure: urlUtils.isSSL(config.get('url'))\n    }\n});"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_maxage": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            49,
            54
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            name: 'ghost-private',\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false,\n            sameSite: 'none'\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-613: Insufficient Session Expiration",
        "description": "Session middleware settings: `maxAge` not set. Use it to set expiration date for cookies.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_path": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            49,
            54
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            name: 'ghost-private',\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false,\n            sameSite: 'none'\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_samesite": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            49,
            54
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            name: 'ghost-private',\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false,\n            sameSite: 'none'\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
        "description": "Default session middleware settings: `sameSite` attribute is not configured to strict or lax. These configurations provides protection against Cross Site Request Forgery attacks.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "cookie_session_no_secure": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/session/express-session.js",
          "match_lines": [
            10,
            23
          ],
          "match_position": [
            34,
            3
          ],
          "match_string": "const expressSessionMiddleware = session({\n    store: new SessionStore(models.Session),\n    secret: settingsCache.get('session_secret'),\n    resave: false,\n    saveUninitialized: false,\n    name: 'ghost-admin-api-session',\n    cookie: {\n        maxAge: constants.SIX_MONTH_MS,\n        httpOnly: true,\n        path: urlUtils.getSubdir() + '/ghost',\n        sameSite: 'lax',\n        secure: urlUtils.isSSL(config.get('url'))\n    }\n});"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            49,
            54
          ],
          "match_position": [
            16,
            11
          ],
          "match_string": "        return session({\n            name: 'ghost-private',\n            maxAge: constants.ONE_MONTH_MS,\n            signed: false,\n            sameSite: 'none'\n        })(req, res, next);"
        }
      ],
      "metadata": {
        "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
        "description": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "eval_nodejs": {
      "files": [
        {
          "file_path": "/src/core/server/web/api/testmode/index.js",
          "match_lines": [
            17,
            22
          ],
          "match_position": [
            9,
            21
          ],
          "match_string": "        const timeout = req.params.timeout * 1000;\n        logging.info('Begin Slow Request with timeout of', timeout);\n        setTimeout(() => {\n            logging.info('End Slow Request', timeout);\n            res.sendStatus(200);\n        }, timeout);"
        },
        {
          "file_path": "/src/core/server/web/api/testmode/index.js",
          "match_lines": [
            29,
            42
          ],
          "match_position": [
            9,
            12
          ],
          "match_string": "        const timeout = req.params.timeout * 1000;\n        logging.info('Create Slow Job with timeout of', timeout);\n        jobsService.addJob({\n            job: () => {\n                return new Promise((resolve) => {\n                    logging.info('Start Slow Job');\n                    setTimeout(() => {\n                        logging.info('End Slow Job', timeout);\n                        resolve();\n                    }, timeout);\n                });\n            },\n            offloaded: false\n        });"
        }
      ],
      "metadata": {
        "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "express_open_redirect": {
      "files": [
        {
          "file_path": "/src/core/server/web/site/middleware/handle-image-sizes.js",
          "match_lines": [
            22,
            23
          ],
          "match_position": [
            9,
            34
          ],
          "match_string": "        const url = req.originalUrl.replace(`/size/${requestedDimension}`, '');\n        return res.redirect(url);"
        },
        {
          "file_path": "/src/core/server/web/admin/middleware.js",
          "match_lines": [
            6,
            10
          ],
          "match_position": [
            5,
            6
          ],
          "match_string": "    const ghostPathMatch = req.originalUrl.match(ghostPathRegex);\n\n    if (ghostPathMatch) {\n        return res.redirect(urlUtils.urlJoin(urlUtils.urlFor('admin'), '#', ghostPathMatch[1]));\n    }"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            115,
            117
          ],
          "match_position": [
            13,
            46
          ],
          "match_string": "            redirectUrl += '?r=' + encodeURIComponent(req.url);\n\n            return res.redirect(redirectUrl);"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            149,
            162
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        const forward = getRedirectUrl(req.query);\n\n        if (pass === bodyPass) {\n            hasher.update(bodyPass + salt, 'utf8');\n            req.session.token = hasher.digest('hex');\n            req.session.salt = salt;\n\n            return res.redirect(urlUtils.urlFor({relativeUrl: forward}));\n        } else {\n            res.error = {\n                message: i18n.t('errors.middleware.privateblogging.wrongPassword')\n            };\n            return next();\n        }"
        }
      ],
      "metadata": {
        "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
        "description": "Untrusted user input in redirect() can result in Open Redirect vulnerability.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "express_xss": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/passwordreset.js",
          "match_lines": [
            151,
            163
          ],
          "match_position": [
            5,
            63
          ],
          "match_string": "    const payload = {\n        mail: [{\n            message: {\n                to: data.email,\n                subject: i18n.t('common.api.authentication.mail.resetPassword'),\n                html: content.html,\n                text: content.text\n            },\n            options: {}\n        }]\n    };\n\n    return mailAPI.send(payload, {context: {internal: true}});"
        },
        {
          "file_path": "/src/core/frontend/services/sitemap/handler.js",
          "match_lines": [
            25,
            33
          ],
          "match_position": [
            9,
            53
          ],
          "match_string": "        const type = req.params.resource;\n        const page = 1;\n\n        res.set({\n            'Cache-Control': 'public, max-age=' + config.get('caching:sitemap:maxAge'),\n            'Content-Type': 'text/xml'\n        });\n\n        res.send(manager.getSiteMapXml(type, page));"
        }
      ],
      "metadata": {
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "join_resolve_path_traversal": {
      "files": [
        {
          "file_path": "/src/core/server/web/site/middleware/serve-public-file.js",
          "match_lines": [
            12,
            12
          ],
          "match_position": [
            46,
            100
          ],
          "match_string": "    const filePath = file.match(/^public/) ? path.join(publicFilePath, file.replace(/^public/, '')) : path.join(publicFilePath, file);"
        },
        {
          "file_path": "/src/core/server/web/api/testmode/index.js",
          "match_lines": [
            57,
            57
          ],
          "match_position": [
            29,
            85
          ],
          "match_string": "            const jobPath = path.resolve(__dirname, 'jobs', `${req.params.name}.js`);"
        }
      ],
      "metadata": {
        "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path Traversal)",
        "description": "Path constructed with user input can result in Path Traversal. Ensure that user input does not reach `join()` or `resolve()`. ",
        "owasp": "A5: Broken Access Control",
        "severity": "WARNING"
      }
    },
    "jwt_not_revoked": {
      "files": [
        {
          "file_path": "/src/core/server/services/auth/members/index.js",
          "match_lines": [
            14,
            38
          ],
          "match_position": [
            85,
            15
          ],
          "match_string": "            UNO_MEMBERINO = membersService.api.getPublicConfig().then(({issuer}) => jwt({\n                credentialsRequired: false,\n                requestProperty: 'member',\n                audience: siteOrigin,\n                issuer,\n                algorithms: ['RS512'],\n                secret(req, payload, done) {\n                    membersService.api.getPublicConfig().then(({publicKey}) => {\n                        done(null, publicKey);\n                    }).catch(done);\n                },\n                getToken(req) {\n                    if (!req.get('authorization')) {\n                        return null;\n                    }\n\n                    const [scheme, credentials] = req.get('authorization').split(/\\s+/);\n\n                    if (scheme !== 'GhostMembers') {\n                        return null;\n                    }\n\n                    return credentials;\n                }\n            }));"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "node_api_key": {
      "files": [
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            276,
            276
          ],
          "match_position": [
            16,
            49
          ],
          "match_string": "        return this.hasMany('ApiKey', 'user_id');"
        },
        {
          "file_path": "/src/core/server/models/integration.js",
          "match_lines": [
            49,
            49
          ],
          "match_position": [
            16,
            56
          ],
          "match_string": "        return this.hasMany('ApiKey', 'integration_id');"
        },
        {
          "file_path": "/src/core/server/services/auth/api-key/admin.js",
          "match_lines": [
            130,
            130
          ],
          "match_position": [
            24,
            64
          ],
          "match_string": "        const secret = Buffer.from(apiKey.get('secret'), 'hex');"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded API Key is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/core/server/services/email-analytics/jobs/index.js",
          "match_lines": [
            27,
            27
          ],
          "match_position": [
            38,
            51
          ],
          "match_string": "                const s = Math.floor(Math.random() * 60); // 0-59"
        },
        {
          "file_path": "/src/core/server/services/email-analytics/jobs/index.js",
          "match_lines": [
            29,
            29
          ],
          "match_position": [
            38,
            51
          ],
          "match_string": "                const m = Math.floor(Math.random() * 5); // 0-4"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_logic_bypass": {
      "files": [
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            115,
            115
          ],
          "match_position": [
            32,
            80
          ],
          "match_string": "        model.statusChanging = model.get('status') !== model.previous('status');"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            237,
            237
          ],
          "match_position": [
            32,
            80
          ],
          "match_string": "        model.statusChanging = model.get('status') !== model.previous('status');"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            242,
            242
          ],
          "match_position": [
            38,
            82
          ],
          "match_string": "        model.resourceTypeChanging = model.get('type') !== model.previous('type');"
        }
      ],
      "metadata": {
        "cwe": "CWE-807: Reliance on Untrusted Inputs in a Security Decision",
        "description": "User controlled data is used for application business logic decision making. This expose protected data or functionality.",
        "owasp": "A5: Broken Access Control",
        "severity": "ERROR"
      }
    },
    "node_md5": {
      "files": [
        {
          "file_path": "/src/core/server/web/site/middleware/serve-favicon.js",
          "match_lines": [
            17,
            17
          ],
          "match_position": [
            23,
            47
          ],
          "match_string": "            ETag: `\"${crypto.createHash('md5').update(buf, 'utf8').digest('hex')}\"`,"
        },
        {
          "file_path": "/src/core/server/web/site/middleware/serve-public-file.js",
          "match_lines": [
            55,
            55
          ],
          "match_position": [
            31,
            55
          ],
          "match_string": "                    ETag: `\"${crypto.createHash('md5').update(str, 'utf8').digest('hex')}\"`,"
        },
        {
          "file_path": "/src/core/server/models/member.js",
          "match_lines": [
            239,
            239
          ],
          "match_position": [
            31,
            55
          ],
          "match_string": "            const emailHash = crypto.createHash('md5').update(attrs.email.toLowerCase().trim()).digest('hex');"
        },
        {
          "file_path": "/src/core/frontend/services/settings/index.js",
          "match_lines": [
            17,
            17
          ],
          "match_position": [
            12,
            36
          ],
          "match_string": "    return crypto.createHash('md5')"
        },
        {
          "file_path": "/src/core/frontend/meta/asset_url.js",
          "match_lines": [
            41,
            41
          ],
          "match_position": [
            34,
            58
          ],
          "match_string": "        config.set('assetHash', (crypto.createHash('md5').update(Date.now().toString()).digest('hex')).substring(0, 10));"
        },
        {
          "file_path": "/src/core/server/lib/image/gravatar.js",
          "match_lines": [
            12,
            12
          ],
          "match_position": [
            13,
            37
          ],
          "match_string": "            crypto.createHash('md5').update(userData.email.toLowerCase().trim()).digest('hex') +"
        },
        {
          "file_path": "/src/core/frontend/services/rss/cache.js",
          "match_lines": [
            6,
            6
          ],
          "match_position": [
            22,
            46
          ],
          "match_string": "    const dataHash = crypto.createHash('md5').update(JSON.stringify(data)).digest('hex');"
        },
        {
          "file_path": "/src/core/server/update-check.js",
          "match_lines": [
            122,
            122
          ],
          "match_position": [
            24,
            48
          ],
          "match_string": "        data.blog_id = crypto.createHash('md5').update(blogId).digest('hex');"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "MD5 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_nosqli_injection": {
      "files": [
        {
          "file_path": "/src/core/server/services/mega/mega.js",
          "match_lines": [
            140,
            141
          ],
          "match_position": [
            5,
            80
          ],
          "match_string": "    const postId = postModel.get('id');\n    const existing = await models.Email.findOne({post_id: postId}, knexOptions);"
        },
        {
          "file_path": "/src/core/server/services/invitations/accept.js",
          "match_lines": [
            7,
            21
          ],
          "match_position": [
            5,
            62
          ],
          "match_string": "    const data = invitation.invitation[0];\n    const inviteToken = security.url.decodeBase64(data.token);\n    const options = {context: {internal: true}};\n\n    let invite = await models.Invite.findOne({token: inviteToken, status: 'sent'}, options);\n\n    if (!invite) {\n        throw new errors.NotFoundError({message: i18n.t('errors.api.invites.inviteNotFound')});\n    }\n\n    if (invite.get('expires') < Date.now()) {\n        throw new errors.NotFoundError({message: i18n.t('errors.api.invites.inviteExpired')});\n    }\n\n    let user = await models.User.findOne({email: data.email});"
        },
        {
          "file_path": "/src/core/server/services/invitations/accept.js",
          "match_lines": [
            8,
            11
          ],
          "match_position": [
            5,
            92
          ],
          "match_string": "    const inviteToken = security.url.decodeBase64(data.token);\n    const options = {context: {internal: true}};\n\n    let invite = await models.Invite.findOne({token: inviteToken, status: 'sent'}, options);"
        },
        {
          "file_path": "/src/core/server/services/invitations/accept.js",
          "match_lines": [
            21,
            21
          ],
          "match_position": [
            22,
            62
          ],
          "match_string": "    let user = await models.User.findOne({email: data.email});"
        },
        {
          "file_path": "/src/core/server/services/invites/invites.js",
          "match_lines": [
            16,
            16
          ],
          "match_position": [
            16,
            71
          ],
          "match_string": "        return InviteModel.findOne({email: invites[0].email}, options)"
        },
        {
          "file_path": "/src/core/server/services/auth/api-key/content.js",
          "match_lines": [
            19,
            56
          ],
          "match_position": [
            5,
            6
          ],
          "match_string": "    let key = req.query.key;\n\n    try {\n        const apiKey = await models.ApiKey.findOne({secret: key}, {withRelated: ['integration']});\n\n        if (!apiKey) {\n            return next(new errors.UnauthorizedError({\n                message: i18n.t('errors.middleware.auth.unknownContentApiKey'),\n                code: 'UNKNOWN_CONTENT_API_KEY'\n            }));\n        }\n\n        if (apiKey.get('type') !== 'content') {\n            return next(new errors.UnauthorizedError({\n                message: i18n.t('errors.middleware.auth.invalidApiKeyType'),\n                code: 'INVALID_API_KEY_TYPE'\n            }));\n        }\n\n        // CASE: blocking all non-internal: \"custom\" and \"builtin\" integration requests when the limit is reached\n        if (limitService.isLimited('customIntegrations')\n            && (apiKey.relations.integration && !['internal'].includes(apiKey.relations.integration.get('type')))) {\n            // NOTE: using \"checkWouldGoOverLimit\" instead of \"checkIsOverLimit\" here because flag limits don't have\n            //       a concept of measuring if the limit has been surpassed\n            await limitService.errorIfWouldGoOverLimit('customIntegrations');\n        }\n\n        // authenticated OK, store the api key on the request for later checks and logging\n        req.api_key = apiKey;\n\n        next();\n    } catch (err) {\n        if (err instanceof errors.HostLimitError) {\n            next(err);\n        } else {\n            next(new errors.InternalServerError({err}));\n        }\n    }"
        },
        {
          "file_path": "/src/core/server/services/auth/api-key/admin.js",
          "match_lines": [
            92,
            179
          ],
          "match_position": [
            5,
            6
          ],
          "match_string": "    const apiKeyId = decoded.header.kid;\n\n    if (!apiKeyId) {\n        return next(new errors.BadRequestError({\n            message: i18n.t('errors.middleware.auth.adminApiKidMissing'),\n            code: 'MISSING_ADMIN_API_KID'\n        }));\n    }\n\n    try {\n        const apiKey = await models.ApiKey.findOne({id: apiKeyId}, {withRelated: ['integration']});\n\n        if (!apiKey) {\n            return next(new errors.UnauthorizedError({\n                message: i18n.t('errors.middleware.auth.unknownAdminApiKey'),\n                code: 'UNKNOWN_ADMIN_API_KEY'\n            }));\n        }\n\n        if (apiKey.get('type') !== 'admin') {\n            return next(new errors.UnauthorizedError({\n                message: i18n.t('errors.middleware.auth.invalidApiKeyType'),\n                code: 'INVALID_API_KEY_TYPE'\n            }));\n        }\n\n        // CASE: blocking all non-internal: \"custom\" and \"builtin\" integration requests when the limit is reached\n        if (limitService.isLimited('customIntegrations')\n            && (apiKey.relations.integration && !['internal'].includes(apiKey.relations.integration.get('type')))) {\n            // NOTE: using \"checkWouldGoOverLimit\" instead of \"checkIsOverLimit\" here because flag limits don't have\n            //       a concept of measuring if the limit has been surpassed\n            await limitService.errorIfWouldGoOverLimit('customIntegrations');\n        }\n\n        // Decoding from hex and transforming into bytes is here to\n        // keep comparison of the bytes that are stored in the secret.\n        // Useful context:\n        // https://github.com/auth0/node-jsonwebtoken/issues/208#issuecomment-231861138\n        const secret = Buffer.from(apiKey.get('secret'), 'hex');\n\n        const {pathname} = url.parse(req.originalUrl);\n        const [hasMatch, version = 'v4', api = 'admin'] = pathname.match(/ghost\\/api\\/([^/]+)\\/([^/]+)\\/(.+)*/); // eslint-disable-line no-unused-vars\n\n        // ensure the token was meant for this api version\n        const options = Object.assign({\n            audience: new RegExp(`\\/?${version}\\/${api}\\/?$`) // eslint-disable-line no-useless-escape\n        }, JWT_OPTIONS);\n\n        try {\n            jwt.verify(token, secret, options);\n        } catch (err) {\n            if (err.name === 'TokenExpiredError' || err.name === 'JsonWebTokenError') {\n                return next(new errors.UnauthorizedError({\n                    message: i18n.t('errors.middleware.auth.invalidTokenWithMessage', {message: err.message}),\n                    code: 'INVALID_JWT',\n                    err\n                }));\n            }\n\n            // unknown error\n            return next(new errors.InternalServerError({err}));\n        }\n\n        // authenticated OK\n\n        if (apiKey.get('user_id')) {\n            // fetch the user and store it on the request for later checks and logging\n            const user = await models.User.findOne(\n                {id: apiKey.get('user_id'), status: 'active'},\n                {require: true}\n            );\n\n            req.user = user;\n\n            next();\n        }\n\n        // store the api key on the request for later checks and logging\n        req.api_key = apiKey;\n\n        next();\n    } catch (err) {\n        if (err instanceof errors.HostLimitError) {\n            next(err);\n        } else {\n            next(new errors.InternalServerError({err}));\n        }\n    }"
        },
        {
          "file_path": "/src/core/server/services/auth/api-key/admin.js",
          "match_lines": [
            102,
            167
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        const apiKey = await models.ApiKey.findOne({id: apiKeyId}, {withRelated: ['integration']});\n\n        if (!apiKey) {\n            return next(new errors.UnauthorizedError({\n                message: i18n.t('errors.middleware.auth.unknownAdminApiKey'),\n                code: 'UNKNOWN_ADMIN_API_KEY'\n            }));\n        }\n\n        if (apiKey.get('type') !== 'admin') {\n            return next(new errors.UnauthorizedError({\n                message: i18n.t('errors.middleware.auth.invalidApiKeyType'),\n                code: 'INVALID_API_KEY_TYPE'\n            }));\n        }\n\n        // CASE: blocking all non-internal: \"custom\" and \"builtin\" integration requests when the limit is reached\n        if (limitService.isLimited('customIntegrations')\n            && (apiKey.relations.integration && !['internal'].includes(apiKey.relations.integration.get('type')))) {\n            // NOTE: using \"checkWouldGoOverLimit\" instead of \"checkIsOverLimit\" here because flag limits don't have\n            //       a concept of measuring if the limit has been surpassed\n            await limitService.errorIfWouldGoOverLimit('customIntegrations');\n        }\n\n        // Decoding from hex and transforming into bytes is here to\n        // keep comparison of the bytes that are stored in the secret.\n        // Useful context:\n        // https://github.com/auth0/node-jsonwebtoken/issues/208#issuecomment-231861138\n        const secret = Buffer.from(apiKey.get('secret'), 'hex');\n\n        const {pathname} = url.parse(req.originalUrl);\n        const [hasMatch, version = 'v4', api = 'admin'] = pathname.match(/ghost\\/api\\/([^/]+)\\/([^/]+)\\/(.+)*/); // eslint-disable-line no-unused-vars\n\n        // ensure the token was meant for this api version\n        const options = Object.assign({\n            audience: new RegExp(`\\/?${version}\\/${api}\\/?$`) // eslint-disable-line no-useless-escape\n        }, JWT_OPTIONS);\n\n        try {\n            jwt.verify(token, secret, options);\n        } catch (err) {\n            if (err.name === 'TokenExpiredError' || err.name === 'JsonWebTokenError') {\n                return next(new errors.UnauthorizedError({\n                    message: i18n.t('errors.middleware.auth.invalidTokenWithMessage', {message: err.message}),\n                    code: 'INVALID_JWT',\n                    err\n                }));\n            }\n\n            // unknown error\n            return next(new errors.InternalServerError({err}));\n        }\n\n        // authenticated OK\n\n        if (apiKey.get('user_id')) {\n            // fetch the user and store it on the request for later checks and logging\n            const user = await models.User.findOne(\n                {id: apiKey.get('user_id'), status: 'active'},\n                {require: true}\n            );\n\n            req.user = user;\n\n            next();\n        }"
        },
        {
          "file_path": "/src/core/server/services/auth/api-key/admin.js",
          "match_lines": [
            159,
            162
          ],
          "match_position": [
            32,
            14
          ],
          "match_string": "            const user = await models.User.findOne(\n                {id: apiKey.get('user_id'), status: 'active'},\n                {require: true}\n            );"
        },
        {
          "file_path": "/src/core/server/models/session.js",
          "match_lines": [
            53,
            70
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        const sessionId = options.session_id;\n        const sessionData = data.session_data;\n        const userId = sessionData.user_id;\n        return this.findOne({session_id: sessionId}, options)\n            .then((model) => {\n                if (model) {\n                    return this.edit({\n                        session_data: sessionData\n                    }, Object.assign(options, {\n                        id: model.id\n                    }));\n                }\n                return this.add({\n                    session_id: sessionId,\n                    session_data: sessionData,\n                    user_id: userId\n                }, options);\n            });"
        },
        {
          "file_path": "/src/core/server/models/api-key.js",
          "match_lines": [
            111,
            111
          ],
          "match_position": [
            24,
            126
          ],
          "match_string": "                return Role.findOne({name: attrs.role || 'Admin Integration'}, Object.assign({}, options, {columns: ['id']}))"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js",
          "match_lines": [
            19,
            31
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'Scheduler Integration'});\n\n    return models.Role.findOne({name: apiKeyRole.name}, options)\n        .then((role) => {\n            if (!role) {\n                return utils.addFixturesForModel({\n                    name: 'Role',\n                    entries: [apiKeyRole]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.28/3-insert-ghost-scheduler-role.js",
          "match_lines": [
            21,
            21
          ],
          "match_position": [
            12,
            65
          ],
          "match_string": "    return models.Role.findOne({name: apiKeyRole.name}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.28/4-insert-scheduler-integration.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const fixtureIntegration = utils.findModelFixtureEntry('Integration', {slug: 'ghost-scheduler'});\n\n    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)\n        .then((integration) => {\n            if (!integration) {\n                return utils.addFixturesForModel({\n                    name: 'Integration',\n                    entries: [fixtureIntegration]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.28/4-insert-scheduler-integration.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            80
          ],
          "match_string": "    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)"
        },
        {
          "file_path": "/src/core/server/data/importer/importers/data/tags.js",
          "match_lines": [
            42,
            42
          ],
          "match_position": [
            22,
            79
          ],
          "match_string": "            ops.push(models[this.modelName].findOne({name: obj.name}, options)"
        },
        {
          "file_path": "/src/core/server/api/v3/utils/validators/input/invites.js",
          "match_lines": [
            8,
            8
          ],
          "match_position": [
            16,
            88
          ],
          "match_string": "        return models.User.findOne({email: frame.data.invites[0].email}, frame.options)"
        },
        {
          "file_path": "/src/core/server/api/v3/authentication.js",
          "match_lines": [
            181,
            183
          ],
          "match_position": [
            21,
            97
          ],
          "match_string": "                    const email = frame.data.email;\n\n                    return models.Invite.findOne({email: email, status: 'sent'}, frame.options);"
        },
        {
          "file_path": "/src/core/server/api/canary/session.js",
          "match_lines": [
            16,
            16
          ],
          "match_position": [
            16,
            69
          ],
          "match_string": "        return models.User.findOne({id: frame.options.context.user});"
        },
        {
          "file_path": "/src/core/server/api/canary/integrations.js",
          "match_lines": [
            80,
            80
          ],
          "match_position": [
            24,
            66
          ],
          "match_string": "                return models.ApiKey.findOne({id: options.keyid})"
        },
        {
          "file_path": "/src/core/server/api/canary/integrations.js",
          "match_lines": [
            91,
            93
          ],
          "match_position": [
            36,
            31
          ],
          "match_string": "                            return models.Integration.findOne({id: options.id}, {\n                                withRelated: ['api_keys', 'webhooks']\n                            });"
        },
        {
          "file_path": "/src/core/server/api/canary/authentication.js",
          "match_lines": [
            181,
            183
          ],
          "match_position": [
            21,
            97
          ],
          "match_string": "                    const email = frame.data.email;\n\n                    return models.Invite.findOne({email: email, status: 'sent'}, frame.options);"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.15/2-insert-zapier-integration.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const fixtureIntegration = utils.findModelFixtureEntry('Integration', {slug: 'zapier'});\n\n    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)\n        .then((integration) => {\n            if (!integration) {\n                return utils.addFixturesForModel({\n                    name: 'Integration',\n                    entries: [fixtureIntegration]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.15/2-insert-zapier-integration.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            80
          ],
          "match_string": "    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)"
        },
        {
          "file_path": "/src/core/server/api/v3/webhooks.js",
          "match_lines": [
            22,
            22
          ],
          "match_position": [
            43,
            143
          ],
          "match_string": "                const integration = await models.Integration.findOne({id: frame.data.webhooks[0].integration_id}, {context: {internal: true}});"
        },
        {
          "file_path": "/src/core/server/api/v3/webhooks.js",
          "match_lines": [
            53,
            53
          ],
          "match_position": [
            28,
            74
          ],
          "match_string": "                    return models.Webhook.findOne({id: frame.options.id})"
        },
        {
          "file_path": "/src/core/server/api/v3/webhooks.js",
          "match_lines": [
            122,
            122
          ],
          "match_position": [
            28,
            74
          ],
          "match_string": "                    return models.Webhook.findOne({id: frame.options.id})"
        },
        {
          "file_path": "/src/core/server/api/v2/utils/validators/input/invites.js",
          "match_lines": [
            8,
            8
          ],
          "match_position": [
            16,
            88
          ],
          "match_string": "        return models.User.findOne({email: frame.data.invites[0].email}, frame.options)"
        },
        {
          "file_path": "/src/core/server/api/v2/session.js",
          "match_lines": [
            16,
            16
          ],
          "match_position": [
            16,
            69
          ],
          "match_string": "        return models.User.findOne({id: frame.options.context.user});"
        },
        {
          "file_path": "/src/core/server/models/stripe-product.js",
          "match_lines": [
            16,
            17
          ],
          "match_position": [
            9,
            98
          ],
          "match_string": "        const stripeProductId = data.stripe_product_id;\n        const model = await this.findOne({stripe_product_id: stripeProductId}, unfilteredOptions);"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            493,
            518
          ],
          "match_position": [
            17,
            20
          ],
          "match_string": "                roleId = data.roles[0].id || data.roles[0];\n\n                return user.roles().fetch().then((roles) => {\n                    // return if the role is already assigned\n                    if (roles.models[0].id === roleId) {\n                        return;\n                    }\n                    return ghostBookshelf.model('Role').findOne({id: roleId});\n                }).then((roleToAssign) => {\n                    if (roleToAssign && roleToAssign.get('name') === 'Owner') {\n                        return Promise.reject(\n                            new errors.ValidationError({\n                                message: i18n.t('errors.models.user.methodDoesNotSupportOwnerRole')\n                            })\n                        );\n                    } else {\n                        // assign all other roles\n                        return user.roles().updatePivot({role_id: roleId});\n                    }\n                }).then(() => {\n                    options.status = 'all';\n                    return self.findOne({id: user.id}, options);\n                }).then((model) => {\n                    model._changed = user._changed;\n                    return model;\n                });"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            514,
            514
          ],
          "match_position": [
            28,
            64
          ],
          "match_string": "                    return self.findOne({id: user.id}, options);"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            542,
            606
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        let userData = this.filterData(data);\n        let roles;\n\n        // check for too many roles\n        if (data.roles && data.roles.length > 1) {\n            return Promise.reject(new errors.ValidationError({\n                message: i18n.t('errors.models.user.onlyOneRolePerUserSupported')\n            }));\n        }\n\n        function getAuthorRole() {\n            return ghostBookshelf.model('Role').findOne({name: 'Author'}, _.pick(options, 'transacting'))\n                .then(function then(authorRole) {\n                    return [authorRole.get('id')];\n                });\n        }\n\n        /**\n         * We need this default author role because of the following Ghost feature:\n         * You setup your blog and you can invite people instantly, but without choosing a role.\n         * roles: [] -> no default role (used for owner creation, see fixtures.json)\n         * roles: undefined -> default role\n         */\n        roles = data.roles;\n        delete data.roles;\n\n        return ghostBookshelf.Model.add.call(self, userData, options)\n            .then(function then(addedUser) {\n                // Assign the userData to our created user so we can pass it back\n                userData = addedUser;\n            })\n            .then(function () {\n                if (!roles) {\n                    return getAuthorRole();\n                }\n\n                return Promise.resolve(roles);\n            })\n            .then(function (_roles) {\n                roles = _roles;\n\n                // CASE: it is possible to add roles by name, by id or by object\n                if (_.isString(roles[0]) && !ObjectId.isValid(roles[0])) {\n                    return Promise.map(roles, function (roleName) {\n                        return ghostBookshelf.model('Role').findOne({\n                            name: roleName\n                        }, options);\n                    }).then(function (roleModels) {\n                        roles = [];\n\n                        _.each(roleModels, function (roleModel) {\n                            roles.push(roleModel.id);\n                        });\n                    });\n                }\n\n                return Promise.resolve();\n            })\n            .then(function () {\n                return baseUtils.attach(User, userData.id, 'roles', roles, options);\n            })\n            .then(function then() {\n                // find and return the added user\n                return self.findOne({id: userData.id, status: 'all'}, options);\n            });"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            605,
            605
          ],
          "match_position": [
            24,
            79
          ],
          "match_string": "                return self.findOne({id: userData.id, status: 'all'}, options);"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            943,
            999
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        const options = ghostBookshelf.Model.filterOptions(unfilteredOptions, 'transferOwnership');\n        let ownerRole;\n        let contextUser;\n\n        return Promise.join(\n            ghostBookshelf.model('Role').findOne({name: 'Owner'}),\n            User.findOne({id: options.context.user}, {withRelated: ['roles']})\n        )\n            .then((results) => {\n                ownerRole = results[0];\n                contextUser = results[1];\n\n                // check if user has the owner role\n                const currentRoles = contextUser.toJSON(options).roles;\n                if (!_.some(currentRoles, {id: ownerRole.id})) {\n                    return Promise.reject(new errors.NoPermissionError({\n                        message: i18n.t('errors.models.user.onlyOwnerCanTransferOwnerRole')\n                    }));\n                }\n\n                return Promise.join(ghostBookshelf.model('Role').findOne({name: 'Administrator'}),\n                    User.findOne({id: object.id}, {withRelated: ['roles']}));\n            })\n            .then((results) => {\n                const adminRole = results[0];\n                const user = results[1];\n\n                if (!user) {\n                    return Promise.reject(new errors.NotFoundError({\n                        message: i18n.t('errors.models.user.userNotFound')\n                    }));\n                }\n\n                const {roles: currentRoles, status} = user.toJSON(options);\n\n                if (!_.some(currentRoles, {id: adminRole.id})) {\n                    return Promise.reject(new errors.ValidationError({\n                        message: i18n.t('errors.models.user.onlyAdmCanBeAssignedOwnerRole')\n                    }));\n                }\n\n                if (status !== 'active') {\n                    return Promise.reject(new errors.ValidationError({\n                        message: i18n.t('errors.models.user.onlyActiveAdmCanBeAssignedOwnerRole')\n                    }));\n                }\n\n                // convert owner to admin\n                return Promise.join(contextUser.roles().updatePivot({role_id: adminRole.id}),\n                    user.roles().updatePivot({role_id: ownerRole.id}),\n                    user.id);\n            })\n            .then((results) => {\n                return Users.forge()\n                    .query('whereIn', 'id', [contextUser.id, results[2]])\n                    .fetch({withRelated: ['roles']});\n            });"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            949,
            949
          ],
          "match_position": [
            13,
            79
          ],
          "match_string": "            User.findOne({id: options.context.user}, {withRelated: ['roles']})"
        },
        {
          "file_path": "/src/core/server/models/user.js",
          "match_lines": [
            964,
            964
          ],
          "match_position": [
            21,
            76
          ],
          "match_string": "                    User.findOne({id: object.id}, {withRelated: ['roles']}));"
        },
        {
          "file_path": "/src/core/server/models/stripe-customer-subscription.js",
          "match_lines": [
            39,
            40
          ],
          "match_position": [
            9,
            95
          ],
          "match_string": "        const subscriptionId = unfilteredOptions.subscription_id;\n        const model = await this.findOne({subscription_id: subscriptionId}, unfilteredOptions);"
        },
        {
          "file_path": "/src/core/server/models/invite.js",
          "match_lines": [
            61,
            62
          ],
          "match_position": [
            16,
            48
          ],
          "match_string": "        return ghostBookshelf.model('Role')\n            .findOne({id: unsafeAttrs.role_id})"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'Admin Integration'});\n\n    return models.Role.findOne({name: apiKeyRole.name}, options)\n        .then((role) => {\n            if (!role) {\n                return utils.addFixturesForModel({\n                    name: 'Role',\n                    entries: [apiKeyRole]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.2/3-insert-admin-integration-role.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            65
          ],
          "match_string": "    return models.Role.findOne({name: apiKeyRole.name}, options)"
        },
        {
          "file_path": "/src/core/server/api/v3/session.js",
          "match_lines": [
            16,
            16
          ],
          "match_position": [
            16,
            69
          ],
          "match_string": "        return models.User.findOne({id: frame.options.context.user});"
        },
        {
          "file_path": "/src/core/server/api/v3/integrations.js",
          "match_lines": [
            80,
            80
          ],
          "match_position": [
            24,
            66
          ],
          "match_string": "                return models.ApiKey.findOne({id: options.keyid})"
        },
        {
          "file_path": "/src/core/server/api/v3/integrations.js",
          "match_lines": [
            91,
            93
          ],
          "match_position": [
            36,
            31
          ],
          "match_string": "                            return models.Integration.findOne({id: options.id}, {\n                                withRelated: ['api_keys', 'webhooks']\n                            });"
        },
        {
          "file_path": "/src/core/server/api/v2/webhooks.js",
          "match_lines": [
            48,
            48
          ],
          "match_position": [
            28,
            74
          ],
          "match_string": "                    return models.Webhook.findOne({id: frame.options.id})"
        },
        {
          "file_path": "/src/core/server/api/v2/webhooks.js",
          "match_lines": [
            117,
            117
          ],
          "match_position": [
            28,
            74
          ],
          "match_string": "                    return models.Webhook.findOne({id: frame.options.id})"
        },
        {
          "file_path": "/src/core/server/api/canary/webhooks.js",
          "match_lines": [
            49,
            49
          ],
          "match_position": [
            28,
            74
          ],
          "match_string": "                    return models.Webhook.findOne({id: frame.options.id})"
        },
        {
          "file_path": "/src/core/server/api/canary/webhooks.js",
          "match_lines": [
            118,
            118
          ],
          "match_position": [
            28,
            74
          ],
          "match_string": "                    return models.Webhook.findOne({id: frame.options.id})"
        },
        {
          "file_path": "/src/core/server/services/members/importer/labels.js",
          "match_lines": [
            10,
            10
          ],
          "match_position": [
            37,
            77
          ],
          "match_string": "        const existingLabel = await models.Label.findOne({name: label.name});"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            963,
            990
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        let options = this.filterOptions(unfilteredOptions, 'edit', {extraAllowedProperties: ['id']});\n\n        const editPost = () => {\n            options.forUpdate = true;\n\n            return ghostBookshelf.Model.edit.call(this, data, options)\n                .then((post) => {\n                    return this.findOne({\n                        status: 'all',\n                        id: options.id\n                    }, _.merge({transacting: options.transacting}, unfilteredOptions))\n                        .then((found) => {\n                            if (found) {\n                                // Pass along the updated attributes for checking status changes\n                                found._previousAttributes = post._previousAttributes;\n                                found._changed = post._changed;\n\n                                // NOTE: `posts_meta` fields are equivalent in terms of \"wasChanged\" logic to the rest of posts's table fields.\n                                //       Keeping track of them is needed to check if anything was changed in post's resource.\n                                if (found.relations.posts_meta) {\n                                    found.relations.posts_meta._changed = post.relations.posts_meta._changed;\n                                }\n\n                                return found;\n                            }\n                        });\n                });\n        };"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            970,
            973
          ],
          "match_position": [
            28,
            87
          ],
          "match_string": "                    return this.findOne({\n                        status: 'all',\n                        id: options.id\n                    }, _.merge({transacting: options.transacting}, unfilteredOptions))"
        },
        {
          "file_path": "/src/core/server/models/post.js",
          "match_lines": [
            1013,
            1016
          ],
          "match_position": [
            28,
            87
          ],
          "match_string": "                    return this.findOne({\n                        status: 'all',\n                        id: post.id\n                    }, _.merge({transacting: options.transacting}, unfilteredOptions));"
        },
        {
          "file_path": "/src/core/server/models/member-stripe-customer.js",
          "match_lines": [
            21,
            22
          ],
          "match_position": [
            9,
            87
          ],
          "match_string": "        const customerId = data.customer_id;\n        const model = await this.findOne({customer_id: customerId}, unfilteredOptions);"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const apiKeyRole = utils.findModelFixtureEntry('Role', {name: 'DB Backup Integration'});\n\n    return models.Role.findOne({name: apiKeyRole.name}, options)\n        .then((role) => {\n            if (!role) {\n                return utils.addFixturesForModel({\n                    name: 'Role',\n                    entries: [apiKeyRole]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.27/1-insert-ghost-db-backup-role.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            65
          ],
          "match_string": "    return models.Role.findOne({name: apiKeyRole.name}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.27/2-insert-db-backup-integration.js",
          "match_lines": [
            18,
            30
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const fixtureIntegration = utils.findModelFixtureEntry('Integration', {slug: 'ghost-backup'});\n\n    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)\n        .then((integration) => {\n            if (!integration) {\n                return utils.addFixturesForModel({\n                    name: 'Integration',\n                    entries: [fixtureIntegration]\n                }, options).then(result => _private.printResult(result, message));\n            }\n\n            logging.warn(message);\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/2.27/2-insert-db-backup-integration.js",
          "match_lines": [
            20,
            20
          ],
          "match_position": [
            12,
            80
          ],
          "match_string": "    return models.Integration.findOne({slug: fixtureIntegration.slug}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.21/1-add-contributor-role.js",
          "match_lines": [
            9,
            21
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const contributorRole = utils.findModelFixtureEntry('Role', {name: 'Contributor'});\n    const message = 'Adding \"Contributor\" role to roles table';\n\n    return models.Role.findOne({name: contributorRole.name}, options)\n        .then((role) => {\n            if (!role) {\n                logging.info(message);\n                return utils.addFixturesForModel({name: 'Role', entries: [contributorRole]}, options);\n            }\n\n            logging.warn(message);\n            return Promise.resolve();\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.21/1-add-contributor-role.js",
          "match_lines": [
            12,
            12
          ],
          "match_position": [
            12,
            70
          ],
          "match_string": "    return models.Role.findOne({name: contributorRole.name}, options)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.22/1-multiple-authors-DML.js",
          "match_lines": [
            29,
            29
          ],
          "match_position": [
            32,
            127
          ],
          "match_string": "                        return models.User.findOne({id: post.get('author_id')}, _.merge({columns: userColumns}, localOptions))"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.25/2-demo-post.js",
          "match_lines": [
            23,
            54
          ],
          "match_position": [
            5,
            12
          ],
          "match_string": "    const demoPost = _.cloneDeep(fixtures.models[5].entries[0]);\n\n    return models.Post.findOne({slug: demoPost.slug, status: 'all'}, localOptions)\n        .then((model) => {\n            if (model) {\n                logging.warn(message3);\n                return;\n            }\n\n            return models.User.findOne({id: fixtures.models[4].entries[1].id}, localOptions)\n                .then((ghostAuthor) => {\n                    if (ghostAuthor) {\n                        userId = ghostAuthor.id;\n                        return;\n                    }\n\n                    return models.User.getOwnerUser(localOptions);\n                })\n                .then((ownerUser) => {\n                    if (!userId) {\n                        userId = ownerUser.id;\n                    }\n\n                    demoPost.created_by = userId;\n                    demoPost.author_id = userId;\n\n                    return models.Post.add(demoPost, localOptions);\n                })\n                .then(() => {\n                    logging.info(message2);\n                });\n        });"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.25/2-demo-post.js",
          "match_lines": [
            25,
            25
          ],
          "match_position": [
            12,
            83
          ],
          "match_string": "    return models.Post.findOne({slug: demoPost.slug, status: 'all'}, localOptions)"
        },
        {
          "file_path": "/src/core/server/data/migrations/versions/1.25/2-demo-post.js",
          "match_lines": [
            32,
            32
          ],
          "match_position": [
            20,
            93
          ],
          "match_string": "            return models.User.findOne({id: fixtures.models[4].entries[1].id}, localOptions)"
        },
        {
          "file_path": "/src/core/server/api/v2/authentication.js",
          "match_lines": [
            181,
            183
          ],
          "match_position": [
            21,
            97
          ],
          "match_string": "                    const email = frame.data.email;\n\n                    return models.Invite.findOne({email: email, status: 'sent'}, frame.options);"
        },
        {
          "file_path": "/src/core/server/api/canary/utils/validators/input/invites.js",
          "match_lines": [
            8,
            8
          ],
          "match_position": [
            16,
            88
          ],
          "match_string": "        return models.User.findOne({email: frame.data.invites[0].email}, frame.options)"
        }
      ],
      "metadata": {
        "cwe": "CWE-943: Improper Neutralization of Special Elements in Data Query Logic",
        "description": "Untrusted user input in findOne() function can result in NoSQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_secret": {
      "files": [
        {
          "file_path": "/src/core/server/adapters/scheduling/post-scheduling/index.js",
          "match_lines": [
            60,
            60
          ],
          "match_position": [
            9,
            39
          ],
          "match_string": "        Buffer.from(key.secret, 'hex'),"
        },
        {
          "file_path": "/src/core/server/services/members/config.js",
          "match_lines": [
            209,
            209
          ],
          "match_position": [
            24,
            53
          ],
          "match_string": "        const secret = Buffer.from(hexSecret, 'hex');"
        },
        {
          "file_path": "/src/core/server/services/auth/api-key/admin.js",
          "match_lines": [
            130,
            130
          ],
          "match_position": [
            24,
            64
          ],
          "match_string": "        const secret = Buffer.from(apiKey.get('secret'), 'hex');"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded secret is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "node_sqli_injection": {
      "files": [
        {
          "file_path": "/src/core/server/api/shared/validators/input/all.js",
          "match_lines": [
            139,
            139
          ],
          "match_position": [
            21,
            74
          ],
          "match_string": "                if (jsonpath.query(frame.data[apiConfig.docName][0], key).length === 0) {"
        },
        {
          "file_path": "/src/core/server/models/plugins/has-posts.js",
          "match_lines": [
            35,
            35
          ],
          "match_position": [
            17,
            96
          ],
          "match_string": "                this.query(addHasPostsWhere(_.result(this, 'tableName'), this.shouldHavePosts));"
        },
        {
          "file_path": "/src/core/server/models/plugins/has-posts.js",
          "match_lines": [
            47,
            47
          ],
          "match_position": [
            17,
            96
          ],
          "match_string": "                this.query(addHasPostsWhere(_.result(this, 'tableName'), this.shouldHavePosts));"
        },
        {
          "file_path": "/src/core/server/models/plugins/eager-load.js",
          "match_lines": [
            39,
            39
          ],
          "match_position": [
            13,
            56
          ],
          "match_string": "            this.query(withEager(this, this.eagerLoad));"
        }
      ],
      "metadata": {
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "description": "Untrusted input concatinated with raw SQL query can result in SQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_timing_attack": {
      "files": [
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            21,
            21
          ],
          "match_position": [
            5,
            42
          ],
          "match_string": "    return hasher.digest('hex') === hash;"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            151,
            162
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        if (pass === bodyPass) {\n            hasher.update(bodyPass + salt, 'utf8');\n            req.session.token = hasher.digest('hex');\n            req.session.salt = salt;\n\n            return res.redirect(urlUtils.urlFor({relativeUrl: forward}));\n        } else {\n            res.error = {\n                message: i18n.t('errors.middleware.privateblogging.wrongPassword')\n            };\n            return next();\n        }"
        },
        {
          "file_path": "/src/core/server/data/validation/index.js",
          "match_lines": [
            120,
            122
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        if (badPassword === password) {\n            validationResult.isValid = false;\n        }"
        }
      ],
      "metadata": {
        "cwe": "CWE-208: Observable Timing Discrepancy",
        "description": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_username": {
      "files": [
        {
          "file_path": "/src/core/server/data/migrations/versions/4.0/16-refactor-slack-setting.js",
          "match_lines": [
            48,
            48
          ],
          "match_position": [
            9,
            32
          ],
          "match_string": "        slackUsername = 'Ghost';"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/core/server/models/tag.js",
          "match_lines": [
            100,
            100
          ],
          "match_position": [
            13,
            42
          ],
          "match_string": "        if (/^#/.test(newTag.get('name'))) {"
        },
        {
          "file_path": "/src/core/frontend/apps/private-blogging/lib/middleware.js",
          "match_lines": [
            88,
            88
          ],
          "match_position": [
            13,
            40
          ],
          "match_string": "        if (isPrivateRSS.test(req.path)) {"
        },
        {
          "file_path": "/src/core/server/web/site/middleware/handle-image-sizes.js",
          "match_lines": [
            12,
            12
          ],
          "match_position": [
            10,
            39
          ],
          "match_string": "    if (!SIZE_PATH_REGEX.test(req.url)) {"
        },
        {
          "file_path": "/src/core/server/web/site/middleware/handle-image-sizes.js",
          "match_lines": [
            16,
            16
          ],
          "match_position": [
            9,
            43
          ],
          "match_string": "    if (TRAILING_SLASH_REGEX.test(req.url)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    },
    "yaml_deserialize": {
      "files": [
        {
          "file_path": "/src/core/frontend/services/redirects/settings.js",
          "match_lines": [
            61,
            61
          ],
          "match_position": [
            26,
            44
          ],
          "match_string": "        let configYaml = yaml.load(content);"
        },
        {
          "file_path": "/src/core/frontend/services/settings/yaml-parser.js",
          "match_lines": [
            14,
            14
          ],
          "match_position": [
            24,
            39
          ],
          "match_string": "        const parsed = yaml.load(file);"
        }
      ],
      "metadata": {
        "cwe": "CWE-502: Deserialization of Untrusted Data",
        "description": "User controlled data in 'yaml.load()' function can result in Remote Code Injection.",
        "owasp": "A8: Insecure Deserialization",
        "severity": "ERROR"
      }
    }
  },
  "templates": {
    "handlebar_mustache_template": {
      "files": [
        {
          "file_path": "/src/content/themes/casper/error.hbs",
          "match_lines": [
            58,
            58
          ],
          "match_position": [
            2236,
            2246
          ],
          "match_string": "{{{rule}}}"
        },
        {
          "file_path": "/src/core/server/translations/en.json",
          "match_lines": [
            527,
            527
          ],
          "match_position": [
            28559,
            28575
          ],
          "match_string": "{{{helperName}}}"
        },
        {
          "file_path": "/src/core/frontend/helpers/tpl/content-cta.hbs",
          "match_lines": [
            1,
            1
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "{{{html}}}"
        },
        {
          "file_path": "/src/core/server/views/error.hbs",
          "match_lines": [
            42,
            42
          ],
          "match_position": [
            1780,
            1790
          ],
          "match_string": "{{{rule}}}"
        }
      ],
      "metadata": {
        "cwe": "CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "The Handlebar.js/Mustache.js template has an unescaped variable. Untrusted user input passed to this variable results in Cross Site Scripting (XSS).",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  }
}