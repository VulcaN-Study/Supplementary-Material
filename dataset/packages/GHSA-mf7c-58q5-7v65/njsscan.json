{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": ".lock-wscript",
          "message": "Syntax error"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 21,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) MapBox",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 3,
          "line": 7
        },
        "extra": {
          "line": "\t#rm -f ./test/support/big.db*",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/Makefile",
        "start": {
          "col": 2,
          "line": 7
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 67,
          "line": 3
        },
        "extra": {
          "line": "`npm explore npm -g -- pwd`/bin/node-gyp-bin/node-gyp configure $@",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/configure",
        "start": {
          "col": 66,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 17,
          "line": 2
        },
        "extra": {
          "line": "node-webkit-v0.8.4-osx-ia32.zip",
          "message": "Syntax error"
        },
        "path": "/src/test/nw/.npmignore",
        "start": {
          "col": 15,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 1,
          "line": 40
        },
        "extra": {
          "line": ".PHONY: test",
          "message": "Lexical error: WIERD end of file in regexp"
        },
        "path": "/src/test/nw/Makefile",
        "start": {
          "col": 1,
          "line": 40
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/test/prepare.test.js",
          "match_lines": [
            239,
            239
          ],
          "match_position": [
            26,
            37
          ],
          "match_string": "            for (var i = Math.random() * 300; i > 0; i--) {"
        },
        {
          "file_path": "/src/test/prepare.test.js",
          "match_lines": [
            240,
            240
          ],
          "match_position": [
            55,
            66
          ],
          "match_string": "                str += String.fromCharCode(Math.floor(Math.random() * 256));"
        },
        {
          "file_path": "/src/test/prepare.test.js",
          "match_lines": [
            247,
            247
          ],
          "match_position": [
            33,
            44
          ],
          "match_string": "        var length = Math.floor(Math.random() * 1000) + 200;"
        },
        {
          "file_path": "/src/test/prepare.test.js",
          "match_lines": [
            249,
            249
          ],
          "match_position": [
            48,
            59
          ],
          "match_string": "            data.push([ randomString(), i, i * Math.random(), null ]);"
        },
        {
          "file_path": "/src/test/support/createdb.js",
          "match_lines": [
            14,
            14
          ],
          "match_position": [
            18,
            29
          ],
          "match_string": "    for (var i = Math.random() * 100; i > 0; i--) {"
        },
        {
          "file_path": "/src/test/support/createdb.js",
          "match_lines": [
            15,
            15
          ],
          "match_position": [
            33,
            44
          ],
          "match_string": "        str += chars[Math.floor(Math.random() * chars.length)];"
        },
        {
          "file_path": "/src/test/unicode.test.js",
          "match_lines": [
            6,
            6
          ],
          "match_position": [
            18,
            29
          ],
          "match_string": "    for (var i = Math.random() * 300; i > 0; i--) {"
        },
        {
          "file_path": "/src/test/unicode.test.js",
          "match_lines": [
            7,
            7
          ],
          "match_position": [
            47,
            58
          ],
          "match_string": "        str += String.fromCharCode(Math.floor(Math.random() * 65536));"
        },
        {
          "file_path": "/src/test/unicode.test.js",
          "match_lines": [
            18,
            18
          ],
          "match_position": [
            29,
            40
          ],
          "match_string": "    var length = Math.floor(Math.random() * 1000) + 200;"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
