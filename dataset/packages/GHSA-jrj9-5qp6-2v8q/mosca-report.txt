<report_mosca>
 <Path>/src/build/airtable.browser.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 620 -              setTimeout(function() {

 Line: 958 -       (fn === window.setTimeout ||

 Line: 6487 -          timeoutTimer = setTimeout(function(){

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/build/airtable.browser.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 37 -  Base.prototype.runAction = function(method, path, queryParams, bodyData, callback) {

 Line: 38 -      runAction(this, method, path, queryParams, bodyData, callback, 0);

 Line: 263 -   * Builds a query object. Won't fetch until `firstPage` or

 Line: 268 -          throw new Error('Expected query options to be an object');

 Line: 287 -   * Fetches the first page of results for the query asynchronously,

 Line: 303 -   * Fetches each page of results for the query asynchronously.

 Line: 428 -          throw new Error('Expected query params to be an object');

 Line: 578 -  function runAction(base, method, path, queryParams, bodyData, callback, numAttempts) {

 Line: 621 -                  runAction(base, method, path, queryParams, bodyData, callback, numAttempts + 1);

 Line: 783 -          var queryParams = {records: recordIdsOrId};

 Line: 784 -          this._base.runAction('delete', '/' + this._urlEncodedNameOrId(), queryParams, null, function(err, response, results) {

 Line: 1277 -   * @param {*} value The value to query.

 Line: 1783 -   * @param {Object} object The object to query.

 Line: 1811 -   * @param {Object} object The object to query.

 Line: 1839 -   * @param {*} value The value to query.

 Line: 1858 -   * @param {Object} [object] The object to query.

 Line: 2301 -   * @param {Object} object The object to query.

 Line: 2334 -   * @param {Object} object The object to query.

 Line: 2600 -   * @param {Object} object The object to query.

 Line: 2617 -   * @param {Object} cache The cache to query.

 Line: 2654 -   * @param {Object} [object] The object to query keys on.

 Line: 3324 -   * @param {Object} object The object to query.

 Line: 3343 -   * @param {Object} object The object to query.

 Line: 3359 -   * @param {Object} map The map to query.

 Line: 3380 -   * @param {Object} object The object to query.

 Line: 3406 -   * @param {Object} object The object to query.

 Line: 3448 -   * @param {*} value The value to query.

 Line: 3490 -   * @param {Object} object The object to query.

 Line: 3518 -   * @param {Object} object The object to query.

 Line: 3561 -   * @param {*} value The value to query.

 Line: 3597 -   * @param {Object} [object] The object to query.

 Line: 3619 -   * @param {Object} object The object to query.

 Line: 3965 -   * @param {Object} [object] The object to query keys on.

 Line: 4374 -   * @param {Object} object The object to query.

 Line: 5052 -   * @param {Object} object The object to query.

 Line: 5087 -   * @param {Object} object The object to query.

 Line: 5768 -   * @param {Object} object The object to query.

 Line: 5805 -   * @param {Object} object The object to query.

 Line: 6227 -   * @param {Object} object The object to query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/run_action.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 61 -              setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/run_action.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -  function runAction(base, method, path, queryParams, bodyData, callback, numAttempts) {

 Line: 62 -                  runAction(base, method, path, queryParams, bodyData, callback, numAttempts + 1);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/base.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -  Base.prototype.runAction = function(method, path, queryParams, bodyData, callback) {

 Line: 18 -      runAction(this, method, path, queryParams, bodyData, callback, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -   * Builds a query object. Won't fetch until `firstPage` or

 Line: 23 -          throw new Error('Expected query options to be an object');

 Line: 42 -   * Fetches the first page of results for the query asynchronously,

 Line: 58 -   * Fetches each page of results for the query asynchronously.

 Line: 183 -          throw new Error('Expected query params to be an object');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/table.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 149 -          var queryParams = {records: recordIdsOrId};

 Line: 150 -          this._base.runAction('delete', '/' + this._urlEncodedNameOrId(), queryParams, null, function(err, response, results) {

</Result>
</report_mosca>

