{
  "errors": [
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/postgres/PostgresQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.dos.regex_dos",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/mysql/MysqlQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/postgres/PostgresQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.dos.regex_dos",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.dos.regex_dos",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/oracle/OracleQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/sap/SapQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/mysql/MysqlQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.dos.regex_dos",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/query-builder/SelectQueryBuilder.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.dos.regex_dos",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.dos.regex_dos",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/query-builder/SelectQueryBuilder.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/oracle/OracleQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/query-builder/SelectQueryBuilder.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.xml.node_xpath_injection",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/sap/SapQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/persistence/SubjectExecutor.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.dos.regex_dos",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.dos.regex_dos",
      "type": "MatchTimeoutError"
    },
    {
      "code": 9,
      "level": "warn",
      "path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
      "rule_id": "usr.local.lib.python3.8.site-packages.njsscan.rules.semantic_grep.headers.cookie_session_default",
      "type": "MatchTimeoutError"
    }
  ],
  "njsscan_version": "0.2.8",
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/driver/postgres/PostgresDriver.js",
          "match_lines": [
            793,
            793
          ],
          "match_position": [
            37,
            50
          ],
          "match_string": "            var random = Math.floor(Math.random() * _this.slaves.length);"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachDriver.js",
          "match_lines": [
            508,
            508
          ],
          "match_position": [
            37,
            50
          ],
          "match_string": "            var random = Math.floor(Math.random() * _this.slaves.length);"
        },
        {
          "file_path": "/src/browser/util/RandomGenerator.js",
          "match_lines": [
            133,
            133
          ],
          "match_position": [
            21,
            34
          ],
          "match_string": "            var r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);"
        },
        {
          "file_path": "/src/util/RandomGenerator.js",
          "match_lines": [
            135,
            135
          ],
          "match_position": [
            21,
            34
          ],
          "match_string": "            var r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerDriver.js",
          "match_lines": [
            516,
            516
          ],
          "match_position": [
            33,
            46
          ],
          "match_string": "        var random = Math.floor(Math.random() * this.slaves.length);"
        },
        {
          "file_path": "/src/browser/driver/oracle/OracleDriver.js",
          "match_lines": [
            506,
            506
          ],
          "match_position": [
            37,
            50
          ],
          "match_string": "            var random = Math.floor(Math.random() * _this.slaves.length);"
        },
        {
          "file_path": "/src/driver/oracle/OracleDriver.js",
          "match_lines": [
            508,
            508
          ],
          "match_position": [
            37,
            50
          ],
          "match_string": "            var random = Math.floor(Math.random() * _this.slaves.length);"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerDriver.js",
          "match_lines": [
            514,
            514
          ],
          "match_position": [
            33,
            46
          ],
          "match_string": "        var random = Math.floor(Math.random() * this.slaves.length);"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresDriver.js",
          "match_lines": [
            791,
            791
          ],
          "match_position": [
            37,
            50
          ],
          "match_string": "            var random = Math.floor(Math.random() * _this.slaves.length);"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachDriver.js",
          "match_lines": [
            506,
            506
          ],
          "match_position": [
            37,
            50
          ],
          "match_string": "            var random = Math.floor(Math.random() * _this.slaves.length);"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_sqli_injection": {
      "files": [
        {
          "file_path": "/src/query-runner/BaseQueryRunner.js",
          "match_lines": [
            157,
            157
          ],
          "match_position": [
            148,
            194
          ],
          "match_string": "                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.sqlInMemory.upQueries, function (upQuery) { return _this.query(upQuery.query, upQuery.parameters); })];"
        },
        {
          "file_path": "/src/query-runner/BaseQueryRunner.js",
          "match_lines": [
            173,
            173
          ],
          "match_position": [
            162,
            212
          ],
          "match_string": "                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.sqlInMemory.downQueries.reverse(), function (downQuery) { return _this.query(downQuery.query, downQuery.parameters); })];"
        },
        {
          "file_path": "/src/query-runner/BaseQueryRunner.js",
          "match_lines": [
            393,
            393
          ],
          "match_position": [
            127,
            173
          ],
          "match_string": "                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(upQueries, function (upQuery) { return _this.query(upQuery.query, upQuery.parameters); })];"
        },
        {
          "file_path": "/src/query-builder/UpdateQueryBuilder.js",
          "match_lines": [
            92,
            92
          ],
          "match_position": [
            46,
            148
          ],
          "match_string": "                        return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(\";\\n\\n\"), parameters)];"
        },
        {
          "file_path": "/src/query-builder/InsertQueryBuilder.js",
          "match_lines": [
            87,
            87
          ],
          "match_position": [
            46,
            148
          ],
          "match_string": "                        return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(\";\\n\\n\"), parameters)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            205,
            232
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        var QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, stream, err_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        stream = databaseConnection.query(new QueryStream(query, parameters));\n                        if (onEnd)\n                            stream.on(\"end\", onEnd);\n                        if (onError)\n                            stream.on(\"error\", onError);\n                        ok(stream);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_2 = _a.sent();\n                        fail(err_2);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); });"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            290,
            292
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            291,
            292
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            309,
            311
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            310,
            311
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1780,
            1780
          ],
          "match_position": [
            50,
            108
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableName))];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1874,
            1884
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (viewName) {\n                            var _a = tslib_1.__read(viewName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1882,
            1884
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1915,
            1984
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT *, ('\\\"' || \\\"udt_schema\\\" || '\\\".\\\"' || \\\"udt_name\\\" || '\\\"')::\\\"regtype\\\" AS \\\"regtype\\\" FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \" + tablesCondition;\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \" +\n                            \"\\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\", \\\"con\\\".\\\"condeferrable\\\" AS \\\"deferrable\\\", \\\"con\\\".\\\"condeferred\\\" AS \\\"deferred\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \" +\n                            \"\\\"cl\\\".\\\"relname\\\", \\\"con1\\\".\\\"condeferrable\\\", \" +\n                            \"CASE WHEN \\\"con1\\\".\\\"condeferred\\\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1925,
            1984
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \" +\n                            \"\\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\", \\\"con\\\".\\\"condeferrable\\\" AS \\\"deferrable\\\", \\\"con\\\".\\\"condeferred\\\" AS \\\"deferred\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \" +\n                            \"\\\"cl\\\".\\\"relname\\\", \\\"con1\\\".\\\"condeferrable\\\", \" +\n                            \"CASE WHEN \\\"con1\\\".\\\"condeferred\\\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1952,
            1984
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \" +\n                            \"\\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\", \\\"con\\\".\\\"condeferrable\\\" AS \\\"deferrable\\\", \\\"con\\\".\\\"condeferred\\\" AS \\\"deferred\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \" +\n                            \"\\\"cl\\\".\\\"relname\\\", \\\"con1\\\".\\\"condeferrable\\\", \" +\n                            \"CASE WHEN \\\"con1\\\".\\\"condeferred\\\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1997,
            2110
          ],
          "match_position": [
            45,
            58
          ],
          "match_string": "                                            table = new Table_1.Table();\n                                            schema = dbTable[\"table_schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"table_schema\"];\n                                            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n                                            tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\n                                            // create columns from the loaded columns\n                                            _a = table;\n                                            return [4 /*yield*/, Promise.all(dbColumns\n                                                    .filter(function (dbColumn) { return _this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName; })\n                                                    .map(function (dbColumn) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                    var columnConstraints, tableColumn, type, sql, results, geometryColumnSql, results, geographyColumnSql, results, length, uniqueConstraint, isConstraintComposite;\n                                                    var _this = this;\n                                                    return tslib_1.__generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                                                                    return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                                                                });\n                                                                tableColumn = new TableColumn_1.TableColumn();\n                                                                tableColumn.name = dbColumn[\"column_name\"];\n                                                                tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n                                                                if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                                                                    // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                                                                    // we set 'undefined' in to unspecified property to avoid changing column on sync\n                                                                    if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.precision = dbColumn[\"numeric_precision\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.precision = undefined;\n                                                                    }\n                                                                    if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.scale = dbColumn[\"numeric_scale\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.scale = undefined;\n                                                                    }\n                                                                }\n                                                                if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                                                                    tableColumn.isArray = true;\n                                                                    type = tableColumn.type.replace(\"[]\", \"\");\n                                                                    tableColumn.type = this.connection.driver.normalizeType({ type: type });\n                                                                }\n                                                                if (tableColumn.type === \"interval\"\n                                                                    || tableColumn.type === \"time without time zone\"\n                                                                    || tableColumn.type === \"time with time zone\"\n                                                                    || tableColumn.type === \"timestamp without time zone\"\n                                                                    || tableColumn.type === \"timestamp with time zone\") {\n                                                                    tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                                                                }\n                                                                if (!(tableColumn.type.indexOf(\"enum\") !== -1)) return [3 /*break*/, 2];\n                                                                tableColumn.type = \"enum\";\n                                                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                                                                    (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + this.buildEnumName(table, tableColumn.name, false, true) + \"'\");\n                                                                return [4 /*yield*/, this.query(sql)];\n                                                            case 1:\n                                                                results = _a.sent();\n                                                                tableColumn.enum = results.map(function (result) { return result[\"value\"]; });\n                                                                _a.label = 2;\n                                                            case 2:\n                                                                if (!(tableColumn.type === \"geometry\")) return [3 /*break*/, 4];\n                                                                geometryColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geometry_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geometry_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geometryColumnSql)];\n                                                            case 3:\n                                                                results = _a.sent();\n                                                                tableColumn.spatialFeatureType = results[0].type;\n                                                                tableColumn.srid = results[0].srid;\n                                                                _a.label = 4;\n                                                            case 4:\n                                                                if (!(tableColumn.type === \"geography\")) return [3 /*break*/, 6];\n                                                                geographyColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geography_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geography_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geographyColumnSql)];\n                                                            case 5:\n                                                                results = _a.sent();\n                                                                tableColumn.spatialFeatureType = results[0].type;\n                                                                tableColumn.srid = results[0].srid;\n                                                                _a.label = 6;\n                                                            case 6:\n                                                                // check only columns that have length property\n                                                                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"character_maximum_length\"]) {\n                                                                    length = dbColumn[\"character_maximum_length\"].toString();\n                                                                    tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                                                                }\n                                                                tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                                                                tableColumn.isPrimary = !!columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"PRIMARY\"; });\n                                                                uniqueConstraint = columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"UNIQUE\"; });\n                                                                isConstraintComposite = uniqueConstraint\n                                                                    ? !!dbConstraints.find(function (dbConstraint) { return dbConstraint[\"constraint_type\"] === \"UNIQUE\"\n                                                                        && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\n                                                                        && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"]; })\n                                                                    : false;\n                                                                tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                                                                if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                                                                    if (dbColumn[\"column_default\"].replace(/\"/gi, \"\") === \"nextval('\" + this.buildSequenceName(table, dbColumn[\"column_name\"], currentSchema, true) + \"'::regclass)\") {\n                                                                        tableColumn.isGenerated = true;\n                                                                        tableColumn.generationStrategy = \"increment\";\n                                                                    }\n                                                                    else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\" || /^uuid_generate_v\\d\\(\\)/.test(dbColumn[\"column_default\"])) {\n                                                                        tableColumn.isGenerated = true;\n                                                                        tableColumn.generationStrategy = \"uuid\";\n                                                                    }\n                                                                    else {\n                                                                        tableColumn.default = dbColumn[\"column_default\"].replace(/::.*/, \"\");\n                                                                    }\n                                                                }\n                                                                tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                                                                if (dbColumn[\"character_set_name\"])\n                                                                    tableColumn.charset = dbColumn[\"character_set_name\"];\n                                                                if (dbColumn[\"collation_name\"])\n                                                                    tableColumn.collation = dbColumn[\"collation_name\"];\n                                                                return [2 /*return*/, tableColumn];\n                                                        }\n                                                    });\n                                                }); }))];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1999,
            2110
          ],
          "match_position": [
            45,
            58
          ],
          "match_string": "                                            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n                                            tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\n                                            // create columns from the loaded columns\n                                            _a = table;\n                                            return [4 /*yield*/, Promise.all(dbColumns\n                                                    .filter(function (dbColumn) { return _this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName; })\n                                                    .map(function (dbColumn) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                    var columnConstraints, tableColumn, type, sql, results, geometryColumnSql, results, geographyColumnSql, results, length, uniqueConstraint, isConstraintComposite;\n                                                    var _this = this;\n                                                    return tslib_1.__generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                                                                    return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                                                                });\n                                                                tableColumn = new TableColumn_1.TableColumn();\n                                                                tableColumn.name = dbColumn[\"column_name\"];\n                                                                tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n                                                                if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                                                                    // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                                                                    // we set 'undefined' in to unspecified property to avoid changing column on sync\n                                                                    if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.precision = dbColumn[\"numeric_precision\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.precision = undefined;\n                                                                    }\n                                                                    if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.scale = dbColumn[\"numeric_scale\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.scale = undefined;\n                                                                    }\n                                                                }\n                                                                if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                                                                    tableColumn.isArray = true;\n                                                                    type = tableColumn.type.replace(\"[]\", \"\");\n                                                                    tableColumn.type = this.connection.driver.normalizeType({ type: type });\n                                                                }\n                                                                if (tableColumn.type === \"interval\"\n                                                                    || tableColumn.type === \"time without time zone\"\n                                                                    || tableColumn.type === \"time with time zone\"\n                                                                    || tableColumn.type === \"timestamp without time zone\"\n                                                                    || tableColumn.type === \"timestamp with time zone\") {\n                                                                    tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                                                                }\n                                                                if (!(tableColumn.type.indexOf(\"enum\") !== -1)) return [3 /*break*/, 2];\n                                                                tableColumn.type = \"enum\";\n                                                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                                                                    (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + this.buildEnumName(table, tableColumn.name, false, true) + \"'\");\n                                                                return [4 /*yield*/, this.query(sql)];\n                                                            case 1:\n                                                                results = _a.sent();\n                                                                tableColumn.enum = results.map(function (result) { return result[\"value\"]; });\n                                                                _a.label = 2;\n                                                            case 2:\n                                                                if (!(tableColumn.type === \"geometry\")) return [3 /*break*/, 4];\n                                                                geometryColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geometry_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geometry_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geometryColumnSql)];\n                                                            case 3:\n                                                                results = _a.sent();\n                                                                tableColumn.spatialFeatureType = results[0].type;\n                                                                tableColumn.srid = results[0].srid;\n                                                                _a.label = 4;\n                                                            case 4:\n                                                                if (!(tableColumn.type === \"geography\")) return [3 /*break*/, 6];\n                                                                geographyColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geography_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geography_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geographyColumnSql)];\n                                                            case 5:\n                                                                results = _a.sent();\n                                                                tableColumn.spatialFeatureType = results[0].type;\n                                                                tableColumn.srid = results[0].srid;\n                                                                _a.label = 6;\n                                                            case 6:\n                                                                // check only columns that have length property\n                                                                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"character_maximum_length\"]) {\n                                                                    length = dbColumn[\"character_maximum_length\"].toString();\n                                                                    tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                                                                }\n                                                                tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                                                                tableColumn.isPrimary = !!columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"PRIMARY\"; });\n                                                                uniqueConstraint = columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"UNIQUE\"; });\n                                                                isConstraintComposite = uniqueConstraint\n                                                                    ? !!dbConstraints.find(function (dbConstraint) { return dbConstraint[\"constraint_type\"] === \"UNIQUE\"\n                                                                        && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\n                                                                        && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"]; })\n                                                                    : false;\n                                                                tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                                                                if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                                                                    if (dbColumn[\"column_default\"].replace(/\"/gi, \"\") === \"nextval('\" + this.buildSequenceName(table, dbColumn[\"column_name\"], currentSchema, true) + \"'::regclass)\") {\n                                                                        tableColumn.isGenerated = true;\n                                                                        tableColumn.generationStrategy = \"increment\";\n                                                                    }\n                                                                    else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\" || /^uuid_generate_v\\d\\(\\)/.test(dbColumn[\"column_default\"])) {\n                                                                        tableColumn.isGenerated = true;\n                                                                        tableColumn.generationStrategy = \"uuid\";\n                                                                    }\n                                                                    else {\n                                                                        tableColumn.default = dbColumn[\"column_default\"].replace(/::.*/, \"\");\n                                                                    }\n                                                                }\n                                                                tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                                                                if (dbColumn[\"character_set_name\"])\n                                                                    tableColumn.charset = dbColumn[\"character_set_name\"];\n                                                                if (dbColumn[\"collation_name\"])\n                                                                    tableColumn.collation = dbColumn[\"collation_name\"];\n                                                                return [2 /*return*/, tableColumn];\n                                                        }\n                                                    });\n                                                }); }))];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2014,
            2051
          ],
          "match_position": [
            65,
            103
          ],
          "match_string": "                                                                tableColumn = new TableColumn_1.TableColumn();\n                                                                tableColumn.name = dbColumn[\"column_name\"];\n                                                                tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n                                                                if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                                                                    // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                                                                    // we set 'undefined' in to unspecified property to avoid changing column on sync\n                                                                    if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.precision = dbColumn[\"numeric_precision\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.precision = undefined;\n                                                                    }\n                                                                    if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.scale = dbColumn[\"numeric_scale\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.scale = undefined;\n                                                                    }\n                                                                }\n                                                                if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                                                                    tableColumn.isArray = true;\n                                                                    type = tableColumn.type.replace(\"[]\", \"\");\n                                                                    tableColumn.type = this.connection.driver.normalizeType({ type: type });\n                                                                }\n                                                                if (tableColumn.type === \"interval\"\n                                                                    || tableColumn.type === \"time without time zone\"\n                                                                    || tableColumn.type === \"time with time zone\"\n                                                                    || tableColumn.type === \"timestamp without time zone\"\n                                                                    || tableColumn.type === \"timestamp with time zone\") {\n                                                                    tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                                                                }\n                                                                if (!(tableColumn.type.indexOf(\"enum\") !== -1)) return [3 /*break*/, 2];\n                                                                tableColumn.type = \"enum\";\n                                                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                                                                    (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + this.buildEnumName(table, tableColumn.name, false, true) + \"'\");\n                                                                return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2047,
            2051
          ],
          "match_position": [
            65,
            103
          ],
          "match_string": "                                                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                                                                    (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + this.buildEnumName(table, tableColumn.name, false, true) + \"'\");\n                                                                return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2058,
            2059
          ],
          "match_position": [
            65,
            117
          ],
          "match_string": "                                                                geometryColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geometry_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geometry_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geometryColumnSql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2067,
            2068
          ],
          "match_position": [
            65,
            118
          ],
          "match_string": "                                                                geographyColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geography_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geography_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geographyColumnSql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2379,
            2384
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        schema = this.parseTableName(table).schema;\n                        enumName = this.buildEnumName(table, column, false, true);\n                        sql = \"SELECT \\\"n\\\".\\\"nspname\\\", \\\"t\\\".\\\"typname\\\" FROM \\\"pg_type\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                            (\"WHERE \\\"n\\\".\\\"nspname\\\" = \" + schema + \" AND \\\"t\\\".\\\"typname\\\" = '\" + enumName + \"'\");\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2380,
            2384
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        enumName = this.buildEnumName(table, column, false, true);\n                        sql = \"SELECT \\\"n\\\".\\\"nspname\\\", \\\"t\\\".\\\"typname\\\" FROM \\\"pg_type\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                            (\"WHERE \\\"n\\\".\\\"nspname\\\" = \" + schema + \" AND \\\"t\\\".\\\"typname\\\" = '\" + enumName + \"'\");\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2562,
            2563
          ],
          "match_position": [
            46,
            197
          ],
          "match_string": "                        return [4 /*yield*/, this.query(\"SELECT \\\"udt_schema\\\", \\\"udt_name\\\" \" +\n                                (\"FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"' AND \\\"column_name\\\"='\" + column.name + \"'\"))];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            153,
            153
          ],
          "match_position": [
            113,
            147
          ],
          "match_string": "                        return [4 /*yield*/, __1.PromiseUtils.runInSequence(this.queries, function (q) { return _this.query(q.query, q.parameters); })];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            247,
            274
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        var QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, stream, err_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        stream = databaseConnection.query(new QueryStream(query, parameters));\n                        if (onEnd)\n                            stream.on(\"end\", onEnd);\n                        if (onError)\n                            stream.on(\"error\", onError);\n                        ok(stream);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_2 = _a.sent();\n                        fail(err_2);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); });"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            338,
            340
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            339,
            340
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            357,
            359
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            358,
            359
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1700,
            1700
          ],
          "match_position": [
            50,
            108
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableName))];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1798,
            1808
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (viewName) {\n                            var _a = tslib_1.__read(viewName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1806,
            1808
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1839,
            1905
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"is_hidden\\\" = 'NO' AND \" + tablesCondition;\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \\\"cl\\\".\\\"relname\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1849,
            1905
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \\\"cl\\\".\\\"relname\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1876,
            1905
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \\\"cl\\\".\\\"relname\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            226,
            228
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            227,
            228
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            245,
            248
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        columnName = column instanceof TableColumn_1.TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            246,
            248
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        columnName = column instanceof TableColumn_1.TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            247,
            248
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1422,
            1422
          ],
          "match_position": [
            50,
            110
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableOrName))];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1534,
            1544
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`t`.`schema` = '\" + database + \"' AND `t`.`name` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1542,
            1544
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1574,
            1617
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`TABLE_SCHEMA` = '\" + database + \"' AND `TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE \" + tablesCondition;\n                        primaryKeySql = \"SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (\" + tablesCondition + \")\";\n                        collationsSql = \"SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1586,
            1617
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1597,
            1617
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/commands/QueryCommand.js",
          "match_lines": [
            59,
            59
          ],
          "match_position": [
            46,
            74
          ],
          "match_string": "                        return [4 /*yield*/, queryRunner.query(args._[1])];"
        },
        {
          "file_path": "/src/browser/query-runner/BaseQueryRunner.js",
          "match_lines": [
            155,
            155
          ],
          "match_position": [
            133,
            179
          ],
          "match_string": "                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.sqlInMemory.upQueries, function (upQuery) { return _this.query(upQuery.query, upQuery.parameters); })];"
        },
        {
          "file_path": "/src/browser/query-runner/BaseQueryRunner.js",
          "match_lines": [
            171,
            171
          ],
          "match_position": [
            147,
            197
          ],
          "match_string": "                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.sqlInMemory.downQueries.reverse(), function (downQuery) { return _this.query(downQuery.query, downQuery.parameters); })];"
        },
        {
          "file_path": "/src/browser/query-runner/BaseQueryRunner.js",
          "match_lines": [
            391,
            391
          ],
          "match_position": [
            112,
            158
          ],
          "match_string": "                        return [4 /*yield*/, PromiseUtils.runInSequence(upQueries, function (upQuery) { return _this.query(upQuery.query, upQuery.parameters); })];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            203,
            230
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        var QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, stream, err_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        stream = databaseConnection.query(new QueryStream(query, parameters));\n                        if (onEnd)\n                            stream.on(\"end\", onEnd);\n                        if (onError)\n                            stream.on(\"error\", onError);\n                        ok(stream);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_2 = _a.sent();\n                        fail(err_2);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); });"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            288,
            290
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            289,
            290
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            307,
            309
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            308,
            309
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1778,
            1778
          ],
          "match_position": [
            50,
            108
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableName))];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1872,
            1882
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (viewName) {\n                            var _a = tslib_1.__read(viewName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1880,
            1882
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1913,
            1982
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT *, ('\\\"' || \\\"udt_schema\\\" || '\\\".\\\"' || \\\"udt_name\\\" || '\\\"')::\\\"regtype\\\" AS \\\"regtype\\\" FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \" + tablesCondition;\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \" +\n                            \"\\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\", \\\"con\\\".\\\"condeferrable\\\" AS \\\"deferrable\\\", \\\"con\\\".\\\"condeferred\\\" AS \\\"deferred\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \" +\n                            \"\\\"cl\\\".\\\"relname\\\", \\\"con1\\\".\\\"condeferrable\\\", \" +\n                            \"CASE WHEN \\\"con1\\\".\\\"condeferred\\\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1923,
            1982
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \" +\n                            \"\\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\", \\\"con\\\".\\\"condeferrable\\\" AS \\\"deferrable\\\", \\\"con\\\".\\\"condeferred\\\" AS \\\"deferred\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \" +\n                            \"\\\"cl\\\".\\\"relname\\\", \\\"con1\\\".\\\"condeferrable\\\", \" +\n                            \"CASE WHEN \\\"con1\\\".\\\"condeferred\\\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1950,
            1982
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \" +\n                            \"\\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\", \\\"con\\\".\\\"condeferrable\\\" AS \\\"deferrable\\\", \\\"con\\\".\\\"condeferred\\\" AS \\\"deferred\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \" +\n                            \"\\\"cl\\\".\\\"relname\\\", \\\"con1\\\".\\\"condeferrable\\\", \" +\n                            \"CASE WHEN \\\"con1\\\".\\\"condeferred\\\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1995,
            2108
          ],
          "match_position": [
            45,
            58
          ],
          "match_string": "                                            table = new Table();\n                                            schema = dbTable[\"table_schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"table_schema\"];\n                                            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n                                            tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\n                                            // create columns from the loaded columns\n                                            _a = table;\n                                            return [4 /*yield*/, Promise.all(dbColumns\n                                                    .filter(function (dbColumn) { return _this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName; })\n                                                    .map(function (dbColumn) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                    var columnConstraints, tableColumn, type, sql, results, geometryColumnSql, results, geographyColumnSql, results, length_1, uniqueConstraint, isConstraintComposite;\n                                                    var _this = this;\n                                                    return tslib_1.__generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                                                                    return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                                                                });\n                                                                tableColumn = new TableColumn();\n                                                                tableColumn.name = dbColumn[\"column_name\"];\n                                                                tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n                                                                if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                                                                    // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                                                                    // we set 'undefined' in to unspecified property to avoid changing column on sync\n                                                                    if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.precision = dbColumn[\"numeric_precision\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.precision = undefined;\n                                                                    }\n                                                                    if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.scale = dbColumn[\"numeric_scale\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.scale = undefined;\n                                                                    }\n                                                                }\n                                                                if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                                                                    tableColumn.isArray = true;\n                                                                    type = tableColumn.type.replace(\"[]\", \"\");\n                                                                    tableColumn.type = this.connection.driver.normalizeType({ type: type });\n                                                                }\n                                                                if (tableColumn.type === \"interval\"\n                                                                    || tableColumn.type === \"time without time zone\"\n                                                                    || tableColumn.type === \"time with time zone\"\n                                                                    || tableColumn.type === \"timestamp without time zone\"\n                                                                    || tableColumn.type === \"timestamp with time zone\") {\n                                                                    tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                                                                }\n                                                                if (!(tableColumn.type.indexOf(\"enum\") !== -1)) return [3 /*break*/, 2];\n                                                                tableColumn.type = \"enum\";\n                                                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                                                                    (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + this.buildEnumName(table, tableColumn.name, false, true) + \"'\");\n                                                                return [4 /*yield*/, this.query(sql)];\n                                                            case 1:\n                                                                results = _a.sent();\n                                                                tableColumn.enum = results.map(function (result) { return result[\"value\"]; });\n                                                                _a.label = 2;\n                                                            case 2:\n                                                                if (!(tableColumn.type === \"geometry\")) return [3 /*break*/, 4];\n                                                                geometryColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geometry_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geometry_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geometryColumnSql)];\n                                                            case 3:\n                                                                results = _a.sent();\n                                                                tableColumn.spatialFeatureType = results[0].type;\n                                                                tableColumn.srid = results[0].srid;\n                                                                _a.label = 4;\n                                                            case 4:\n                                                                if (!(tableColumn.type === \"geography\")) return [3 /*break*/, 6];\n                                                                geographyColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geography_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geography_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geographyColumnSql)];\n                                                            case 5:\n                                                                results = _a.sent();\n                                                                tableColumn.spatialFeatureType = results[0].type;\n                                                                tableColumn.srid = results[0].srid;\n                                                                _a.label = 6;\n                                                            case 6:\n                                                                // check only columns that have length property\n                                                                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"character_maximum_length\"]) {\n                                                                    length_1 = dbColumn[\"character_maximum_length\"].toString();\n                                                                    tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : \"\";\n                                                                }\n                                                                tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                                                                tableColumn.isPrimary = !!columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"PRIMARY\"; });\n                                                                uniqueConstraint = columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"UNIQUE\"; });\n                                                                isConstraintComposite = uniqueConstraint\n                                                                    ? !!dbConstraints.find(function (dbConstraint) { return dbConstraint[\"constraint_type\"] === \"UNIQUE\"\n                                                                        && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\n                                                                        && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"]; })\n                                                                    : false;\n                                                                tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                                                                if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                                                                    if (dbColumn[\"column_default\"].replace(/\"/gi, \"\") === \"nextval('\" + this.buildSequenceName(table, dbColumn[\"column_name\"], currentSchema, true) + \"'::regclass)\") {\n                                                                        tableColumn.isGenerated = true;\n                                                                        tableColumn.generationStrategy = \"increment\";\n                                                                    }\n                                                                    else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\" || /^uuid_generate_v\\d\\(\\)/.test(dbColumn[\"column_default\"])) {\n                                                                        tableColumn.isGenerated = true;\n                                                                        tableColumn.generationStrategy = \"uuid\";\n                                                                    }\n                                                                    else {\n                                                                        tableColumn.default = dbColumn[\"column_default\"].replace(/::.*/, \"\");\n                                                                    }\n                                                                }\n                                                                tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                                                                if (dbColumn[\"character_set_name\"])\n                                                                    tableColumn.charset = dbColumn[\"character_set_name\"];\n                                                                if (dbColumn[\"collation_name\"])\n                                                                    tableColumn.collation = dbColumn[\"collation_name\"];\n                                                                return [2 /*return*/, tableColumn];\n                                                        }\n                                                    });\n                                                }); }))];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            1997,
            2108
          ],
          "match_position": [
            45,
            58
          ],
          "match_string": "                                            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n                                            tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\n                                            // create columns from the loaded columns\n                                            _a = table;\n                                            return [4 /*yield*/, Promise.all(dbColumns\n                                                    .filter(function (dbColumn) { return _this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName; })\n                                                    .map(function (dbColumn) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                    var columnConstraints, tableColumn, type, sql, results, geometryColumnSql, results, geographyColumnSql, results, length_1, uniqueConstraint, isConstraintComposite;\n                                                    var _this = this;\n                                                    return tslib_1.__generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                                                                    return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                                                                });\n                                                                tableColumn = new TableColumn();\n                                                                tableColumn.name = dbColumn[\"column_name\"];\n                                                                tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n                                                                if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                                                                    // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                                                                    // we set 'undefined' in to unspecified property to avoid changing column on sync\n                                                                    if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.precision = dbColumn[\"numeric_precision\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.precision = undefined;\n                                                                    }\n                                                                    if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.scale = dbColumn[\"numeric_scale\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.scale = undefined;\n                                                                    }\n                                                                }\n                                                                if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                                                                    tableColumn.isArray = true;\n                                                                    type = tableColumn.type.replace(\"[]\", \"\");\n                                                                    tableColumn.type = this.connection.driver.normalizeType({ type: type });\n                                                                }\n                                                                if (tableColumn.type === \"interval\"\n                                                                    || tableColumn.type === \"time without time zone\"\n                                                                    || tableColumn.type === \"time with time zone\"\n                                                                    || tableColumn.type === \"timestamp without time zone\"\n                                                                    || tableColumn.type === \"timestamp with time zone\") {\n                                                                    tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                                                                }\n                                                                if (!(tableColumn.type.indexOf(\"enum\") !== -1)) return [3 /*break*/, 2];\n                                                                tableColumn.type = \"enum\";\n                                                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                                                                    (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + this.buildEnumName(table, tableColumn.name, false, true) + \"'\");\n                                                                return [4 /*yield*/, this.query(sql)];\n                                                            case 1:\n                                                                results = _a.sent();\n                                                                tableColumn.enum = results.map(function (result) { return result[\"value\"]; });\n                                                                _a.label = 2;\n                                                            case 2:\n                                                                if (!(tableColumn.type === \"geometry\")) return [3 /*break*/, 4];\n                                                                geometryColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geometry_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geometry_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geometryColumnSql)];\n                                                            case 3:\n                                                                results = _a.sent();\n                                                                tableColumn.spatialFeatureType = results[0].type;\n                                                                tableColumn.srid = results[0].srid;\n                                                                _a.label = 4;\n                                                            case 4:\n                                                                if (!(tableColumn.type === \"geography\")) return [3 /*break*/, 6];\n                                                                geographyColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geography_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geography_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geographyColumnSql)];\n                                                            case 5:\n                                                                results = _a.sent();\n                                                                tableColumn.spatialFeatureType = results[0].type;\n                                                                tableColumn.srid = results[0].srid;\n                                                                _a.label = 6;\n                                                            case 6:\n                                                                // check only columns that have length property\n                                                                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"character_maximum_length\"]) {\n                                                                    length_1 = dbColumn[\"character_maximum_length\"].toString();\n                                                                    tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : \"\";\n                                                                }\n                                                                tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                                                                tableColumn.isPrimary = !!columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"PRIMARY\"; });\n                                                                uniqueConstraint = columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"UNIQUE\"; });\n                                                                isConstraintComposite = uniqueConstraint\n                                                                    ? !!dbConstraints.find(function (dbConstraint) { return dbConstraint[\"constraint_type\"] === \"UNIQUE\"\n                                                                        && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\n                                                                        && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"]; })\n                                                                    : false;\n                                                                tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                                                                if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                                                                    if (dbColumn[\"column_default\"].replace(/\"/gi, \"\") === \"nextval('\" + this.buildSequenceName(table, dbColumn[\"column_name\"], currentSchema, true) + \"'::regclass)\") {\n                                                                        tableColumn.isGenerated = true;\n                                                                        tableColumn.generationStrategy = \"increment\";\n                                                                    }\n                                                                    else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\" || /^uuid_generate_v\\d\\(\\)/.test(dbColumn[\"column_default\"])) {\n                                                                        tableColumn.isGenerated = true;\n                                                                        tableColumn.generationStrategy = \"uuid\";\n                                                                    }\n                                                                    else {\n                                                                        tableColumn.default = dbColumn[\"column_default\"].replace(/::.*/, \"\");\n                                                                    }\n                                                                }\n                                                                tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                                                                if (dbColumn[\"character_set_name\"])\n                                                                    tableColumn.charset = dbColumn[\"character_set_name\"];\n                                                                if (dbColumn[\"collation_name\"])\n                                                                    tableColumn.collation = dbColumn[\"collation_name\"];\n                                                                return [2 /*return*/, tableColumn];\n                                                        }\n                                                    });\n                                                }); }))];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2012,
            2049
          ],
          "match_position": [
            65,
            103
          ],
          "match_string": "                                                                tableColumn = new TableColumn();\n                                                                tableColumn.name = dbColumn[\"column_name\"];\n                                                                tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n                                                                if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                                                                    // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                                                                    // we set 'undefined' in to unspecified property to avoid changing column on sync\n                                                                    if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.precision = dbColumn[\"numeric_precision\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.precision = undefined;\n                                                                    }\n                                                                    if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                        tableColumn.scale = dbColumn[\"numeric_scale\"];\n                                                                    }\n                                                                    else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                        tableColumn.scale = undefined;\n                                                                    }\n                                                                }\n                                                                if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                                                                    tableColumn.isArray = true;\n                                                                    type = tableColumn.type.replace(\"[]\", \"\");\n                                                                    tableColumn.type = this.connection.driver.normalizeType({ type: type });\n                                                                }\n                                                                if (tableColumn.type === \"interval\"\n                                                                    || tableColumn.type === \"time without time zone\"\n                                                                    || tableColumn.type === \"time with time zone\"\n                                                                    || tableColumn.type === \"timestamp without time zone\"\n                                                                    || tableColumn.type === \"timestamp with time zone\") {\n                                                                    tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                                                                }\n                                                                if (!(tableColumn.type.indexOf(\"enum\") !== -1)) return [3 /*break*/, 2];\n                                                                tableColumn.type = \"enum\";\n                                                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                                                                    (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + this.buildEnumName(table, tableColumn.name, false, true) + \"'\");\n                                                                return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2045,
            2049
          ],
          "match_position": [
            65,
            103
          ],
          "match_string": "                                                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" +\n                                                                    \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                                                                    (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + this.buildEnumName(table, tableColumn.name, false, true) + \"'\");\n                                                                return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2056,
            2057
          ],
          "match_position": [
            65,
            117
          ],
          "match_string": "                                                                geometryColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geometry_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geometry_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geometryColumnSql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2065,
            2066
          ],
          "match_position": [
            65,
            118
          ],
          "match_string": "                                                                geographyColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geography_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geography_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + table.name + \"'\";\n                                                                return [4 /*yield*/, this.query(geographyColumnSql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2377,
            2382
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        schema = this.parseTableName(table).schema;\n                        enumName = this.buildEnumName(table, column, false, true);\n                        sql = \"SELECT \\\"n\\\".\\\"nspname\\\", \\\"t\\\".\\\"typname\\\" FROM \\\"pg_type\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                            (\"WHERE \\\"n\\\".\\\"nspname\\\" = \" + schema + \" AND \\\"t\\\".\\\"typname\\\" = '\" + enumName + \"'\");\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2378,
            2382
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        enumName = this.buildEnumName(table, column, false, true);\n                        sql = \"SELECT \\\"n\\\".\\\"nspname\\\", \\\"t\\\".\\\"typname\\\" FROM \\\"pg_type\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" +\n                            (\"WHERE \\\"n\\\".\\\"nspname\\\" = \" + schema + \" AND \\\"t\\\".\\\"typname\\\" = '\" + enumName + \"'\");\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/postgres/PostgresQueryRunner.js",
          "match_lines": [
            2560,
            2561
          ],
          "match_position": [
            46,
            197
          ],
          "match_string": "                        return [4 /*yield*/, this.query(\"SELECT \\\"udt_schema\\\", \\\"udt_name\\\" \" +\n                                (\"FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"' AND \\\"column_name\\\"='\" + column.name + \"'\"))];"
        },
        {
          "file_path": "/src/browser/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            251,
            253
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n                        sql = \"SELECT \\\"TABLE_NAME\\\" FROM \\\"USER_TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            270,
            272
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n                        sql = \"SELECT \\\"COLUMN_NAME\\\" FROM \\\"USER_TAB_COLS\\\" WHERE \\\"TABLE_NAME\\\" = '\" + tableName + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            1605,
            1609
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewNamesString = viewNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        query = \"SELECT \\\"T\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"T\\\" INNER JOIN \\\"USER_VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"VIEW_NAME\\\" = \\\"T\\\".\\\"name\\\" WHERE \\\"T\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"T\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            1606,
            1609
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"T\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"T\\\" INNER JOIN \\\"USER_VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"VIEW_NAME\\\" = \\\"T\\\".\\\"name\\\" WHERE \\\"T\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"T\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            1635,
            1661
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tableNamesString = tableNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        tablesSql = \"SELECT * FROM \\\"USER_TABLES\\\" WHERE \\\"TABLE_NAME\\\" IN (\" + tableNamesString + \")\";\n                        columnsSql = \"SELECT * FROM \\\"USER_TAB_COLS\\\" WHERE \\\"TABLE_NAME\\\" IN (\" + tableNamesString + \")\";\n                        indicesSql = \"SELECT \\\"IND\\\".\\\"INDEX_NAME\\\", \\\"IND\\\".\\\"TABLE_NAME\\\", \\\"IND\\\".\\\"UNIQUENESS\\\", \" +\n                            \"LISTAGG (\\\"COL\\\".\\\"COLUMN_NAME\\\", ',') WITHIN GROUP (ORDER BY \\\"COL\\\".\\\"COLUMN_NAME\\\") AS \\\"COLUMN_NAMES\\\" \" +\n                            \"FROM \\\"USER_INDEXES\\\" \\\"IND\\\" \" +\n                            \"INNER JOIN \\\"USER_IND_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"INDEX_NAME\\\" = \\\"IND\\\".\\\"INDEX_NAME\\\" \" +\n                            \"LEFT JOIN \\\"USER_CONSTRAINTS\\\" \\\"CON\\\" ON \\\"CON\\\".\\\"CONSTRAINT_NAME\\\" = \\\"IND\\\".\\\"INDEX_NAME\\\" \" +\n                            (\"WHERE \\\"IND\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"CON\\\".\\\"CONSTRAINT_NAME\\\" IS NULL \") +\n                            \"GROUP BY \\\"IND\\\".\\\"INDEX_NAME\\\", \\\"IND\\\".\\\"TABLE_NAME\\\", \\\"IND\\\".\\\"UNIQUENESS\\\"\";\n                        foreignKeysSql = \"SELECT \\\"C\\\".\\\"CONSTRAINT_NAME\\\", \\\"C\\\".\\\"TABLE_NAME\\\", \\\"COL\\\".\\\"COLUMN_NAME\\\", \\\"REF_COL\\\".\\\"TABLE_NAME\\\" AS \\\"REFERENCED_TABLE_NAME\\\", \" +\n                            \"\\\"REF_COL\\\".\\\"COLUMN_NAME\\\" AS \\\"REFERENCED_COLUMN_NAME\\\", \\\"C\\\".\\\"DELETE_RULE\\\" AS \\\"ON_DELETE\\\" \" +\n                            \"FROM \\\"USER_CONSTRAINTS\\\" \\\"C\\\" \" +\n                            \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"OWNER\\\" AND \\\"COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"CONSTRAINT_NAME\\\" \" +\n                            \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"REF_COL\\\" ON \\\"REF_COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"R_OWNER\\\" AND \\\"REF_COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"R_CONSTRAINT_NAME\\\" AND \\\"REF_COL\\\".\\\"POSITION\\\" = \\\"COL\\\".\\\"POSITION\\\" \" +\n                            (\"WHERE \\\"C\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"C\\\".\\\"CONSTRAINT_TYPE\\\" = 'R'\");\n                        constraintsSql = \"SELECT \\\"C\\\".\\\"CONSTRAINT_NAME\\\", \\\"C\\\".\\\"CONSTRAINT_TYPE\\\", \\\"C\\\".\\\"TABLE_NAME\\\", \\\"COL\\\".\\\"COLUMN_NAME\\\", \\\"C\\\".\\\"SEARCH_CONDITION\\\" \" +\n                            \"FROM \\\"USER_CONSTRAINTS\\\" \\\"C\\\" \" +\n                            \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"OWNER\\\" AND \\\"COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"CONSTRAINT_NAME\\\" \" +\n                            (\"WHERE \\\"C\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"C\\\".\\\"CONSTRAINT_TYPE\\\" IN ('C', 'U', 'P') AND \\\"C\\\".\\\"GENERATED\\\" = 'USER NAME'\");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                                this.query(constraintsSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            417,
            420
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            418,
            420
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            419,
            420
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            437,
            440
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            438,
            440
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            439,
            440
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            1847,
            1847
          ],
          "match_position": [
            50,
            108
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tablePath))];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2018,
            2031
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        dbNames = viewPaths\n                            .filter(function (viewPath) { return viewPath.split(\".\").length === 3; })\n                            .map(function (viewPath) { return viewPath.split(\".\")[0]; });\n                        if (this.driver.database && !dbNames.find(function (dbName) { return dbName === _this.driver.database; }))\n                            dbNames.push(this.driver.database);\n                        viewsCondition = viewPaths.map(function (viewPath) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(viewPath), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"T\\\".\\\"SCHEMA\\\" = '\" + schema + \"' AND \\\"T\\\".\\\"NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"T\\\".*, \\\"V\\\".\\\"CHECK_OPTION\\\" FROM \" + _this.escapePath(_this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"TABLE_SCHEMA\\\" = \\\"T\\\".\\\"SCHEMA\\\" AND \\\"v\\\".\\\"TABLE_NAME\\\" = \\\"T\\\".\\\"NAME\\\" WHERE \\\"T\\\".\\\"TYPE\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2027,
            2031
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"T\\\".*, \\\"V\\\".\\\"CHECK_OPTION\\\" FROM \" + _this.escapePath(_this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"TABLE_SCHEMA\\\" = \\\"T\\\".\\\"SCHEMA\\\" AND \\\"v\\\".\\\"TABLE_NAME\\\" = \\\"T\\\".\\\"NAME\\\" WHERE \\\"T\\\".\\\"TYPE\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2096,
            2161
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        dbNames = tableNames\n                            .filter(function (tablePath) { return tablePath.split(\".\").length === 3; })\n                            .map(function (tablePath) { return tablePath.split(\".\")[0]; });\n                        if (this.driver.database && !dbNames.find(function (dbName) { return dbName === _this.driver.database; }))\n                            dbNames.push(this.driver.database);\n                        schemaNamesString = schemaNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(tableName), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        columnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(tableName), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" +\n                                (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n                        }).join(\" OR \");\n                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2106,
            2161
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        columnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(tableName), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" +\n                                (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n                        }).join(\" OR \");\n                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2109,
            2161
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        columnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(tableName), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" +\n                                (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n                        }).join(\" OR \");\n                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2117,
            2161
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2124,
            2161
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2137,
            2161
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2143,
            2161
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            273,
            275
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            274,
            275
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            292,
            295
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        columnName = column instanceof TableColumn_1.TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            293,
            295
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        columnName = column instanceof TableColumn_1.TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            294,
            295
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1471,
            1471
          ],
          "match_position": [
            50,
            110
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableOrName))];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1583,
            1593
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`t`.`schema` = '\" + database + \"' AND `t`.`name` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1591,
            1593
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1623,
            1666
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`TABLE_SCHEMA` = '\" + database + \"' AND `TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE \" + tablesCondition;\n                        primaryKeySql = \"SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (\" + tablesCondition + \")\";\n                        collationsSql = \"SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1635,
            1666
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1646,
            1666
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/browser/query-builder/UpdateQueryBuilder.js",
          "match_lines": [
            90,
            90
          ],
          "match_position": [
            46,
            148
          ],
          "match_string": "                        return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(\";\\n\\n\"), parameters)];"
        },
        {
          "file_path": "/src/browser/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            62,
            85
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);\n                        ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        firstQueryParameters_1 = [];\n                        childEntityIdValues_1 = subject.metadata.primaryColumns.map(function (column) { return column.getEntityValue(subject.insertedValueSet); });\n                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/browser/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            63,
            85
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        firstQueryParameters_1 = [];\n                        childEntityIdValues_1 = subject.metadata.primaryColumns.map(function (column) { return column.getEntityValue(subject.insertedValueSet); });\n                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/browser/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            66,
            85
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        firstQueryParameters_1 = [];\n                        childEntityIdValues_1 = subject.metadata.primaryColumns.map(function (column) { return column.getEntityValue(subject.insertedValueSet); });\n                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/browser/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            71,
            85
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/browser/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            75,
            85
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/browser/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            84,
            85
          ],
          "match_position": [
            46,
            190
          ],
          "match_string": "                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            271,
            273
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            272,
            273
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            290,
            293
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        columnName = column instanceof TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            291,
            293
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        columnName = column instanceof TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            292,
            293
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1469,
            1469
          ],
          "match_position": [
            50,
            110
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableOrName))];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1581,
            1591
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`t`.`schema` = '\" + database + \"' AND `t`.`name` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1589,
            1591
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1621,
            1664
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`TABLE_SCHEMA` = '\" + database + \"' AND `TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE \" + tablesCondition;\n                        primaryKeySql = \"SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (\" + tablesCondition + \")\";\n                        collationsSql = \"SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1633,
            1664
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/mysql/MysqlQueryRunner.js",
          "match_lines": [
            1644,
            1664
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            175,
            177
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        tableName = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;\n                        sql = \"SELECT * FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'table' AND \\\"name\\\" = '\" + tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            194,
            196
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        tableName = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;\n                        sql = \"PRAGMA table_info(\\\"\" + tableName + \"\\\")\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1282,
            1286
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewNamesString = viewNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        query = \"SELECT \\\"t\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"t\\\" INNER JOIN \\\"sqlite_master\\\" s ON \\\"s\\\".\\\"name\\\" = \\\"t\\\".\\\"name\\\" AND \\\"s\\\".\\\"type\\\" = 'view' WHERE \\\"t\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"t\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1283,
            1286
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"t\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"t\\\" INNER JOIN \\\"sqlite_master\\\" s ON \\\"s\\\".\\\"name\\\" = \\\"t\\\".\\\"name\\\" AND \\\"s\\\".\\\"type\\\" = 'view' WHERE \\\"t\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"t\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1312,
            1313
          ],
          "match_position": [
            25,
            161
          ],
          "match_string": "                        tableNamesString = tableNames.map(function (tableName) { return \"'\" + tableName + \"'\"; }).join(\", \");\n                        return [4 /*yield*/, this.query(\"SELECT * FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'table' AND \\\"name\\\" IN (\" + tableNamesString + \")\")];"
        },
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1418,
            1419
          ],
          "match_position": [
            61,
            144
          ],
          "match_string": "                                                            dbIndex = dbIndices.find(function (dbIndex) { return dbIndex[\"name\"] === dbIndexName; });\n                                                            return [4 /*yield*/, this.query(\"PRAGMA index_info(\\\"\" + dbIndex[\"name\"] + \"\\\")\")];"
        },
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1459,
            1460
          ],
          "match_position": [
            61,
            144
          ],
          "match_string": "                                                            dbIndex = dbIndices.find(function (dbIndex) { return dbIndex[\"name\"] === dbIndexName; });\n                                                            return [4 /*yield*/, this.query(\"PRAGMA index_info(\\\"\" + dbIndex[\"name\"] + \"\\\")\")];"
        },
        {
          "file_path": "/src/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            253,
            255
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        tableName = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;\n                        sql = \"SELECT \\\"TABLE_NAME\\\" FROM \\\"USER_TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            272,
            274
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        tableName = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;\n                        sql = \"SELECT \\\"COLUMN_NAME\\\" FROM \\\"USER_TAB_COLS\\\" WHERE \\\"TABLE_NAME\\\" = '\" + tableName + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            1607,
            1611
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewNamesString = viewNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        query = \"SELECT \\\"T\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"T\\\" INNER JOIN \\\"USER_VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"VIEW_NAME\\\" = \\\"T\\\".\\\"name\\\" WHERE \\\"T\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"T\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            1608,
            1611
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"T\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"T\\\" INNER JOIN \\\"USER_VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"VIEW_NAME\\\" = \\\"T\\\".\\\"name\\\" WHERE \\\"T\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"T\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/oracle/OracleQueryRunner.js",
          "match_lines": [
            1637,
            1663
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tableNamesString = tableNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        tablesSql = \"SELECT * FROM \\\"USER_TABLES\\\" WHERE \\\"TABLE_NAME\\\" IN (\" + tableNamesString + \")\";\n                        columnsSql = \"SELECT * FROM \\\"USER_TAB_COLS\\\" WHERE \\\"TABLE_NAME\\\" IN (\" + tableNamesString + \")\";\n                        indicesSql = \"SELECT \\\"IND\\\".\\\"INDEX_NAME\\\", \\\"IND\\\".\\\"TABLE_NAME\\\", \\\"IND\\\".\\\"UNIQUENESS\\\", \" +\n                            \"LISTAGG (\\\"COL\\\".\\\"COLUMN_NAME\\\", ',') WITHIN GROUP (ORDER BY \\\"COL\\\".\\\"COLUMN_NAME\\\") AS \\\"COLUMN_NAMES\\\" \" +\n                            \"FROM \\\"USER_INDEXES\\\" \\\"IND\\\" \" +\n                            \"INNER JOIN \\\"USER_IND_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"INDEX_NAME\\\" = \\\"IND\\\".\\\"INDEX_NAME\\\" \" +\n                            \"LEFT JOIN \\\"USER_CONSTRAINTS\\\" \\\"CON\\\" ON \\\"CON\\\".\\\"CONSTRAINT_NAME\\\" = \\\"IND\\\".\\\"INDEX_NAME\\\" \" +\n                            (\"WHERE \\\"IND\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"CON\\\".\\\"CONSTRAINT_NAME\\\" IS NULL \") +\n                            \"GROUP BY \\\"IND\\\".\\\"INDEX_NAME\\\", \\\"IND\\\".\\\"TABLE_NAME\\\", \\\"IND\\\".\\\"UNIQUENESS\\\"\";\n                        foreignKeysSql = \"SELECT \\\"C\\\".\\\"CONSTRAINT_NAME\\\", \\\"C\\\".\\\"TABLE_NAME\\\", \\\"COL\\\".\\\"COLUMN_NAME\\\", \\\"REF_COL\\\".\\\"TABLE_NAME\\\" AS \\\"REFERENCED_TABLE_NAME\\\", \" +\n                            \"\\\"REF_COL\\\".\\\"COLUMN_NAME\\\" AS \\\"REFERENCED_COLUMN_NAME\\\", \\\"C\\\".\\\"DELETE_RULE\\\" AS \\\"ON_DELETE\\\" \" +\n                            \"FROM \\\"USER_CONSTRAINTS\\\" \\\"C\\\" \" +\n                            \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"OWNER\\\" AND \\\"COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"CONSTRAINT_NAME\\\" \" +\n                            \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"REF_COL\\\" ON \\\"REF_COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"R_OWNER\\\" AND \\\"REF_COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"R_CONSTRAINT_NAME\\\" AND \\\"REF_COL\\\".\\\"POSITION\\\" = \\\"COL\\\".\\\"POSITION\\\" \" +\n                            (\"WHERE \\\"C\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"C\\\".\\\"CONSTRAINT_TYPE\\\" = 'R'\");\n                        constraintsSql = \"SELECT \\\"C\\\".\\\"CONSTRAINT_NAME\\\", \\\"C\\\".\\\"CONSTRAINT_TYPE\\\", \\\"C\\\".\\\"TABLE_NAME\\\", \\\"COL\\\".\\\"COLUMN_NAME\\\", \\\"C\\\".\\\"SEARCH_CONDITION\\\" \" +\n                            \"FROM \\\"USER_CONSTRAINTS\\\" \\\"C\\\" \" +\n                            \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"OWNER\\\" AND \\\"COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"CONSTRAINT_NAME\\\" \" +\n                            (\"WHERE \\\"C\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"C\\\".\\\"CONSTRAINT_TYPE\\\" IN ('C', 'U', 'P') AND \\\"C\\\".\\\"GENERATED\\\" = 'USER NAME'\");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                                this.query(constraintsSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/query-builder/InsertQueryBuilder.js",
          "match_lines": [
            85,
            85
          ],
          "match_position": [
            46,
            148
          ],
          "match_string": "                        return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(\";\\n\\n\"), parameters)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            415,
            418
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            416,
            418
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            417,
            418
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            435,
            438
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            436,
            438
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            437,
            438
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            1845,
            1845
          ],
          "match_position": [
            50,
            108
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tablePath))];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2016,
            2029
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        dbNames = viewPaths\n                            .filter(function (viewPath) { return viewPath.split(\".\").length === 3; })\n                            .map(function (viewPath) { return viewPath.split(\".\")[0]; });\n                        if (this.driver.database && !dbNames.find(function (dbName) { return dbName === _this.driver.database; }))\n                            dbNames.push(this.driver.database);\n                        viewsCondition = viewPaths.map(function (viewPath) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(viewPath), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"T\\\".\\\"SCHEMA\\\" = '\" + schema + \"' AND \\\"T\\\".\\\"NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"T\\\".*, \\\"V\\\".\\\"CHECK_OPTION\\\" FROM \" + _this.escapePath(_this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"TABLE_SCHEMA\\\" = \\\"T\\\".\\\"SCHEMA\\\" AND \\\"v\\\".\\\"TABLE_NAME\\\" = \\\"T\\\".\\\"NAME\\\" WHERE \\\"T\\\".\\\"TYPE\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2025,
            2029
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"T\\\".*, \\\"V\\\".\\\"CHECK_OPTION\\\" FROM \" + _this.escapePath(_this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"TABLE_SCHEMA\\\" = \\\"T\\\".\\\"SCHEMA\\\" AND \\\"v\\\".\\\"TABLE_NAME\\\" = \\\"T\\\".\\\"NAME\\\" WHERE \\\"T\\\".\\\"TYPE\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2094,
            2159
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        dbNames = tableNames\n                            .filter(function (tablePath) { return tablePath.split(\".\").length === 3; })\n                            .map(function (tablePath) { return tablePath.split(\".\")[0]; });\n                        if (this.driver.database && !dbNames.find(function (dbName) { return dbName === _this.driver.database; }))\n                            dbNames.push(this.driver.database);\n                        schemaNamesString = schemaNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(tableName), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        columnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(tableName), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" +\n                                (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n                        }).join(\" OR \");\n                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2104,
            2159
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        columnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(tableName), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" +\n                                (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n                        }).join(\" OR \");\n                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2107,
            2159
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        columnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(extractTableSchemaAndName(tableName), 2), schema = _a[0], name = _a[1];\n                            return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" +\n                                (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n                        }).join(\" OR \");\n                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2115,
            2159
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2122,
            2159
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2135,
            2159
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sqlserver/SqlServerQueryRunner.js",
          "match_lines": [
            2141,
            2159
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            151,
            151
          ],
          "match_position": [
            109,
            143
          ],
          "match_string": "                        return [4 /*yield*/, PromiseUtils.runInSequence(this.queries, function (q) { return _this.query(q.query, q.parameters); })];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            245,
            272
          ],
          "match_position": [
            9,
            16
          ],
          "match_string": "        var QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, stream, err_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        stream = databaseConnection.query(new QueryStream(query, parameters));\n                        if (onEnd)\n                            stream.on(\"end\", onEnd);\n                        if (onError)\n                            stream.on(\"error\", onError);\n                        ok(stream);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_2 = _a.sent();\n                        fail(err_2);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); });"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            336,
            338
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            337,
            338
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            355,
            357
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            356,
            357
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1698,
            1698
          ],
          "match_position": [
            50,
            108
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableName))];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1796,
            1806
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (viewName) {\n                            var _a = tslib_1.__read(viewName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1804,
            1806
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1837,
            1903
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"is_hidden\\\" = 'NO' AND \" + tablesCondition;\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \\\"cl\\\".\\\"relname\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1847,
            1903
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \\\"cl\\\".\\\"relname\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/cockroachdb/CockroachQueryRunner.js",
          "match_lines": [
            1874,
            1903
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \\\"cl\\\".\\\"relname\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            64,
            87
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);\n                        ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        firstQueryParameters_1 = [];\n                        childEntityIdValues_1 = subject.metadata.primaryColumns.map(function (column) { return column.getEntityValue(subject.insertedValueSet); });\n                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError_1.CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            65,
            87
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        firstQueryParameters_1 = [];\n                        childEntityIdValues_1 = subject.metadata.primaryColumns.map(function (column) { return column.getEntityValue(subject.insertedValueSet); });\n                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError_1.CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            68,
            87
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        firstQueryParameters_1 = [];\n                        childEntityIdValues_1 = subject.metadata.primaryColumns.map(function (column) { return column.getEntityValue(subject.insertedValueSet); });\n                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError_1.CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            73,
            87
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError_1.CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            77,
            87
          ],
          "match_position": [
            25,
            192
          ],
          "match_string": "                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError_1.CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/persistence/tree/ClosureSubjectExecutor.js",
          "match_lines": [
            86,
            87
          ],
          "match_position": [
            46,
            190
          ],
          "match_string": "                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            329,
            331
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            330,
            331
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            348,
            350
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLE_COLUMNS\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName + \" AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            349,
            350
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLE_COLUMNS\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName + \" AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            416,
            419
          ],
          "match_position": [
            25,
            136
          ],
          "match_string": "                        schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n                        exist = false;\n                        if (!ifExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.query(\"SELECT * FROM \\\"SYS\\\".\\\"SCHEMAS\\\" WHERE \\\"SCHEMA_NAME\\\" = '\" + schema + \"'\")];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            621,
            633
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n                        schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n                        newTable.name = schemaName ? schemaName + \".\" + newTableName : newTableName;\n                        // rename table\n                        upQueries.push(new Query_1.Query(\"RENAME TABLE \" + this.escapePath(oldTable.name) + \" TO \" + this.escapePath(newTableName)));\n                        downQueries.push(new Query_1.Query(\"RENAME TABLE \" + this.escapePath(newTable.name) + \" TO \" + this.escapePath(oldTableName)));\n                        // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            upQueries.push(_this.dropForeignKeySql(newTable, foreignKey));\n                            downQueries.push(_this.createForeignKeySql(newTable, foreignKey));\n                        });\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = '\" + schemaName + \"' AND \\\"REFERENCED_TABLE_NAME\\\" = '\" + oldTableName + \"'\";\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            622,
            633
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n                        newTable.name = schemaName ? schemaName + \".\" + newTableName : newTableName;\n                        // rename table\n                        upQueries.push(new Query_1.Query(\"RENAME TABLE \" + this.escapePath(oldTable.name) + \" TO \" + this.escapePath(newTableName)));\n                        downQueries.push(new Query_1.Query(\"RENAME TABLE \" + this.escapePath(newTable.name) + \" TO \" + this.escapePath(oldTableName)));\n                        // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            upQueries.push(_this.dropForeignKeySql(newTable, foreignKey));\n                            downQueries.push(_this.createForeignKeySql(newTable, foreignKey));\n                        });\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = '\" + schemaName + \"' AND \\\"REFERENCED_TABLE_NAME\\\" = '\" + oldTableName + \"'\";\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            728,
            738
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        parsedTableName = this.parseTableName(table);\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(new Query_1.Query(this.addColumnSql(table, column)));\n                        downQueries.push(new Query_1.Query(this.dropColumnSql(table, column)));\n                        if (!column.isPrimary) return [3 /*break*/, 6];\n                        primaryColumns = clonedTable.primaryColumns;\n                        if (!(primaryColumns.length > 0)) return [3 /*break*/, 5];\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            737,
            738
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1094,
            1103
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        parsedTableName = this.parseTableName(table);\n                        column = columnOrName instanceof TableColumn_1.TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n                        if (!column)\n                            throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        if (!column.isPrimary) return [3 /*break*/, 5];\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1102,
            1103
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1259,
            1265
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        parsedTableName = this.parseTableName(table);\n                        clonedTable = table.clone();\n                        columnNames = columns.map(function (column) { return column.name; });\n                        upQueries = [];\n                        downQueries = [];\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1264,
            1265
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1339,
            1343
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        parsedTableName = this.parseTableName(table);\n                        upQueries = [];\n                        downQueries = [];\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1342,
            1343
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1781,
            1781
          ],
          "match_position": [
            50,
            108
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tablePath))];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1895,
            1904
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (viewName) {\n                            var _a = tslib_1.__read(viewName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT \\\"t\\\".* FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\");\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1903,
            1904
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"t\\\".* FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\");\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1934,
            1979
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLE_COLUMNS\\\" WHERE \" + tablesCondition;\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT * FROM \\\"SYS\\\".\\\"CONSTRAINTS\\\" WHERE (\" + constraintsCondition + \")\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"I\\\".\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"I\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT \\\"I\\\".\\\"INDEX_TYPE\\\", \\\"I\\\".\\\"SCHEMA_NAME\\\", \\\"I\\\".\\\"TABLE_NAME\\\", \\\"I\\\".\\\"INDEX_NAME\\\", \\\"IC\\\".\\\"COLUMN_NAME\\\", \\\"I\\\".\\\"CONSTRAINT\\\" \" +\n                            \"FROM \\\"SYS\\\".\\\"INDEXES\\\" \\\"I\\\" INNER JOIN \\\"SYS\\\".\\\"INDEX_COLUMNS\\\" \\\"IC\\\" ON \\\"IC\\\".\\\"INDEX_OID\\\" = \\\"I\\\".\\\"INDEX_OID\\\" \" +\n                            (\"WHERE (\" + indicesCondition + \") AND (\\\"I\\\".\\\"CONSTRAINT\\\" IS NULL OR \\\"I\\\".\\\"CONSTRAINT\\\" != 'PRIMARY KEY') AND \\\"I\\\".\\\"INDEX_NAME\\\" NOT LIKE '%_SYS_FULLTEXT_%'\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \")\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1944,
            1979
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT * FROM \\\"SYS\\\".\\\"CONSTRAINTS\\\" WHERE (\" + constraintsCondition + \")\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"I\\\".\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"I\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT \\\"I\\\".\\\"INDEX_TYPE\\\", \\\"I\\\".\\\"SCHEMA_NAME\\\", \\\"I\\\".\\\"TABLE_NAME\\\", \\\"I\\\".\\\"INDEX_NAME\\\", \\\"IC\\\".\\\"COLUMN_NAME\\\", \\\"I\\\".\\\"CONSTRAINT\\\" \" +\n                            \"FROM \\\"SYS\\\".\\\"INDEXES\\\" \\\"I\\\" INNER JOIN \\\"SYS\\\".\\\"INDEX_COLUMNS\\\" \\\"IC\\\" ON \\\"IC\\\".\\\"INDEX_OID\\\" = \\\"I\\\".\\\"INDEX_OID\\\" \" +\n                            (\"WHERE (\" + indicesCondition + \") AND (\\\"I\\\".\\\"CONSTRAINT\\\" IS NULL OR \\\"I\\\".\\\"CONSTRAINT\\\" != 'PRIMARY KEY') AND \\\"I\\\".\\\"INDEX_NAME\\\" NOT LIKE '%_SYS_FULLTEXT_%'\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \")\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1953,
            1979
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"I\\\".\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"I\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT \\\"I\\\".\\\"INDEX_TYPE\\\", \\\"I\\\".\\\"SCHEMA_NAME\\\", \\\"I\\\".\\\"TABLE_NAME\\\", \\\"I\\\".\\\"INDEX_NAME\\\", \\\"IC\\\".\\\"COLUMN_NAME\\\", \\\"I\\\".\\\"CONSTRAINT\\\" \" +\n                            \"FROM \\\"SYS\\\".\\\"INDEXES\\\" \\\"I\\\" INNER JOIN \\\"SYS\\\".\\\"INDEX_COLUMNS\\\" \\\"IC\\\" ON \\\"IC\\\".\\\"INDEX_OID\\\" = \\\"I\\\".\\\"INDEX_OID\\\" \" +\n                            (\"WHERE (\" + indicesCondition + \") AND (\\\"I\\\".\\\"CONSTRAINT\\\" IS NULL OR \\\"I\\\".\\\"CONSTRAINT\\\" != 'PRIMARY KEY') AND \\\"I\\\".\\\"INDEX_NAME\\\" NOT LIKE '%_SYS_FULLTEXT_%'\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \")\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1964,
            1979
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \")\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            327,
            329
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            328,
            329
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            346,
            348
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLE_COLUMNS\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName + \" AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            347,
            348
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLE_COLUMNS\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName + \" AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            414,
            417
          ],
          "match_position": [
            25,
            136
          ],
          "match_string": "                        schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n                        exist = false;\n                        if (!ifExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.query(\"SELECT * FROM \\\"SYS\\\".\\\"SCHEMAS\\\" WHERE \\\"SCHEMA_NAME\\\" = '\" + schema + \"'\")];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            619,
            631
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n                        schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n                        newTable.name = schemaName ? schemaName + \".\" + newTableName : newTableName;\n                        // rename table\n                        upQueries.push(new Query(\"RENAME TABLE \" + this.escapePath(oldTable.name) + \" TO \" + this.escapePath(newTableName)));\n                        downQueries.push(new Query(\"RENAME TABLE \" + this.escapePath(newTable.name) + \" TO \" + this.escapePath(oldTableName)));\n                        // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            upQueries.push(_this.dropForeignKeySql(newTable, foreignKey));\n                            downQueries.push(_this.createForeignKeySql(newTable, foreignKey));\n                        });\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = '\" + schemaName + \"' AND \\\"REFERENCED_TABLE_NAME\\\" = '\" + oldTableName + \"'\";\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            620,
            631
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n                        newTable.name = schemaName ? schemaName + \".\" + newTableName : newTableName;\n                        // rename table\n                        upQueries.push(new Query(\"RENAME TABLE \" + this.escapePath(oldTable.name) + \" TO \" + this.escapePath(newTableName)));\n                        downQueries.push(new Query(\"RENAME TABLE \" + this.escapePath(newTable.name) + \" TO \" + this.escapePath(oldTableName)));\n                        // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            upQueries.push(_this.dropForeignKeySql(newTable, foreignKey));\n                            downQueries.push(_this.createForeignKeySql(newTable, foreignKey));\n                        });\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = '\" + schemaName + \"' AND \\\"REFERENCED_TABLE_NAME\\\" = '\" + oldTableName + \"'\";\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            726,
            736
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        parsedTableName = this.parseTableName(table);\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(new Query(this.addColumnSql(table, column)));\n                        downQueries.push(new Query(this.dropColumnSql(table, column)));\n                        if (!column.isPrimary) return [3 /*break*/, 6];\n                        primaryColumns = clonedTable.primaryColumns;\n                        if (!(primaryColumns.length > 0)) return [3 /*break*/, 5];\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            735,
            736
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1092,
            1101
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        parsedTableName = this.parseTableName(table);\n                        column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n                        if (!column)\n                            throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        if (!column.isPrimary) return [3 /*break*/, 5];\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1100,
            1101
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1257,
            1263
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        parsedTableName = this.parseTableName(table);\n                        clonedTable = table.clone();\n                        columnNames = columns.map(function (column) { return column.name; });\n                        upQueries = [];\n                        downQueries = [];\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1262,
            1263
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1337,
            1341
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        parsedTableName = this.parseTableName(table);\n                        upQueries = [];\n                        downQueries = [];\n                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1340,
            1341
          ],
          "match_position": [
            25,
            83
          ],
          "match_string": "                        referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(referencedForeignKeySql)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1779,
            1779
          ],
          "match_position": [
            50,
            108
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tablePath))];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1893,
            1902
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (viewName) {\n                            var _a = tslib_1.__read(viewName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT \\\"t\\\".* FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\");\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1901,
            1902
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"t\\\".* FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\");\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1932,
            1977
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLE_COLUMNS\\\" WHERE \" + tablesCondition;\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT * FROM \\\"SYS\\\".\\\"CONSTRAINTS\\\" WHERE (\" + constraintsCondition + \")\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"I\\\".\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"I\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT \\\"I\\\".\\\"INDEX_TYPE\\\", \\\"I\\\".\\\"SCHEMA_NAME\\\", \\\"I\\\".\\\"TABLE_NAME\\\", \\\"I\\\".\\\"INDEX_NAME\\\", \\\"IC\\\".\\\"COLUMN_NAME\\\", \\\"I\\\".\\\"CONSTRAINT\\\" \" +\n                            \"FROM \\\"SYS\\\".\\\"INDEXES\\\" \\\"I\\\" INNER JOIN \\\"SYS\\\".\\\"INDEX_COLUMNS\\\" \\\"IC\\\" ON \\\"IC\\\".\\\"INDEX_OID\\\" = \\\"I\\\".\\\"INDEX_OID\\\" \" +\n                            (\"WHERE (\" + indicesCondition + \") AND (\\\"I\\\".\\\"CONSTRAINT\\\" IS NULL OR \\\"I\\\".\\\"CONSTRAINT\\\" != 'PRIMARY KEY') AND \\\"I\\\".\\\"INDEX_NAME\\\" NOT LIKE '%_SYS_FULLTEXT_%'\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \")\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1942,
            1977
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT * FROM \\\"SYS\\\".\\\"CONSTRAINTS\\\" WHERE (\" + constraintsCondition + \")\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"I\\\".\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"I\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT \\\"I\\\".\\\"INDEX_TYPE\\\", \\\"I\\\".\\\"SCHEMA_NAME\\\", \\\"I\\\".\\\"TABLE_NAME\\\", \\\"I\\\".\\\"INDEX_NAME\\\", \\\"IC\\\".\\\"COLUMN_NAME\\\", \\\"I\\\".\\\"CONSTRAINT\\\" \" +\n                            \"FROM \\\"SYS\\\".\\\"INDEXES\\\" \\\"I\\\" INNER JOIN \\\"SYS\\\".\\\"INDEX_COLUMNS\\\" \\\"IC\\\" ON \\\"IC\\\".\\\"INDEX_OID\\\" = \\\"I\\\".\\\"INDEX_OID\\\" \" +\n                            (\"WHERE (\" + indicesCondition + \") AND (\\\"I\\\".\\\"CONSTRAINT\\\" IS NULL OR \\\"I\\\".\\\"CONSTRAINT\\\" != 'PRIMARY KEY') AND \\\"I\\\".\\\"INDEX_NAME\\\" NOT LIKE '%_SYS_FULLTEXT_%'\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \")\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1951,
            1977
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"I\\\".\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"I\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT \\\"I\\\".\\\"INDEX_TYPE\\\", \\\"I\\\".\\\"SCHEMA_NAME\\\", \\\"I\\\".\\\"TABLE_NAME\\\", \\\"I\\\".\\\"INDEX_NAME\\\", \\\"IC\\\".\\\"COLUMN_NAME\\\", \\\"I\\\".\\\"CONSTRAINT\\\" \" +\n                            \"FROM \\\"SYS\\\".\\\"INDEXES\\\" \\\"I\\\" INNER JOIN \\\"SYS\\\".\\\"INDEX_COLUMNS\\\" \\\"IC\\\" ON \\\"IC\\\".\\\"INDEX_OID\\\" = \\\"I\\\".\\\"INDEX_OID\\\" \" +\n                            (\"WHERE (\" + indicesCondition + \") AND (\\\"I\\\".\\\"CONSTRAINT\\\" IS NULL OR \\\"I\\\".\\\"CONSTRAINT\\\" != 'PRIMARY KEY') AND \\\"I\\\".\\\"INDEX_NAME\\\" NOT LIKE '%_SYS_FULLTEXT_%'\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \")\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sap/SapQueryRunner.js",
          "match_lines": [
            1962,
            1977
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \")\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            173,
            175
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n                        sql = \"SELECT * FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'table' AND \\\"name\\\" = '\" + tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            192,
            194
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n                        sql = \"PRAGMA table_info(\\\"\" + tableName + \"\\\")\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1280,
            1284
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewNamesString = viewNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        query = \"SELECT \\\"t\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"t\\\" INNER JOIN \\\"sqlite_master\\\" s ON \\\"s\\\".\\\"name\\\" = \\\"t\\\".\\\"name\\\" AND \\\"s\\\".\\\"type\\\" = 'view' WHERE \\\"t\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"t\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1281,
            1284
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT \\\"t\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"t\\\" INNER JOIN \\\"sqlite_master\\\" s ON \\\"s\\\".\\\"name\\\" = \\\"t\\\".\\\"name\\\" AND \\\"s\\\".\\\"type\\\" = 'view' WHERE \\\"t\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"t\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1310,
            1311
          ],
          "match_position": [
            25,
            161
          ],
          "match_string": "                        tableNamesString = tableNames.map(function (tableName) { return \"'\" + tableName + \"'\"; }).join(\", \");\n                        return [4 /*yield*/, this.query(\"SELECT * FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'table' AND \\\"name\\\" IN (\" + tableNamesString + \")\")];"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1416,
            1417
          ],
          "match_position": [
            61,
            144
          ],
          "match_string": "                                                            dbIndex = dbIndices.find(function (dbIndex) { return dbIndex[\"name\"] === dbIndexName; });\n                                                            return [4 /*yield*/, this.query(\"PRAGMA index_info(\\\"\" + dbIndex[\"name\"] + \"\\\")\")];"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js",
          "match_lines": [
            1457,
            1458
          ],
          "match_position": [
            61,
            144
          ],
          "match_string": "                                                            dbIndex = dbIndices.find(function (dbIndex) { return dbIndex[\"name\"] === dbIndexName; });\n                                                            return [4 /*yield*/, this.query(\"PRAGMA index_info(\\\"\" + dbIndex[\"name\"] + \"\\\")\")];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            224,
            226
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            225,
            226
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            243,
            246
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        parsedTableName = this.parseTableName(tableOrName);\n                        columnName = column instanceof TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            244,
            246
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        columnName = column instanceof TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            245,
            246
          ],
          "match_position": [
            25,
            63
          ],
          "match_string": "                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1420,
            1420
          ],
          "match_position": [
            50,
            110
          ],
          "match_string": "                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableOrName))];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1532,
            1542
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        viewsCondition = viewNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`t`.`schema` = '\" + database + \"' AND `t`.`name` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1540,
            1542
          ],
          "match_position": [
            25,
            65
          ],
          "match_string": "                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1572,
            1615
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`TABLE_SCHEMA` = '\" + database + \"' AND `TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE \" + tablesCondition;\n                        primaryKeySql = \"SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (\" + tablesCondition + \")\";\n                        collationsSql = \"SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1584,
            1615
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        },
        {
          "file_path": "/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js",
          "match_lines": [
            1595,
            1615
          ],
          "match_position": [
            25,
            33
          ],
          "match_string": "                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];"
        }
      ],
      "metadata": {
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "description": "Untrusted input concatinated with raw SQL query can result in SQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteDriver.js",
          "match_lines": [
            226,
            226
          ],
          "match_position": [
            21,
            64
          ],
          "match_string": "                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {"
        },
        {
          "file_path": "/src/driver/sqlite-abstract/AbstractSqliteDriver.js",
          "match_lines": [
            229,
            229
          ],
          "match_position": [
            21,
            84
          ],
          "match_string": "                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(value)) {"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteDriver.js",
          "match_lines": [
            224,
            224
          ],
          "match_position": [
            21,
            64
          ],
          "match_string": "                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {"
        },
        {
          "file_path": "/src/browser/driver/sqlite-abstract/AbstractSqliteDriver.js",
          "match_lines": [
            227,
            227
          ],
          "match_position": [
            21,
            84
          ],
          "match_string": "                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(value)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}