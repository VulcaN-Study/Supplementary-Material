/src/browser/driver/mongodb/typings.js.map:1:{"version":3,"sources":["../browser/src/driver/mongodb/typings.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC","file":"typings.js","sourcesContent":["import { EventEmitter, Readable, Writable } from \"../../platform/PlatformTools\";\n\n/**\n * Creates a new MongoClient instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html\n */\nexport declare class MongoClient extends EventEmitter {\n\n    constructor(uri: string, options?: MongoClientOptions);\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param callback The command result callback.\n     */\n    static connect(url: string, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     */\n    static connect(url: string, options?: MongoClientOptions): Promise<Db>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     */\n    static connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     */\n    connect(): Promise<MongoClient>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param callback The command result callback.\n     */\n    connect(url: string, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     */\n    connect(url: string, options?: MongoClientOptions): Promise<Db>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     */\n    connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(callback: MongoCallback<void>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param force Force close, emitting no events.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(force?: boolean): Promise<void>;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param force Force close, emitting no events.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(force: boolean, callback: MongoCallback<void>): void;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     * @param dbName The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#db\n     */\n    db(dbName?: string, options?: MongoClientCommonOption): Db;\n\n    /**\n     * Check if MongoClient is connected.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#isConnected\n     */\n    isConnected(options?: MongoClientCommonOption): boolean;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#logout\n     */\n    logout(callback: MongoCallback<any>): void;\n    logout(options?: { dbName?: string }): Promise<any>;\n    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Starts a new session on the server.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#startSession\n     */\n    startSession(options?: SessionOptions): ClientSession;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this cluster.\n     * Will ignore all changes to system collections, as well as the local, admin, and config databases.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n\n    /**\n     * Runs a given operation with an implicitly created session. The lifetime of the session will be handled without the need for user interaction.\n     * @param operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#withSession\n     */\n    withSession(operation: (session: ClientSession) => Promise<any>): Promise<void>;\n\n    /**\n     * Runs a given operation with an implicitly created session. The lifetime of the session will be handled without the need for user interaction.\n     * @param options Optional settings to be appled to implicitly created session.\n     * @param operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#withSession\n     */\n    withSession(options: SessionOptions, operation: (session: ClientSession) => Promise<any>): Promise<void>;\n}\n\n/**\n * The callback format for results.\n */\nexport interface MongoCallback<T> {\n\n    /**\n     * @param error An error instance representing the error during the execution.\n     * @param result The result of execution.\n     */\n    (error: MongoError, result: T): void;\n}\n\n// http://mongodb.github.io/node-mongodb-native/2.1/api/MongoError.html\nexport declare class MongoError extends Error {\n    constructor(message: string);\n    static create(options: Object): MongoError;\n}\n\n/**\n * Options for MongoClient#connect method.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#.connect\n */\nexport interface MongoClientOptions {\n\n    /**\n     * The maximum size of the individual server pool.\n     */\n    poolSize?: number;\n\n    /**\n     * Enable SSL connection.\n     */\n    ssl?: boolean;\n\n    /**\n     * SSL Certificate store binary buffer.\n     */\n    sslCA?: Buffer;\n\n    /**\n     * Uri decode the user name and password for authentication.\n     */\n    uri_decode_auth?: boolean;\n\n    /**\n     * A hash of options to set on the db object, see Db constructor.\n     */\n    db?: DbCreateOptions;\n\n    /**\n     * A hash of options to set on the server objects, see Server constructor**.\n     */\n    server?: ServerOptions;\n\n    /**\n     * A hash of options to set on the replSet object, see ReplSet constructor**.\n     */\n    replSet?: ReplSetOptions;\n\n    /**\n     * A hash of options to set on the mongos object, see Mongos constructor**.\n     */\n    mongos?: MongosOptions;\n\n    /**\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\n     */\n    promiseLibrary?: Object;\n}\n\nexport interface CommandOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n}\n\n/**\n * Options for Db class.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\n */\nexport interface DbCreateOptions {\n\n    /**\n     * If the database authentication is dependent on another databaseName.\n     */\n    authSource?: string;\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * The current value of the parameter native_parser.\n     */\n    native_parser?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Specify if the BSON serializer should ignore undefined fields.\n     */\n    ignoreUndefined?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * Promotes Long values to number if they fit inside the 53 bits resolution.\n     */\n    promoteLongs?: boolean;\n\n    /**\n     * Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n     */\n    bufferMaxEntries?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\n     */\n    promiseLibrary?: Object;\n\n    /**\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\n     */\n    readConcern?: ReadConcern;\n}\n\n/**\n * Creates a new ReadPreference instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReadPreference.html\n */\nexport declare class ReadPreference {\n    constructor(mode: string, tags: Object);\n\n    /**\n     * The ReadPreference mode as listed above.\n     */\n    mode: string;\n\n    /**\n     * An object representing read preference tags.\n     */\n    tags: any;\n\n    /**\n     * Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).\n     */\n    static PRIMARY: string;\n\n    /**\n     * Read from primary if available, otherwise a secondary.\n     */\n    static PRIMARY_PREFERRED: string;\n\n    /**\n     * Read from secondary if available, otherwise error.\n     */\n    static SECONDARY: string;\n\n    /**\n     * Read from a secondary if available, otherwise read from the primary.\n     */\n    static SECONDARY_PREFERRED: string;\n\n    /**\n     * All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.\n     */\n    static NEAREST: string;\n\n    /**\n     * Validate if a mode is legal.\n     */\n    isValid(mode: string): boolean;\n\n    /**\n     * Validate if a mode is legal.\n     */\n    static isValid(mode: string): boolean;\n}\n\n/**\n * Creates a new Server instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport interface SocketOptions {\n\n    /**\n     * Reconnect on error.\n     */\n    autoReconnect?: boolean;\n\n    /**\n     * TCP Socket NoDelay option.\n     */\n    noDelay?: boolean;\n\n    /**\n     * TCP KeepAlive on the socket with a X ms delay before start.\n     */\n    keepAlive?: number;\n\n    /**\n     * TCP Connection timeout setting.\n     */\n    connectTimeoutMS?: number;\n\n    /**\n     * TCP Socket timeout setting.\n     */\n    socketTimeoutMS?: number;\n}\n\n/**\n * Creates a new Server instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport interface ServerOptions {\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n\n    /**\n     * Server attempt to reconnect #times.\n     */\n    reconnectTries?: number;\n\n    /**\n     * Server will wait # milliseconds between retries.\n     */\n    reconnectInterval?: number;\n}\n\n/**\n * Creates a new ReplSet instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\n */\nexport interface ReplSetOptions {\n\n    /**\n     * Turn on high availability monitoring.\n     */\n    ha?: boolean;\n\n    /**\n     * Time between each replicaset status check.\n     */\n    haInterval?: number;\n\n    /**\n     * The name of the replicaset to connect to.\n     */\n    replicaSet?: string;\n\n    /**\n     * Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms).\n     */\n    secondaryAcceptableLatencyMS?: number;\n\n    /**\n     * Sets if the driver should connect even if no primary is available.\n     */\n    connectWithNoPrimary?: boolean;\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n}\n\n/**\n * Creates a new Mongos instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\n */\nexport interface MongosOptions {\n\n    /**\n     * Turn on high availability monitoring.\n     */\n    ha?: boolean;\n\n    /**\n     * Time between each replicaset status check.\n     */\n    haInterval?: number;\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n}\n\nexport interface DbOptions {\n\n    /**\n     * Do not make the db an event listener to the original connection.\n     */\n    noListener?: boolean;\n\n    /**\n     * Control if you want to return a cached instance or have a new one created.\n     */\n    returnNonCachedInstance?: boolean;\n}\n\nexport interface IndexInformationOptions {\n\n    /**\n     * Returns the full raw index information.\n     */\n    full?: boolean;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY,\n     * ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY,\n     * ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\nexport interface ExecuteDbAdminCommandOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    // maxTimeMS?: number;\n}\n\nexport interface ListCollectionsOptions {\n\n    /**\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\n     */\n    batchSize?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Db.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\n */\nexport declare class Db extends EventEmitter {\n\n    /**\n     *\n     * @param databaseName The name of the database this instance represents.\n     * @param serverConfig The server topology for the database.\n     * @param options Optional.\n     */\n    constructor(databaseName: string, serverConfig: Server | ReplSet | Mongos, options?: DbCreateOptions);\n\n    /**\n     * Get the current db topology.\n     */\n    serverConfig: Server | ReplSet | Mongos;\n\n    /**\n     * Current bufferMaxEntries value for the database.\n     */\n    bufferMaxEntries: number;\n\n    /**\n     * The name of the database this instance represents.\n     */\n    databaseName: string;\n\n    /**\n     * The options associated with the db instance.\n     */\n    options: any;\n\n    /**\n     * The current value of the parameter native_parser.\n     */\n    native_parser: boolean;\n\n    /**\n     * The current slaveOk value for the db instance.\n     */\n    slaveOk: boolean;\n\n    /**\n     * The current write concern values.\n     */\n    writeConcern: WriteConcern;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, options?: DbAddUserOptions): Promise<any>;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, options: DbAddUserOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Return the Admin db instance.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#admin\n     */\n    admin(): Admin;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, options?: { authMechanism: string }): Promise<any>;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param password\n     * @param options\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, options: { authMechanism: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(callback: MongoCallback<void>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param forceClose Force close, emitting no events.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(forceClose?: boolean): Promise<void>;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param forceClose Force close, emitting no events.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(forceClose: boolean, callback: MongoCallback<void>): void;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string): Collection<any>;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string, callback: MongoCallback<Collection<any>>): Collection<any>;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string, options: DbCollectionOptions, callback: MongoCallback<Collection<any>>): Collection<any>;\n\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\n     */\n    collections(): Promise<Collection<any>[]>;\n\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\n     */\n    collections(callback: MongoCallback<Collection<any>[]>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, options?: { readPreference: ReadPreference | string }): Promise<any>;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, options: { readPreference: ReadPreference | string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param callback The results callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, options?: CollectionCreateOptions): Promise<Collection<any>>;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional settings.\n     * @param callback The results callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, options: CollectionCreateOptions, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, options?: MongodbIndexOptions): Promise<any>;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, options: MongodbIndexOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     *\n     * @param dbName The name of the database we want to use.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\n     */\n    db(dbName: string): Db;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     *\n     * @param dbName The name of the database we want to use.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\n     */\n    db(dbName: string, options: DbOptions): Db;\n\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name Name of collection to drop.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\n     */\n    dropCollection(name: string): Promise<boolean>;\n\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name Name of collection to drop.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\n     */\n    dropCollection(name: string, callback: MongoCallback<boolean>): void;\n\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\n     */\n    dropDatabase(): Promise<any>;\n\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\n     */\n    dropDatabase(callback: MongoCallback<any>): void;\n\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#ensureIndex\n    // ensureIndex(collectionName: any, fieldOrSpec: any, options: IndexOptions, callback: Function): void;\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#eval\n    // eval(code: any, parameters: any[], options?: any, callback?: MongoCallback<any>): void;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, options?: ExecuteDbAdminCommandOptions): Promise<any>;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, options: ExecuteDbAdminCommandOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, options?: IndexInformationOptions): Promise<any>;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, options: IndexInformationOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Get the list of all collection information for the specified db.\n     *\n     * @param filter Query to filter collections by.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#listCollections\n     */\n    listCollections(filter: Object, options?: ListCollectionsOptions): CommandCursor;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(callback: MongoCallback<any>): void;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(options?: { dbName?: string }): Promise<any>;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Open the database.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\n     */\n    open(): Promise<Db>;\n\n    /**\n     * Open the database\n     *\n     * @param callback Callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\n     */\n    open(callback: MongoCallback<Db>): void;\n\n\n    /**\n     *\n     * @param username\n     * @param callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#removeUser\n     */\n    removeUser(username: string, callback: MongoCallback<any>): void;\n    removeUser(username: string, options?: { w?: number | string, wtimeout?: number, j?: boolean }): Promise<any>;\n    removeUser(username: string, options: { w?: number | string, wtimeout?: number, j?: boolean }, callback: MongoCallback<any>): void;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, options?: { dropTarget?: boolean }): Promise<Collection<any>>;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param options Optional settings.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(callback: MongoCallback<any>): void;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(options?: { scale?: number }): Promise<any>;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(options: { scale?: number }, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this database. Will ignore all changes to system collections.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n}\n\n/**\n * Server.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport declare class Server extends EventEmitter {\n\n    /**\n     *\n     * @param host The host for the server, can be either an IP4, IP6 or domain socket style host.\n     * @param port The server port if IP4.\n     * @param options Optional.\n     */\n    constructor(host: string, port: number, options?: ServerOptions);\n\n    /**\n     * All raw connections.\n     */\n    connections(): Array<any>;\n}\n\n/**\n * ReplSet.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\n */\nexport declare class ReplSet extends EventEmitter {\n\n    /**\n     *\n     * @param servers A seedlist of servers participating in the replicaset.\n     * @param options Optional.\n     */\n    constructor(servers: Array<Server>, options?: ReplSetOptions);\n\n    /**\n     * All raw connections\n     */\n    connections(): Array<any>;\n}\n\n/**\n * Mongos.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\n */\nexport declare class Mongos extends EventEmitter {\n\n    /**\n     *\n     * @param servers A seedlist of servers participating in the replicaset.\n     * @param options Optional.\n     */\n    constructor(servers: Array<Server>, options?: MongosOptions);\n\n    /**\n     * All raw connections\n     */\n    connections(): Array<any>;\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n */\nexport interface DbAddUserOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: string | number;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\n     */\n    customData?: Object;\n\n    /**\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\n     */\n    roles?: Object[];\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n */\nexport interface CollectionCreateOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Returns an error if the collection does not exist.\n     */\n    strict?: boolean;\n\n    /**\n     * Create a capped collection.\n     */\n    capped?: boolean;\n\n    /**\n     * The size of the capped collection in bytes.\n     */\n    size?: number;\n\n    /**\n     * The maximum number of documents in the capped collection.\n     */\n    max?: number;\n\n    /**\n     * Create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.\n     */\n    autoIndexId?: boolean;\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n */\nexport interface DbCollectionOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Returns an error if the collection does not exist.\n     */\n    strict?: boolean;\n\n    /**\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\n     */\n    readConcern?: ReadConcern;\n}\n\n/**\n * Creates an index on the db and collection collection.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n */\nexport interface MongodbIndexOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Creates an unique index.\n     */\n    unique?: boolean;\n\n    /**\n     * Creates a sparse index.\n     */\n    sparse?: boolean;\n\n    /**\n     * Creates the index in the background, yielding whenever possible.\n     */\n    background?: boolean;\n\n    /**\n     * A unique index cannot be created on a key that has pre-existing duplicate values.\n     * If you would like to create the index anyway, keeping the first document\n     * the database indexes and deleting all subsequent documents that have duplicate value.\n     */\n    dropDups?: boolean;\n\n    /**\n     * For geospatial indexes set the lower bound for the co-ordinates.\n     */\n    min?: number;\n\n    /**\n     * For geospatial indexes set the high bound for the co-ordinates.\n     */\n    max?: number;\n\n    /**\n     * Specify the format version of the indexes.\n     */\n    v?: number;\n\n    /**\n     * Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher).\n     */\n    expireAfterSeconds?: number;\n\n    /**\n     * Override the autogenerated index name (useful if the resulting name is larger than 128 bytes).\n     */\n    name?: string;\n\n}\n\n/**\n * Admin.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html\n */\nexport interface Admin {\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, options?: AddUserOptions): Promise<any>;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, options: AddUserOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, password?: string): Promise<any>;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the server information for the current instance of the db client\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\n     */\n    buildInfo(): Promise<any>;\n\n    /**\n     * Retrieve the server information for the current instance of the db client\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\n     */\n    buildInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, options?: CommandOptions): Promise<any>;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, options: CommandOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * List the available databases.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\n     */\n    listDatabases(): Promise<any>;\n\n    /**\n     * List the available databases.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\n     */\n    listDatabases(callback: MongoCallback<any>): void;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\n     */\n    logout(): Promise<any>;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\n     */\n    logout(callback: MongoCallback<any>): void;\n\n    /**\n     * Ping the MongoDB server and retrieve results.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\n     */\n    ping(): Promise<any>;\n\n    /**\n     * Ping the MongoDB server and retrieve results.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\n     */\n    ping(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrive the current profiling information for MongoDB.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\n     */\n    profilingInfo(): Promise<any>;\n\n    /**\n     * Retrive the current profiling information for MongoDB.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\n     */\n    profilingInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the current profiling Level for MongoDB.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\n     */\n    profilingLevel(): Promise<any>;\n\n    /**\n     * Retrieve the current profiling Level for MongoDB.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\n     */\n    profilingLevel(callback: MongoCallback<any>): void;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, options?: FSyncOptions): Promise<any>;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, options: FSyncOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Get ReplicaSet status.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\n     */\n    replSetGetStatus(): Promise<any>;\n\n    /**\n     * Get ReplicaSet status.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\n     */\n    replSetGetStatus(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the server information for the current\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\n     */\n    serverInfo(): Promise<any>;\n\n    /**\n     * instance of the db client\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\n     * @param callback The command result callback.\n     */\n    serverInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve this db's server status.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\n     */\n    serverStatus(): Promise<any>;\n\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\n     */\n    serverStatus(callback: MongoCallback<any>): void;\n\n    /**\n     * Set the current profiling level of MongoDB.\n     *\n     * @param level The new profiling level (off, slow_only, all).\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\n     */\n    setProfilingLevel(level: string): Promise<any>;\n\n    /**\n     * Set the current profiling level of MongoDB.\n     *\n     * @param level The new profiling level (off, slow_only, all).\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\n     */\n    setProfilingLevel(level: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, options?: Object): Promise<any>;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param options Optional settings.\n     * @param callback The command result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, options: Object, callback: MongoCallback<any>): void;\n}\n\n/**\n * Add a user to the database.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n */\nexport interface AddUserOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Specify a file sync write concern.\n     */\n    fsync: boolean;\n\n    /**\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\n     */\n    customData?: Object;\n\n    /**\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\n     */\n    roles?: Object[];\n}\nexport interface ListIndexesOptions {\n\n    /**\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\n     */\n    batchSize?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\nexport interface GroupOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Remove a user from a database.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n */\nexport interface FSyncOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Specify a file sync write concern.\n     */\n    fsync?: boolean;\n}\n\nexport interface FindOneAndDeleteOptions {\n\n    /**\n     * Limits the fields to return for all matching documents.\n     */\n    projection?: Object;\n\n    /**\n     * Determines which document the operation modifies if the query selects multiple documents.\n     */\n    sort?: Object;\n\n    /**\n     * The maximum amount of time to allow the query to run.\n     */\n    maxTimeMS?: number;\n}\n\n/**\n * Create a new ObjectID instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ObjectID.html\n */\nexport declare class ObjectID {\n    constructor(s?: string | number);\n\n    /**\n     * The generation time of this ObjectId instance.\n     */\n    generationTime: number;\n\n    /**\n     * Creates an ObjectID from a hex string representation of an ObjectID.\n     */\n    static createFromHexString(hexString: string): ObjectID;\n\n    /**\n     * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n     */\n    static createFromTime(time: number): ObjectID;\n\n    /**\n     * Checks if a value is a valid bson ObjectId.\n     */\n    static isValid(id: any): boolean;\n\n    /**\n     * Compares the equality of this ObjectID with otherID.\n     */\n    equals(otherID: ObjectID): boolean;\n\n    /**\n     * Generate a 12 byte id buffer used in ObjectID's.\n     */\n    generate(time?: number): string;\n\n    /**\n     * Returns the generation date (accurate up to the second) that this ID was generated.\n     *\n     */\n    getTimestamp(): Date;\n\n    /**\n     * Return the ObjectID id as a 24 byte hex string representation.\n     */\n    toHexString(): string;\n\n    /**\n     * Get the timestamp and validate correctness.\n     */\n    toString(): string;\n}\n\n/**\n * A class representation of the BSON Binary type.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Binary.html\n */\nexport declare class Binary {\n\n    /**\n     * @param buffer A buffer object containing the binary data.\n     * @param subType The option binary type.\n     */\n    constructor(buffer: Buffer, subType?: number);\n\n    /**\n     * Byte Array BSON type.\n     */\n    static SUBTYPE_BYTE_ARRAY: number;\n\n    /**\n     * Default BSON type.\n     */\n    static SUBTYPE_DEFAULT: number;\n\n    /**\n     * Function BSON type.\n     */\n    static SUBTYPE_FUNCTION: number;\n\n    /**\n     * MD5 BSON type.\n     */\n    static SUBTYPE_MD5: number;\n\n    /**\n     * User BSON type.\n     */\n    static SUBTYPE_USER_DEFINED: number;\n\n    /**\n     * UUID BSON type.\n     */\n    static SUBTYPE_UUID: number;\n\n    /**\n     * OLD UUID BSON type\n     */\n    static SUBTYPE_UUID_OLD: number;\n\n    /**\n     * The length of the binary.\n     */\n    length(): number;\n\n    /**\n     * Updates this binary with byte_value.\n     *\n     * @param byte_value A single byte we wish to write.\n     */\n    put(byte_value: number | string): void;\n\n    /**\n     * Reads length bytes starting at position.\n     *\n     * @param position Read from the given position in the Binary.\n     * @param length The number of bytes to read.\n     */\n    read(position: number, length: number): Buffer;\n\n    /**\n     * Returns the value of this binary as a string.\n     */\n    value(): string;\n\n    /**\n     * Writes a buffer or string to the binary\n     *\n     * @param buffer A string or buffer to be written to the Binary BSON object.\n     * @param offset Specify the binary of where to write the content.\n     */\n    write(buffer: Buffer | string, offset: number): void;\n}\n/**\n * A class representation of the BSON Double type.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Double.html\n */\nexport declare class Double {\n\n    /**\n     * @param value The number we want to represent as a double.\n     */\n    constructor(value: number);\n\n    /**\n     * Access the number value.\n     */\n    valueOf(): number;\n}\n\n/**\n * Long\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Long.html\n */\nexport declare class Long {\n\n    /**\n     * @param low The low (signed) 32 bits of the Long.\n     * @param high The high (signed) 32 bits of the Long.\n     */\n    constructor(low: number, high: number);\n\n    static MAX_VALUE: Long;\n    static MIN_VALUE: Long;\n    static NEG_ONE: Long;\n    static ONE: Long;\n    static ZERO: Long;\n\n    /**\n     * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits.\n     * Each is assumed to use 32 bits.\n     *\n     * @param lowBits The low 32-bits.\n     * @param highBits The high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Long;\n\n    /**\n     * Returns a Long representing the given (32-bit) integer value.\n     *\n     * @param value The 32-bit integer in question.\n     */\n    static fromInt(value: number): Long;\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     *\n     * @param value The number in question.\n     */\n    static fromNumber(value: number): Long;\n\n    /**\n     * Returns a Long representation of the given string, written using the given radix.\n     *\n     * @param str The textual representation of the Long.\n     * @param radix The radix in which the text is written.\n     */\n    static fromString(str: string, radix?: number): Long;\n\n    /**\n     * Returns the sum of this and the given Long.\n     *\n     * @param other Long to add to this one.\n     */\n    add(other: Long): Long;\n\n    /**\n     * Returns the bitwise-AND of this Long and the given one.\n     *\n     * @param other The Long with which to AND.\n     */\n    and(other: Long): Long;\n\n    /**\n     * Compares this Long with the given one.\n     *\n     * @param other Long to compare against.\n     */\n    compare(other: Long): number;\n\n    /**\n     * Returns this Long divided by the given one.\n     *\n     * @param other Long by which to divide.\n     */\n    div(other: Long): Long;\n\n    /**\n     * Return whether this Long equals the other.\n     *\n     * @param other Long to compare against.\n     */\n    equals(other: Long): boolean;\n\n    /**\n     * Return the high 32-bits value.\n     */\n    getHighBits(): number;\n\n    /**\n     * Return the low 32-bits value.\n     */\n    getLowBits(): number;\n\n    /**\n     * Return the low unsigned 32-bits value.\n     */\n    getLowBitsUnsigned(): number;\n\n    /**\n     * Returns the number of bits needed to represent the absolute value of this Long.\n     */\n    getNumBitsAbs(): number;\n\n    /**\n     * Return whether this Long is greater than the other.\n     *\n     * @param other Long to compare against.\n     */\n    greaterThan(other: Long): number;\n\n    /**\n     * Return whether this Long is greater than or equal to the other.\n     *\n     * @param other Long to compare against.\n     */\n    greaterThanOrEqual(other: Long): number;\n\n    /**\n     * Return whether this value is negative.\n     */\n    isNegative(): boolean;\n\n    /**\n     * Return whether this value is odd.\n     */\n    isOdd(): boolean;\n\n    /**\n     * Return whether this value is zero.\n     */\n    isZero(): boolean;\n\n    /**\n     * Return whether this Long is less than the other.\n     *\n     * @param other Long to compare against.\n     */\n    lessThan(other: Long): boolean;\n\n    /**\n     * Return whether this Long is less than or equal to the other.\n     *\n     * @param other Long to compare against.\n     */\n    lessThanOrEqual(other: Long): boolean;\n\n    /**\n     * Returns this Long modulo the given one.\n     *\n     * @param other Long by which to mod.\n     */\n    modulo(other: Long): Long;\n\n    /**\n     * Returns the product of this and the given Long.\n     *\n     * @param other Long to multiply with this.\n     */\n    multiply(other: Long): Long;\n\n    /**\n     * The negation of this value.\n     */\n    negate(): Long;\n\n    /**\n     * The bitwise-NOT of this value.\n     */\n    not(): Long;\n\n    /**\n     * Return whether this Long does not equal the other.\n     *\n     * @param other Long to compare against.\n     */\n    notEquals(other: Long): boolean;\n\n    /**\n     * Returns the bitwise-OR of this Long and the given one.\n     *\n     * @param other The Long with which to OR.\n     */\n    or(other: Long): Long;\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftLeft(other: number): Long;\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRight(other: number): Long;\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRightUnsigned(other: number): Long;\n\n    /**\n     * Returns the difference of this and the given Long.\n     *\n     * @param other Long to subtract from this.\n     */\n    subtract(other: Long): Long;\n\n    /**\n     * Return the int value.\n     */\n    toInt(): number;\n\n    /**\n     * Return the JSON value.\n     */\n    toJSON(): string;\n\n    /**\n     * Return the Number value.\n     */\n    toNumber(): number;\n\n    /**\n     * Return the String value.\n     *\n     * @param opt_radix The radix in which the text should be written.\n     */\n    toString(opt_radix?: number): string;\n\n    /**\n     * Returns the bitwise-XOR of this Long and the given one.\n     *\n     * @param other The Long with which to XOR.\n     */\n    xor(other: Long): Long;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MaxKey.html\n */\nexport declare class MaxKey { }\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MinKey.html\n */\nexport declare class MinKey { }\n\n/**\n * Timestamp.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Timestamp.html\n */\nexport declare class Timestamp {\n\n    /**\n     * @param low The low (signed) 32 bits of the Timestamp.\n     * @param high The high (signed) 32 bits of the Timestamp.\n     */\n    constructor(low: number, high: number);\n\n    static MAX_VALUE: Timestamp;\n    static MIN_VALUE: Timestamp;\n    static NEG_ONE: Timestamp;\n    static ONE: Timestamp;\n    static ZERO: Timestamp;\n\n    /**\n     * Returns a Timestamp representing the 64-bit integer that comes by concatenating the\n     * given high and low bits. Each is assumed to use 32 bits..\n     *\n     * @param lowBits The low 32-bits.\n     * @param highBits The high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representing the given (32-bit) integer value.\n     *\n     * @param value The 32-bit integer in question.\n     */\n    static fromInt(value: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     *\n     * @param value The number in question.\n     */\n    static fromNumber(value: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representation of the given string, written using the given radix.\n     *\n     * @param str The textual representation of the Timestamp.\n     * @param radix The radix in which the text is written.\n     */\n    static fromString(str: string, radix?: number): Timestamp;\n\n    /**\n     * Returns the sum of this and the given Timestamp.\n     *\n     * @param other Timestamp to add to this one.\n     */\n    add(other: Timestamp): Timestamp;\n\n    /**\n     * Returns the bitwise-AND of this Timestamp and the given one.\n     *\n     * @param other Timestamp to add to this one.\n     */\n    and(other: Timestamp): Timestamp;\n\n    /**\n     * Compares this Timestamp with the given one.\n     *\n     * @param other Timestamp to compare against.\n     */\n    compare(other: Timestamp): number;\n\n    /**\n     * Returns this Timestamp divided by the given one.\n     *\n     * @param other Timestamp by which to divide.\n     */\n    div(other: Timestamp): Timestamp;\n\n    /**\n     * Return whether this Timestamp equals the other\n     *\n     * @param other\n     */\n    equals(other: Timestamp): boolean;\n\n    /**\n     * Return the high 32-bits value.\n     */\n    getHighBits(): number;\n\n    /**\n     * Return the low 32-bits value.\n     */\n    getLowBits(): number;\n\n    /**\n     * Return the low unsigned 32-bits value.\n     */\n    getLowBitsUnsigned(): number;\n\n    /**\n     * Returns the number of bits needed to represent the absolute value of this Timestamp.\n     */\n    getNumBitsAbs(): number;\n\n    /**\n     * Return whether this Timestamp is greater than the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    greaterThan(other: Timestamp): number;\n\n    /**\n     * Return whether this Timestamp is greater than or equal to the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    greaterThanOrEqual(other: Timestamp): number;\n\n    /**\n     * Return whether this value is negative.\n     */\n    isNegative(): boolean;\n\n    /**\n     * IsOdd.\n     * Return whether this value is odd.\n     */\n    isOdd(): boolean;\n\n    /**\n     * Return whether this value is zero.\n     */\n    isZero(): boolean;\n\n    /**\n     * Return whether this Timestamp is less than the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    lessThan(other: Timestamp): boolean;\n\n    /**\n     * Return whether this Timestamp is less than or equal to the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    lessThanOrEqual(other: Timestamp): boolean;\n\n    /**\n     * Returns this Timestamp modulo the given one.\n     *\n     * @param other Timestamp by which to mod.\n     */\n    modulo(other: Timestamp): Timestamp;\n\n    /**\n     * Returns the product of this and the given Timestamp.\n     *\n     * @param other Timestamp to multiply with this.\n     */\n    multiply(other: Timestamp): Timestamp;\n\n    /**\n     * The negation of this value.\n     */\n    negate(): Timestamp;\n\n    /**\n     * The bitwise-NOT of this value.\n     */\n    not(): Timestamp;\n\n    /**\n     * Return whether this Timestamp does not equal the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    notEquals(other: Timestamp): boolean;\n\n    /**\n     * Returns the bitwise-OR of this Timestamp and the given one.\n     *\n     * @param other The Timestamp with which to OR.\n     */\n    or(other: Timestamp): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the left by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftLeft(other: number): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the right by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRight(other: number): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n     *\n     * @param other\n     */\n    shiftRightUnsigned(other: number): Timestamp;\n\n    /**\n     * Returns the difference of this and the given Timestamp.\n     *\n     * @param other Timestamp to subtract from this.\n     */\n    subtract(other: Timestamp): Timestamp;\n\n    /**\n     * Return the int value.\n     */\n    toInt(): number;\n\n    /**\n     * Return the JSON value.\n     */\n    toJSON(): string;\n\n    /**\n     * Return the Number value.\n     */\n    toNumber(): number;\n\n    /**\n     * Return the String value.\n     *\n     * @param radix The radix in which the text should be written.\n     */\n    toString(radix?: number): string;\n\n    /**\n     * Returns the bitwise-XOR of this Timestamp and the given one.\n     *\n     * @param other The Timestamp with which to XOR.\n     */\n    xor(other: Timestamp): Timestamp;\n}\n\nexport interface CollectionDeleteOneOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimmeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\nexport interface CollectionDistinctOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Create a new ObjectID instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html\n */\nexport interface Collection<T> {\n\n    /**\n     * Get the collection name.\n     */\n    collectionName: string;\n\n    /**\n     * Get the full collection namespace.\n     */\n    namespace: string;\n\n    /**\n     * The current write concern values.\n     */\n    writeConcern: WriteConcern;\n\n    /**\n     * The current read concern values.\n     */\n    readConcern: ReadConcern;\n\n    /**\n     * Get current index hint for collection.\n     */\n    hint: any;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<any>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param options Optional.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<any>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate<T>(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<T>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param options Optional.\n     * @param callback Optional\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate<T>(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<T>;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], callback: MongoCallback<BulkWriteOpResultObject>): void;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], options?: CollectionBulkWriteOptions): Promise<BulkWriteOpResultObject>;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], options: CollectionBulkWriteOptions, callback: MongoCallback<BulkWriteOpResultObject>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, options?: MongoCountPreferences): Promise<number>;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count=\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, options: MongoCountPreferences, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the countDocuments.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocumentst\n     */\n    countDocuments(query: FilterQuery<T>, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n     */\n    countDocuments(query: FilterQuery<T>, options?: MongoCountPreferences): Promise<number>;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count=\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n     */\n    countDocuments(query: FilterQuery<T>, options: MongoCountPreferences, callback: MongoCallback<number>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, callback: MongoCallback<string>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string>;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, options: MongodbIndexOptions, callback: MongoCallback<string>): void;\n\n    /**\n     * CreateIndexes.\n     *\n     * @param indexSpecs An array of index specifications to be created.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\n     */\n    createIndexes(indexSpecs: Object[]): Promise<any>;\n\n    /**\n     * CreateIndexes.\n     *\n     * @param indexSpecs An array of index specifications to be created.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\n     */\n    createIndexes(indexSpecs: Object[], callback: MongoCallback<any>): void;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, options?: CollectionOptions): Promise<DeleteWriteOpResultObject>;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, options: CollectionOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, options?: CollectionDeleteOneOptions): Promise<DeleteWriteOpResultObject>;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, options: CollectionDeleteOneOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, callback: MongoCallback<any>): void;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, options?: CollectionDistinctOptions): Promise<any>;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, options: CollectionDistinctOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\n     */\n    drop(): Promise<any>;\n\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\n     */\n    drop(callback: MongoCallback<any>): void;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, options?: CollectionOptions): Promise<any>;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, options: CollectionOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\n     */\n    dropIndexes(): Promise<any>;\n\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\n     */\n    dropIndexes(callback?: MongoCallback<any>): void;\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     *\n     * @param query The cursor query object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\n     */\n    find(query?: Object): Cursor<any>;\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     *\n     * @param query The cursor query object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\n     */\n    find<T>(query?: FilterQuery<T>): Cursor<T>;\n\n    /** @deprecated */\n    find(query: FilterQuery<T>, fields?: Object, skip?: number, limit?: number, timeout?: number): Cursor<any>;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, callback: MongoCallback<any>): void;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, options?: MongodbFindOneOptions): Promise<any>;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, options: MongodbFindOneOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, options?: FindOneAndDeleteOptions): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, options: FindOneAndDeleteOptions, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any>;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional settings\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, options: GeoHaystackSearchOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optionals.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any>;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, options: GeoNearOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, callback: MongoCallback<any>): void;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: GroupOptions): Promise<any>;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options: GroupOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\n     */\n    indexes(): Promise<any>;\n\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\n     */\n    indexes(callback: MongoCallback<any>): void;\n\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\n     *\n     * @param indexes One or more index names to check.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\n     */\n    indexExists(indexes: string | string[]): Promise<boolean>;\n\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\n     *\n     * @param indexes One or more index names to check.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\n     */\n    indexExists(indexes: string | string[], callback: MongoCallback<boolean>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param callback The command result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(options?: { full: boolean }): Promise<any>;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(options: { full: boolean }, callback: MongoCallback<any>): void;\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added,\n     * creating a new operation for each switch in types.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeOrderedBulkOp\n     */\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation;\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeUnorderedBulkOp\n     */\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], callback: MongoCallback<InsertWriteOpResult>): void;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult>;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], options: CollectionInsertManyOptions, callback: MongoCallback<InsertWriteOpResult>): void;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * Returns if the collection is a capped collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\n     */\n    isCapped(): Promise<any>;\n\n    /**\n     * Returns if the collection is a capped collection.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\n     */\n    isCapped(callback: MongoCallback<any>): void;\n\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#listIndexes\n     */\n    listIndexes(options?: ListIndexesOptions): CommandCursor;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, callback: MongoCallback<any>): void;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any>;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, options: MapReduceOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Returns the options of the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\n     */\n    options(): Promise<any>;\n\n    /**\n     * Returns the options of the collection.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\n     */\n    options(callback: MongoCallback<any>): void;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(callback: MongoCallback<Cursor<any>[]>): void;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]>;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(options: ParallelCollectionScanOptions, callback: MongoCallback<Cursor<any>[]>): void;\n\n    /**\n     * Reindex all indexes on the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\n     */\n    reIndex(): Promise<any>;\n\n    /**\n     * Reindex all indexes on the collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\n     */\n    reIndex(callback: MongoCallback<any>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#remove\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }): Promise<WriteOpResult>;\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }, callback?: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, callback: MongoCallback<Collection<T>>): void;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection<T>>;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param options Optional settings.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection<T>>): void;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#save\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, options?: CollectionOptions): Promise<WriteOpResult>;\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, options: CollectionOptions, callback: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(callback: MongoCallback<CollStats>): void;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(options?: { scale: number }): Promise<CollStats>;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(options: { scale: number }, callback: MongoCallback<CollStats>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#update\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: ReplaceOneOptions & { multi?: boolean }): Promise<WriteOpResult>;\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, options: ReplaceOneOptions & { multi?: boolean }, callback: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: UpdateManyOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, options: UpdateManyOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n\n}\n\n/**\n * Condition.\n */\nexport type Condition<T, P extends keyof T> = {\n    $eq?: T[P];\n    $gt?: T[P];\n    $gte?: T[P];\n    $in?: T[P][];\n    $lt?: T[P];\n    $lte?: T[P];\n    $ne?: T[P];\n    $nin?: T[P][];\n    $and?: (FilterQuery<T[P]> | T[P])[];\n    $or?: (FilterQuery<T[P]> | T[P])[];\n    $not?: (FilterQuery<T[P]> | T[P])[] | T[P];\n    $expr?: any;\n    $jsonSchema?: any;\n    $mod?: [number, number];\n    $regex?: RegExp;\n    $options?: string;\n    $text?: {\n        $search: string;\n        $language?: string;\n        $caseSensitive?: boolean;\n        $diacraticSensitive?: boolean;\n    };\n    $where?: Object;\n    $geoIntersects?: Object;\n    $geoWithin?: Object;\n    $near?: Object;\n    $nearSphere?: Object;\n    $elemMatch?: Object;\n    $size?: number;\n    $bitsAllClear?: Object;\n    $bitsAllSet?: Object;\n    $bitsAnyClear?: Object;\n    $bitsAnySet?: Object;\n    [key: string]: any;\n};\n\n/**\n * @see https://docs.mongodb.com/manual/reference/operator/update\n */\nexport type UpdateQuery<T> = {\n    $inc?: { [P in keyof T]?: number } | { [key: string]: number };\n    $min?: { [P in keyof T]?: number } | { [key: string]: number };\n    $max?: { [P in keyof T]?: number } | { [key: string]: number };\n    $mul?: { [P in keyof T]?: number } | { [key: string]: number };\n    $set?: Partial<T> | { [key: string]: any };\n    $setOnInsert?: Partial<T> | { [key: string]: any };\n    $unset?: { [P in keyof T]?: \"\" } | { [key: string]: \"\" };\n    $rename?: { [key: string]: keyof T } | { [key: string]: string };\n    $currentDate?: { [P in keyof T]?: (true | { $type: \"date\" | \"timestamp\" }) } | { [key: string]: (true | { $type: \"date\" | \"timestamp\" }) };\n    $addToSet?: Partial<T> | { [key: string]: any };\n    $pop?: { [P in keyof T]?: -1 | 1 } | { [key: string]: -1 | 1 };\n    $pull?: Partial<T> | { [key: string]: Condition<T, keyof T> };\n    $push?: Partial<T> | { [key: string]: any };\n    $pushAll?: Partial<T> | { [key: string]: Array<any> };\n    $each?: Partial<T> | { [key: string]: Array<any> };\n    $bit?: { [P in keyof T]?: any } | { [key: string]: any };\n};\n\nexport type FilterQuery<T> = {\n    [P in keyof T]?: T[P] | Condition<T, P>;\n} | { [key: string]: any };\n\n/**\n * The name of the target collection.\n *\n * @see http://docs.mongodb.org/manual/reference/command/collStats/\n */\nexport interface CollStats {\n\n    /**\n     * Namespace.\n     */\n    ns: string;\n\n    /**\n     * The number of objects or documents in this collection.\n     */\n    count: number;\n\n    /**\n     * Collection size in bytes.\n     */\n    size: number;\n\n    /**\n     * Average object size in bytes.\n     */\n    avgObjSize: number;\n\n    /**\n     * (Pre)allocated space for the collection in bytes.\n     */\n    storageSize: number;\n\n    /**\n     * Number of extents (contiguously allocated chunks of datafile space).\n     */\n    numExtents: number;\n\n    /**\n     * Number of indexes.\n     */\n    nindexes: number;\n\n    /**\n     * Size of the most recently created extent in bytes.\n     */\n    lastExtentSize: number;\n\n    /**\n     * Padding can speed up updates if documents grow.\n     */\n    paddingFactor: number;\n\n    /**\n     * A number that indicates the user-set flags on the collection. userFlags\n     * only appears when using the mmapv1 storage engine.\n     */\n    userFlags: number;\n\n    /**\n     * Total index size in bytes.\n     */\n    totalIndexSize: number;\n\n    /**\n     * Size of specific indexes in bytes.\n     */\n    indexSizes: {\n        _id_: number;\n        username: number;\n    };\n\n    /**\n     * This field will be “true” if the collection is capped.\n     */\n    capped: boolean;\n\n    /**\n     * Shows the maximum size of a capped collection.\n     */\n    maxSize: boolean;\n\n    /**\n     * This document contains data reported directly by the WiredTiger engine and other data for internal diagnostic use.\n     */\n    wiredTiger: any;\n\n    /**\n     * A document that reports data from the WiredTiger storage engine for each index in the collection.\n     * Other storage engines will return an empty document.\n     */\n    indexDetails: any;\n\n    /**\n     *\n     */\n    ok: number;\n}\n\n/**\n * CollectionAggregationOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n */\nexport interface CollectionAggregationOptions {\n\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n     */\n    cursor?: { batchSize: number };\n\n    /**\n     * Explain returns the aggregation execution plan (requires mongodb 2.6 >).\n     */\n    explain?: boolean;\n\n    /**\n     * allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n     */\n    allowDiskUse?: boolean;\n\n    /**\n     * maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n     */\n    maxTimeMS?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * CollectionInsertManyOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n */\nexport interface CollectionInsertManyOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n}\n\nexport interface UpdateManyOptions {\n\n    /**\n     * Update operation is an upsert.\n     */\n    upsert?: boolean;\n\n    /**\n     * The write concern.\n     */\n    w?: any;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n}\n\n/**\n * CollectionBulkWriteOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n */\nexport interface CollectionBulkWriteOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Execute write operation in ordered or unordered fashion.\n     */\n    ordered?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * BulkWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~BulkWriteOpResult\n */\nexport interface BulkWriteOpResultObject {\n\n    /**\n     * Number of documents inserted.\n     */\n    insertedCount?: number;\n\n    /**\n     * Number of documents matched for update.\n     */\n    matchedCount?: number;\n\n    /**\n     * Number of documents modified.\n     */\n    modifiedCount?: number;\n\n    /**\n     * Number of documents deleted.\n     */\n    deletedCount?: number;\n\n    /**\n     * Number of documents upserted.\n     */\n    upsertedCount?: number;\n\n    /**\n     * Inserted document generated Id's, hash key is the index of the originating operation.\n     */\n    insertedIds?: any;\n\n    /**\n     * Upserted document generated Id's, hash key is the index of the originating operation.\n     */\n    upsertedIds?: any;\n\n    /**\n     * The command result object.\n     */\n    result?: any;\n}\n\n/**\n * MongoCountPreferences.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n */\nexport interface MongoCountPreferences {\n\n    /**\n     * The limit of documents to count.\n     */\n    limit?: number;\n\n    /**\n     * The number of documents to skip for the count.\n     */\n    skip?: boolean;\n\n    /**\n     * An index name hint for the query.\n     */\n    hint?: string;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * DeleteWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~deleteWriteOpResult\n */\nexport interface DeleteWriteOpResultObject {\n\n    /**\n     * The raw result returned from MongoDB, field will vary depending on server version.\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents deleted.\n     */\n    result: {\n        ok?: number;\n        n?: number;\n    };\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection?: any;\n\n    /**\n     * The number of documents deleted.\n     */\n    deletedCount?: number;\n}\n\n/**\n * FindAndModifyWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~findAndModifyWriteOpResult\n */\nexport interface FindAndModifyWriteOpResultObject {\n\n    /**\n     * Document returned from findAndModify command.\n     */\n    value?: any;\n\n    /**\n     * The raw lastErrorObject returned from the command.\n     */\n    lastErrorObject?: any;\n\n    /**\n     * Is 1 if the command executed correctly.\n     */\n    ok?: number;\n}\n\n/**\n * FindOneAndReplaceOption.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n */\nexport interface FindOneAndReplaceOption {\n\n    /**\n     * Limits the fields to return for all matching documents.\n     */\n    projection?: Object;\n\n    /**\n     * Determines which document the operation modifies if the query selects multiple documents.\n     */\n    sort?: Object;\n\n    /**\n     * The maximum amount of time to allow the query to run.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * Upsert the document if it does not exist.\n     */\n    upsert?: boolean;\n\n    /**\n     * When false, returns the updated document rather than the original. The default is true.\n     */\n    returnOriginal?: boolean;\n}\n\n/**\n * GeoHaystackSearchOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n */\nexport interface GeoHaystackSearchOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Include results up to maxDistance from the point.\n     */\n    maxDistance?: number;\n\n    /**\n     * Filter the results by a query.\n     */\n    search?: Object;\n\n    /**\n     * Max number of results to return.\n     */\n    limit?: number;\n}\n\n/**\n * GeoNearOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n */\nexport interface GeoNearOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Max number of results to return.\n     */\n    num?: number;\n\n    /**\n     * Include results starting at minDistance from a point (2.6 or higher).\n     */\n    minDistance?: number;\n\n    /**\n     * Include results up to maxDistance from the point.\n     */\n    maxDistance?: number;\n\n    /**\n     * Include a value to multiply the distances with allowing for range conversions.\n     */\n    distanceMultiplier?: number;\n\n    /**\n     * Filter the results by a query.\n     */\n    query?: Object;\n\n    /**\n     * Perform query using a spherical model.\n     */\n    spherical?: boolean;\n\n    /**\n     * The closest location in a document to the center of the search region will always be returned MongoDB > 2.X.\n     */\n    uniqueDocs?: boolean;\n\n    /**\n     * Include the location data fields in the top level of the results MongoDB > 2.X.\n     */\n    includeLocs?: boolean;\n}\n\n/**\n * A class representation of the BSON Code type.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Code.html\n */\nexport declare class Code {\n    /**\n     *\n     * @param code a string or function.\n     * @param scope optional\n     */\n    constructor(code: string | Function, scope?: Object)\n\n    /**\n     * A string or function.\n     */\n    code: string | Function;\n\n    /**\n     * An optional scope for the function.\n     */\n    scope: any;\n}\n\n/**\n * CollectionOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n */\nexport interface CollectionOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n}\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html\n */\nexport interface OrderedBulkOperation {\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\n     * @param selector The selector for the bulk operation.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#find\n     */\n    find(selector: Object): FindOperatorsOrdered;\n\n    /**\n     * Add a single insert document to the bulk operation.\n     * @param doc The document to insert\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#insert\n     */\n    insert(doc: Object): OrderedBulkOperation;\n}\n\n/**\n * BulkWriteResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/BulkWriteResult.html\n */\nexport interface BulkWriteResult {\n\n    /**\n     * Did bulk operation correctly execute.\n     */\n    ok: number;\n\n    /**\n     * number of inserted documents.\n     */\n    nInserted: number;\n\n    /**\n     * number of documents updated logically.\n     */\n    nUpdated: number;\n\n    /**\n     * Number of upserted documents.\n     */\n    nUpserted: number;\n\n    /**\n     *\n     Number of documents updated physically on disk.\n     */\n    nModified: number;\n\n    /**\n     * Number of removed documents.\n     */\n    nRemoved: number;\n\n    /**\n     * Return an array of inserted ids.\n     */\n    getInsertedIds(): Array<Object>;\n\n    /**\n     * Retrieve lastOp if available.\n     */\n    getLastOp(): Object;\n\n    /**\n     * Return raw internal result.\n     */\n    getRawResponse(): Object;\n\n    /**\n     * Return the upserted id at position x.\n     */\n    getUpsertedIdAt(index: number): Object;\n\n    /**\n     * Return an array of upserted ids.\n     */\n    getUpsertedIds(): Array<Object>;\n\n    /**\n     * Retrieve the write concern error if any.\n     */\n    getWriteConcernError(): WriteConcernError;\n\n    /**\n     * Returns a specific write error object.\n     */\n    getWriteErrorAt(index: number): WriteError;\n\n    /**\n     * Returns the number of write errors off the bulk operation.\n     */\n    getWriteErrorCount(): number;\n\n    /**\n     * Retrieve all write errors.\n     */\n    getWriteErrors(): Array<Object>;\n\n    /**\n     * Returns true if the bulk operation contains a write error.\n     */\n    hasWriteErrors(): boolean;\n}\n\n/**\n * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteError.html\n */\nexport interface WriteError {\n\n    /**\n     * Write concern error code.\n     */\n    code: number;\n\n    /**\n     * Write concern error original bulk operation index.\n     */\n    index: number;\n\n    /**\n     * Write concern error message.\n     */\n    errmsg: string;\n}\n\n/**\n * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteConcernError.html\n */\nexport interface WriteConcernError {\n\n    /**\n     * Write concern error code.\n     */\n    code: number;\n\n    /**\n     * Write concern error message.\n     */\n    errmsg: string;\n}\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsOrdered.html\n */\nexport interface FindOperatorsOrdered {\n\n    /**\n     * Add a remove operation to the bulk operation.\n     */\n    delete(): OrderedBulkOperation;\n\n    /**\n     * Add a remove one operation to the bulk operation.\n     */\n    deleteOne(): OrderedBulkOperation;\n\n    /**\n     * Add a replace one operation to the bulk operation.\n     */\n    replaceOne(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Add a single update document to the bulk operation.\n     */\n    update(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Add a single update one document to the bulk operation.\n     */\n    updateOne(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Upsert modifier for update bulk operation.\n     */\n    upsert(): FindOperatorsOrdered;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html\n */\nexport interface UnorderedBulkOperation {\n\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\n     * @param selector The selector for the bulk operation.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#find\n     */\n    find(selector: Object): FindOperatorsUnordered;\n\n    /**\n     * Add a single insert document to the bulk operation.\n     * @param doc The document to insert.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#insert\n     */\n    insert(doc: Object): UnorderedBulkOperation;\n}\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsUnordered.html\n */\nexport interface FindOperatorsUnordered {\n\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Add a remove operation to the bulk operation.\n     */\n    remove(): UnorderedBulkOperation;\n\n    /**\n     * Add a remove one operation to the bulk operation.\n     */\n    removeOne(): UnorderedBulkOperation;\n\n    /**\n     * Add a replace one operation to the bulk operation.\n     * @param doc The new document to replace the existing one with.\n     */\n    replaceOne(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Add a single update document to the bulk operation.\n     * @param doc Update operations\n     */\n    update(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Add a single update one document to the bulk operation.\n     * @param doc Update operations\n     */\n    updateOne(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Upsert modifier for update bulk operation.\n     */\n    upsert(): FindOperatorsUnordered;\n}\n\n/**\n * MongodbFindOneOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n */\nexport interface MongodbFindOneOptions {\n\n    /**\n     * Sets the limit of documents returned in the query.\n     */\n    limit?: number;\n\n    /**\n     * Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n     */\n    sort?: Array<any> | Object;\n\n    /**\n     * The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}.\n     */\n    fields?: Object;\n\n    /**\n     * Set to skip N documents ahead in your query (useful for pagination).\n     */\n    skip?: number;\n\n    /**\n     * Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}.\n     */\n    hint?: Object;\n\n    /**\n     * Explain the query instead of returning the data.\n     */\n    explain?: boolean;\n\n    /**\n     * Snapshot query.\n     */\n    snapshot?: boolean;\n\n    /**\n     * Specify if the cursor can timeout.\n     */\n    timeout?: boolean;\n\n    /**\n     * Specify if the cursor is tailable.\n     */\n    tailable?: boolean;\n\n    /**\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\n     */\n    batchSize?: number;\n\n    /**\n     * Only return the index key.\n     */\n    returnKey?: boolean;\n\n    /**\n     * Limit the number of items to scan.\n     */\n    maxScan?: number;\n\n    /**\n     * Set index bounds.\n     */\n    min?: number;\n\n    /**\n     * Set index bounds.\n     */\n    max?: number;\n\n    /**\n     * Show disk location of results.\n     */\n    showDiskLoc?: boolean;\n\n    /**\n     * You can put a $comment field on a query to make looking in the profiler logs simpler.\n     */\n    comment?: string;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Specify if the cursor should return partial results when querying against a sharded system.\n     */\n    partial?: boolean;\n\n    /**\n     * Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMs?: number;\n}\n\n/**\n * InsertWriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertWriteOpResult\n */\nexport interface InsertWriteOpResult {\n\n    /**\n     * The total amount of documents inserted.\n     */\n    insertedCount: number;\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * All the generated _id's for the inserted documents.\n     */\n    insertedIds: Array<ObjectID>;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The raw command result object returned from MongoDB (content might vary by server version).\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents inserted.\n     */\n    result: { ok: number, n: number };\n}\n\n/**\n * CollectionInsertOneOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n */\nexport interface CollectionInsertOneOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * InsertOneWriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertOneWriteOpResult\n */\nexport interface InsertOneWriteOpResult {\n\n    /**\n     * The total amount of documents inserted.\n     */\n    insertedCount: number;\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * The driver generated ObjectId for the insert operation.\n     */\n    insertedId: ObjectID;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The raw command result object returned from MongoDB (content might vary by server version).\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents inserted.\n     */\n    result: { ok: number, n: number };\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n */\nexport interface ParallelCollectionScanOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\n     */\n    batchSize?: number;\n\n    /**\n     * The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors).\n     */\n    numCursors?: number;\n\n    /**\n     * Return all BSON documents as Raw Buffer documents.\n     */\n    raw?: boolean;\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n */\nexport interface ReplaceOneOptions {\n\n    /**\n     * Update operation is an upsert.\n     */\n    upsert?: boolean;\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~updateWriteOpResult\n */\nexport interface UpdateWriteOpResult {\n\n    /**\n     * The raw result returned from MongoDB, field will vary depending on server version.\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents scanned.\n     * @param nModified The total count of documents modified.\n     */\n    result: { ok: number, n: number, nModified: number };\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The number of documents that matched the filter.\n     */\n    matchedCount: number;\n\n    /**\n     * The number of documents that were modified.\n     */\n    modifiedCount: number;\n\n    /**\n     * The number of documents upserted.\n     */\n    upsertedCount: number;\n\n    /**\n     * The upserted id.\n     * @param _id The upserted _id returned from the server.\n     */\n    upsertedId: { _id: ObjectID };\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n */\nexport interface MapReduceOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Sets the output target for the map reduce job.\n     * {inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}.\n     */\n    out?: Object;\n\n    /**\n     * Query filter object.\n     */\n    query?: Object;\n\n    /**\n     * Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\n     */\n    sort?: Object;\n\n    /**\n     * Number of objects to return from collection.\n     */\n    limit?: number;\n\n    /**\n     * Keep temporary data.\n     */\n    keeptemp?: boolean;\n\n    /**\n     * Finalize function.\n     */\n    finalize?: Function | string;\n\n    /**\n     * Can pass in variables that can be access from map/reduce/finalize.\n     */\n    scope?: Object;\n\n    /**\n     * It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.\n     */\n    jsMode?: boolean;\n\n    /**\n     * Provide statistics on job execution time.\n     */\n    verbose?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * WriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~WriteOpResult\n */\nexport interface WriteOpResult {\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The command result object.\n     */\n    result: any;\n}\n\n/**\n * WriteOpResult.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~resultCallback\n */\nexport type CursorResult = any | void | boolean;\n\n/**\n * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly).\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html\n */\nexport declare class Cursor<T> extends Readable {\n\n    /**\n     * Cursor query sort setting.\n     */\n    sortValue: string;\n\n    /**\n     * Is Cursor able to time out.\n     */\n    timeout: boolean;\n\n    /**\n     * Get cursor ReadPreference.\n     */\n    readPreference: ReadPreference;\n\n    /**\n     * @param flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].\n     * @param value The flag boolean value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addCursorFlag\n     */\n    addCursorFlag(flag: string, value: boolean): Cursor<T>;\n\n    /**\n     * @param name The query modifier (must start with $, such as $orderby etc).\n     * @param value The flag boolean value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addQueryModifier\n     */\n    addQueryModifier(name: string, value: boolean): Cursor<T>;\n\n    /**\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#batchSize\n     */\n    batchSize(value: number): Cursor<T>;\n\n    /**\n     * Clone the cursor.\n     * still returns the same type.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#clone\n     */\n    clone(): Cursor<T>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n     */\n    close(): Promise<CursorResult>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * The result callback.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n     */\n    close(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     * @param value The comment attached to this query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#comment\n     */\n    comment(value: string): Cursor<T>;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, callback: MongoCallback<number>): void;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, options?: CursorCommentOptions): Promise<number>;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, options: CursorCommentOptions, callback: MongoCallback<number>): void;\n\n    /**\n     * Execute the explain for the cursor.\n     * returns Promise if no callback passed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\n     */\n    explain(): Promise<CursorResult>;\n\n    /**\n     * Execute the explain for the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\n     */\n    explain(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Set the cursor query.\n     * @param filter The filter object used for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#filter\n     */\n    filter(filter: Object): Cursor<T>;\n\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     * @param iterator The iteration callback.\n     * @param callback The end callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Cursor.html#forEach\n     */\n    forEach(iterator: IteratorCallback<T>, callback: EndCallback): void;\n    forEach(iterator: IteratorCallback<T>): Promise<void>;    \n\n    /**\n     * Check if there is any document still available in the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\n     */\n    hasNext(): Promise<boolean>;\n\n    /**\n     * Check if there is any document still available in the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\n     */\n    hasNext(callback: MongoCallback<boolean>): void;\n\n    /**\n     * Set the cursor hint.\n     * @param hint If specified, then the query system will only consider plans using the hinted index.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hint\n     */\n    hint(hint: Object): Cursor<T>;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Set the limit for the cursor.\n     * @param value The limit for the cursor query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#limit\n     */\n    limit(value: number): Cursor<T>;\n\n    /**\n     * SMap all documents using the provided function.\n     * @param transform The mapping transformation method.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#map\n     */\n    map(transform: Function): Cursor<T>;\n\n    /**\n     * Set the cursor max.\n     * @param max Specify a $max value to specify the exclusive upper bound for a specific index in\n     * order to constrain the results of find(). The $max specifies the upper bound for\n     * all keys of a specific index in order.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#max\n     */\n    max(max: number): Cursor<T>;\n\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the\n     * timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise).\n     * @param value Number of milliseconds to wait before aborting the tailed query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxAwaitTimeMS\n     */\n    maxAwaitTimeMS(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor maxScan.\n     * @param maxScan Constrains the query to only scan the specified number of documents when fulfilling the query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxScan\n     */\n    maxScan(maxScan: Object): Cursor<T>;\n\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher).\n     * @param value Number of milliseconds to wait before aborting the query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor min.\n     * @param min Specify a $min value to specify the inclusive lower bound for a specific index in order to\n     * constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#min\n     */\n    min(min: number): Cursor<T>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    next(): Promise<CursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    next(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Sets a field projection for the query.\n     * @param value The field projection object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#project\n     */\n    project(value: Object): Cursor<T>;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Set the cursor returnKey.\n     * @param returnKey Only return the index field or fields for the results of the query. If $returnKey is set\n     * to true and the query does not use an index to perform the read operation,\n     * the returned documents will not contain any fields. Use one of the following forms:\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    returnKey(returnKey: Object): Cursor<T>;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#rewind\n     */\n    rewind(): void;\n\n    /**\n     * Set a node.js specific cursor option.\n     * @param field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].\n     * @param value The field value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setCursorOption\n     */\n    setCursorOption(field: string, value: Object): Cursor<T>;\n\n    /**\n     * Set the ReadPreference for the cursor.\n     * @param readPreference The new read preference for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setReadPreference\n     */\n    setReadPreference(readPreference: string | ReadPreference): Cursor<T>;\n\n    /**\n     * Set the cursor showRecordId.\n     * @param showRecordId The $showDiskLoc option has now been deprecated and replaced with the\n     * showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#showRecordId\n     */\n    showRecordId(showRecordId: Object): Cursor<T>;\n\n    /**\n     * Set the skip for the cursor.\n     * @param value The skip for the cursor query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#skip\n     */\n    skip(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor snapshot.\n     * @param snapshot The $snapshot operator prevents the cursor from returning a document more than\n     * once because an intervening write operation results in a move of the document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#snapshot\n     */\n    snapshot(snapshot: Object): Cursor<T>;\n\n    /**\n     * Sets the sort order of the cursor query.\n     * @param keyOrList The key or keys set for the sort.\n     * @param direction The direction of the sorting (1 or -1).\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#sort\n     */\n    sort(keyOrList: string | Object[] | Object, direction?: number): Cursor<T>;\n\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @param options Optional settings.\n     * @param transform A transformation method applied to each document emitted by the stream.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#stream\n     */\n    stream(options?: { transform?: Function }): Cursor<T>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\n     * memory to store the results. Note that the array only contain partial results when this cursor had\n     * been previously accessed. In that case, cursor.rewind() can be used to reset the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\n     */\n    toArray(): Promise<T[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\n     * memory to store the results. Note that the array only contain partial results when this cursor had\n     * been previously accessed. In that case, cursor.rewind() can be used to reset the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\n     */\n    toArray(callback: MongoCallback<T[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some\n     * data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n}\n\n/**\n * Get the count of documents for this cursor.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n */\nexport interface CursorCommentOptions {\n\n    /**\n     * The number of documents to skip.\n     */\n    skip?: number;\n\n    /**\n     * The maximum amounts to count before aborting.\n     */\n    limit?: number;\n\n    /**\n     * Number of miliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * An index name hint for the query.\n     */\n    hint?: string;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Creates a new Change Stream instance.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html\n */\nexport declare class ChangeStream extends Readable {\n\n    constructor(changeDomain: MongoClient | Db | Collection<any>, pipeline: Object[], options?: ChangeStreamOptions);\n\n    /**\n     * Close the Change Stream.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#close\n     */\n    close(): Promise<any>;\n\n    /**\n     * Close the Change Stream.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#close\n     */\n    close(callback: MongoCallback<any>): void;\n\n    /**\n     * Check if there is any document still available in the Change Stream.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#hasNext\n     */\n    hasNext(): Promise<any>;\n\n    /**\n     * Check if there is any document still available in the Change Stream.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#hasNext\n     */\n    hasNext(callback: MongoCallback<any>): void;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#next\n     */\n    next(): Promise<any>;\n\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#next\n     */\n    next(callback: MongoCallback<any>): void;\n\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#stream\n     */\n    stream(options?: { transform: Function }): Cursor<any>;\n}\n\n/**\n * ChangeStreamOptions\n */\nexport interface ChangeStreamOptions {\n\n    /**\n     * Allowed values: ‘default’, ‘updateLookup’.\n     * When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document,\n     * as well as a copy of the entire document that was changed from some time after the change occurred.\n     */\n    fullDocument?: string;\n\n    /**\n     * The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n     */\n    maxAwaitTimeMS?: number;\n\n    /**\n     * Specifies the logical starting point for the new change stream.\n     * This should be the _id field from a previously returned change stream document.\n     */\n    resumeAfter?: Object;\n\n    /**\n     * The number of documents to return per batch.\n     */\n    batchSize?: number;\n\n    /**\n     * Specify collation settings for operation.\n     */\n    collation?: CollationDocument;\n\n    /**\n     * The read preference. Defaults to the read preference of the database or collection.\n     */\n    readPreference?: ReadPreference;\n}\n\n/**\n * CollationDocument\n */\nexport interface CollationDocument {\n    locale: string;\n    strength?: number;\n    caseLevel?: boolean;\n    caseFirst?: string;\n    numericOrdering?: boolean;\n    alternate?: string;\n    maxVariable?: string;\n    backwards?: boolean;\n    normalization?: boolean;\n\n}\n\n/**\n * A class representing a client session on the server.\n * WARNING: not meant to be instantiated directly.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html\n */\nexport interface ClientSession extends EventEmitter {\n\n    /**\n     * The server id associated with this session\n     */\n    id: any;\n\n    /**\n     * Aborts the currently active transaction in this session.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#abortTransaction\n     */\n    abortTransaction(): Promise<void>;\n\n    /**\n     * Aborts the currently active transaction in this session.\n     * @param callback Optional callback for completion of this operation\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#abortTransaction\n     */\n    abortTransaction(callback?: MongoCallback<void>): Promise<void>;\n\n    /**\n     * Advances the operationTime for a ClientSession.\n     * @param operationTime the BSON.Timestamp of the operation type it is desired to advance to.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#advanceOperationTime\n     */\n    advanceOperationTime(operationTime: Timestamp): void;\n\n    /**\n     * Commits the currently active transaction in this session.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#commitTransaction\n     */\n    commitTransaction(): Promise<void>;\n\n    /**\n     * Commits the currently active transaction in this session.\n     * @param callback Optional callback for completion of this operation.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#commitTransaction\n     */\n    commitTransaction(callback?: MongoCallback<void>): Promise<void>;\n\n    /**\n     * Ends this session on the server.\n     * @param callback Optional callback for completion of this operation.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#endSession\n     */\n    endSession(callback?: MongoCallback<void>): void;\n\n    /**\n     * Ends this session on the server.\n     * @param options Optional settings. Currently reserved for future use.\n     * @param callback Optional callback for completion of this operation.\n     * @see @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#endSession\n     */\n    endSession(options?: any, callback?: MongoCallback<void>): void;\n\n    /**\n     * Used to determine if this session equals another.\n     * @param session A class representing a client session on the server.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#equals\n     */\n    equals(session: ClientSession): boolean;\n\n    /**\n     * Increment the transaction number on the internal ServerSession.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#incrementTransactionNumber\n     */\n    incrementTransactionNumber(): void;\n\n    /**\n     * Check this session is currently in a transaction or not.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#inTransaction\n     */\n    inTransaction(): boolean;\n\n    /**\n     * Starts a new transaction with the given options.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#startTransaction\n     */\n    startTransaction(options?: TransactionOptions): void;\n\n}\n\n/**\n * Options to pass when creating a Client Session\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#SessionOptions\n */\nexport interface SessionOptions {\n\n    /**\n     * Whether causal consistency should be enabled on this session\n     */\n    causalConsistency?: boolean;\n\n    /**\n     * The default TransactionOptions to use for transactions started on this session.\n     */\n    defaultTransactionOptions?: TransactionOptions;\n}\n\n/**\n * TransactionOptions\n */\nexport interface TransactionOptions {\n\n    readConcern?: ReadConcern;\n    writeConcern?: WriteConcern;\n    readPreference?: ReadPreference;\n}\n\n/**\n * MongoClientCommonOption\n */\nexport interface MongoClientCommonOption {\n    /**\n     * Do not make the db an event listener to the original connection.\n     */\n    noListener?: boolean;\n\n    /**\n     * Control if you want to return a cached instance or have a new one created\n     */\n    returnNonCachedInstance?: boolean;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#ReadConcern\n */\nexport type ReadConcernLevel = \"local\" | \"available\" | \"majority\" | \"linearizable\" | \"snapshot\";\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#ReadConcern\n */\nexport interface ReadConcern {\n    level?: ReadConcernLevel;\n}\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#WriteConcern\n */\nexport interface WriteConcern {\n\n    /**\n     * requests acknowledgement that the write operation has\n     * propagated to a specified number of mongod hosts\n     */\n    w?: number | \"majority\" | string;\n\n    /**\n     * requests acknowledgement from MongoDB that the write operation has\n     * been written to the journal\n     */\n    j?: boolean;\n\n    /**\n     * a time limit, in milliseconds, for the write concern\n     */\n    wtimeout?: number;\n}\n\n/**\n * The callback format for the forEach iterator method.\n * @param doc An emitted document for the iterator.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~iteratorCallback\n */\nexport interface IteratorCallback<T> {\n    (doc: T): void;\n}\n\n/**\n * The callback error format for the forEach iterator method.\n * @param error An error instance representing the error during the execution.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~endCallback\n */\nexport interface EndCallback {\n    (error: MongoError): void;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#~resultCallback\n */\nexport type AggregationCursorResult = any | void;\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly),\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html\n */\nexport interface AggregationCursor<T> extends Readable {\n\n    /**\n     * Set the batch size for the cursor.\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#batchSize\n     */\n    batchSize(value: number): AggregationCursor<T>;\n\n    /**\n     * Clone the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#clone\n     */\n    clone(): AggregationCursor<T>;\n\n    /**\n     * Close the cursor, sending a AggregationCursor command and emitting close.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\n     */\n    close(): Promise<AggregationCursorResult>;\n\n    /**\n     * Close the cursor, sending a AggregationCursor command and emitting close.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\n     */\n    close(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Iterates over all the documents for this cursor. As with {cursor.toArray}, not all of the elements will\n     * be iterated if this cursor had been previouly accessed. In that case, {cursor.rewind} can be used to reset\n     * the cursor. However, unlike {cursor.toArray}, the cursor will only hold a maximum of batch size elements\n     * at any given time if batch size is specified. Otherwise, the caller is responsible for making sure\n     * that the entire result can fit the memory.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#each\n     */\n    each(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Execute the explain for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\n     */\n    explain(): Promise<AggregationCursorResult>;\n\n    /**\n     * Execute the explain for the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\n     */\n    explain(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Add a geoNear stage to the aggregation pipeline.\n     * @param document The geoNear stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#geoNear\n     */\n    geoNear(document: Object): AggregationCursor<T>;\n\n    /**\n     * Add a group stage to the aggregation pipeline.\n     * @param document The group stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#group\n     */\n    group(document: Object): AggregationCursor<T>;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Add a limit stage to the aggregation pipeline.\n     * @param value The state limit value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#limit\n     */\n    limit(value: number): AggregationCursor<T>;\n\n    /**\n     * Add a match stage to the aggregation pipeline.\n     * @param document The match stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#match\n     */\n    match(document: Object): AggregationCursor<T>;\n\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline.\n     * @param value The state maxTimeMS value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): AggregationCursor<T>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\n     */\n    next(): Promise<AggregationCursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\n     */\n    next(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Add a out stage to the aggregation pipeline.\n     * @param destination The destination name.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#out\n     */\n    out(destination: string): AggregationCursor<T>;\n\n    /**\n     * Add a project stage to the aggregation pipeline.\n     * @param document The project stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#project\n     */\n    project(document: Object): AggregationCursor<T>;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Add a redact stage to the aggregation pipeline.\n     * @param document The redact stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#redact\n     */\n    redact(document: Object): AggregationCursor<T>;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#rewind\n     */\n    rewind(): AggregationCursor<T>;\n\n    /**\n     * Add a skip stage to the aggregation pipeline.\n     * @param value The state skip value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#setEncoding\n     */\n    skip(value: number): AggregationCursor<T>;\n\n    /**\n     * Add a sort stage to the aggregation pipeline.\n     * @param document The sort stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#sort\n     */\n    sort(document: Object): AggregationCursor<T>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contain partial\n     * results when this cursor had been previouly accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\n     */\n    toArray(): Promise<T[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contain partial\n     * results when this cursor had been previouly accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\n     */\n    toArray(callback: MongoCallback<T[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser,\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\n     * so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n\n    /**\n     * Add a unwind stage to the aggregation pipeline.\n     * @param field The unwind field name.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unwind\n     */\n    unwind(field: string): AggregationCursor<T>;\n}\n\n/**\n * CommandCursor.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html\n */\nexport interface CommandCursor extends Readable {\n\n    /**\n     * Set the batch size for the cursor.\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#batchSize\n     */\n    batchSize(value: number): CommandCursor;\n\n    /**\n     * Clone the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#clone\n     */\n    clone(): CommandCursor;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\n     */\n    close(): Promise<AggregationCursorResult>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\n     */\n    close(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Each\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#each\n     */\n    each(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline.\n     * @param value The state maxTimeMS value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): CommandCursor;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\n     */\n    next(): Promise<AggregationCursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\n     */\n    next(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#rewind\n     */\n    rewind(): CommandCursor;\n\n    /**\n     * Set the ReadPreference for the cursor.\n     * @param readPreference The new read preference for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#setReadPreference\n     */\n    setReadPreference(readPreference: string | ReadPreference): CommandCursor;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\n     */\n    toArray(): Promise<any[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\n     */\n    toArray(callback: MongoCallback<any[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser,\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\n     * so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n}\n\n/**\n * GridFSBucket.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\n */\nexport declare class GridFSBucket {\n\n    /**\n     *\n     * @param db A db handle.\n     * @param options Optional settings.\n     */\n    constructor(db: Db, options?: GridFSBucketOptions);\n\n    /**\n     * Deletes a file with the given id.\n     * @param id The id of the file doc\n     * @param callback The result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#delete\n     */\n    delete(id: ObjectID, callback?: GridFSBucketErrorCallback): void;\n\n    /**\n     * Removes this bucket's files collection, followed by its chunks collection.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#drop\n     */\n    drop(callback?: GridFSBucketErrorCallback): void;\n\n    /**\n     * Convenience wrapper around find on the files collection\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\n     */\n    find(filter?: Object, options?: GridFSBucketFindOptions): Cursor<any>;\n\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file.\n     * @param id The id of the file doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStream\n     */\n    openDownloadStream(id: ObjectID, options?: { start: number, end: number }): GridFSBucketReadStream;\n\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file\n     * @param filename The id of the file doc\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStreamByName\n     */\n\n    openDownloadStreamByName(filename: string, options?: { revision: number, start: number, end: number }): GridFSBucketReadStream;\n\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS.\n     * The stream's 'id' property contains the resulting file's id.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\n     */\n    openUploadStream(filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\n\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS for a custom file id.\n     * The stream's 'id' property contains the resulting file's id.\n     * @param id A custom id used to identify the file.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStreamWithId\n     */\n    openUploadStreamWithId(id: string | number | Object, filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\n\n    /**\n     * Renames the file with the given _id to the given string.\n     * @param id the id of the file to rename.\n     * @param filename new name for the file.\n     * @param callback The result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#rename\n     */\n    rename(id: ObjectID, filename: string, callback?: GridFSBucketErrorCallback): void;\n}\n\n/**\n * Constructor for a streaming GridFS interface.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\n */\nexport interface GridFSBucketOptions {\n\n    /**\n     * The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n     */\n    bucketName?: string;\n\n    /**\n     * Number of bytes stored in each chunk. Defaults to 255KB.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * Optional write concern to be passed to write operations, for instance { w: 1 }.\n     */\n    writeConcern?: WriteConcern;\n\n    /**\n     * Optional read preference to be passed to read operations.\n     */\n    ReadPreference?: ReadPreference;\n}\n\n/**\n * GridFSBucketErrorCallback.\n * @param err An error instance representing any errors that occurred.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#~errorCallback\n */\nexport interface GridFSBucketErrorCallback {\n    (err?: MongoError): void;\n}\n\n/**\n * GridFSBucketFindOptions.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\n */\nexport interface GridFSBucketFindOptions {\n\n    /**\n     * Optional batch size for cursor.\n     */\n    batchSize?: number;\n\n    /**\n     * Optional limit for cursor.\n     */\n    limit?: number;\n\n    /**\n     * Optional maxTimeMS for cursor.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * Optionally set cursor's noCursorTimeout flag.\n     */\n    noCursorTimeout?: boolean;\n\n    /**\n     * Optional skip for cursor.\n     */\n    skip?: number;\n\n    /**\n     * Optional sort for cursor.\n     */\n    sort?: Object;\n}\n\n/**\n * GridFSBucketOpenUploadStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\n */\nexport interface GridFSBucketOpenUploadStreamOptions {\n\n    /**\n     * Optional overwrite this bucket's chunkSizeBytes for this file.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * Optional object to store in the file document's metadata field.\n     */\n    metadata?: Object;\n\n    /**\n     * Optional string to store in the file document's contentType field.\n     */\n    contentType?: string;\n\n    /**\n     * Optional array of strings to store in the file document's aliases field.\n     */\n    aliases?: Array<string>;\n}\n\n/**\n * GridFSBucketReadStream.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\n */\nexport declare class GridFSBucketReadStream extends Readable {\n\n    /**\n     *\n     * @param chunks Handle for chunks collection.\n     * @param files Handle for files collection.\n     * @param readPreference The read preference to use.\n     * @param filter The query to use to find the file document.\n     * @param options Optional settings.\n     */\n    constructor(chunks: Collection<any>, files: Collection<any>, readPreference: Object, filter: Object, options?: GridFSBucketReadStreamOptions);\n}\n\n/**\n * GridFSBucketReadStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\n */\nexport interface GridFSBucketReadStreamOptions {\n\n    /**\n     * Optional sort for the file find query.\n     */\n    sort?: number;\n\n    /**\n     * Optional skip for the file find query.\n     */\n    skip?: number;\n\n    /**\n     * Optional 0-based offset in bytes to start streaming from.\n     */\n    start?: number;\n\n    /**\n     * Optional 0-based offset in bytes to stop streaming before.\n     */\n    end?: number;\n}\n\n/**\n * GridFSBucketWriteStream\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\n */\nexport declare class GridFSBucketWriteStream extends Writable {\n\n    /**\n     *\n     * @param bucket Handle for this stream's corresponding bucket.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings.\n     */\n    constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions);\n}\n\n/**\n * GridFSBucketWriteStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\n */\nexport interface GridFSBucketWriteStreamOptions {\n\n    /**\n     * Custom file id for the GridFS file.\n     */\n    id?: string | number | Object;\n\n    /**\n     * The chunk size to use, in bytes.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * The write concern.\n     */\n    w?: number;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * The journal write concern.\n     */\n    j?: number;\n}\n"],"sourceRoot":"../.."}
##############################################
/src/browser/driver/mysql/MysqlConnectionOptions.d.ts-35-    /**
/src/browser/driver/mysql/MysqlConnectionOptions.d.ts:36:     * Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: false)
/src/browser/driver/mysql/MysqlConnectionOptions.d.ts-37-     */
/src/browser/driver/mysql/MysqlConnectionOptions.d.ts:38:    readonly insecureAuth?: boolean;
/src/browser/driver/mysql/MysqlConnectionOptions.d.ts-39-    /**
##############################################
/src/browser/driver/mysql/MysqlDriver.js-754-            connectTimeout: options.connectTimeout,
/src/browser/driver/mysql/MysqlDriver.js:755:            insecureAuth: options.insecureAuth,
/src/browser/driver/mysql/MysqlDriver.js-756-            supportBigNumbers: options.supportBigNumbers !== undefined ? options.supportBigNumbers : true,
##############################################
/src/browser/driver/mysql/MysqlConnectionOptions.js.map:1:{"version":3,"sources":["../browser/src/driver/mysql/MysqlConnectionOptions.ts"],"names":[],"mappings":"","file":"MysqlConnectionOptions.js","sourcesContent":["import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\nimport {MysqlConnectionCredentialsOptions} from \"./MysqlConnectionCredentialsOptions\";\n\n/**\n * MySQL specific connection options.\n *\n * @see https://github.com/mysqljs/mysql#connection-options\n */\nexport interface MysqlConnectionOptions extends BaseConnectionOptions, MysqlConnectionCredentialsOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"mysql\"|\"mariadb\";\n\n    /**\n     * The charset for the connection. This is called \"collation\" in the SQL-level of MySQL (like utf8_general_ci).\n     * If a SQL-level charset is specified (like utf8mb4) then the default collation for that charset is used.\n     * Default: 'UTF8_GENERAL_CI'\n     */\n    readonly charset?: string;\n\n    /**\n     * The timezone configured on the MySQL server.\n     * This is used to type cast server date/time values to JavaScript Date object and vice versa.\n     * This can be 'local', 'Z', or an offset in the form +HH:MM or -HH:MM. (Default: 'local')\n     */\n    readonly timezone?: string;\n\n    /**\n     * The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: 10000)\n     */\n    readonly connectTimeout?: number;\n\n    /**\n     * The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: 10000)\n     * This difference between connectTimeout and acquireTimeout is subtle and is described in the mysqljs/mysql docs\n     * https://github.com/mysqljs/mysql/tree/master#pool-options\n     */ \n    readonly acquireTimeout?: number;\n\n    /**\n     * Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: false)\n     */\n    readonly insecureAuth?: boolean;\n\n    /**\n     * When dealing with big numbers (BIGINT and DECIMAL columns) in the database, you should enable this option (Default: false)\n     */\n    readonly supportBigNumbers?: boolean;\n\n    /**\n     * Enabling both supportBigNumbers and bigNumberStrings forces big numbers (BIGINT and DECIMAL columns) to be always\n     * returned as JavaScript String objects (Default: false). Enabling supportBigNumbers but leaving bigNumberStrings\n     * disabled will return big numbers as String objects only when they cannot be accurately represented with\n     * [JavaScript Number objects](http://ecma262-5.com/ELS5_HTML.htm#Section_8.5) (which happens when they exceed the [-2^53, +2^53] range),\n     * otherwise they will be returned as Number objects. This option is ignored if supportBigNumbers is disabled.\n     */\n    readonly bigNumberStrings?: boolean;\n\n    /**\n     * Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather then inflated into JavaScript Date objects.\n     * Can be true/false or an array of type names to keep as strings.\n     */\n    readonly dateStrings?: boolean|string[];\n\n    /**\n     * Prints protocol details to stdout. Can be true/false or an array of packet type names that should be printed.\n     * (Default: false)\n     */\n    readonly debug?: boolean|string[];\n\n    /**\n     * Generates stack traces on Error to include call site of library entrance (\"long stack traces\").\n     * Slight performance penalty for most calls. (Default: true)\n     */\n    readonly trace?: boolean;\n\n    /**\n     * Allow multiple mysql statements per query. Be careful with this, it could increase the scope of SQL injection attacks.\n     * (Default: false)\n     */\n    readonly multipleStatements?: boolean;\n\n    /**\n     * Use spatial functions like GeomFromText and AsText which are removed in MySQL 8.\n     * (Default: true)\n     */\n    readonly legacySpatialSupport?: boolean;\n\n    /**\n     * List of connection flags to use other than the default ones. It is also possible to blacklist default ones.\n     * For more information, check https://github.com/mysqljs/mysql#connection-flags.\n     */\n    readonly flags?: string[];\n\n    /**\n     * Replication setup.\n     */\n    readonly replication?: {\n\n        /**\n         * Master server used by orm to perform writes.\n         */\n        readonly master: MysqlConnectionCredentialsOptions;\n\n        /**\n         * List of read-from severs (slaves).\n         */\n        readonly slaves: MysqlConnectionCredentialsOptions[];\n\n        /**\n         * If true, PoolCluster will attempt to reconnect when connection fails. (Default: true)\n         */\n        readonly canRetry?: boolean;\n\n        /**\n         * If connection fails, node's errorCount increases.\n         * When errorCount is greater than removeNodeErrorCount, remove a node in the PoolCluster. (Default: 5)\n         */\n        readonly removeNodeErrorCount?: number;\n\n        /**\n         * If connection fails, specifies the number of milliseconds before another connection attempt will be made.\n         * If set to 0, then node will be removed instead and never re-used. (Default: 0)\n         */\n        readonly restoreNodeTimeout?: number;\n\n        /**\n         * Determines how slaves are selected:\n         * RR: Select one alternately (Round-Robin).\n         * RANDOM: Select the node by random function.\n         * ORDER: Select the first node available unconditionally.\n         */\n        readonly selector?: \"RR\"|\"RANDOM\"|\"ORDER\";\n\n    };\n\n}\n"],"sourceRoot":"../.."}
##############################################
/src/browser/driver/mysql/MysqlDriver.js.map:1:{"version":3,"sources":["../browser/src/driver/mysql/MysqlDriver.ts"],"names":[],"mappings":"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","file":"MysqlDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {MysqlConnectionOptions} from \"./MysqlConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {MysqlConnectionCredentialsOptions} from \"./MysqlConnectionCredentialsOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\n\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class MysqlDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Mysql underlying library.\n     */\n    mysql: any;\n\n    /**\n     * Connection pool.\n     * Used in non-replication mode.\n     */\n    pool: any;\n\n    /**\n     * Pool cluster used in replication mode.\n     */\n    poolCluster: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: MysqlConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n     * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        // numeric types\n        \"bit\",\n        \"int\",\n        \"integer\",          // synonym for int\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"float\",\n        \"double\",\n        \"double precision\", // synonym for double\n        \"real\",             // synonym for double\n        \"decimal\",\n        \"dec\",              // synonym for decimal\n        \"numeric\",          // synonym for decimal\n        \"fixed\",            // synonym for decimal\n        \"bool\",             // synonym for tinyint\n        \"boolean\",          // synonym for tinyint\n        // date and time types\n        \"date\",\n        \"datetime\",\n        \"timestamp\",\n        \"time\",\n        \"year\",\n        // string types\n        \"char\",\n        \"nchar\",            // synonym for national char\n        \"national char\",\n        \"varchar\",\n        \"nvarchar\",         // synonym for national varchar\n        \"national varchar\",\n        \"blob\",\n        \"text\",\n        \"tinyblob\",\n        \"tinytext\",\n        \"mediumblob\",\n        \"mediumtext\",\n        \"longblob\",\n        \"longtext\",\n        \"enum\",\n        \"set\",\n        \"binary\",\n        \"varbinary\",\n        // json data type\n        \"json\",\n        // spatial data types\n        \"geometry\",\n        \"point\",\n        \"linestring\",\n        \"polygon\",\n        \"multipoint\",\n        \"multilinestring\",\n        \"multipolygon\",\n        \"geometrycollection\"\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\n        \"geometry\",\n        \"point\",\n        \"linestring\",\n        \"polygon\",\n        \"multipoint\",\n        \"multilinestring\",\n        \"multipolygon\",\n        \"geometrycollection\"\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"varchar\",\n        \"nvarchar\",\n        \"binary\",\n        \"varbinary\"\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withWidthColumnTypes: ColumnType[] = [\n        \"bit\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"int\",\n        \"integer\",\n        \"bigint\"\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\",\n        \"time\",\n        \"datetime\",\n        \"timestamp\"\n    ];\n\n    /**\n     * Gets list of column data types that supports scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\"\n    ];\n\n    /**\n     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\n     */\n    unsignedAndZerofillTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"smallint\",\n        \"tinyint\",\n        \"mediumint\",\n        \"bigint\",\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\"\n    ];\n\n    /**\n     * ORM has special columns and we need to know what database column types should be for those columns.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDatePrecision: 6,\n        createDateDefault: \"CURRENT_TIMESTAMP(6)\",\n        updateDate: \"datetime\",\n        updateDatePrecision: 6,\n        updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\n        deleteDate: \"datetime\",\n        deleteDatePrecision: 6,\n        deleteDateNullable: true,\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationId: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"text\",\n        cacheResult: \"text\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"text\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"varchar\": { length: 255 },\n        \"nvarchar\": { length: 255 },\n        \"national varchar\": { length: 255 },\n        \"char\": { length: 1 },\n        \"binary\": { length: 1 },\n        \"varbinary\": { length: 255 },\n        \"decimal\": { precision: 10, scale: 0 },\n        \"dec\": { precision: 10, scale: 0 },\n        \"numeric\": { precision: 10, scale: 0 },\n        \"fixed\": { precision: 10, scale: 0 },\n        \"float\": { precision: 12 },\n        \"double\": { precision: 22 },\n        \"time\": { precision: 0 },\n        \"datetime\": { precision: 0 },\n        \"timestamp\": { precision: 0 },\n        \"bit\": { width: 1 },\n        \"int\": { width: 11 },\n        \"integer\": { width: 11 },\n        \"tinyint\": { width: 4 },\n        \"smallint\": { width: 6 },\n        \"mediumint\": { width: 9 },\n        \"bigint\": { width: 20 }\n    };\n\n\n    /**\n     * Max length allowed by MySQL for aliases.\n     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n     */\n    maxAliasLength = 63;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = {\n            legacySpatialSupport: true,\n            ...connection.options\n        } as MysqlConnectionOptions;\n        this.isReplicated = this.options.replication ? true : false;\n\n        // load mysql package\n        this.loadDependencies();\n\n        this.database = this.options.replication ? this.options.replication.master.database : this.options.database;\n\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\n        // todo: provide options to auto-create a database if it does not exist yet\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n\n        if (this.options.replication) {\n            this.poolCluster = this.mysql.createPoolCluster(this.options.replication);\n            this.options.replication.slaves.forEach((slave, index) => {\n                this.poolCluster.add(\"SLAVE\" + index, this.createConnectionOptions(this.options, slave));\n            });\n            this.poolCluster.add(\"MASTER\", this.createConnectionOptions(this.options, this.options.replication.master));\n\n        } else {\n            this.pool = await this.createPool(this.createConnectionOptions(this.options, this.options));\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.poolCluster && !this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\n\n        if (this.poolCluster) {\n            return new Promise<void>((ok, fail) => {\n                this.poolCluster.end((err: any) => err ? fail(err) : ok());\n                this.poolCluster = undefined;\n            });\n        }\n        if (this.pool) {\n            return new Promise<void>((ok, fail) => {\n                this.pool.end((err: any) => {\n                    if (err) return fail(err);\n                    this.pool = undefined;\n                    ok();\n                });\n            });\n        }\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\n        return new MysqlQueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            let value: any;\n            if (key.substr(0, 4) === \":...\") {\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (value instanceof Function) {\n                return value();\n\n            } else {\n                escapedParameters.push(value);\n                return \"?\";\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        return database ? `${database}.${tableName}` : tableName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDate(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n\n        } else if (columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") {\n            return \"\" + value;\n\n        } else if (columnMetadata.type === \"set\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"bool\" || columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        } else if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\")\n            && columnMetadata.enum\n            && !isNaN(value)\n            && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n            // convert to number if that exists in possible enum options\n            value = parseInt(value);\n        } else if (columnMetadata.type === \"set\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type: ColumnType, length?: number|string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\";\n\n        } else if (column.type === String) {\n            return \"varchar\";\n\n        } else if (column.type === Date) {\n            return \"datetime\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\";\n\n        } else if (column.type === Boolean) {\n            return \"tinyint\";\n\n        } else if (column.type === \"uuid\") {\n            return \"varchar\";\n\n        } else if (column.type === \"json\" && this.options.type === \"mariadb\") {\n            /*\n             * MariaDB implements this as a LONGTEXT rather, as the JSON data type contradicts the SQL standard,\n             * and MariaDB's benchmarks indicate that performance is at least equivalent.\n             *\n             * @see https://mariadb.com/kb/en/json-data-type/\n             */\n            return \"longtext\";\n\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n            return \"text\";\n\n        } else if (column.type === \"simple-enum\") {\n            return \"enum\";\n\n        } else if (column.type === \"double precision\" || column.type === \"real\") {\n            return \"double\";\n\n        } else if (column.type === \"dec\" || column.type === \"numeric\" || column.type === \"fixed\") {\n            return \"decimal\";\n\n        } else if (column.type === \"bool\" || column.type === \"boolean\") {\n            return \"tinyint\";\n\n        } else if (column.type === \"nvarchar\" || column.type === \"national varchar\") {\n            return \"varchar\";\n\n        } else if (column.type === \"nchar\" || column.type === \"national char\") {\n            return \"char\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") && defaultValue !== undefined) {\n            return `'${defaultValue}'`;\n        }\n\n        if ((columnMetadata.type === \"set\") && defaultValue !== undefined) {\n            return `'${DateUtils.simpleArrayToString(defaultValue)}'`;\n        }\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else if (defaultValue === null) {\n            return `NULL`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        /**\n         * fix https://github.com/typeorm/typeorm/issues/1139\n         */\n        if (column.generationStrategy === \"uuid\")\n            return \"36\";\n\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"national varchar\":\n                return \"255\";\n            case \"varbinary\":\n                return \"255\";\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if (column.width) {\n            type += `(${column.width})`;\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type += `(${column.precision})`;\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return new Promise<any>((ok, fail) => {\n            if (this.poolCluster) {\n                this.poolCluster.getConnection(\"MASTER\", (err: any, dbConnection: any) => {\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n                });\n\n            } else if (this.pool) {\n                this.pool.getConnection((err: any, dbConnection: any) => {\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n                });\n            } else {\n                fail(new Error(`Connection is not established with mysql database`));\n            }\n        });\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.poolCluster)\n            return this.obtainMasterConnection();\n\n        return new Promise<any>((ok, fail) => {\n            this.poolCluster.getConnection(\"SLAVE*\", (err: any, dbConnection: any) => {\n                err ? fail(err) : ok(dbConnection);\n            });\n        });\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value: any;\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult.insertId) {\n                value = insertResult.insertId;\n            // } else if (generatedColumn.generationStrategy === \"uuid\") {\n            //     console.log(\"getting db value:\", generatedColumn.databaseName);\n            //     value = generatedColumn.getEntityValue(uuidMap);\n            }\n\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            let columnMetadataLength = columnMetadata.length;\n            if (!columnMetadataLength && columnMetadata.generationStrategy === \"uuid\") { // fixing #3374\n                columnMetadataLength = this.getColumnLength(columnMetadata);\n            }\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadataLength\n                || tableColumn.width !== columnMetadata.width\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                || tableColumn.zerofill !== columnMetadata.zerofill\n                || tableColumn.unsigned !== columnMetadata.unsigned\n                || tableColumn.asExpression !== columnMetadata.asExpression\n                || tableColumn.generatedType !== columnMetadata.generatedType\n                // || tableColumn.comment !== columnMetadata.comment // todo\n                || !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default)\n                || (tableColumn.enum && columnMetadata.enum && !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + \"\")))\n                || tableColumn.onUpdate !== columnMetadata.onUpdate\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\n            /*\n             * Some frameworks (such as Jest) may mess up Node's require cache and provide garbage for the 'mysql' module\n             * if it was not installed. We check that the object we got actually contains something otherwise we treat\n             * it as if the `require` call failed.\n             *\n             * @see https://github.com/typeorm/typeorm/issues/1373\n             */\n            if (Object.keys(this.mysql).length === 0) {\n                throw new Error(\"'mysql' was found but it is empty. Falling back to 'mysql2'.\");\n            }\n        } catch (e) {\n            try {\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\n            }\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected createConnectionOptions(options: MysqlConnectionOptions, credentials: MysqlConnectionCredentialsOptions): Promise<any> {\n\n        credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n\n        // build connection options for the driver\n        return Object.assign({}, {\n            charset: options.charset,\n            timezone: options.timezone,\n            connectTimeout: options.connectTimeout,\n            insecureAuth: options.insecureAuth,\n            supportBigNumbers: options.supportBigNumbers !== undefined ? options.supportBigNumbers : true,\n            bigNumberStrings: options.bigNumberStrings !== undefined ? options.bigNumberStrings : true,\n            dateStrings: options.dateStrings,\n            debug: options.debug,\n            trace: options.trace,\n            multipleStatements: options.multipleStatements,\n            flags: options.flags\n        }, {\n            host: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            ssl: options.ssl\n        },\n        options.acquireTimeout === undefined\n          ? {}\n          : { acquireTimeout: options.acquireTimeout },\n        options.extra || {});\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected createPool(connectionOptions: any): Promise<any> {\n\n        // create a connection pool\n        const pool = this.mysql.createPool(connectionOptions);\n\n        // make sure connection is working fine\n        return new Promise<void>((ok, fail) => {\n            // (issue #610) we make first connection to database to make sure if connection credentials are wrong\n            // we give error before calling any other method that creates actual query runner\n            pool.getConnection((err: any, connection: any) => {\n                if (err)\n                    return pool.end(() => fail(err));\n\n                connection.release();\n                ok(pool);\n            });\n        });\n    }\n\n    /**\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\n     */\n    private prepareDbConnection(connection: any): any {\n        const { logger } = this.connection;\n        /*\n          Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\n          cause the hosting app to crash.\n         */\n        if (connection.listeners(\"error\").length === 0) {\n            connection.on(\"error\", (error: any) => logger.log(\"warn\", `MySQL connection raised an error. ${error}`));\n        }\n        return connection;\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    protected compareDefaultValues(columnMetadataValue: string, databaseValue: string): boolean {\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n\n        return columnMetadataValue === databaseValue;\n    }\n\n}\n"],"sourceRoot":"../.."}
##############################################
/src/commands/InitCommand.js.map:1:{"version":3,"sources":["../../src/commands/InitCommand.ts"],"names":[],"mappings":"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","file":"InitCommand.js","sourcesContent":["import {CommandUtils} from \"./CommandUtils\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport * as path from \"path\";\nimport * as yargs from \"yargs\";\nconst chalk = require(\"chalk\");\n\n/**\n * Generates a new project with TypeORM.\n */\nexport class InitCommand implements yargs.CommandModule {\n    command = \"init\";\n    describe = \"Generates initial TypeORM project structure. \" +\n        \"If name specified then creates files inside directory called as name. \" +\n        \"If its not specified then creates files inside current directory.\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which to run a query\"\n            })\n            .option(\"n\", {\n                alias: \"name\",\n                describe: \"Name of the project directory.\"\n            })\n            .option(\"db\", {\n                alias: \"database\",\n                describe: \"Database type you'll use in your project.\"\n            })\n            .option(\"express\", {\n                describe: \"Indicates if express should be included in the project.\"\n            })\n            .option(\"docker\", {\n                describe: \"Set to true if docker-compose must be generated as well. False by default.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n        try {\n            const database: string = args.database as any || \"mysql\";\n            const isExpress = args.express !== undefined ? true : false;\n            const isDocker = args.docker !== undefined ? true : false;\n            const basePath = process.cwd() + (args.name ? (\"/\" + args.name) : \"\");\n            const projectName = args.name ? path.basename(args.name as any) : undefined;\n            await CommandUtils.createFile(basePath + \"/package.json\", InitCommand.getPackageJsonTemplate(projectName), false);\n            if (isDocker)\n                await CommandUtils.createFile(basePath + \"/docker-compose.yml\", InitCommand.getDockerComposeTemplate(database), false);\n            await CommandUtils.createFile(basePath + \"/.gitignore\", InitCommand.getGitIgnoreFile());\n            await CommandUtils.createFile(basePath + \"/README.md\", InitCommand.getReadmeTemplate({ docker: isDocker }), false);\n            await CommandUtils.createFile(basePath + \"/tsconfig.json\", InitCommand.getTsConfigTemplate());\n            await CommandUtils.createFile(basePath + \"/ormconfig.json\", InitCommand.getOrmConfigTemplate(database));\n            await CommandUtils.createFile(basePath + \"/src/entity/User.ts\", InitCommand.getUserEntityTemplate(database));\n            await CommandUtils.createFile(basePath + \"/src/index.ts\", InitCommand.getAppIndexTemplate(isExpress));\n            await CommandUtils.createDirectories(basePath + \"/src/migration\");\n\n            // generate extra files for express application\n            if (isExpress) {\n                await CommandUtils.createFile(basePath + \"/src/routes.ts\", InitCommand.getRoutesTemplate());\n                await CommandUtils.createFile(basePath + \"/src/controller/UserController.ts\", InitCommand.getControllerTemplate());\n            }\n\n            const packageJsonContents = await CommandUtils.readFile(basePath + \"/package.json\");\n            await CommandUtils.createFile(basePath + \"/package.json\", InitCommand.appendPackageJson(packageJsonContents, database, isExpress));\n\n            if (args.name) {\n                console.log(chalk.green(`Project created inside ${chalk.blue(basePath)} directory.`));\n\n            } else {\n                console.log(chalk.green(`Project created inside current directory.`));\n            }\n\n        } catch (err) {\n            console.log(chalk.black.bgRed(\"Error during project initialization:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the ormconfig file.\n     */\n    protected static getOrmConfigTemplate(database: string): string {\n        const options: ObjectLiteral = { };\n        switch (database) {\n            case \"mysql\":\n                Object.assign(options, {\n                    type: \"mysql\",\n                    host: \"localhost\",\n                    port: 3306,\n                    username: \"test\",\n                    password: \"test\",\n                    database: \"test\",\n                });\n                break;\n            case \"mariadb\":\n                Object.assign(options, {\n                    type: \"mariadb\",\n                    host: \"localhost\",\n                    port: 3306,\n                    username: \"test\",\n                    password: \"test\",\n                    database: \"test\",\n                });\n                break;\n            case \"sqlite\":\n                Object.assign(options, {\n                    type: \"sqlite\",\n                    \"database\": \"database.sqlite\",\n                });\n                break;\n            case \"postgres\":\n                Object.assign(options, {\n                    \"type\": \"postgres\",\n                    \"host\": \"localhost\",\n                    \"port\": 5432,\n                    \"username\": \"test\",\n                    \"password\": \"test\",\n                    \"database\": \"test\",\n                });\n                break;\n            case \"cockroachdb\":\n                Object.assign(options, {\n                    \"type\": \"cockroachdb\",\n                    \"host\": \"localhost\",\n                    \"port\": 26257,\n                    \"username\": \"root\",\n                    \"password\": \"\",\n                    \"database\": \"defaultdb\",\n                });\n                break;\n            case \"mssql\":\n                Object.assign(options, {\n                    \"type\": \"mssql\",\n                    \"host\": \"localhost\",\n                    \"username\": \"sa\",\n                    \"password\": \"Admin12345\",\n                    \"database\": \"tempdb\",\n                });\n                break;\n            case \"oracle\":\n                Object.assign(options, {\n                    \"type\": \"oracle\",\n                    \"host\": \"localhost\",\n                    \"username\": \"system\",\n                    \"password\": \"oracle\",\n                    \"port\": 1521,\n                    \"sid\": \"xe.oracle.docker\",\n                });\n                break;\n            case \"mongodb\":\n                Object.assign(options, {\n                    \"type\": \"mongodb\",\n                    \"database\": \"test\",\n                });\n                break;\n        }\n        Object.assign(options, {\n            synchronize: true,\n            logging: false,\n            entities: [\n                \"src/entity/**/*.ts\"\n            ],\n            migrations: [\n                \"src/migration/**/*.ts\"\n            ],\n            subscribers: [\n                \"src/subscriber/**/*.ts\"\n            ],\n            cli: {\n                entitiesDir: \"src/entity\",\n                migrationsDir: \"src/migration\",\n                subscribersDir: \"src/subscriber\"\n            }\n        });\n        return JSON.stringify(options, undefined, 3);\n    }\n\n    /**\n     * Gets contents of the ormconfig file.\n     */\n    protected static getTsConfigTemplate(): string {\n        return JSON.stringify({\n            compilerOptions: {\n                lib: [\"es5\", \"es6\"],\n                target: \"es5\",\n                module: \"commonjs\",\n                moduleResolution: \"node\",\n                outDir: \"./build\",\n                emitDecoratorMetadata: true,\n                experimentalDecorators: true,\n                sourceMap: true\n            }\n        }\n        , undefined, 3);\n    }\n\n    /**\n     * Gets contents of the .gitignore file.\n     */\n    protected static getGitIgnoreFile(): string {\n        return `.idea/\n.vscode/\nnode_modules/\nbuild/\ntmp/\ntemp/`;\n    }\n\n    /**\n     * Gets contents of the user entity.\n     */\n    protected static getUserEntityTemplate(database: string): string {\n        return `import {Entity, ${ database === \"mongodb\" ? \"ObjectIdColumn, ObjectID\" : \"PrimaryGeneratedColumn\" }, Column} from \"typeorm\";\n\n@Entity()\nexport class User {\n\n    ${ database === \"mongodb\" ? \"@ObjectIdColumn()\" : \"@PrimaryGeneratedColumn()\" }\n    id: ${ database === \"mongodb\" ? \"ObjectID\" : \"number\" };\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    age: number;\n\n}\n`;\n    }\n\n    /**\n     * Gets contents of the route file (used when express is enabled).\n     */\n    protected static getRoutesTemplate(): string {\n        return `import {UserController} from \"./controller/UserController\";\n\nexport const Routes = [{\n    method: \"get\",\n    route: \"/users\",\n    controller: UserController,\n    action: \"all\"\n}, {\n    method: \"get\",\n    route: \"/users/:id\",\n    controller: UserController,\n    action: \"one\"\n}, {\n    method: \"post\",\n    route: \"/users\",\n    controller: UserController,\n    action: \"save\"\n}, {\n    method: \"delete\",\n    route: \"/users/:id\",\n    controller: UserController,\n    action: \"remove\"\n}];`;\n    }\n\n    /**\n     * Gets contents of the user controller file (used when express is enabled).\n     */\n    protected static getControllerTemplate(): string {\n        return `import {getRepository} from \"typeorm\";\nimport {NextFunction, Request, Response} from \"express\";\nimport {User} from \"../entity/User\";\n\nexport class UserController {\n\n    private userRepository = getRepository(User);\n\n    async all(request: Request, response: Response, next: NextFunction) {\n        return this.userRepository.find();\n    }\n\n    async one(request: Request, response: Response, next: NextFunction) {\n        return this.userRepository.findOne(request.params.id);\n    }\n\n    async save(request: Request, response: Response, next: NextFunction) {\n        return this.userRepository.save(request.body);\n    }\n\n    async remove(request: Request, response: Response, next: NextFunction) {\n        let userToRemove = await this.userRepository.findOne(request.params.id);\n        await this.userRepository.remove(userToRemove);\n    }\n\n}`;\n    }\n\n    /**\n     * Gets contents of the main (index) application file.\n     */\n    protected static getAppIndexTemplate(express: boolean): string {\n        if (express) {\n            return `import \"reflect-metadata\";\nimport {createConnection} from \"typeorm\";\nimport * as express from \"express\";\nimport * as bodyParser from \"body-parser\";\nimport {Request, Response} from \"express\";\nimport {Routes} from \"./routes\";\nimport {User} from \"./entity/User\";\n\ncreateConnection().then(async connection => {\n\n    // create express app\n    const app = express();\n    app.use(bodyParser.json());\n\n    // register express routes from defined application routes\n    Routes.forEach(route => {\n        (app as any)[route.method](route.route, (req: Request, res: Response, next: Function) => {\n            const result = (new (route.controller as any))[route.action](req, res, next);\n            if (result instanceof Promise) {\n                result.then(result => result !== null && result !== undefined ? res.send(result) : undefined);\n\n            } else if (result !== null && result !== undefined) {\n                res.json(result);\n            }\n        });\n    });\n\n    // setup express app here\n    // ...\n\n    // start express server\n    app.listen(3000);\n\n    // insert new users for test\n    await connection.manager.save(connection.manager.create(User, {\n        firstName: \"Timber\",\n        lastName: \"Saw\",\n        age: 27\n    }));\n    await connection.manager.save(connection.manager.create(User, {\n        firstName: \"Phantom\",\n        lastName: \"Assassin\",\n        age: 24\n    }));\n\n    console.log(\"Express server has started on port 3000. Open http://localhost:3000/users to see results\");\n\n}).catch(error => console.log(error));\n`;\n\n        } else {\n            return `import \"reflect-metadata\";\nimport {createConnection} from \"typeorm\";\nimport {User} from \"./entity/User\";\n\ncreateConnection().then(async connection => {\n\n    console.log(\"Inserting a new user into the database...\");\n    const user = new User();\n    user.firstName = \"Timber\";\n    user.lastName = \"Saw\";\n    user.age = 25;\n    await connection.manager.save(user);\n    console.log(\"Saved a new user with id: \" + user.id);\n\n    console.log(\"Loading users from the database...\");\n    const users = await connection.manager.find(User);\n    console.log(\"Loaded users: \", users);\n\n    console.log(\"Here you can setup and run express/koa/any other framework.\");\n\n}).catch(error => console.log(error));\n`;\n        }\n    }\n\n    /**\n     * Gets contents of the new package.json file.\n     */\n    protected static getPackageJsonTemplate(projectName?: string): string {\n        return JSON.stringify({\n            name: projectName || \"new-typeorm-project\",\n            version: \"0.0.1\",\n            description: \"Awesome project developed with TypeORM.\",\n            devDependencies: {\n            },\n            dependencies: {\n            },\n            scripts: {\n            }\n        }, undefined, 3);\n    }\n\n    /**\n     * Gets contents of the new docker-compose.yml file.\n     */\n    protected static getDockerComposeTemplate(database: string): string {\n\n        switch (database) {\n            case \"mysql\":\n                return `version: '3'\nservices:\n\n  mysql:\n    image: \"mysql:5.7.10\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"admin\"\n      MYSQL_USER: \"test\"\n      MYSQL_PASSWORD: \"test\"\n      MYSQL_DATABASE: \"test\"\n\n`;\n            case \"mariadb\":\n                return `version: '3'\nservices:\n\n  mariadb:\n    image: \"mariadb:10.1.16\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"admin\"\n      MYSQL_USER: \"test\"\n      MYSQL_PASSWORD: \"test\"\n      MYSQL_DATABASE: \"test\"\n\n`;\n            case \"postgres\":\n                return `version: '3'\nservices:\n\n  postgres:\n    image: \"postgres:9.6.1\"\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: \"test\"\n      POSTGRES_PASSWORD: \"test\"\n      POSTGRES_DB: \"test\"\n\n`;\n            case \"cockroachdb\":\n                return `version: '3'\nservices:\n\n  cockroachdb:\n    image: \"cockroachdb/cockroach:v2.1.4\"\n    command: start --insecure\n    ports:\n      - \"26257:26257\"\n\n`;\n            case \"sqlite\":\n                return `version: '3'\nservices:\n`;\n            case \"oracle\":\n                throw new Error(`You cannot initialize a project with docker for Oracle driver yet.`); // todo: implement for oracle as well\n\n            case \"mssql\":\n                return `version: '3'\nservices:\n\n  mssql:\n    image: \"microsoft/mssql-server-linux:rc2\"\n    ports:\n      - \"1433:1433\"\n    environment:\n      SA_PASSWORD: \"Admin12345\"\n      ACCEPT_EULA: \"Y\"\n\n`;\n            case \"mongodb\":\n                return `version: '3'\nservices:\n\n  mongodb:\n    image: \"mongo:4.0.6\"\n    container_name: \"typeorm-mongodb\"\n    ports:\n      - \"27017:27017\"\n\n`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Gets contents of the new readme.md file.\n     */\n    protected static getReadmeTemplate(options: { docker: boolean }): string {\n        let template = `# Awesome Project Build with TypeORM\n\nSteps to run this project:\n\n1. Run \\`npm i\\` command\n`;\n\n        if (options.docker) {\n            template += `2. Run \\`docker-compose up\\` command\n`;\n        } else {\n            template += `2. Setup database settings inside \\`ormconfig.json\\` file\n`;\n        }\n\n        template += `3. Run \\`npm start\\` command\n`;\n        return template;\n    }\n\n    /**\n     * Appends to a given package.json template everything needed.\n     */\n    protected static appendPackageJson(packageJsonContents: string, database: string, express: boolean /*, docker: boolean*/): string {\n        const packageJson = JSON.parse(packageJsonContents);\n\n        if (!packageJson.devDependencies) packageJson.devDependencies = {};\n        Object.assign(packageJson.devDependencies, {\n            \"ts-node\": \"3.3.0\",\n            \"@types/node\": \"^8.0.29\",\n            \"typescript\": \"3.3.3333\"\n        });\n\n        if (!packageJson.dependencies) packageJson.dependencies = {};\n        Object.assign(packageJson.dependencies, {\n            \"typeorm\": require(\"../package.json\").version,\n            \"reflect-metadata\": \"^0.1.10\"\n        });\n\n        switch (database) {\n            case \"mysql\":\n            case \"mariadb\":\n                packageJson.dependencies[\"mysql\"] = \"^2.14.1\";\n                break;\n            case \"postgres\":\n            case \"cockroachdb\":\n                packageJson.dependencies[\"pg\"] = \"^7.3.0\";\n                break;\n            case \"sqlite\":\n                packageJson.dependencies[\"sqlite3\"] = \"^4.0.3\";\n                break;\n            case \"oracle\":\n                packageJson.dependencies[\"oracledb\"] = \"^1.13.1\";\n                break;\n            case \"mssql\":\n                packageJson.dependencies[\"mssql\"] = \"^4.0.4\";\n                break;\n            case \"mongodb\":\n                packageJson.dependencies[\"mongodb\"] = \"^3.0.8\";\n                break;\n        }\n\n        if (express) {\n            packageJson.dependencies[\"express\"] = \"^4.15.4\";\n            packageJson.dependencies[\"body-parser\"] = \"^1.18.1\";\n        }\n\n        if (!packageJson.scripts) packageJson.scripts = {};\n        Object.assign(packageJson.scripts, {\n            start: /*(docker ? \"docker-compose up && \" : \"\") + */\"ts-node src/index.ts\"\n        });\n        return JSON.stringify(packageJson, undefined, 3);\n    }\n\n}\n"],"sourceRoot":".."}
##############################################
/src/commands/InitCommand.js-289-            case "cockroachdb":
/src/commands/InitCommand.js:290:                return "version: '3'\nservices:\n\n  cockroachdb:\n    image: \"cockroachdb/cockroach:v2.1.4\"\n    command: start --insecure\n    ports:\n      - \"26257:26257\"\n\n";
/src/commands/InitCommand.js-291-            case "sqlite":
##############################################
/src/driver/mongodb/typings.js.map:1:{"version":3,"sources":["../../src/driver/mongodb/typings.ts"],"names":[],"mappings":";;AAAA,8DAAgF","file":"typings.js","sourcesContent":["import { EventEmitter, Readable, Writable } from \"../../platform/PlatformTools\";\n\n/**\n * Creates a new MongoClient instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html\n */\nexport declare class MongoClient extends EventEmitter {\n\n    constructor(uri: string, options?: MongoClientOptions);\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param callback The command result callback.\n     */\n    static connect(url: string, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     */\n    static connect(url: string, options?: MongoClientOptions): Promise<Db>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     */\n    static connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     */\n    connect(): Promise<MongoClient>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param callback The command result callback.\n     */\n    connect(url: string, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     */\n    connect(url: string, options?: MongoClientOptions): Promise<Db>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     */\n    connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(callback: MongoCallback<void>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param force Force close, emitting no events.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(force?: boolean): Promise<void>;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param force Force close, emitting no events.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(force: boolean, callback: MongoCallback<void>): void;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     * @param dbName The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#db\n     */\n    db(dbName?: string, options?: MongoClientCommonOption): Db;\n\n    /**\n     * Check if MongoClient is connected.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#isConnected\n     */\n    isConnected(options?: MongoClientCommonOption): boolean;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#logout\n     */\n    logout(callback: MongoCallback<any>): void;\n    logout(options?: { dbName?: string }): Promise<any>;\n    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Starts a new session on the server.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#startSession\n     */\n    startSession(options?: SessionOptions): ClientSession;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this cluster.\n     * Will ignore all changes to system collections, as well as the local, admin, and config databases.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n\n    /**\n     * Runs a given operation with an implicitly created session. The lifetime of the session will be handled without the need for user interaction.\n     * @param operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#withSession\n     */\n    withSession(operation: (session: ClientSession) => Promise<any>): Promise<void>;\n\n    /**\n     * Runs a given operation with an implicitly created session. The lifetime of the session will be handled without the need for user interaction.\n     * @param options Optional settings to be appled to implicitly created session.\n     * @param operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#withSession\n     */\n    withSession(options: SessionOptions, operation: (session: ClientSession) => Promise<any>): Promise<void>;\n}\n\n/**\n * The callback format for results.\n */\nexport interface MongoCallback<T> {\n\n    /**\n     * @param error An error instance representing the error during the execution.\n     * @param result The result of execution.\n     */\n    (error: MongoError, result: T): void;\n}\n\n// http://mongodb.github.io/node-mongodb-native/2.1/api/MongoError.html\nexport declare class MongoError extends Error {\n    constructor(message: string);\n    static create(options: Object): MongoError;\n}\n\n/**\n * Options for MongoClient#connect method.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#.connect\n */\nexport interface MongoClientOptions {\n\n    /**\n     * The maximum size of the individual server pool.\n     */\n    poolSize?: number;\n\n    /**\n     * Enable SSL connection.\n     */\n    ssl?: boolean;\n\n    /**\n     * SSL Certificate store binary buffer.\n     */\n    sslCA?: Buffer;\n\n    /**\n     * Uri decode the user name and password for authentication.\n     */\n    uri_decode_auth?: boolean;\n\n    /**\n     * A hash of options to set on the db object, see Db constructor.\n     */\n    db?: DbCreateOptions;\n\n    /**\n     * A hash of options to set on the server objects, see Server constructor**.\n     */\n    server?: ServerOptions;\n\n    /**\n     * A hash of options to set on the replSet object, see ReplSet constructor**.\n     */\n    replSet?: ReplSetOptions;\n\n    /**\n     * A hash of options to set on the mongos object, see Mongos constructor**.\n     */\n    mongos?: MongosOptions;\n\n    /**\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\n     */\n    promiseLibrary?: Object;\n}\n\nexport interface CommandOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n}\n\n/**\n * Options for Db class.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\n */\nexport interface DbCreateOptions {\n\n    /**\n     * If the database authentication is dependent on another databaseName.\n     */\n    authSource?: string;\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * The current value of the parameter native_parser.\n     */\n    native_parser?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Specify if the BSON serializer should ignore undefined fields.\n     */\n    ignoreUndefined?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * Promotes Long values to number if they fit inside the 53 bits resolution.\n     */\n    promoteLongs?: boolean;\n\n    /**\n     * Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n     */\n    bufferMaxEntries?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\n     */\n    promiseLibrary?: Object;\n\n    /**\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\n     */\n    readConcern?: ReadConcern;\n}\n\n/**\n * Creates a new ReadPreference instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReadPreference.html\n */\nexport declare class ReadPreference {\n    constructor(mode: string, tags: Object);\n\n    /**\n     * The ReadPreference mode as listed above.\n     */\n    mode: string;\n\n    /**\n     * An object representing read preference tags.\n     */\n    tags: any;\n\n    /**\n     * Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).\n     */\n    static PRIMARY: string;\n\n    /**\n     * Read from primary if available, otherwise a secondary.\n     */\n    static PRIMARY_PREFERRED: string;\n\n    /**\n     * Read from secondary if available, otherwise error.\n     */\n    static SECONDARY: string;\n\n    /**\n     * Read from a secondary if available, otherwise read from the primary.\n     */\n    static SECONDARY_PREFERRED: string;\n\n    /**\n     * All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.\n     */\n    static NEAREST: string;\n\n    /**\n     * Validate if a mode is legal.\n     */\n    isValid(mode: string): boolean;\n\n    /**\n     * Validate if a mode is legal.\n     */\n    static isValid(mode: string): boolean;\n}\n\n/**\n * Creates a new Server instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport interface SocketOptions {\n\n    /**\n     * Reconnect on error.\n     */\n    autoReconnect?: boolean;\n\n    /**\n     * TCP Socket NoDelay option.\n     */\n    noDelay?: boolean;\n\n    /**\n     * TCP KeepAlive on the socket with a X ms delay before start.\n     */\n    keepAlive?: number;\n\n    /**\n     * TCP Connection timeout setting.\n     */\n    connectTimeoutMS?: number;\n\n    /**\n     * TCP Socket timeout setting.\n     */\n    socketTimeoutMS?: number;\n}\n\n/**\n * Creates a new Server instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport interface ServerOptions {\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n\n    /**\n     * Server attempt to reconnect #times.\n     */\n    reconnectTries?: number;\n\n    /**\n     * Server will wait # milliseconds between retries.\n     */\n    reconnectInterval?: number;\n}\n\n/**\n * Creates a new ReplSet instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\n */\nexport interface ReplSetOptions {\n\n    /**\n     * Turn on high availability monitoring.\n     */\n    ha?: boolean;\n\n    /**\n     * Time between each replicaset status check.\n     */\n    haInterval?: number;\n\n    /**\n     * The name of the replicaset to connect to.\n     */\n    replicaSet?: string;\n\n    /**\n     * Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms).\n     */\n    secondaryAcceptableLatencyMS?: number;\n\n    /**\n     * Sets if the driver should connect even if no primary is available.\n     */\n    connectWithNoPrimary?: boolean;\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n}\n\n/**\n * Creates a new Mongos instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\n */\nexport interface MongosOptions {\n\n    /**\n     * Turn on high availability monitoring.\n     */\n    ha?: boolean;\n\n    /**\n     * Time between each replicaset status check.\n     */\n    haInterval?: number;\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n}\n\nexport interface DbOptions {\n\n    /**\n     * Do not make the db an event listener to the original connection.\n     */\n    noListener?: boolean;\n\n    /**\n     * Control if you want to return a cached instance or have a new one created.\n     */\n    returnNonCachedInstance?: boolean;\n}\n\nexport interface IndexInformationOptions {\n\n    /**\n     * Returns the full raw index information.\n     */\n    full?: boolean;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY,\n     * ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY,\n     * ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\nexport interface ExecuteDbAdminCommandOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    // maxTimeMS?: number;\n}\n\nexport interface ListCollectionsOptions {\n\n    /**\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\n     */\n    batchSize?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Db.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\n */\nexport declare class Db extends EventEmitter {\n\n    /**\n     *\n     * @param databaseName The name of the database this instance represents.\n     * @param serverConfig The server topology for the database.\n     * @param options Optional.\n     */\n    constructor(databaseName: string, serverConfig: Server | ReplSet | Mongos, options?: DbCreateOptions);\n\n    /**\n     * Get the current db topology.\n     */\n    serverConfig: Server | ReplSet | Mongos;\n\n    /**\n     * Current bufferMaxEntries value for the database.\n     */\n    bufferMaxEntries: number;\n\n    /**\n     * The name of the database this instance represents.\n     */\n    databaseName: string;\n\n    /**\n     * The options associated with the db instance.\n     */\n    options: any;\n\n    /**\n     * The current value of the parameter native_parser.\n     */\n    native_parser: boolean;\n\n    /**\n     * The current slaveOk value for the db instance.\n     */\n    slaveOk: boolean;\n\n    /**\n     * The current write concern values.\n     */\n    writeConcern: WriteConcern;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, options?: DbAddUserOptions): Promise<any>;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, options: DbAddUserOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Return the Admin db instance.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#admin\n     */\n    admin(): Admin;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, options?: { authMechanism: string }): Promise<any>;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param password\n     * @param options\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, options: { authMechanism: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(callback: MongoCallback<void>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param forceClose Force close, emitting no events.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(forceClose?: boolean): Promise<void>;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param forceClose Force close, emitting no events.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(forceClose: boolean, callback: MongoCallback<void>): void;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string): Collection<any>;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string, callback: MongoCallback<Collection<any>>): Collection<any>;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string, options: DbCollectionOptions, callback: MongoCallback<Collection<any>>): Collection<any>;\n\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\n     */\n    collections(): Promise<Collection<any>[]>;\n\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\n     */\n    collections(callback: MongoCallback<Collection<any>[]>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, options?: { readPreference: ReadPreference | string }): Promise<any>;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, options: { readPreference: ReadPreference | string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param callback The results callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, options?: CollectionCreateOptions): Promise<Collection<any>>;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional settings.\n     * @param callback The results callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, options: CollectionCreateOptions, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, options?: MongodbIndexOptions): Promise<any>;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, options: MongodbIndexOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     *\n     * @param dbName The name of the database we want to use.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\n     */\n    db(dbName: string): Db;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     *\n     * @param dbName The name of the database we want to use.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\n     */\n    db(dbName: string, options: DbOptions): Db;\n\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name Name of collection to drop.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\n     */\n    dropCollection(name: string): Promise<boolean>;\n\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name Name of collection to drop.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\n     */\n    dropCollection(name: string, callback: MongoCallback<boolean>): void;\n\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\n     */\n    dropDatabase(): Promise<any>;\n\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\n     */\n    dropDatabase(callback: MongoCallback<any>): void;\n\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#ensureIndex\n    // ensureIndex(collectionName: any, fieldOrSpec: any, options: IndexOptions, callback: Function): void;\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#eval\n    // eval(code: any, parameters: any[], options?: any, callback?: MongoCallback<any>): void;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, options?: ExecuteDbAdminCommandOptions): Promise<any>;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, options: ExecuteDbAdminCommandOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, options?: IndexInformationOptions): Promise<any>;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, options: IndexInformationOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Get the list of all collection information for the specified db.\n     *\n     * @param filter Query to filter collections by.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#listCollections\n     */\n    listCollections(filter: Object, options?: ListCollectionsOptions): CommandCursor;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(callback: MongoCallback<any>): void;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(options?: { dbName?: string }): Promise<any>;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Open the database.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\n     */\n    open(): Promise<Db>;\n\n    /**\n     * Open the database\n     *\n     * @param callback Callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\n     */\n    open(callback: MongoCallback<Db>): void;\n\n\n    /**\n     *\n     * @param username\n     * @param callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#removeUser\n     */\n    removeUser(username: string, callback: MongoCallback<any>): void;\n    removeUser(username: string, options?: { w?: number | string, wtimeout?: number, j?: boolean }): Promise<any>;\n    removeUser(username: string, options: { w?: number | string, wtimeout?: number, j?: boolean }, callback: MongoCallback<any>): void;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, options?: { dropTarget?: boolean }): Promise<Collection<any>>;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param options Optional settings.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(callback: MongoCallback<any>): void;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(options?: { scale?: number }): Promise<any>;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(options: { scale?: number }, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this database. Will ignore all changes to system collections.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n}\n\n/**\n * Server.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport declare class Server extends EventEmitter {\n\n    /**\n     *\n     * @param host The host for the server, can be either an IP4, IP6 or domain socket style host.\n     * @param port The server port if IP4.\n     * @param options Optional.\n     */\n    constructor(host: string, port: number, options?: ServerOptions);\n\n    /**\n     * All raw connections.\n     */\n    connections(): Array<any>;\n}\n\n/**\n * ReplSet.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\n */\nexport declare class ReplSet extends EventEmitter {\n\n    /**\n     *\n     * @param servers A seedlist of servers participating in the replicaset.\n     * @param options Optional.\n     */\n    constructor(servers: Array<Server>, options?: ReplSetOptions);\n\n    /**\n     * All raw connections\n     */\n    connections(): Array<any>;\n}\n\n/**\n * Mongos.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\n */\nexport declare class Mongos extends EventEmitter {\n\n    /**\n     *\n     * @param servers A seedlist of servers participating in the replicaset.\n     * @param options Optional.\n     */\n    constructor(servers: Array<Server>, options?: MongosOptions);\n\n    /**\n     * All raw connections\n     */\n    connections(): Array<any>;\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n */\nexport interface DbAddUserOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: string | number;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\n     */\n    customData?: Object;\n\n    /**\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\n     */\n    roles?: Object[];\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n */\nexport interface CollectionCreateOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Returns an error if the collection does not exist.\n     */\n    strict?: boolean;\n\n    /**\n     * Create a capped collection.\n     */\n    capped?: boolean;\n\n    /**\n     * The size of the capped collection in bytes.\n     */\n    size?: number;\n\n    /**\n     * The maximum number of documents in the capped collection.\n     */\n    max?: number;\n\n    /**\n     * Create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.\n     */\n    autoIndexId?: boolean;\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n */\nexport interface DbCollectionOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Returns an error if the collection does not exist.\n     */\n    strict?: boolean;\n\n    /**\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\n     */\n    readConcern?: ReadConcern;\n}\n\n/**\n * Creates an index on the db and collection collection.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n */\nexport interface MongodbIndexOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Creates an unique index.\n     */\n    unique?: boolean;\n\n    /**\n     * Creates a sparse index.\n     */\n    sparse?: boolean;\n\n    /**\n     * Creates the index in the background, yielding whenever possible.\n     */\n    background?: boolean;\n\n    /**\n     * A unique index cannot be created on a key that has pre-existing duplicate values.\n     * If you would like to create the index anyway, keeping the first document\n     * the database indexes and deleting all subsequent documents that have duplicate value.\n     */\n    dropDups?: boolean;\n\n    /**\n     * For geospatial indexes set the lower bound for the co-ordinates.\n     */\n    min?: number;\n\n    /**\n     * For geospatial indexes set the high bound for the co-ordinates.\n     */\n    max?: number;\n\n    /**\n     * Specify the format version of the indexes.\n     */\n    v?: number;\n\n    /**\n     * Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher).\n     */\n    expireAfterSeconds?: number;\n\n    /**\n     * Override the autogenerated index name (useful if the resulting name is larger than 128 bytes).\n     */\n    name?: string;\n\n}\n\n/**\n * Admin.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html\n */\nexport interface Admin {\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, options?: AddUserOptions): Promise<any>;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, options: AddUserOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, password?: string): Promise<any>;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the server information for the current instance of the db client\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\n     */\n    buildInfo(): Promise<any>;\n\n    /**\n     * Retrieve the server information for the current instance of the db client\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\n     */\n    buildInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, options?: CommandOptions): Promise<any>;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, options: CommandOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * List the available databases.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\n     */\n    listDatabases(): Promise<any>;\n\n    /**\n     * List the available databases.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\n     */\n    listDatabases(callback: MongoCallback<any>): void;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\n     */\n    logout(): Promise<any>;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\n     */\n    logout(callback: MongoCallback<any>): void;\n\n    /**\n     * Ping the MongoDB server and retrieve results.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\n     */\n    ping(): Promise<any>;\n\n    /**\n     * Ping the MongoDB server and retrieve results.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\n     */\n    ping(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrive the current profiling information for MongoDB.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\n     */\n    profilingInfo(): Promise<any>;\n\n    /**\n     * Retrive the current profiling information for MongoDB.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\n     */\n    profilingInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the current profiling Level for MongoDB.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\n     */\n    profilingLevel(): Promise<any>;\n\n    /**\n     * Retrieve the current profiling Level for MongoDB.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\n     */\n    profilingLevel(callback: MongoCallback<any>): void;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, options?: FSyncOptions): Promise<any>;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, options: FSyncOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Get ReplicaSet status.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\n     */\n    replSetGetStatus(): Promise<any>;\n\n    /**\n     * Get ReplicaSet status.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\n     */\n    replSetGetStatus(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the server information for the current\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\n     */\n    serverInfo(): Promise<any>;\n\n    /**\n     * instance of the db client\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\n     * @param callback The command result callback.\n     */\n    serverInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve this db's server status.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\n     */\n    serverStatus(): Promise<any>;\n\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\n     */\n    serverStatus(callback: MongoCallback<any>): void;\n\n    /**\n     * Set the current profiling level of MongoDB.\n     *\n     * @param level The new profiling level (off, slow_only, all).\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\n     */\n    setProfilingLevel(level: string): Promise<any>;\n\n    /**\n     * Set the current profiling level of MongoDB.\n     *\n     * @param level The new profiling level (off, slow_only, all).\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\n     */\n    setProfilingLevel(level: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, options?: Object): Promise<any>;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param options Optional settings.\n     * @param callback The command result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, options: Object, callback: MongoCallback<any>): void;\n}\n\n/**\n * Add a user to the database.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n */\nexport interface AddUserOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Specify a file sync write concern.\n     */\n    fsync: boolean;\n\n    /**\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\n     */\n    customData?: Object;\n\n    /**\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\n     */\n    roles?: Object[];\n}\nexport interface ListIndexesOptions {\n\n    /**\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\n     */\n    batchSize?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\nexport interface GroupOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Remove a user from a database.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n */\nexport interface FSyncOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Specify a file sync write concern.\n     */\n    fsync?: boolean;\n}\n\nexport interface FindOneAndDeleteOptions {\n\n    /**\n     * Limits the fields to return for all matching documents.\n     */\n    projection?: Object;\n\n    /**\n     * Determines which document the operation modifies if the query selects multiple documents.\n     */\n    sort?: Object;\n\n    /**\n     * The maximum amount of time to allow the query to run.\n     */\n    maxTimeMS?: number;\n}\n\n/**\n * Create a new ObjectID instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ObjectID.html\n */\nexport declare class ObjectID {\n    constructor(s?: string | number);\n\n    /**\n     * The generation time of this ObjectId instance.\n     */\n    generationTime: number;\n\n    /**\n     * Creates an ObjectID from a hex string representation of an ObjectID.\n     */\n    static createFromHexString(hexString: string): ObjectID;\n\n    /**\n     * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n     */\n    static createFromTime(time: number): ObjectID;\n\n    /**\n     * Checks if a value is a valid bson ObjectId.\n     */\n    static isValid(id: any): boolean;\n\n    /**\n     * Compares the equality of this ObjectID with otherID.\n     */\n    equals(otherID: ObjectID): boolean;\n\n    /**\n     * Generate a 12 byte id buffer used in ObjectID's.\n     */\n    generate(time?: number): string;\n\n    /**\n     * Returns the generation date (accurate up to the second) that this ID was generated.\n     *\n     */\n    getTimestamp(): Date;\n\n    /**\n     * Return the ObjectID id as a 24 byte hex string representation.\n     */\n    toHexString(): string;\n\n    /**\n     * Get the timestamp and validate correctness.\n     */\n    toString(): string;\n}\n\n/**\n * A class representation of the BSON Binary type.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Binary.html\n */\nexport declare class Binary {\n\n    /**\n     * @param buffer A buffer object containing the binary data.\n     * @param subType The option binary type.\n     */\n    constructor(buffer: Buffer, subType?: number);\n\n    /**\n     * Byte Array BSON type.\n     */\n    static SUBTYPE_BYTE_ARRAY: number;\n\n    /**\n     * Default BSON type.\n     */\n    static SUBTYPE_DEFAULT: number;\n\n    /**\n     * Function BSON type.\n     */\n    static SUBTYPE_FUNCTION: number;\n\n    /**\n     * MD5 BSON type.\n     */\n    static SUBTYPE_MD5: number;\n\n    /**\n     * User BSON type.\n     */\n    static SUBTYPE_USER_DEFINED: number;\n\n    /**\n     * UUID BSON type.\n     */\n    static SUBTYPE_UUID: number;\n\n    /**\n     * OLD UUID BSON type\n     */\n    static SUBTYPE_UUID_OLD: number;\n\n    /**\n     * The length of the binary.\n     */\n    length(): number;\n\n    /**\n     * Updates this binary with byte_value.\n     *\n     * @param byte_value A single byte we wish to write.\n     */\n    put(byte_value: number | string): void;\n\n    /**\n     * Reads length bytes starting at position.\n     *\n     * @param position Read from the given position in the Binary.\n     * @param length The number of bytes to read.\n     */\n    read(position: number, length: number): Buffer;\n\n    /**\n     * Returns the value of this binary as a string.\n     */\n    value(): string;\n\n    /**\n     * Writes a buffer or string to the binary\n     *\n     * @param buffer A string or buffer to be written to the Binary BSON object.\n     * @param offset Specify the binary of where to write the content.\n     */\n    write(buffer: Buffer | string, offset: number): void;\n}\n/**\n * A class representation of the BSON Double type.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Double.html\n */\nexport declare class Double {\n\n    /**\n     * @param value The number we want to represent as a double.\n     */\n    constructor(value: number);\n\n    /**\n     * Access the number value.\n     */\n    valueOf(): number;\n}\n\n/**\n * Long\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Long.html\n */\nexport declare class Long {\n\n    /**\n     * @param low The low (signed) 32 bits of the Long.\n     * @param high The high (signed) 32 bits of the Long.\n     */\n    constructor(low: number, high: number);\n\n    static MAX_VALUE: Long;\n    static MIN_VALUE: Long;\n    static NEG_ONE: Long;\n    static ONE: Long;\n    static ZERO: Long;\n\n    /**\n     * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits.\n     * Each is assumed to use 32 bits.\n     *\n     * @param lowBits The low 32-bits.\n     * @param highBits The high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Long;\n\n    /**\n     * Returns a Long representing the given (32-bit) integer value.\n     *\n     * @param value The 32-bit integer in question.\n     */\n    static fromInt(value: number): Long;\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     *\n     * @param value The number in question.\n     */\n    static fromNumber(value: number): Long;\n\n    /**\n     * Returns a Long representation of the given string, written using the given radix.\n     *\n     * @param str The textual representation of the Long.\n     * @param radix The radix in which the text is written.\n     */\n    static fromString(str: string, radix?: number): Long;\n\n    /**\n     * Returns the sum of this and the given Long.\n     *\n     * @param other Long to add to this one.\n     */\n    add(other: Long): Long;\n\n    /**\n     * Returns the bitwise-AND of this Long and the given one.\n     *\n     * @param other The Long with which to AND.\n     */\n    and(other: Long): Long;\n\n    /**\n     * Compares this Long with the given one.\n     *\n     * @param other Long to compare against.\n     */\n    compare(other: Long): number;\n\n    /**\n     * Returns this Long divided by the given one.\n     *\n     * @param other Long by which to divide.\n     */\n    div(other: Long): Long;\n\n    /**\n     * Return whether this Long equals the other.\n     *\n     * @param other Long to compare against.\n     */\n    equals(other: Long): boolean;\n\n    /**\n     * Return the high 32-bits value.\n     */\n    getHighBits(): number;\n\n    /**\n     * Return the low 32-bits value.\n     */\n    getLowBits(): number;\n\n    /**\n     * Return the low unsigned 32-bits value.\n     */\n    getLowBitsUnsigned(): number;\n\n    /**\n     * Returns the number of bits needed to represent the absolute value of this Long.\n     */\n    getNumBitsAbs(): number;\n\n    /**\n     * Return whether this Long is greater than the other.\n     *\n     * @param other Long to compare against.\n     */\n    greaterThan(other: Long): number;\n\n    /**\n     * Return whether this Long is greater than or equal to the other.\n     *\n     * @param other Long to compare against.\n     */\n    greaterThanOrEqual(other: Long): number;\n\n    /**\n     * Return whether this value is negative.\n     */\n    isNegative(): boolean;\n\n    /**\n     * Return whether this value is odd.\n     */\n    isOdd(): boolean;\n\n    /**\n     * Return whether this value is zero.\n     */\n    isZero(): boolean;\n\n    /**\n     * Return whether this Long is less than the other.\n     *\n     * @param other Long to compare against.\n     */\n    lessThan(other: Long): boolean;\n\n    /**\n     * Return whether this Long is less than or equal to the other.\n     *\n     * @param other Long to compare against.\n     */\n    lessThanOrEqual(other: Long): boolean;\n\n    /**\n     * Returns this Long modulo the given one.\n     *\n     * @param other Long by which to mod.\n     */\n    modulo(other: Long): Long;\n\n    /**\n     * Returns the product of this and the given Long.\n     *\n     * @param other Long to multiply with this.\n     */\n    multiply(other: Long): Long;\n\n    /**\n     * The negation of this value.\n     */\n    negate(): Long;\n\n    /**\n     * The bitwise-NOT of this value.\n     */\n    not(): Long;\n\n    /**\n     * Return whether this Long does not equal the other.\n     *\n     * @param other Long to compare against.\n     */\n    notEquals(other: Long): boolean;\n\n    /**\n     * Returns the bitwise-OR of this Long and the given one.\n     *\n     * @param other The Long with which to OR.\n     */\n    or(other: Long): Long;\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftLeft(other: number): Long;\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRight(other: number): Long;\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRightUnsigned(other: number): Long;\n\n    /**\n     * Returns the difference of this and the given Long.\n     *\n     * @param other Long to subtract from this.\n     */\n    subtract(other: Long): Long;\n\n    /**\n     * Return the int value.\n     */\n    toInt(): number;\n\n    /**\n     * Return the JSON value.\n     */\n    toJSON(): string;\n\n    /**\n     * Return the Number value.\n     */\n    toNumber(): number;\n\n    /**\n     * Return the String value.\n     *\n     * @param opt_radix The radix in which the text should be written.\n     */\n    toString(opt_radix?: number): string;\n\n    /**\n     * Returns the bitwise-XOR of this Long and the given one.\n     *\n     * @param other The Long with which to XOR.\n     */\n    xor(other: Long): Long;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MaxKey.html\n */\nexport declare class MaxKey { }\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MinKey.html\n */\nexport declare class MinKey { }\n\n/**\n * Timestamp.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Timestamp.html\n */\nexport declare class Timestamp {\n\n    /**\n     * @param low The low (signed) 32 bits of the Timestamp.\n     * @param high The high (signed) 32 bits of the Timestamp.\n     */\n    constructor(low: number, high: number);\n\n    static MAX_VALUE: Timestamp;\n    static MIN_VALUE: Timestamp;\n    static NEG_ONE: Timestamp;\n    static ONE: Timestamp;\n    static ZERO: Timestamp;\n\n    /**\n     * Returns a Timestamp representing the 64-bit integer that comes by concatenating the\n     * given high and low bits. Each is assumed to use 32 bits..\n     *\n     * @param lowBits The low 32-bits.\n     * @param highBits The high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representing the given (32-bit) integer value.\n     *\n     * @param value The 32-bit integer in question.\n     */\n    static fromInt(value: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     *\n     * @param value The number in question.\n     */\n    static fromNumber(value: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representation of the given string, written using the given radix.\n     *\n     * @param str The textual representation of the Timestamp.\n     * @param radix The radix in which the text is written.\n     */\n    static fromString(str: string, radix?: number): Timestamp;\n\n    /**\n     * Returns the sum of this and the given Timestamp.\n     *\n     * @param other Timestamp to add to this one.\n     */\n    add(other: Timestamp): Timestamp;\n\n    /**\n     * Returns the bitwise-AND of this Timestamp and the given one.\n     *\n     * @param other Timestamp to add to this one.\n     */\n    and(other: Timestamp): Timestamp;\n\n    /**\n     * Compares this Timestamp with the given one.\n     *\n     * @param other Timestamp to compare against.\n     */\n    compare(other: Timestamp): number;\n\n    /**\n     * Returns this Timestamp divided by the given one.\n     *\n     * @param other Timestamp by which to divide.\n     */\n    div(other: Timestamp): Timestamp;\n\n    /**\n     * Return whether this Timestamp equals the other\n     *\n     * @param other\n     */\n    equals(other: Timestamp): boolean;\n\n    /**\n     * Return the high 32-bits value.\n     */\n    getHighBits(): number;\n\n    /**\n     * Return the low 32-bits value.\n     */\n    getLowBits(): number;\n\n    /**\n     * Return the low unsigned 32-bits value.\n     */\n    getLowBitsUnsigned(): number;\n\n    /**\n     * Returns the number of bits needed to represent the absolute value of this Timestamp.\n     */\n    getNumBitsAbs(): number;\n\n    /**\n     * Return whether this Timestamp is greater than the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    greaterThan(other: Timestamp): number;\n\n    /**\n     * Return whether this Timestamp is greater than or equal to the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    greaterThanOrEqual(other: Timestamp): number;\n\n    /**\n     * Return whether this value is negative.\n     */\n    isNegative(): boolean;\n\n    /**\n     * IsOdd.\n     * Return whether this value is odd.\n     */\n    isOdd(): boolean;\n\n    /**\n     * Return whether this value is zero.\n     */\n    isZero(): boolean;\n\n    /**\n     * Return whether this Timestamp is less than the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    lessThan(other: Timestamp): boolean;\n\n    /**\n     * Return whether this Timestamp is less than or equal to the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    lessThanOrEqual(other: Timestamp): boolean;\n\n    /**\n     * Returns this Timestamp modulo the given one.\n     *\n     * @param other Timestamp by which to mod.\n     */\n    modulo(other: Timestamp): Timestamp;\n\n    /**\n     * Returns the product of this and the given Timestamp.\n     *\n     * @param other Timestamp to multiply with this.\n     */\n    multiply(other: Timestamp): Timestamp;\n\n    /**\n     * The negation of this value.\n     */\n    negate(): Timestamp;\n\n    /**\n     * The bitwise-NOT of this value.\n     */\n    not(): Timestamp;\n\n    /**\n     * Return whether this Timestamp does not equal the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    notEquals(other: Timestamp): boolean;\n\n    /**\n     * Returns the bitwise-OR of this Timestamp and the given one.\n     *\n     * @param other The Timestamp with which to OR.\n     */\n    or(other: Timestamp): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the left by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftLeft(other: number): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the right by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRight(other: number): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n     *\n     * @param other\n     */\n    shiftRightUnsigned(other: number): Timestamp;\n\n    /**\n     * Returns the difference of this and the given Timestamp.\n     *\n     * @param other Timestamp to subtract from this.\n     */\n    subtract(other: Timestamp): Timestamp;\n\n    /**\n     * Return the int value.\n     */\n    toInt(): number;\n\n    /**\n     * Return the JSON value.\n     */\n    toJSON(): string;\n\n    /**\n     * Return the Number value.\n     */\n    toNumber(): number;\n\n    /**\n     * Return the String value.\n     *\n     * @param radix The radix in which the text should be written.\n     */\n    toString(radix?: number): string;\n\n    /**\n     * Returns the bitwise-XOR of this Timestamp and the given one.\n     *\n     * @param other The Timestamp with which to XOR.\n     */\n    xor(other: Timestamp): Timestamp;\n}\n\nexport interface CollectionDeleteOneOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimmeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\nexport interface CollectionDistinctOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Create a new ObjectID instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html\n */\nexport interface Collection<T> {\n\n    /**\n     * Get the collection name.\n     */\n    collectionName: string;\n\n    /**\n     * Get the full collection namespace.\n     */\n    namespace: string;\n\n    /**\n     * The current write concern values.\n     */\n    writeConcern: WriteConcern;\n\n    /**\n     * The current read concern values.\n     */\n    readConcern: ReadConcern;\n\n    /**\n     * Get current index hint for collection.\n     */\n    hint: any;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<any>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param options Optional.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<any>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate<T>(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<T>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param options Optional.\n     * @param callback Optional\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate<T>(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<T>;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], callback: MongoCallback<BulkWriteOpResultObject>): void;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], options?: CollectionBulkWriteOptions): Promise<BulkWriteOpResultObject>;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], options: CollectionBulkWriteOptions, callback: MongoCallback<BulkWriteOpResultObject>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, options?: MongoCountPreferences): Promise<number>;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count=\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, options: MongoCountPreferences, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the countDocuments.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocumentst\n     */\n    countDocuments(query: FilterQuery<T>, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n     */\n    countDocuments(query: FilterQuery<T>, options?: MongoCountPreferences): Promise<number>;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count=\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n     */\n    countDocuments(query: FilterQuery<T>, options: MongoCountPreferences, callback: MongoCallback<number>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, callback: MongoCallback<string>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string>;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, options: MongodbIndexOptions, callback: MongoCallback<string>): void;\n\n    /**\n     * CreateIndexes.\n     *\n     * @param indexSpecs An array of index specifications to be created.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\n     */\n    createIndexes(indexSpecs: Object[]): Promise<any>;\n\n    /**\n     * CreateIndexes.\n     *\n     * @param indexSpecs An array of index specifications to be created.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\n     */\n    createIndexes(indexSpecs: Object[], callback: MongoCallback<any>): void;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, options?: CollectionOptions): Promise<DeleteWriteOpResultObject>;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, options: CollectionOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, options?: CollectionDeleteOneOptions): Promise<DeleteWriteOpResultObject>;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, options: CollectionDeleteOneOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, callback: MongoCallback<any>): void;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, options?: CollectionDistinctOptions): Promise<any>;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, options: CollectionDistinctOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\n     */\n    drop(): Promise<any>;\n\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\n     */\n    drop(callback: MongoCallback<any>): void;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, options?: CollectionOptions): Promise<any>;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, options: CollectionOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\n     */\n    dropIndexes(): Promise<any>;\n\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\n     */\n    dropIndexes(callback?: MongoCallback<any>): void;\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     *\n     * @param query The cursor query object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\n     */\n    find(query?: Object): Cursor<any>;\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     *\n     * @param query The cursor query object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\n     */\n    find<T>(query?: FilterQuery<T>): Cursor<T>;\n\n    /** @deprecated */\n    find(query: FilterQuery<T>, fields?: Object, skip?: number, limit?: number, timeout?: number): Cursor<any>;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, callback: MongoCallback<any>): void;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, options?: MongodbFindOneOptions): Promise<any>;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, options: MongodbFindOneOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, options?: FindOneAndDeleteOptions): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, options: FindOneAndDeleteOptions, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any>;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional settings\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, options: GeoHaystackSearchOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optionals.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any>;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, options: GeoNearOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, callback: MongoCallback<any>): void;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: GroupOptions): Promise<any>;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options: GroupOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\n     */\n    indexes(): Promise<any>;\n\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\n     */\n    indexes(callback: MongoCallback<any>): void;\n\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\n     *\n     * @param indexes One or more index names to check.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\n     */\n    indexExists(indexes: string | string[]): Promise<boolean>;\n\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\n     *\n     * @param indexes One or more index names to check.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\n     */\n    indexExists(indexes: string | string[], callback: MongoCallback<boolean>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param callback The command result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(options?: { full: boolean }): Promise<any>;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(options: { full: boolean }, callback: MongoCallback<any>): void;\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added,\n     * creating a new operation for each switch in types.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeOrderedBulkOp\n     */\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation;\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeUnorderedBulkOp\n     */\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], callback: MongoCallback<InsertWriteOpResult>): void;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult>;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], options: CollectionInsertManyOptions, callback: MongoCallback<InsertWriteOpResult>): void;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * Returns if the collection is a capped collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\n     */\n    isCapped(): Promise<any>;\n\n    /**\n     * Returns if the collection is a capped collection.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\n     */\n    isCapped(callback: MongoCallback<any>): void;\n\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#listIndexes\n     */\n    listIndexes(options?: ListIndexesOptions): CommandCursor;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, callback: MongoCallback<any>): void;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any>;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, options: MapReduceOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Returns the options of the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\n     */\n    options(): Promise<any>;\n\n    /**\n     * Returns the options of the collection.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\n     */\n    options(callback: MongoCallback<any>): void;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(callback: MongoCallback<Cursor<any>[]>): void;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]>;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(options: ParallelCollectionScanOptions, callback: MongoCallback<Cursor<any>[]>): void;\n\n    /**\n     * Reindex all indexes on the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\n     */\n    reIndex(): Promise<any>;\n\n    /**\n     * Reindex all indexes on the collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\n     */\n    reIndex(callback: MongoCallback<any>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#remove\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }): Promise<WriteOpResult>;\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }, callback?: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, callback: MongoCallback<Collection<T>>): void;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection<T>>;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param options Optional settings.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection<T>>): void;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#save\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, options?: CollectionOptions): Promise<WriteOpResult>;\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, options: CollectionOptions, callback: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(callback: MongoCallback<CollStats>): void;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(options?: { scale: number }): Promise<CollStats>;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(options: { scale: number }, callback: MongoCallback<CollStats>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#update\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: ReplaceOneOptions & { multi?: boolean }): Promise<WriteOpResult>;\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, options: ReplaceOneOptions & { multi?: boolean }, callback: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: UpdateManyOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, options: UpdateManyOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n\n}\n\n/**\n * Condition.\n */\nexport type Condition<T, P extends keyof T> = {\n    $eq?: T[P];\n    $gt?: T[P];\n    $gte?: T[P];\n    $in?: T[P][];\n    $lt?: T[P];\n    $lte?: T[P];\n    $ne?: T[P];\n    $nin?: T[P][];\n    $and?: (FilterQuery<T[P]> | T[P])[];\n    $or?: (FilterQuery<T[P]> | T[P])[];\n    $not?: (FilterQuery<T[P]> | T[P])[] | T[P];\n    $expr?: any;\n    $jsonSchema?: any;\n    $mod?: [number, number];\n    $regex?: RegExp;\n    $options?: string;\n    $text?: {\n        $search: string;\n        $language?: string;\n        $caseSensitive?: boolean;\n        $diacraticSensitive?: boolean;\n    };\n    $where?: Object;\n    $geoIntersects?: Object;\n    $geoWithin?: Object;\n    $near?: Object;\n    $nearSphere?: Object;\n    $elemMatch?: Object;\n    $size?: number;\n    $bitsAllClear?: Object;\n    $bitsAllSet?: Object;\n    $bitsAnyClear?: Object;\n    $bitsAnySet?: Object;\n    [key: string]: any;\n};\n\n/**\n * @see https://docs.mongodb.com/manual/reference/operator/update\n */\nexport type UpdateQuery<T> = {\n    $inc?: { [P in keyof T]?: number } | { [key: string]: number };\n    $min?: { [P in keyof T]?: number } | { [key: string]: number };\n    $max?: { [P in keyof T]?: number } | { [key: string]: number };\n    $mul?: { [P in keyof T]?: number } | { [key: string]: number };\n    $set?: Partial<T> | { [key: string]: any };\n    $setOnInsert?: Partial<T> | { [key: string]: any };\n    $unset?: { [P in keyof T]?: \"\" } | { [key: string]: \"\" };\n    $rename?: { [key: string]: keyof T } | { [key: string]: string };\n    $currentDate?: { [P in keyof T]?: (true | { $type: \"date\" | \"timestamp\" }) } | { [key: string]: (true | { $type: \"date\" | \"timestamp\" }) };\n    $addToSet?: Partial<T> | { [key: string]: any };\n    $pop?: { [P in keyof T]?: -1 | 1 } | { [key: string]: -1 | 1 };\n    $pull?: Partial<T> | { [key: string]: Condition<T, keyof T> };\n    $push?: Partial<T> | { [key: string]: any };\n    $pushAll?: Partial<T> | { [key: string]: Array<any> };\n    $each?: Partial<T> | { [key: string]: Array<any> };\n    $bit?: { [P in keyof T]?: any } | { [key: string]: any };\n};\n\nexport type FilterQuery<T> = {\n    [P in keyof T]?: T[P] | Condition<T, P>;\n} | { [key: string]: any };\n\n/**\n * The name of the target collection.\n *\n * @see http://docs.mongodb.org/manual/reference/command/collStats/\n */\nexport interface CollStats {\n\n    /**\n     * Namespace.\n     */\n    ns: string;\n\n    /**\n     * The number of objects or documents in this collection.\n     */\n    count: number;\n\n    /**\n     * Collection size in bytes.\n     */\n    size: number;\n\n    /**\n     * Average object size in bytes.\n     */\n    avgObjSize: number;\n\n    /**\n     * (Pre)allocated space for the collection in bytes.\n     */\n    storageSize: number;\n\n    /**\n     * Number of extents (contiguously allocated chunks of datafile space).\n     */\n    numExtents: number;\n\n    /**\n     * Number of indexes.\n     */\n    nindexes: number;\n\n    /**\n     * Size of the most recently created extent in bytes.\n     */\n    lastExtentSize: number;\n\n    /**\n     * Padding can speed up updates if documents grow.\n     */\n    paddingFactor: number;\n\n    /**\n     * A number that indicates the user-set flags on the collection. userFlags\n     * only appears when using the mmapv1 storage engine.\n     */\n    userFlags: number;\n\n    /**\n     * Total index size in bytes.\n     */\n    totalIndexSize: number;\n\n    /**\n     * Size of specific indexes in bytes.\n     */\n    indexSizes: {\n        _id_: number;\n        username: number;\n    };\n\n    /**\n     * This field will be “true” if the collection is capped.\n     */\n    capped: boolean;\n\n    /**\n     * Shows the maximum size of a capped collection.\n     */\n    maxSize: boolean;\n\n    /**\n     * This document contains data reported directly by the WiredTiger engine and other data for internal diagnostic use.\n     */\n    wiredTiger: any;\n\n    /**\n     * A document that reports data from the WiredTiger storage engine for each index in the collection.\n     * Other storage engines will return an empty document.\n     */\n    indexDetails: any;\n\n    /**\n     *\n     */\n    ok: number;\n}\n\n/**\n * CollectionAggregationOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n */\nexport interface CollectionAggregationOptions {\n\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n     */\n    cursor?: { batchSize: number };\n\n    /**\n     * Explain returns the aggregation execution plan (requires mongodb 2.6 >).\n     */\n    explain?: boolean;\n\n    /**\n     * allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n     */\n    allowDiskUse?: boolean;\n\n    /**\n     * maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n     */\n    maxTimeMS?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * CollectionInsertManyOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n */\nexport interface CollectionInsertManyOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n}\n\nexport interface UpdateManyOptions {\n\n    /**\n     * Update operation is an upsert.\n     */\n    upsert?: boolean;\n\n    /**\n     * The write concern.\n     */\n    w?: any;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n}\n\n/**\n * CollectionBulkWriteOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n */\nexport interface CollectionBulkWriteOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Execute write operation in ordered or unordered fashion.\n     */\n    ordered?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * BulkWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~BulkWriteOpResult\n */\nexport interface BulkWriteOpResultObject {\n\n    /**\n     * Number of documents inserted.\n     */\n    insertedCount?: number;\n\n    /**\n     * Number of documents matched for update.\n     */\n    matchedCount?: number;\n\n    /**\n     * Number of documents modified.\n     */\n    modifiedCount?: number;\n\n    /**\n     * Number of documents deleted.\n     */\n    deletedCount?: number;\n\n    /**\n     * Number of documents upserted.\n     */\n    upsertedCount?: number;\n\n    /**\n     * Inserted document generated Id's, hash key is the index of the originating operation.\n     */\n    insertedIds?: any;\n\n    /**\n     * Upserted document generated Id's, hash key is the index of the originating operation.\n     */\n    upsertedIds?: any;\n\n    /**\n     * The command result object.\n     */\n    result?: any;\n}\n\n/**\n * MongoCountPreferences.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n */\nexport interface MongoCountPreferences {\n\n    /**\n     * The limit of documents to count.\n     */\n    limit?: number;\n\n    /**\n     * The number of documents to skip for the count.\n     */\n    skip?: boolean;\n\n    /**\n     * An index name hint for the query.\n     */\n    hint?: string;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * DeleteWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~deleteWriteOpResult\n */\nexport interface DeleteWriteOpResultObject {\n\n    /**\n     * The raw result returned from MongoDB, field will vary depending on server version.\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents deleted.\n     */\n    result: {\n        ok?: number;\n        n?: number;\n    };\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection?: any;\n\n    /**\n     * The number of documents deleted.\n     */\n    deletedCount?: number;\n}\n\n/**\n * FindAndModifyWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~findAndModifyWriteOpResult\n */\nexport interface FindAndModifyWriteOpResultObject {\n\n    /**\n     * Document returned from findAndModify command.\n     */\n    value?: any;\n\n    /**\n     * The raw lastErrorObject returned from the command.\n     */\n    lastErrorObject?: any;\n\n    /**\n     * Is 1 if the command executed correctly.\n     */\n    ok?: number;\n}\n\n/**\n * FindOneAndReplaceOption.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n */\nexport interface FindOneAndReplaceOption {\n\n    /**\n     * Limits the fields to return for all matching documents.\n     */\n    projection?: Object;\n\n    /**\n     * Determines which document the operation modifies if the query selects multiple documents.\n     */\n    sort?: Object;\n\n    /**\n     * The maximum amount of time to allow the query to run.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * Upsert the document if it does not exist.\n     */\n    upsert?: boolean;\n\n    /**\n     * When false, returns the updated document rather than the original. The default is true.\n     */\n    returnOriginal?: boolean;\n}\n\n/**\n * GeoHaystackSearchOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n */\nexport interface GeoHaystackSearchOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Include results up to maxDistance from the point.\n     */\n    maxDistance?: number;\n\n    /**\n     * Filter the results by a query.\n     */\n    search?: Object;\n\n    /**\n     * Max number of results to return.\n     */\n    limit?: number;\n}\n\n/**\n * GeoNearOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n */\nexport interface GeoNearOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Max number of results to return.\n     */\n    num?: number;\n\n    /**\n     * Include results starting at minDistance from a point (2.6 or higher).\n     */\n    minDistance?: number;\n\n    /**\n     * Include results up to maxDistance from the point.\n     */\n    maxDistance?: number;\n\n    /**\n     * Include a value to multiply the distances with allowing for range conversions.\n     */\n    distanceMultiplier?: number;\n\n    /**\n     * Filter the results by a query.\n     */\n    query?: Object;\n\n    /**\n     * Perform query using a spherical model.\n     */\n    spherical?: boolean;\n\n    /**\n     * The closest location in a document to the center of the search region will always be returned MongoDB > 2.X.\n     */\n    uniqueDocs?: boolean;\n\n    /**\n     * Include the location data fields in the top level of the results MongoDB > 2.X.\n     */\n    includeLocs?: boolean;\n}\n\n/**\n * A class representation of the BSON Code type.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Code.html\n */\nexport declare class Code {\n    /**\n     *\n     * @param code a string or function.\n     * @param scope optional\n     */\n    constructor(code: string | Function, scope?: Object)\n\n    /**\n     * A string or function.\n     */\n    code: string | Function;\n\n    /**\n     * An optional scope for the function.\n     */\n    scope: any;\n}\n\n/**\n * CollectionOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n */\nexport interface CollectionOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n}\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html\n */\nexport interface OrderedBulkOperation {\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\n     * @param selector The selector for the bulk operation.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#find\n     */\n    find(selector: Object): FindOperatorsOrdered;\n\n    /**\n     * Add a single insert document to the bulk operation.\n     * @param doc The document to insert\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#insert\n     */\n    insert(doc: Object): OrderedBulkOperation;\n}\n\n/**\n * BulkWriteResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/BulkWriteResult.html\n */\nexport interface BulkWriteResult {\n\n    /**\n     * Did bulk operation correctly execute.\n     */\n    ok: number;\n\n    /**\n     * number of inserted documents.\n     */\n    nInserted: number;\n\n    /**\n     * number of documents updated logically.\n     */\n    nUpdated: number;\n\n    /**\n     * Number of upserted documents.\n     */\n    nUpserted: number;\n\n    /**\n     *\n     Number of documents updated physically on disk.\n     */\n    nModified: number;\n\n    /**\n     * Number of removed documents.\n     */\n    nRemoved: number;\n\n    /**\n     * Return an array of inserted ids.\n     */\n    getInsertedIds(): Array<Object>;\n\n    /**\n     * Retrieve lastOp if available.\n     */\n    getLastOp(): Object;\n\n    /**\n     * Return raw internal result.\n     */\n    getRawResponse(): Object;\n\n    /**\n     * Return the upserted id at position x.\n     */\n    getUpsertedIdAt(index: number): Object;\n\n    /**\n     * Return an array of upserted ids.\n     */\n    getUpsertedIds(): Array<Object>;\n\n    /**\n     * Retrieve the write concern error if any.\n     */\n    getWriteConcernError(): WriteConcernError;\n\n    /**\n     * Returns a specific write error object.\n     */\n    getWriteErrorAt(index: number): WriteError;\n\n    /**\n     * Returns the number of write errors off the bulk operation.\n     */\n    getWriteErrorCount(): number;\n\n    /**\n     * Retrieve all write errors.\n     */\n    getWriteErrors(): Array<Object>;\n\n    /**\n     * Returns true if the bulk operation contains a write error.\n     */\n    hasWriteErrors(): boolean;\n}\n\n/**\n * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteError.html\n */\nexport interface WriteError {\n\n    /**\n     * Write concern error code.\n     */\n    code: number;\n\n    /**\n     * Write concern error original bulk operation index.\n     */\n    index: number;\n\n    /**\n     * Write concern error message.\n     */\n    errmsg: string;\n}\n\n/**\n * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteConcernError.html\n */\nexport interface WriteConcernError {\n\n    /**\n     * Write concern error code.\n     */\n    code: number;\n\n    /**\n     * Write concern error message.\n     */\n    errmsg: string;\n}\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsOrdered.html\n */\nexport interface FindOperatorsOrdered {\n\n    /**\n     * Add a remove operation to the bulk operation.\n     */\n    delete(): OrderedBulkOperation;\n\n    /**\n     * Add a remove one operation to the bulk operation.\n     */\n    deleteOne(): OrderedBulkOperation;\n\n    /**\n     * Add a replace one operation to the bulk operation.\n     */\n    replaceOne(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Add a single update document to the bulk operation.\n     */\n    update(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Add a single update one document to the bulk operation.\n     */\n    updateOne(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Upsert modifier for update bulk operation.\n     */\n    upsert(): FindOperatorsOrdered;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html\n */\nexport interface UnorderedBulkOperation {\n\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\n     * @param selector The selector for the bulk operation.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#find\n     */\n    find(selector: Object): FindOperatorsUnordered;\n\n    /**\n     * Add a single insert document to the bulk operation.\n     * @param doc The document to insert.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#insert\n     */\n    insert(doc: Object): UnorderedBulkOperation;\n}\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsUnordered.html\n */\nexport interface FindOperatorsUnordered {\n\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Add a remove operation to the bulk operation.\n     */\n    remove(): UnorderedBulkOperation;\n\n    /**\n     * Add a remove one operation to the bulk operation.\n     */\n    removeOne(): UnorderedBulkOperation;\n\n    /**\n     * Add a replace one operation to the bulk operation.\n     * @param doc The new document to replace the existing one with.\n     */\n    replaceOne(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Add a single update document to the bulk operation.\n     * @param doc Update operations\n     */\n    update(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Add a single update one document to the bulk operation.\n     * @param doc Update operations\n     */\n    updateOne(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Upsert modifier for update bulk operation.\n     */\n    upsert(): FindOperatorsUnordered;\n}\n\n/**\n * MongodbFindOneOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n */\nexport interface MongodbFindOneOptions {\n\n    /**\n     * Sets the limit of documents returned in the query.\n     */\n    limit?: number;\n\n    /**\n     * Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n     */\n    sort?: Array<any> | Object;\n\n    /**\n     * The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}.\n     */\n    fields?: Object;\n\n    /**\n     * Set to skip N documents ahead in your query (useful for pagination).\n     */\n    skip?: number;\n\n    /**\n     * Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}.\n     */\n    hint?: Object;\n\n    /**\n     * Explain the query instead of returning the data.\n     */\n    explain?: boolean;\n\n    /**\n     * Snapshot query.\n     */\n    snapshot?: boolean;\n\n    /**\n     * Specify if the cursor can timeout.\n     */\n    timeout?: boolean;\n\n    /**\n     * Specify if the cursor is tailable.\n     */\n    tailable?: boolean;\n\n    /**\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\n     */\n    batchSize?: number;\n\n    /**\n     * Only return the index key.\n     */\n    returnKey?: boolean;\n\n    /**\n     * Limit the number of items to scan.\n     */\n    maxScan?: number;\n\n    /**\n     * Set index bounds.\n     */\n    min?: number;\n\n    /**\n     * Set index bounds.\n     */\n    max?: number;\n\n    /**\n     * Show disk location of results.\n     */\n    showDiskLoc?: boolean;\n\n    /**\n     * You can put a $comment field on a query to make looking in the profiler logs simpler.\n     */\n    comment?: string;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Specify if the cursor should return partial results when querying against a sharded system.\n     */\n    partial?: boolean;\n\n    /**\n     * Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMs?: number;\n}\n\n/**\n * InsertWriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertWriteOpResult\n */\nexport interface InsertWriteOpResult {\n\n    /**\n     * The total amount of documents inserted.\n     */\n    insertedCount: number;\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * All the generated _id's for the inserted documents.\n     */\n    insertedIds: Array<ObjectID>;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The raw command result object returned from MongoDB (content might vary by server version).\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents inserted.\n     */\n    result: { ok: number, n: number };\n}\n\n/**\n * CollectionInsertOneOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n */\nexport interface CollectionInsertOneOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * InsertOneWriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertOneWriteOpResult\n */\nexport interface InsertOneWriteOpResult {\n\n    /**\n     * The total amount of documents inserted.\n     */\n    insertedCount: number;\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * The driver generated ObjectId for the insert operation.\n     */\n    insertedId: ObjectID;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The raw command result object returned from MongoDB (content might vary by server version).\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents inserted.\n     */\n    result: { ok: number, n: number };\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n */\nexport interface ParallelCollectionScanOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\n     */\n    batchSize?: number;\n\n    /**\n     * The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors).\n     */\n    numCursors?: number;\n\n    /**\n     * Return all BSON documents as Raw Buffer documents.\n     */\n    raw?: boolean;\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n */\nexport interface ReplaceOneOptions {\n\n    /**\n     * Update operation is an upsert.\n     */\n    upsert?: boolean;\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~updateWriteOpResult\n */\nexport interface UpdateWriteOpResult {\n\n    /**\n     * The raw result returned from MongoDB, field will vary depending on server version.\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents scanned.\n     * @param nModified The total count of documents modified.\n     */\n    result: { ok: number, n: number, nModified: number };\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The number of documents that matched the filter.\n     */\n    matchedCount: number;\n\n    /**\n     * The number of documents that were modified.\n     */\n    modifiedCount: number;\n\n    /**\n     * The number of documents upserted.\n     */\n    upsertedCount: number;\n\n    /**\n     * The upserted id.\n     * @param _id The upserted _id returned from the server.\n     */\n    upsertedId: { _id: ObjectID };\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n */\nexport interface MapReduceOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Sets the output target for the map reduce job.\n     * {inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}.\n     */\n    out?: Object;\n\n    /**\n     * Query filter object.\n     */\n    query?: Object;\n\n    /**\n     * Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\n     */\n    sort?: Object;\n\n    /**\n     * Number of objects to return from collection.\n     */\n    limit?: number;\n\n    /**\n     * Keep temporary data.\n     */\n    keeptemp?: boolean;\n\n    /**\n     * Finalize function.\n     */\n    finalize?: Function | string;\n\n    /**\n     * Can pass in variables that can be access from map/reduce/finalize.\n     */\n    scope?: Object;\n\n    /**\n     * It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.\n     */\n    jsMode?: boolean;\n\n    /**\n     * Provide statistics on job execution time.\n     */\n    verbose?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * WriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~WriteOpResult\n */\nexport interface WriteOpResult {\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The command result object.\n     */\n    result: any;\n}\n\n/**\n * WriteOpResult.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~resultCallback\n */\nexport type CursorResult = any | void | boolean;\n\n/**\n * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly).\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html\n */\nexport declare class Cursor<T> extends Readable {\n\n    /**\n     * Cursor query sort setting.\n     */\n    sortValue: string;\n\n    /**\n     * Is Cursor able to time out.\n     */\n    timeout: boolean;\n\n    /**\n     * Get cursor ReadPreference.\n     */\n    readPreference: ReadPreference;\n\n    /**\n     * @param flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].\n     * @param value The flag boolean value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addCursorFlag\n     */\n    addCursorFlag(flag: string, value: boolean): Cursor<T>;\n\n    /**\n     * @param name The query modifier (must start with $, such as $orderby etc).\n     * @param value The flag boolean value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addQueryModifier\n     */\n    addQueryModifier(name: string, value: boolean): Cursor<T>;\n\n    /**\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#batchSize\n     */\n    batchSize(value: number): Cursor<T>;\n\n    /**\n     * Clone the cursor.\n     * still returns the same type.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#clone\n     */\n    clone(): Cursor<T>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n     */\n    close(): Promise<CursorResult>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * The result callback.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n     */\n    close(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     * @param value The comment attached to this query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#comment\n     */\n    comment(value: string): Cursor<T>;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, callback: MongoCallback<number>): void;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, options?: CursorCommentOptions): Promise<number>;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, options: CursorCommentOptions, callback: MongoCallback<number>): void;\n\n    /**\n     * Execute the explain for the cursor.\n     * returns Promise if no callback passed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\n     */\n    explain(): Promise<CursorResult>;\n\n    /**\n     * Execute the explain for the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\n     */\n    explain(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Set the cursor query.\n     * @param filter The filter object used for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#filter\n     */\n    filter(filter: Object): Cursor<T>;\n\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     * @param iterator The iteration callback.\n     * @param callback The end callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Cursor.html#forEach\n     */\n    forEach(iterator: IteratorCallback<T>, callback: EndCallback): void;\n    forEach(iterator: IteratorCallback<T>): Promise<void>;    \n\n    /**\n     * Check if there is any document still available in the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\n     */\n    hasNext(): Promise<boolean>;\n\n    /**\n     * Check if there is any document still available in the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\n     */\n    hasNext(callback: MongoCallback<boolean>): void;\n\n    /**\n     * Set the cursor hint.\n     * @param hint If specified, then the query system will only consider plans using the hinted index.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hint\n     */\n    hint(hint: Object): Cursor<T>;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Set the limit for the cursor.\n     * @param value The limit for the cursor query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#limit\n     */\n    limit(value: number): Cursor<T>;\n\n    /**\n     * SMap all documents using the provided function.\n     * @param transform The mapping transformation method.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#map\n     */\n    map(transform: Function): Cursor<T>;\n\n    /**\n     * Set the cursor max.\n     * @param max Specify a $max value to specify the exclusive upper bound for a specific index in\n     * order to constrain the results of find(). The $max specifies the upper bound for\n     * all keys of a specific index in order.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#max\n     */\n    max(max: number): Cursor<T>;\n\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the\n     * timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise).\n     * @param value Number of milliseconds to wait before aborting the tailed query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxAwaitTimeMS\n     */\n    maxAwaitTimeMS(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor maxScan.\n     * @param maxScan Constrains the query to only scan the specified number of documents when fulfilling the query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxScan\n     */\n    maxScan(maxScan: Object): Cursor<T>;\n\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher).\n     * @param value Number of milliseconds to wait before aborting the query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor min.\n     * @param min Specify a $min value to specify the inclusive lower bound for a specific index in order to\n     * constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#min\n     */\n    min(min: number): Cursor<T>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    next(): Promise<CursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    next(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Sets a field projection for the query.\n     * @param value The field projection object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#project\n     */\n    project(value: Object): Cursor<T>;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Set the cursor returnKey.\n     * @param returnKey Only return the index field or fields for the results of the query. If $returnKey is set\n     * to true and the query does not use an index to perform the read operation,\n     * the returned documents will not contain any fields. Use one of the following forms:\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    returnKey(returnKey: Object): Cursor<T>;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#rewind\n     */\n    rewind(): void;\n\n    /**\n     * Set a node.js specific cursor option.\n     * @param field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].\n     * @param value The field value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setCursorOption\n     */\n    setCursorOption(field: string, value: Object): Cursor<T>;\n\n    /**\n     * Set the ReadPreference for the cursor.\n     * @param readPreference The new read preference for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setReadPreference\n     */\n    setReadPreference(readPreference: string | ReadPreference): Cursor<T>;\n\n    /**\n     * Set the cursor showRecordId.\n     * @param showRecordId The $showDiskLoc option has now been deprecated and replaced with the\n     * showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#showRecordId\n     */\n    showRecordId(showRecordId: Object): Cursor<T>;\n\n    /**\n     * Set the skip for the cursor.\n     * @param value The skip for the cursor query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#skip\n     */\n    skip(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor snapshot.\n     * @param snapshot The $snapshot operator prevents the cursor from returning a document more than\n     * once because an intervening write operation results in a move of the document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#snapshot\n     */\n    snapshot(snapshot: Object): Cursor<T>;\n\n    /**\n     * Sets the sort order of the cursor query.\n     * @param keyOrList The key or keys set for the sort.\n     * @param direction The direction of the sorting (1 or -1).\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#sort\n     */\n    sort(keyOrList: string | Object[] | Object, direction?: number): Cursor<T>;\n\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @param options Optional settings.\n     * @param transform A transformation method applied to each document emitted by the stream.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#stream\n     */\n    stream(options?: { transform?: Function }): Cursor<T>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\n     * memory to store the results. Note that the array only contain partial results when this cursor had\n     * been previously accessed. In that case, cursor.rewind() can be used to reset the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\n     */\n    toArray(): Promise<T[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\n     * memory to store the results. Note that the array only contain partial results when this cursor had\n     * been previously accessed. In that case, cursor.rewind() can be used to reset the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\n     */\n    toArray(callback: MongoCallback<T[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some\n     * data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n}\n\n/**\n * Get the count of documents for this cursor.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n */\nexport interface CursorCommentOptions {\n\n    /**\n     * The number of documents to skip.\n     */\n    skip?: number;\n\n    /**\n     * The maximum amounts to count before aborting.\n     */\n    limit?: number;\n\n    /**\n     * Number of miliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * An index name hint for the query.\n     */\n    hint?: string;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Creates a new Change Stream instance.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html\n */\nexport declare class ChangeStream extends Readable {\n\n    constructor(changeDomain: MongoClient | Db | Collection<any>, pipeline: Object[], options?: ChangeStreamOptions);\n\n    /**\n     * Close the Change Stream.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#close\n     */\n    close(): Promise<any>;\n\n    /**\n     * Close the Change Stream.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#close\n     */\n    close(callback: MongoCallback<any>): void;\n\n    /**\n     * Check if there is any document still available in the Change Stream.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#hasNext\n     */\n    hasNext(): Promise<any>;\n\n    /**\n     * Check if there is any document still available in the Change Stream.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#hasNext\n     */\n    hasNext(callback: MongoCallback<any>): void;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#next\n     */\n    next(): Promise<any>;\n\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#next\n     */\n    next(callback: MongoCallback<any>): void;\n\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#stream\n     */\n    stream(options?: { transform: Function }): Cursor<any>;\n}\n\n/**\n * ChangeStreamOptions\n */\nexport interface ChangeStreamOptions {\n\n    /**\n     * Allowed values: ‘default’, ‘updateLookup’.\n     * When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document,\n     * as well as a copy of the entire document that was changed from some time after the change occurred.\n     */\n    fullDocument?: string;\n\n    /**\n     * The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n     */\n    maxAwaitTimeMS?: number;\n\n    /**\n     * Specifies the logical starting point for the new change stream.\n     * This should be the _id field from a previously returned change stream document.\n     */\n    resumeAfter?: Object;\n\n    /**\n     * The number of documents to return per batch.\n     */\n    batchSize?: number;\n\n    /**\n     * Specify collation settings for operation.\n     */\n    collation?: CollationDocument;\n\n    /**\n     * The read preference. Defaults to the read preference of the database or collection.\n     */\n    readPreference?: ReadPreference;\n}\n\n/**\n * CollationDocument\n */\nexport interface CollationDocument {\n    locale: string;\n    strength?: number;\n    caseLevel?: boolean;\n    caseFirst?: string;\n    numericOrdering?: boolean;\n    alternate?: string;\n    maxVariable?: string;\n    backwards?: boolean;\n    normalization?: boolean;\n\n}\n\n/**\n * A class representing a client session on the server.\n * WARNING: not meant to be instantiated directly.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html\n */\nexport interface ClientSession extends EventEmitter {\n\n    /**\n     * The server id associated with this session\n     */\n    id: any;\n\n    /**\n     * Aborts the currently active transaction in this session.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#abortTransaction\n     */\n    abortTransaction(): Promise<void>;\n\n    /**\n     * Aborts the currently active transaction in this session.\n     * @param callback Optional callback for completion of this operation\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#abortTransaction\n     */\n    abortTransaction(callback?: MongoCallback<void>): Promise<void>;\n\n    /**\n     * Advances the operationTime for a ClientSession.\n     * @param operationTime the BSON.Timestamp of the operation type it is desired to advance to.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#advanceOperationTime\n     */\n    advanceOperationTime(operationTime: Timestamp): void;\n\n    /**\n     * Commits the currently active transaction in this session.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#commitTransaction\n     */\n    commitTransaction(): Promise<void>;\n\n    /**\n     * Commits the currently active transaction in this session.\n     * @param callback Optional callback for completion of this operation.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#commitTransaction\n     */\n    commitTransaction(callback?: MongoCallback<void>): Promise<void>;\n\n    /**\n     * Ends this session on the server.\n     * @param callback Optional callback for completion of this operation.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#endSession\n     */\n    endSession(callback?: MongoCallback<void>): void;\n\n    /**\n     * Ends this session on the server.\n     * @param options Optional settings. Currently reserved for future use.\n     * @param callback Optional callback for completion of this operation.\n     * @see @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#endSession\n     */\n    endSession(options?: any, callback?: MongoCallback<void>): void;\n\n    /**\n     * Used to determine if this session equals another.\n     * @param session A class representing a client session on the server.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#equals\n     */\n    equals(session: ClientSession): boolean;\n\n    /**\n     * Increment the transaction number on the internal ServerSession.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#incrementTransactionNumber\n     */\n    incrementTransactionNumber(): void;\n\n    /**\n     * Check this session is currently in a transaction or not.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#inTransaction\n     */\n    inTransaction(): boolean;\n\n    /**\n     * Starts a new transaction with the given options.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#startTransaction\n     */\n    startTransaction(options?: TransactionOptions): void;\n\n}\n\n/**\n * Options to pass when creating a Client Session\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#SessionOptions\n */\nexport interface SessionOptions {\n\n    /**\n     * Whether causal consistency should be enabled on this session\n     */\n    causalConsistency?: boolean;\n\n    /**\n     * The default TransactionOptions to use for transactions started on this session.\n     */\n    defaultTransactionOptions?: TransactionOptions;\n}\n\n/**\n * TransactionOptions\n */\nexport interface TransactionOptions {\n\n    readConcern?: ReadConcern;\n    writeConcern?: WriteConcern;\n    readPreference?: ReadPreference;\n}\n\n/**\n * MongoClientCommonOption\n */\nexport interface MongoClientCommonOption {\n    /**\n     * Do not make the db an event listener to the original connection.\n     */\n    noListener?: boolean;\n\n    /**\n     * Control if you want to return a cached instance or have a new one created\n     */\n    returnNonCachedInstance?: boolean;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#ReadConcern\n */\nexport type ReadConcernLevel = \"local\" | \"available\" | \"majority\" | \"linearizable\" | \"snapshot\";\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#ReadConcern\n */\nexport interface ReadConcern {\n    level?: ReadConcernLevel;\n}\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#WriteConcern\n */\nexport interface WriteConcern {\n\n    /**\n     * requests acknowledgement that the write operation has\n     * propagated to a specified number of mongod hosts\n     */\n    w?: number | \"majority\" | string;\n\n    /**\n     * requests acknowledgement from MongoDB that the write operation has\n     * been written to the journal\n     */\n    j?: boolean;\n\n    /**\n     * a time limit, in milliseconds, for the write concern\n     */\n    wtimeout?: number;\n}\n\n/**\n * The callback format for the forEach iterator method.\n * @param doc An emitted document for the iterator.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~iteratorCallback\n */\nexport interface IteratorCallback<T> {\n    (doc: T): void;\n}\n\n/**\n * The callback error format for the forEach iterator method.\n * @param error An error instance representing the error during the execution.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~endCallback\n */\nexport interface EndCallback {\n    (error: MongoError): void;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#~resultCallback\n */\nexport type AggregationCursorResult = any | void;\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly),\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html\n */\nexport interface AggregationCursor<T> extends Readable {\n\n    /**\n     * Set the batch size for the cursor.\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#batchSize\n     */\n    batchSize(value: number): AggregationCursor<T>;\n\n    /**\n     * Clone the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#clone\n     */\n    clone(): AggregationCursor<T>;\n\n    /**\n     * Close the cursor, sending a AggregationCursor command and emitting close.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\n     */\n    close(): Promise<AggregationCursorResult>;\n\n    /**\n     * Close the cursor, sending a AggregationCursor command and emitting close.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\n     */\n    close(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Iterates over all the documents for this cursor. As with {cursor.toArray}, not all of the elements will\n     * be iterated if this cursor had been previouly accessed. In that case, {cursor.rewind} can be used to reset\n     * the cursor. However, unlike {cursor.toArray}, the cursor will only hold a maximum of batch size elements\n     * at any given time if batch size is specified. Otherwise, the caller is responsible for making sure\n     * that the entire result can fit the memory.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#each\n     */\n    each(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Execute the explain for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\n     */\n    explain(): Promise<AggregationCursorResult>;\n\n    /**\n     * Execute the explain for the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\n     */\n    explain(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Add a geoNear stage to the aggregation pipeline.\n     * @param document The geoNear stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#geoNear\n     */\n    geoNear(document: Object): AggregationCursor<T>;\n\n    /**\n     * Add a group stage to the aggregation pipeline.\n     * @param document The group stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#group\n     */\n    group(document: Object): AggregationCursor<T>;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Add a limit stage to the aggregation pipeline.\n     * @param value The state limit value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#limit\n     */\n    limit(value: number): AggregationCursor<T>;\n\n    /**\n     * Add a match stage to the aggregation pipeline.\n     * @param document The match stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#match\n     */\n    match(document: Object): AggregationCursor<T>;\n\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline.\n     * @param value The state maxTimeMS value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): AggregationCursor<T>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\n     */\n    next(): Promise<AggregationCursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\n     */\n    next(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Add a out stage to the aggregation pipeline.\n     * @param destination The destination name.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#out\n     */\n    out(destination: string): AggregationCursor<T>;\n\n    /**\n     * Add a project stage to the aggregation pipeline.\n     * @param document The project stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#project\n     */\n    project(document: Object): AggregationCursor<T>;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Add a redact stage to the aggregation pipeline.\n     * @param document The redact stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#redact\n     */\n    redact(document: Object): AggregationCursor<T>;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#rewind\n     */\n    rewind(): AggregationCursor<T>;\n\n    /**\n     * Add a skip stage to the aggregation pipeline.\n     * @param value The state skip value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#setEncoding\n     */\n    skip(value: number): AggregationCursor<T>;\n\n    /**\n     * Add a sort stage to the aggregation pipeline.\n     * @param document The sort stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#sort\n     */\n    sort(document: Object): AggregationCursor<T>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contain partial\n     * results when this cursor had been previouly accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\n     */\n    toArray(): Promise<T[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contain partial\n     * results when this cursor had been previouly accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\n     */\n    toArray(callback: MongoCallback<T[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser,\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\n     * so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n\n    /**\n     * Add a unwind stage to the aggregation pipeline.\n     * @param field The unwind field name.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unwind\n     */\n    unwind(field: string): AggregationCursor<T>;\n}\n\n/**\n * CommandCursor.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html\n */\nexport interface CommandCursor extends Readable {\n\n    /**\n     * Set the batch size for the cursor.\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#batchSize\n     */\n    batchSize(value: number): CommandCursor;\n\n    /**\n     * Clone the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#clone\n     */\n    clone(): CommandCursor;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\n     */\n    close(): Promise<AggregationCursorResult>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\n     */\n    close(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Each\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#each\n     */\n    each(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline.\n     * @param value The state maxTimeMS value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): CommandCursor;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\n     */\n    next(): Promise<AggregationCursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\n     */\n    next(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#rewind\n     */\n    rewind(): CommandCursor;\n\n    /**\n     * Set the ReadPreference for the cursor.\n     * @param readPreference The new read preference for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#setReadPreference\n     */\n    setReadPreference(readPreference: string | ReadPreference): CommandCursor;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\n     */\n    toArray(): Promise<any[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\n     */\n    toArray(callback: MongoCallback<any[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser,\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\n     * so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n}\n\n/**\n * GridFSBucket.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\n */\nexport declare class GridFSBucket {\n\n    /**\n     *\n     * @param db A db handle.\n     * @param options Optional settings.\n     */\n    constructor(db: Db, options?: GridFSBucketOptions);\n\n    /**\n     * Deletes a file with the given id.\n     * @param id The id of the file doc\n     * @param callback The result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#delete\n     */\n    delete(id: ObjectID, callback?: GridFSBucketErrorCallback): void;\n\n    /**\n     * Removes this bucket's files collection, followed by its chunks collection.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#drop\n     */\n    drop(callback?: GridFSBucketErrorCallback): void;\n\n    /**\n     * Convenience wrapper around find on the files collection\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\n     */\n    find(filter?: Object, options?: GridFSBucketFindOptions): Cursor<any>;\n\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file.\n     * @param id The id of the file doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStream\n     */\n    openDownloadStream(id: ObjectID, options?: { start: number, end: number }): GridFSBucketReadStream;\n\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file\n     * @param filename The id of the file doc\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStreamByName\n     */\n\n    openDownloadStreamByName(filename: string, options?: { revision: number, start: number, end: number }): GridFSBucketReadStream;\n\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS.\n     * The stream's 'id' property contains the resulting file's id.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\n     */\n    openUploadStream(filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\n\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS for a custom file id.\n     * The stream's 'id' property contains the resulting file's id.\n     * @param id A custom id used to identify the file.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStreamWithId\n     */\n    openUploadStreamWithId(id: string | number | Object, filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\n\n    /**\n     * Renames the file with the given _id to the given string.\n     * @param id the id of the file to rename.\n     * @param filename new name for the file.\n     * @param callback The result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#rename\n     */\n    rename(id: ObjectID, filename: string, callback?: GridFSBucketErrorCallback): void;\n}\n\n/**\n * Constructor for a streaming GridFS interface.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\n */\nexport interface GridFSBucketOptions {\n\n    /**\n     * The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n     */\n    bucketName?: string;\n\n    /**\n     * Number of bytes stored in each chunk. Defaults to 255KB.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * Optional write concern to be passed to write operations, for instance { w: 1 }.\n     */\n    writeConcern?: WriteConcern;\n\n    /**\n     * Optional read preference to be passed to read operations.\n     */\n    ReadPreference?: ReadPreference;\n}\n\n/**\n * GridFSBucketErrorCallback.\n * @param err An error instance representing any errors that occurred.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#~errorCallback\n */\nexport interface GridFSBucketErrorCallback {\n    (err?: MongoError): void;\n}\n\n/**\n * GridFSBucketFindOptions.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\n */\nexport interface GridFSBucketFindOptions {\n\n    /**\n     * Optional batch size for cursor.\n     */\n    batchSize?: number;\n\n    /**\n     * Optional limit for cursor.\n     */\n    limit?: number;\n\n    /**\n     * Optional maxTimeMS for cursor.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * Optionally set cursor's noCursorTimeout flag.\n     */\n    noCursorTimeout?: boolean;\n\n    /**\n     * Optional skip for cursor.\n     */\n    skip?: number;\n\n    /**\n     * Optional sort for cursor.\n     */\n    sort?: Object;\n}\n\n/**\n * GridFSBucketOpenUploadStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\n */\nexport interface GridFSBucketOpenUploadStreamOptions {\n\n    /**\n     * Optional overwrite this bucket's chunkSizeBytes for this file.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * Optional object to store in the file document's metadata field.\n     */\n    metadata?: Object;\n\n    /**\n     * Optional string to store in the file document's contentType field.\n     */\n    contentType?: string;\n\n    /**\n     * Optional array of strings to store in the file document's aliases field.\n     */\n    aliases?: Array<string>;\n}\n\n/**\n * GridFSBucketReadStream.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\n */\nexport declare class GridFSBucketReadStream extends Readable {\n\n    /**\n     *\n     * @param chunks Handle for chunks collection.\n     * @param files Handle for files collection.\n     * @param readPreference The read preference to use.\n     * @param filter The query to use to find the file document.\n     * @param options Optional settings.\n     */\n    constructor(chunks: Collection<any>, files: Collection<any>, readPreference: Object, filter: Object, options?: GridFSBucketReadStreamOptions);\n}\n\n/**\n * GridFSBucketReadStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\n */\nexport interface GridFSBucketReadStreamOptions {\n\n    /**\n     * Optional sort for the file find query.\n     */\n    sort?: number;\n\n    /**\n     * Optional skip for the file find query.\n     */\n    skip?: number;\n\n    /**\n     * Optional 0-based offset in bytes to start streaming from.\n     */\n    start?: number;\n\n    /**\n     * Optional 0-based offset in bytes to stop streaming before.\n     */\n    end?: number;\n}\n\n/**\n * GridFSBucketWriteStream\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\n */\nexport declare class GridFSBucketWriteStream extends Writable {\n\n    /**\n     *\n     * @param bucket Handle for this stream's corresponding bucket.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings.\n     */\n    constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions);\n}\n\n/**\n * GridFSBucketWriteStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\n */\nexport interface GridFSBucketWriteStreamOptions {\n\n    /**\n     * Custom file id for the GridFS file.\n     */\n    id?: string | number | Object;\n\n    /**\n     * The chunk size to use, in bytes.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * The write concern.\n     */\n    w?: number;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * The journal write concern.\n     */\n    j?: number;\n}\n"],"sourceRoot":"../.."}
##############################################
/src/driver/mysql/MysqlConnectionOptions.d.ts-35-    /**
/src/driver/mysql/MysqlConnectionOptions.d.ts:36:     * Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: false)
/src/driver/mysql/MysqlConnectionOptions.d.ts-37-     */
/src/driver/mysql/MysqlConnectionOptions.d.ts:38:    readonly insecureAuth?: boolean;
/src/driver/mysql/MysqlConnectionOptions.d.ts-39-    /**
##############################################
/src/driver/mysql/MysqlDriver.js-756-            connectTimeout: options.connectTimeout,
/src/driver/mysql/MysqlDriver.js:757:            insecureAuth: options.insecureAuth,
/src/driver/mysql/MysqlDriver.js-758-            supportBigNumbers: options.supportBigNumbers !== undefined ? options.supportBigNumbers : true,
##############################################
/src/driver/mysql/MysqlConnectionOptions.js.map:1:{"version":3,"sources":["../../src/driver/mysql/MysqlConnectionOptions.ts"],"names":[],"mappings":"","file":"MysqlConnectionOptions.js","sourcesContent":["import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\nimport {MysqlConnectionCredentialsOptions} from \"./MysqlConnectionCredentialsOptions\";\n\n/**\n * MySQL specific connection options.\n *\n * @see https://github.com/mysqljs/mysql#connection-options\n */\nexport interface MysqlConnectionOptions extends BaseConnectionOptions, MysqlConnectionCredentialsOptions {\n\n    /**\n     * Database type.\n     */\n    readonly type: \"mysql\"|\"mariadb\";\n\n    /**\n     * The charset for the connection. This is called \"collation\" in the SQL-level of MySQL (like utf8_general_ci).\n     * If a SQL-level charset is specified (like utf8mb4) then the default collation for that charset is used.\n     * Default: 'UTF8_GENERAL_CI'\n     */\n    readonly charset?: string;\n\n    /**\n     * The timezone configured on the MySQL server.\n     * This is used to type cast server date/time values to JavaScript Date object and vice versa.\n     * This can be 'local', 'Z', or an offset in the form +HH:MM or -HH:MM. (Default: 'local')\n     */\n    readonly timezone?: string;\n\n    /**\n     * The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: 10000)\n     */\n    readonly connectTimeout?: number;\n\n    /**\n     * The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: 10000)\n     * This difference between connectTimeout and acquireTimeout is subtle and is described in the mysqljs/mysql docs\n     * https://github.com/mysqljs/mysql/tree/master#pool-options\n     */ \n    readonly acquireTimeout?: number;\n\n    /**\n     * Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: false)\n     */\n    readonly insecureAuth?: boolean;\n\n    /**\n     * When dealing with big numbers (BIGINT and DECIMAL columns) in the database, you should enable this option (Default: false)\n     */\n    readonly supportBigNumbers?: boolean;\n\n    /**\n     * Enabling both supportBigNumbers and bigNumberStrings forces big numbers (BIGINT and DECIMAL columns) to be always\n     * returned as JavaScript String objects (Default: false). Enabling supportBigNumbers but leaving bigNumberStrings\n     * disabled will return big numbers as String objects only when they cannot be accurately represented with\n     * [JavaScript Number objects](http://ecma262-5.com/ELS5_HTML.htm#Section_8.5) (which happens when they exceed the [-2^53, +2^53] range),\n     * otherwise they will be returned as Number objects. This option is ignored if supportBigNumbers is disabled.\n     */\n    readonly bigNumberStrings?: boolean;\n\n    /**\n     * Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather then inflated into JavaScript Date objects.\n     * Can be true/false or an array of type names to keep as strings.\n     */\n    readonly dateStrings?: boolean|string[];\n\n    /**\n     * Prints protocol details to stdout. Can be true/false or an array of packet type names that should be printed.\n     * (Default: false)\n     */\n    readonly debug?: boolean|string[];\n\n    /**\n     * Generates stack traces on Error to include call site of library entrance (\"long stack traces\").\n     * Slight performance penalty for most calls. (Default: true)\n     */\n    readonly trace?: boolean;\n\n    /**\n     * Allow multiple mysql statements per query. Be careful with this, it could increase the scope of SQL injection attacks.\n     * (Default: false)\n     */\n    readonly multipleStatements?: boolean;\n\n    /**\n     * Use spatial functions like GeomFromText and AsText which are removed in MySQL 8.\n     * (Default: true)\n     */\n    readonly legacySpatialSupport?: boolean;\n\n    /**\n     * List of connection flags to use other than the default ones. It is also possible to blacklist default ones.\n     * For more information, check https://github.com/mysqljs/mysql#connection-flags.\n     */\n    readonly flags?: string[];\n\n    /**\n     * Replication setup.\n     */\n    readonly replication?: {\n\n        /**\n         * Master server used by orm to perform writes.\n         */\n        readonly master: MysqlConnectionCredentialsOptions;\n\n        /**\n         * List of read-from severs (slaves).\n         */\n        readonly slaves: MysqlConnectionCredentialsOptions[];\n\n        /**\n         * If true, PoolCluster will attempt to reconnect when connection fails. (Default: true)\n         */\n        readonly canRetry?: boolean;\n\n        /**\n         * If connection fails, node's errorCount increases.\n         * When errorCount is greater than removeNodeErrorCount, remove a node in the PoolCluster. (Default: 5)\n         */\n        readonly removeNodeErrorCount?: number;\n\n        /**\n         * If connection fails, specifies the number of milliseconds before another connection attempt will be made.\n         * If set to 0, then node will be removed instead and never re-used. (Default: 0)\n         */\n        readonly restoreNodeTimeout?: number;\n\n        /**\n         * Determines how slaves are selected:\n         * RR: Select one alternately (Round-Robin).\n         * RANDOM: Select the node by random function.\n         * ORDER: Select the first node available unconditionally.\n         */\n        readonly selector?: \"RR\"|\"RANDOM\"|\"ORDER\";\n\n    };\n\n}\n"],"sourceRoot":"../.."}
##############################################
/src/driver/mysql/MysqlDriver.js.map:1:{"version":3,"sources":["../../src/driver/mysql/MysqlDriver.ts"],"names":[],"mappings":"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","file":"MysqlDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {MysqlConnectionOptions} from \"./MysqlConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {MysqlConnectionCredentialsOptions} from \"./MysqlConnectionCredentialsOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\n\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class MysqlDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Mysql underlying library.\n     */\n    mysql: any;\n\n    /**\n     * Connection pool.\n     * Used in non-replication mode.\n     */\n    pool: any;\n\n    /**\n     * Pool cluster used in replication mode.\n     */\n    poolCluster: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: MysqlConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n     * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        // numeric types\n        \"bit\",\n        \"int\",\n        \"integer\",          // synonym for int\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"float\",\n        \"double\",\n        \"double precision\", // synonym for double\n        \"real\",             // synonym for double\n        \"decimal\",\n        \"dec\",              // synonym for decimal\n        \"numeric\",          // synonym for decimal\n        \"fixed\",            // synonym for decimal\n        \"bool\",             // synonym for tinyint\n        \"boolean\",          // synonym for tinyint\n        // date and time types\n        \"date\",\n        \"datetime\",\n        \"timestamp\",\n        \"time\",\n        \"year\",\n        // string types\n        \"char\",\n        \"nchar\",            // synonym for national char\n        \"national char\",\n        \"varchar\",\n        \"nvarchar\",         // synonym for national varchar\n        \"national varchar\",\n        \"blob\",\n        \"text\",\n        \"tinyblob\",\n        \"tinytext\",\n        \"mediumblob\",\n        \"mediumtext\",\n        \"longblob\",\n        \"longtext\",\n        \"enum\",\n        \"set\",\n        \"binary\",\n        \"varbinary\",\n        // json data type\n        \"json\",\n        // spatial data types\n        \"geometry\",\n        \"point\",\n        \"linestring\",\n        \"polygon\",\n        \"multipoint\",\n        \"multilinestring\",\n        \"multipolygon\",\n        \"geometrycollection\"\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\n        \"geometry\",\n        \"point\",\n        \"linestring\",\n        \"polygon\",\n        \"multipoint\",\n        \"multilinestring\",\n        \"multipolygon\",\n        \"geometrycollection\"\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"varchar\",\n        \"nvarchar\",\n        \"binary\",\n        \"varbinary\"\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withWidthColumnTypes: ColumnType[] = [\n        \"bit\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"int\",\n        \"integer\",\n        \"bigint\"\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\",\n        \"time\",\n        \"datetime\",\n        \"timestamp\"\n    ];\n\n    /**\n     * Gets list of column data types that supports scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\"\n    ];\n\n    /**\n     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\n     */\n    unsignedAndZerofillTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"smallint\",\n        \"tinyint\",\n        \"mediumint\",\n        \"bigint\",\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\"\n    ];\n\n    /**\n     * ORM has special columns and we need to know what database column types should be for those columns.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDatePrecision: 6,\n        createDateDefault: \"CURRENT_TIMESTAMP(6)\",\n        updateDate: \"datetime\",\n        updateDatePrecision: 6,\n        updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\n        deleteDate: \"datetime\",\n        deleteDatePrecision: 6,\n        deleteDateNullable: true,\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationId: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"text\",\n        cacheResult: \"text\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"text\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"varchar\": { length: 255 },\n        \"nvarchar\": { length: 255 },\n        \"national varchar\": { length: 255 },\n        \"char\": { length: 1 },\n        \"binary\": { length: 1 },\n        \"varbinary\": { length: 255 },\n        \"decimal\": { precision: 10, scale: 0 },\n        \"dec\": { precision: 10, scale: 0 },\n        \"numeric\": { precision: 10, scale: 0 },\n        \"fixed\": { precision: 10, scale: 0 },\n        \"float\": { precision: 12 },\n        \"double\": { precision: 22 },\n        \"time\": { precision: 0 },\n        \"datetime\": { precision: 0 },\n        \"timestamp\": { precision: 0 },\n        \"bit\": { width: 1 },\n        \"int\": { width: 11 },\n        \"integer\": { width: 11 },\n        \"tinyint\": { width: 4 },\n        \"smallint\": { width: 6 },\n        \"mediumint\": { width: 9 },\n        \"bigint\": { width: 20 }\n    };\n\n\n    /**\n     * Max length allowed by MySQL for aliases.\n     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n     */\n    maxAliasLength = 63;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = {\n            legacySpatialSupport: true,\n            ...connection.options\n        } as MysqlConnectionOptions;\n        this.isReplicated = this.options.replication ? true : false;\n\n        // load mysql package\n        this.loadDependencies();\n\n        this.database = this.options.replication ? this.options.replication.master.database : this.options.database;\n\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\n        // todo: provide options to auto-create a database if it does not exist yet\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n\n        if (this.options.replication) {\n            this.poolCluster = this.mysql.createPoolCluster(this.options.replication);\n            this.options.replication.slaves.forEach((slave, index) => {\n                this.poolCluster.add(\"SLAVE\" + index, this.createConnectionOptions(this.options, slave));\n            });\n            this.poolCluster.add(\"MASTER\", this.createConnectionOptions(this.options, this.options.replication.master));\n\n        } else {\n            this.pool = await this.createPool(this.createConnectionOptions(this.options, this.options));\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.poolCluster && !this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\n\n        if (this.poolCluster) {\n            return new Promise<void>((ok, fail) => {\n                this.poolCluster.end((err: any) => err ? fail(err) : ok());\n                this.poolCluster = undefined;\n            });\n        }\n        if (this.pool) {\n            return new Promise<void>((ok, fail) => {\n                this.pool.end((err: any) => {\n                    if (err) return fail(err);\n                    this.pool = undefined;\n                    ok();\n                });\n            });\n        }\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\n        return new MysqlQueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            let value: any;\n            if (key.substr(0, 4) === \":...\") {\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (value instanceof Function) {\n                return value();\n\n            } else {\n                escapedParameters.push(value);\n                return \"?\";\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        return database ? `${database}.${tableName}` : tableName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDate(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n\n        } else if (columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") {\n            return \"\" + value;\n\n        } else if (columnMetadata.type === \"set\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"bool\" || columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        } else if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\")\n            && columnMetadata.enum\n            && !isNaN(value)\n            && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n            // convert to number if that exists in possible enum options\n            value = parseInt(value);\n        } else if (columnMetadata.type === \"set\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type: ColumnType, length?: number|string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\";\n\n        } else if (column.type === String) {\n            return \"varchar\";\n\n        } else if (column.type === Date) {\n            return \"datetime\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\";\n\n        } else if (column.type === Boolean) {\n            return \"tinyint\";\n\n        } else if (column.type === \"uuid\") {\n            return \"varchar\";\n\n        } else if (column.type === \"json\" && this.options.type === \"mariadb\") {\n            /*\n             * MariaDB implements this as a LONGTEXT rather, as the JSON data type contradicts the SQL standard,\n             * and MariaDB's benchmarks indicate that performance is at least equivalent.\n             *\n             * @see https://mariadb.com/kb/en/json-data-type/\n             */\n            return \"longtext\";\n\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n            return \"text\";\n\n        } else if (column.type === \"simple-enum\") {\n            return \"enum\";\n\n        } else if (column.type === \"double precision\" || column.type === \"real\") {\n            return \"double\";\n\n        } else if (column.type === \"dec\" || column.type === \"numeric\" || column.type === \"fixed\") {\n            return \"decimal\";\n\n        } else if (column.type === \"bool\" || column.type === \"boolean\") {\n            return \"tinyint\";\n\n        } else if (column.type === \"nvarchar\" || column.type === \"national varchar\") {\n            return \"varchar\";\n\n        } else if (column.type === \"nchar\" || column.type === \"national char\") {\n            return \"char\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") && defaultValue !== undefined) {\n            return `'${defaultValue}'`;\n        }\n\n        if ((columnMetadata.type === \"set\") && defaultValue !== undefined) {\n            return `'${DateUtils.simpleArrayToString(defaultValue)}'`;\n        }\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else if (defaultValue === null) {\n            return `NULL`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        /**\n         * fix https://github.com/typeorm/typeorm/issues/1139\n         */\n        if (column.generationStrategy === \"uuid\")\n            return \"36\";\n\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"national varchar\":\n                return \"255\";\n            case \"varbinary\":\n                return \"255\";\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if (column.width) {\n            type += `(${column.width})`;\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type += `(${column.precision})`;\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return new Promise<any>((ok, fail) => {\n            if (this.poolCluster) {\n                this.poolCluster.getConnection(\"MASTER\", (err: any, dbConnection: any) => {\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n                });\n\n            } else if (this.pool) {\n                this.pool.getConnection((err: any, dbConnection: any) => {\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n                });\n            } else {\n                fail(new Error(`Connection is not established with mysql database`));\n            }\n        });\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.poolCluster)\n            return this.obtainMasterConnection();\n\n        return new Promise<any>((ok, fail) => {\n            this.poolCluster.getConnection(\"SLAVE*\", (err: any, dbConnection: any) => {\n                err ? fail(err) : ok(dbConnection);\n            });\n        });\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value: any;\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult.insertId) {\n                value = insertResult.insertId;\n            // } else if (generatedColumn.generationStrategy === \"uuid\") {\n            //     console.log(\"getting db value:\", generatedColumn.databaseName);\n            //     value = generatedColumn.getEntityValue(uuidMap);\n            }\n\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            let columnMetadataLength = columnMetadata.length;\n            if (!columnMetadataLength && columnMetadata.generationStrategy === \"uuid\") { // fixing #3374\n                columnMetadataLength = this.getColumnLength(columnMetadata);\n            }\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadataLength\n                || tableColumn.width !== columnMetadata.width\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                || tableColumn.zerofill !== columnMetadata.zerofill\n                || tableColumn.unsigned !== columnMetadata.unsigned\n                || tableColumn.asExpression !== columnMetadata.asExpression\n                || tableColumn.generatedType !== columnMetadata.generatedType\n                // || tableColumn.comment !== columnMetadata.comment // todo\n                || !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default)\n                || (tableColumn.enum && columnMetadata.enum && !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + \"\")))\n                || tableColumn.onUpdate !== columnMetadata.onUpdate\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\n            /*\n             * Some frameworks (such as Jest) may mess up Node's require cache and provide garbage for the 'mysql' module\n             * if it was not installed. We check that the object we got actually contains something otherwise we treat\n             * it as if the `require` call failed.\n             *\n             * @see https://github.com/typeorm/typeorm/issues/1373\n             */\n            if (Object.keys(this.mysql).length === 0) {\n                throw new Error(\"'mysql' was found but it is empty. Falling back to 'mysql2'.\");\n            }\n        } catch (e) {\n            try {\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\n            }\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected createConnectionOptions(options: MysqlConnectionOptions, credentials: MysqlConnectionCredentialsOptions): Promise<any> {\n\n        credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n\n        // build connection options for the driver\n        return Object.assign({}, {\n            charset: options.charset,\n            timezone: options.timezone,\n            connectTimeout: options.connectTimeout,\n            insecureAuth: options.insecureAuth,\n            supportBigNumbers: options.supportBigNumbers !== undefined ? options.supportBigNumbers : true,\n            bigNumberStrings: options.bigNumberStrings !== undefined ? options.bigNumberStrings : true,\n            dateStrings: options.dateStrings,\n            debug: options.debug,\n            trace: options.trace,\n            multipleStatements: options.multipleStatements,\n            flags: options.flags\n        }, {\n            host: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            ssl: options.ssl\n        },\n        options.acquireTimeout === undefined\n          ? {}\n          : { acquireTimeout: options.acquireTimeout },\n        options.extra || {});\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected createPool(connectionOptions: any): Promise<any> {\n\n        // create a connection pool\n        const pool = this.mysql.createPool(connectionOptions);\n\n        // make sure connection is working fine\n        return new Promise<void>((ok, fail) => {\n            // (issue #610) we make first connection to database to make sure if connection credentials are wrong\n            // we give error before calling any other method that creates actual query runner\n            pool.getConnection((err: any, connection: any) => {\n                if (err)\n                    return pool.end(() => fail(err));\n\n                connection.release();\n                ok(pool);\n            });\n        });\n    }\n\n    /**\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\n     */\n    private prepareDbConnection(connection: any): any {\n        const { logger } = this.connection;\n        /*\n          Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\n          cause the hosting app to crash.\n         */\n        if (connection.listeners(\"error\").length === 0) {\n            connection.on(\"error\", (error: any) => logger.log(\"warn\", `MySQL connection raised an error. ${error}`));\n        }\n        return connection;\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    protected compareDefaultValues(columnMetadataValue: string, databaseValue: string): boolean {\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n\n        return columnMetadataValue === databaseValue;\n    }\n\n}\n"],"sourceRoot":"../.."}
