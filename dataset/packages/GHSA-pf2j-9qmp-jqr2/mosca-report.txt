<report_mosca>
 <Path>/src/browser/subscriber/Broadcaster.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -          this.queryRunner = queryRunner;

 Line: 14 -       * Broadcasts "BEFORE_INSERT" event.

 Line: 38 -                          queryRunner: _this.queryRunner,

 Line: 51 -       * Broadcasts "BEFORE_UPDATE" event.

 Line: 75 -                          queryRunner: _this.queryRunner,

 Line: 115 -                          queryRunner: _this.queryRunner,

 Line: 130 -       * Broadcasts "AFTER_INSERT" event.

 Line: 154 -                          queryRunner: _this.queryRunner,

 Line: 167 -       * Broadcasts "AFTER_UPDATE" event.

 Line: 191 -                          queryRunner: _this.queryRunner,

 Line: 231 -                          queryRunner: _this.queryRunner,

 Line: 261 -                      // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query

 Line: 284 -                              queryRunner: _this.queryRunner,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/connection/Connection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 225 -              var queryRunner, databases_1;

 Line: 229 -                          queryRunner = this.createQueryRunner("master");

 Line: 239 -                          return [4 /*yield*/, PromiseUtils.runInSequence(databases_1, function (database) { return queryRunner.clearDatabase(database); })];

 Line: 243 -                      case 3: return [4 /*yield*/, queryRunner.clearDatabase()];

 Line: 248 -                      case 6: return [4 /*yield*/, queryRunner.release()];

 Line: 372 -       * Executes raw SQL query and returns raw database results.

 Line: 374 -      Connection.prototype.query = function (query, parameters, queryRunner) {

 Line: 382 -                          if (queryRunner && queryRunner.isReleased)

 Line: 384 -                          usedQueryRunner = queryRunner || this.createQueryRunner("master");

 Line: 403 -       * Creates a new query builder that can be used to build a sql query.

 Line: 405 -      Connection.prototype.createQueryBuilder = function (entityOrRunner, alias, queryRunner) {

 Line: 410 -              return new SelectQueryBuilder(this, queryRunner)

 Line: 419 -       * Creates a query runner used for perform queries on a single database connection.

 Line: 420 -       * Using query runners you can control your queries to execute using single database connection and

 Line: 430 -          var queryRunner = this.driver.createQueryRunner(mode);

 Line: 433 -          return queryRunner;

 Line: 451 -          return new EntityManagerFactory().create(this, queryRunner);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/entity-manager/SqljsEntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -      function SqljsEntityManager(connection, queryRunner) {

 Line: 12 -          var _this = _super.call(this, connection, queryRunner) || this;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/entity-manager/EntityManagerFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -      EntityManagerFactory.prototype.create = function (connection, queryRunner) {

 Line: 18 -              return new SqljsEntityManager(connection, queryRunner);

 Line: 19 -          return new EntityManager(connection, queryRunner);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/entity-manager/EntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -      function EntityManager(connection, queryRunner) {

 Line: 43 -              this.queryRunner = queryRunner;

 Line: 54 -              var isolation, runInTransaction, queryRunner, result, err_1, rollbackError_1;

 Line: 69 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 74 -                          return [4 /*yield*/, queryRunner.startTransaction(isolation)];

 Line: 78 -                      case 3: return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 85 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 94 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 104 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 115 -       * Executes raw SQL query and returns raw database results.

 Line: 125 -       * Creates a new query builder that can be used to build a sql query.

 Line: 127 -      EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {

 Line: 129 -              return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);

 Line: 132 -              return this.connection.createQueryBuilder(entityClass || queryRunner || this.queryRunner);

 Line: 278 -       * Executes fast and efficient INSERT query.

 Line: 279 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 306 -       * Executes fast and efficient UPDATE query.

 Line: 339 -       * Executes fast and efficient DELETE query.

 Line: 372 -       * Executes fast and efficient DELETE query.

 Line: 405 -       * Executes fast and efficient DELETE query.

 Line: 489 -                  // if no ids passed, no need to execute a query - just return an empty array of values

 Line: 567 -              var metadata, queryRunner;

 Line: 572 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 576 -                          return [4 /*yield*/, queryRunner.clearTable(metadata.tablePath)];

 Line: 580 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 717 -       * This is used when entity manager is created with a single query runner,

 Line: 718 -       * and this single query runner needs to be released after job with entity manager is done.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/entity-manager/MongoEntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 28 -           * Gets query runner used to execute queries.

 Line: 44 -              var query, cursor;

 Line: 48 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 49 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 74 -              var query, cursor, _a, results, count;

 Line: 78 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 79 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 94 -                                  this.count(entityClassOrName, query),

 Line: 109 -              var metadata, query, objectIdInstance, cursor;

 Line: 114 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};

 Line: 116 -                          query["_id"] = {

 Line: 123 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 147 -              var objectIdInstance, id, findOneOptionsOrConditions, query, cursor, result;

 Line: 154 -                          query = this.convertFindOneOptionsOrConditionsToMongodbQuery(findOneOptionsOrConditions) || {};

 Line: 156 -                              query["_id"] = (id instanceof objectIdInstance) ? id : new objectIdInstance(id);

 Line: 158 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 178 -       * Executes fast and efficient INSERT query.

 Line: 179 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 217 -       * Executes fast and efficient UPDATE query.

 Line: 248 -       * Executes fast and efficient DELETE query.

 Line: 277 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 279 -      MongoEntityManager.prototype.createCursor = function (entityClassOrName, query) {

 Line: 281 -          return this.queryRunner.cursor(metadata.tableName, query);

 Line: 284 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 287 -      MongoEntityManager.prototype.createEntityCursor = function (entityClassOrName, query) {

 Line: 289 -          var cursor = this.createCursor(entityClassOrName, query);

 Line: 318 -       * Count number of matching documents in the db to a query.

 Line: 320 -      MongoEntityManager.prototype.count = function (entityClassOrName, query, options) {

 Line: 322 -          return this.queryRunner.count(metadata.tableName, query, options);

 Line: 343 -      MongoEntityManager.prototype.deleteMany = function (entityClassOrName, query, options) {

 Line: 345 -          return this.queryRunner.deleteMany(metadata.tableName, query, options);

 Line: 350 -      MongoEntityManager.prototype.deleteOne = function (entityClassOrName, query, options) {

 Line: 352 -          return this.queryRunner.deleteOne(metadata.tableName, query, options);

 Line: 357 -      MongoEntityManager.prototype.distinct = function (entityClassOrName, key, query, options) {

 Line: 359 -          return this.queryRunner.distinct(metadata.tableName, key, query, options);

 Line: 378 -      MongoEntityManager.prototype.findOneAndDelete = function (entityClassOrName, query, options) {

 Line: 380 -          return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);

 Line: 385 -      MongoEntityManager.prototype.findOneAndReplace = function (entityClassOrName, query, replacement, options) {

 Line: 387 -          return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);

 Line: 392 -      MongoEntityManager.prototype.findOneAndUpdate = function (entityClassOrName, query, update, options) {

 Line: 394 -          return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);

 Line: 512 -      MongoEntityManager.prototype.replaceOne = function (entityClassOrName, query, doc, options) {

 Line: 514 -          return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);

 Line: 530 -      MongoEntityManager.prototype.updateMany = function (entityClassOrName, query, update, options) {

 Line: 532 -          return this.queryRunner.updateMany(metadata.tableName, query, update, options);

 Line: 537 -      MongoEntityManager.prototype.updateOne = function (entityClassOrName, query, update, options) {

 Line: 539 -          return this.queryRunner.updateOne(metadata.tableName, query, update, options);

 Line: 545 -       * Converts FindManyOptions to mongodb query.

 Line: 559 -       * Converts FindOneOptions to mongodb query.

 Line: 600 -       * Ensures given id is an id for query.

 Line: 607 -                      query[column.databasePath] = columnValue;

 Line: 608 -                  return query;

 Line: 622 -          var queryRunner = this.queryRunner;

 Line: 634 -                      queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);

 Line: 644 -                      queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);

 Line: 660 -                      queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);

 Line: 672 -                      queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/persistence/SubjectExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 51 -          this.queryRunner = queryRunner;

 Line: 62 -       * Executes queries using given query runner.

 Line: 178 -       * Broadcasts "BEFORE_INSERT", "BEFORE_UPDATE", "BEFORE_REMOVE" events for all given subjects.

 Line: 196 -       * Broadcasts "AFTER_INSERT", "AFTER_UPDATE", "AFTER_REMOVE" events for all given subjects.

 Line: 309 -                                                                  subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it

 Line: 475 -                                          // here we execute our deletion query

 Line: 476 -                                          // we don't need to specify entities and set update entity to true since the only thing query builder

 Line: 488 -                                              // here we execute our deletion query

 Line: 489 -                                              // we don't need to specify entities and set update entity to true since the only thing query builder

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/persistence/tree/MaterializedPathSubjectExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -          this.queryRunner = queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/persistence/tree/NestedSetSubjectExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -          this.queryRunner = queryRunner;

 Line: 51 -                          return [4 /*yield*/, this.queryRunner.query("UPDATE " + tableName + " SET " +

 Line: 54 -                                  ("WHERE " + rightColumnName + " >= " + parentNsRight))];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/persistence/tree/ClosureSubjectExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -          this.queryRunner = queryRunner;

 Line: 83 -                          return [4 /*yield*/, this.queryRunner.query("INSERT INTO " + tableName + " (" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(", ") + ") " +

 Line: 84 -                                  ("SELECT " + ancestorColumnNames.join(", ") + ", " + childEntityIds1.join(", ") + " FROM " + tableName + " WHERE " + whereCondition), firstQueryParameters_1)];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/persistence/SubjectDatabaseEntityLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -          this.queryRunner = queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/persistence/EntityPersistExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -      function EntityPersistExecutor(connection, queryRunner, mode, target, entity, options) {

 Line: 21 -          this.queryRunner = queryRunner;

 Line: 40 -              var queryRunner, entities, entitiesInChunks, executors, executorsWithExecutableOperations, isTransactionStartedByUs, error_1, rollbackError_1;

 Line: 45 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 46 -                          // save data in the query runner - this is useful functionality to share data from outside of the world

 Line: 49 -                              queryRunner.data = this.options.data;

 Line: 129 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 142 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 153 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 164 -                          return [4 /*yield*/, queryRunner.release()];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/relations/RelationCount.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -  export function RelationCount(relation, alias, queryBuilderFactory) {

 Line: 13 -              queryBuilderFactory: queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/relations/RelationId.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -  export function RelationId(relation, alias, queryBuilderFactory) {

 Line: 13 -              queryBuilderFactory: queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/listeners/BeforeInsert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              type: EventListenerTypes.BEFORE_INSERT

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/listeners/AfterUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              type: EventListenerTypes.AFTER_UPDATE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/listeners/AfterInsert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              type: EventListenerTypes.AFTER_INSERT

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/listeners/BeforeUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              type: EventListenerTypes.BEFORE_UPDATE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/find-options/FindOptionsUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 52 -       * Applies give find many options to the given query builder.

 Line: 62 -       * Applies give find options to the given query builder.

 Line: 65 -          // if options are not set then simply return query builder. This is made for simplicity of usage.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/find-options/FindOperator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 60 -       * Gets SQL needs to be inserted into final query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/schema-builder/MongoSchemaBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -              var queryRunner, promises;

 Line: 35 -                          queryRunner = this.connection.driver.createQueryRunner();

 Line: 66 -       * Returns query to be executed by schema builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/schema-builder/RdbmsSchemaBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 143 -                          // its important to disable this mode despite the fact we are release query builder

 Line: 144 -                          // because there exist drivers which reuse same query runner. Also its important to disable

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationIdLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 207 -          // execute query

 Line: 243 -          // execute query

 Line: 279 -          // execute query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 46 -              queryBuilderFactory: relationCount.queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-count/RelationCountLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -      function RelationCountLoader(connection, queryRunner, relationCountAttributes) {

 Line: 7 -          this.queryRunner = queryRunner;

 Line: 39 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 49 -                                  // apply condition (custom query builder factory)

 Line: 79 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 94 -                                  // apply condition (custom query builder factory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/transformer/RawSqlResultsToEntityTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -      function RawSqlResultsToEntityTransformer(expressionMap, driver, rawRelationIdResults, rawRelationCountResults, queryRunner) {

 Line: 17 -          this.queryRunner = queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/QueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -  // todo: completely cover query builder with tests

 Line: 20 -  // todo: implement relation/entity loading and setting them into properties within a separate query

 Line: 30 -      function QueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 38 -              this.queryRunner = queryRunner;

 Line: 47 -           * Gets the main alias string used in this query builder.

 Line: 58 -       * Creates SELECT query and selects given data.

 Line: 76 -       * Creates INSERT query.

 Line: 87 -       * Creates UPDATE query and applies given update values.

 Line: 105 -       * Creates DELETE query.

 Line: 132 -       * Sets entity's relation with which this query builder gonna work.

 Line: 180 -          // set parent query builder parameters as well in sub-query mode

 Line: 191 -          // set parent query builder parameters as well in sub-query mode

 Line: 221 -          var _a = tslib_1.__read(this.getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 227 -       * Parameters in the query are escaped for the currently used driver.

 Line: 233 -       * Gets query to be executed with all parameters used in it.

 Line: 237 -          var query = this.getQuery();

 Line: 242 -       * Executes sql generated by query builder and returns raw database results.

 Line: 246 -              var _a, sql, parameters, queryRunner;

 Line: 251 -                          queryRunner = this.obtainQueryRunner();

 Line: 255 -                          return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 259 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 276 -       * Creates a completely new query builder.

 Line: 277 -       * Uses same query runner as current QueryBuilder.

 Line: 283 -       * Clones query builder as it is.

 Line: 284 -       * Note: it uses new query runner, if you want query builder that uses exactly same query runner,

 Line: 285 -       * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)

 Line: 286 -       * where queryBuilder is cloned QueryBuilder.

 Line: 307 -       * Sets or overrides query builder's QueryRunner.

 Line: 310 -          this.queryRunner = queryRunner;

 Line: 314 -       * Indicates if listeners and subscribers must be called before and after query execution.

 Line: 322 -       * If set to true the query will be wrapped into a transaction.

 Line: 356 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 420 -       * Creates "WHERE" expression.

 Line: 426 -              // Adds the global condition of "non-deleted" for the entity with delete date columns in select query.

 Line: 439 -                  return " WHERE " + (conditions.length ? "(" + conditions + ") AND" : "") + " " + condition;

 Line: 443 -              return this.expressionMap.extraAppendedAndWhereCondition ? " WHERE " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : "";

 Line: 445 -              return " WHERE (" + conditions + ") AND " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);

 Line: 446 -          return " WHERE " + conditions;

 Line: 469 -                          return "INSERTED." + name;

 Line: 531 -       * Creates "WHERE" expression and variables for the given "ids".

 Line: 648 -       * Creates a query builder used to execute sql queries inside this query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/JoinAttribute.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Stores all join attributes which will be used to build a JOIN query.

 Line: 10 -      function JoinAttribute(connection, queryExpressionMap, joinAttribute) {

 Line: 12 -          this.queryExpressionMap = queryExpressionMap;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/Brackets.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Allows to use brackets in WHERE expressions for better syntax.

 Line: 6 -       * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/UpdateQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -      function UpdateQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 28 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 36 -       * Gets generated sql query without parameters being replaced.

 Line: 45 -       * Executes sql generated by query builder and returns raw database results.

 Line: 49 -              var queryRunner, transactionStartedByUs, broadcastResult, declareSql, selectOutputSql, returningResultsEntityUpdator, _a, updateSql, parameters, updateResult, statements, result, broadcastResult, error_1, rollbackError_1;

 Line: 53 -                          queryRunner = this.obtainQueryRunner();

 Line: 58 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 59 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 67 -                          queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata, this.expressionMap.valuesSet);

 Line: 83 -                                  selectOutputSql = "SELECT * FROM @OutputTable";

 Line: 89 -                          return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(";\n\n"), parameters)];

 Line: 109 -                          queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 117 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 128 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 138 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 165 -       * Sets WHERE condition in the query builder.

 Line: 166 -       * If you had previously WHERE expression defined,

 Line: 167 -       * calling this function will override previously set WHERE conditions.

 Line: 180 -       * Adds new AND WHERE condition in the query builder.

 Line: 190 -       * Adds new OR WHERE condition in the query builder.

 Line: 200 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 206 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 212 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 234 -       * Sets ORDER BY condition in the query builder.

 Line: 260 -       * Adds ORDER BY condition in the query builder.

 Line: 281 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 301 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 312 -       * Creates UPDATE express used to perform insert query.

 Line: 329 -                  // todo: make this and other query builder to work with properly with tables without metadata

 Line: 348 -                      if (value instanceof Function) { // support for SQL expressions in update query

 Line: 406 -                  if (value instanceof Function) { // support for SQL expressions in update query

 Line: 434 -          // we re-write parameters this way because we want our "UPDATE ... SET" parameters to be first in the list of "nativeParameters"

 Line: 446 -          // generate and return sql update query

 Line: 448 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + returningExpression;

 Line: 451 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + returningExpression + whereExpression;

 Line: 454 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?

 Line: 458 -       * Creates "ORDER BY" part of SQL query.

 Line: 477 -       * Creates "LIMIT" parts of SQL query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationUpdater.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -          this.queryBuilder = queryBuilder;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/ReturningResultsEntityUpdator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -          this.queryRunner = queryRunner;

 Line: 18 -       * Updates entities with a special columns after updation query execution.

 Line: 81 -       * Updates entities with a special columns after insertion query execution.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-id/RelationIdLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -      function RelationIdLoader(connection, queryRunner, relationIdAttributes) {

 Line: 8 -          this.queryRunner = queryRunner;

 Line: 62 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 75 -                                  // apply condition (custom query builder factory)

 Line: 108 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 137 -                                  // apply condition (custom query builder factory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-id/RelationIdAttribute.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Stores all join relation id attributes which will be used to build a JOIN query.

 Line: 11 -          this.queryExpressionMap = queryExpressionMap;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 46 -              queryBuilderFactory: relationId.queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/DeleteQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -      function DeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 22 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 30 -       * Gets generated sql query without parameters being replaced.

 Line: 37 -       * Executes sql generated by query builder and returns raw database results.

 Line: 41 -              var _a, sql, parameters, queryRunner, transactionStartedByUs, broadcastResult, deleteResult, result, driver, broadcastResult, error_1, rollbackError_1;

 Line: 46 -                          queryRunner = this.obtainQueryRunner();

 Line: 51 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 52 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 60 -                          queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 68 -                          return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 71 -                          driver = queryRunner.connection.driver;

 Line: 89 -                          queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 97 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 108 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 118 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 138 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 148 -       * Sets WHERE condition in the query builder.

 Line: 149 -       * If you had previously WHERE expression defined,

 Line: 150 -       * calling this function will override previously set WHERE conditions.

 Line: 163 -       * Adds new AND WHERE condition in the query builder.

 Line: 173 -       * Adds new OR WHERE condition in the query builder.

 Line: 183 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 189 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 195 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 220 -       * Creates DELETE express used to perform query.

 Line: 227 -              return "DELETE FROM " + tableName + whereExpression + " RETURNING " + returningExpression;

 Line: 230 -              return "DELETE FROM " + tableName + " OUTPUT " + returningExpression + whereExpression;

 Line: 233 -              return "DELETE FROM " + tableName + whereExpression;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/SelectQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 38 -       * Gets generated sql query without parameters being replaced.

 Line: 58 -       * Creates a subquery - query that can be used inside other queries.

 Line: 67 -       * Creates SELECT query and selects given data.

 Line: 86 -       * Adds new selection to the SELECT query.

 Line: 120 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 130 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 160 -       * INNER JOINs and adds all selection properties to SELECT.

 Line: 171 -       * LEFT JOINs and adds all selection properties to SELECT.

 Line: 182 -       * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 195 -       * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 208 -       * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 221 -       * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 237 -      SelectQueryBuilder.prototype.loadRelationIdAndMap = function (mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {

 Line: 245 -          relationIdAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 260 -      SelectQueryBuilder.prototype.loadRelationCountAndMap = function (mapToProperty, relationName, aliasName, queryBuilderFactory) {

 Line: 265 -          relationCountAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 295 -       * Sets WHERE condition in the query builder.

 Line: 296 -       * If you had previously WHERE expression defined,

 Line: 297 -       * calling this function will override previously set WHERE conditions.

 Line: 310 -       * Adds new AND WHERE condition in the query builder.

 Line: 320 -       * Adds new OR WHERE condition in the query builder.

 Line: 330 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 341 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 352 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 363 -       * Sets HAVING condition in the query builder.

 Line: 375 -       * Adds new AND HAVING condition in the query builder.

 Line: 385 -       * Adds new OR HAVING condition in the query builder.

 Line: 395 -       * Sets GROUP BY condition in the query builder.

 Line: 409 -       * Adds GROUP BY condition in the query builder.

 Line: 416 -       * Sets ORDER BY condition in the query builder.

 Line: 446 -       * Adds ORDER BY condition in the query builder.

 Line: 465 -       * If you want to implement pagination, and you are having join in your query,

 Line: 477 -       * If you want to implement pagination, and you are having join in your query,

 Line: 520 -       * Gets first raw result returned by execution of generated query builder sql.

 Line: 533 -       * Gets all raw results returned by execution of generated query builder sql.

 Line: 537 -              var queryRunner, transactionStartedByUs, results, error_1, rollbackError_1;

 Line: 544 -                          queryRunner = this.obtainQueryRunner();

 Line: 549 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 550 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 559 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 570 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 580 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 591 -       * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 595 -              var queryRunner, transactionStartedByUs, results, error_2, rollbackError_2;

 Line: 599 -                          queryRunner = this.obtainQueryRunner();

 Line: 604 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 605 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 616 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 627 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 637 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 648 -       * Gets single entity returned by execution of generated query builder sql.

 Line: 678 -       * Gets entities returned by execution of generated query builder sql.

 Line: 697 -       * Gets count - number of entities selected by sql generated by this query builder.

 Line: 702 -              var queryRunner, transactionStartedByUs, results, error_3, rollbackError_3;

 Line: 708 -                          queryRunner = this.obtainQueryRunner();

 Line: 713 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 714 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 725 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 736 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 746 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 757 -       * Executes built SQL query and returns entities and overall entities count (without limitation).

 Line: 762 -              var queryRunner, transactionStartedByUs, entitiesAndRaw, count, results, error_4, rollbackError_4;

 Line: 768 -                          queryRunner = this.obtainQueryRunner();

 Line: 773 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 774 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 790 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 801 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 811 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 822 -       * Executes built SQL query and returns raw data stream.

 Line: 826 -              var _a, sql, parameters, queryRunner, transactionStartedByUs, releaseFn, results, error_5, rollbackError_5;

 Line: 833 -                          queryRunner = this.obtainQueryRunner();

 Line: 838 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 839 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 846 -                              if (queryRunner !== _this.queryRunner) // means we created our own query runner

 Line: 847 -                                  return queryRunner.release();

 Line: 850 -                          results = queryRunner.stream(sql, parameters, releaseFn, releaseFn);

 Line: 852 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 863 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 873 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 884 -       * Enables or disables query result caching.

 Line: 904 -       * Sets extra options that can be used to configure how query builder works.

 Line: 958 -       * Creates "SELECT FROM" part of SQL query.

 Line: 963 -              throw new Error("Cannot build query because main alias is not set (call qb#from method)");

 Line: 1009 -          // create a selection query

 Line: 1019 -          return select + selection + " FROM " + froms.join(", ") + lock;

 Line: 1022 -       * Creates select | select distinct part of SQL query.

 Line: 1028 -          var select = "SELECT ";

 Line: 1031 -              select = "SELECT DISTINCT ON (" + selectDistinctOnMap + ") ";

 Line: 1034 -              select = "SELECT DISTINCT ";

 Line: 1039 -       * Creates "JOIN" part of SQL query.

 Line: 1111 -       * Creates "GROUP BY" part of SQL query.

 Line: 1119 -       * Creates "ORDER BY" part of SQL query.

 Line: 1138 -       * Creates "LIMIT" and "OFFSET" parts of SQL query.

 Line: 1141 -          // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results

 Line: 1152 -              // have no effect on the query planner or on the order of the results returned.

 Line: 1156 -                  prefix = " ORDER BY (SELECT NULL)";

 Line: 1200 -       * Creates "LOCK" part of SQL query.

 Line: 1213 -                      return " FOR UPDATE";

 Line: 1223 -                      return " FOR UPDATE";

 Line: 1236 -       * Creates "HAVING" part of SQL query.

 Line: 1355 -       * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 1359 -              var metadata, relationIdLoader, relationCountLoader, relationIdMetadataTransformer, relationCountMetadataTransformer, rawResults, entities, _a, selects, orderBys_1, metadata_1, mainAliasName_1, querySelects, condition, parameters_1, ids, areAllNumbers, rawRelationIdResults, rawRelationCountResults, transformer, broadcastResult;

 Line: 1373 -                          relationIdLoader = new RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);

 Line: 1374 -                          relationCountLoader = new RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);

 Line: 1384 -                          querySelects = metadata_1.primaryColumns.map(function (primaryColumn) {

 Line: 1391 -                          return [4 /*yield*/, new SelectQueryBuilder(this.connection, queryRunner)

 Line: 1392 -                                  .select("DISTINCT " + querySelects.join(", "))

 Line: 1420 -                                  // fixes #190. if all numbers then its safe to perform query without parameter

 Line: 1452 -                          queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, this.expressionMap.mainAlias.metadata, entities);

 Line: 1509 -              var _a, sql, parameters, queryId, cacheOptions, savedQueryResultCacheOptions, results;

 Line: 1514 -                          queryId = sql + " -- PARAMETERS: " + JSON.stringify(parameters);

 Line: 1520 -                                  query: queryId,

 Line: 1522 -                              }, queryRunner)];

 Line: 1528 -                      case 2: return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 1534 -                                  query: queryId,

 Line: 1538 -                              }, savedQueryResultCacheOptions, queryRunner)];

 Line: 1563 -       * Creates a query builder used to execute sql queries inside this query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/InsertQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 30 -       * Gets generated sql query without parameters being replaced.

 Line: 37 -       * Executes sql generated by query builder and returns raw database results.

 Line: 41 -              var queryRunner, transactionStartedByUs, valueSets, broadcastResult_1, declareSql, selectOutputSql, returningResultsEntityUpdator, _a, insertSql, parameters, insertResult, statements, _b, broadcastResult_2, error_1, rollbackError_1;

 Line: 46 -                          queryRunner = this.obtainQueryRunner();

 Line: 51 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 52 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 62 -                              queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult_1, _this.expressionMap.mainAlias.metadata, valueSet);

 Line: 77 -                                  selectOutputSql = "SELECT * FROM @OutputTable";

 Line: 84 -                          return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(";\n\n"), parameters)];

 Line: 98 -                              queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult_2, _this.expressionMap.mainAlias.metadata, valueSet);

 Line: 107 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 120 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 130 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 184 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 231 -       * Creates INSERT express used to perform insert query.

 Line: 238 -          var query = "INSERT ";

 Line: 240 -              query += "" + (this.expressionMap.onIgnore ? " IGNORE " : "");

 Line: 242 -          query += "INTO " + tableName;

 Line: 245 -              query += "(" + columnsExpression + ")";

 Line: 249 -                  query += "()";

 Line: 253 -              query += " OUTPUT " + returningExpression;

 Line: 257 -              query += " VALUES " + valuesExpression;

 Line: 261 -                  query += " VALUES ()";

 Line: 264 -                  query += " DEFAULT VALUES";

 Line: 268 -              query += "" + (this.expressionMap.onIgnore ? " ON CONFLICT DO NOTHING " : "");

 Line: 269 -              query += "" + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "");

 Line: 272 -                  query += "" + (columns ? " ON CONFLICT " + conflict + " DO UPDATE SET " + columns : "");

 Line: 273 -                  query += "" + (overwrite ? " ON CONFLICT " + conflict + " DO UPDATE SET " + overwrite : "");

 Line: 279 -                  query += "" + (columns ? " ON DUPLICATE KEY UPDATE " + columns : "");

 Line: 280 -                  query += "" + (overwrite ? " ON DUPLICATE KEY UPDATE " + overwrite : "");

 Line: 285 -              query += " RETURNING " + returningExpression;

 Line: 287 -          return query;

 Line: 316 -       * Creates a columns string where values must be inserted to for INSERT INTO expression.

 Line: 368 -                          //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;

 Line: 374 -                          //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;

 Line: 398 -                          if (_this.connection.driver instanceof AbstractSqliteDriver || _this.connection.driver instanceof SapDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/SoftDeleteQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -      function SoftDeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 26 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 34 -       * Gets generated sql query without parameters being replaced.

 Line: 43 -       * Executes sql generated by query builder and returns raw database results.

 Line: 47 -              var queryRunner, transactionStartedByUs, broadcastResult, returningResultsEntityUpdator, _a, sql, parameters, updateResult, result, driver, broadcastResult, error_1, rollbackError_1;

 Line: 51 -                          queryRunner = this.obtainQueryRunner();

 Line: 56 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 57 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 65 -                          queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 80 -                          return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 83 -                          driver = queryRunner.connection.driver;

 Line: 101 -                          queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 109 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 120 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 130 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 150 -       * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.

 Line: 160 -       * Sets WHERE condition in the query builder.

 Line: 161 -       * If you had previously WHERE expression defined,

 Line: 162 -       * calling this function will override previously set WHERE conditions.

 Line: 175 -       * Adds new AND WHERE condition in the query builder.

 Line: 185 -       * Adds new OR WHERE condition in the query builder.

 Line: 195 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 201 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 207 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 229 -       * Sets ORDER BY condition in the query builder.

 Line: 255 -       * Adds ORDER BY condition in the query builder.

 Line: 276 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 296 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 307 -       * Creates UPDATE express used to perform insert query.

 Line: 327 -                  throw new Error("The queryType must be \"soft-delete\" or \"restore\"");

 Line: 336 -          // we re-write parameters this way because we want our "UPDATE ... SET" parameters to be first in the list of "nativeParameters"

 Line: 346 -          // generate and return sql update query

 Line: 348 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + returningExpression;

 Line: 351 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + returningExpression + whereExpression;

 Line: 354 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?

 Line: 358 -       * Creates "ORDER BY" part of SQL query.

 Line: 377 -       * Creates "LIMIT" parts of SQL query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationRemover.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -          this.queryBuilder = queryBuilder;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -       * Gets generated sql query without parameters being replaced.

 Line: 44 -                  if (!this.expressionMap.of) // todo: move this check before relation query builder creation?

 Line: 74 -                  if (!this.expressionMap.of) // todo: move this check before relation query builder creation?

 Line: 104 -                  if (!this.expressionMap.of) // todo: move this check before relation query builder creation?

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -      RelationLoader.prototype.load = function (relation, entityOrEntities, queryRunner) {

 Line: 19 -          if (queryRunner && queryRunner.isReleased)

 Line: 20 -              queryRunner = undefined; // get new one if already closed

 Line: 22 -              return this.loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner);

 Line: 25 -              return this.loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner);

 Line: 28 -              return this.loadManyToManyOwner(relation, entityOrEntities, queryRunner);

 Line: 31 -              return this.loadManyToManyNotOwner(relation, entityOrEntities, queryRunner);

 Line: 39 -       * example: SELECT category.id AS category_id, category.name AS category_name FROM category category

 Line: 40 -       *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1

 Line: 42 -      RelationLoader.prototype.loadManyToOneOrOneToOneOwner = function (relation, entityOrEntities, queryRunner) {

 Line: 75 -       * SELECT post

 Line: 76 -       * FROM post post

 Line: 77 -       * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]

 Line: 79 -      RelationLoader.prototype.loadOneToManyOrOneToOneNotOwner = function (relation, entityOrEntities, queryRunner) {

 Line: 107 -       * SELECT category

 Line: 108 -       * FROM category category

 Line: 113 -      RelationLoader.prototype.loadManyToManyOwner = function (relation, entityOrEntities, queryRunner) {

 Line: 138 -       * SELECT post

 Line: 139 -       * FROM post post

 Line: 144 -      RelationLoader.prototype.loadManyToManyNotOwner = function (relation, entityOrEntities, queryRunner) {

 Line: 170 -      RelationLoader.prototype.enableLazyLoad = function (relation, entity, queryRunner) {

 Line: 197 -                  var loader = relationLoader.load(relation, this, queryRunner).then(function (result) { return relation.isOneToOne || relation.isManyToOne ? result[0] : result; });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/QueryExpressionMap.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -   * Contains all properties of the QueryBuilder that needs to be build a final query.

 Line: 22 -           * All aliases (including main alias) used in the query.

 Line: 26 -           * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.

 Line: 30 -           * Data needs to be SELECT-ed.

 Line: 34 -           * Whether SELECT is DISTINCT.

 Line: 38 -           * SELECT DISTINCT ON query (postgres).

 Line: 46 -           * Optional on conflict statement used in insertion query in postgres.

 Line: 50 -           * Optional on ignore statement used in insertion query in databases.

 Line: 66 -           * WHERE queries.

 Line: 87 -           * Parameters used to be escaped in final query.

 Line: 108 -           * Indicates if query builder creates a subquery.

 Line: 113 -           * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,

 Line: 114 -           * but user can use them in WHERE expressions.

 Line: 118 -           * Indicates if query result cache is enabled or not.

 Line: 127 -           * Used in INSERT query.

 Line: 136 -           * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 140 -           * Indicates if listeners and subscribers must be called before and after query execution.

 Line: 144 -           * Indicates if query must be wrapped into transaction.

 Line: 232 -           * Gets relation metadata of the relation this query builder works with.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 269 -   * Creates a new query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/ReturningStatementNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Thrown when user tries to build a query with RETURNING / OUTPUT statement,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/UpdateValuesMissingError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -          _this.message = "Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify updated values.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/LimitOnUpdateNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.

 Line: 10 -          _this.message = "Your database does not support LIMIT on UPDATE statements.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/InsertValuesMissingError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -          _this.message = "Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/QueryRunnerProviderAlreadyReleasedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Thrown when consumer tries to use query runner from query runner provider after it was released.

 Line: 10 -          _this.message = "Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/OptimisticLockCanNotBeUsedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Thrown when an optimistic lock cannot be used in query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/OffsetWithoutLimitNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.

 Line: 10 -          _this.message = "RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/QueryFailedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * Thrown when query execution has failed.

 Line: 14 -          ObjectUtils.assign(_this, tslib_1.__assign({}, driverError, { name: "QueryFailedError", query: query, parameters: parameters || [] }));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/cockroachdb/CockroachQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 78 -       * You cannot use query runner methods once its released.

 Line: 186 -       * Executes a given SQL query.

 Line: 193 -              var databaseConnection, queryStartTime_1, err_1;

 Line: 203 -                          queryStartTime_1 = +new Date();

 Line: 206 -                                  _this.queries.push({ query: query, parameters: parameters });

 Line: 209 -                              var queryEndTime = +new Date();

 Line: 210 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 211 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 212 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 215 -                                      _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 220 -                                      case "DELETE":

 Line: 221 -                                          // for DELETE query additionally return number of affected rows

 Line: 302 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM \"pg_database\" WHERE \"datname\" = '" + database + "'")];

 Line: 318 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '" + schema + "'")];

 Line: 336 -                          sql = "SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName;

 Line: 355 -                          sql = "SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName + " AND \"column_name\" = '" + columnName + "'";

 Line: 472 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 473 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 1691 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1733 -                          selectViewDropsQuery = "SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" " +

 Line: 1734 -                              ("FROM \"pg_views\" WHERE \"schemaname\" IN (" + schemaNamesString + ")");

 Line: 1741 -                          selectDropsQuery = "SELECT 'DROP TABLE IF EXISTS \"' || table_schema || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"information_schema\".\"tables\" WHERE \"table_schema\" IN (" + schemaNamesString + ")";

 Line: 1748 -                          selectSequenceDropsQuery = "SELECT 'DROP SEQUENCE \"' || sequence_schema || '\".\"' || sequence_name || '\";' as \"query\" FROM \"information_schema\".\"sequences\" WHERE \"sequence_schema\" IN (" + schemaNamesString + ")";

 Line: 1782 -              var hasTable, currentSchemaQuery, currentSchema, viewsCondition, query, dbViews;

 Line: 1791 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 1803 -                          query = "SELECT \"t\".*, \"v\".\"check_option\" FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " \"t\" " +

 Line: 1804 -                              ("INNER JOIN \"information_schema\".\"views\" \"v\" ON \"v\".\"table_schema\" = \"t\".\"schema\" AND \"v\".\"table_name\" = \"t\".\"name\" WHERE \"t\".\"type\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 1832 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 1844 -                          tablesSql = "SELECT * FROM \"information_schema\".\"tables\" WHERE " + tablesCondition;

 Line: 1845 -                          columnsSql = "SELECT * FROM \"information_schema\".\"columns\" WHERE \"is_hidden\" = 'NO' AND " + tablesCondition;

 Line: 1854 -                          constraintsSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", " +

 Line: 1857 -                              "FROM \"pg_constraint\" \"cnst\" " +

 Line: 1861 -                              ("WHERE \"t\".\"relkind\" = 'r' AND (" + constraintsCondition + ")");

 Line: 1862 -                          indicesSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", " +

 Line: 1865 -                              "FROM \"pg_class\" \"t\" " +

 Line: 1872 -                              ("WHERE \"t\".\"relkind\" = 'r' AND \"cnst\".\"contype\" IS NULL AND (" + constraintsCondition + ")");

 Line: 1881 -                          foreignKeysSql = "SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", " +

 Line: 1883 -                              "FROM ( " +

 Line: 1884 -                              "SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", \"cl\".\"relname\", " +

 Line: 1887 -                              "FROM \"pg_class\" \"cl\" " +

 Line: 1890 -                              ("WHERE \"con1\".\"contype\" = 'f' AND (" + foreignKeysCondition + ") ") +

 Line: 2119 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 2121 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 2158 -              var currentSchemaQuery, currentSchema, splittedName, schema, name, expression, _a, query, parameters;

 Line: 2161 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2177 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2194 -              var currentSchemaQuery, currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;

 Line: 2197 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2215 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2227 -          return new Query("CREATE INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 2288 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 2290 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 2336 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/cockroachdb/CockroachDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -           * We store all created query runners because we need to release them.

 Line: 246 -       * Creates a query runner used to execute database queries.

 Line: 328 -       * and an array of parameter names to be passed to a query.

 Line: 512 -       * Creates generated map of values generated or returned by database after INSERT query.

 Line: 596 -       * Loads postgres query stream package.

 Line: 668 -                      case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/oracle/OracleDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 252 -       * Creates a query runner used to execute database queries.

 Line: 260 -       * and an array of parameter names to be passed to a query.

 Line: 514 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/oracle/OracleQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -       * You cannot use query runner methods once its released.

 Line: 148 -       * Executes a given SQL query.

 Line: 155 -              var queryStartTime_1, handler, executionOptions, databaseConnection, err_1;

 Line: 162 -                          queryStartTime_1 = +new Date();

 Line: 166 -                              var queryEndTime = +new Date();

 Line: 167 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 168 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 169 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 171 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 251 -                          sql = "SELECT \"TABLE_NAME\" FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" = '" + tableName + "'";

 Line: 270 -                          sql = "SELECT \"COLUMN_NAME\" FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" = '" + tableName + "' AND \"COLUMN_NAME\" = '" + columnName + "'";

 Line: 349 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 350 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 409 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 1526 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1555 -                          dropViewsQuery = "SELECT 'DROP VIEW \"' || VIEW_NAME || '\"' AS \"query\" FROM \"USER_VIEWS\"";

 Line: 1562 -                          dropTablesQuery = "SELECT 'DROP TABLE \"' || TABLE_NAME || '\" CASCADE CONSTRAINTS' AS \"query\" FROM \"USER_TABLES\"";

 Line: 1596 -              var hasTable, viewNamesString, query, dbViews;

 Line: 1605 -                          query = "SELECT \"T\".* FROM \"" + this.getTypeormMetadataTableName() + "\" \"T\" INNER JOIN \"USER_VIEWS\" \"V\" ON \"V\".\"VIEW_NAME\" = \"T\".\"name\" WHERE \"T\".\"type\" = 'VIEW'";

 Line: 1607 -                              query += " AND \"T\".\"name\" IN (" + viewNamesString + ")";

 Line: 1635 -                          tablesSql = "SELECT * FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" IN (" + tableNamesString + ")";

 Line: 1636 -                          columnsSql = "SELECT * FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" IN (" + tableNamesString + ")";

 Line: 1637 -                          indicesSql = "SELECT \"IND\".\"INDEX_NAME\", \"IND\".\"TABLE_NAME\", \"IND\".\"UNIQUENESS\", " +

 Line: 1639 -                              "FROM \"USER_INDEXES\" \"IND\" " +

 Line: 1642 -                              ("WHERE \"IND\".\"TABLE_NAME\" IN (" + tableNamesString + ") AND \"CON\".\"CONSTRAINT_NAME\" IS NULL ") +

 Line: 1644 -                          foreignKeysSql = "SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"REF_COL\".\"TABLE_NAME\" AS \"REFERENCED_TABLE_NAME\", " +

 Line: 1645 -                              "\"REF_COL\".\"COLUMN_NAME\" AS \"REFERENCED_COLUMN_NAME\", \"C\".\"DELETE_RULE\" AS \"ON_DELETE\" " +

 Line: 1646 -                              "FROM \"USER_CONSTRAINTS\" \"C\" " +

 Line: 1649 -                              ("WHERE \"C\".\"TABLE_NAME\" IN (" + tableNamesString + ") AND \"C\".\"CONSTRAINT_TYPE\" = 'R'");

 Line: 1650 -                          constraintsSql = "SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"CONSTRAINT_TYPE\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"C\".\"SEARCH_CONDITION\" " +

 Line: 1651 -                              "FROM \"USER_CONSTRAINTS\" \"C\" " +

 Line: 1653 -                              ("WHERE \"C\".\"TABLE_NAME\" IN (" + tableNamesString + ") AND \"C\".\"CONSTRAINT_TYPE\" IN ('C', 'U', 'P') AND \"C\".\"GENERATED\" = 'USER NAME'");

 Line: 1752 -                                          onDelete: dbForeignKey["ON_DELETE"],

 Line: 1812 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 1831 -          var query = ifExist ? "DROP TABLE IF EXISTS \"" + tableName + "\"" : "DROP TABLE \"" + tableName + "\"";

 Line: 1849 -              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1869 -              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1939 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 1950 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/postgres/PostgresQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 70 -       * You cannot use query runner methods once its released.

 Line: 146 -       * Executes a given SQL query.

 Line: 153 -              var databaseConnection, queryStartTime_1, err_1;

 Line: 163 -                          queryStartTime_1 = +new Date();

 Line: 167 -                              var queryEndTime = +new Date();

 Line: 168 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 169 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 170 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 172 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 177 -                                      case "DELETE":

 Line: 178 -                                      case "UPDATE":

 Line: 179 -                                          // for UPDATE and DELETE query additionally return number of affected rows

 Line: 270 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '" + schema + "'")];

 Line: 288 -                          sql = "SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName;

 Line: 307 -                          sql = "SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName + " AND \"column_name\" = '" + columnName + "'";

 Line: 429 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 430 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 1771 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1813 -                          selectViewDropsQuery = "SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" " +

 Line: 1814 -                              ("FROM \"pg_views\" WHERE \"schemaname\" IN (" + schemaNamesString + ") AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')");

 Line: 1821 -                          selectTableDropsQuery = "SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as \"query\" FROM \"pg_tables\" WHERE \"schemaname\" IN (" + schemaNamesString + ") AND \"tablename\" NOT IN ('spatial_ref_sys')";

 Line: 1858 -              var hasTable, currentSchemaQuery, currentSchema, viewsCondition, query, dbViews;

 Line: 1867 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 1879 -                          query = "SELECT \"t\".*, \"v\".\"check_option\" FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " \"t\" " +

 Line: 1880 -                              ("INNER JOIN \"information_schema\".\"views\" \"v\" ON \"v\".\"table_schema\" = \"t\".\"schema\" AND \"v\".\"table_name\" = \"t\".\"name\" WHERE \"t\".\"type\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 1908 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 1920 -                          tablesSql = "SELECT * FROM \"information_schema\".\"tables\" WHERE " + tablesCondition;

 Line: 1921 -                          columnsSql = "SELECT *, ('\"' || \"udt_schema\" || '\".\"' || \"udt_name\" || '\"')::\"regtype\" AS \"regtype\" FROM \"information_schema\".\"columns\" WHERE " + tablesCondition;

 Line: 1930 -                          constraintsSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", " +

 Line: 1933 -                              "FROM \"pg_constraint\" \"cnst\" " +

 Line: 1937 -                              ("WHERE \"t\".\"relkind\" = 'r' AND (" + constraintsCondition + ")");

 Line: 1938 -                          indicesSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", " +

 Line: 1941 -                              "FROM \"pg_class\" \"t\" " +

 Line: 1948 -                              ("WHERE \"t\".\"relkind\" = 'r' AND \"cnst\".\"contype\" IS NULL AND (" + constraintsCondition + ")");

 Line: 1957 -                          foreignKeysSql = "SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", " +

 Line: 1960 -                              "FROM ( " +

 Line: 1961 -                              "SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", " +

 Line: 1966 -                              "FROM \"pg_class\" \"cl\" " +

 Line: 1969 -                              ("WHERE \"con1\".\"contype\" = 'f' AND (" + foreignKeysCondition + ") ") +

 Line: 2044 -                                                                  sql = "SELECT \"e\".\"enumlabel\" AS \"value\" FROM \"pg_enum\" \"e\" " +

 Line: 2047 -                                                                      ("WHERE \"n\".\"nspname\" = '" + dbTable["table_schema"] + "' AND \"t\".\"typname\" = '" + this.buildEnumName(table, tableColumn.name, false, true) + "'");

 Line: 2055 -                                                                  geometryColumnSql = "SELECT * FROM (\n                        SELECT\n                          \"f_table_schema\" \"table_schema\",\n                          \"f_table_name\" \"table_name\",\n                          \"f_geometry_column\" \"column_name\",\n                          \"srid\",\n                          \"type\"\n                        FROM \"geometry_columns\"\n                      ) AS _\n                      WHERE (" + tablesCondition + ") AND \"column_name\" = '" + tableColumn.name + "' AND \"table_name\" = '" + table.name + "'";

 Line: 2064 -                                                                  geographyColumnSql = "SELECT * FROM (\n                        SELECT\n                          \"f_table_schema\" \"table_schema\",\n                          \"f_table_name\" \"table_name\",\n                          \"f_geography_column\" \"column_name\",\n                          \"srid\",\n                          \"type\"\n                        FROM \"geography_columns\"\n                      ) AS _\n                      WHERE (" + tablesCondition + ") AND \"column_name\" = '" + tableColumn.name + "' AND \"table_name\" = '" + table.name + "'";

 Line: 2236 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 2238 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 2272 -              var currentSchemaQuery, currentSchema, splittedName, schema, name, expression, _a, query, parameters;

 Line: 2275 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2291 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2308 -              var currentSchemaQuery, currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;

 Line: 2311 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2329 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2352 -                          selectDropsQuery = "SELECT 'DROP TYPE IF EXISTS \"' || n.nspname || '\".\"' || t.typname || '\" CASCADE;' as \"query\" FROM \"pg_type\" \"t\" " +

 Line: 2355 -                              ("WHERE \"n\".\"nspname\" IN (" + schemaNames + ") GROUP BY \"n\".\"nspname\", \"t\".\"typname\"");

 Line: 2378 -                          sql = "SELECT \"n\".\"nspname\", \"t\".\"typname\" FROM \"pg_type\" \"t\" " +

 Line: 2380 -                              ("WHERE \"n\".\"nspname\" = " + schema + " AND \"t\".\"typname\" = '" + enumName + "'");

 Line: 2411 -          return new Query("CREATE " + (index.isUnique ? "UNIQUE " : "") + "INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " " + (index.isSpatial ? "USING GiST " : "") + "(" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 2486 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 2488 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 2550 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2559 -                          return [4 /*yield*/, this.query("SELECT \"udt_schema\", \"udt_name\" " +

 Line: 2560 -                                  ("FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = '" + schema + "' AND \"table_name\" = '" + name + "' AND \"column_name\"='" + column.name + "'"))];

 Line: 2600 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/postgres/PostgresDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -           * We store all created query runners because we need to release them.

 Line: 413 -       * Creates a query runner used to execute database queries.

 Line: 574 -       * and an array of parameter names to be passed to a query.

 Line: 797 -       * Creates generated map of values generated or returned by database after INSERT query.

 Line: 877 -       * Loads postgres query stream package.

 Line: 949 -                      case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];

 Line: 960 -       * Executes given query.

 Line: 962 -      PostgresDriver.prototype.executeQuery = function (connection, query) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqljs/SqljsQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -       * Executes a given SQL query.

 Line: 50 -              var databaseConnection, queryStartTime, statement, maxQueryExecutionTime, queryEndTime, queryExecutionTime, result;

 Line: 54 -                  queryStartTime = +new Date();

 Line: 59 -                      queryEndTime = +new Date();

 Line: 60 -                      queryExecutionTime = queryEndTime - queryStartTime;

 Line: 61 -                      if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 62 -                          this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 74 -                      this.driver.connection.logger.logQueryError(e, query, parameters, this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqljs/SqljsDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -       * Creates a query runner used to execute database queries.

 Line: 223 -       * Creates generated map of values generated or returned by database after INSERT query.

 Line: 230 -                  var query = "SELECT last_insert_rowid()";

 Line: 237 -                      _this.connection.logger.logQueryError(e, query, []);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/expo/ExpoDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 45 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/expo/ExpoQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 81 -       * Executes a given SQL query.

 Line: 88 -              var databaseConnection, queryStartTime;

 Line: 96 -                          queryStartTime = +new Date();

 Line: 106 -                                  var queryEndTime = +new Date();

 Line: 107 -                                  var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 108 -                                  if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {

 Line: 109 -                                      _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 111 -                                  // return id of inserted row, if query was insert statement.

 Line: 112 -                                  if (query.substr(0, 11) === "INSERT INTO") {

 Line: 123 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/aurora-data-api/AuroraDataApiDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 286 -       * Creates a query runner used to execute database queries.

 Line: 294 -       * and an array of parameter names to be passed to a query.

 Line: 568 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/aurora-data-api/AuroraDataApiConnection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -      function AuroraDataApiConnection(options, queryRunner) {

 Line: 9 -          _this.queryRunnter = queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 46 -       * You cannot use query runner methods once its released.

 Line: 114 -       * Executes a raw SQL query.

 Line: 196 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM `INFORMATION_SCHEMA`.`SCHEMATA` WHERE `SCHEMA_NAME` = '" + database + "'")];

 Line: 224 -                          sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "'";

 Line: 244 -                          sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "' AND `COLUMN_NAME` = '" + columnName + "'";

 Line: 338 -                          // createTable does not need separate method to create indices, because it create indices in the same query with table creation.

 Line: 340 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 341 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 505 -                                  up += " ON DELETE " + foreignKey.onDelete;

 Line: 507 -                                  up += " ON UPDATE " + foreignKey.onUpdate;

 Line: 511 -                                  down += " ON DELETE " + foreignKey.onDelete;

 Line: 513 -                                  down += " ON UPDATE " + foreignKey.onUpdate;

 Line: 740 -                                      up += " ON DELETE " + foreignKey.onDelete;

 Line: 742 -                                      up += " ON UPDATE " + foreignKey.onUpdate;

 Line: 746 -                                      down += " ON DELETE " + foreignKey.onDelete;

 Line: 748 -                                      down += " ON UPDATE " + foreignKey.onUpdate;

 Line: 1413 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1454 -                          selectViewDropsQuery = "SELECT concat('DROP VIEW IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`VIEWS` WHERE `TABLE_SCHEMA` = '" + dbName + "'";

 Line: 1462 -                          dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA` = '" + dbName + "'";

 Line: 1509 -                      case 0: return [4 /*yield*/, this.query("SELECT DATABASE() AS `db_name`")];

 Line: 1519 -              var hasTable, currentDatabase, viewsCondition, query, dbViews;

 Line: 1539 -                          query = "SELECT `t`.*, `v`.`check_option` FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " `t` " +

 Line: 1540 -                              ("INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 1579 -                          tablesSql = "SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE " + tablesCondition;

 Line: 1580 -                          columnsSql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE " + tablesCondition;

 Line: 1581 -                          primaryKeySql = "SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (" + tablesCondition + ")";

 Line: 1582 -                          collationsSql = "SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`";

 Line: 1591 -                          indicesSql = "SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` " +

 Line: 1593 -                              ("WHERE (" + indicesCondition + ") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL");

 Line: 1602 -                          foreignKeysSql = "SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, " +

 Line: 1603 -                              "`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` " +

 Line: 1604 -                              "FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` " +

 Line: 1606 -                              "WHERE " + foreignKeysCondition;

 Line: 1729 -                                              onDelete: dbForeignKey["ON_DELETE"],

 Line: 1730 -                                              onUpdate: dbForeignKey["ON_UPDATE"]

 Line: 1821 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 1823 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 1851 -              var currentDatabase, expression, _a, query, parameters;

 Line: 1862 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1879 -              var currentDatabase, viewName, qb, _a, query, parameters;

 Line: 1892 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1941 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 1943 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 1968 -       * Builds a part of query to create/change a column.

 Line: 2007 -              c += " ON UPDATE " + column.onUpdate;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/mongodb/MongoQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -           * Indicates if connection for this query runner is released.

 Line: 12 -           * Once its released, query runner cannot run queries anymore.

 Line: 13 -           * Always false for mongodb since mongodb has a single query executor instance.

 Line: 17 -           * Indicates if transaction is active in this query executor.

 Line: 34 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 36 -      MongoQueryRunner.prototype.cursor = function (collectionName, query) {

 Line: 59 -       * Count number of matching documents in the db to a query.

 Line: 61 -      MongoQueryRunner.prototype.count = function (collectionName, query, options) {

 Line: 101 -      MongoQueryRunner.prototype.deleteMany = function (collectionName, query, options) {

 Line: 114 -      MongoQueryRunner.prototype.deleteOne = function (collectionName, query, options) {

 Line: 127 -      MongoQueryRunner.prototype.distinct = function (collectionName, key, query, options) {

 Line: 131 -                      case 0: return [4 /*yield*/, this.getCollection(collectionName).distinct(key, query, options)];

 Line: 166 -      MongoQueryRunner.prototype.findOneAndDelete = function (collectionName, query, options) {

 Line: 179 -      MongoQueryRunner.prototype.findOneAndReplace = function (collectionName, query, replacement, options) {

 Line: 192 -      MongoQueryRunner.prototype.findOneAndUpdate = function (collectionName, query, update, options) {

 Line: 393 -      MongoQueryRunner.prototype.replaceOne = function (collectionName, query, doc, options) {

 Line: 425 -      MongoQueryRunner.prototype.updateMany = function (collectionName, query, update, options) {

 Line: 438 -      MongoQueryRunner.prototype.updateOne = function (collectionName, query, update, options) {

 Line: 519 -       * Executes a given SQL query.

 Line: 522 -          throw new Error("Executing SQL query is not supported by MongoDB driver.");

 Line: 1072 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 1073 -       * instead they will be memorized into a special variable inside query runner.

 Line: 1080 -       * Disables special query runner mode in which sql queries won't be executed

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/mongodb/MongoDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 193 -       * Creates a query runner used to execute database queries.

 Line: 201 -       * and an array of parameter names to be passed to a query.

 Line: 282 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlite-abstract/AbstractSqliteDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 253 -       * and an array of parameter names to be passed to a query.

 Line: 412 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 37 -       * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.

 Line: 173 -                          sql = "SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" = '" + tableName + "'";

 Line: 1194 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1200 -                      case 0: return [4 /*yield*/, this.query("DELETE FROM \"" + tableName + "\"")];

 Line: 1226 -                          selectViewDropsQuery = "SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'";

 Line: 1233 -                          selectTableDropsQuery = "SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'";

 Line: 1271 -              var hasTable, viewNamesString, query, dbViews;

 Line: 1280 -                          query = "SELECT \"t\".* FROM \"" + this.getTypeormMetadataTableName() + "\" \"t\" INNER JOIN \"sqlite_master\" s ON \"s\".\"name\" = \"t\".\"name\" AND \"s\".\"type\" = 'view' WHERE \"t\".\"type\" = 'VIEW'";

 Line: 1282 -                              query += " AND \"t\".\"name\" IN (" + viewNamesString + ")";

 Line: 1310 -                          return [4 /*yield*/, this.query("SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" IN (" + tableNamesString + ")")];

 Line: 1313 -                          return [4 /*yield*/, this.query("SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'index' AND \"tbl_name\" IN (" + tableNamesString + ")")];

 Line: 1455 -                                                              condition = /WHERE (.*)/.exec(indexDef["sql"]);

 Line: 1532 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 1534 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 1555 -          var query = ifExist ? "DROP TABLE IF EXISTS \"" + tableName + "\"" : "DROP TABLE \"" + tableName + "\"";

 Line: 1572 -              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1592 -              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1600 -          return new Query("CREATE " + (index.isUnique ? "UNIQUE " : "") + "INDEX \"" + index.name + "\" ON \"" + table.name + "\" (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 1610 -       * Builds a query for create column.

 Line: 1668 -                              upQueries.push(new Query("INSERT INTO \"" + newTable.name + "\"(" + newColumnNames + ") SELECT " + oldColumnNames + " FROM \"" + oldTable.name + "\""));

 Line: 1669 -                              downQueries.push(new Query("INSERT INTO \"" + oldTable.name + "\"(" + oldColumnNames + ") SELECT " + newColumnNames + " FROM \"" + newTable.name + "\""));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlserver/MssqlParameter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1 -   * Sql server driver requires parameter types to be specified fo input parameters used in the query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlserver/SqlServerDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 263 -       * Creates a query runner used to execute database queries.

 Line: 271 -       * and an array of parameter names to be passed to a query.

 Line: 517 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlserver/SqlServerQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -           * Last executed query in a transaction.

 Line: 35 -           * that's why we store last executed query promise to wait it when we execute next query.

 Line: 58 -       * You cannot use query runner methods once its released.

 Line: 161 -       * Executes a given SQL query.

 Line: 182 -                              var pool, request_1, queryStartTime_1, err_1;

 Line: 209 -                                          queryStartTime_1 = +new Date();

 Line: 213 -                                              var queryEndTime = +new Date();

 Line: 214 -                                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 215 -                                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 216 -                                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 227 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 231 -                                              var queryType = query.slice(0, query.indexOf(" "));

 Line: 233 -                                                  case "DELETE":

 Line: 234 -                                                      // for DELETE query additionally return number of affected rows

 Line: 313 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 358 -              var query, results;

 Line: 362 -                          query = database ? "SELECT * FROM \"" + database + "\".\"sys\".\"schema\"" : "SELECT * FROM \"sys\".\"schemas\"";

 Line: 379 -                      case 0: return [4 /*yield*/, this.query("SELECT DB_ID('" + database + "') as \"db_id\"")];

 Line: 396 -                      case 0: return [4 /*yield*/, this.query("SELECT SCHEMA_ID('" + schema + "') as \"schema_id\"")];

 Line: 416 -                          sql = "SELECT * FROM \"" + parsedTableName.database + "\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '" + parsedTableName.name + "' AND \"TABLE_SCHEMA\" = " + schema;

 Line: 436 -                          sql = "SELECT * FROM \"" + parsedTableName.database + "\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '" + parsedTableName.name + "' AND \"COLUMN_NAME\" = '" + columnName + "' AND \"TABLE_SCHEMA\" = " + schema;

 Line: 586 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 587 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 648 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 1838 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1876 -                              ? "SELECT * FROM \"" + database + "\".\"INFORMATION_SCHEMA\".\"VIEWS\""

 Line: 1877 -                              : "SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"";

 Line: 1889 -                              ? "SELECT * FROM \"" + database + "\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'"

 Line: 1890 -                              : "SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'";

 Line: 1900 -                                              dropForeignKeySql = "SELECT 'ALTER TABLE \"" + tablesResult["TABLE_CATALOG"] + "\".\"' + OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\", DB_ID('" + tablesResult["TABLE_CATALOG"] + "')) + '\".\"' + OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('" + tablesResult["TABLE_CATALOG"] + "')) + '\" " +

 Line: 1901 -                                                  ("DROP CONSTRAINT \"' + \"fk\".\"name\" + '\"' as \"query\" FROM \"" + tablesResult["TABLE_CATALOG"] + "\".\"sys\".\"foreign_keys\" AS \"fk\" ") +

 Line: 1902 -                                                  ("WHERE \"fk\".\"referenced_object_id\" = OBJECT_ID('\"" + tablesResult["TABLE_CATALOG"] + "\".\"" + tablesResult["TABLE_SCHEMA"] + "\".\"" + tablesResult["TABLE_NAME"] + "\"')");

 Line: 1955 -                      case 0: return [4 /*yield*/, this.query("SELECT DB_NAME() AS \"db_name\"")];

 Line: 1971 -                      case 0: return [4 /*yield*/, this.query("SELECT SCHEMA_NAME() AS \"schema_name\"")];

 Line: 1981 -              var hasTable, currentSchema, currentDatabase, extractTableSchemaAndName, dbNames, viewsCondition, query, dbViews;

 Line: 2024 -                          query = dbNames.map(function (dbName) {

 Line: 2025 -                              return "SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM " + _this.escapePath(_this.getTypeormMetadataTableName()) + " \"t\" " +

 Line: 2026 -                                  ("INNER JOIN \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 2027 -                          }).join(" UNION ALL ");

 Line: 2104 -                              return "SELECT * FROM \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE " + tablesCondition;

 Line: 2105 -                          }).join(" UNION ALL ");

 Line: 2107 -                              return "SELECT * FROM \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE " + tablesCondition;

 Line: 2108 -                          }).join(" UNION ALL ");

 Line: 2115 -                              return "SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" " +

 Line: 2116 -                                  ("FROM \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ") +

 Line: 2119 -                                  ("WHERE (" + constraintsCondition + ") AND \"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')");

 Line: 2120 -                          }).join(" UNION ALL ");

 Line: 2122 -                              return "SELECT \"fk\".\"name\" AS \"FK_NAME\", '" + dbName + "' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", " +

 Line: 2124 -                                  "\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" " +

 Line: 2125 -                                  ("FROM \"" + dbName + "\".\"sys\".\"foreign_keys\" \"fk\" ") +

 Line: 2133 -                          }).join(" UNION ALL ");

 Line: 2135 -                              return "SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" " +

 Line: 2136 -                                  ("FROM \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ") +

 Line: 2137 -                                  ("WHERE COLUMNPROPERTY(object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), \"COLUMN_NAME\", 'IsIdentity') = 1 AND \"TABLE_SCHEMA\" IN (" + schemaNamesString + ")");

 Line: 2138 -                          }).join(" UNION ALL ");

 Line: 2139 -                          dbCollationsSql = "SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"";

 Line: 2141 -                              return "SELECT '" + dbName + "' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", " +

 Line: 2143 -                                  ("FROM \"" + dbName + "\".\"sys\".\"indexes\" \"ind\" ") +

 Line: 2148 -                                  "WHERE \"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0";

 Line: 2149 -                          }).join(" UNION ALL ");

 Line: 2304 -                                              onDelete: dbForeignKey["ON_DELETE"].replace("_", " "),

 Line: 2305 -                                              onUpdate: dbForeignKey["ON_UPDATE"].replace("_", " ") // SqlServer returns NO_ACTION, instead of NO ACTION

 Line: 2376 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 2378 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 2396 -          var query = ifExist ? "DROP TABLE IF EXISTS " + this.escapePath(tableOrName) : "DROP TABLE " + this.escapePath(tableOrName);

 Line: 2409 -              var currentSchema, parsedTableName, expression, _a, query, parameters;

 Line: 2421 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2438 -              var currentSchema, parsedTableName, qb, _a, query, parameters;

 Line: 2452 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2463 -          return new Query("CREATE " + (index.isUnique ? "UNIQUE " : "") + "INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 2524 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 2526 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 2609 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/react-native/ReactNativeDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 40 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/react-native/ReactNativeQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -       * Executes a given SQL query.

 Line: 28 -              var databaseConnection, queryStartTime;

 Line: 36 -                          queryStartTime = +new Date();

 Line: 40 -                              var queryEndTime = +new Date();

 Line: 41 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 42 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 43 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 44 -                              // return id of inserted row, if query was insert statement.

 Line: 45 -                              if (query.substr(0, 11) === "INSERT INTO") {

 Line: 56 -                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/mysql/MysqlDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 326 -       * Creates a query runner used to execute database queries.

 Line: 334 -       * and an array of parameter names to be passed to a query.

 Line: 626 -       * Creates generated map of values generated or returned by database after INSERT query.

 Line: 782 -              // we give error before calling any other method that creates actual query runner

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/mysql/MysqlQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -       * You cannot use query runner methods once its released.

 Line: 140 -       * Executes a raw SQL query.

 Line: 147 -              var databaseConnection, queryStartTime_1, err_1;

 Line: 157 -                          queryStartTime_1 = +new Date();

 Line: 161 -                              var queryEndTime = +new Date();

 Line: 162 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 163 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 164 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 166 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 243 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM `INFORMATION_SCHEMA`.`SCHEMATA` WHERE `SCHEMA_NAME` = '" + database + "'")];

 Line: 271 -                          sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "'";

 Line: 291 -                          sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "' AND `COLUMN_NAME` = '" + columnName + "'";

 Line: 385 -                          // createTable does not need separate method to create indices, because it create indices in the same query with table creation.

 Line: 387 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 388 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 553 -                                  up += " ON DELETE " + foreignKey.onDelete;

 Line: 555 -                                  up += " ON UPDATE " + foreignKey.onUpdate;

 Line: 559 -                                  down += " ON DELETE " + foreignKey.onDelete;

 Line: 561 -                                  down += " ON UPDATE " + foreignKey.onUpdate;

 Line: 789 -                                      up += " ON DELETE " + foreignKey.onDelete;

 Line: 791 -                                      up += " ON UPDATE " + foreignKey.onUpdate;

 Line: 795 -                                      down += " ON DELETE " + foreignKey.onDelete;

 Line: 797 -                                      down += " ON UPDATE " + foreignKey.onUpdate;

 Line: 1462 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1503 -                          selectViewDropsQuery = "SELECT concat('DROP VIEW IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`VIEWS` WHERE `TABLE_SCHEMA` = '" + dbName + "'";

 Line: 1511 -                          dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA` = '" + dbName + "'";

 Line: 1558 -                      case 0: return [4 /*yield*/, this.query("SELECT DATABASE() AS `db_name`")];

 Line: 1568 -              var hasTable, currentDatabase, viewsCondition, query, dbViews;

 Line: 1588 -                          query = "SELECT `t`.*, `v`.`check_option` FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " `t` " +

 Line: 1589 -                              ("INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 1628 -                          tablesSql = "SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE " + tablesCondition;

 Line: 1629 -                          columnsSql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE " + tablesCondition;

 Line: 1630 -                          primaryKeySql = "SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (" + tablesCondition + ")";

 Line: 1631 -                          collationsSql = "SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`";

 Line: 1640 -                          indicesSql = "SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` " +

 Line: 1642 -                              ("WHERE (" + indicesCondition + ") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL");

 Line: 1651 -                          foreignKeysSql = "SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, " +

 Line: 1652 -                              "`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` " +

 Line: 1653 -                              "FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` " +

 Line: 1655 -                              "WHERE " + foreignKeysCondition;

 Line: 1793 -                                              onDelete: dbForeignKey["ON_DELETE"],

 Line: 1794 -                                              onUpdate: dbForeignKey["ON_UPDATE"]

 Line: 1886 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 1888 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 1916 -              var currentDatabase, expression, _a, query, parameters;

 Line: 1927 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1944 -              var currentDatabase, viewName, qb, _a, query, parameters;

 Line: 1957 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2007 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 2009 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 2034 -       * Builds a part of query to create/change a column.

 Line: 2073 -              c += " ON UPDATE " + column.onUpdate;

 Line: 2081 -                      case 0: return [4 /*yield*/, this.query("SELECT VERSION() AS `version`")];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/Query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1 -   * This class stores query and its parameters

 Line: 5 -          this.query = query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlite/SqliteDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 44 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlite/SqliteQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -       * Executes a given SQL query.

 Line: 32 -              var handler, databaseConnection, queryStartTime, isInsertQuery;

 Line: 39 -                              var queryEndTime = +new Date();

 Line: 40 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 41 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 42 -                                  connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 44 -                                  connection.logger.logQueryError(err, query, parameters, this);

 Line: 55 -                          queryStartTime = +new Date();

 Line: 56 -                          isInsertQuery = query.substr(0, 11) === "INSERT INTO";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/cordova/CordovaQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -       * Executes a given SQL query.

 Line: 28 -              var databaseConnection, queryStartTime;

 Line: 36 -                          queryStartTime = +new Date();

 Line: 40 -                              var queryEndTime = +new Date();

 Line: 41 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 42 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 43 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 44 -                              if (query.substr(0, 11) === "INSERT INTO") {

 Line: 55 -                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 72 -          const sql = columns.length > 0 ? (`INSERT INTO "${tableName}"(${columns}) VALUES (${values})`) : `INSERT INTO "${tableName}" DEFAULT VALUES`;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/cordova/CordovaDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/nativescript/NativescriptDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 45 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/nativescript/NativescriptQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -       * Executes a given SQL query.

 Line: 29 -              var isInsertQuery = query.substr(0, 11) === "INSERT INTO";

 Line: 33 -                  var queryEndTime = +new Date();

 Line: 34 -                  var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 35 -                  if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 36 -                      connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 38 -                      connection.logger.logQueryError(err, query, parameters, this);

 Line: 47 -              var queryStartTime = +new Date();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sap/SapQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -           * Last executed query in a transaction.

 Line: 32 -           * This is needed because we cannot rely on parallel queries because we use second query

 Line: 68 -       * You cannot use query runner methods once its released.

 Line: 145 -       * Executes a given SQL query.

 Line: 166 -                              var databaseConnection_1, queryStartTime_1, isInsertQuery_1, statement, err_1;

 Line: 178 -                                          queryStartTime_1 = +new Date();

 Line: 179 -                                          isInsertQuery_1 = query.substr(0, 11) === "INSERT INTO";

 Line: 184 -                                              var queryEndTime = +new Date();

 Line: 185 -                                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 186 -                                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 187 -                                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 198 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 204 -                                                      var lastIdQuery_1 = "SELECT CURRENT_IDENTITY_VALUE() FROM \"SYS\".\"DUMMY\"";

 Line: 258 -                      case 0: return [4 /*yield*/, this.query("SELECT DATABASE_NAME FROM \"SYS\".\"M_DATABASES\"")];

 Line: 272 -              var query, results;

 Line: 276 -                          query = database ? "SELECT * FROM \"" + database + "\".\"SYS\".\"SCHEMAS\"" : "SELECT * FROM \"SYS\".\"SCHEMAS\"";

 Line: 327 -                          sql = "SELECT * FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 346 -                          sql = "SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE \"SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"TABLE_NAME\" = " + parsedTableName.tableName + " AND \"COLUMN_NAME\" = '" + columnName + "'";

 Line: 386 -                          return [4 /*yield*/, this.query("SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '" + schema + "'")];

 Line: 416 -                          return [4 /*yield*/, this.query("SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '" + schema + "'")];

 Line: 459 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 460 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 521 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 629 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '" + schemaName + "' AND \"REFERENCED_TABLE_NAME\" = '" + oldTableName + "'";

 Line: 644 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 645 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 734 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"REFERENCED_TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 749 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 750 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 1099 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"REFERENCED_TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 1114 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 1115 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 1261 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"REFERENCED_TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 1276 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 1277 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 1339 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"REFERENCED_TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 1354 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 1355 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 1772 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1814 -                          selectTableDropsQuery = "SELECT 'DROP TABLE \"' || schema_name || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" IN (" + schemaNamesString + ") AND \"TABLE_NAME\" NOT IN ('SYS_AFL_GENERATOR_PARAMETERS') AND \"IS_COLUMN_TABLE\" = 'TRUE'";

 Line: 1854 -                      case 0: return [4 /*yield*/, this.query("SELECT \"VALUE\" AS \"db_name\" FROM \"SYS\".\"M_SYSTEM_OVERVIEW\" WHERE \"SECTION\" = 'System' and \"NAME\" = 'Instance ID'")];

 Line: 1870 -                      case 0: return [4 /*yield*/, this.query("SELECT CURRENT_SCHEMA AS \"schema_name\" FROM \"SYS\".\"DUMMY\"")];

 Line: 1880 -              var hasTable, currentSchema, viewsCondition, query, dbViews;

 Line: 1900 -                          query = "SELECT \"t\".* FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " \"t\" WHERE \"t\".\"type\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : "");

 Line: 1939 -                          tablesSql = "SELECT * FROM \"SYS\".\"TABLES\" WHERE " + tablesCondition;

 Line: 1940 -                          columnsSql = "SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE " + tablesCondition;

 Line: 1949 -                          constraintsSql = "SELECT * FROM \"SYS\".\"CONSTRAINTS\" WHERE (" + constraintsCondition + ")";

 Line: 1958 -                          indicesSql = "SELECT \"I\".\"INDEX_TYPE\", \"I\".\"SCHEMA_NAME\", \"I\".\"TABLE_NAME\", \"I\".\"INDEX_NAME\", \"IC\".\"COLUMN_NAME\", \"I\".\"CONSTRAINT\" " +

 Line: 1959 -                              "FROM \"SYS\".\"INDEXES\" \"I\" INNER JOIN \"SYS\".\"INDEX_COLUMNS\" \"IC\" ON \"IC\".\"INDEX_OID\" = \"I\".\"INDEX_OID\" " +

 Line: 1960 -                              ("WHERE (" + indicesCondition + ") AND (\"I\".\"CONSTRAINT\" IS NULL OR \"I\".\"CONSTRAINT\" != 'PRIMARY KEY') AND \"I\".\"INDEX_NAME\" NOT LIKE '%_SYS_FULLTEXT_%'");

 Line: 1969 -                          foreignKeysSql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE (" + foreignKeysCondition + ")";

 Line: 2107 -                                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 2108 -                                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 2191 -                      constraint += " ON DELETE " + onDelete;

 Line: 2195 -                      constraint += " ON UPDATE " + onUpdate;

 Line: 2214 -          var query = ifExist ? "DROP TABLE IF EXISTS " + this.escapePath(tableOrName) : "DROP TABLE " + this.escapePath(tableOrName);

 Line: 2227 -              var currentSchema, splittedName, schema, name, expression, _a, query, parameters;

 Line: 2245 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2262 -              var currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;

 Line: 2282 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2306 -          return new Query("CREATE " + indexType + "INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 2361 -              sql += " ON DELETE " + onDelete;

 Line: 2365 -              sql += " ON UPDATE " + onUpdate;

 Line: 2430 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sap/SapDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 221 -       * Creates a query runner used to execute database queries.

 Line: 229 -       * and an array of parameter names to be passed to a query.

 Line: 466 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/RepositoryFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -      RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {

 Line: 24 -                  queryRunner: queryRunner,

 Line: 41 -                  queryRunner: queryRunner,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/Repository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -       * Creates a new query builder that can be used to build a sql query.

 Line: 13 -      Repository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 14 -          return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);

 Line: 98 -       * Executes fast and efficient INSERT query.

 Line: 99 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 107 -       * Executes fast and efficient UPDATE query.

 Line: 116 -       * Executes fast and efficient DELETE query.

 Line: 125 -       * Executes fast and efficient SOFT-DELETE query.

 Line: 134 -       * Executes fast and efficient SOFT-DELETE query.

 Line: 180 -       * Executes a raw SQL query and returns a raw database results.

 Line: 181 -       * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/TreeRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 82 -       * Creates a query builder used to get descendants of the entities in a tree.

 Line: 168 -       * Creates a query builder used to get ancestors of the entities in the tree.

 Line: 204 -              // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/AbstractRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -       * Creates a new query builder for the repository's entity that can be used to build a sql query.

 Line: 58 -       * Creates a new query builder for the given entity that can be used to build a sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/BaseEntity.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 93 -       * Creates a new query builder that can be used to build a sql query.

 Line: 143 -       * Executes fast and efficient INSERT query.

 Line: 144 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 152 -       * Executes fast and efficient UPDATE query.

 Line: 161 -       * Executes fast and efficient DELETE query.

 Line: 207 -       * Executes a raw SQL query and returns a raw database results.

 Line: 208 -       * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/MongoRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -       * Raw SQL query execution is not supported by MongoDB.

 Line: 24 -      MongoRepository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 55 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 58 -          return this.manager.createCursor(this.metadata.target, query);

 Line: 61 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 65 -          return this.manager.createEntityCursor(this.metadata.target, query);

 Line: 87 -       * Count number of matching documents in the db to a query.

 Line: 90 -          return this.manager.count(this.metadata.target, query || {}, options);

 Line: 110 -          return this.manager.deleteMany(this.metadata.tableName, query, options);

 Line: 116 -          return this.manager.deleteOne(this.metadata.tableName, query, options);

 Line: 121 -      MongoRepository.prototype.distinct = function (key, query, options) {

 Line: 122 -          return this.manager.distinct(this.metadata.tableName, key, query, options);

 Line: 140 -          return this.manager.findOneAndDelete(this.metadata.tableName, query, options);

 Line: 146 -          return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);

 Line: 152 -          return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);

 Line: 255 -          return this.manager.replaceOne(this.metadata.tableName, query, doc, options);

 Line: 267 -          return this.manager.updateMany(this.metadata.tableName, query, update, options);

 Line: 273 -          return this.manager.updateOne(this.metadata.tableName, query, update, options);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/migration/MigrationExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -      function MigrationExecutor(connection, queryRunner) {

 Line: 16 -          this.queryRunner = queryRunner;

 Line: 146 -              var e_1, _a, hasUnappliedMigrations, queryRunner, executedMigrations, allMigrations, _loop_1, this_1, allMigrations_1, allMigrations_1_1, migration;

 Line: 151 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 186 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 201 -              var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, successMigrations, pendingMigrations, transactionStartedByUs, err_1, rollbackError_1;

 Line: 206 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 232 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 246 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 259 -                                              return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 273 -                                                              return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 291 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 302 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 312 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 327 -              var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_2, rollbackError_2;

 Line: 331 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 357 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 372 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 383 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 393 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 419 -                          return [4 /*yield*/, queryRunner.hasTable(this.migrationsTable)];

 Line: 423 -                          return [4 /*yield*/, queryRunner.createTable(new Table({

 Line: 465 -                          mongoRunner = queryRunner;

 Line: 544 -                          mongoRunner = queryRunner;

 Line: 550 -                          qb = queryRunner.manager.createQueryBuilder();

 Line: 582 -                          mongoRunner = queryRunner;

 Line: 588 -                          qb = queryRunner.manager.createQueryBuilder();

 Line: 605 -              var queryRunner;

 Line: 609 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 616 -                          return [4 /*yield*/, queryRunner.release()];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/cache/RedisQueryResultCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * Caches query result into Redis database.

 Line: 85 -       * Caches given query result.

 Line: 89 -      RedisQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 118 -       * Stores given query result in the cache.

 Line: 120 -      RedisQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 163 -      RedisQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/cache/QueryResultCacheFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * Caches query result into Redis database.

 Line: 16 -       * Creates a new query result cache based on connection options.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/cache/DbQueryResultCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -   * Caches query result into current database, into separate table called "query-result-cache".

 Line: 51 -                          queryRunner = this.getQueryRunner(queryRunner);

 Line: 53 -                          return [4 /*yield*/, queryRunner.hasTable(this.queryResultCacheTable)];

 Line: 58 -                          return [4 /*yield*/, queryRunner.createTable(new Table({

 Line: 107 -       * Caches given query result.

 Line: 111 -      DbQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 112 -          queryRunner = this.getQueryRunner(queryRunner);

 Line: 126 -                      .where("dbms_lob.compare(" + qb.escape("cache") + "." + qb.escape("query") + ", :query) = 0", { query: options.query })

 Line: 131 -                  .setParameters({ query: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.query, "nvarchar") : options.query })

 Line: 144 -       * Stores given query result in the cache.

 Line: 146 -      DbQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 152 -                          queryRunner = this.getQueryRunner(queryRunner);

 Line: 159 -                                  query: new MssqlParameter(options.query, "nvarchar"),

 Line: 164 -                          qb = queryRunner.manager

 Line: 175 -                          qb = queryRunner.manager

 Line: 190 -                      return [4 /*yield*/, queryRunner.manager

 Line: 217 -      DbQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

 Line: 240 -       * Gets a query runner to work with.

 Line: 244 -              return queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/logger/DebugLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -       * Logs query and parameters used in it.

 Line: 19 -      DebugLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 28 -       * Logs query that failed.

 Line: 30 -      DebugLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 40 -       * Logs query that is slow.

 Line: 42 -      DebugLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 54 -      DebugLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 62 -      DebugLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 71 -      DebugLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/logger/AdvancedConsoleLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -       * Logs query and parameters used in it.

 Line: 18 -      AdvancedConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 20 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 25 -       * Logs query that is failed.

 Line: 27 -      AdvancedConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 29 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 35 -       * Logs query that is slow.

 Line: 37 -      AdvancedConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 38 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 45 -      AdvancedConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 53 -      AdvancedConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 60 -      AdvancedConsoleLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/logger/SimpleConsoleLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -       * Logs query and parameters used in it.

 Line: 17 -      SimpleConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 19 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 24 -       * Logs query that is failed.

 Line: 26 -      SimpleConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 28 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 34 -       * Logs query that is slow.

 Line: 36 -      SimpleConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 37 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 44 -      SimpleConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 52 -      SimpleConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 59 -      SimpleConsoleLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/logger/FileLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -       * Logs query and parameters used in it.

 Line: 18 -      FileLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 20 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 25 -       * Logs query that is failed.

 Line: 27 -      FileLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 29 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 37 -       * Logs query that is slow.

 Line: 39 -      FileLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 40 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 46 -      FileLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 54 -      FileLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 61 -      FileLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/metadata/RelationMetadata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 34 -           * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/metadata/types/EventListenerTypes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -      EventListenerTypes.BEFORE_INSERT = "before-insert";

 Line: 8 -      EventListenerTypes.AFTER_INSERT = "after-insert";

 Line: 9 -      EventListenerTypes.BEFORE_UPDATE = "before-update";

 Line: 10 -      EventListenerTypes.AFTER_UPDATE = "after-update";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/metadata/EntityMetadata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 200 -           * Listener metadatas with "AFTER INSERT" type.

 Line: 204 -           * Listener metadatas with "AFTER INSERT" type.

 Line: 208 -           * Listener metadatas with "AFTER UPDATE" type.

 Line: 212 -           * Listener metadatas with "AFTER UPDATE" type.

 Line: 246 -              this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner); });

 Line: 251 -          this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner); });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/metadata/ColumnMetadata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -           * Indicates if column is selected by query builder or not.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-runner/BaseQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -           * Indicates if connection for this query runner is released.

 Line: 11 -           * Once its released, query runner cannot run queries anymore.

 Line: 32 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 116 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 117 -       * instead they will be memorized into a special variable inside query runner.

 Line: 125 -       * Disables special query runner mode in which sql queries won't be executed

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/subscriber/Broadcaster.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -          this.queryRunner = queryRunner;

 Line: 16 -       * Broadcasts "BEFORE_INSERT" event.

 Line: 40 -                          queryRunner: _this.queryRunner,

 Line: 53 -       * Broadcasts "BEFORE_UPDATE" event.

 Line: 77 -                          queryRunner: _this.queryRunner,

 Line: 117 -                          queryRunner: _this.queryRunner,

 Line: 132 -       * Broadcasts "AFTER_INSERT" event.

 Line: 156 -                          queryRunner: _this.queryRunner,

 Line: 169 -       * Broadcasts "AFTER_UPDATE" event.

 Line: 193 -                          queryRunner: _this.queryRunner,

 Line: 233 -                          queryRunner: _this.queryRunner,

 Line: 263 -                      // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query

 Line: 286 -                              queryRunner: _this.queryRunner,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/connection/Connection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 227 -              var queryRunner, databases_1;

 Line: 231 -                          queryRunner = this.createQueryRunner("master");

 Line: 241 -                          return [4 /*yield*/, __2.PromiseUtils.runInSequence(databases_1, function (database) { return queryRunner.clearDatabase(database); })];

 Line: 245 -                      case 3: return [4 /*yield*/, queryRunner.clearDatabase()];

 Line: 250 -                      case 6: return [4 /*yield*/, queryRunner.release()];

 Line: 374 -       * Executes raw SQL query and returns raw database results.

 Line: 376 -      Connection.prototype.query = function (query, parameters, queryRunner) {

 Line: 384 -                          if (queryRunner && queryRunner.isReleased)

 Line: 386 -                          usedQueryRunner = queryRunner || this.createQueryRunner("master");

 Line: 405 -       * Creates a new query builder that can be used to build a sql query.

 Line: 407 -      Connection.prototype.createQueryBuilder = function (entityOrRunner, alias, queryRunner) {

 Line: 412 -              return new SelectQueryBuilder_1.SelectQueryBuilder(this, queryRunner)

 Line: 421 -       * Creates a query runner used for perform queries on a single database connection.

 Line: 422 -       * Using query runners you can control your queries to execute using single database connection and

 Line: 432 -          var queryRunner = this.driver.createQueryRunner(mode);

 Line: 435 -          return queryRunner;

 Line: 453 -          return new EntityManagerFactory_1.EntityManagerFactory().create(this, queryRunner);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/entity-manager/SqljsEntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -      function SqljsEntityManager(connection, queryRunner) {

 Line: 14 -          var _this = _super.call(this, connection, queryRunner) || this;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/entity-manager/EntityManagerFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -      EntityManagerFactory.prototype.create = function (connection, queryRunner) {

 Line: 20 -              return new SqljsEntityManager_1.SqljsEntityManager(connection, queryRunner);

 Line: 21 -          return new EntityManager_1.EntityManager(connection, queryRunner);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/entity-manager/EntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -      function EntityManager(connection, queryRunner) {

 Line: 45 -              this.queryRunner = queryRunner;

 Line: 56 -              var isolation, runInTransaction, queryRunner, result, err_1, rollbackError_1;

 Line: 71 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 76 -                          return [4 /*yield*/, queryRunner.startTransaction(isolation)];

 Line: 80 -                      case 3: return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 87 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 96 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 106 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 117 -       * Executes raw SQL query and returns raw database results.

 Line: 127 -       * Creates a new query builder that can be used to build a sql query.

 Line: 129 -      EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {

 Line: 131 -              return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);

 Line: 134 -              return this.connection.createQueryBuilder(entityClass || queryRunner || this.queryRunner);

 Line: 280 -       * Executes fast and efficient INSERT query.

 Line: 281 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 308 -       * Executes fast and efficient UPDATE query.

 Line: 341 -       * Executes fast and efficient DELETE query.

 Line: 374 -       * Executes fast and efficient DELETE query.

 Line: 407 -       * Executes fast and efficient DELETE query.

 Line: 491 -                  // if no ids passed, no need to execute a query - just return an empty array of values

 Line: 569 -              var metadata, queryRunner;

 Line: 574 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 578 -                          return [4 /*yield*/, queryRunner.clearTable(metadata.tablePath)];

 Line: 582 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 719 -       * This is used when entity manager is created with a single query runner,

 Line: 720 -       * and this single query runner needs to be released after job with entity manager is done.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/entity-manager/MongoEntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 30 -           * Gets query runner used to execute queries.

 Line: 46 -              var query, cursor;

 Line: 50 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 51 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 76 -              var query, cursor, _a, results, count;

 Line: 80 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 81 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 96 -                                  this.count(entityClassOrName, query),

 Line: 111 -              var metadata, query, objectIdInstance, cursor;

 Line: 116 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};

 Line: 118 -                          query["_id"] = {

 Line: 125 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 149 -              var objectIdInstance, id, findOneOptionsOrConditions, query, cursor, result;

 Line: 156 -                          query = this.convertFindOneOptionsOrConditionsToMongodbQuery(findOneOptionsOrConditions) || {};

 Line: 158 -                              query["_id"] = (id instanceof objectIdInstance) ? id : new objectIdInstance(id);

 Line: 160 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 180 -       * Executes fast and efficient INSERT query.

 Line: 181 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 219 -       * Executes fast and efficient UPDATE query.

 Line: 250 -       * Executes fast and efficient DELETE query.

 Line: 279 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 281 -      MongoEntityManager.prototype.createCursor = function (entityClassOrName, query) {

 Line: 283 -          return this.queryRunner.cursor(metadata.tableName, query);

 Line: 286 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 289 -      MongoEntityManager.prototype.createEntityCursor = function (entityClassOrName, query) {

 Line: 291 -          var cursor = this.createCursor(entityClassOrName, query);

 Line: 320 -       * Count number of matching documents in the db to a query.

 Line: 322 -      MongoEntityManager.prototype.count = function (entityClassOrName, query, options) {

 Line: 324 -          return this.queryRunner.count(metadata.tableName, query, options);

 Line: 345 -      MongoEntityManager.prototype.deleteMany = function (entityClassOrName, query, options) {

 Line: 347 -          return this.queryRunner.deleteMany(metadata.tableName, query, options);

 Line: 352 -      MongoEntityManager.prototype.deleteOne = function (entityClassOrName, query, options) {

 Line: 354 -          return this.queryRunner.deleteOne(metadata.tableName, query, options);

 Line: 359 -      MongoEntityManager.prototype.distinct = function (entityClassOrName, key, query, options) {

 Line: 361 -          return this.queryRunner.distinct(metadata.tableName, key, query, options);

 Line: 380 -      MongoEntityManager.prototype.findOneAndDelete = function (entityClassOrName, query, options) {

 Line: 382 -          return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);

 Line: 387 -      MongoEntityManager.prototype.findOneAndReplace = function (entityClassOrName, query, replacement, options) {

 Line: 389 -          return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);

 Line: 394 -      MongoEntityManager.prototype.findOneAndUpdate = function (entityClassOrName, query, update, options) {

 Line: 396 -          return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);

 Line: 514 -      MongoEntityManager.prototype.replaceOne = function (entityClassOrName, query, doc, options) {

 Line: 516 -          return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);

 Line: 532 -      MongoEntityManager.prototype.updateMany = function (entityClassOrName, query, update, options) {

 Line: 534 -          return this.queryRunner.updateMany(metadata.tableName, query, update, options);

 Line: 539 -      MongoEntityManager.prototype.updateOne = function (entityClassOrName, query, update, options) {

 Line: 541 -          return this.queryRunner.updateOne(metadata.tableName, query, update, options);

 Line: 547 -       * Converts FindManyOptions to mongodb query.

 Line: 561 -       * Converts FindOneOptions to mongodb query.

 Line: 602 -       * Ensures given id is an id for query.

 Line: 609 -                      query[column.databasePath] = columnValue;

 Line: 610 -                  return query;

 Line: 624 -          var queryRunner = this.queryRunner;

 Line: 636 -                      queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);

 Line: 646 -                      queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, entities);

 Line: 662 -                      queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);

 Line: 674 -                      queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, metadata, [entity]);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/persistence/SubjectExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 53 -          this.queryRunner = queryRunner;

 Line: 64 -       * Executes queries using given query runner.

 Line: 180 -       * Broadcasts "BEFORE_INSERT", "BEFORE_UPDATE", "BEFORE_REMOVE" events for all given subjects.

 Line: 198 -       * Broadcasts "AFTER_INSERT", "AFTER_UPDATE", "AFTER_REMOVE" events for all given subjects.

 Line: 311 -                                                                  subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it

 Line: 477 -                                          // here we execute our deletion query

 Line: 478 -                                          // we don't need to specify entities and set update entity to true since the only thing query builder

 Line: 490 -                                              // here we execute our deletion query

 Line: 491 -                                              // we don't need to specify entities and set update entity to true since the only thing query builder

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/persistence/tree/MaterializedPathSubjectExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -          this.queryRunner = queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/persistence/tree/NestedSetSubjectExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -          this.queryRunner = queryRunner;

 Line: 53 -                          return [4 /*yield*/, this.queryRunner.query("UPDATE " + tableName + " SET " +

 Line: 56 -                                  ("WHERE " + rightColumnName + " >= " + parentNsRight))];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/persistence/tree/ClosureSubjectExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -          this.queryRunner = queryRunner;

 Line: 85 -                          return [4 /*yield*/, this.queryRunner.query("INSERT INTO " + tableName + " (" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(", ") + ") " +

 Line: 86 -                                  ("SELECT " + ancestorColumnNames.join(", ") + ", " + childEntityIds1.join(", ") + " FROM " + tableName + " WHERE " + whereCondition), firstQueryParameters_1)];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/persistence/SubjectDatabaseEntityLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -          this.queryRunner = queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/persistence/EntityPersistExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -      function EntityPersistExecutor(connection, queryRunner, mode, target, entity, options) {

 Line: 23 -          this.queryRunner = queryRunner;

 Line: 42 -              var queryRunner, entities, entitiesInChunks, executors, executorsWithExecutableOperations, isTransactionStartedByUs, error_1, rollbackError_1;

 Line: 47 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 48 -                          // save data in the query runner - this is useful functionality to share data from outside of the world

 Line: 51 -                              queryRunner.data = this.options.data;

 Line: 131 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 144 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 155 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 166 -                          return [4 /*yield*/, queryRunner.release()];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/relations/RelationCount.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -  function RelationCount(relation, alias, queryBuilderFactory) {

 Line: 15 -              queryBuilderFactory: queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/relations/RelationId.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -  function RelationId(relation, alias, queryBuilderFactory) {

 Line: 15 -              queryBuilderFactory: queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/listeners/BeforeInsert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              type: EventListenerTypes_1.EventListenerTypes.BEFORE_INSERT

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/listeners/AfterUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              type: EventListenerTypes_1.EventListenerTypes.AFTER_UPDATE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/listeners/AfterInsert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              type: EventListenerTypes_1.EventListenerTypes.AFTER_INSERT

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/listeners/BeforeUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              type: EventListenerTypes_1.EventListenerTypes.BEFORE_UPDATE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/EntityCreateCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -              describe: "Name of the connection on which to run a query"

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/SubscriberCreateCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -              describe: "Name of the connection on which to run a query"

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/InitCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -              describe: "Name of the connection on which to run a query"

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationGenerateCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -              describe: "Name of the connection on which run a query."

 Line: 98 -                                  upSqls_1.push("        await queryRunner.query(\"" + upQuery.query.replace(new RegExp("\"", "g"), "\\\"") + "\", " + JSON.stringify(upQuery.parameters) + ");");

 Line: 101 -                                  downSqls_1.push("        await queryRunner.query(\"" + downQuery.query.replace(new RegExp("\"", "g"), "\\\"") + "\", " + JSON.stringify(downQuery.parameters) + ");");

 Line: 106 -                                  upSqls_1.push("        await queryRunner.query(`" + upQuery.query.replace(new RegExp("`", "g"), "\\`") + "`, " + JSON.stringify(upQuery.parameters) + ");");

 Line: 109 -                                  downSqls_1.push("        await queryRunner.query(`" + downQuery.query.replace(new RegExp("`", "g"), "\\`") + "`, " + JSON.stringify(downQuery.parameters) + ");");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/QueryCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -   * Executes an sql query on the given connection.

 Line: 13 -          this.describe = "Executes given SQL query on a default connection. Specify connection name to run query on a specific connection.";

 Line: 20 -              describe: "Name of the connection on which to run a query."

 Line: 30 -              var connection, queryRunner, connectionOptionsReader, connectionOptions, queryResult, err_1;

 Line: 35 -                          queryRunner = undefined;

 Line: 55 -                          // create a query runner and execute query using it

 Line: 56 -                          queryRunner = connection.createQueryRunner("master");

 Line: 57 -                          console.log(chalk.green("Running query: ") + PlatformTools_1.PlatformTools.highlightSql(args._[1]));

 Line: 58 -                          return [4 /*yield*/, queryRunner.query(args._[1])];

 Line: 60 -                          queryResult = _a.sent();

 Line: 63 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 73 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 84 -                          console.log(chalk.black.bgRed("Error during query execution:"));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationCreateCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationShowCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 20 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationRunCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/CacheClearCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -          this.describe = "Clears all data stored in query runner cache.";

 Line: 19 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationRevertCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 20 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/find-options/FindOptionsUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 54 -       * Applies give find many options to the given query builder.

 Line: 64 -       * Applies give find options to the given query builder.

 Line: 67 -          // if options are not set then simply return query builder. This is made for simplicity of usage.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/find-options/FindOperator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -       * Gets SQL needs to be inserted into final query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/schema-builder/MongoSchemaBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -              var queryRunner, promises;

 Line: 37 -                          queryRunner = this.connection.driver.createQueryRunner();

 Line: 68 -       * Returns query to be executed by schema builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/schema-builder/RdbmsSchemaBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 145 -                          // its important to disable this mode despite the fact we are release query builder

 Line: 146 -                          // because there exist drivers which reuse same query runner. Also its important to disable

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationIdLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 209 -          // execute query

 Line: 245 -          // execute query

 Line: 281 -          // execute query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -              queryBuilderFactory: relationCount.queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-count/RelationCountLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -      function RelationCountLoader(connection, queryRunner, relationCountAttributes) {

 Line: 9 -          this.queryRunner = queryRunner;

 Line: 41 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 51 -                                  // apply condition (custom query builder factory)

 Line: 81 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 96 -                                  // apply condition (custom query builder factory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/transformer/RawSqlResultsToEntityTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -      function RawSqlResultsToEntityTransformer(expressionMap, driver, rawRelationIdResults, rawRelationCountResults, queryRunner) {

 Line: 19 -          this.queryRunner = queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/QueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -  // todo: completely cover query builder with tests

 Line: 22 -  // todo: implement relation/entity loading and setting them into properties within a separate query

 Line: 32 -      function QueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 40 -              this.queryRunner = queryRunner;

 Line: 49 -           * Gets the main alias string used in this query builder.

 Line: 60 -       * Creates SELECT query and selects given data.

 Line: 78 -       * Creates INSERT query.

 Line: 89 -       * Creates UPDATE query and applies given update values.

 Line: 107 -       * Creates DELETE query.

 Line: 134 -       * Sets entity's relation with which this query builder gonna work.

 Line: 182 -          // set parent query builder parameters as well in sub-query mode

 Line: 193 -          // set parent query builder parameters as well in sub-query mode

 Line: 223 -          var _a = tslib_1.__read(this.getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 229 -       * Parameters in the query are escaped for the currently used driver.

 Line: 235 -       * Gets query to be executed with all parameters used in it.

 Line: 239 -          var query = this.getQuery();

 Line: 244 -       * Executes sql generated by query builder and returns raw database results.

 Line: 248 -              var _a, sql, parameters, queryRunner;

 Line: 253 -                          queryRunner = this.obtainQueryRunner();

 Line: 257 -                          return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 261 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 278 -       * Creates a completely new query builder.

 Line: 279 -       * Uses same query runner as current QueryBuilder.

 Line: 285 -       * Clones query builder as it is.

 Line: 286 -       * Note: it uses new query runner, if you want query builder that uses exactly same query runner,

 Line: 287 -       * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)

 Line: 288 -       * where queryBuilder is cloned QueryBuilder.

 Line: 309 -       * Sets or overrides query builder's QueryRunner.

 Line: 312 -          this.queryRunner = queryRunner;

 Line: 316 -       * Indicates if listeners and subscribers must be called before and after query execution.

 Line: 324 -       * If set to true the query will be wrapped into a transaction.

 Line: 358 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 422 -       * Creates "WHERE" expression.

 Line: 428 -              // Adds the global condition of "non-deleted" for the entity with delete date columns in select query.

 Line: 441 -                  return " WHERE " + (conditions.length ? "(" + conditions + ") AND" : "") + " " + condition;

 Line: 445 -              return this.expressionMap.extraAppendedAndWhereCondition ? " WHERE " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : "";

 Line: 447 -              return " WHERE (" + conditions + ") AND " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);

 Line: 448 -          return " WHERE " + conditions;

 Line: 471 -                          return "INSERTED." + name;

 Line: 533 -       * Creates "WHERE" expression and variables for the given "ids".

 Line: 650 -       * Creates a query builder used to execute sql queries inside this query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/JoinAttribute.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -   * Stores all join attributes which will be used to build a JOIN query.

 Line: 12 -      function JoinAttribute(connection, queryExpressionMap, joinAttribute) {

 Line: 14 -          this.queryExpressionMap = queryExpressionMap;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/Brackets.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Allows to use brackets in WHERE expressions for better syntax.

 Line: 8 -       * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/UpdateQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -      function UpdateQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 30 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 38 -       * Gets generated sql query without parameters being replaced.

 Line: 47 -       * Executes sql generated by query builder and returns raw database results.

 Line: 51 -              var queryRunner, transactionStartedByUs, broadcastResult, declareSql, selectOutputSql, returningResultsEntityUpdator, _a, updateSql, parameters, updateResult, statements, result, broadcastResult, error_1, rollbackError_1;

 Line: 55 -                          queryRunner = this.obtainQueryRunner();

 Line: 60 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 61 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 69 -                          queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata, this.expressionMap.valuesSet);

 Line: 85 -                                  selectOutputSql = "SELECT * FROM @OutputTable";

 Line: 91 -                          return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(";\n\n"), parameters)];

 Line: 111 -                          queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 119 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 130 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 140 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 167 -       * Sets WHERE condition in the query builder.

 Line: 168 -       * If you had previously WHERE expression defined,

 Line: 169 -       * calling this function will override previously set WHERE conditions.

 Line: 182 -       * Adds new AND WHERE condition in the query builder.

 Line: 192 -       * Adds new OR WHERE condition in the query builder.

 Line: 202 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 208 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 214 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 236 -       * Sets ORDER BY condition in the query builder.

 Line: 262 -       * Adds ORDER BY condition in the query builder.

 Line: 283 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 303 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 314 -       * Creates UPDATE express used to perform insert query.

 Line: 331 -                  // todo: make this and other query builder to work with properly with tables without metadata

 Line: 350 -                      if (value instanceof Function) { // support for SQL expressions in update query

 Line: 408 -                  if (value instanceof Function) { // support for SQL expressions in update query

 Line: 436 -          // we re-write parameters this way because we want our "UPDATE ... SET" parameters to be first in the list of "nativeParameters"

 Line: 448 -          // generate and return sql update query

 Line: 450 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + returningExpression;

 Line: 453 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + returningExpression + whereExpression;

 Line: 456 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?

 Line: 460 -       * Creates "ORDER BY" part of SQL query.

 Line: 479 -       * Creates "LIMIT" parts of SQL query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationUpdater.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -          this.queryBuilder = queryBuilder;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/ReturningResultsEntityUpdator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -          this.queryRunner = queryRunner;

 Line: 20 -       * Updates entities with a special columns after updation query execution.

 Line: 83 -       * Updates entities with a special columns after insertion query execution.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-id/RelationIdLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -      function RelationIdLoader(connection, queryRunner, relationIdAttributes) {

 Line: 10 -          this.queryRunner = queryRunner;

 Line: 64 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 77 -                                  // apply condition (custom query builder factory)

 Line: 110 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 139 -                                  // apply condition (custom query builder factory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-id/RelationIdAttribute.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -   * Stores all join relation id attributes which will be used to build a JOIN query.

 Line: 13 -          this.queryExpressionMap = queryExpressionMap;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -              queryBuilderFactory: relationId.queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/DeleteQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -      function DeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 24 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 32 -       * Gets generated sql query without parameters being replaced.

 Line: 39 -       * Executes sql generated by query builder and returns raw database results.

 Line: 43 -              var _a, sql, parameters, queryRunner, transactionStartedByUs, broadcastResult, deleteResult, result, driver, broadcastResult, error_1, rollbackError_1;

 Line: 48 -                          queryRunner = this.obtainQueryRunner();

 Line: 53 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 54 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 62 -                          queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 70 -                          return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 73 -                          driver = queryRunner.connection.driver;

 Line: 91 -                          queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 99 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 110 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 120 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 140 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 150 -       * Sets WHERE condition in the query builder.

 Line: 151 -       * If you had previously WHERE expression defined,

 Line: 152 -       * calling this function will override previously set WHERE conditions.

 Line: 165 -       * Adds new AND WHERE condition in the query builder.

 Line: 175 -       * Adds new OR WHERE condition in the query builder.

 Line: 185 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 191 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 197 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 222 -       * Creates DELETE express used to perform query.

 Line: 229 -              return "DELETE FROM " + tableName + whereExpression + " RETURNING " + returningExpression;

 Line: 232 -              return "DELETE FROM " + tableName + " OUTPUT " + returningExpression + whereExpression;

 Line: 235 -              return "DELETE FROM " + tableName + whereExpression;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/SelectQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 40 -       * Gets generated sql query without parameters being replaced.

 Line: 60 -       * Creates a subquery - query that can be used inside other queries.

 Line: 69 -       * Creates SELECT query and selects given data.

 Line: 88 -       * Adds new selection to the SELECT query.

 Line: 122 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 132 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 162 -       * INNER JOINs and adds all selection properties to SELECT.

 Line: 173 -       * LEFT JOINs and adds all selection properties to SELECT.

 Line: 184 -       * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 197 -       * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 210 -       * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 223 -       * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 239 -      SelectQueryBuilder.prototype.loadRelationIdAndMap = function (mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {

 Line: 247 -          relationIdAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 262 -      SelectQueryBuilder.prototype.loadRelationCountAndMap = function (mapToProperty, relationName, aliasName, queryBuilderFactory) {

 Line: 267 -          relationCountAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 297 -       * Sets WHERE condition in the query builder.

 Line: 298 -       * If you had previously WHERE expression defined,

 Line: 299 -       * calling this function will override previously set WHERE conditions.

 Line: 312 -       * Adds new AND WHERE condition in the query builder.

 Line: 322 -       * Adds new OR WHERE condition in the query builder.

 Line: 332 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 343 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 354 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 365 -       * Sets HAVING condition in the query builder.

 Line: 377 -       * Adds new AND HAVING condition in the query builder.

 Line: 387 -       * Adds new OR HAVING condition in the query builder.

 Line: 397 -       * Sets GROUP BY condition in the query builder.

 Line: 411 -       * Adds GROUP BY condition in the query builder.

 Line: 418 -       * Sets ORDER BY condition in the query builder.

 Line: 448 -       * Adds ORDER BY condition in the query builder.

 Line: 467 -       * If you want to implement pagination, and you are having join in your query,

 Line: 479 -       * If you want to implement pagination, and you are having join in your query,

 Line: 522 -       * Gets first raw result returned by execution of generated query builder sql.

 Line: 535 -       * Gets all raw results returned by execution of generated query builder sql.

 Line: 539 -              var queryRunner, transactionStartedByUs, results, error_1, rollbackError_1;

 Line: 546 -                          queryRunner = this.obtainQueryRunner();

 Line: 551 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 552 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 561 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 572 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 582 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 593 -       * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 597 -              var queryRunner, transactionStartedByUs, results, error_2, rollbackError_2;

 Line: 601 -                          queryRunner = this.obtainQueryRunner();

 Line: 606 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 607 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 618 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 629 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 639 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 650 -       * Gets single entity returned by execution of generated query builder sql.

 Line: 680 -       * Gets entities returned by execution of generated query builder sql.

 Line: 699 -       * Gets count - number of entities selected by sql generated by this query builder.

 Line: 704 -              var queryRunner, transactionStartedByUs, results, error_3, rollbackError_3;

 Line: 710 -                          queryRunner = this.obtainQueryRunner();

 Line: 715 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 716 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 727 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 738 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 748 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 759 -       * Executes built SQL query and returns entities and overall entities count (without limitation).

 Line: 764 -              var queryRunner, transactionStartedByUs, entitiesAndRaw, count, results, error_4, rollbackError_4;

 Line: 770 -                          queryRunner = this.obtainQueryRunner();

 Line: 775 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 776 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 792 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 803 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 813 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 824 -       * Executes built SQL query and returns raw data stream.

 Line: 828 -              var _a, sql, parameters, queryRunner, transactionStartedByUs, releaseFn, results, error_5, rollbackError_5;

 Line: 835 -                          queryRunner = this.obtainQueryRunner();

 Line: 840 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 841 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 848 -                              if (queryRunner !== _this.queryRunner) // means we created our own query runner

 Line: 849 -                                  return queryRunner.release();

 Line: 852 -                          results = queryRunner.stream(sql, parameters, releaseFn, releaseFn);

 Line: 854 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 865 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 875 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 886 -       * Enables or disables query result caching.

 Line: 906 -       * Sets extra options that can be used to configure how query builder works.

 Line: 960 -       * Creates "SELECT FROM" part of SQL query.

 Line: 965 -              throw new Error("Cannot build query because main alias is not set (call qb#from method)");

 Line: 1011 -          // create a selection query

 Line: 1021 -          return select + selection + " FROM " + froms.join(", ") + lock;

 Line: 1024 -       * Creates select | select distinct part of SQL query.

 Line: 1030 -          var select = "SELECT ";

 Line: 1033 -              select = "SELECT DISTINCT ON (" + selectDistinctOnMap + ") ";

 Line: 1036 -              select = "SELECT DISTINCT ";

 Line: 1041 -       * Creates "JOIN" part of SQL query.

 Line: 1113 -       * Creates "GROUP BY" part of SQL query.

 Line: 1121 -       * Creates "ORDER BY" part of SQL query.

 Line: 1140 -       * Creates "LIMIT" and "OFFSET" parts of SQL query.

 Line: 1143 -          // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results

 Line: 1154 -              // have no effect on the query planner or on the order of the results returned.

 Line: 1158 -                  prefix = " ORDER BY (SELECT NULL)";

 Line: 1202 -       * Creates "LOCK" part of SQL query.

 Line: 1215 -                      return " FOR UPDATE";

 Line: 1225 -                      return " FOR UPDATE";

 Line: 1238 -       * Creates "HAVING" part of SQL query.

 Line: 1357 -       * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 1361 -              var metadata, relationIdLoader, relationCountLoader, relationIdMetadataTransformer, relationCountMetadataTransformer, rawResults, entities, _a, selects, orderBys_1, metadata_1, mainAliasName_1, querySelects, condition, parameters_1, ids, areAllNumbers, rawRelationIdResults, rawRelationCountResults, transformer, broadcastResult;

 Line: 1375 -                          relationIdLoader = new RelationIdLoader_1.RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);

 Line: 1376 -                          relationCountLoader = new RelationCountLoader_1.RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);

 Line: 1386 -                          querySelects = metadata_1.primaryColumns.map(function (primaryColumn) {

 Line: 1393 -                          return [4 /*yield*/, new SelectQueryBuilder(this.connection, queryRunner)

 Line: 1394 -                                  .select("DISTINCT " + querySelects.join(", "))

 Line: 1422 -                                  // fixes #190. if all numbers then its safe to perform query without parameter

 Line: 1454 -                          queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, this.expressionMap.mainAlias.metadata, entities);

 Line: 1511 -              var _a, sql, parameters, queryId, cacheOptions, savedQueryResultCacheOptions, results;

 Line: 1516 -                          queryId = sql + " -- PARAMETERS: " + JSON.stringify(parameters);

 Line: 1522 -                                  query: queryId,

 Line: 1524 -                              }, queryRunner)];

 Line: 1530 -                      case 2: return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 1536 -                                  query: queryId,

 Line: 1540 -                              }, savedQueryResultCacheOptions, queryRunner)];

 Line: 1565 -       * Creates a query builder used to execute sql queries inside this query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/InsertQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 32 -       * Gets generated sql query without parameters being replaced.

 Line: 39 -       * Executes sql generated by query builder and returns raw database results.

 Line: 43 -              var queryRunner, transactionStartedByUs, valueSets, broadcastResult_1, declareSql, selectOutputSql, returningResultsEntityUpdator, _a, insertSql, parameters, insertResult, statements, _b, broadcastResult_2, error_1, rollbackError_1;

 Line: 48 -                          queryRunner = this.obtainQueryRunner();

 Line: 53 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 54 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 64 -                              queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult_1, _this.expressionMap.mainAlias.metadata, valueSet);

 Line: 79 -                                  selectOutputSql = "SELECT * FROM @OutputTable";

 Line: 86 -                          return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(";\n\n"), parameters)];

 Line: 100 -                              queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult_2, _this.expressionMap.mainAlias.metadata, valueSet);

 Line: 109 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 122 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 132 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 186 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 233 -       * Creates INSERT express used to perform insert query.

 Line: 240 -          var query = "INSERT ";

 Line: 242 -              query += "" + (this.expressionMap.onIgnore ? " IGNORE " : "");

 Line: 244 -          query += "INTO " + tableName;

 Line: 247 -              query += "(" + columnsExpression + ")";

 Line: 251 -                  query += "()";

 Line: 255 -              query += " OUTPUT " + returningExpression;

 Line: 259 -              query += " VALUES " + valuesExpression;

 Line: 263 -                  query += " VALUES ()";

 Line: 266 -                  query += " DEFAULT VALUES";

 Line: 270 -              query += "" + (this.expressionMap.onIgnore ? " ON CONFLICT DO NOTHING " : "");

 Line: 271 -              query += "" + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "");

 Line: 274 -                  query += "" + (columns ? " ON CONFLICT " + conflict + " DO UPDATE SET " + columns : "");

 Line: 275 -                  query += "" + (overwrite ? " ON CONFLICT " + conflict + " DO UPDATE SET " + overwrite : "");

 Line: 281 -                  query += "" + (columns ? " ON DUPLICATE KEY UPDATE " + columns : "");

 Line: 282 -                  query += "" + (overwrite ? " ON DUPLICATE KEY UPDATE " + overwrite : "");

 Line: 287 -              query += " RETURNING " + returningExpression;

 Line: 289 -          return query;

 Line: 318 -       * Creates a columns string where values must be inserted to for INSERT INTO expression.

 Line: 370 -                          //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;

 Line: 376 -                          //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;

 Line: 400 -                          if (_this.connection.driver instanceof AbstractSqliteDriver_1.AbstractSqliteDriver || _this.connection.driver instanceof SapDriver_1.SapDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/SoftDeleteQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -      function SoftDeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 28 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 36 -       * Gets generated sql query without parameters being replaced.

 Line: 45 -       * Executes sql generated by query builder and returns raw database results.

 Line: 49 -              var queryRunner, transactionStartedByUs, broadcastResult, returningResultsEntityUpdator, _a, sql, parameters, updateResult, result, driver, broadcastResult, error_1, rollbackError_1;

 Line: 53 -                          queryRunner = this.obtainQueryRunner();

 Line: 58 -                          if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];

 Line: 59 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 67 -                          queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 82 -                          return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 85 -                          driver = queryRunner.connection.driver;

 Line: 103 -                          queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);

 Line: 111 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 122 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 132 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 152 -       * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.

 Line: 162 -       * Sets WHERE condition in the query builder.

 Line: 163 -       * If you had previously WHERE expression defined,

 Line: 164 -       * calling this function will override previously set WHERE conditions.

 Line: 177 -       * Adds new AND WHERE condition in the query builder.

 Line: 187 -       * Adds new OR WHERE condition in the query builder.

 Line: 197 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 203 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 209 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 231 -       * Sets ORDER BY condition in the query builder.

 Line: 257 -       * Adds ORDER BY condition in the query builder.

 Line: 278 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 298 -       * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 309 -       * Creates UPDATE express used to perform insert query.

 Line: 329 -                  throw new Error("The queryType must be \"soft-delete\" or \"restore\"");

 Line: 338 -          // we re-write parameters this way because we want our "UPDATE ... SET" parameters to be first in the list of "nativeParameters"

 Line: 348 -          // generate and return sql update query

 Line: 350 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + returningExpression;

 Line: 353 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + returningExpression + whereExpression;

 Line: 356 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?

 Line: 360 -       * Creates "ORDER BY" part of SQL query.

 Line: 379 -       * Creates "LIMIT" parts of SQL query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationRemover.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -          this.queryBuilder = queryBuilder;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 20 -       * Gets generated sql query without parameters being replaced.

 Line: 46 -                  if (!this.expressionMap.of) // todo: move this check before relation query builder creation?

 Line: 76 -                  if (!this.expressionMap.of) // todo: move this check before relation query builder creation?

 Line: 106 -                  if (!this.expressionMap.of) // todo: move this check before relation query builder creation?

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 20 -      RelationLoader.prototype.load = function (relation, entityOrEntities, queryRunner) {

 Line: 21 -          if (queryRunner && queryRunner.isReleased)

 Line: 22 -              queryRunner = undefined; // get new one if already closed

 Line: 24 -              return this.loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner);

 Line: 27 -              return this.loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner);

 Line: 30 -              return this.loadManyToManyOwner(relation, entityOrEntities, queryRunner);

 Line: 33 -              return this.loadManyToManyNotOwner(relation, entityOrEntities, queryRunner);

 Line: 41 -       * example: SELECT category.id AS category_id, category.name AS category_name FROM category category

 Line: 42 -       *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1

 Line: 44 -      RelationLoader.prototype.loadManyToOneOrOneToOneOwner = function (relation, entityOrEntities, queryRunner) {

 Line: 77 -       * SELECT post

 Line: 78 -       * FROM post post

 Line: 79 -       * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]

 Line: 81 -      RelationLoader.prototype.loadOneToManyOrOneToOneNotOwner = function (relation, entityOrEntities, queryRunner) {

 Line: 109 -       * SELECT category

 Line: 110 -       * FROM category category

 Line: 115 -      RelationLoader.prototype.loadManyToManyOwner = function (relation, entityOrEntities, queryRunner) {

 Line: 140 -       * SELECT post

 Line: 141 -       * FROM post post

 Line: 146 -      RelationLoader.prototype.loadManyToManyNotOwner = function (relation, entityOrEntities, queryRunner) {

 Line: 172 -      RelationLoader.prototype.enableLazyLoad = function (relation, entity, queryRunner) {

 Line: 199 -                  var loader = relationLoader.load(relation, this, queryRunner).then(function (result) { return relation.isOneToOne || relation.isManyToOne ? result[0] : result; });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/QueryExpressionMap.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -   * Contains all properties of the QueryBuilder that needs to be build a final query.

 Line: 24 -           * All aliases (including main alias) used in the query.

 Line: 28 -           * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.

 Line: 32 -           * Data needs to be SELECT-ed.

 Line: 36 -           * Whether SELECT is DISTINCT.

 Line: 40 -           * SELECT DISTINCT ON query (postgres).

 Line: 48 -           * Optional on conflict statement used in insertion query in postgres.

 Line: 52 -           * Optional on ignore statement used in insertion query in databases.

 Line: 68 -           * WHERE queries.

 Line: 89 -           * Parameters used to be escaped in final query.

 Line: 110 -           * Indicates if query builder creates a subquery.

 Line: 115 -           * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,

 Line: 116 -           * but user can use them in WHERE expressions.

 Line: 120 -           * Indicates if query result cache is enabled or not.

 Line: 129 -           * Used in INSERT query.

 Line: 138 -           * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).

 Line: 142 -           * Indicates if listeners and subscribers must be called before and after query execution.

 Line: 146 -           * Indicates if query must be wrapped into transaction.

 Line: 234 -           * Gets relation metadata of the relation this query builder works with.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 308 -   * Creates a new query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/ReturningStatementNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Thrown when user tries to build a query with RETURNING / OUTPUT statement,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/UpdateValuesMissingError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -          _this.message = "Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify updated values.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/LimitOnUpdateNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.

 Line: 12 -          _this.message = "Your database does not support LIMIT on UPDATE statements.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/InsertValuesMissingError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -          _this.message = "Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/QueryRunnerProviderAlreadyReleasedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Thrown when consumer tries to use query runner from query runner provider after it was released.

 Line: 12 -          _this.message = "Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/OptimisticLockCanNotBeUsedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Thrown when an optimistic lock cannot be used in query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/OffsetWithoutLimitNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.

 Line: 12 -          _this.message = "RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/QueryFailedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -   * Thrown when query execution has failed.

 Line: 16 -          ObjectUtils_1.ObjectUtils.assign(_this, tslib_1.__assign({}, driverError, { name: "QueryFailedError", query: query, parameters: parameters || [] }));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/cockroachdb/CockroachQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 80 -       * You cannot use query runner methods once its released.

 Line: 188 -       * Executes a given SQL query.

 Line: 195 -              var databaseConnection, queryStartTime_1, err_1;

 Line: 205 -                          queryStartTime_1 = +new Date();

 Line: 208 -                                  _this.queries.push({ query: query, parameters: parameters });

 Line: 211 -                              var queryEndTime = +new Date();

 Line: 212 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 213 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 214 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 217 -                                      _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 222 -                                      case "DELETE":

 Line: 223 -                                          // for DELETE query additionally return number of affected rows

 Line: 304 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM \"pg_database\" WHERE \"datname\" = '" + database + "'")];

 Line: 320 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '" + schema + "'")];

 Line: 338 -                          sql = "SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName;

 Line: 357 -                          sql = "SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName + " AND \"column_name\" = '" + columnName + "'";

 Line: 474 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 475 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 1693 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1735 -                          selectViewDropsQuery = "SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" " +

 Line: 1736 -                              ("FROM \"pg_views\" WHERE \"schemaname\" IN (" + schemaNamesString + ")");

 Line: 1743 -                          selectDropsQuery = "SELECT 'DROP TABLE IF EXISTS \"' || table_schema || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"information_schema\".\"tables\" WHERE \"table_schema\" IN (" + schemaNamesString + ")";

 Line: 1750 -                          selectSequenceDropsQuery = "SELECT 'DROP SEQUENCE \"' || sequence_schema || '\".\"' || sequence_name || '\";' as \"query\" FROM \"information_schema\".\"sequences\" WHERE \"sequence_schema\" IN (" + schemaNamesString + ")";

 Line: 1784 -              var hasTable, currentSchemaQuery, currentSchema, viewsCondition, query, dbViews;

 Line: 1793 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 1805 -                          query = "SELECT \"t\".*, \"v\".\"check_option\" FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " \"t\" " +

 Line: 1806 -                              ("INNER JOIN \"information_schema\".\"views\" \"v\" ON \"v\".\"table_schema\" = \"t\".\"schema\" AND \"v\".\"table_name\" = \"t\".\"name\" WHERE \"t\".\"type\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 1834 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 1846 -                          tablesSql = "SELECT * FROM \"information_schema\".\"tables\" WHERE " + tablesCondition;

 Line: 1847 -                          columnsSql = "SELECT * FROM \"information_schema\".\"columns\" WHERE \"is_hidden\" = 'NO' AND " + tablesCondition;

 Line: 1856 -                          constraintsSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", " +

 Line: 1859 -                              "FROM \"pg_constraint\" \"cnst\" " +

 Line: 1863 -                              ("WHERE \"t\".\"relkind\" = 'r' AND (" + constraintsCondition + ")");

 Line: 1864 -                          indicesSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", " +

 Line: 1867 -                              "FROM \"pg_class\" \"t\" " +

 Line: 1874 -                              ("WHERE \"t\".\"relkind\" = 'r' AND \"cnst\".\"contype\" IS NULL AND (" + constraintsCondition + ")");

 Line: 1883 -                          foreignKeysSql = "SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", " +

 Line: 1885 -                              "FROM ( " +

 Line: 1886 -                              "SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", \"cl\".\"relname\", " +

 Line: 1889 -                              "FROM \"pg_class\" \"cl\" " +

 Line: 1892 -                              ("WHERE \"con1\".\"contype\" = 'f' AND (" + foreignKeysCondition + ") ") +

 Line: 2121 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 2123 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 2160 -              var currentSchemaQuery, currentSchema, splittedName, schema, name, expression, _a, query, parameters;

 Line: 2163 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2179 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2196 -              var currentSchemaQuery, currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;

 Line: 2199 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2217 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2229 -          return new Query_1.Query("CREATE INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 2290 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 2292 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 2338 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/cockroachdb/CockroachDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -           * We store all created query runners because we need to release them.

 Line: 248 -       * Creates a query runner used to execute database queries.

 Line: 330 -       * and an array of parameter names to be passed to a query.

 Line: 514 -       * Creates generated map of values generated or returned by database after INSERT query.

 Line: 598 -       * Loads postgres query stream package.

 Line: 670 -                      case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/oracle/OracleDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 254 -       * Creates a query runner used to execute database queries.

 Line: 262 -       * and an array of parameter names to be passed to a query.

 Line: 516 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/oracle/OracleQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -       * You cannot use query runner methods once its released.

 Line: 150 -       * Executes a given SQL query.

 Line: 157 -              var queryStartTime_1, handler, executionOptions, databaseConnection, err_1;

 Line: 164 -                          queryStartTime_1 = +new Date();

 Line: 168 -                              var queryEndTime = +new Date();

 Line: 169 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 170 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 171 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 173 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 253 -                          sql = "SELECT \"TABLE_NAME\" FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" = '" + tableName + "'";

 Line: 272 -                          sql = "SELECT \"COLUMN_NAME\" FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" = '" + tableName + "' AND \"COLUMN_NAME\" = '" + columnName + "'";

 Line: 351 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 352 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 411 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 1528 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1557 -                          dropViewsQuery = "SELECT 'DROP VIEW \"' || VIEW_NAME || '\"' AS \"query\" FROM \"USER_VIEWS\"";

 Line: 1564 -                          dropTablesQuery = "SELECT 'DROP TABLE \"' || TABLE_NAME || '\" CASCADE CONSTRAINTS' AS \"query\" FROM \"USER_TABLES\"";

 Line: 1598 -              var hasTable, viewNamesString, query, dbViews;

 Line: 1607 -                          query = "SELECT \"T\".* FROM \"" + this.getTypeormMetadataTableName() + "\" \"T\" INNER JOIN \"USER_VIEWS\" \"V\" ON \"V\".\"VIEW_NAME\" = \"T\".\"name\" WHERE \"T\".\"type\" = 'VIEW'";

 Line: 1609 -                              query += " AND \"T\".\"name\" IN (" + viewNamesString + ")";

 Line: 1637 -                          tablesSql = "SELECT * FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" IN (" + tableNamesString + ")";

 Line: 1638 -                          columnsSql = "SELECT * FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" IN (" + tableNamesString + ")";

 Line: 1639 -                          indicesSql = "SELECT \"IND\".\"INDEX_NAME\", \"IND\".\"TABLE_NAME\", \"IND\".\"UNIQUENESS\", " +

 Line: 1641 -                              "FROM \"USER_INDEXES\" \"IND\" " +

 Line: 1644 -                              ("WHERE \"IND\".\"TABLE_NAME\" IN (" + tableNamesString + ") AND \"CON\".\"CONSTRAINT_NAME\" IS NULL ") +

 Line: 1646 -                          foreignKeysSql = "SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"REF_COL\".\"TABLE_NAME\" AS \"REFERENCED_TABLE_NAME\", " +

 Line: 1647 -                              "\"REF_COL\".\"COLUMN_NAME\" AS \"REFERENCED_COLUMN_NAME\", \"C\".\"DELETE_RULE\" AS \"ON_DELETE\" " +

 Line: 1648 -                              "FROM \"USER_CONSTRAINTS\" \"C\" " +

 Line: 1651 -                              ("WHERE \"C\".\"TABLE_NAME\" IN (" + tableNamesString + ") AND \"C\".\"CONSTRAINT_TYPE\" = 'R'");

 Line: 1652 -                          constraintsSql = "SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"CONSTRAINT_TYPE\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"C\".\"SEARCH_CONDITION\" " +

 Line: 1653 -                              "FROM \"USER_CONSTRAINTS\" \"C\" " +

 Line: 1655 -                              ("WHERE \"C\".\"TABLE_NAME\" IN (" + tableNamesString + ") AND \"C\".\"CONSTRAINT_TYPE\" IN ('C', 'U', 'P') AND \"C\".\"GENERATED\" = 'USER NAME'");

 Line: 1754 -                                          onDelete: dbForeignKey["ON_DELETE"],

 Line: 1814 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 1833 -          var query = ifExist ? "DROP TABLE IF EXISTS \"" + tableName + "\"" : "DROP TABLE \"" + tableName + "\"";

 Line: 1851 -              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1871 -              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1941 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 1952 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/postgres/PostgresQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 72 -       * You cannot use query runner methods once its released.

 Line: 148 -       * Executes a given SQL query.

 Line: 155 -              var databaseConnection, queryStartTime_1, err_1;

 Line: 165 -                          queryStartTime_1 = +new Date();

 Line: 169 -                              var queryEndTime = +new Date();

 Line: 170 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 171 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 172 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 174 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 179 -                                      case "DELETE":

 Line: 180 -                                      case "UPDATE":

 Line: 181 -                                          // for UPDATE and DELETE query additionally return number of affected rows

 Line: 272 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '" + schema + "'")];

 Line: 290 -                          sql = "SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName;

 Line: 309 -                          sql = "SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = " + parsedTableName.schema + " AND \"table_name\" = " + parsedTableName.tableName + " AND \"column_name\" = '" + columnName + "'";

 Line: 431 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 432 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 1773 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1815 -                          selectViewDropsQuery = "SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" " +

 Line: 1816 -                              ("FROM \"pg_views\" WHERE \"schemaname\" IN (" + schemaNamesString + ") AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')");

 Line: 1823 -                          selectTableDropsQuery = "SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as \"query\" FROM \"pg_tables\" WHERE \"schemaname\" IN (" + schemaNamesString + ") AND \"tablename\" NOT IN ('spatial_ref_sys')";

 Line: 1860 -              var hasTable, currentSchemaQuery, currentSchema, viewsCondition, query, dbViews;

 Line: 1869 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 1881 -                          query = "SELECT \"t\".*, \"v\".\"check_option\" FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " \"t\" " +

 Line: 1882 -                              ("INNER JOIN \"information_schema\".\"views\" \"v\" ON \"v\".\"table_schema\" = \"t\".\"schema\" AND \"v\".\"table_name\" = \"t\".\"name\" WHERE \"t\".\"type\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 1910 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 1922 -                          tablesSql = "SELECT * FROM \"information_schema\".\"tables\" WHERE " + tablesCondition;

 Line: 1923 -                          columnsSql = "SELECT *, ('\"' || \"udt_schema\" || '\".\"' || \"udt_name\" || '\"')::\"regtype\" AS \"regtype\" FROM \"information_schema\".\"columns\" WHERE " + tablesCondition;

 Line: 1932 -                          constraintsSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", " +

 Line: 1935 -                              "FROM \"pg_constraint\" \"cnst\" " +

 Line: 1939 -                              ("WHERE \"t\".\"relkind\" = 'r' AND (" + constraintsCondition + ")");

 Line: 1940 -                          indicesSql = "SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", " +

 Line: 1943 -                              "FROM \"pg_class\" \"t\" " +

 Line: 1950 -                              ("WHERE \"t\".\"relkind\" = 'r' AND \"cnst\".\"contype\" IS NULL AND (" + constraintsCondition + ")");

 Line: 1959 -                          foreignKeysSql = "SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", " +

 Line: 1962 -                              "FROM ( " +

 Line: 1963 -                              "SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", " +

 Line: 1968 -                              "FROM \"pg_class\" \"cl\" " +

 Line: 1971 -                              ("WHERE \"con1\".\"contype\" = 'f' AND (" + foreignKeysCondition + ") ") +

 Line: 2046 -                                                                  sql = "SELECT \"e\".\"enumlabel\" AS \"value\" FROM \"pg_enum\" \"e\" " +

 Line: 2049 -                                                                      ("WHERE \"n\".\"nspname\" = '" + dbTable["table_schema"] + "' AND \"t\".\"typname\" = '" + this.buildEnumName(table, tableColumn.name, false, true) + "'");

 Line: 2057 -                                                                  geometryColumnSql = "SELECT * FROM (\n                        SELECT\n                          \"f_table_schema\" \"table_schema\",\n                          \"f_table_name\" \"table_name\",\n                          \"f_geometry_column\" \"column_name\",\n                          \"srid\",\n                          \"type\"\n                        FROM \"geometry_columns\"\n                      ) AS _\n                      WHERE (" + tablesCondition + ") AND \"column_name\" = '" + tableColumn.name + "' AND \"table_name\" = '" + table.name + "'";

 Line: 2066 -                                                                  geographyColumnSql = "SELECT * FROM (\n                        SELECT\n                          \"f_table_schema\" \"table_schema\",\n                          \"f_table_name\" \"table_name\",\n                          \"f_geography_column\" \"column_name\",\n                          \"srid\",\n                          \"type\"\n                        FROM \"geography_columns\"\n                      ) AS _\n                      WHERE (" + tablesCondition + ") AND \"column_name\" = '" + tableColumn.name + "' AND \"table_name\" = '" + table.name + "'";

 Line: 2238 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 2240 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 2274 -              var currentSchemaQuery, currentSchema, splittedName, schema, name, expression, _a, query, parameters;

 Line: 2277 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2293 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2310 -              var currentSchemaQuery, currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;

 Line: 2313 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2331 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2354 -                          selectDropsQuery = "SELECT 'DROP TYPE IF EXISTS \"' || n.nspname || '\".\"' || t.typname || '\" CASCADE;' as \"query\" FROM \"pg_type\" \"t\" " +

 Line: 2357 -                              ("WHERE \"n\".\"nspname\" IN (" + schemaNames + ") GROUP BY \"n\".\"nspname\", \"t\".\"typname\"");

 Line: 2380 -                          sql = "SELECT \"n\".\"nspname\", \"t\".\"typname\" FROM \"pg_type\" \"t\" " +

 Line: 2382 -                              ("WHERE \"n\".\"nspname\" = " + schema + " AND \"t\".\"typname\" = '" + enumName + "'");

 Line: 2413 -          return new Query_1.Query("CREATE " + (index.isUnique ? "UNIQUE " : "") + "INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " " + (index.isSpatial ? "USING GiST " : "") + "(" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 2488 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 2490 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 2552 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 2561 -                          return [4 /*yield*/, this.query("SELECT \"udt_schema\", \"udt_name\" " +

 Line: 2562 -                                  ("FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = '" + schema + "' AND \"table_name\" = '" + name + "' AND \"column_name\"='" + column.name + "'"))];

 Line: 2602 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/postgres/PostgresDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -           * We store all created query runners because we need to release them.

 Line: 415 -       * Creates a query runner used to execute database queries.

 Line: 576 -       * and an array of parameter names to be passed to a query.

 Line: 799 -       * Creates generated map of values generated or returned by database after INSERT query.

 Line: 879 -       * Loads postgres query stream package.

 Line: 951 -                      case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];

 Line: 962 -       * Executes given query.

 Line: 964 -      PostgresDriver.prototype.executeQuery = function (connection, query) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqljs/SqljsQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 45 -       * Executes a given SQL query.

 Line: 52 -              var databaseConnection, queryStartTime, statement, maxQueryExecutionTime, queryEndTime, queryExecutionTime, result;

 Line: 56 -                  queryStartTime = +new Date();

 Line: 61 -                      queryEndTime = +new Date();

 Line: 62 -                      queryExecutionTime = queryEndTime - queryStartTime;

 Line: 63 -                      if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 64 -                          this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 76 -                      this.driver.connection.logger.logQueryError(e, query, parameters, this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqljs/SqljsDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 67 -       * Creates a query runner used to execute database queries.

 Line: 225 -       * Creates generated map of values generated or returned by database after INSERT query.

 Line: 232 -                  var query = "SELECT last_insert_rowid()";

 Line: 239 -                      _this.connection.logger.logQueryError(e, query, []);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/expo/ExpoDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/expo/ExpoQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 83 -       * Executes a given SQL query.

 Line: 90 -              var databaseConnection, queryStartTime;

 Line: 98 -                          queryStartTime = +new Date();

 Line: 108 -                                  var queryEndTime = +new Date();

 Line: 109 -                                  var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 110 -                                  if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {

 Line: 111 -                                      _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 113 -                                  // return id of inserted row, if query was insert statement.

 Line: 114 -                                  if (query.substr(0, 11) === "INSERT INTO") {

 Line: 125 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/aurora-data-api/AuroraDataApiDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 288 -       * Creates a query runner used to execute database queries.

 Line: 296 -       * and an array of parameter names to be passed to a query.

 Line: 570 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/aurora-data-api/AuroraDataApiConnection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -      function AuroraDataApiConnection(options, queryRunner) {

 Line: 11 -          _this.queryRunnter = queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/aurora-data-api/AuroraDataApiQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -       * You cannot use query runner methods once its released.

 Line: 116 -       * Executes a raw SQL query.

 Line: 198 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM `INFORMATION_SCHEMA`.`SCHEMATA` WHERE `SCHEMA_NAME` = '" + database + "'")];

 Line: 226 -                          sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "'";

 Line: 246 -                          sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "' AND `COLUMN_NAME` = '" + columnName + "'";

 Line: 340 -                          // createTable does not need separate method to create indices, because it create indices in the same query with table creation.

 Line: 342 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 343 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 507 -                                  up += " ON DELETE " + foreignKey.onDelete;

 Line: 509 -                                  up += " ON UPDATE " + foreignKey.onUpdate;

 Line: 513 -                                  down += " ON DELETE " + foreignKey.onDelete;

 Line: 515 -                                  down += " ON UPDATE " + foreignKey.onUpdate;

 Line: 742 -                                      up += " ON DELETE " + foreignKey.onDelete;

 Line: 744 -                                      up += " ON UPDATE " + foreignKey.onUpdate;

 Line: 748 -                                      down += " ON DELETE " + foreignKey.onDelete;

 Line: 750 -                                      down += " ON UPDATE " + foreignKey.onUpdate;

 Line: 1415 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1456 -                          selectViewDropsQuery = "SELECT concat('DROP VIEW IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`VIEWS` WHERE `TABLE_SCHEMA` = '" + dbName + "'";

 Line: 1464 -                          dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA` = '" + dbName + "'";

 Line: 1511 -                      case 0: return [4 /*yield*/, this.query("SELECT DATABASE() AS `db_name`")];

 Line: 1521 -              var hasTable, currentDatabase, viewsCondition, query, dbViews;

 Line: 1541 -                          query = "SELECT `t`.*, `v`.`check_option` FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " `t` " +

 Line: 1542 -                              ("INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 1581 -                          tablesSql = "SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE " + tablesCondition;

 Line: 1582 -                          columnsSql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE " + tablesCondition;

 Line: 1583 -                          primaryKeySql = "SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (" + tablesCondition + ")";

 Line: 1584 -                          collationsSql = "SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`";

 Line: 1593 -                          indicesSql = "SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` " +

 Line: 1595 -                              ("WHERE (" + indicesCondition + ") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL");

 Line: 1604 -                          foreignKeysSql = "SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, " +

 Line: 1605 -                              "`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` " +

 Line: 1606 -                              "FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` " +

 Line: 1608 -                              "WHERE " + foreignKeysCondition;

 Line: 1731 -                                              onDelete: dbForeignKey["ON_DELETE"],

 Line: 1732 -                                              onUpdate: dbForeignKey["ON_UPDATE"]

 Line: 1823 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 1825 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 1853 -              var currentDatabase, expression, _a, query, parameters;

 Line: 1864 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1881 -              var currentDatabase, viewName, qb, _a, query, parameters;

 Line: 1894 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1943 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 1945 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 1970 -       * Builds a part of query to create/change a column.

 Line: 2009 -              c += " ON UPDATE " + column.onUpdate;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/mongodb/MongoQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -           * Indicates if connection for this query runner is released.

 Line: 14 -           * Once its released, query runner cannot run queries anymore.

 Line: 15 -           * Always false for mongodb since mongodb has a single query executor instance.

 Line: 19 -           * Indicates if transaction is active in this query executor.

 Line: 36 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 38 -      MongoQueryRunner.prototype.cursor = function (collectionName, query) {

 Line: 61 -       * Count number of matching documents in the db to a query.

 Line: 63 -      MongoQueryRunner.prototype.count = function (collectionName, query, options) {

 Line: 103 -      MongoQueryRunner.prototype.deleteMany = function (collectionName, query, options) {

 Line: 116 -      MongoQueryRunner.prototype.deleteOne = function (collectionName, query, options) {

 Line: 129 -      MongoQueryRunner.prototype.distinct = function (collectionName, key, query, options) {

 Line: 133 -                      case 0: return [4 /*yield*/, this.getCollection(collectionName).distinct(key, query, options)];

 Line: 168 -      MongoQueryRunner.prototype.findOneAndDelete = function (collectionName, query, options) {

 Line: 181 -      MongoQueryRunner.prototype.findOneAndReplace = function (collectionName, query, replacement, options) {

 Line: 194 -      MongoQueryRunner.prototype.findOneAndUpdate = function (collectionName, query, update, options) {

 Line: 395 -      MongoQueryRunner.prototype.replaceOne = function (collectionName, query, doc, options) {

 Line: 427 -      MongoQueryRunner.prototype.updateMany = function (collectionName, query, update, options) {

 Line: 440 -      MongoQueryRunner.prototype.updateOne = function (collectionName, query, update, options) {

 Line: 521 -       * Executes a given SQL query.

 Line: 524 -          throw new Error("Executing SQL query is not supported by MongoDB driver.");

 Line: 1074 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 1075 -       * instead they will be memorized into a special variable inside query runner.

 Line: 1082 -       * Disables special query runner mode in which sql queries won't be executed

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/mongodb/MongoDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 195 -       * Creates a query runner used to execute database queries.

 Line: 203 -       * and an array of parameter names to be passed to a query.

 Line: 284 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlite-abstract/AbstractSqliteDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 255 -       * and an array of parameter names to be passed to a query.

 Line: 414 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -       * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.

 Line: 175 -                          sql = "SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" = '" + tableName + "'";

 Line: 1196 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1202 -                      case 0: return [4 /*yield*/, this.query("DELETE FROM \"" + tableName + "\"")];

 Line: 1228 -                          selectViewDropsQuery = "SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'";

 Line: 1235 -                          selectTableDropsQuery = "SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'";

 Line: 1273 -              var hasTable, viewNamesString, query, dbViews;

 Line: 1282 -                          query = "SELECT \"t\".* FROM \"" + this.getTypeormMetadataTableName() + "\" \"t\" INNER JOIN \"sqlite_master\" s ON \"s\".\"name\" = \"t\".\"name\" AND \"s\".\"type\" = 'view' WHERE \"t\".\"type\" = 'VIEW'";

 Line: 1284 -                              query += " AND \"t\".\"name\" IN (" + viewNamesString + ")";

 Line: 1312 -                          return [4 /*yield*/, this.query("SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" IN (" + tableNamesString + ")")];

 Line: 1315 -                          return [4 /*yield*/, this.query("SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'index' AND \"tbl_name\" IN (" + tableNamesString + ")")];

 Line: 1457 -                                                              condition = /WHERE (.*)/.exec(indexDef["sql"]);

 Line: 1534 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 1536 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 1557 -          var query = ifExist ? "DROP TABLE IF EXISTS \"" + tableName + "\"" : "DROP TABLE \"" + tableName + "\"";

 Line: 1574 -              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1594 -              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1602 -          return new Query_1.Query("CREATE " + (index.isUnique ? "UNIQUE " : "") + "INDEX \"" + index.name + "\" ON \"" + table.name + "\" (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 1612 -       * Builds a query for create column.

 Line: 1670 -                              upQueries.push(new Query_1.Query("INSERT INTO \"" + newTable.name + "\"(" + newColumnNames + ") SELECT " + oldColumnNames + " FROM \"" + oldTable.name + "\""));

 Line: 1671 -                              downQueries.push(new Query_1.Query("INSERT INTO \"" + oldTable.name + "\"(" + oldColumnNames + ") SELECT " + newColumnNames + " FROM \"" + newTable.name + "\""));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlserver/MssqlParameter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * Sql server driver requires parameter types to be specified fo input parameters used in the query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlserver/SqlServerDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 265 -       * Creates a query runner used to execute database queries.

 Line: 273 -       * and an array of parameter names to be passed to a query.

 Line: 519 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlserver/SqlServerQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 35 -           * Last executed query in a transaction.

 Line: 37 -           * that's why we store last executed query promise to wait it when we execute next query.

 Line: 60 -       * You cannot use query runner methods once its released.

 Line: 163 -       * Executes a given SQL query.

 Line: 184 -                              var pool, request_1, queryStartTime_1, err_1;

 Line: 211 -                                          queryStartTime_1 = +new Date();

 Line: 215 -                                              var queryEndTime = +new Date();

 Line: 216 -                                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 217 -                                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 218 -                                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 229 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 233 -                                              var queryType = query.slice(0, query.indexOf(" "));

 Line: 235 -                                                  case "DELETE":

 Line: 236 -                                                      // for DELETE query additionally return number of affected rows

 Line: 315 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 360 -              var query, results;

 Line: 364 -                          query = database ? "SELECT * FROM \"" + database + "\".\"sys\".\"schema\"" : "SELECT * FROM \"sys\".\"schemas\"";

 Line: 381 -                      case 0: return [4 /*yield*/, this.query("SELECT DB_ID('" + database + "') as \"db_id\"")];

 Line: 398 -                      case 0: return [4 /*yield*/, this.query("SELECT SCHEMA_ID('" + schema + "') as \"schema_id\"")];

 Line: 418 -                          sql = "SELECT * FROM \"" + parsedTableName.database + "\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '" + parsedTableName.name + "' AND \"TABLE_SCHEMA\" = " + schema;

 Line: 438 -                          sql = "SELECT * FROM \"" + parsedTableName.database + "\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '" + parsedTableName.name + "' AND \"COLUMN_NAME\" = '" + columnName + "' AND \"TABLE_SCHEMA\" = " + schema;

 Line: 588 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 589 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 650 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 1840 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1878 -                              ? "SELECT * FROM \"" + database + "\".\"INFORMATION_SCHEMA\".\"VIEWS\""

 Line: 1879 -                              : "SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"";

 Line: 1891 -                              ? "SELECT * FROM \"" + database + "\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'"

 Line: 1892 -                              : "SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'";

 Line: 1902 -                                              dropForeignKeySql = "SELECT 'ALTER TABLE \"" + tablesResult["TABLE_CATALOG"] + "\".\"' + OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\", DB_ID('" + tablesResult["TABLE_CATALOG"] + "')) + '\".\"' + OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('" + tablesResult["TABLE_CATALOG"] + "')) + '\" " +

 Line: 1903 -                                                  ("DROP CONSTRAINT \"' + \"fk\".\"name\" + '\"' as \"query\" FROM \"" + tablesResult["TABLE_CATALOG"] + "\".\"sys\".\"foreign_keys\" AS \"fk\" ") +

 Line: 1904 -                                                  ("WHERE \"fk\".\"referenced_object_id\" = OBJECT_ID('\"" + tablesResult["TABLE_CATALOG"] + "\".\"" + tablesResult["TABLE_SCHEMA"] + "\".\"" + tablesResult["TABLE_NAME"] + "\"')");

 Line: 1957 -                      case 0: return [4 /*yield*/, this.query("SELECT DB_NAME() AS \"db_name\"")];

 Line: 1973 -                      case 0: return [4 /*yield*/, this.query("SELECT SCHEMA_NAME() AS \"schema_name\"")];

 Line: 1983 -              var hasTable, currentSchema, currentDatabase, extractTableSchemaAndName, dbNames, viewsCondition, query, dbViews;

 Line: 2026 -                          query = dbNames.map(function (dbName) {

 Line: 2027 -                              return "SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM " + _this.escapePath(_this.getTypeormMetadataTableName()) + " \"t\" " +

 Line: 2028 -                                  ("INNER JOIN \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 2029 -                          }).join(" UNION ALL ");

 Line: 2106 -                              return "SELECT * FROM \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE " + tablesCondition;

 Line: 2107 -                          }).join(" UNION ALL ");

 Line: 2109 -                              return "SELECT * FROM \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE " + tablesCondition;

 Line: 2110 -                          }).join(" UNION ALL ");

 Line: 2117 -                              return "SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" " +

 Line: 2118 -                                  ("FROM \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ") +

 Line: 2121 -                                  ("WHERE (" + constraintsCondition + ") AND \"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')");

 Line: 2122 -                          }).join(" UNION ALL ");

 Line: 2124 -                              return "SELECT \"fk\".\"name\" AS \"FK_NAME\", '" + dbName + "' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", " +

 Line: 2126 -                                  "\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" " +

 Line: 2127 -                                  ("FROM \"" + dbName + "\".\"sys\".\"foreign_keys\" \"fk\" ") +

 Line: 2135 -                          }).join(" UNION ALL ");

 Line: 2137 -                              return "SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" " +

 Line: 2138 -                                  ("FROM \"" + dbName + "\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ") +

 Line: 2139 -                                  ("WHERE COLUMNPROPERTY(object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), \"COLUMN_NAME\", 'IsIdentity') = 1 AND \"TABLE_SCHEMA\" IN (" + schemaNamesString + ")");

 Line: 2140 -                          }).join(" UNION ALL ");

 Line: 2141 -                          dbCollationsSql = "SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"";

 Line: 2143 -                              return "SELECT '" + dbName + "' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", " +

 Line: 2145 -                                  ("FROM \"" + dbName + "\".\"sys\".\"indexes\" \"ind\" ") +

 Line: 2150 -                                  "WHERE \"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0";

 Line: 2151 -                          }).join(" UNION ALL ");

 Line: 2306 -                                              onDelete: dbForeignKey["ON_DELETE"].replace("_", " "),

 Line: 2307 -                                              onUpdate: dbForeignKey["ON_UPDATE"].replace("_", " ") // SqlServer returns NO_ACTION, instead of NO ACTION

 Line: 2378 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 2380 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 2398 -          var query = ifExist ? "DROP TABLE IF EXISTS " + this.escapePath(tableOrName) : "DROP TABLE " + this.escapePath(tableOrName);

 Line: 2411 -              var currentSchema, parsedTableName, expression, _a, query, parameters;

 Line: 2423 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2440 -              var currentSchema, parsedTableName, qb, _a, query, parameters;

 Line: 2454 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2465 -          return new Query_1.Query("CREATE " + (index.isUnique ? "UNIQUE " : "") + "INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 2526 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 2528 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 2611 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/react-native/ReactNativeDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/react-native/ReactNativeQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -       * Executes a given SQL query.

 Line: 30 -              var databaseConnection, queryStartTime;

 Line: 38 -                          queryStartTime = +new Date();

 Line: 42 -                              var queryEndTime = +new Date();

 Line: 43 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 44 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 45 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 46 -                              // return id of inserted row, if query was insert statement.

 Line: 47 -                              if (query.substr(0, 11) === "INSERT INTO") {

 Line: 58 -                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/mysql/MysqlDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 328 -       * Creates a query runner used to execute database queries.

 Line: 336 -       * and an array of parameter names to be passed to a query.

 Line: 628 -       * Creates generated map of values generated or returned by database after INSERT query.

 Line: 784 -              // we give error before calling any other method that creates actual query runner

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/mysql/MysqlQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -       * You cannot use query runner methods once its released.

 Line: 142 -       * Executes a raw SQL query.

 Line: 149 -              var databaseConnection, queryStartTime_1, err_1;

 Line: 159 -                          queryStartTime_1 = +new Date();

 Line: 163 -                              var queryEndTime = +new Date();

 Line: 164 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 165 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 166 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 168 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 245 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM `INFORMATION_SCHEMA`.`SCHEMATA` WHERE `SCHEMA_NAME` = '" + database + "'")];

 Line: 273 -                          sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "'";

 Line: 293 -                          sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '" + parsedTableName.database + "' AND `TABLE_NAME` = '" + parsedTableName.tableName + "' AND `COLUMN_NAME` = '" + columnName + "'";

 Line: 387 -                          // createTable does not need separate method to create indices, because it create indices in the same query with table creation.

 Line: 389 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 390 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 555 -                                  up += " ON DELETE " + foreignKey.onDelete;

 Line: 557 -                                  up += " ON UPDATE " + foreignKey.onUpdate;

 Line: 561 -                                  down += " ON DELETE " + foreignKey.onDelete;

 Line: 563 -                                  down += " ON UPDATE " + foreignKey.onUpdate;

 Line: 791 -                                      up += " ON DELETE " + foreignKey.onDelete;

 Line: 793 -                                      up += " ON UPDATE " + foreignKey.onUpdate;

 Line: 797 -                                      down += " ON DELETE " + foreignKey.onDelete;

 Line: 799 -                                      down += " ON UPDATE " + foreignKey.onUpdate;

 Line: 1464 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1505 -                          selectViewDropsQuery = "SELECT concat('DROP VIEW IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`VIEWS` WHERE `TABLE_SCHEMA` = '" + dbName + "'";

 Line: 1513 -                          dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA` = '" + dbName + "'";

 Line: 1560 -                      case 0: return [4 /*yield*/, this.query("SELECT DATABASE() AS `db_name`")];

 Line: 1570 -              var hasTable, currentDatabase, viewsCondition, query, dbViews;

 Line: 1590 -                          query = "SELECT `t`.*, `v`.`check_option` FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " `t` " +

 Line: 1591 -                              ("INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : ""));

 Line: 1630 -                          tablesSql = "SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE " + tablesCondition;

 Line: 1631 -                          columnsSql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE " + tablesCondition;

 Line: 1632 -                          primaryKeySql = "SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (" + tablesCondition + ")";

 Line: 1633 -                          collationsSql = "SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`";

 Line: 1642 -                          indicesSql = "SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` " +

 Line: 1644 -                              ("WHERE (" + indicesCondition + ") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL");

 Line: 1653 -                          foreignKeysSql = "SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, " +

 Line: 1654 -                              "`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` " +

 Line: 1655 -                              "FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` " +

 Line: 1657 -                              "WHERE " + foreignKeysCondition;

 Line: 1795 -                                              onDelete: dbForeignKey["ON_DELETE"],

 Line: 1796 -                                              onUpdate: dbForeignKey["ON_UPDATE"]

 Line: 1888 -                      constraint += " ON DELETE " + fk.onDelete;

 Line: 1890 -                      constraint += " ON UPDATE " + fk.onUpdate;

 Line: 1918 -              var currentDatabase, expression, _a, query, parameters;

 Line: 1929 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 1946 -              var currentDatabase, viewName, qb, _a, query, parameters;

 Line: 1959 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2009 -              sql += " ON DELETE " + foreignKey.onDelete;

 Line: 2011 -              sql += " ON UPDATE " + foreignKey.onUpdate;

 Line: 2036 -       * Builds a part of query to create/change a column.

 Line: 2075 -              c += " ON UPDATE " + column.onUpdate;

 Line: 2083 -                      case 0: return [4 /*yield*/, this.query("SELECT VERSION() AS `version`")];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/Query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * This class stores query and its parameters

 Line: 7 -          this.query = query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlite/SqliteDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 46 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlite/SqliteQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -       * Executes a given SQL query.

 Line: 34 -              var handler, databaseConnection, queryStartTime, isInsertQuery;

 Line: 41 -                              var queryEndTime = +new Date();

 Line: 42 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 43 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 44 -                                  connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 46 -                                  connection.logger.logQueryError(err, query, parameters, this);

 Line: 57 -                          queryStartTime = +new Date();

 Line: 58 -                          isInsertQuery = query.substr(0, 11) === "INSERT INTO";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/cordova/CordovaQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -       * Executes a given SQL query.

 Line: 30 -              var databaseConnection, queryStartTime;

 Line: 38 -                          queryStartTime = +new Date();

 Line: 42 -                              var queryEndTime = +new Date();

 Line: 43 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 44 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 45 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 46 -                              if (query.substr(0, 11) === "INSERT INTO") {

 Line: 57 -                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 74 -          const sql = columns.length > 0 ? (`INSERT INTO "${tableName}"(${columns}) VALUES (${values})`) : `INSERT INTO "${tableName}" DEFAULT VALUES`;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/cordova/CordovaDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 44 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/nativescript/NativescriptDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/nativescript/NativescriptQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -       * Executes a given SQL query.

 Line: 31 -              var isInsertQuery = query.substr(0, 11) === "INSERT INTO";

 Line: 35 -                  var queryEndTime = +new Date();

 Line: 36 -                  var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 37 -                  if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 38 -                      connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 40 -                      connection.logger.logQueryError(err, query, parameters, this);

 Line: 49 -              var queryStartTime = +new Date();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sap/SapQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -           * Last executed query in a transaction.

 Line: 34 -           * This is needed because we cannot rely on parallel queries because we use second query

 Line: 70 -       * You cannot use query runner methods once its released.

 Line: 147 -       * Executes a given SQL query.

 Line: 168 -                              var databaseConnection_1, queryStartTime_1, isInsertQuery_1, statement, err_1;

 Line: 180 -                                          queryStartTime_1 = +new Date();

 Line: 181 -                                          isInsertQuery_1 = query.substr(0, 11) === "INSERT INTO";

 Line: 186 -                                              var queryEndTime = +new Date();

 Line: 187 -                                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 188 -                                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 189 -                                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 200 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 206 -                                                      var lastIdQuery_1 = "SELECT CURRENT_IDENTITY_VALUE() FROM \"SYS\".\"DUMMY\"";

 Line: 260 -                      case 0: return [4 /*yield*/, this.query("SELECT DATABASE_NAME FROM \"SYS\".\"M_DATABASES\"")];

 Line: 274 -              var query, results;

 Line: 278 -                          query = database ? "SELECT * FROM \"" + database + "\".\"SYS\".\"SCHEMAS\"" : "SELECT * FROM \"SYS\".\"SCHEMAS\"";

 Line: 329 -                          sql = "SELECT * FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 348 -                          sql = "SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE \"SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"TABLE_NAME\" = " + parsedTableName.tableName + " AND \"COLUMN_NAME\" = '" + columnName + "'";

 Line: 388 -                          return [4 /*yield*/, this.query("SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '" + schema + "'")];

 Line: 418 -                          return [4 /*yield*/, this.query("SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '" + schema + "'")];

 Line: 461 -                          // if createForeignKeys is true, we must drop created foreign keys in down query.

 Line: 462 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 523 -                          // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.

 Line: 631 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '" + schemaName + "' AND \"REFERENCED_TABLE_NAME\" = '" + oldTableName + "'";

 Line: 646 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 647 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 736 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"REFERENCED_TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 751 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 752 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 1101 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"REFERENCED_TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 1116 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 1117 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 1263 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"REFERENCED_TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 1278 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 1279 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 1341 -                          referencedForeignKeySql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = " + parsedTableName.schema + " AND \"REFERENCED_TABLE_NAME\" = " + parsedTableName.tableName;

 Line: 1356 -                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 1357 -                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 1774 -       * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.

 Line: 1816 -                          selectTableDropsQuery = "SELECT 'DROP TABLE \"' || schema_name || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" IN (" + schemaNamesString + ") AND \"TABLE_NAME\" NOT IN ('SYS_AFL_GENERATOR_PARAMETERS') AND \"IS_COLUMN_TABLE\" = 'TRUE'";

 Line: 1856 -                      case 0: return [4 /*yield*/, this.query("SELECT \"VALUE\" AS \"db_name\" FROM \"SYS\".\"M_SYSTEM_OVERVIEW\" WHERE \"SECTION\" = 'System' and \"NAME\" = 'Instance ID'")];

 Line: 1872 -                      case 0: return [4 /*yield*/, this.query("SELECT CURRENT_SCHEMA AS \"schema_name\" FROM \"SYS\".\"DUMMY\"")];

 Line: 1882 -              var hasTable, currentSchema, viewsCondition, query, dbViews;

 Line: 1902 -                          query = "SELECT \"t\".* FROM " + this.escapePath(this.getTypeormMetadataTableName()) + " \"t\" WHERE \"t\".\"type\" = 'VIEW' " + (viewsCondition ? "AND (" + viewsCondition + ")" : "");

 Line: 1941 -                          tablesSql = "SELECT * FROM \"SYS\".\"TABLES\" WHERE " + tablesCondition;

 Line: 1942 -                          columnsSql = "SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE " + tablesCondition;

 Line: 1951 -                          constraintsSql = "SELECT * FROM \"SYS\".\"CONSTRAINTS\" WHERE (" + constraintsCondition + ")";

 Line: 1960 -                          indicesSql = "SELECT \"I\".\"INDEX_TYPE\", \"I\".\"SCHEMA_NAME\", \"I\".\"TABLE_NAME\", \"I\".\"INDEX_NAME\", \"IC\".\"COLUMN_NAME\", \"I\".\"CONSTRAINT\" " +

 Line: 1961 -                              "FROM \"SYS\".\"INDEXES\" \"I\" INNER JOIN \"SYS\".\"INDEX_COLUMNS\" \"IC\" ON \"IC\".\"INDEX_OID\" = \"I\".\"INDEX_OID\" " +

 Line: 1962 -                              ("WHERE (" + indicesCondition + ") AND (\"I\".\"CONSTRAINT\" IS NULL OR \"I\".\"CONSTRAINT\" != 'PRIMARY KEY') AND \"I\".\"INDEX_NAME\" NOT LIKE '%_SYS_FULLTEXT_%'");

 Line: 1971 -                          foreignKeysSql = "SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE (" + foreignKeysCondition + ")";

 Line: 2109 -                                                      onDelete: dbForeignKey["DELETE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["DELETE_RULE"],

 Line: 2110 -                                                      onUpdate: dbForeignKey["UPDATE_RULE"] === "RESTRICT" ? "NO ACTION" : dbForeignKey["UPDATE_RULE"],

 Line: 2193 -                      constraint += " ON DELETE " + onDelete;

 Line: 2197 -                      constraint += " ON UPDATE " + onUpdate;

 Line: 2216 -          var query = ifExist ? "DROP TABLE IF EXISTS " + this.escapePath(tableOrName) : "DROP TABLE " + this.escapePath(tableOrName);

 Line: 2229 -              var currentSchema, splittedName, schema, name, expression, _a, query, parameters;

 Line: 2247 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2264 -              var currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;

 Line: 2284 -                              .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];

 Line: 2308 -          return new Query_1.Query("CREATE " + indexType + "INDEX \"" + index.name + "\" ON " + this.escapePath(table) + " (" + columns + ") " + (index.where ? "WHERE " + index.where : ""));

 Line: 2363 -              sql += " ON DELETE " + onDelete;

 Line: 2367 -              sql += " ON UPDATE " + onUpdate;

 Line: 2432 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sap/SapDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 223 -       * Creates a query runner used to execute database queries.

 Line: 231 -       * and an array of parameter names to be passed to a query.

 Line: 468 -       * Creates generated map of values generated or returned by database after INSERT query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/RepositoryFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -      RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {

 Line: 26 -                  queryRunner: queryRunner,

 Line: 43 -                  queryRunner: queryRunner,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/Repository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -       * Creates a new query builder that can be used to build a sql query.

 Line: 15 -      Repository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 16 -          return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);

 Line: 100 -       * Executes fast and efficient INSERT query.

 Line: 101 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 109 -       * Executes fast and efficient UPDATE query.

 Line: 118 -       * Executes fast and efficient DELETE query.

 Line: 127 -       * Executes fast and efficient SOFT-DELETE query.

 Line: 136 -       * Executes fast and efficient SOFT-DELETE query.

 Line: 182 -       * Executes a raw SQL query and returns a raw database results.

 Line: 183 -       * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/TreeRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 84 -       * Creates a query builder used to get descendants of the entities in a tree.

 Line: 170 -       * Creates a query builder used to get ancestors of the entities in the tree.

 Line: 206 -              // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/AbstractRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -       * Creates a new query builder for the repository's entity that can be used to build a sql query.

 Line: 60 -       * Creates a new query builder for the given entity that can be used to build a sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/BaseEntity.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 95 -       * Creates a new query builder that can be used to build a sql query.

 Line: 145 -       * Executes fast and efficient INSERT query.

 Line: 146 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 154 -       * Executes fast and efficient UPDATE query.

 Line: 163 -       * Executes fast and efficient DELETE query.

 Line: 209 -       * Executes a raw SQL query and returns a raw database results.

 Line: 210 -       * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/MongoRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -       * Raw SQL query execution is not supported by MongoDB.

 Line: 26 -      MongoRepository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 57 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 60 -          return this.manager.createCursor(this.metadata.target, query);

 Line: 63 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 67 -          return this.manager.createEntityCursor(this.metadata.target, query);

 Line: 89 -       * Count number of matching documents in the db to a query.

 Line: 92 -          return this.manager.count(this.metadata.target, query || {}, options);

 Line: 112 -          return this.manager.deleteMany(this.metadata.tableName, query, options);

 Line: 118 -          return this.manager.deleteOne(this.metadata.tableName, query, options);

 Line: 123 -      MongoRepository.prototype.distinct = function (key, query, options) {

 Line: 124 -          return this.manager.distinct(this.metadata.tableName, key, query, options);

 Line: 142 -          return this.manager.findOneAndDelete(this.metadata.tableName, query, options);

 Line: 148 -          return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);

 Line: 154 -          return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);

 Line: 257 -          return this.manager.replaceOne(this.metadata.tableName, query, doc, options);

 Line: 269 -          return this.manager.updateMany(this.metadata.tableName, query, update, options);

 Line: 275 -          return this.manager.updateOne(this.metadata.tableName, query, update, options);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/migration/MigrationExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -      function MigrationExecutor(connection, queryRunner) {

 Line: 18 -          this.queryRunner = queryRunner;

 Line: 148 -              var e_1, _a, hasUnappliedMigrations, queryRunner, executedMigrations, allMigrations, _loop_1, this_1, allMigrations_1, allMigrations_1_1, migration;

 Line: 153 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 188 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 203 -              var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, successMigrations, pendingMigrations, transactionStartedByUs, err_1, rollbackError_1;

 Line: 208 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 234 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 248 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 261 -                                              return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 275 -                                                              return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 293 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 304 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 314 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 329 -              var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_2, rollbackError_2;

 Line: 333 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 359 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 374 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 385 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 395 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 421 -                          return [4 /*yield*/, queryRunner.hasTable(this.migrationsTable)];

 Line: 425 -                          return [4 /*yield*/, queryRunner.createTable(new Table_1.Table({

 Line: 467 -                          mongoRunner = queryRunner;

 Line: 546 -                          mongoRunner = queryRunner;

 Line: 552 -                          qb = queryRunner.manager.createQueryBuilder();

 Line: 584 -                          mongoRunner = queryRunner;

 Line: 590 -                          qb = queryRunner.manager.createQueryBuilder();

 Line: 607 -              var queryRunner;

 Line: 611 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 618 -                          return [4 /*yield*/, queryRunner.release()];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/cache/RedisQueryResultCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -   * Caches query result into Redis database.

 Line: 87 -       * Caches given query result.

 Line: 91 -      RedisQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 120 -       * Stores given query result in the cache.

 Line: 122 -      RedisQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 165 -      RedisQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/cache/QueryResultCacheFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -   * Caches query result into Redis database.

 Line: 18 -       * Creates a new query result cache based on connection options.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/cache/DbQueryResultCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -   * Caches query result into current database, into separate table called "query-result-cache".

 Line: 53 -                          queryRunner = this.getQueryRunner(queryRunner);

 Line: 55 -                          return [4 /*yield*/, queryRunner.hasTable(this.queryResultCacheTable)];

 Line: 60 -                          return [4 /*yield*/, queryRunner.createTable(new Table_1.Table({

 Line: 109 -       * Caches given query result.

 Line: 113 -      DbQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 114 -          queryRunner = this.getQueryRunner(queryRunner);

 Line: 128 -                      .where("dbms_lob.compare(" + qb.escape("cache") + "." + qb.escape("query") + ", :query) = 0", { query: options.query })

 Line: 133 -                  .setParameters({ query: this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver ? new MssqlParameter_1.MssqlParameter(options.query, "nvarchar") : options.query })

 Line: 146 -       * Stores given query result in the cache.

 Line: 148 -      DbQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 154 -                          queryRunner = this.getQueryRunner(queryRunner);

 Line: 161 -                                  query: new MssqlParameter_1.MssqlParameter(options.query, "nvarchar"),

 Line: 166 -                          qb = queryRunner.manager

 Line: 177 -                          qb = queryRunner.manager

 Line: 192 -                      return [4 /*yield*/, queryRunner.manager

 Line: 219 -      DbQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

 Line: 242 -       * Gets a query runner to work with.

 Line: 246 -              return queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/logger/DebugLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -       * Logs query and parameters used in it.

 Line: 21 -      DebugLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 30 -       * Logs query that failed.

 Line: 32 -      DebugLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 42 -       * Logs query that is slow.

 Line: 44 -      DebugLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 56 -      DebugLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 64 -      DebugLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 73 -      DebugLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/logger/AdvancedConsoleLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -       * Logs query and parameters used in it.

 Line: 20 -      AdvancedConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 22 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 27 -       * Logs query that is failed.

 Line: 29 -      AdvancedConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 31 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 37 -       * Logs query that is slow.

 Line: 39 -      AdvancedConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 40 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 47 -      AdvancedConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 55 -      AdvancedConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 62 -      AdvancedConsoleLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/logger/SimpleConsoleLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -       * Logs query and parameters used in it.

 Line: 19 -      SimpleConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 21 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 26 -       * Logs query that is failed.

 Line: 28 -      SimpleConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 30 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 36 -       * Logs query that is slow.

 Line: 38 -      SimpleConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 39 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 46 -      SimpleConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 54 -      SimpleConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 61 -      SimpleConsoleLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/logger/FileLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -       * Logs query and parameters used in it.

 Line: 20 -      FileLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 22 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 27 -       * Logs query that is failed.

 Line: 29 -      FileLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 31 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 39 -       * Logs query that is slow.

 Line: 41 -      FileLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 42 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 48 -      FileLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 56 -      FileLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 63 -      FileLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/metadata/RelationMetadata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 36 -           * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/metadata/types/EventListenerTypes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -      EventListenerTypes.BEFORE_INSERT = "before-insert";

 Line: 10 -      EventListenerTypes.AFTER_INSERT = "after-insert";

 Line: 11 -      EventListenerTypes.BEFORE_UPDATE = "before-update";

 Line: 12 -      EventListenerTypes.AFTER_UPDATE = "after-update";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/metadata/EntityMetadata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 202 -           * Listener metadatas with "AFTER INSERT" type.

 Line: 206 -           * Listener metadatas with "AFTER INSERT" type.

 Line: 210 -           * Listener metadatas with "AFTER UPDATE" type.

 Line: 214 -           * Listener metadatas with "AFTER UPDATE" type.

 Line: 248 -              this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner); });

 Line: 253 -          this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner); });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/metadata/ColumnMetadata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -           * Indicates if column is selected by query builder or not.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-runner/BaseQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -           * Indicates if connection for this query runner is released.

 Line: 13 -           * Once its released, query runner cannot run queries anymore.

 Line: 34 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 118 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 119 -       * instead they will be memorized into a special variable inside query runner.

 Line: 127 -       * Disables special query runner mode in which sql queries won't be executed

</Result>
</report_mosca>

