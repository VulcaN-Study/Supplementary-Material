{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 12,
          "line": 1
        },
        "extra": {
          "line": "MIT License",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 13,
          "line": 2
        },
        "extra": {
          "line": "  \"presets\": [[\"env\", {",
          "message": "Syntax error"
        },
        "path": "/src/src/.babelrc",
        "start": {
          "col": 12,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_md5": {
      "files": [
        {
          "file_path": "/src/lib/utils/md5.js",
          "match_lines": [
            7,
            7
          ],
          "match_position": [
            10,
            33
          ],
          "match_string": "  return crypto.createHash('md5').update(string).digest(encoding);"
        },
        {
          "file_path": "/src/lib/utils/md5.js",
          "match_lines": [
            12,
            12
          ],
          "match_position": [
            40,
            63
          ],
          "match_string": "    fs.createReadStream(filename).pipe(crypto.createHash('md5').setEncoding('hex')).on('finish', function () {"
        },
        {
          "file_path": "/src/lib/utils/objectHash.js",
          "match_lines": [
            6,
            6
          ],
          "match_position": [
            14,
            37
          ],
          "match_string": "  let hash = crypto.createHash('md5');"
        },
        {
          "file_path": "/src/lib/Bundle.js",
          "match_lines": [
            373,
            373
          ],
          "match_position": [
            16,
            39
          ],
          "match_string": "    let hash = crypto.createHash('md5');"
        },
        {
          "file_path": "/src/src/utils/md5.js",
          "match_lines": [
            5,
            6
          ],
          "match_position": [
            10,
            22
          ],
          "match_string": "  return crypto\n\n    .createHash('md5')"
        },
        {
          "file_path": "/src/src/utils/md5.js",
          "match_lines": [
            14,
            14
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "      .pipe(crypto.createHash('md5').setEncoding('hex'))"
        },
        {
          "file_path": "/src/src/utils/objectHash.js",
          "match_lines": [
            4,
            4
          ],
          "match_position": [
            14,
            37
          ],
          "match_string": "  let hash = crypto.createHash('md5');"
        },
        {
          "file_path": "/src/src/Bundle.js",
          "match_lines": [
            276,
            276
          ],
          "match_position": [
            16,
            39
          ],
          "match_string": "    let hash = crypto.createHash('md5');"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "MD5 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
