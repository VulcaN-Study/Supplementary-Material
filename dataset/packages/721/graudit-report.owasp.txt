/src/src/visitors/fs.js-33-          .get('arguments')
/src/src/visitors/fs.js:34:          .map(arg => evaluate(arg, vars));
/src/src/visitors/fs.js-35-
##############################################
/src/src/visitors/fs.js-171-function NodeNotEvaluatedError(node) {
/src/src/visitors/fs.js:172:  this.message = 'Cannot statically evaluate fs argument';
/src/src/visitors/fs.js-173-  this.node = node;
##############################################
/src/src/visitors/fs.js-176-
/src/src/visitors/fs.js:177:function evaluate(path, vars) {
/src/src/visitors/fs.js-178-  // Inline variables
##############################################
/src/src/visitors/fs.js-187-
/src/src/visitors/fs.js:188:  let res = path.evaluate();
/src/src/visitors/fs.js-189-
##############################################
/src/src/visitors/dependencies.js-124-    if (types.isIfStatement(node)) {
/src/src/visitors/dependencies.js:125:      let res = evaluateExpression(node.test);
/src/src/visitors/dependencies.js-126-      if (res && res.confident) {
##############################################
/src/src/visitors/dependencies.js-135-
/src/src/visitors/dependencies.js:136:function evaluateExpression(node) {
/src/src/visitors/dependencies.js-137-  // Wrap the node in a standalone program so we can traverse it
##############################################
/src/src/visitors/dependencies.js-139-
/src/src/visitors/dependencies.js:140:  // Find the first expression and evaluate it.
/src/src/visitors/dependencies.js-141-  let res = null;
##############################################
/src/src/visitors/dependencies.js-143-    Expression(path) {
/src/src/visitors/dependencies.js:144:      res = path.evaluate();
/src/src/visitors/dependencies.js-145-      path.stop();
##############################################
/src/src/scope-hoisting/hoist.js-42-        CallExpression(path) {
/src/src/scope-hoisting/hoist.js:43:          // If we see an `eval` call, wrap the module in a function.
/src/src/scope-hoisting/hoist.js:44:          // Otherwise, local variables accessed inside the eval won't work.
/src/src/scope-hoisting/hoist.js-45-          let callee = path.node.callee;
##############################################
/src/src/scope-hoisting/hoist.js-47-            t.isIdentifier(callee) &&
/src/src/scope-hoisting/hoist.js:48:            callee.name === 'eval' &&
/src/src/scope-hoisting/hoist.js:49:            !path.scope.hasBinding('eval', true)
/src/src/scope-hoisting/hoist.js-50-          ) {
##############################################
/src/src/scope-hoisting/hoist.js-218-
/src/src/scope-hoisting/hoist.js:219:    // If we can statically evaluate the name of a CommonJS export, create an ES6-style export for it.
/src/src/scope-hoisting/hoist.js-220-    // This allows us to remove the CommonJS export object completely in many cases.
##############################################
/src/src/builtins/loaders/browser/css-loader.js-2-  return new Promise(function (resolve, reject) {
/src/src/builtins/loaders/browser/css-loader.js:3:    var link = document.createElement('link');
/src/src/builtins/loaders/browser/css-loader.js-4-    link.rel = 'stylesheet';
##############################################
/src/src/builtins/loaders/browser/js-loader.js-2-  return new Promise(function (resolve, reject) {
/src/src/builtins/loaders/browser/js-loader.js:3:    var script = document.createElement('script');
/src/src/builtins/loaders/browser/js-loader.js-4-    script.async = true;
##############################################
/src/src/builtins/hmr-runtime.js-64-      var overlay = createErrorOverlay(data);
/src/src/builtins/hmr-runtime.js:65:      document.body.appendChild(overlay);
/src/src/builtins/hmr-runtime.js-66-    }
##############################################
/src/src/builtins/hmr-runtime.js-77-function createErrorOverlay(data) {
/src/src/builtins/hmr-runtime.js:78:  var overlay = document.createElement('div');
/src/src/builtins/hmr-runtime.js-79-  overlay.id = OVERLAY_ID;
##############################################
/src/src/builtins/hmr-runtime.js-81-  // html encode message and stack trace
/src/src/builtins/hmr-runtime.js:82:  var message = document.createElement('div');
/src/src/builtins/hmr-runtime.js:83:  var stackTrace = document.createElement('pre');
/src/src/builtins/hmr-runtime.js-84-  message.innerText = data.error.message;
##############################################
/src/src/packagers/JSConcatPackager.js-204-    // We also need to wrap if any of the parents are wrapped - transitive requires
/src/src/packagers/JSConcatPackager.js:205:    // shouldn't be evaluated until their parents are.
/src/src/packagers/JSConcatPackager.js-206-    let shouldWrap = [...asset.parentDeps].some(
##############################################
/src/src/assets/StylusAsset.js-150-  const Evaluator = await localRequire(
/src/src/assets/StylusAsset.js:151:    'stylus/lib/visitor/evaluator',
/src/src/assets/StylusAsset.js-152-    asset.name
##############################################
/src/src/assets/StylusAsset.js-154-
/src/src/assets/StylusAsset.js:155:  // This is a custom stylus evaluator that extends stylus with support for the node
/src/src/assets/StylusAsset.js-156-  // require resolution algorithm. It also adds all dependencies to the parcel asset
##############################################
/src/lib/visitors/fs.js-35-      try {
/src/lib/visitors/fs.js:36:        var _path$get$map = path.get('arguments').map(arg => evaluate(arg, vars));
/src/lib/visitors/fs.js-37-
##############################################
/src/lib/visitors/fs.js-169-function NodeNotEvaluatedError(node) {
/src/lib/visitors/fs.js:170:  this.message = 'Cannot statically evaluate fs argument';
/src/lib/visitors/fs.js-171-  this.node = node;
##############################################
/src/lib/visitors/fs.js-174-
/src/lib/visitors/fs.js:175:function evaluate(path, vars) {
/src/lib/visitors/fs.js-176-  // Inline variables
##############################################
/src/lib/visitors/fs.js-185-
/src/lib/visitors/fs.js:186:  let res = path.evaluate();
/src/lib/visitors/fs.js-187-
##############################################
/src/lib/visitors/dependencies.js-102-    if (types.isIfStatement(node)) {
/src/lib/visitors/dependencies.js:103:      let res = evaluateExpression(node.test);
/src/lib/visitors/dependencies.js-104-      if (res && res.confident) {
##############################################
/src/lib/visitors/dependencies.js-113-
/src/lib/visitors/dependencies.js:114:function evaluateExpression(node) {
/src/lib/visitors/dependencies.js-115-  // Wrap the node in a standalone program so we can traverse it
##############################################
/src/lib/visitors/dependencies.js-117-
/src/lib/visitors/dependencies.js:118:  // Find the first expression and evaluate it.
/src/lib/visitors/dependencies.js-119-  let res = null;
##############################################
/src/lib/visitors/dependencies.js-121-    Expression(path) {
/src/lib/visitors/dependencies.js:122:      res = path.evaluate();
/src/lib/visitors/dependencies.js-123-      path.stop();
##############################################
/src/lib/scope-hoisting/hoist.js-47-        CallExpression(path) {
/src/lib/scope-hoisting/hoist.js:48:          // If we see an `eval` call, wrap the module in a function.
/src/lib/scope-hoisting/hoist.js:49:          // Otherwise, local variables accessed inside the eval won't work.
/src/lib/scope-hoisting/hoist.js-50-          let callee = path.node.callee;
/src/lib/scope-hoisting/hoist.js:51:          if (t.isIdentifier(callee) && callee.name === 'eval' && !path.scope.hasBinding('eval', true)) {
/src/lib/scope-hoisting/hoist.js-52-            asset.cacheData.isCommonJS = true;
##############################################
/src/lib/scope-hoisting/hoist.js-193-
/src/lib/scope-hoisting/hoist.js:194:    // If we can statically evaluate the name of a CommonJS export, create an ES6-style export for it.
/src/lib/scope-hoisting/hoist.js-195-    // This allows us to remove the CommonJS export object completely in many cases.
##############################################
/src/lib/builtins/loaders/browser/css-loader.js-2-  return new Promise(function (resolve, reject) {
/src/lib/builtins/loaders/browser/css-loader.js:3:    var link = document.createElement('link');
/src/lib/builtins/loaders/browser/css-loader.js-4-    link.rel = 'stylesheet';
##############################################
/src/lib/builtins/loaders/browser/js-loader.js-2-  return new Promise(function (resolve, reject) {
/src/lib/builtins/loaders/browser/js-loader.js:3:    var script = document.createElement('script');
/src/lib/builtins/loaders/browser/js-loader.js-4-    script.async = true;
##############################################
/src/lib/builtins/hmr-runtime.js-64-      var overlay = createErrorOverlay(data);
/src/lib/builtins/hmr-runtime.js:65:      document.body.appendChild(overlay);
/src/lib/builtins/hmr-runtime.js-66-    }
##############################################
/src/lib/builtins/hmr-runtime.js-77-function createErrorOverlay(data) {
/src/lib/builtins/hmr-runtime.js:78:  var overlay = document.createElement('div');
/src/lib/builtins/hmr-runtime.js-79-  overlay.id = OVERLAY_ID;
##############################################
/src/lib/builtins/hmr-runtime.js-81-  // html encode message and stack trace
/src/lib/builtins/hmr-runtime.js:82:  var message = document.createElement('div');
/src/lib/builtins/hmr-runtime.js:83:  var stackTrace = document.createElement('pre');
/src/lib/builtins/hmr-runtime.js-84-  message.innerText = data.error.message;
##############################################
/src/lib/packagers/JSConcatPackager.js-294-    // We also need to wrap if any of the parents are wrapped - transitive requires
/src/lib/packagers/JSConcatPackager.js:295:    // shouldn't be evaluated until their parents are.
/src/lib/packagers/JSConcatPackager.js-296-    let shouldWrap = [...asset.parentDeps].some(dep => dep.shouldWrap || this.shouldWrap(this.bundler.loadedAssets.get(dep.parent)));
##############################################
/src/lib/assets/StylusAsset.js-151-    const deps = yield getDependencies(code, asset.name, asset, options);
/src/lib/assets/StylusAsset.js:152:    const Evaluator = yield localRequire('stylus/lib/visitor/evaluator', asset.name);
/src/lib/assets/StylusAsset.js-153-
/src/lib/assets/StylusAsset.js:154:    // This is a custom stylus evaluator that extends stylus with support for the node
/src/lib/assets/StylusAsset.js-155-    // require resolution algorithm. It also adds all dependencies to the parcel asset
##############################################
/src/CHANGELOG.md-173-- Fix reference pass error in package config [Details](https://github.com/parcel-bundler/parcel/commit/a36b9124b559d65a724da74f2611a15d3122626f)
/src/CHANGELOG.md:174:- Remove `eval` usage. Fixes CSP cases. [Details](https://github.com/parcel-bundler/parcel/commit/b032b859a1bcc4f3e734576c704afb52821235fc)
/src/CHANGELOG.md-175-- Remove jsnext:main [Details](https://github.com/parcel-bundler/parcel/commit/f75941c3cfeb189578e3f2f9579dc9909da1d7c0)
##############################################
/src/CHANGELOG.md-249-- Use babel-register for tests only with node < 8 [Details](https://github.com/parcel-bundler/parcel/commit/83d4e3b3d7357a1765c2dfc3f802f9ca983ec08b)
/src/CHANGELOG.md:250:- remove call to window.location [Details](https://github.com/parcel-bundler/parcel/commit/6e0a7f678b3938f0c59f0a5f0a77c32b9dd48fb5)
/src/CHANGELOG.md-251-
##############################################
/src/CHANGELOG.md-274-- Add `.toml` asset support [Details](https://github.com/parcel-bundler/parcel/commit/55b96406644f9f84b34dab2f98c3a6e5d61c7045)
/src/CHANGELOG.md:275:- Warn instead of error when an fs call cannot be evaluated [Details](https://github.com/parcel-bundler/parcel/commit/6d23efd81bd7e2467fd063c15a5fa5610a568f60)
/src/CHANGELOG.md-276-- Add support for HTML meta assets [Details](https://github.com/parcel-bundler/parcel/commit/c1d8d756cf044dfe0077a92770d31591ba270180)
