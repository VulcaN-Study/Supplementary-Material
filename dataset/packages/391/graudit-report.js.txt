/src/index.html-37-        channel.transmitRoomOnce = true;
/src/index.html:38:        channel.open(roomid);
/src/index.html-39-    });
##############################################
/src/index.html-51-    signaler.getRoomFromServer(roomid, function(roomid) {
/src/index.html:52:        channel.connect(roomid); // setting 'channel' & connecting socket
/src/index.html-53-        
##############################################
/src/DataChannel.js-125-                onmessage: function (data, userid) {
/src/DataChannel.js:126:                    if (IsDataChannelSupported && !data.size) data = JSON.parse(data);
/src/DataChannel.js-127-
##############################################
/src/DataChannel.js-234-
/src/DataChannel.js:235:                if (!self.joinedARoom) self.open();
/src/DataChannel.js-236-            }
/src/DataChannel.js-237-
/src/DataChannel.js:238:            if (!isOpenNewSession || isNonFirebaseClient) self.connect();
/src/DataChannel.js-239-
##############################################
/src/DataChannel.js-404-                        sdpMLineIndex: response.candidate.sdpMLineIndex,
/src/DataChannel.js:405:                        candidate: JSON.parse(response.candidate.candidate)
/src/DataChannel.js-406-                    });
##############################################
/src/DataChannel.js-431-                        self.roomToken = response.roomToken;
/src/DataChannel.js:432:                        root.open(self.roomToken);
/src/DataChannel.js-433-                        self.sockets = swap(self.sockets);
##############################################
/src/DataChannel.js-442-                invokedOnce = true;
/src/DataChannel.js:443:                inner.sdp = JSON.parse(inner.firstPart + inner.secondPart + inner.thirdPart);
/src/DataChannel.js-444-
##############################################
/src/DataChannel.js-830-            function processInWebWorker() {
/src/DataChannel.js:831:                var blob = URL.createObjectURL(new Blob(['function getBlob(_dataURL, _fileType) {var binary = atob(_dataURL.substr(_dataURL.indexOf(",") + 1)),i = binary.length,view = new Uint8Array(i);while (i--) {view[i] = binary.charCodeAt(i);};postMessage(new Blob([view], {type: _fileType}));};this.onmessage =  function (e) {var data = JSON.parse(e.data); getBlob(data.dataURL, data.fileType);}'], {
/src/DataChannel.js-832-                    type: 'application/javascript'
##############################################
/src/DataChannel.js-933-                var message = content[uuid].join('');
/src/DataChannel.js:934:                if (data.isobject) message = JSON.parse(message);
/src/DataChannel.js-935-
##############################################
/src/server.js-6-
/src/server.js:7:var app = require('http').createServer(function (request, response) {
/src/server.js:8:    var uri = require('url').parse(request.url).pathname,
/src/server.js-9-        filename = path.join(process.cwd(), uri);
##############################################
/src/server.js-29-
/src/server.js:30:        fs.readFile(filename, 'binary', function (err, file) {
/src/server.js-31-            if (err) {
