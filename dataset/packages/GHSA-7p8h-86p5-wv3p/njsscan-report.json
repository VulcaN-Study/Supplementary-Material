{
  "errors": [
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse .cfignore as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 66,
            "line": 1
          },
          "file": "/src/.cfignore",
          "source_hash": "07420183743210fc78ed4e1ef395290f41b2853fc57d7797d54dd002d798792e",
          "start": {
            "col": 1,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse .cfignore as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 66,
            "line": 1
          },
          "file": "/src/.cfignore",
          "source_hash": "07420183743210fc78ed4e1ef395290f41b2853fc57d7797d54dd002d798792e",
          "start": {
            "col": 1,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse Dockerfile as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 45,
            "line": 3
          },
          "file": "/src/Dockerfile",
          "source_hash": "251b4a5232f7896ccffd9e3c399941f04b496ed610d2df12b1b5d8608170fb3e",
          "start": {
            "col": 1,
            "line": 3
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse .eslintignore as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 36,
            "line": 1
          },
          "file": "/src/.eslintignore",
          "source_hash": "4ad544c48b7251c08f1209f5b24b3096fad27cd90be47f6889c6697644e6f7c1",
          "start": {
            "col": 1,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse .dockerignore as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 2,
            "line": 1
          },
          "file": "/src/.dockerignore",
          "source_hash": "fd03f16fc5ad8be70d6e0491fa2e029bc4a31f5b0de6d4adf8e7dd709d23840f",
          "start": {
            "col": 1,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse .eslintignore as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 36,
            "line": 1
          },
          "file": "/src/.eslintignore",
          "source_hash": "4ad544c48b7251c08f1209f5b24b3096fad27cd90be47f6889c6697644e6f7c1",
          "start": {
            "col": 1,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse .dockerignore as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 2,
            "line": 1
          },
          "file": "/src/.dockerignore",
          "source_hash": "fd03f16fc5ad8be70d6e0491fa2e029bc4a31f5b0de6d4adf8e7dd709d23840f",
          "start": {
            "col": 1,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse Dockerfile as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 45,
            "line": 3
          },
          "file": "/src/Dockerfile",
          "source_hash": "251b4a5232f7896ccffd9e3c399941f04b496ed610d2df12b1b5d8608170fb3e",
          "start": {
            "col": 1,
            "line": 3
          }
        }
      ],
      "type": "SourceParseError"
    }
  ],
  "njsscan_version": "0.2.8",
  "nodejs": {
    "cookie_session_default": {
      "files": [
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            44,
            49
          ],
          "match_position": [
            17,
            5
          ],
          "match_string": "  appRouter.use(session({\n    key: config.site.cookieKeyName,\n    resave: true,\n    saveUninitialized: true,\n    secret: config.site.sessionSecret,\n  }));"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Consider changing the default session cookie name. An attacker can use it to fingerprint the server and target attacks accordingly.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_domain": {
      "files": [
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            44,
            49
          ],
          "match_position": [
            17,
            5
          ],
          "match_string": "  appRouter.use(session({\n    key: config.site.cookieKeyName,\n    resave: true,\n    saveUninitialized: true,\n    secret: config.site.sessionSecret,\n  }));"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_maxage": {
      "files": [
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            44,
            49
          ],
          "match_position": [
            17,
            5
          ],
          "match_string": "  appRouter.use(session({\n    key: config.site.cookieKeyName,\n    resave: true,\n    saveUninitialized: true,\n    secret: config.site.sessionSecret,\n  }));"
        }
      ],
      "metadata": {
        "cwe": "CWE-613: Insufficient Session Expiration",
        "description": "Session middleware settings: `maxAge` not set. Use it to set expiration date for cookies.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_path": {
      "files": [
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            44,
            49
          ],
          "match_position": [
            17,
            5
          ],
          "match_string": "  appRouter.use(session({\n    key: config.site.cookieKeyName,\n    resave: true,\n    saveUninitialized: true,\n    secret: config.site.sessionSecret,\n  }));"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.",
        "owasp": "A2: Broken Authentication",
        "severity": "INFO"
      }
    },
    "cookie_session_no_samesite": {
      "files": [
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            44,
            49
          ],
          "match_position": [
            17,
            5
          ],
          "match_string": "  appRouter.use(session({\n    key: config.site.cookieKeyName,\n    resave: true,\n    saveUninitialized: true,\n    secret: config.site.sessionSecret,\n  }));"
        }
      ],
      "metadata": {
        "cwe": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
        "description": "Default session middleware settings: `sameSite` attribute is not configured to strict or lax. These configurations provides protection against Cross Site Request Forgery attacks.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "cookie_session_no_secure": {
      "files": [
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            44,
            49
          ],
          "match_position": [
            17,
            5
          ],
          "match_string": "  appRouter.use(session({\n    key: config.site.cookieKeyName,\n    resave: true,\n    saveUninitialized: true,\n    secret: config.site.sessionSecret,\n  }));"
        }
      ],
      "metadata": {
        "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
        "description": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "express_open_redirect": {
      "files": [
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            123,
            123
          ],
          "match_position": [
            14,
            68
          ],
          "match_string": "      return res.redirect(res.locals.baseHref + 'db/' + req.dbName);"
        },
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            136,
            136
          ],
          "match_position": [
            16,
            70
          ],
          "match_string": "        return res.redirect(res.locals.baseHref + 'db/' + req.dbName);"
        },
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            149,
            149
          ],
          "match_position": [
            14,
            95
          ],
          "match_string": "      return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);"
        },
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            173,
            173
          ],
          "match_position": [
            18,
            99
          ],
          "match_string": "          return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);"
        },
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            178,
            178
          ],
          "match_position": [
            18,
            99
          ],
          "match_string": "          return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);"
        },
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            194,
            194
          ],
          "match_position": [
            16,
            97
          ],
          "match_string": "        return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);"
        },
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            225,
            225
          ],
          "match_position": [
            16,
            70
          ],
          "match_string": "        return res.redirect(res.locals.baseHref + 'db/' + req.dbName);"
        },
        {
          "file_path": "/src/lib/router.js",
          "match_lines": [
            233,
            233
          ],
          "match_position": [
            18,
            72
          ],
          "match_string": "          return res.redirect(res.locals.baseHref + 'db/' + req.dbName);"
        },
        {
          "file_path": "/src/lib/routes/collection.js",
          "match_lines": [
            395,
            395
          ],
          "match_position": [
            7,
            92
          ],
          "match_string": "      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName));"
        },
        {
          "file_path": "/src/lib/routes/collection.js",
          "match_lines": [
            400,
            419
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const name = req.body.collection;\n\n    const validation = validateCollectionName(name);\n    if (validation.error) {\n      req.session.error = validation.message;\n      return res.redirect('back');\n    }\n\n    req.db.createCollection(name, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong: ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      Bluebird.resolve(req.updateCollections(req.dbConnection)).asCallback(function () {\n        req.session.success = 'Collection created!';\n        res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, name));\n      });\n    });"
        },
        {
          "file_path": "/src/lib/routes/collection.js",
          "match_lines": [
            417,
            417
          ],
          "match_position": [
            9,
            80
          ],
          "match_string": "        res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, name));"
        },
        {
          "file_path": "/src/lib/routes/collection.js",
          "match_lines": [
            442,
            442
          ],
          "match_position": [
            9,
            90
          ],
          "match_string": "        res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);"
        },
        {
          "file_path": "/src/lib/routes/collection.js",
          "match_lines": [
            459,
            459
          ],
          "match_position": [
            11,
            65
          ],
          "match_string": "          res.redirect(res.locals.baseHref + 'db/' + req.dbName);"
        },
        {
          "file_path": "/src/lib/routes/collection.js",
          "match_lines": [
            466,
            490
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const name = req.body.collection;\n\n    const validation = validateCollectionName(name);\n    if (validation.error) {\n      req.session.error = validation.message;\n      return res.redirect('back');\n    }\n\n    req.collection.rename(name, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong: ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      Bluebird.resolve(req.updateCollections(req.dbConnection)).asCallback(function (err) {\n        if (err) {\n          req.session.error = 'Something went wrong: ' + err;\n          return res.redirect('back');\n        }\n\n        req.session.success = 'Collection renamed!';\n        res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, name));\n      });\n    });"
        },
        {
          "file_path": "/src/lib/routes/collection.js",
          "match_lines": [
            488,
            488
          ],
          "match_position": [
            9,
            80
          ],
          "match_string": "        res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, name));"
        },
        {
          "file_path": "/src/lib/routes/collection.js",
          "match_lines": [
            501,
            501
          ],
          "match_position": [
            7,
            61
          ],
          "match_string": "      res.redirect(res.locals.baseHref + 'db/' + req.dbName);"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            65,
            65
          ],
          "match_position": [
            7,
            92
          ],
          "match_string": "      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName));"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            97,
            97
          ],
          "match_position": [
            7,
            92
          ],
          "match_string": "      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName));"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            102,
            121
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const skip            = req.query.skip        || '';\n    const key             = req.query.key         || '';\n    const value           = req.query.value       || '';\n    const type            = req.query.type        || '';\n    const jsonQuery       = req.query.query       || '';\n    const jsonProjection  = req.query.projection  || '';\n\n    req.collection.remove(req.document, { safe: true }, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong! ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document deleted! _id: ' + filters.stringDocIDs(req.document._id);\n      res.redirect(\n        buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName)\n        + `?skip=${skip}&key=${key}&value=${value}&type=${type}&query=${jsonQuery}&projection=${jsonProjection}`,\n      );\n    });"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            103,
            121
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const key             = req.query.key         || '';\n    const value           = req.query.value       || '';\n    const type            = req.query.type        || '';\n    const jsonQuery       = req.query.query       || '';\n    const jsonProjection  = req.query.projection  || '';\n\n    req.collection.remove(req.document, { safe: true }, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong! ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document deleted! _id: ' + filters.stringDocIDs(req.document._id);\n      res.redirect(\n        buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName)\n        + `?skip=${skip}&key=${key}&value=${value}&type=${type}&query=${jsonQuery}&projection=${jsonProjection}`,\n      );\n    });"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            104,
            121
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const value           = req.query.value       || '';\n    const type            = req.query.type        || '';\n    const jsonQuery       = req.query.query       || '';\n    const jsonProjection  = req.query.projection  || '';\n\n    req.collection.remove(req.document, { safe: true }, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong! ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document deleted! _id: ' + filters.stringDocIDs(req.document._id);\n      res.redirect(\n        buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName)\n        + `?skip=${skip}&key=${key}&value=${value}&type=${type}&query=${jsonQuery}&projection=${jsonProjection}`,\n      );\n    });"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            105,
            121
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const type            = req.query.type        || '';\n    const jsonQuery       = req.query.query       || '';\n    const jsonProjection  = req.query.projection  || '';\n\n    req.collection.remove(req.document, { safe: true }, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong! ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document deleted! _id: ' + filters.stringDocIDs(req.document._id);\n      res.redirect(\n        buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName)\n        + `?skip=${skip}&key=${key}&value=${value}&type=${type}&query=${jsonQuery}&projection=${jsonProjection}`,\n      );\n    });"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            106,
            121
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const jsonQuery       = req.query.query       || '';\n    const jsonProjection  = req.query.projection  || '';\n\n    req.collection.remove(req.document, { safe: true }, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong! ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document deleted! _id: ' + filters.stringDocIDs(req.document._id);\n      res.redirect(\n        buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName)\n        + `?skip=${skip}&key=${key}&value=${value}&type=${type}&query=${jsonQuery}&projection=${jsonProjection}`,\n      );\n    });"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            107,
            121
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    const jsonProjection  = req.query.projection  || '';\n\n    req.collection.remove(req.document, { safe: true }, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong! ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document deleted! _id: ' + filters.stringDocIDs(req.document._id);\n      res.redirect(\n        buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName)\n        + `?skip=${skip}&key=${key}&value=${value}&type=${type}&query=${jsonQuery}&projection=${jsonProjection}`,\n      );\n    });"
        },
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            117,
            120
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      res.redirect(\n        buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName)\n        + `?skip=${skip}&key=${key}&value=${value}&type=${type}&query=${jsonQuery}&projection=${jsonProjection}`,\n      );"
        }
      ],
      "metadata": {
        "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
        "description": "Untrusted user input in redirect() can result in Open Redirect vulnerability.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "express_xss": {
      "files": [
        {
          "file_path": "/src/lib/routes/document.js",
          "match_lines": [
            13,
            13
          ],
          "match_position": [
            5,
            23
          ],
          "match_string": "    res.send(req.prop);"
        }
      ],
      "metadata": {
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_nosqli_injection": {
      "files": [
        {
          "file_path": "/src/lib/routes/gridfs.js",
          "match_lines": [
            90,
            117
          ],
          "match_position": [
            5,
            7
          ],
          "match_string": "    gfs.findOne({ _id: req.fileID }, function (err, file) {\n      if (err) {\n        console.error(err);\n        req.session.error = 'Error: ' + err;\n        return res.redirect('back');\n      }\n\n      if (!file) {\n        console.error('No file');\n        req.session.error = 'File not found!';\n        return res.redirect('back');\n      }\n\n      res.set('Content-Type', file.contentType);\n      res.set('Content-Disposition', 'attachment; filename=\"' + encodeURI(file.filename) + '\"');\n\n      const readstream = gfs.createReadStream({\n        _id: file._id,\n      });\n\n      readstream.on('error', function (err) {\n        console.error('Got error while processing stream ' + err.message);\n        req.session.error = 'Error: ' + err;\n        res.end();\n      });\n\n      readstream.pipe(res);\n    });"
        }
      ],
      "metadata": {
        "cwe": "CWE-943: Improper Neutralization of Special Elements in Data Query Logic",
        "description": "Untrusted user input in findOne() function can result in NoSQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_password": {
      "files": [
        {
          "file_path": "/src/config.default.js",
          "match_lines": [
            22,
            22
          ],
          "match_position": [
            7,
            57
          ],
          "match_string": "const basicAuthPassword = 'ME_CONFIG_BASICAUTH_PASSWORD';"
        },
        {
          "file_path": "/src/config.default.js",
          "match_lines": [
            24,
            24
          ],
          "match_position": [
            7,
            56
          ],
          "match_string": "const adminPassword = 'ME_CONFIG_MONGODB_ADMINPASSWORD';"
        },
        {
          "file_path": "/src/config.default.js",
          "match_lines": [
            26,
            26
          ],
          "match_position": [
            7,
            57
          ],
          "match_string": "const dbAuthPassword = 'ME_CONFIG_MONGODB_AUTH_PASSWORD';"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded password in plain text is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "node_username": {
      "files": [
        {
          "file_path": "/src/config.default.js",
          "match_lines": [
            21,
            21
          ],
          "match_position": [
            7,
            57
          ],
          "match_string": "const basicAuthUsername = 'ME_CONFIG_BASICAUTH_USERNAME';"
        },
        {
          "file_path": "/src/config.default.js",
          "match_lines": [
            23,
            23
          ],
          "match_position": [
            7,
            56
          ],
          "match_string": "const adminUsername = 'ME_CONFIG_MONGODB_ADMINUSERNAME';"
        },
        {
          "file_path": "/src/config.default.js",
          "match_lines": [
            25,
            25
          ],
          "match_position": [
            7,
            57
          ],
          "match_string": "const dbAuthUsername = 'ME_CONFIG_MONGODB_AUTH_USERNAME';"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    }
  },
  "templates": {
    "squirrelly_template": {
      "files": [
        {
          "file_path": "/src/lib/views/collection.html",
          "match_lines": [
            261,
            261
          ],
          "match_position": [
            10659,
            10724
          ],
          "match_string": "{{ collectionUrl }}/{{ document._id | json | safe | url_encode }}"
        },
        {
          "file_path": "/src/lib/views/collection.html",
          "match_lines": [
            259,
            259
          ],
          "match_position": [
            10499,
            10600
          ],
          "match_string": "{{ collectionUrl }}/{{ document._id | json | safe | url_encode }}?subtype={{ document._id.sub_type }}"
        },
        {
          "file_path": "/src/lib/views/collection.html",
          "match_lines": [
            273,
            273
          ],
          "match_position": [
            11513,
            11570
          ],
          "match_string": "{{ document[column] | stringDocIDs | to_display | safe }}"
        },
        {
          "file_path": "/src/lib/views/collection.html",
          "match_lines": [
            266,
            266
          ],
          "match_position": [
            11052,
            11228
          ],
          "match_string": "{{ collectionUrl }}/{{ document._id | json | safe | url_encode }}?skip={{ skip }}&key={{ key }}&value={{ value }}&type={{ type }}&query={{ query }}&projection= {{ projection }}"
        },
        {
          "file_path": "/src/lib/views/gridfs.html",
          "match_lines": [
            52,
            52
          ],
          "match_position": [
            1604,
            1642
          ],
          "match_string": "{{ file[column] | to_display | safe }}"
        },
        {
          "file_path": "/src/lib/views/gridfs.html",
          "match_lines": [
            57,
            57
          ],
          "match_position": [
            1835,
            1912
          ],
          "match_string": "{{ dbUrl }}/gridFS/{{ bucketName }}/{{ file._id | json | safe | url_encode }}"
        },
        {
          "file_path": "/src/lib/views/gridfs.html",
          "match_lines": [
            50,
            50
          ],
          "match_position": [
            1482,
            1523
          ],
          "match_string": "{{ file._id | json | safe | url_encode }}"
        },
        {
          "file_path": "/src/lib/views/document.html",
          "match_lines": [
            65,
            65
          ],
          "match_position": [
            1857,
            1958
          ],
          "match_string": "{{ collectionUrl }}/{{ document._id | json | safe | url_encode }}?subtype={{ document._id.sub_type }}"
        },
        {
          "file_path": "/src/lib/views/document.html",
          "match_lines": [
            70,
            70
          ],
          "match_position": [
            2027,
            2092
          ],
          "match_string": "{{ collectionUrl }}/{{ document._id | json | safe | url_encode }}"
        },
        {
          "file_path": "/src/lib/views/document.html",
          "match_lines": [
            124,
            124
          ],
          "match_position": [
            3874,
            3975
          ],
          "match_string": "{{ collectionUrl }}/{{ document._id | json | safe | url_encode }}?subtype={{ document._id.sub_type }}"
        },
        {
          "file_path": "/src/lib/views/document.html",
          "match_lines": [
            126,
            126
          ],
          "match_position": [
            4021,
            4086
          ],
          "match_string": "{{ collectionUrl }}/{{ document._id | json | safe | url_encode }}"
        }
      ],
      "metadata": {
        "cwe": "CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "The Squirrelly.js template has an unescaped variable. Untrusted user input passed to this variable results in Cross Site Scripting (XSS)",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  }
}