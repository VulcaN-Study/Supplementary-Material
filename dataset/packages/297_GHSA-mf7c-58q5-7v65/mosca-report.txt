<report_mosca>
 <Path>/src/examples/simple-chaining.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -      var stmt = db.prepare("INSERT INTO lorem VALUES (?)");

 Line: 32 -      db.all("SELECT rowid AS id, info FROM lorem", function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/map.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              var stmt = db.prepare("INSERT INTO foo VALUES(?, ?)");

 Line: 21 -              db.map("SELECT * FROM foo", function(err, map) {

 Line: 39 -              var stmt = db.prepare("INSERT INTO foo VALUES(?, ?, ?)");

 Line: 48 -              db.map("SELECT * FROM foo", function(err, map) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/issue-108.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -              var stmt = db.prepare("INSERT INTO lorem VALUES (?)");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/prepare.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 51 -                  db.prepare("INSERT INTO foo VALUES(?, ?, ?, ?)").run(

 Line: 68 -              var stmt = db.prepare("SELECT txt, num, flt, blb FROM foo ORDER BY num", function(err) {

 Line: 70 -                  assert.equal(stmt.sql, 'SELECT txt, num, flt, blb FROM foo ORDER BY num');

 Line: 108 -              var stmt = db.prepare("SELECT txt, num, flt, blb FROM foo ORDER BY num");

 Line: 137 -              var stmt = db.prepare("SELECT txt, num, flt, blb FROM foo WHERE num = ?");

 Line: 168 -              db.prepare("SELECT txt, num, flt, blb FROM foo WHERE num = ? AND txt = ?", 10, 'String 10')

 Line: 195 -              db.prepare("SELECT txt, num, flt, blb FROM foo WHERE num < ? ORDER BY num", count)

 Line: 221 -             db.prepare("SELECT txt, num, flt, blb FROM foo WHERE num > 5000")

 Line: 260 -                  var stmt = db.prepare("INSERT INTO foo VALUES(?, ?, ?, ?)");

 Line: 272 -              db.prepare("SELECT txt, num, flt, blb FROM foo")

 Line: 307 -              db.get("SELECT txt, num, flt, blb FROM foo WHERE num = ? AND txt = ?", 10, 'String 10', function(err, row) {

 Line: 341 -                  db.run("INSERT INTO foo VALUES(?, ?, ?, ?)",

 Line: 356 -              db.all("SELECT txt, num, flt, blb FROM foo ORDER BY num", function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/named_columns.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -          db.run("INSERT INTO foo VALUES($text, $id)", {

 Line: 21 -          db.get("SELECT txt, num FROM foo ORDER BY num", function(err, row) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/named_params.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -          db.run("INSERT INTO foo VALUES($text, $id)", {

 Line: 21 -          db.run("INSERT INTO foo VALUES(:text, :id)", {

 Line: 28 -          db.run("INSERT INTO foo VALUES(@txt, @id)", {

 Line: 35 -          db.run("INSERT INTO foo VALUES(@txt, @id)", [ 'Sed Do Eiusmod', 4 ], done);

 Line: 39 -          db.run("INSERT INTO foo VALUES(?2, ?4)",

 Line: 44 -          db.run("INSERT INTO foo VALUES(?, ?)", {

 Line: 51 -          db.all("SELECT txt, num FROM foo ORDER BY num", function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/rerun.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -          var stmt = db.prepare("INSERT INTO foo VALUES(?)");

 Line: 28 -          var stmt = db.prepare("SELECT id FROM foo WHERE id = ?");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/serialization.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -          var stmt1 = db.prepare("INSERT INTO foo VALUES(?, ?, ?, ?)");

 Line: 22 -          var stmt2 = db.prepare("INSERT INTO foo VALUES(?, ?, ?, ?)");

 Line: 41 -          db.all("SELECT txt, num, flt, blb FROM foo ORDER BY num", function(err, rows) {

 Line: 73 -              var stmt = db.prepare("INSERT INTO foo VALUES(?, ?, ?, ?)");

 Line: 82 -              db.all("SELECT txt, num, flt, blb FROM foo ORDER BY num", function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/other_objects.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -          db.exec('DELETE FROM txt_table; DELETE FROM int_table; DELETE FROM flt_table;', done);

 Line: 19 -          db.run("INSERT INTO int_table VALUES(?)", date, function (err) {

 Line: 21 -              db.get("SELECT int FROM int_table", function(err, row) {

 Line: 31 -          db.run("INSERT INTO txt_table VALUES(?)", regexp, function (err) {

 Line: 33 -              db.get("SELECT txt FROM txt_table", function(err, row) {

 Line: 55 -              db.run("INSERT INTO flt_table VALUES(?)", flt, function (err) {

 Line: 57 -                  db.get("SELECT flt FROM flt_table", function(err, row) {

 Line: 78 -              db.run("INSERT INTO int_table VALUES(?)", integer, function (err) {

 Line: 80 -                  db.get("SELECT int AS integer FROM int_table", function(err, row) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/database_fail.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 20 -          db.get('SELECT id, txt FROM foo', function(err, row) {

 Line: 27 -                  done(new Error('Completed query without error, but expected error'));

 Line: 33 -          db.all('SELECT id, txt FROM foo', function(err, row) {

 Line: 40 -                  done(new Error('Completed query without error, but expected error'));

 Line: 46 -          db.run('SELECT id, txt FROM foo', function(err, row) {

 Line: 53 -                  done(new Error('Completed query without error, but expected error'));

 Line: 59 -          db.each('SELECT id, txt FROM foo', function(err, row) {

 Line: 68 -                  done(new Error('Completed query without error, but expected error'));

 Line: 74 -          db.each('SELECT id, txt FROM foo', function(err, row) {

 Line: 81 -                  done(new Error('Completed query without error, but expected error'));

 Line: 87 -          db.get('SELECT id, txt FROM foo WHERE id = ?', 1, function(err, row) {

 Line: 94 -                  done(new Error('Completed query without error, but expected error'));

 Line: 100 -          db.all('SELECT id, txt FROM foo WHERE id = ?', 1, function(err, row) {

 Line: 107 -                  done(new Error('Completed query without error, but expected error'));

 Line: 113 -          db.run('SELECT id, txt FROM foo WHERE id = ?', 1, function(err, row) {

 Line: 120 -                  done(new Error('Completed query without error, but expected error'));

 Line: 126 -          db.each('SELECT id, txt FROM foo WHERE id = ?', 1, function(err, row) {

 Line: 135 -                  done(new Error('Completed query without error, but expected error'));

 Line: 141 -          db.each('SELECT id, txt FROM foo WHERE id = ?', 1, function(err, row) {

 Line: 148 -                  done(new Error('Completed query without error, but expected error'));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/support/createdb.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 28 -          var stmt = db.prepare("INSERT INTO foo VALUES(?, ?)");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/unicode.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 30 -          var stmt = db.prepare("INSERT INTO foo VALUES(?, ?)");

 Line: 41 -          db.all("SELECT txt FROM foo ORDER BY id", function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/affected.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -          var stmt = db.prepare("INSERT INTO foo VALUES(?, ?)");

 Line: 25 -          db.run("UPDATE foo SET id = id + 1 WHERE id % 2 = 0", function(err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/trace.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              if (sql.match(/^SELECT/)) {

 Line: 12 -                  assert.equal(sql, "SELECT * FROM foo");

 Line: 27 -              db.run("SELECT * FROM foo");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/null_error.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 20 -          var stmt = db.prepare('INSERT INTO febp_data VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', function(err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/exec.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -          db.all("SELECT type, name FROM sqlite_master ORDER BY type, name", function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/blob.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 22 -              db.run('INSERT INTO elmos (id, image) VALUES (?, ?)', i, elmo, function(err) {

 Line: 34 -          db.all('SELECT id, image FROM elmos ORDER BY id', function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/profile.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -              if (sql.match(/^SELECT/)) {

 Line: 15 -                  assert.equal(sql, "SELECT * FROM foo");

 Line: 43 -          db.run("SELECT * FROM foo", function(err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/parallel_insert.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -              db.run("INSERT INTO foo VALUES (" + values + ")");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/scheduling.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -      it('scheduling a query with callback after the database was closed', function(done) {

 Line: 29 -      it('running a query after the database was closed', function(done) {

 Line: 32 -          var stmt = db.prepare("SELECT * FROM sqlite_master", function(err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/open_close.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 109 -              stmt = db.prepare('INSERT INTO foo VALUES (?, ?)');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/each.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -          db.each('SELECT id, txt FROM foo LIMIT 0, ?', total, function(err, row) {

 Line: 28 -          db.each('SELECT id, txt FROM foo LIMIT 0, ?', total, function(err, row) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/benchmark/insert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -                  var stmt1 = db.prepare("INSERT INTO foo VALUES (?, ?)");

 Line: 22 -                  var stmt2 = db.prepare("INSERT INTO foo VALUES (?, ?)");

 Line: 43 -              var stmt = db.prepare("INSERT INTO foo VALUES (?, ?)");

 Line: 58 -              var stmt = db.prepare("INSERT INTO foo VALUES (?, ?)");

</Result>
</report_mosca>

