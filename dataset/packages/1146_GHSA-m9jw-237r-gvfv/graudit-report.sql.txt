/src/types/lib/sequelize.d.ts-1152-   * ```js
/src/types/lib/sequelize.d.ts:1153:   * sequelize.query('SELECT...').then(([results, metadata]) {
/src/types/lib/sequelize.d.ts-1154-   *   // Raw query - use spread
##############################################
/src/types/lib/sequelize.d.ts-1156-   *
/src/types/lib/sequelize.d.ts:1157:   * sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(results => {
/src/types/lib/sequelize.d.ts-1158-   *   // SELECT query - use then
##############################################
/src/lib/dialects/postgres/connection-manager.js-148-
/src/lib/dialects/postgres/connection-manager.js:149:      // If we didn't ever hear from the client.connect() callback the connection timeout
/src/lib/dialects/postgres/connection-manager.js-150-      // node-postgres does not treat this as an error since no active query was ever emitted
##############################################
/src/lib/dialects/postgres/connection-manager.js-157-
/src/lib/dialects/postgres/connection-manager.js:158:      connection.connect(err => {
/src/lib/dialects/postgres/connection-manager.js-159-        responded = true;
##############################################
/src/lib/dialects/postgres/connection-manager.js-217-      if (query) {
/src/lib/dialects/postgres/connection-manager.js:218:        return connection.query(query);
/src/lib/dialects/postgres/connection-manager.js-219-      }
##############################################
/src/lib/dialects/postgres/query-interface.js-92-          promises.push(() => {
/src/lib/dialects/postgres/query-interface.js:93:            return qi.sequelize.query(qi.QueryGenerator.pgEnum(tableName, field, enumType, options), Object.assign({}, options, { raw: true }));
/src/lib/dialects/postgres/query-interface.js-94-          });
##############################################
/src/lib/dialects/postgres/query.js-58-    const query = parameters && parameters.length
/src/lib/dialects/postgres/query.js:59:      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))
/src/lib/dialects/postgres/query.js:60:      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));
/src/lib/dialects/postgres/query.js-61-
##############################################
/src/lib/dialects/mssql/query-interface.js-26-  const findConstraintSql = qi.QueryGenerator.getDefaultConstraintQuery(tableName, attributeName);
/src/lib/dialects/mssql/query-interface.js:27:  return qi.sequelize.query(findConstraintSql, options)
/src/lib/dialects/mssql/query-interface.js-28-    .then(([results]) => {
##############################################
/src/lib/dialects/mssql/query-interface.js-33-      const dropConstraintSql = qi.QueryGenerator.dropConstraintQuery(tableName, results[0].name);
/src/lib/dialects/mssql/query-interface.js:34:      return qi.sequelize.query(dropConstraintSql, options);
/src/lib/dialects/mssql/query-interface.js-35-    })
##############################################
/src/lib/dialects/mssql/query-interface.js-37-      const findForeignKeySql = qi.QueryGenerator.getForeignKeyQuery(tableName, attributeName);
/src/lib/dialects/mssql/query-interface.js:38:      return qi.sequelize.query(findForeignKeySql, options);
/src/lib/dialects/mssql/query-interface.js-39-    })
##############################################
/src/lib/dialects/mssql/query-interface.js-45-      const dropForeignKeySql = qi.QueryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);
/src/lib/dialects/mssql/query-interface.js:46:      return qi.sequelize.query(dropForeignKeySql, options);
/src/lib/dialects/mssql/query-interface.js-47-    })
##############################################
/src/lib/dialects/mssql/query-interface.js-50-      const primaryKeyConstraintSql = qi.QueryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);
/src/lib/dialects/mssql/query-interface.js:51:      return qi.sequelize.query(primaryKeyConstraintSql, options);
/src/lib/dialects/mssql/query-interface.js-52-    })
##############################################
/src/lib/dialects/mssql/query-interface.js-57-      const dropConstraintSql = qi.QueryGenerator.dropConstraintQuery(tableName, result[0].constraintName);
/src/lib/dialects/mssql/query-interface.js:58:      return qi.sequelize.query(dropConstraintSql, options);
/src/lib/dialects/mssql/query-interface.js-59-    })
##############################################
/src/lib/dialects/mssql/query-interface.js-61-      const removeSql = qi.QueryGenerator.removeColumnQuery(tableName, attributeName);
/src/lib/dialects/mssql/query-interface.js:62:      return qi.sequelize.query(removeSql, options);
/src/lib/dialects/mssql/query-interface.js-63-    });
##############################################
/src/lib/dialects/mysql/connection-manager.js-70-    return new Promise((resolve, reject) => {
/src/lib/dialects/mysql/connection-manager.js:71:      const connection = this.lib.createConnection(connectionConfig);
/src/lib/dialects/mysql/connection-manager.js-72-
##############################################
/src/lib/dialects/mysql/query-interface.js-85-
/src/lib/dialects/mysql/query-interface.js:86:      return qi.sequelize.query(query, options);
/src/lib/dialects/mysql/query-interface.js-87-    });
##############################################
/src/lib/dialects/mysql/query.js-58-      } else {
/src/lib/dialects/mysql/query.js:59:        connection.query({ sql }, handler).setMaxListeners(100);
/src/lib/dialects/mysql/query.js-60-      }
##############################################
/src/lib/dialects/abstract/connection-manager.js-310-    return this.sequelize.runHooks('beforeConnect', config)
/src/lib/dialects/abstract/connection-manager.js:311:      .then(() => this.dialect.connectionManager.connect(config))
/src/lib/dialects/abstract/connection-manager.js-312-      .then(connection => this.sequelize.runHooks('afterConnect', connection, config).return(connection));
##############################################
/src/lib/dialects/mariadb/connection-manager.js-91-
/src/lib/dialects/mariadb/connection-manager.js:92:    return this.lib.createConnection(connectionConfig)
/src/lib/dialects/mariadb/connection-manager.js-93-      .then(connection => {
##############################################
/src/lib/dialects/mariadb/query.js-47-    return Promise.resolve(
/src/lib/dialects/mariadb/query.js:48:      connection.query(this.sql, parameters)
/src/lib/dialects/mariadb/query.js-49-        .then(results => {
##############################################
/src/lib/dialects/sqlite/query-interface.js-38-
/src/lib/dialects/sqlite/query-interface.js:39:    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));
/src/lib/dialects/sqlite/query-interface.js-40-  });
##############################################
/src/lib/dialects/sqlite/query-interface.js-67-
/src/lib/dialects/sqlite/query-interface.js:68:    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));
/src/lib/dialects/sqlite/query-interface.js-69-  });
##############################################
/src/lib/dialects/sqlite/query-interface.js-97-
/src/lib/dialects/sqlite/query-interface.js:98:    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));
/src/lib/dialects/sqlite/query-interface.js-99-  });
##############################################
/src/lib/dialects/sqlite/query-interface.js-147-
/src/lib/dialects/sqlite/query-interface.js:148:      return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));
/src/lib/dialects/sqlite/query-interface.js-149-    });
##############################################
/src/lib/dialects/sqlite/query-interface.js-164-
/src/lib/dialects/sqlite/query-interface.js:165:  return qi.sequelize.query(describeCreateTableSql, Object.assign({}, options, { type: QueryTypes.SELECT, raw: true }))
/src/lib/dialects/sqlite/query-interface.js-166-    .then(constraints => {
##############################################
/src/lib/dialects/sqlite/query-interface.js-178-
/src/lib/dialects/sqlite/query-interface.js:179:      return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));
/src/lib/dialects/sqlite/query-interface.js-180-    });
##############################################
/src/lib/dialects/sqlite/query-interface.js-194-  const query = qi.QueryGenerator.getForeignKeysQuery(tableName, database);
/src/lib/dialects/sqlite/query-interface.js:195:  return qi.sequelize.query(query, options)
/src/lib/dialects/sqlite/query-interface.js-196-    .then(result => {
##############################################
/src/lib/query-interface.js-42-    const sql = this.QueryGenerator.createDatabaseQuery(database, options);
/src/lib/query-interface.js:43:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-44-  }
##############################################
/src/lib/query-interface.js-56-    const sql = this.QueryGenerator.dropDatabaseQuery(database);
/src/lib/query-interface.js:57:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-58-  }
##############################################
/src/lib/query-interface.js-70-    const sql = this.QueryGenerator.createSchema(schema);
/src/lib/query-interface.js:71:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-72-  }
##############################################
/src/lib/query-interface.js-84-    const sql = this.QueryGenerator.dropSchema(schema);
/src/lib/query-interface.js:85:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-86-  }
##############################################
/src/lib/query-interface.js-118-
/src/lib/query-interface.js:119:    return this.sequelize.query(showSchemasSql, options).then(schemaNames => _.flatten(
/src/lib/query-interface.js-120-      schemaNames.map(value => value.schema_name ? value.schema_name : value)
##############################################
/src/lib/query-interface.js-235-
/src/lib/query-interface.js:236:    return promise.then(() => this.sequelize.query(sql, options));
/src/lib/query-interface.js-237-  }
##############################################
/src/lib/query-interface.js-253-
/src/lib/query-interface.js:254:    return this.sequelize.query(sql, options).then(() => {
/src/lib/query-interface.js-255-      const promises = [];
##############################################
/src/lib/query-interface.js-271-              options.supportsSearchPath = false;
/src/lib/query-interface.js:272:              promises.push(this.sequelize.query(sql, Object.assign({}, options, { raw: true })));
/src/lib/query-interface.js-273-            }
##############################################
/src/lib/query-interface.js-302-      if (this.sequelize.options.dialect === 'sqlite') {
/src/lib/query-interface.js:303:        return this.sequelize.query('PRAGMA foreign_keys;', options).then(result => {
/src/lib/query-interface.js-304-          const foreignKeysAreEnabled = result.foreign_keys === 1;
##############################################
/src/lib/query-interface.js-306-          if (foreignKeysAreEnabled) {
/src/lib/query-interface.js:307:            return this.sequelize.query('PRAGMA foreign_keys = OFF', options)
/src/lib/query-interface.js-308-              .then(() => dropAllTables(tableNames))
/src/lib/query-interface.js:309:              .then(() => this.sequelize.query('PRAGMA foreign_keys = ON', options));
/src/lib/query-interface.js-310-          }
##############################################
/src/lib/query-interface.js-327-
/src/lib/query-interface.js:328:        return Promise.each(queries, q => this.sequelize.query(q, options))
/src/lib/query-interface.js-329-          .then(() => dropAllTables(tableNames));
##############################################
/src/lib/query-interface.js-388-    const sql = this.QueryGenerator.pgListEnums(tableName);
/src/lib/query-interface.js:389:    return this.sequelize.query(sql, Object.assign({}, options, { plain: false, raw: true, type: QueryTypes.SELECT }));
/src/lib/query-interface.js-390-  }
##############################################
/src/lib/query-interface.js-403-    const sql = this.QueryGenerator.renameTableQuery(before, after);
/src/lib/query-interface.js:404:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-405-  }
##############################################
/src/lib/query-interface.js-423-    const showTablesSql = this.QueryGenerator.showTablesQuery();
/src/lib/query-interface.js:424:    return this.sequelize.query(showTablesSql, options).then(tableNames => _.flatten(tableNames));
/src/lib/query-interface.js-425-  }
##############################################
/src/lib/query-interface.js-470-
/src/lib/query-interface.js:471:    return this.sequelize.query(sql, options).then(data => {
/src/lib/query-interface.js-472-      /*
##############################################
/src/lib/query-interface.js-513-    attribute = this.sequelize.normalizeAttribute(attribute);
/src/lib/query-interface.js:514:    return this.sequelize.query(this.QueryGenerator.addColumnQuery(table, key, attribute), options);
/src/lib/query-interface.js-515-  }
##############################################
/src/lib/query-interface.js-539-      default:
/src/lib/query-interface.js:540:        return this.sequelize.query(this.QueryGenerator.removeColumnQuery(tableName, attributeName), options);
/src/lib/query-interface.js-541-    }
##############################################
/src/lib/query-interface.js-575-
/src/lib/query-interface.js:576:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-577-  }
##############################################
/src/lib/query-interface.js-620-      );
/src/lib/query-interface.js:621:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-622-    });
##############################################
/src/lib/query-interface.js-658-    const sql = this.QueryGenerator.addIndexQuery(tableName, options, rawTablename);
/src/lib/query-interface.js:659:    return this.sequelize.query(sql, Object.assign({}, options, { supportsSearchPath: false }));
/src/lib/query-interface.js-660-  }
##############################################
/src/lib/query-interface.js-672-    const sql = this.QueryGenerator.showIndexesQuery(tableName, options);
/src/lib/query-interface.js:673:    return this.sequelize.query(sql, Object.assign({}, options, { type: QueryTypes.SHOWINDEXES }));
/src/lib/query-interface.js-674-  }
##############################################
/src/lib/query-interface.js-683-    return Promise.map(tableNames, tableName =>
/src/lib/query-interface.js:684:      this.sequelize.query(this.QueryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)
/src/lib/query-interface.js-685-    ).then(results => {
##############################################
/src/lib/query-interface.js-730-        const query = this.QueryGenerator.getForeignKeyReferencesQuery(tableName, catalogName);
/src/lib/query-interface.js:731:        return this.sequelize.query(query, queryOptions)
/src/lib/query-interface.js-732-          .then(result => result.map(Utils.camelizeObjectKeys));
##############################################
/src/lib/query-interface.js-738-        const query = this.QueryGenerator.getForeignKeysQuery(tableName, catalogName);
/src/lib/query-interface.js:739:        return this.sequelize.query(query, queryOptions);
/src/lib/query-interface.js-740-      }
##############################################
/src/lib/query-interface.js-755-    const sql = this.QueryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);
/src/lib/query-interface.js:756:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-757-  }
##############################################
/src/lib/query-interface.js-843-    const sql = this.QueryGenerator.addConstraintQuery(tableName, options, rawTablename);
/src/lib/query-interface.js:844:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-845-  }
##############################################
/src/lib/query-interface.js-848-    const sql = this.QueryGenerator.showConstraintsQuery(tableName, constraintName);
/src/lib/query-interface.js:849:    return this.sequelize.query(sql, Object.assign({}, options, { type: QueryTypes.SHOWCONSTRAINTS }));
/src/lib/query-interface.js-850-  }
##############################################
/src/lib/query-interface.js-872-        const sql = this.QueryGenerator.removeConstraintQuery(tableName, constraintName);
/src/lib/query-interface.js:873:        return this.sequelize.query(sql, options);
/src/lib/query-interface.js-874-    }
##############################################
/src/lib/query-interface.js-884-
/src/lib/query-interface.js:885:    return this.sequelize.query(sql, options).then(results => {
/src/lib/query-interface.js-886-      if (instance) results[0].isNewRecord = false;
##############################################
/src/lib/query-interface.js-948-    const sql = this.QueryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);
/src/lib/query-interface.js:949:    return this.sequelize.query(sql, options).then(result => {
/src/lib/query-interface.js-950-      switch (this.sequelize.options.dialect) {
##############################################
/src/lib/query-interface.js-1011-    options.instance = instance;
/src/lib/query-interface.js:1012:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1013-  }
##############################################
/src/lib/query-interface.js-1042-    options.model = model;
/src/lib/query-interface.js:1043:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1044-  }
##############################################
/src/lib/query-interface.js-1080-      options.instance = instance;
/src/lib/query-interface.js:1081:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1082-    });
##############################################
/src/lib/query-interface.js-1131-
/src/lib/query-interface.js:1132:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1133-  }
##############################################
/src/lib/query-interface.js-1142-
/src/lib/query-interface.js:1143:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1144-  }
##############################################
/src/lib/query-interface.js-1159-
/src/lib/query-interface.js:1160:    return this.sequelize.query(sql, options).then(data => {
/src/lib/query-interface.js-1161-      if (!options.plain) {
##############################################
/src/lib/query-interface.js-1193-    if (sql) {
/src/lib/query-interface.js:1194:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1195-    }
##############################################
/src/lib/query-interface.js-1203-    if (sql) {
/src/lib/query-interface.js:1204:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1205-    }
##############################################
/src/lib/query-interface.js-1213-    if (sql) {
/src/lib/query-interface.js:1214:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1215-    }
##############################################
/src/lib/query-interface.js-1260-    if (sql) {
/src/lib/query-interface.js:1261:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1262-    }
##############################################
/src/lib/query-interface.js-1288-    if (sql) {
/src/lib/query-interface.js:1289:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1290-    }
##############################################
/src/lib/query-interface.js-1318-    if (sql) {
/src/lib/query-interface.js:1319:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1320-    }
##############################################
/src/lib/query-interface.js-1384-
/src/lib/query-interface.js:1385:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1386-  }
##############################################
/src/lib/query-interface.js-1398-
/src/lib/query-interface.js:1399:    return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1400-  }
##############################################
/src/lib/query-interface.js-1409-    if (sql) {
/src/lib/query-interface.js:1410:      return this.sequelize.query(sql, options);
/src/lib/query-interface.js-1411-    }
##############################################
/src/lib/query-interface.js-1431-    const sql = this.QueryGenerator.commitTransactionQuery(transaction);
/src/lib/query-interface.js:1432:    const promise = this.sequelize.query(sql, options);
/src/lib/query-interface.js-1433-
##############################################
/src/lib/query-interface.js-1450-    const sql = this.QueryGenerator.rollbackTransactionQuery(transaction);
/src/lib/query-interface.js:1451:    const promise = this.sequelize.query(sql, options);
/src/lib/query-interface.js-1452-
##############################################
/src/lib/sequelize.js-495-   * ```js
/src/lib/sequelize.js:496:   * sequelize.query('SELECT...').then(([results, metadata]) => {
/src/lib/sequelize.js-497-   *   // Raw query - use then plus array spread
##############################################
/src/lib/sequelize.js-499-   *
/src/lib/sequelize.js:500:   * sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(results => {
/src/lib/sequelize.js-501-   *   // SELECT query - use then
##############################################
/src/lib/sequelize.js-685-
/src/lib/sequelize.js:686:    return this.query(query, options);
/src/lib/sequelize.js-687-  }
##############################################
/src/lib/sequelize.js-887-
/src/lib/sequelize.js:888:    return this.query('SELECT 1+1 AS result', options).return();
/src/lib/sequelize.js-889-  }
