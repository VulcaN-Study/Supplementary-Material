/src/README.md-16-
/src/README.md:17:Http.createServer(async (request, response) => {
/src/README.md-18-
/src/README.md:19:  const { payload, mime } = await Subtext.parse(request, null, { parse: true, output: 'data' });
/src/README.md-20-
##############################################
/src/lib/index.js-56-        if (options.parse === true) {
/src/lib/index.js:57:            parsed.payload = await internals.parse(req, tap, options, contentType);
/src/lib/index.js-58-            return parsed;
##############################################
/src/lib/index.js-102-    if (output === 'file') {
/src/lib/index.js:103:        const file = await internals.writeFile(req, options, source);
/src/lib/index.js-104-        return file.item;
##############################################
/src/lib/index.js-164-    if (output === 'file') {
/src/lib/index.js:165:        const file = await internals.writeFile(req, options, source);
/src/lib/index.js-166-        return file.item;
##############################################
/src/lib/index.js-196-        try {
/src/lib/index.js:197:            return Bourne.parse(payload.toString('utf8'), { protoAction: options.protoAction });
/src/lib/index.js-198-        }
##############################################
/src/lib/index.js-282-            if (output === 'file') {                                                                // Output: 'file'
/src/lib/index.js:283:                pendingFiles.push(internals.writeFile(req, options, part));
/src/lib/index.js-284-            }
##############################################
/src/lib/index.js-321-                file.destroy();
/src/lib/index.js:322:                Fs.unlink(path, (/* fsErr */) => reject(err));      // Ignore unlink errors
/src/lib/index.js-323-                return;
