<report_mosca>
 <Path>/src/client/auto-list.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 15 -        setTimeout(() => this.refs.input.getDOMNode().focus(), 100)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/client/since-when.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 5 -      this._iv = setInterval(this.tick, 5000)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/client/post.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 26 -      return setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/www/bundle.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 257 -        setTimeout(function()  {return this.refs.input.getDOMNode().focus();}.bind(this), 100)

 Line: 1593 -      return setTimeout(function () {

 Line: 2217 -      this._iv = setInterval(this.tick, 5000)

 Line: 12257 -    this.id = setTimeout(f, ms);

 Line: 14220 -      setTimeout(fireOrphanDelayed, 0);

 Line: 15278 -      { display.blinker = setInterval(function () { return display.cursorDiv.style.visibility = (on = !on) ? "" : "hidden"; },

 Line: 15290 -    setTimeout(function () { if (cm.state.delayingBlurEvent) {

 Line: 15309 -        if (webkit) { setTimeout(function () { return cm.display.input.reset(true); }, 20); } // Issue #1730

 Line: 15324 -    setTimeout(function () { if (!cm.state.focused) { cm.display.shift = false; } }, 150);

 Line: 15771 -        if (cm.state.focused) { setTimeout(function () { return cm.display.input.focus(); }, 0); }

 Line: 16539 -        setTimeout(function () {

 Line: 18559 -        setTimeout(function () { return cm.display.input.focus(); }, 20);

 Line: 18644 -      if (resizeTimer == null) { resizeTimer = setTimeout(function () {

 Line: 19311 -        setTimeout(function () { return display.scroller.draggable = true; }, 100);

 Line: 19330 -      setTimeout(function () { return display.input.focus(); }, 20);

 Line: 19371 -    if (ie) { setTimeout(bind(ensureFocus, cm), 0); }

 Line: 19403 -          { setTimeout(function () {document.body.focus(); display.input.focus();}, 20); }

 Line: 19424 -    setTimeout(function () { return display.input.focus(); }, 20);

 Line: 19535 -          { setTimeout(operation(cm, function () {if (counter == curCount) { extend(e); }}), 150); }

 Line: 19538 -        if (outside) { setTimeout(operation(cm, function () {

 Line: 19827 -    setTimeout(function () { return updateScrollbars(cm); }, 100);

 Line: 19876 -    if (ie && ie_version < 11) { setTimeout(function () { return this$1.display.input.reset(true); }, 20); }

 Line: 19886 -      { setTimeout(bind(onFocus, this), 20); }

 Line: 19933 -        touchFinished = setTimeout(function () { return d.activeTouch = null; }, 1000);

 Line: 20758 -      if (ie_version <= 11) { setTimeout(operation(cm, function () { return this$1.updateFromDOM(); }), 20); }

 Line: 20813 -      setTimeout(function () {

 Line: 20890 -    this.gracePeriod = setTimeout(function () {

 Line: 21063 -    this.readDOMTimeout = setTimeout(function () {

 Line: 21552 -            display.detectingSelectAll = setTimeout(poll, 500);

 Line: 21558 -        display.detectingSelectAll = setTimeout(poll, 200);

 Line: 21567 -        setTimeout(rehide, 20);

 Line: 21571 -      setTimeout(rehide, 50);

 Line: 29410 -      local.setTimeout(flush, 1);

 Line: 29731 -      setTimeout(function(){

 Line: 29737 -      setTimeout(function(){

 Line: 29756 -      setTimeout(function(){

 Line: 29762 -      setTimeout(function(){

 Line: 31955 -      'parseInt', 'setTimeout'

 Line: 32359 -          setTimeout = context.setTimeout,

 Line: 37291 -            timeoutId = setTimeout(delayed, remaining);

 Line: 37332 -              maxTimeoutId = setTimeout(maxDelayed, remaining);

 Line: 37339 -            timeoutId = setTimeout(delayed, wait);

 Line: 37372 -        return setTimeout(function() { func.apply(undefined, args); }, 1);

 Line: 37396 -        return setTimeout(function() { func.apply(undefined, args); }, wait);

 Line: 46470 -    setTimeout(function () {

 Line: 46610 -      throw new Error('setTimeout has not been defined');

 Line: 46617 -          if (typeof setTimeout === 'function') {

 Line: 46618 -              cachedSetTimeout = setTimeout;

 Line: 46636 -      if (cachedSetTimeout === setTimeout) {

 Line: 46638 -          return setTimeout(fun, 0);

 Line: 46640 -      // if setTimeout wasn't available but was latter defined

 Line: 46641 -      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {

 Line: 46642 -          cachedSetTimeout = setTimeout;

 Line: 46643 -          return setTimeout(fun, 0);

 Line: 46646 -          // when when somebody has screwed with setTimeout but no I.E. maddness

 Line: 46671 -          // when when somebody has screwed with setTimeout but no I.E. maddness

 Line: 46679 -              // Some versions of I.E. have different rules for clearTimeout vs setTimeout

 Line: 47636 -          // Use setTimeout to break the promise chain.

 Line: 47637 -          setTimeout(function () {

 Line: 53639 -        noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);

 Line: 53647 -        this.timeout = setTimeout(this.flushClassNameQueue, TICK);

 Line: 63424 -        window.setTimeout(eventListener, 0);

 Line: 66129 -      !('setInterval' in obj) &&

 Line: 73499 -      this._timer = setTimeout(function(){

 Line: 74089 -      return eval(this.code); // maybe...

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/www/bundle.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23402 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 30048 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 36145 -       * @param {Array} array The array to query.

 Line: 36303 -       * @param {Array} array The array to query.

 Line: 36433 -       * @param {Array} array The array to query.

 Line: 36682 -       * @param {Array} array The array to query.

 Line: 46247 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 47063 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 47149 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 47300 -    query: true,

 Line: 47317 -   * In addition to params, links may pass along query string parameters

 Line: 47320 -   *   <Link to="showPost" postId="123" query={{show:true}}/>

 Line: 47339 -      query: React.PropTypes.object

 Line: 47668 -    redirect: function (to, params, query) {

 Line: 47669 -      this.cancelReason = new Redirect(to, params, query);

 Line: 47681 -  function Redirect(to, params, query) {

 Line: 47684 -    this.query = query;

 Line: 47800 -        var query = Path.extractQuery(transition.path) || {};

 Line: 47805 -          activeQuery: query,

 Line: 47863 -  function computeHandlerProps(matches, query) {

 Line: 47868 -      query: null,

 Line: 47881 -      props.query = query;

 Line: 47917 -  var queryMatcher = /\?(.+)/;

 Line: 48007 -     * Returns an object that is the result of parsing any query string contained in

 Line: 48008 -     * the given path, null if the path contains no query string.

 Line: 48016 -     * Returns a version of the given path without the query string.

 Line: 48023 -     * Returns a version of the given path with the parameters in the given query

 Line: 48024 -     * added to the query string.

 Line: 48026 -    withQuery: function (path, query) {

 Line: 48030 -        query = query ? mergeProperties(existingQuery, query) : existingQuery;

 Line: 48032 -      var queryString = query && qs.stringify(query);

 Line: 48035 -        return Path.withoutQuery(path) + '?' + queryString;

 Line: 48092 -  function makeHref(routeName, params, query) {

 Line: 48093 -    var path = makePath(routeName, params, query);

 Line: 48110 -   * parameters, and query values.

 Line: 48112 -  function makePath(to, params, query) {

 Line: 48128 -    return Path.withQuery(Path.injectParams(path, params), query);

 Line: 48153 -  function replaceWith(to, params, query) {

 Line: 48154 -    URLStore.replace(makePath(to, params, query));

 Line: 48167 -  function transitionTo(to, params, query) {

 Line: 48168 -    URLStore.push(makePath(to, params, query));

 Line: 48206 -   * and query that are currently active. Components that use it get two

 Line: 48210 -   *      params, and query are active.

 Line: 48228 -   *         isActive: Tab.isActive(routeName, params, query)

 Line: 48239 -       * Returns true if the route with the given name, URL parameters, and query

 Line: 48288 -  function queryIsActive(query) {

 Line: 48289 -    for (var property in query) {

 Line: 48305 -   * The ActiveStore keeps track of which routes, URL and query parameters are

 Line: 48340 -     * Returns true if the route with the given name, URL parameters, and query

 Line: 48343 -    isActive: function (routeName, params, query) {

 Line: 48347 -        return isActive && queryIsActive(query);

 Line: 49410 -      elem.nodeName === 'SELECT' ||

 Line: 50181 -          case ReactMultiChildUpdateTypes.INSERT_MARKUP:

 Line: 57180 -        var queryRoot = rootNode;

 Line: 57183 -          queryRoot = queryRoot.parentNode;

 Line: 57192 -        var group = queryRoot.querySelectorAll(

 Line: 57865 -  var RESET_BATCHED_UPDATES = {

 Line: 57872 -  var FLUSH_BATCHED_UPDATES = {

 Line: 57877 -  var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

 Line: 58336 -    INSERT_MARKUP: 'set innerHTML',

 Line: 60850 -      type: ReactMultiChildUpdateTypes.INSERT_MARKUP,

 Line: 61245 -    INSERT_MARKUP: null,

 Line: 62184 -  var SELECTION_RESTORATION = {

 Line: 62258 -    SELECTION_RESTORATION,

 Line: 62740 -   * Todo: Support the entire DOM.scry query syntax. For now, these simple

 Line: 63680 -  var NESTED_UPDATES = {

 Line: 63687 -        // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run

 Line: 63699 -  var UPDATE_QUEUEING = {

 Line: 63708 -  var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

 Line: 72299 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 72428 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 73260 -  * Add query-string `val`.

 Line: 73330 -   *       // querystring

 Line: 73472 -    var query = this._query.join('&');

 Line: 73504 -    // querystring

 Line: 73506 -      query = request.serializeObject(query);

 Line: 73508 -        ? '&' + query

 Line: 73509 -        : '?' + query;

 Line: 73609 -   * DELETE `url` with optional callback `fn(res)`.

 Line: 73618 -    var req = request('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/docs/demo/admin/bundle.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 145 -        setTimeout(function()  {return this.refs.input.getDOMNode().focus();}.bind(this), 100)

 Line: 1364 -      this._iv = setInterval(this.tick, 5000)

 Line: 1608 -      if (old_ie) setTimeout(bind(resetInput, this, true), 20);

 Line: 1614 -      if (hasFocus || (options.autofocus && !mobile)) setTimeout(bind(onFocus, this), 20);

 Line: 1753 -      setTimeout(function(){updateScrollbars(cm);}, 100);

 Line: 1792 -      setTimeout(function(){alignHorizontally(cm);}, 20);

 Line: 2426 -        display.blinker = setInterval(function() {

 Line: 3140 -      function reFocus() { if (cm.state.focused) setTimeout(bind(focusInput, cm), 0); }

 Line: 3148 -        if (resizeTimer == null) resizeTimer = setTimeout(function() {

 Line: 3162 -        if (p) setTimeout(unregister, 5000);

 Line: 3165 -      setTimeout(unregister, 5000);

 Line: 3255 -          setTimeout(function(){display.scroller.draggable = true;}, 100);

 Line: 3270 -        setTimeout(bind(focusInput, cm), 20);

 Line: 3279 -      setTimeout(bind(ensureFocus, cm), 0);

 Line: 3285 -        setTimeout(bind(focusInput, cm), 20);

 Line: 3309 -              setTimeout(function() {document.body.focus(); focusInput(cm);}, 20);

 Line: 3364 -            setTimeout(operation(cm, function(){if (counter == curCount) extend(e);}), 150);

 Line: 3367 -          if (outside) setTimeout(operation(cm, function() {

 Line: 3455 -          setTimeout(bind(focusInput, cm), 20);

 Line: 3585 -          setTimeout(function() {

 Line: 3634 -      if (next && !isModifierKey(e)) maybeTransition = setTimeout(function() {

 Line: 3724 -          if (webkit) setTimeout(bind(resetInput, cm, true), 0); // Issue #1730

 Line: 3737 -      setTimeout(function() {if (!cm.state.focused) cm.doc.sel.shift = false;}, 150);

 Line: 3785 -            else if (i++ < 10) detectingSelectAll = setTimeout(poll, 500);

 Line: 3788 -          detectingSelectAll = setTimeout(poll, 200);

 Line: 3797 -          setTimeout(rehide, 20);

 Line: 3801 -        setTimeout(rehide, 50);

 Line: 7065 -        setTimeout(fireDelayed, 0);

 Line: 7106 -    Delayed.prototype = {set: function(ms, f) {clearTimeout(this.id); this.id = setTimeout(f, ms);}};

 Line: 8873 -      local.setTimeout(flush, 1);

 Line: 9194 -      setTimeout(function(){

 Line: 9200 -      setTimeout(function(){

 Line: 9219 -      setTimeout(function(){

 Line: 9225 -      setTimeout(function(){

 Line: 9438 -      'parseInt', 'setTimeout'

 Line: 9842 -          setTimeout = context.setTimeout,

 Line: 14774 -            timeoutId = setTimeout(delayed, remaining);

 Line: 14815 -              maxTimeoutId = setTimeout(maxDelayed, remaining);

 Line: 14822 -            timeoutId = setTimeout(delayed, wait);

 Line: 14855 -        return setTimeout(function() { func.apply(undefined, args); }, 1);

 Line: 14879 -        return setTimeout(function() { func.apply(undefined, args); }, wait);

 Line: 20660 -      var timeout = setTimeout(cleanUpNextTick);

 Line: 20689 -          setTimeout(drainQueue, 0);

 Line: 21279 -          // Use setTimeout to break the promise chain.

 Line: 21280 -          setTimeout(function () {

 Line: 27617 -        noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);

 Line: 27625 -        this.timeout = setTimeout(this.flushClassNameQueue, TICK);

 Line: 37402 -        window.setTimeout(eventListener, 0);

 Line: 40107 -      !('setInterval' in obj) &&

 Line: 43934 -      this._timer = setTimeout(function(){

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/docs/demo/admin/bundle.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1722 -    // STATE UPDATES

 Line: 2305 -    // SELECTION / CURSOR

 Line: 4068 -    // SELECTION

 Line: 5254 -    // FROMTEXTAREA

 Line: 13628 -       * @param {Array} array The array to query.

 Line: 13786 -       * @param {Array} array The array to query.

 Line: 13916 -       * @param {Array} array The array to query.

 Line: 14165 -       * @param {Array} array The array to query.

 Line: 20747 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 20833 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 20943 -    query: true,

 Line: 20960 -   * In addition to params, links may pass along query string parameters

 Line: 20963 -   *   <Link to="showPost" postId="123" query={{show:true}}/>

 Line: 20982 -      query: React.PropTypes.object

 Line: 21311 -    redirect: function (to, params, query) {

 Line: 21312 -      this.cancelReason = new Redirect(to, params, query);

 Line: 21324 -  function Redirect(to, params, query) {

 Line: 21327 -    this.query = query;

 Line: 21443 -        var query = Path.extractQuery(transition.path) || {};

 Line: 21448 -          activeQuery: query,

 Line: 21506 -  function computeHandlerProps(matches, query) {

 Line: 21511 -      query: null,

 Line: 21524 -      props.query = query;

 Line: 21560 -  var queryMatcher = /\?(.+)/;

 Line: 21650 -     * Returns an object that is the result of parsing any query string contained in

 Line: 21651 -     * the given path, null if the path contains no query string.

 Line: 21659 -     * Returns a version of the given path without the query string.

 Line: 21666 -     * Returns a version of the given path with the parameters in the given query

 Line: 21667 -     * added to the query string.

 Line: 21669 -    withQuery: function (path, query) {

 Line: 21673 -        query = query ? mergeProperties(existingQuery, query) : existingQuery;

 Line: 21675 -      var queryString = query && qs.stringify(query);

 Line: 21678 -        return Path.withoutQuery(path) + '?' + queryString;

 Line: 21735 -  function makeHref(routeName, params, query) {

 Line: 21736 -    var path = makePath(routeName, params, query);

 Line: 21753 -   * parameters, and query values.

 Line: 21755 -  function makePath(to, params, query) {

 Line: 21771 -    return Path.withQuery(Path.injectParams(path, params), query);

 Line: 21796 -  function replaceWith(to, params, query) {

 Line: 21797 -    URLStore.replace(makePath(to, params, query));

 Line: 21810 -  function transitionTo(to, params, query) {

 Line: 21811 -    URLStore.push(makePath(to, params, query));

 Line: 21849 -   * and query that are currently active. Components that use it get two

 Line: 21853 -   *      params, and query are active.

 Line: 21871 -   *         isActive: Tab.isActive(routeName, params, query)

 Line: 21882 -       * Returns true if the route with the given name, URL parameters, and query

 Line: 21931 -  function queryIsActive(query) {

 Line: 21932 -    for (var property in query) {

 Line: 21948 -   * The ActiveStore keeps track of which routes, URL and query parameters are

 Line: 21983 -     * Returns true if the route with the given name, URL parameters, and query

 Line: 21986 -    isActive: function (routeName, params, query) {

 Line: 21990 -        return isActive && queryIsActive(query);

 Line: 23388 -      elem.nodeName === 'SELECT' ||

 Line: 24159 -          case ReactMultiChildUpdateTypes.INSERT_MARKUP:

 Line: 31158 -        var queryRoot = rootNode;

 Line: 31161 -          queryRoot = queryRoot.parentNode;

 Line: 31170 -        var group = queryRoot.querySelectorAll(

 Line: 31843 -  var RESET_BATCHED_UPDATES = {

 Line: 31850 -  var FLUSH_BATCHED_UPDATES = {

 Line: 31855 -  var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

 Line: 32314 -    INSERT_MARKUP: 'set innerHTML',

 Line: 34828 -      type: ReactMultiChildUpdateTypes.INSERT_MARKUP,

 Line: 35223 -    INSERT_MARKUP: null,

 Line: 36162 -  var SELECTION_RESTORATION = {

 Line: 36236 -    SELECTION_RESTORATION,

 Line: 36718 -   * Todo: Support the entire DOM.scry query syntax. For now, these simple

 Line: 37658 -  var NESTED_UPDATES = {

 Line: 37665 -        // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run

 Line: 37677 -  var UPDATE_QUEUEING = {

 Line: 37686 -  var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

 Line: 43695 -  * Add query-string `val`.

 Line: 43765 -   *       // querystring

 Line: 43907 -    var query = this._query.join('&');

 Line: 43939 -    // querystring

 Line: 43941 -      query = request.serializeObject(query);

 Line: 43943 -        ? '&' + query

 Line: 43944 -        : '?' + query;

 Line: 44044 -   * DELETE `url` with optional callback `fn(res)`.

 Line: 44053 -    var req = request('DELETE', url);

</Result>
</report_mosca>

