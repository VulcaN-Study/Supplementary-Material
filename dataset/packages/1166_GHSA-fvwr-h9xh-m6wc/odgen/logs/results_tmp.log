|checker| success id$0$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);

|checker| success id$1$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$2$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$3$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$4$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$5$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$6$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$7$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$8$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$9$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$10$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$11$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);

|checker| success id$12$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$13$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$14$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$15$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$16$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$17$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$18$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$19$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$20$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$21$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$22$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$23$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$24$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$25$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$26$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$27$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$28$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$29$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$30$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$31$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$32$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$33$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$34$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$35$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$36$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$37$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$38$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$39$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$40$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$41$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$42$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$43$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$44$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$45$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$46$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$47$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$48$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$49$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$50$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$51$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$52$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$53$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$54$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$55$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$56$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$57$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$58$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$59$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$60$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$61$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$62$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$63$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$64$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$65$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$66$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$67$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$68$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$69$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$70$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$71$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$72$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$73$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$74$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$75$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 388	            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$76$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$77$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$78$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$79$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$80$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$81$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$82$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$83$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$84$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$85$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$86$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$87$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$88$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/tools-testing/tools-docker/odgen/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$89$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$90$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$91$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$92$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$93$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$94$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$95$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$96$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$97$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$98$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$99$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$100$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$101$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$102$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$103$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$104$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$105$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$106$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$107$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$108$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$109$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$110$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$111$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$112$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$113$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$114$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$115$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$116$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$117$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$118$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$119$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$120$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$121$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$122$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$123$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 388	            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$124$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$125$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$126$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$127$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$128$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$129$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$130$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$131$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$132$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$133$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$134$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$135$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$136$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/tools-testing/tools-docker/odgen/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$0$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);

|checker| success id$1$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$2$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$3$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$4$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$5$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$6$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$7$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$8$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$9$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$10$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$11$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);

|checker| success id$12$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$13$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$14$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$15$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$16$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$17$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$18$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$19$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$20$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$21$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$22$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$23$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$24$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$25$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$26$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$27$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$28$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$29$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$30$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$31$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$32$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$33$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$34$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$35$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$36$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$37$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$38$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$39$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$40$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$41$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$42$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$43$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$44$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$45$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$46$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$47$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$48$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$49$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$50$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$51$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$52$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$53$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$54$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$55$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$56$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$57$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$58$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$59$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$60$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$61$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$62$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$63$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$64$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$65$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$66$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$67$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$68$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$69$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$70$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$71$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$72$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$73$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$74$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$75$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 388	            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$76$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$77$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$78$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$79$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$80$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$81$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$82$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$83$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$84$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$85$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$86$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$87$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$88$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/tools-testing/tools-docker/odgen/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$89$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$90$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$91$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$92$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$93$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$94$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$95$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$96$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$97$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$98$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$99$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$100$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$101$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$102$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$103$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$104$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$105$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$106$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$107$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$108$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$109$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$110$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$111$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$112$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$113$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$114$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$115$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$116$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$117$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$118$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$119$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$120$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$121$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$122$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$123$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 388	            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$124$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$125$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$126$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$127$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$128$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$129$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$130$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$131$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$132$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$133$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$134$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$135$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$136$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/tools-testing/tools-docker/odgen/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$0$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);

|checker| success id$1$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$2$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$3$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$4$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$5$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$6$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$7$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$8$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$9$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$10$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);

|checker| success id$11$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);

|checker| success id$12$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$13$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$14$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$15$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$16$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$17$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$18$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$19$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$20$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$21$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);

|checker| success id$22$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$23$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$24$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$25$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$26$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$27$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$28$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$29$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$30$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$31$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$32$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$33$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$34$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$35$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$36$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 306	    const dispenser = new Pez.Dispenser(dispenserOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$37$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$38$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$39$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$40$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 440	    source.pipe(dispenser);

|checker| success id$41$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$42$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$43$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$44$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$45$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$46$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$47$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$48$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$49$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$50$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$51$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$52$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$53$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$54$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$55$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$56$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$57$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$58$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$59$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$60$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$61$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$62$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$63$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$64$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$65$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$66$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$67$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$68$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$69$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$70$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$71$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$72$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$73$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$74$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$75$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 388	            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$76$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$77$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$78$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$79$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$80$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$81$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$82$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$83$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$84$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$85$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$86$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$87$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$88$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/tools-testing/tools-docker/odgen/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$89$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$90$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$91$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$92$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$93$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$94$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$95$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$96$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$97$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$98$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$99$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$100$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$101$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$102$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$103$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$104$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 54	    const contentLength = req.headers['content-length'];
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$105$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$106$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 64	    const contentType = Content.type(this.settings.override || req.headers['content-type'] || this.settings.defaultContentType || 'application/octet-stream');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$107$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$108$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$109$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 28	    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$110$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 190	            const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$111$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$112$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$113$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$114$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$115$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 103	        const stream = decoder(decoderOptions);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$116$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$117$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 20	        deflate: (options) => Zlib.createInflate(options)
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$118$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 189	            const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$119$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 102	        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 19	        gzip: (options) => Zlib.createGunzip(options),
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$120$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 90	internals.Parser.prototype.parse = function (contentType) {

    let next = this.next;

    const output = this.settings.output;        // Output: 'data', 'stream', 'file'
    let source = this.req;

    // Content-encoding

    const contentEncoding = source.headers['content-encoding'];
    const decoder = (this.settings.decoders || internals.decoders)[contentEncoding];
    if (decoder) {
        const decoderOptions = (this.settings.compression && this.settings.compression[contentEncoding]) || null;
        const stream = decoder(decoderOptions);
        next = Hoek.once(next);                 // Modify next() for async events
        this.next = next;
        stream.once('error', (err) => {

            return next(Boom.badRequest('Invalid compressed payload', err));
        });

        source = source.pipe(stream);
    }

    // Tap request

    if (this.tap) {
        source = source.pipe(this.tap);
    }

    // Multipart

    if (this.result.contentType.mime === 'multipart/form-data') {
        if (this.settings.multipart === false) {                            // Defaults to true
            return next(Boom.unsupportedMediaType());
        }

        return this.multipart(source, contentType);
    }

    // Output: 'stream'

    if (output === 'stream') {
        this.result.payload = source;
        return next();
    }

    // Output: 'file'

    if (output === 'file') {
        this.writeFile(source, (err, path, bytes) => {

            if (err) {
                return next(err);
            }

            this.result.payload = { path, bytes };
            return next();
        });

        return;
    }

    // Output: 'data'

    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$121$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$122$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 294	internals.Parser.prototype.multipart = function (source, contentType) {

    let next = this.next;
    next = Hoek.once(next);                                            // Modify next() for async events
    this.next = next;

    // Set stream timeout

    const clientTimeout = this.settings.timeout;
    let clientTimeoutId = null;

    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
    const dispenser = new Pez.Dispenser(dispenserOptions);

    const onError = (err) => {

        return next(Boom.badRequest('Invalid multipart payload format', err));
    };

    dispenser.once('error', onError);

    const data = {};
    const finalize = () => {

        clearTimeout(clientTimeoutId);
        dispenser.removeListener('error', onError);
        dispenser.removeListener('part', onPart);
        dispenser.removeListener('field', onField);
        dispenser.removeListener('close', onClose);

        this.result.payload = data;
        return next();
    };

    if (clientTimeout &&
        clientTimeout > 0) {

        clientTimeoutId = setTimeout(() => {

            return next(Boom.clientTimeout());
        }, clientTimeout);
    }

    const set = (name, value) => {

        if (!data.hasOwnProperty(name)) {
            data[name] = value;
        }
        else if (Array.isArray(data[name])) {
            data[name].push(value);
        }
        else {
            data[name] = [data[name], value];
        }
    };

    const pendingFiles = {};
    let nextId = 0;
    let closed = false;

    const output = (this.settings.multipart ? this.settings.multipart.output : this.settings.output);

    const onPart = (part) => {

        if (output === 'file') {                                                                // Output: 'file'
            const id = nextId++;
            pendingFiles[id] = true;
            this.writeFile(part, (err, path, bytes) => {

                delete pendingFiles[id];

                if (err) {
                    return next(err);
                }

                const item = {
                    filename: part.filename,
                    path,
                    headers: part.headers,
                    bytes
                };

                set(part.name, item);

                /* $lab:coverage:off$ */
                if (closed &&
                    !Object.keys(pendingFiles).length) {

                    return finalize(data);
                }
                /* $lab:coverage:on$ */
            });
        }
        else {                                                                                  // Output: 'data'
            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
        }
    };

    dispenser.on('part', onPart);

    const onField = (name, value) => set(name, value);

    dispenser.on('field', onField);

    const onClose = () => {

        /* $lab:coverage:off$ */
        if (Object.keys(pendingFiles).length) {
            closed = true;
            return;
        }
        /* $lab:coverage:on$ */

        return finalize(data);
    };

    dispenser.once('close', onClose);

    source.pipe(dispenser);
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 305	    const dispenserOptions = Hoek.applyToDefaults(contentType, { maxBytes: this.settings.maxBytes });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$123$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 388	            Wreck.read(part, {}, (ignoreErr, payload) => {

                // Error handled by dispenser.once('error')

                if (output === 'stream') {                                                      // Output: 'stream'
                    const item = Wreck.toReadableStream(payload);

                    item.hapi = {
                        filename: part.filename,
                        headers: part.headers
                    };

                    return set(part.name, item);
                }

                const ct = part.headers['content-type'] || '';
                const mime = ct.split(';')[0].trim().toLowerCase();
                const annotate = (value) => set(part.name, output === 'annotated' ? { filename: part.filename, headers: part.headers, payload: value } : value);

                if (!mime) {
                    return annotate(payload);
                }

                if (!payload.length) {
                    return annotate({});
                }

                this.object(payload, mime, (err, result) => annotate(err ? payload : result));
            });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$124$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 42	    this.result = {};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 155	    return Wreck.read(source, { timeout: this.settings.timeout, maxBytes: this.settings.maxBytes }, (err, payload) => {

        if (err) {
            return next(err);
        }

        this.object(payload, this.result.contentType.mime, (err, result) => {

            if (err) {
                this.result.payload = null;
                err.raw = payload;
                return next(err);
            }

            this.result.payload = result;
            return next();
        });
    });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$125$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 481	internals.Counter = function () {

    Stream.Transform.call(this);
    this.bytes = 0;
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 487	Hoek.inherits(internals.Counter, Stream.Transform);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$126$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$127$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 198	            source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$128$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$129$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 111	        source = source.pipe(stream);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$130$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$131$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 446	    const path = Hoek.uniqueFilename(this.settings.uploads || Os.tmpdir());
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$132$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$133$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 205	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$134$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 31	    const parser = new internals.Parser(req, tap, options, next);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$135$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 25	exports.parse = function (req, tap, options, next) {

    Hoek.assert(options, 'Missing options');
    Hoek.assert(options.parse !== undefined, 'Missing parse option setting');
    Hoek.assert(options.output !== undefined, 'Missing output option setting');

    const parser = new internals.Parser(req, tap, options, next);
    return parser.read();
};
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 117	        source = source.pipe(this.tap);
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

|checker| success id$136$color:green$: 
==========================
$FilePath$/home/tiago/empirical-jsvuln-tools-study/tools-testing/tools-docker/odgen/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 447	    const file = Fs.createWriteStream(path, { flags: 'wx' });
$FilePath$/home/tiago/empirical-jsvuln-tools-study/framework/src/packages/CWE-400/1166/package/lib/index.js
Line 477	    stream.pipe(counter).pipe(file);

