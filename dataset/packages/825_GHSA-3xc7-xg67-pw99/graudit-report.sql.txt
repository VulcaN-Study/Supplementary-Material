/src/src/commands/database.js-67-    case 'db:drop':
/src/src/commands/database.js:68:      await sequelize.query(`DROP DATABASE ${sequelize.getQueryInterface().quoteIdentifier(config.database)}`, {
/src/src/commands/database.js-69-        type: sequelize.QueryTypes.RAW
##############################################
/src/src/helpers/generic-helper.js-35-    if (sequelize.query.length === 2) {
/src/src/helpers/generic-helper.js:36:      return sequelize.query(sql, options);
/src/src/helpers/generic-helper.js-37-    } else {
/src/src/helpers/generic-helper.js:38:      return sequelize.query(sql, null, options);
/src/src/helpers/generic-helper.js-39-    }
##############################################
/src/lib/commands/database.js-65-      case 'db:drop':
/src/lib/commands/database.js:66:        yield sequelize.query(`DROP DATABASE ${sequelize.getQueryInterface().quoteIdentifier(config.database)}`, {
/src/lib/commands/database.js-67-          type: sequelize.QueryTypes.RAW
##############################################
/src/lib/helpers/generic-helper.js-44-    if (sequelize.query.length === 2) {
/src/lib/helpers/generic-helper.js:45:      return sequelize.query(sql, options);
/src/lib/helpers/generic-helper.js-46-    } else {
/src/lib/helpers/generic-helper.js:47:      return sequelize.query(sql, null, options);
/src/lib/helpers/generic-helper.js-48-    }
##############################################
/src/test/support/helpers.js-196-    return sequelize
/src/test/support/helpers.js:197:      .query('SELECT count(*) as count FROM ' + QueryGenerator.quoteTable(table))
/src/test/support/helpers.js-198-      .then(function (result) {
##############################################
/src/test/support/helpers.js-203-    if (sequelize.query.length === 2) {
/src/test/support/helpers.js:204:      return sequelize.query(sql, options);
/src/test/support/helpers.js-205-    } else {
/src/test/support/helpers.js:206:      return sequelize.query(sql, null, options);
/src/test/support/helpers.js-207-    }
##############################################
/src/test/support/index.js-12-  if (sequelize.query.length === 2) {
/src/test/support/index.js:13:    return sequelize.query(sql, options);
/src/test/support/index.js-14-  } else {
/src/test/support/index.js:15:    return sequelize.query(sql, null, options);
/src/test/support/index.js-16-  }
##############################################
/src/test/support/tmp/migrations/20141208213500-createPerson.js-9-      .then(function () {
/src/test/support/tmp/migrations/20141208213500-createPerson.js:10:        return db.sequelize.query('INVALID QUERY');
/src/test/support/tmp/migrations/20141208213500-createPerson.js-11-      });
##############################################
/src/test/support/assets/migrations/invalid/20141208213500-createPerson.js-9-      .then(function () {
/src/test/support/assets/migrations/invalid/20141208213500-createPerson.js:10:        return db.sequelize.query('INVALID QUERY');
/src/test/support/assets/migrations/invalid/20141208213500-createPerson.js-11-      });
##############################################
/src/test/db/db-create.test.js-120-        () => {
/src/test/db/db-create.test.js:121:          this.sequelize.query(`SELECT IF('${databaseName}' IN(SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA), 1, 0) AS found;`, {
/src/test/db/db-create.test.js-122-            type: this.sequelize.QueryTypes.SELECT
##############################################
/src/test/db/db-create.test.js-138-        () => {
/src/test/db/db-create.test.js:139:          this.sequelize.query(`SELECT IF('${databaseName}' IN(SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA), 1, 0) AS found;`, {
/src/test/db/db-create.test.js-140-            type: this.sequelize.QueryTypes.SELECT
##############################################
/src/test/db/db-drop.test.js-51-        () => {
/src/test/db/db-drop.test.js:52:          this.sequelize.query(`SELECT IF('${databaseName}' IN(SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA), 1, 0) AS found;`, {
/src/test/db/db-drop.test.js-53-            type: this.sequelize.QueryTypes.SELECT
##############################################
/src/docs/README.md-245-
/src/docs/README.md:246:Additional note: If you need to access the sequelize instance, you can easily do that via `queryInterface.sequelize`. For example `queryInterface.sequelize.query('CREATE TABLE mytable();')`.
