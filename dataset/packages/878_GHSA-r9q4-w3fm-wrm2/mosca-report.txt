<report_mosca>
 <Path>/src/third_party/closure/goog/mochikit/async/deferred.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 788 -   *   setTimeout(function() { value.callback(6); }, 2000);

 Line: 880 -    this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/third_party/closure/goog/dojo/dom/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -   *  goog.dom.query is a relatively full-featured CSS3 query function. It is

 Line: 49 -   *    2.) attempt to determine which branch to dispatch the query to:

 Line: 55 -   *        a section of a simple query statement (".blah:nth-child(odd)"

 Line: 57 -   *    4.) the resulting query dispatcher is called in the passed scope

 Line: 60 -   *        evaluation of nodes based on each simple query section

 Line: 61 -   *      - querySelectorAll is used instead of DOM where possible. If a query

 Line: 66 -   * @deprecated This is an all-software query selector. When developing for

 Line: 127 -     * what's reasonable for a programmatic node querying engine to

 Line: 150 -     * If something other than a String is passed for the query,

 Line: 199 -     * @param {string|Array} query The CSS3 expression to match against.

 Line: 204 -     * @return { {length: number} } The elements that matched the query.

 Line: 206 -     * @deprecated This is an all-software query selector. Use

 Line: 228 -    // Global thunk to determine whether we should treat the current query as

 Line: 229 -    // case sensitive or not. This switch is flipped by the query evaluator based

 Line: 240 -      //    state machine for query tokenization

 Line: 243 -      //    dojo.query implements an AST-style query representation. This

 Line: 244 -      //    representation is only generated once per query. For example,

 Line: 245 -      //    the same query run multiple times or under different root nodes

 Line: 249 -      //    ordered array of query component structures (or "parts"). Each

 Line: 261 -        query += ' * ';

 Line: 265 -        query += ' ';

 Line: 276 -      // The overall data graph of the full query, as represented by queryPart

 Line: 278 -      var queryParts = [];

 Line: 294 -      var x = 0, // index in the query

 Line: 295 -          ql = query.length,

 Line: 390 -          currentPart.infixOper = queryParts.pop();

 Line: 394 -        queryParts.push(currentPart);

 Line: 399 -      // iterate over the query, character by character, building up a

 Line: 400 -      // list of query part objects

 Line: 401 -      for (; lc = cc, cc = query.charAt(x), x < ql; x++) {

 Line: 419 -          //  the individual components of the previous query would be

 Line: 424 -          //        query: 'thinger',

 Line: 428 -          //        query: 'div.howdy[type=thinger]',

 Line: 431 -          //          query: '>',

 Line: 437 -            query: null, // the full text of the part's rule

 Line: 544 -      return queryParts;

 Line: 549 -    // DOM query infrastructure

 Line: 872 -      // Generates a node tester function based on the passed query part. The

 Line: 873 -      // query part is one of the structures generated by the query parser when it

 Line: 874 -      // creates the query AST. The 'ignores' object specifies which (if any)

 Line: 892 -            return (elem && (elem.tagName == query.getTag()));

 Line: 936 -            return (!!elem && (elem.id == query.id));

 Line: 1037 -      //    # if it's a purely descendant query (no ">", "+", or "~" modifiers)

 Line: 1075 -      var io = query.infixOper;

 Line: 1077 -      // The default filter func which tests for all conditions in the query

 Line: 1081 -      var qt = query.tag;

 Line: 1086 -        // If there's no infix operator, then it's a descendant query. ID

 Line: 1114 -          query.classes.length &&

 Line: 1119 -          // it's a class-based query and we've got a fast way to run it.

 Line: 1123 -          var classesString = query.classes.join(' ');

 Line: 1148 -          //    to have a tag selector, even if it's just "*" so we query

 Line: 1164 -        // the query is scoped in some way. Instead of querying by tag we

 Line: 1183 -    var filterDown = function(root, queryParts) {

 Line: 1185 -      //    this is the guts of the DOM query system. It takes a list of

 Line: 1186 -      //    parsed query parts and a root and finds children which match

 Line: 1188 -      var candidates = getArr(root), qp, x, te, qpl = queryParts.length, bag, ret;

 Line: 1192 -        qp = queryParts[i];

 Line: 1206 -          // via membership in this level's bag. If there are more query

 Line: 1218 -    // the query runner

 Line: 1221 -    // these are the primary caches for full-query results. The query

 Line: 1228 -    // 'div.foo .bar') into simple query expressions (e.g., ['div.foo',

 Line: 1256 -    //    caching is split into DOM query evaluators and QSA query evaluators

 Line: 1257 -    //  * caching query results is dirty and leak-prone (or, at a minimum,

 Line: 1262 -    //    has no weakref support. Caching compiled query evaluators is also

 Line: 1264 -    //    query evaluators is often < 100 function objects per evaluator (and

 Line: 1268 -    //    route at query time and keep 2 separate caches. Ugg.

 Line: 1281 -     * @param {(string|Array)} query

 Line: 1307 -      var qcz = query.charAt(0);

 Line: 1308 -      var nospace = (-1 == query.indexOf(' '));

 Line: 1334 -      //    if we've got a descendant query (e.g., '> .thinger' instead of

 Line: 1337 -      //    trivially rewrite the query to the form '#synid > .thinger' to

 Line: 1343 -              (query + ' *') : query;

 Line: 1354 -            //  the query parser when we might not need to

 Line: 1370 -            // else run the DOM branch on this query, ensuring that we

 Line: 1377 -        var parts = query.split(/\s*,\s*/);

 Line: 1380 -                        // if not a compound query (e.g., '.foo, .bar'), cache and

 Line: 1383 -                        // if it *is* a complex query, break it up into its

 Line: 1489 -     * @param {string|Array} query The query.

 Line: 1491 -     * @return {!Array} The elements that matched the query.

 Line: 1493 -    var query = function(query, opt_root) {

 Line: 1550 -    query.pseudos = pseudos;

 Line: 1552 -    return query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugin_impl.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 234 -    SELECTION: 4,

 Line: 253 -        handleSelectionChange: goog.editor.PluginImpl.Op.SELECTION,

 Line: 256 -        queryCommandValue: goog.editor.PluginImpl.Op.QUERY_COMMAND,

 Line: 337 -   * BEFORECHANGE, CHANGE, and SELECTIONCHANGE events, and calls

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/command.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 22 -   * Commands that the editor can excute via execCommand or queryCommandValue.

 Line: 61 -    UPDATE_LINK_BUBBLE: 'updateLinkBubble',

 Line: 63 -    // queryCommandValue only: returns the default tag name used in the field.

 Line: 70 -    UPDATE_LOREM: 'updatelorem',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/seamlessfield.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 307 -    // Because doFieldSizingGecko can be called after a setTimeout

 Line: 476 -    // Another point to note is that we do it on a setTimeout to allow for

 Line: 486 -      goog.global.setTimeout(goog.bind(function() {

 Line: 573 -      goog.global.setTimeout(function() { self.doFieldSizingGecko(); }, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/seamlessfield.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 480 -        !goog.editor.BrowserFeature.CLEARS_SELECTION_WHEN_FOCUS_LEAVES) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/style.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 122 -  goog.editor.style.SELECTABLE_INPUT_TYPES_ =

 Line: 150 -    if (goog.editor.BrowserFeature.HAS_UNSELECTABLE_STYLE) {

 Line: 166 -      if (input.type in goog.editor.style.SELECTABLE_INPUT_TYPES_) {

 Line: 209 -    if (goog.editor.BrowserFeature.HAS_UNSELECTABLE_STYLE) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/tableeditor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 77 -    INSERT_ROW_AFTER: '+insertRowAfter',

 Line: 78 -    INSERT_ROW_BEFORE: '+insertRowBefore',

 Line: 79 -    INSERT_COLUMN_AFTER: '+insertColumnAfter',

 Line: 80 -    INSERT_COLUMN_BEFORE: '+insertColumnBefore',

 Line: 204 -        case goog.editor.plugins.TableEditor.COMMAND.INSERT_ROW_BEFORE:

 Line: 207 -        case goog.editor.plugins.TableEditor.COMMAND.INSERT_ROW_AFTER:

 Line: 210 -        case goog.editor.plugins.TableEditor.COMMAND.INSERT_COLUMN_BEFORE:

 Line: 213 -        case goog.editor.plugins.TableEditor.COMMAND.INSERT_COLUMN_AFTER:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/undoredo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 432 -        previousFieldObject.execCommand(goog.editor.Command.UPDATE_LOREM);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/linkbubble.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 122 -  goog.editor.plugins.LinkBubble.DELETE_LINK_SPAN_ID_ = 'tr_delete-link-span';

 Line: 130 -  goog.editor.plugins.LinkBubble.DELETE_LINK_ID_ = 'tr_delete-link';

 Line: 251 -    return command == goog.editor.Command.UPDATE_LINK_BUBBLE;

 Line: 258 -    if (command == goog.editor.Command.UPDATE_LINK_BUBBLE) {

 Line: 424 -        goog.editor.plugins.LinkBubble.DELETE_LINK_SPAN_ID_);

 Line: 426 -        goog.editor.plugins.LinkBubble.DELETE_LINK_ID_,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/loremipsum.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 75 -   * Handles queryCommandValue.

 Line: 76 -   * @param {string} command The command to query.

 Line: 88 -   *     Should be CLEAR_LOREM or UPDATE_LOREM.

 Line: 97 -    } else if (command == goog.editor.Command.UPDATE_LOREM) {

 Line: 107 -        command == goog.editor.Command.UPDATE_LOREM ||

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/firststrong.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 131 -    if (goog.editor.Field.SELECTION_CHANGE_KEYCODES[e.keyCode]) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/abstractdialogplugin.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 265 -        goog.editor.Field.EventType.SELECTIONCHANGE);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/removeformatting.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 713 -          case String(goog.dom.TagName.SELECT):

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/basictextformatter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 401 -        // TODO(nicksantos): See if we can use queryCommandValue here.

 Line: 416 -        // We use queryCommandValue here since we don't just want to know if a

 Line: 690 -   * queryCommandState, etc.

 Line: 833 -      // NOTE(user): This doesn't check queryCommandState because it seems to

 Line: 1109 -      // (Note that queryCommandValue() will only return true if the

 Line: 1584 -  // Helpers for queryCommandState

 Line: 1748 -   * Wrapper for browser's queryCommandState.

 Line: 1749 -   * @param {Document|TextRange|Range} queryObject The object to query.

 Line: 1752 -   *     performing the queryCommandState.

 Line: 1759 -        this.queryCommandHelper_(true, queryObject, command, opt_styleWithCss));

 Line: 1764 -   * Wrapper for browser's queryCommandValue.

 Line: 1765 -   * @param {Document|TextRange|Range} queryObject The object to query.

 Line: 1768 -   *     performing the queryCommandValue.

 Line: 1775 -        false, queryObject, command, opt_styleWithCss);

 Line: 1780 -   * Helper function to perform queryCommand(Value|State).

 Line: 1781 -   * @param {boolean} isGetQueryCommandState True to use queryCommandState, false

 Line: 1782 -   *     to use queryCommandValue.

 Line: 1783 -   * @param {Document|TextRange|Range} queryObject The object to query.

 Line: 1786 -   *     performing the queryCommand(Value|State).

 Line: 1791 -      isGetQueryCommandState, queryObject, command, opt_styleWithCss) {

 Line: 1802 -    var ret = isGetQueryCommandState ? queryObject.queryCommandState(command) :

 Line: 1803 -                                       queryObject.queryCommandValue(command);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/enterhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 213 -   * @param {goog.events.Event} e The DELETE keypress event.

 Line: 242 -          // properly conform to what the user expects when DELETE is pressed.

 Line: 284 -      } else if (e.keyCode == goog.events.KeyCodes.DELETE) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/tagonenterhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 76 -   * queryCommandValue calls asking for goog.editor.Command.BLOCKQUOTE.

 Line: 148 -      if (e.keyCode == goog.events.KeyCodes.DELETE) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/browserfeature.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 84 -    CLEARS_SELECTION_WHEN_FOCUS_LEAVES:

 Line: 88 -    HAS_UNSELECTABLE_STYLE: goog.userAgent.GECKO || goog.userAgent.WEBKIT,

 Line: 181 -    SELECTS_IMAGES_ON_CLICK: goog.userAgent.IE || goog.userAgent.OPERA,

 Line: 190 -    COLLAPSES_SELECTION_ONMOUSEDOWN: false,

 Line: 194 -    CARET_INSIDE_SELECTION: goog.userAgent.OPERA,

 Line: 236 -    CAN_SELECT_EMPTY_ELEMENT: !goog.userAgent.IE && !goog.userAgent.WEBKIT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/range.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 318 -   * execCommand and queryCommandValue, which will fail often if there are

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/clicktoeditwrapper.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 242 -      this.originalDomHelper_.getWindow().setTimeout(this.finishMouseUpBound_, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/clicktoeditwrapper.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 173 -    this.fieldObj_.execCommand(goog.editor.Command.UPDATE_LOREM);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/field.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 282 -     * Dispatched after a user action that will eventually fire a SELECTIONCHANGE

 Line: 283 -     * event. For mouseups, this is fired immediately before SELECTIONCHANGE,

 Line: 284 -     * since {@link #handleMouseUp_} fires SELECTIONCHANGE immediately. May be

 Line: 285 -     * fired up to {@link #SELECTION_CHANGE_FREQUENCY_} ms before SELECTIONCHANGE

 Line: 289 -    BEFORESELECTIONCHANGE: 'beforeselectionchange',

 Line: 295 -    SELECTIONCHANGE: 'selectionchange'

 Line: 356 -   * Target node to be used when dispatching SELECTIONCHANGE asynchronously on

 Line: 912 -        goog.editor.Field.SELECTION_CHANGE_FREQUENCY_, this);

 Line: 936 -  goog.editor.Field.SELECTION_CHANGE_FREQUENCY_ = 250;

 Line: 1148 -  goog.editor.Field.SELECTION_CHANGE_KEYCODES = {

 Line: 1169 -   * SELECTION_CHANGE_KEYCODES

 Line: 1173 -  goog.editor.Field.CTRL_KEYS_CAUSING_SELECTION_CHANGES_ = {

 Line: 1184 -   * or extending it from SELECTION_CHANGE_KEYCODES

 Line: 1374 -   * Fires `BEFORESELECTIONCHANGE` and starts the selection change timer

 Line: 1375 -   * (which will fire `SELECTIONCHANGE`) if the given event is a key event

 Line: 1381 -    if (this.isEventStopped(goog.editor.Field.EventType.SELECTIONCHANGE)) {

 Line: 1385 -    if (goog.editor.Field.SELECTION_CHANGE_KEYCODES[e.keyCode] ||

 Line: 1387 -         goog.editor.Field.CTRL_KEYS_CAUSING_SELECTION_CHANGES_[e.keyCode])) {

 Line: 1388 -      this.dispatchEvent(goog.editor.Field.EventType.BEFORESELECTIONCHANGE);

 Line: 1644 -    if (this.isEventStopped(goog.editor.Field.EventType.SELECTIONCHANGE)) {

 Line: 1657 -      type: goog.editor.Field.EventType.SELECTIONCHANGE,

 Line: 1662 -        goog.editor.PluginImpl.Op.SELECTION, opt_e, opt_target);

 Line: 2005 -    if (!goog.editor.BrowserFeature.CLEARS_SELECTION_WHEN_FOCUS_LEAVES &&

 Line: 2104 -    this.dispatchEvent(goog.editor.Field.EventType.BEFORESELECTIONCHANGE);

 Line: 2209 -      this.execCommand(goog.editor.Command.UPDATE_LOREM);

 Line: 2488 -      this.execCommand(goog.editor.Command.UPDATE_LOREM);

 Line: 2562 -    this.execCommand(goog.editor.Command.UPDATE_LOREM);

 Line: 2651 -      // NOTE(user): This hasn't been confirmed.  isHttps_ allows a query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/link.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 224 -    field.execCommand(goog.editor.Command.UPDATE_LINK_BUBBLE);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/eventtype.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 71 -    SELECTIONCHANGE: 'selectionchange',

 Line: 72 -    SELECTSTART: 'selectstart',  // IE, Safari, Chrome

 Line: 93 -    SELECT: 'select',

 Line: 149 -    TIMEUPDATE: 'timeupdate',

 Line: 160 -    UPDATE: 'update',

 Line: 161 -    UPDATESTART: 'updatestart',

 Line: 162 -    UPDATEEND: 'updateend',

 Line: 203 -    UPDATEFOUND: 'updatefound',

 Line: 259 -    COMPOSITIONUPDATE: 'compositionupdate',

 Line: 288 -    DOMNODEINSERTED: 'DOMNodeInserted',

 Line: 290 -    DOMNODEREMOVEDFROMDOCUMENT: 'DOMNodeRemovedFromDocument',

 Line: 291 -    DOMNODEINSERTEDINTODOCUMENT: 'DOMNodeInsertedIntoDocument',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/pastehandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 496 -            e.shiftKey && e.keyCode == goog.events.KeyCodes.INSERT ||

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/imehandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 34 -   * Spurious UPDATE events are common on all browsers.

 Line: 96 -              el, goog.events.EventType.COMPOSITIONUPDATE,

 Line: 119 -    UPDATE: 'updateIme',

 Line: 252 -            goog.events.ImeHandler.EventType.UPDATE, e));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/keyhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 230 -    '63272': goog.events.KeyCodes.DELETE,        // 46

 Line: 236 -    '63302': goog.events.KeyCodes.INSERT         // 45

 Line: 266 -    'U+007F': goog.events.KeyCodes.DELETE,       // 46

 Line: 271 -    'Insert': goog.events.KeyCodes.INSERT        // 45

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/listenable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 75 -   * Listenable, so that we can query that fact at runtime. The class

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/keycodes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 60 -    INSERT: 45,  // also NUM_INSERT

 Line: 61 -    DELETE: 46,  // also NUM_DELETE

 Line: 207 -      case goog.events.KeyCodes.INSERT:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/fx/anim/anim.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 47 -   * animation, which uses a timer (setTimeout) to schedule animation.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/fx/abstractdragdrop.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 429 -        doc.body, goog.events.EventType.SELECTSTART, this.suppressSelect_);

 Line: 559 -        doc.body, goog.events.EventType.SELECTSTART, this.suppressSelect_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/style/style.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 470 -      // In quirks mode, the offset can be determined by querying the body's

 Line: 471 -      // clientLeft/clientTop, but in standards mode, it is found by querying

 Line: 474 -      // too expensive just to query them all.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/entries.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 164 -   * that are associated with a query parameter.

 Line: 172 -    // Apply this restriction for settings since they turn in to query

 Line: 178 -     * The value of this setting's query parameter.

 Line: 185 -     * The query parameter that controls this setting.

 Line: 207 -    // settings (associated query parameter, token, etc).

 Line: 232 -   * Sets the value of the entry based on the value of the query parameter. Once

 Line: 233 -   * this is called, configuration settings (associated query parameter, token,

 Line: 235 -   * @param {?string} value The part of the query param for this setting after

 Line: 243 -   * Returns the value to be used in the query parameter for this tweak.

 Line: 275 -   * Sets the initial query parameter value for this setting. May not be called

 Line: 277 -   * @param {string} value The initial query parameter value for this setting.

 Line: 286 -   * Returns the name of the query parameter used for this setting.

 Line: 287 -   * @return {?string} The param name. Null if no query parameter is directly

 Line: 296 -   * Sets the name of the query parameter used for this setting. If null is

 Line: 297 -   * passed the the setting will not appear in the top-level query string.

 Line: 307 -   * Applies the default value or query param value if this is the first time

 Line: 375 -   * Returns the query param encoded representation of the setting's value.

 Line: 564 -        // Make the query parameter values case-insensitive since users might

 Line: 804 -     * The token to use in the query parameter.

 Line: 817 -    // Take setting out of top-level query parameter list.

 Line: 842 -   * Sets the token to use in the query parameter.

 Line: 851 -   * Returns the token to use in the query parameter.

 Line: 872 -   * entries modify the same query parameter. For example:

 Line: 892 -     * A map of token->true/false for all tokens that appeared in the query

 Line: 937 -    // Initialize from query param.

 Line: 949 -    var queryParamValues = {};

 Line: 959 -        queryParamValues[token] = !negative;

 Line: 962 -    this.queryParamValues_ = queryParamValues;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/tweak.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -   * @fileoverview Provides facilities for creating and querying tweaks.

 Line: 69 -      var queryString = window.location.search;

 Line: 180 -   * single query parameter. A call to goog.tweak.endBooleanGroup() must be used

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/registry.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 41 -   * @param {string} queryParams Value of window.location.search.

 Line: 56 -     * The map of query params to use when initializing entry settings.

 Line: 97 -   * Simple parser for query params. Makes all keys lower-case.

 Line: 98 -   * @param {string} queryParams The part of the url between the ? and the #.

 Line: 103 -    var parts = queryParams.substr(1).split('&');

 Line: 146 -    // Set its value from the query params.

 Line: 239 -   * query parameter.

 Line: 264 -   * Returns the query part of the URL that will apply all set tweaks.

 Line: 267 -   * @return {string} The query string.

 Line: 288 -      // Strip all tweak query params from the existing query string. This will

 Line: 289 -      // make the final query string contain only the tweak settings that are set

 Line: 290 -      // to their non-default values and also maintain non-tweak related query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/testhelpers.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -   * @param {string} queryParams The query parameter string to use for the

 Line: 57 -    // Initialize the registry with the given query string.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/tweakui.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 289 -   * Reloads the page with query parameters set by the UI.

 Line: 293 -    var queryString = this.registry_.makeUrlQuery();

 Line: 296 -      wnd.location.search = queryString;

 Line: 648 -    var selectElem = dh.createElement(goog.dom.TagName.SELECT);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/abstractdialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 260 -        goog.ui.Dialog.EventType.SELECT,

 Line: 261 -        // Listen for the SELECT event, which means a button was clicked, and

 Line: 303 -   * Map from keys that will be returned in the wrapped dialog SELECT events to

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/tabpane.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 140 -    // is selected.  You don't get a SELECT at all.  We listen for SELECT

 Line: 142 -    // SELECT.

 Line: 144 -        radio, [goog.events.EventType.SELECT, goog.events.EventType.CLICK],

 Line: 165 -        this.tabBar_, goog.ui.Component.EventType.SELECT, this.handleTabSelect_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/toolbarcontroller.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 80 -    // queryable commands. Add them to the list of commands to query on

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/defaulttoolbar.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 348 -      // set the button object's queryable property to true.

 Line: 844 -   *   <li>(@code queryable} - Whether the button's state should be queried

 Line: 862 -   *   queryable:(undefined|boolean)}}

 Line: 881 -      queryable: true

 Line: 888 -      queryable: true

 Line: 895 -      queryable: true

 Line: 902 -      queryable: true

 Line: 908 -      queryable: true

 Line: 914 -      queryable: true

 Line: 920 -      queryable: true

 Line: 927 -      queryable: true

 Line: 934 -      queryable: true

 Line: 941 -      queryable: true

 Line: 948 -      queryable: true

 Line: 955 -      queryable: true

 Line: 974 -      queryable: true

 Line: 981 -      queryable: true

 Line: 988 -      queryable: true

 Line: 995 -      queryable: true

 Line: 1015 -      queryable: true

 Line: 1021 -      queryable: true

 Line: 1028 -      queryable: true

 Line: 1034 -      queryable: true

 Line: 1041 -      queryable: true

 Line: 1048 -      queryable: true

 Line: 1056 -      queryable: true

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/linkdialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 501 -        this.tabPane_, goog.ui.Component.EventType.SELECT, this.onChangeTab_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/buttonrenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 89 -      // If button has CHECKED or SELECTED state, assign aria-pressed

 Line: 90 -      case goog.ui.Component.State.SELECTED:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/tab.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -    // Tabs support the SELECTED state.

 Line: 49 -    this.setSupportedState(goog.ui.Component.State.SELECTED, true);

 Line: 51 -    // Tabs must dispatch state transition events for the DISABLED and SELECTED

 Line: 54 -        goog.ui.Component.State.DISABLED | goog.ui.Component.State.SELECTED,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/option.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 51 -   * of the option and not dispatching any SELECTED events, for backwards

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/paletterenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 195 -    goog.a11y.aria.setState(cell, goog.a11y.aria.State.SELECTED, false);

 Line: 393 -      goog.a11y.aria.setState(cell, goog.a11y.aria.State.SELECTED, select);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/serverchart.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1523 -    var queryData = this.uri_.getQueryData();

 Line: 1524 -    queryData.remove(goog.ui.ServerChart.UriParam.LEGEND_TEXTS);

 Line: 1525 -    queryData.remove(goog.ui.ServerChart.UriParam.DATA_COLORS);

 Line: 1526 -    queryData.remove(goog.ui.ServerChart.UriParam.DATA);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/vimeo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   *   <li> {@link goog.ui.Component.State.SELECTED}: flash video is shown

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/flickr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   *   <li> {@link goog.ui.Component.State.SELECTED}: flash video is shown

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/youtube.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   *   <li> {@link !goog.ui.Component.State.SELECTED}: a static thumbnail is shown

 Line: 44 -   *   <li> {@link goog.ui.Component.State.SELECTED}: video is playing

 Line: 95 -   * It will change its DOM structure between SELECTED and !SELECTED, and rely on

 Line: 96 -   * CSS definitions on the others. On !SELECTED, the renderer will render a

 Line: 97 -   * youtube static `<img>`, with a thumbnail of the video. On SELECTED, the

 Line: 146 -   * structure when the youtube movie is SELECTED (by default fired by a MOUSEUP

 Line: 169 -    if (!!(state & goog.ui.Component.State.SELECTED) && enable) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/photo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -   *   <li> {@link goog.ui.Component.State.SELECTED}: photo is being displayed.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/googlevideo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   *   <li> {@link goog.ui.Component.State.SELECTED}: flash video is shown

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/picasa.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -   *   <li> {@link goog.ui.Component.State.SELECTED}: flash album is shown

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/mp3.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -   *   <li> {@link goog.ui.Component.State.SELECTED}: mp3 is playing

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/media.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 126 -    this.setSupportedState(goog.ui.Component.State.SELECTED, true);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/controlrenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 172 -      goog.a11y.aria.Role.MENU_ITEM, goog.a11y.aria.State.SELECTED,

 Line: 176 -      goog.a11y.aria.Role.TAB, goog.a11y.aria.State.SELECTED,

 Line: 177 -      goog.a11y.aria.Role.TREEITEM, goog.a11y.aria.State.SELECTED);

 Line: 440 -    if (control.isSupportedState(goog.ui.Component.State.SELECTED)) {

 Line: 442 -          element, goog.ui.Component.State.SELECTED, control.isSelected());

 Line: 599 -          goog.ui.Component.State.SELECTED, goog.a11y.aria.State.SELECTED,

 Line: 643 -        attr == goog.a11y.aria.State.SELECTED;

 Line: 927 -        goog.ui.Component.State.SELECTED, goog.getCssName(baseClass, 'selected'),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/submenu.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 394 -        this.isSupportedState(goog.ui.Component.State.SELECTED) ||

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/dialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 737 -    // setTimeout, but that was deemed undesirable.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/dialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1034 -        // Users may expect to hit escape on a SELECT element.

 Line: 1036 -            target.tagName == goog.dom.TagName.SELECT && !target.disabled;

 Line: 1073 -        // Users may expect to hit enter on a TEXTAREA, SELECT or an A element.

 Line: 1075 -                                    target.tagName == goog.dom.TagName.SELECT ||

 Line: 1117 -    this.type = goog.ui.Dialog.EventType.SELECT;

 Line: 1128 -   * TODO(attila): Change this to goog.ui.Dialog.EventType.SELECT.

 Line: 1130 -   * @deprecated Use goog.ui.Dialog.EventType.SELECT.

 Line: 1132 -  goog.ui.Dialog.SELECT_EVENT = 'dialogselect';

 Line: 1145 -    SELECT: 'dialogselect',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/selectionmenubutton.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 215 -    var MSG_SELECTIONMENUITEM_ALL = goog.getMsg('All');

 Line: 217 -    var MSG_SELECTIONMENUITEM_NONE = goog.getMsg('None');

 Line: 220 -        MSG_SELECTIONMENUITEM_ALL, null, this.getDomHelper(),

 Line: 223 -        MSG_SELECTIONMENUITEM_NONE, null, this.getDomHelper(),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/prompt.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 184 -        this, goog.ui.Dialog.EventType.SELECT, this.onPromptExit_);

 Line: 410 -        this, goog.ui.Dialog.EventType.SELECT, this.onPromptExit_, true, this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/select.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 158 -   * Handles {@link goog.events.EventType.SELECT} events raised by the

 Line: 400 -   * {@link goog.events.EventType.SELECT} events dispatched by it.

 Line: 425 -          this.selectionModel_, goog.events.EventType.SELECT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/abstractspellchecker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 31 -   * different stack (for example by calling setInterval(0)).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/remotearraymatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 138 -  goog.ui.ac.RemoteArrayMatcher.prototype.setTimeoutInterval = function(

 Line: 140 -    this.xhr_.setTimeoutInterval(interval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/remotearraymatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 32 -   *     search term is passed to the server as the 'token' query param.

 Line: 35 -   *     The value is sent to the server as the 'use_similar' query param which is

 Line: 48 -     * query params.

 Line: 224 -   *     as the 'token' query param.

 Line: 226 -   *     server; passed as the 'max_matches' query param.  The server is

 Line: 239 -    // Set the query params on the URL.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/inputhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 784 -      this.timer_.setInterval(time);

 Line: 1046 -          window.setTimeout(goog.bind(this.processBlur, this), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/remote.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 110 -  goog.ui.ac.Remote.prototype.setTimeoutInterval = function(interval) {

 Line: 111 -    this.matcher_.setTimeoutInterval(interval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/richremotearraymatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 34 -   *     search term is passed to the server as the 'token' query param.

 Line: 37 -   *     The value is sent to the server as the 'use_similar' query param which is

 Line: 101 -   *     as the 'token' query param.

 Line: 103 -   *     server; passed as the 'max_matches' query param. The server is

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/renderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1073 -        type: goog.ui.ac.AutoComplete.EventType.SELECT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/autocomplete.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 705 -      this.dismissTimer_ = window.setTimeout(goog.bind(this.dismiss, this), 100);

 Line: 737 -      window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/autocomplete.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 96 -          goog.ui.ac.AutoComplete.EventType.SELECT,

 Line: 224 -    SELECT: 'select',

 Line: 239 -    UPDATE: 'update',

 Line: 246 -    SUGGESTIONS_UPDATE: 'suggestionsupdate'

 Line: 387 -        case goog.ui.ac.AutoComplete.EventType.SELECT:

 Line: 653 -          type: goog.ui.ac.AutoComplete.EventType.UPDATE,

 Line: 665 -        type: goog.ui.ac.AutoComplete.EventType.UPDATE,

 Line: 695 -    this.dispatchEvent(goog.ui.ac.AutoComplete.EventType.SUGGESTIONS_UPDATE);

 Line: 832 -    this.dispatchEvent(goog.ui.ac.AutoComplete.EventType.SUGGESTIONS_UPDATE);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/palette.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -        goog.ui.Component.State.CHECKED | goog.ui.Component.State.SELECTED |

 Line: 159 -          this.selectionModel_, goog.events.EventType.SELECT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/gauge.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 151 -  goog.ui.Gauge.FACTOR_RADIUS_FROM_SIZE = 0.45;

 Line: 656 -    var r = Math.round(goog.ui.Gauge.FACTOR_RADIUS_FROM_SIZE * size);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/selectionmodel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -   * Single-selection model.  Dispatches a {@link goog.events.EventType.SELECT}

 Line: 185 -   * Removes the given item (if it exists).  Dispatches a `SELECT` event if

 Line: 193 -        this.dispatchEvent(goog.events.EventType.SELECT);

 Line: 226 -   * dispatches a `SELECT` event.

 Line: 236 -    // Always dispatch a SELECT event; let listeners decide what to do if the

 Line: 238 -    this.dispatchEvent(goog.events.EventType.SELECT);

 Line: 253 -   * item, and dispatches a `SELECT` event.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/charpicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 399 -    var MSG_CHAR_PICKER_RECENT_SELECTIONS = goog.getMsg('Recent Selections:');

 Line: 403 -            goog.dom.TagName.SPAN, null, MSG_CHAR_PICKER_RECENT_SELECTIONS));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/dragdropdetector.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 299 -                // iframe.  We setTimeout so that handleNodeInserted_ is called

 Line: 301 -                goog.global.setTimeout(

 Line: 494 -      goog.global.setTimeout(goog.bind(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/tabrenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 121 -        tab.setState(goog.ui.Component.State.SELECTED, false);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/tabbar.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -   *   <li>{@link goog.ui.Component.EventType.SELECT} when selected, and

 Line: 43 -   *   <li>{@link goog.ui.Component.EventType.UNSELECT} when deselected.

 Line: 48 -   * `SELECT` event and an `ACTION` event; subsequent clicks on an

 Line: 222 -      // Select the tab and have it dispatch a SELECT event, to be handled in

 Line: 226 -      // De-select the currently selected tab and have it dispatch an UNSELECT

 Line: 297 -   * Handles `SELECT` events dispatched by tabs as they become selected.

 Line: 311 -   * Handles `UNSELECT` events dispatched by tabs as they become deselected.

 Line: 364 -    // Listen for SELECT, UNSELECT, DISABLE, and HIDE events dispatched by tabs.

 Line: 366 -        .listen(this, goog.ui.Component.EventType.SELECT, this.handleTabSelect)

 Line: 368 -            this, goog.ui.Component.EventType.UNSELECT, this.handleTabUnselect)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/bubble.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 197 -  goog.ui.Bubble.prototype.setTimeout = function(timeout) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/datepicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 344 -    SELECT: 'select'

 Line: 764 -   * Sets the selected date. Will always fire the SELECT event.

 Line: 774 -   * Sets the selected date, and optionally fires the SELECT event based on param.

 Line: 809 -          goog.ui.DatePicker.Events.SELECT, this, this.date_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/keyboardshortcuthandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1098 -        el.tagName == goog.dom.TagName.SELECT;

 Line: 1117 -    // Event target is one of (TEXTAREA, INPUT, BUTTON, SELECT).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/menuitemrenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 126 -        item, element, item.isSupportedState(goog.ui.Component.State.SELECTED) ||

 Line: 315 -      case goog.ui.Component.State.SELECTED:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/popupdatepicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 124 -            this.datePicker_, goog.ui.DatePicker.Events.SELECT,

 Line: 249 -            this.datePicker_, goog.ui.DatePicker.Events.SELECT,

 Line: 272 -            this.datePicker_, goog.ui.DatePicker.Events.SELECT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/control.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 933 -    return this.hasState(goog.ui.Component.State.SELECTED);

 Line: 944 -    if (this.isTransitionAllowed(goog.ui.Component.State.SELECTED, select)) {

 Line: 945 -      this.setState(goog.ui.Component.State.SELECTED, select);

 Line: 1361 -    if (this.isAutoState(goog.ui.Component.State.SELECTED)) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/component.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 235 -    SELECT: 'select',

 Line: 238 -    UNSELECT: 'unselect',

 Line: 359 -     * @see goog.ui.Component.EventType.SELECT

 Line: 360 -     * @see goog.ui.Component.EventType.UNSELECT

 Line: 362 -    SELECTED: 0x08,

 Line: 408 -      case goog.ui.Component.State.SELECTED:

 Line: 409 -        return isEntering ? goog.ui.Component.EventType.SELECT :

 Line: 410 -                            goog.ui.Component.EventType.UNSELECT;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ratings.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 146 -        goog.dom.TagName.SELECT, goog.asserts.assert(el))[0];

 Line: 245 -        if (this.attachedFormField_.tagName == goog.dom.TagName.SELECT) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/menuitem.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 123 -      case goog.ui.Component.State.SELECTED:

 Line: 139 -    this.setSupportedState(goog.ui.Component.State.SELECTED, selectable);

 Line: 306 -    if (this.isSupportedState(goog.ui.Component.State.SELECTED)) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/forms.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 180 -        case goog.dom.InputType.SELECT_MULTIPLE:

 Line: 327 -      case goog.dom.InputType.SELECT_ONE:

 Line: 329 -      case goog.dom.InputType.SELECT_MULTIPLE:

 Line: 427 -      case goog.dom.InputType.SELECT_ONE:

 Line: 432 -      case goog.dom.InputType.SELECT_MULTIPLE:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/annotate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -   * @fileoverview Methods for annotating occurrences of query terms in text or

 Line: 54 -   * @param {*=} opt_ignoreCase  Whether to ignore the case of the query

 Line: 103 -   * @param {*} ignoreCase  Whether to ignore the case of the query terms

 Line: 190 -   * Annotates occurrences of query terms in plain text. This process consists of

 Line: 191 -   * identifying all occurrences of all query terms, calling a provided function

 Line: 202 -   * @param {*=} opt_ignoreCase  Whether to ignore the case of the query

 Line: 218 -   * Annotates occurrences of query terms in plain text. This process consists of

 Line: 219 -   * identifying all occurrences of all query terms, calling a provided function

 Line: 231 -   * @param {*} ignoreCase  Whether to ignore the case of the query terms

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/attr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 113 -    SELECTED: 'selected',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/browserrange/w3crange.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 239 -  // SELECTION MODIFICATION

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/browserrange/ierange.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 723 -  // SELECTION MODIFICATION

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/browserrange/abstractrange.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 293 -  // SELECTION MODIFICATION

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/inputtype.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -   * all input element types (for INPUT, BUTTON, SELECT and TEXTAREA

 Line: 34 -   * Enum of all input types (for INPUT, BUTTON, SELECT and TEXTAREA elements)

 Line: 57 -    SELECT_MULTIPLE: 'select-multiple',

 Line: 58 -    SELECT_ONE: 'select-one',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/animationframe/polyfill.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 50 -          return goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/dom.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 204 -   * SVG namespace you should use querySelector or querySelectorAll instead.

 Line: 334 -      var query = tagName + (opt_class ? '.' + opt_class : '');

 Line: 2013 -        element.tagName == goog.dom.TagName.SELECT ||

 Line: 2381 -    var query =

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/tagname.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 465 -  goog.dom.TagName.SELECT = new goog.dom.TagName('SELECT');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/a11y/aria/datatables.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 52 -          goog.a11y.aria.State.MULTISELECTABLE, false,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/a11y/aria/attributes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 135 -    MULTISELECTABLE: 'multiselectable',

 Line: 174 -    SELECTED: 'selected',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/a11y/aria/aria.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -    goog.dom.TagName.SELECT, goog.dom.TagName.SOURCE, goog.dom.TagName.TEXTAREA,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/timer/timer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 16 -   * This is only an abstraction above `setInterval`.

 Line: 32 -   * @param {Object=} opt_timerObject  An object that has `setTimeout`,

 Line: 33 -   *     `setInterval`, `clearTimeout` and `clearInterval`

 Line: 48 -     * An object that implements `setTimeout`, `setInterval`,

 Line: 53 -     * @private {{setTimeout:!Function, clearTimeout:!Function}}

 Line: 55 -    this.timerObject_ = /** @type {{setTimeout, clearTimeout}} */ (

 Line: 93 -   * `window.setTimeout`. Passing this value to `window.clearTimeout`

 Line: 110 -   * An object that implements `setTimeout`, `setInterval`,

 Line: 115 -   * @type {{setTimeout, clearTimeout}}

 Line: 131 -   * Variable for storing the result of `setInterval`.

 Line: 150 -  goog.Timer.prototype.setInterval = function(interval) {

 Line: 163 -   * Callback for the `setTimeout` used by the timer.

 Line: 170 -        this.timer_ = this.timerObject_.setTimeout(

 Line: 175 -      // Prevents setInterval from registering a duplicate timeout when called

 Line: 211 -      // window.setInterval in FireFox has a bug - it fires based on

 Line: 219 -      // to setTimeout logic.

 Line: 222 -      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);

 Line: 287 -      return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/bootstrap/webworkers.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 34 -        eval(opt_sourceText)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/bootstrap/nodejs.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 66 -      eval(opt_sourceText);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/module/loader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 201 -    eval(t_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/module/modulemanager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 387 -    window.setTimeout(

 Line: 620 -      window.setTimeout(loadFn, delay);

 Line: 641 -        goog.global.setTimeout(

 Line: 816 -        window.setTimeout(goog.bind(callbackWrapper.execute, callbackWrapper), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/module/moduleinfo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 306 -      window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/math/rangeset.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 185 -   * @param {goog.math.Range} a The query range.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/locale/locale.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -    TIME_ZONE_SELECTED_IDS: 'TimeZoneSelectedIds',

 Line: 66 -    TIME_ZONE_SELECTED_SHORT_NAMES: 'TimeZoneSelectedShortNames',

 Line: 67 -    TIME_ZONE_SELECTED_LONG_NAMES: 'TimeZoneSelectedLongNames',

 Line: 325 -        dataObj, goog.locale.Resource.TIME_ZONE_SELECTED_IDS, localeName);

 Line: 337 -        dataObj, goog.locale.Resource.TIME_ZONE_SELECTED_SHORT_NAMES, localeName);

 Line: 349 -        dataObj, goog.locale.Resource.TIME_ZONE_SELECTED_LONG_NAMES, localeName);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/sanitizer/tagwhitelist.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 101 -    'SELECT': true,    // HTMLSelectElement

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/sanitizer/csssanitizer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -  goog.html.sanitizer.CssSanitizer.SELECTOR_REGEX_ =

 Line: 141 -              goog.html.sanitizer.CssSanitizer.SELECTOR_REGEX_,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/sanitizer/attributewhitelist.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 41 -    '* ARIA-SELECTED': true,

 Line: 91 -    '* SELECTED': true,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/safeurl.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 541 -   *     Otherwise, a colon after a (?) must be in a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/i18n/charpickerdata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 553 -  goog.i18n.CharPickerData.MSG_CP_VARIATION_SELECTOR =

 Line: 2220 -    goog.i18n.CharPickerData.MSG_CP_VARIATION_SELECTOR,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/i18n/messageformat.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 176 -    SELECT: 2,

 Line: 331 -        case goog.i18n.MessageFormat.BlockType_.SELECT:

 Line: 602 -  goog.i18n.MessageFormat.SELECT_BLOCK_RE_ = /^\s*(\w+)\s*,\s*select\s*,/;

 Line: 620 -    if (goog.i18n.MessageFormat.SELECT_BLOCK_RE_.test(pattern)) {

 Line: 621 -      return goog.i18n.MessageFormat.BlockType_.SELECT;

 Line: 650 -          case goog.i18n.MessageFormat.BlockType_.SELECT:

 Line: 651 -            block.type = goog.i18n.MessageFormat.BlockType_.SELECT;

 Line: 688 -    var replaceRegex = goog.i18n.MessageFormat.SELECT_BLOCK_RE_;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/i18n/ucharnames.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -      var MSG_VARIATION_SELECTOR_SEQNUM = goog.getMsg(

 Line: 65 -      return MSG_VARIATION_SELECTOR_SEQNUM;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/history/history.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 929 -      this.timer_.setInterval(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/history/history.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 705 -   * Older versions of Webkit cannot query the location hash, but it still can be

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/style/pixeldensitymonitor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 73 -     * The media query list for a query that detects high density, if supported

 Line: 128 -   * Media query that matches for high density.

 Line: 161 -   * Handles a change to the media query and checks whether the density has

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 113 -   * messageUrlParams: custom url query parameters to be added to every message

 Line: 475 -   * For applications to query the current HTTP session id, sent by the server

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/wirev8.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 141 -   * Must be valid JSON as it is insecure to use eval() to decode JS literals;

 Line: 142 -   * and eval() is disallowed in Chrome apps too.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/channelrequest.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 405 -  ChannelRequest.prototype.setTimeout = function(timeout) {

 Line: 952 -  ChannelRequest.prototype.resetTimeout = function(opt_timeout) {

 Line: 954 -      this.setTimeout(opt_timeout);

 Line: 988 -        requestStats.setTimeout(goog.bind(this.onWatchDogTimeout_, this), time);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/netutils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 90 -        goog.global.setTimeout(function() {

 Line: 123 -    goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/requeststats.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 365 -  requestStats.setTimeout = function(fn, ms) {

 Line: 369 -    return goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/webchannelbase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 632 -      // requestStats.setTimeout(goog.bind(this.connectTest_, this, testPath), 0);

 Line: 1121 -    this.forwardChannelTimerId_ = requestStats.setTimeout(

 Line: 1160 -    this.forwardChannelTimerId_ = requestStats.setTimeout(

 Line: 1333 -    request.setTimeout(

 Line: 1410 -    // Use async.run instead of setTimeout(0) to avoid the 1s message delay

 Line: 1412 -    // backChannelTimerId_ stays unset, as with setTimeout(0)

 Line: 1438 -    this.backChannelTimerId_ = requestStats.setTimeout(

 Line: 1493 -      this.backChannelRequest_.setTimeout(this.backChannelRequestTimeoutMs_);

 Line: 1623 -        this.deadBackChannelTimerId_ = requestStats.setTimeout(

 Line: 2004 -      request.resetTimeout(this.backChannelRequestTimeoutMs_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/webchannelbase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 912 -   * querying only after the test connection has completed. This may be

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/xhr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 346 -        timer = goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/testing/environment.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 157 -     * installed (override i.e. setTimeout) by default. It can be accessed

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/structs/prioritypool.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 77 -    this.delayTimeout_ = goog.global.setTimeout(

 Line: 103 -        this.delayTimeout_ = goog.global.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/websocket.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 412 -    // Firing this event allows handlers to query the URL.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/jsloader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 174 -      timeout = window.setTimeout(function() {

 Line: 351 -      window.setTimeout(function() { goog.dom.removeNode(scriptNode); }, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/crossdomainrpc.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 491 -    var responseDetectorHandle = window.setInterval(goog.bind(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/iframeloadmonitor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 82 -      this.intervalId_ = window.setInterval(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xhrmanager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 139 -  goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {

 Line: 265 -      xhrIo.setTimeoutInterval(this.timeoutInterval_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/nixtransport.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 346 -      this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);

 Line: 404 -      this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);

 Line: 455 -    this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/crosspagechannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 487 -      window.setTimeout(goog.bind(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/crosspagechannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 275 -    // when querying its parent's 'closed' status. Note that this is a different

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/iframerelaytransport.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 127 -            window.setTimeout(function() {

 Line: 154 -      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/frameelementmethodtransport.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 180 -      this.getWindow().setTimeout(this.attemptSetupCb_, 100);

 Line: 218 -        this.getWindow().setTimeout(this.deliverQueuedCb_, 1);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/iframepollingtransport.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 458 -      this.getWindow().setTimeout(goog.bind(this.connect, this), 100);

 Line: 516 -      this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);

 Line: 527 -      this.getWindow().setTimeout(goog.bind(function() {

 Line: 838 -        window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);

 Line: 862 -    goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/networktester.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 162 -  goog.net.NetworkTester.prototype.setTimeout = function(timeoutMs) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/tmpnetwork.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 97 -        goog.global.setTimeout(function() {

 Line: 154 -    goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/channelrequest.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 130 -    this.pollingTimer_.setInterval(goog.net.ChannelRequest.POLLING_INTERVAL_MS);

 Line: 457 -  goog.net.ChannelRequest.prototype.setTimeout = function(timeout) {

 Line: 1016 -    goog.net.BrowserChannel.setTimeout(

 Line: 1049 -    goog.net.BrowserChannel.setTimeout(

 Line: 1135 -    this.watchDogTimerId_ = goog.net.BrowserChannel.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xhrio.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 351 -      x.setTimeoutInterval(opt_timeoutInterval);

 Line: 430 -  goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/iframeio.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 249 -   *     manage query string params.

 Line: 558 -      // For GET requests, we assume that the caller didn't want the queryparams

 Line: 926 -          goog.dom.TagName.SELECT, goog.asserts.assert(this.form_));

 Line: 928 -          goog.dom.TagName.SELECT, /** @type {!Element} */ (clone));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/browserchannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 947 -      goog.net.BrowserChannel.setTimeout(

 Line: 1377 -    this.forwardChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 1405 -    this.forwardChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 1537 -    request.setTimeout(

 Line: 1639 -    this.backChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 1664 -    this.backChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 1860 -        this.deadBackChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 2415 -  goog.net.BrowserChannel.setTimeout = function(fn, ms) {

 Line: 2419 -    return goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/browserchannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1154 -   * querying only after the test connection has completed. This may be

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/promise/promise.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 1260 -      promise.unhandledRejectionId_ = goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/promise/thenable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 91 -   * that we can query that fact at runtime. The class must have already

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/promise/testsuiteadapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 58 -  // Node.js defines setTimeout globally, but Closure relies on finding it

 Line: 60 -  goog.exportSymbol('setTimeout', setTimeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/base.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 1122 -    // of a string to eval (which keeps the original source intact) or

 Line: 1181 -    eval(arguments[0]);

 Line: 1271 -          eval(transpilerCode + '\n//# sourceURL=' + transpilerPath);

 Line: 2243 -   *    eval('someSource;//# sourceUrl sourcefile.js');

 Line: 2750 -          goog.global.setTimeout(cb, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/transpile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 2130 -  one.  This is implemented in a\\n   * way that is accurate for numbers close to zero.\\n   *\\n   * <p>Polyfills the static function Math.expm1().\\n   *\\n   * @param {number} x Any number, or value that can be coerced to a number.\\n   * @return {number} The exponential of x, less 1.\\n   */\\n  var polyfill = function(x) {\\n    // This implementation is based on the Taylor expansion\\n    //   exp(x) ~ 1 + x + x^2/2 + x^3/6 + x^4/24 + ...\\n    x = Number(x);\\n    if (x < .25 && x > -.25) {\\n      var y = x;\\n      var d = 1;\\n      var z = x;\\n      var zPrev = 0;\\n      while (zPrev != z) {\\n        y *= x / (++d);\\n        z = (zPrev = z) + y;\\n      }\\n      return z;\\n    }\\n    return Math.exp(x) - 1;\\n  };\\n\\n  return polyfill;\\n}, 'es6', 'es3');\\n\",\"js/es6/math/fround.js\":\"/*\\n * Copyright 2016 The Closure Compiler Authors.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n'require util/polyfill';\\n'require util/defines';\\n\\n$jscomp.polyfill('Math.fround', function(orig) {\\n  if (orig) return orig;\\n\\n  if ($jscomp.SIMPLE_FROUND_POLYFILL || typeof Float32Array !== 'function') {\\n    // Explicitly requested a no-op polyfill, or Float32Array not available.\\n    return /** @return {number} */ function(/** number */ arg) {\\n      return arg;\\n    };\\n  }\\n\\n  var arr = new Float32Array(1);\\n  /**\\n   * Rounds the given double-precision number to single-precision (float32).\\n   *\\n   * Polyfills the static function Math.fround().\\n   *\\n   * This polyfill is slightly incorrect for IE Line: 2172 -  pertyKey\\n   * @return {boolean}\\n   */\\n  var polyfill = function(target, propertyKey) {\\n    return propertyKey in target;\\n  };\\n  return polyfill;\\n}, 'es6', 'es3');\\n\",\"js/es6/reflect/isextensible.js\":\"/*\\n * Copyright 2016 The Closure Compiler Authors.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n'require util/defines';\\n'require util/polyfill';\\n\\n\\n$jscomp.polyfill('Reflect.isExtensible', function(orig) {\\n  if (orig) return orig;\\n  if ($jscomp.ASSUME_ES5 || typeof Object.isExtensible == 'function') {\\n    return Object.isExtensible;\\n  }\\n  return function() { return true; };\\n}, 'es6', 'es3');\\n\",\"js/es6/reflect/ownkeys.js\":\"/*\\n * Copyright 2016 The Closure Compiler Authors.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n'require util/polyfill';\\n'require es6/object/getownpropertysymbols';\\n\\n\\n$jscomp.polyfill('Reflect.ownKeys',\\n    /**\\n     * @param {*} orig\\n     * @return {*}\\n     * @suppress {reportUnknownTypes}\\n     */\ Line: 2193 -  a.a+="ation.\\n *\\n * Usage:\\n * <pre>\\n *   function ParentClass() {}\\n *\\n *   // Regular method.\\n *   ParentClass.prototype.foo = function(a) {};\\n *\\n *   // Static method.\\n *   ParentClass.bar = function() {};\\n *\\n *   function ChildClass() {\\n *     ParentClass.call(this);\\n *   }\\n *   $jscomp.inherits(ChildClass, ParentClass);\\n *\\n *   var child = new ChildClass();\\n *   child.foo();\\n *   ChildClass.bar();  // Static inheritance.\\n * </pre>\\n *\\n * @param {!Function} childCtor Child class.\\n * @param {!Function} parentCtor Parent class.\\n * @suppress {strictMissingProperties} 'superClass_' is not defined on Function\\n */\\n$jscomp.inherits = function(childCtor, parentCtor) {\\n  childCtor.prototype = $jscomp.objectCreate(parentCtor.prototype);\\n  /** @override */ childCtor.prototype.constructor = childCtor;\\n  if ($jscomp.setPrototypeOf) {\\n    // avoid null dereference warning\\n    /** @const {!Function} */\\n    var setPrototypeOf = $jscomp.setPrototypeOf;\\n    setPrototypeOf(childCtor, parentCtor);\\n  } else {\\n    // setPrototypeOf is not available so we need to copy the static\\n    // methods to the child\\n    for (var p in parentCtor) {\\n      if (p == 'prototype') {\\n        // Don't copy parentCtor.prototype to childCtor.\\n        continue;\\n      }\\n      if (Object.defineProperties) {\\n        var descriptor = Object.getOwnPropertyDescriptor(parentCtor, p);\\n        if (descriptor) {\\n          Object.defineProperty(childCtor, p, descriptor);\\n        }\\n      } else {\\n        // Pre-ES5 browser. Just copy with an assignment.\\n        childCtor[p] = parentCtor[p];\\n      }\\n    }\\n  }\\n\\n  childCtor.superClass_ = parentCtor.prototype;\\n};\\n\",\"js/es6/util/iteratorfromarray.js\":\"/*\\n * Copyright 2016 The Closure Compiler Authors.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless req Line: 2198 -  {});\\n      var y = Object.seal({});\\n      var map = new /** @type {function(new: WeakMap, !Array)} */ (\\n          NativeWeakMap)([[x, 2], [y, 3]]);\\n      if (map.get(x) != 2 || map.get(y) != 3) return false;\\n      map.delete(x);\\n      map.set(y, 4);\\n      return !map.has(x) && map.get(y) == 4;\\n    } catch (err) { // This should hopefully never happen, but let's be safe.\\n      return false;\\n    }\\n  }\\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\\n    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) return NativeWeakMap;\\n  } else {\\n    if (isConformant()) return NativeWeakMap;\\n  }\\n\\n  var prop = '$jscomp_hidden_' + Math.random();\\n\\n  /** @constructor */\\n  function WeakMapMembership() {}\\n\\n  /**\\n   * Inserts the hidden property into the target.\\n   * @param {!Object} target\\n   */\\n  function insert(target) {\\n    if (!$jscomp.owns(target, prop)) {\\n      var obj = new WeakMapMembership();\\n      // TODO(sdh): This property will be enumerated in IE8.  If this becomes\\n      // a problem, we could avoid it by copying an infrequently-used non-enum\\n      // method (like toLocaleString) onto the object itself and encoding the\\n      // property on the copy instead.  This codepath must be easily removable\\n      // if IE8 support is not needed.\\n      $jscomp.defineProperty(target, prop, {value: obj});\\n    }\\n  }\\n\\n  /**\\n   * Monkey-patches the freezing methods to ensure that the hidden\\n   * property is added before any freezing happens.\\n   * @param {string} name\\n   */\\n  function patch(name) {\\n    var prev = Object[name];\\n    if (prev) {\\n      Object[name] = function(target) {\\n        if (target instanceof WeakMapMembership) {\\n          return target;\\n        } else {\\n          insert(target);\\n          return prev(target);\\n        }\\n      };\\n    }\\n  }\\n  patch('freeze');\\n  patch('preventExtensions');\\n  patch('seal');\\n  // Note: no need to patch Reflect.preventExtensions since the polyfill\\n  // just calls Object.preventExtensions anyway (and if it's not polyfilled\\n  // the</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/transpile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 37 -  $jscomp.polyfill("Promise",function(NativePromise){if(NativePromise&&!$jscomp.FORCE_POLYFILL_PROMISE)return NativePromise;function AsyncExecutor(){this.batch_=null}AsyncExecutor.prototype.asyncExecute=function(f){if(this.batch_==null){this.batch_=[];var self=this;this.asyncExecuteFunction(function(){self.executeBatch_()})}this.batch_.push(f)};var nativeSetTimeout=$jscomp.global["setTimeout"];AsyncExecutor.prototype.asyncExecuteFunction=function(f){nativeSetTimeout(f,0)};AsyncExecutor.prototype.executeBatch_=

 Line: 289 -  b,c,d){Sd(b);Sd(c);Sd(d);return kq(a,b).Me(c,d)}function H$(a,b,c){if(!a.d)return b;return c.a+b+(P$(),M$).a}function V1(a){if(Huc(a.a,a.b))return a.a;return a.b+":"+a.a}function yE(a){sE();$wnd.setTimeout(function(){throw a;},0)}function eA(a,b){ro();bs.call(this,QAc(Sd(a),Sd(b)));this.a=b}function Qob(a,b,c){Iob.call(this);this.a=a;this.c=b;this.b=c}function qzb(){Nsb.call(this,"Es6SplitVariableDeclarations")}function Kzb(){z8.call(this,"es6RelativizeImportPaths",true)}function _vb(a,b){this.a=

 Line: 518 -  if(b.Zh()==null||!Huc(b.Zh(),b._h()))return false}return true}function uE(){var a;if(pE!=0){a=oE();if(a-qE>2E3){qE=a;rE=$wnd.setTimeout(AE,10)}}if(pE++==0){DE((CE(),BE));return true}return false}function u9b(a,b,c){if(!((a.a.a&GRc)==WRc||(a.a.a&GRc)==gOc||(a.a.a&GRc)==eSc)&&B6b(a.a,c,b)){a.e=true;return true}else return false}function Dqb(a,b,c){var d;if(b.Od(a))return true;if(!c.Od(a))return false;for(d=a.c;d;d=d.f)if(Dqb(d,b,c))return true;return false}function G$(a,b){switch(b.f){case 0:return H$(a,

 Line: 1501 -  ttp://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\\n */\\nfunction eval(code) {}\\n\\n\\n\\n/**\\n * @constructor\\n * @param {*=} opt_value\\n * @return {!Object}\\n * @nosideeffects\\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\\n */\\nfunction Object(opt_value) {}\\n\\n/**\\n * The constructor of the current object.\\n * @type {Function}\\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\\n */\\nObject.prototype.constructor = function() {};\\n\\n/**\\n * Binds an object\'s property to a function to be called when that property is\\n * looked up.\\n * Mozilla-only.\\n *\\n * @param {string} sprop\\n * @param {Function} fun\\n * @modifies {this}\\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter\\n * @return {undefined}\\n */\\nObject.prototype.__defineGetter__ = function(sprop, fun) {};\\n\\n/**\\n * Binds an object\'s property to a function to be called when an attempt is made\\n * to set that property.\\n * Mozilla-only.\\n *\\n * @param {string} sprop\\n * @param {Function} fun\\n * @modifies {this}\\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineSetter\\n * @return {undefined}\\n */\\nObject.prototype.__defineSetter__ = function(sprop, fun) {};\\n\\n/**\\n * Returns whether the object has a property with the specified name.\\n *\\n * @param {*} propertyName Implicitly cast to a string.\\n * @return {boolean}\\n * @nosideeffects\\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\\n */\\nObject.prototype.hasOwnProperty = function(propertyName) {};\\n\\n/**\\n * Returns whether an object exists in another object\'s prototype chain.\\n *\\n * @param {Object} other\\n * @return {boolean}\\n * @nosideeffects\\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\\n */\\nObject.prototype.isPrototypeOf = funct Line: 1988 -  OM/window.clearTimeout\\n * @suppress {duplicate}\\n * @return {undefined}\\n */\\nfunction clearTimeout(timeoutID) {}\\n\\n/**\\n * @param {*} message\\n * @return {boolean}\\n * @see https://developer.mozilla.org/en/DOM/window.confirm\\n */\\nfunction confirm(message) {}\\n\\n/**\\n * @see https://developer.mozilla.org/en/DOM/window.dump\\n * @param {*} x\\n * @return {undefined}\\n */\\nfunction dump(x) {}\\n\\n/**\\n * @param {string} message\\n * @param {string=} opt_value\\n * @return {?string}\\n * @see https://developer.mozilla.org/en/DOM/window.prompt\\n */\\nfunction prompt(message, opt_value) {}\\n\\n/**\\n * @param {function()} callback\\n * @param {...?} var_args\\n * @return {number}\\n * @see https://developer.mozilla.org/en-US/docs/DOM/window.setImmediate\\n * @see http://msdn.microsoft.com/en-us/library/ie/hh773176(v=vs.85).aspx\\n */\\nfunction setImmediate(callback, var_args) {}\\n\\n/**\\n * @param {Function|string} callback\\n * @param {number=} opt_delay\\n * @param {...?} var_args\\n * @return {number}\\n * @see https://developer.mozilla.org/en/DOM/window.setInterval\\n * @see https://html.spec.whatwg.org/multipage/webappapis.html#timers\\n */\\nfunction setInterval(callback, opt_delay, var_args) {}\\n\\n/**\\n * @param {Function|string} callback\\n * @param {number=} opt_delay\\n * @param {...*} var_args\\n * @return {number}\\n * @see https://developer.mozilla.org/en/DOM/window.setTimeout\\n * @see https://html.spec.whatwg.org/multipage/webappapis.html#timers\\n */\\nfunction setTimeout(callback, opt_delay, var_args) {}\\n\\n/**\\n * Returns whether the object has a property with the specified name.\\n *\\n * @param {*} propertyName Implicitly cast to a string.\\n * @return {boolean}\\n * @nosideeffects\\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\\n */\\nfunction hasOwnProperty (propertyName) {}\\n","externs/webkit_notifications.js":"/*\\n * Copyright 2010 The Closure Compiler Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\"License\\");\\n * you may not use t Line: 2160 -  a.a+="or last batch was fully executed\\n      this.batch_ = [];\\n      var self = this;\\n      this.asyncExecuteFunction(function() { self.executeBatch_(); });\\n    }\\n    this.batch_.push(f);\\n  };\\n\\n  // NOTE: We want to make sure AsyncExecutor will work as expected even if\\n  // testing code should override setTimeout()\\n  /** @const {function(!Function, number)} */\\n  var nativeSetTimeout = $jscomp.global['setTimeout'];\\n\\n  /**\\n   * Schedule a function to execute asynchronously as soon as possible.\\n   *\\n   * NOTE: May be overridden for testing.\\n   * @package\\n   * @param {function()} f\\n   */\\n  AsyncExecutor.prototype.asyncExecuteFunction = function(f) {\\n    nativeSetTimeout(f, 0);\\n  };\\n\\n  /**\\n   * Execute scheduled jobs in a batch until all are executed or the batch\\n   * execution time limit has been reached.\\n   * @private\\n   */\\n  AsyncExecutor.prototype.executeBatch_ = function() {\\n    while (this.batch_ && this.batch_.length) {\\n      var /** !Array<?function()> */ executingBatch = this.batch_;\\n      // Executions scheduled while executing this batch go into a new one to\\n      // avoid the batch array getting too big.\\n      this.batch_ = [];\\n      for (var i = 0; i < executingBatch.length; ++i) {\\n        var f = /** @type {function()} */ (executingBatch[i]);\\n        executingBatch[i] = null;  // free memory\\n        try {\\n          f();\\n        } catch (error) {\\n          this.asyncThrow_(error);\\n        }\\n      }\\n    }\\n    // All jobs finished executing, so force scheduling a new batch next\\n    // time asyncExecute() is called.\\n    this.batch_ = null;\\n  };\\n\\n  /**\\n   * @private\\n   * @param {*} exception\\n   */\\n  AsyncExecutor.prototype.asyncThrow_ = function(exception) {\\n    this.asyncExecuteFunction(function() { throw exception; });\\n  };\\n\\n  /**\\n   * @enum {number}\\n   */\\n  var PromiseState = {\\n    /** The Promise is waiting for resolution. */\\n    PENDING: 0,\\n\\n    /** The Promise has been resolved with a fulfillment value. */\\n    FULFILLED: 1,\\n\\n    /*</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/transpile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 619 -  1);GEb=new IEb("PARSED_FROM_DEPS",2);CEb=new IEb("COMMON_JS",3);DEb=new IEb("COMPILER_MODULE",4)}function _2b(a){Z2b();if(a<=127)return a>=65&&a<=90||a>=97&&a<=122||a>=48&&a<=57||a==95||a==36;return a3b(a)||(Tsc==null&&(Tsc=new RegExp("\\d")),Tsc.test(String.fromCharCode(a)))}function e6b(a){var b,c,d,e,f;b=new Xbc((Mhc(),Qgc));for(d=a,e=0,f=d.length;e<f;++e){c=d[e];Xd(c.n==ohc||c.n==ygc||c.n==agc||c.n==ihc);c.n==ohc||Xd(!!c.c&&!c.c.f);Fac(b,c)}return b}function _0(a,b){var c,d;J0((Mhc(),shc),b);

 Line: 744 -  e7b(a.a)||S6b(a.a)>0||f7b(a.a)||!!a.a.g||(a.a.a&GRc)==WRc||(a.a.a&GRc)==gOc||(a.a.a&GRc)==eSc)){N7b(a.a,b,WRc);a.e=true;return true}else return false}function Nmc(){return bF(YE(QV,1),hOc,8,15,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70])}function Bmb(){Bmb=v$;ymb=new Cmb("SET_FROM_GLOBAL",0);zmb=new Cmb("SET_FROM_LOCAL",1);xmb=new Cmb("PROTOTYPE_GET",

 Line: 745 -  2);tmb=new Cmb("ALIASING_GET",3);wmb=new Cmb("DIRECT_GET",4);umb=new Cmb("CALL_GET",5);vmb=new Cmb("DELETE_PROP",6);Amb=new Cmb(kSc,7)}function mJb(){mJb=v$;eJb=new nJb(DQc,0,(RPb(),GPb));fJb=new nJb(EQc,1,HPb);gJb=new nJb("ECMASCRIPT6",2,JPb);hJb=new nJb("ECMASCRIPT7",3,LPb);iJb=new nJb("ECMASCRIPT8",4,NPb);jJb=new nJb(FQc,5,FPb);kJb=new nJb("ES_NEXT",6,OPb);lJb=new nJb(FTc,7,PPb)}function ULb(a,b){var c,d,e,f,g;g=TJb(a.a,(Mhc(),Ahc),mKb(a.a,b.a));c=SJb(a.a,gfc);f=false;d=b.b;if(d){fcc(c.k)==-1&&

 Line: 1172 -  v$;_Ob=new yPb(GQc,0,"all",0,0,0);aPb=new yPb("COND",1,"cond",3,3,1);bPb=new yPb("EQ",2,"eq",2,2,3);dPb=new yPb("ISCTOR",3,"isCtor",1,1,3);ePb=new yPb("ISDEFINED",4,"isDefined",1,1,4);fPb=new yPb("ISRECORD",5,"isRecord",1,1,3);gPb=new yPb("ISTEMPLATIZED",6,"isTemplatized",1,1,3);hPb=new yPb("ISUNKNOWN",7,"isUnknown",1,1,3);cPb=new yPb(pUc,8,"instanceOf",1,1,1);jPb=new yPb("MAPUNION",9,"mapunion",2,2,1);iPb=new yPb("MAPRECORD",10,"maprecord",2,2,1);kPb=new yPb(wQc,11,"none",0,0,0);lPb=new yPb("PRINTTYPE",

 Line: 1173 -  12,"printType",2,2,1);mPb=new yPb("PROPTYPE",13,"propType",2,2,1);nPb=new yPb("RAWTYPEOF",14,"rawTypeOf",1,1,0);qPb=new yPb("SUB",15,"sub",2,2,3);pPb=new yPb("STREQ",16,"streq",2,2,2);oPb=new yPb("RECORD",17,"record",1,YMc,0);rPb=new yPb("TEMPLATETYPEOF",18,"templateTypeOf",2,2,0);sPb=new yPb(ATc,19,aQc,2,YMc,0);tPb=new yPb("TYPEEXPR",20,"typeExpr",1,1,0);uPb=new yPb("TYPEOFVAR",21,"typeOfVar",1,1,1);vPb=new yPb("UNION",22,"union",2,YMc,0);wPb=new yPb("UNKNOWN",23,qUc,0,0,0)}function fob(a,b){var c,

 Line: 1251 -  Wxb=new pdb("JSC_FUNCTION_ARGUMENTS_PROP_FORBIDDEN",i3,new Vvc("A function''s \"arguments\" property cannot be used in strict mode"));Rxb=new pdb("JSC_BAD_FUNCTION_DECLARATION",i3,new Vvc("functions can only be declared at top level or immediately within another function in ES5 strict mode"));Sxb=new pdb("JSC_DELETE_VARIABLE",i3,new Vvc("variables, functions, and arguments cannot be deleted in strict mode"));Txb=new pdb("JSC_DUPLICATE_OBJECT_KEY",g3,new Vvc('Object literal contains illegal duplicate key "{0}", disallowed in strict mode'));

 Line: 1255 -  case 39:case 34:case 92:default:j.a+=String.fromCharCode(d)}k=f+1;f=Muc(l,dvc(92),k)}rvc(j,l,k,c?l.length:l.length-1);return j.a}function sSb(){sSb=v$;var a,b,c,d,e,f;vRb=new tSb("BREAK",0,"break",(aZb(),dXb));wRb=new tSb("CASE",1,"case",gXb);xRb=new tSb(zUc,2,"catch",hXb);ARb=new tSb(AUc,3,WPc,qXb);BRb=new tSb(BUc,4,YPc,rXb);DRb=new tSb(dTc,5,LPc,tXb);ERb=new tSb("DELETE",6,CUc,uXb);FRb=new tSb("DO",7,"do",vXb);GRb=new tSb("ELSE",8,"else",wXb);LRb=new tSb(DUc,9,EPc,GXb);MRb=new tSb("FOR",10,"for",

 Line: 1270 -  24);fdc=new Vdc("EXPORT_DEFAULT",25);edc=new Vdc("EXPORT_ALL_FROM",26);rdc=new Vdc("IS_CONSTANT_VAR",27);tdc=new Vdc("IS_GENERATOR_MARKER",28);udc=new Vdc("IS_GENERATOR_SAFE",29);Xcc=new Vdc("COMPUTED_PROP_METHOD",30);Wcc=new Vdc("COMPUTED_PROP_GETTER",31);Ycc=new Vdc("COMPUTED_PROP_SETTER",32);Zcc=new Vdc("COMPUTED_PROP_VARIABLE",33);_cc=new Vdc("DECLARED_TYPE_EXPR",34);Qdc=new Vdc("TYPE_BEFORE_CAST",35);Edc=new Vdc("OPT_ES6_TYPED",36);jdc=new Vdc(uVc,37);mdc=new Vdc(tTc,38);$cc=new Vdc("CONSTRUCT_SIGNATURE",

 Line: 1271 -  39);Rcc=new Vdc("ACCESS_MODIFIER",40);Cdc=new Vdc("NON_INDEXABLE",41);Gdc=new Vdc("PARSE_RESULTS",42);kdc=new Vdc("GOOG_MODULE",43);ldc=new Vdc("GOOG_MODULE_REQUIRE",44);gdc=new Vdc("FEATURE_SET",45);vdc=new Vdc("IS_MODULE_NAME",46);Sdc=new Vdc("WAS_PREVIOUSLY_PROVIDED",47);sdc=new Vdc("IS_ES6_CLASS",48);Odc=new Vdc("TRANSPILED",49);adc=new Vdc("DELETED",50);Adc=new Vdc("MODULE_ALIAS",51);ydc=new Vdc("IS_UNUSED_PARAMETER",52);Bdc=new Vdc(HQc,53);xdc=new Vdc("IS_SHORTHAND_PROPERTY",54);ddc=new Vdc("ES6_MODULE",

 Line: 1278 -  H2=new pdb("JSC_EXTEND_FINAL_CLASS",g3,new Vvc("{0} is not allowed to extend final class {1}."));J2=new pdb("JSC_VISIBILITY_MISMATCH",i3,new Vvc("Overriding {0} property of {1} with {2} property."));z2=new pdb("JSC_CONSTANT_PROPERTY_REASSIGNED_VALUE",i3,new Vvc("constant property {0} assigned a value more than once"));y2=new pdb("JSC_CONSTANT_PROPERTY_DELETED",i3,new Vvc("constant property {0} cannot be deleted"));A2=new pdb("JSC_CONVENTION_MISMATCH",i3,new Vvc("Declared access conflicts with access convention."))}

 Line: 1353 -  37);t_b=new O0b("COMPUTED_PROPERTY_METHOD",38);u_b=new O0b("COMPUTED_PROPERTY_SETTER",39);__b=new O0b("MISSING_PRIMARY_EXPRESSION",40);m_b=new O0b("COMMA_EXPRESSION",41);e_b=new O0b("BINARY_OPERATOR",42);v_b=new O0b("CONDITIONAL_EXPRESSION",43);E0b=new O0b("UNARY_EXPRESSION",44);G0b=new O0b("UPDATE_EXPRESSION",45);Y_b=new O0b("MEMBER_EXPRESSION",46);d0b=new O0b("NEW_EXPRESSION",47);$$b=new O0b("ARGUMENT_LIST",48);h_b=new O0b("CALL_EXPRESSION",49);l_b=new O0b("CLASS_DECLARATION",50);V_b=new O0b("INTERFACE_DECLARATION",

 Line: 1357 -  dXb=new cZb("BREAK",3);gXb=new cZb("CASE",4);hXb=new cZb(zUc,5);qXb=new cZb(AUc,6);rXb=new cZb(BUc,7);tXb=new cZb(dTc,8);uXb=new cZb("DELETE",9);vXb=new cZb("DO",10);wXb=new cZb("ELSE",11);GXb=new cZb(DUc,12);HXb=new cZb("FOR",13);IXb=new cZb(jSc,14);LXb=new cZb("IF",15);OXb=new cZb("IN",16);PXb=new cZb(pUc,17);$Xb=new cZb("NEW",18);wYb=new cZb(zTc,19);KYb=new cZb(EUc,20);OYb=new cZb(EOc,21);PYb=new cZb("THROW",22);SYb=new cZb("TRY",23);UYb=new cZb(FUc,24);XYb=new cZb("VAR",25);YYb=new cZb("VOID",

 Line: 1388 -  i3,new Vvc(fTc));yBb=new pdb("JSC_POSSIBLE_INEXISTENT_PROPERTY",h3,new Vvc(fTc));oBb=new pdb("JSC_INEXISTENT_PROPERTY_WITH_SUGGESTION",i3,new Vvc(gTc));zBb=new pdb("JSC_STRICT_INEXISTENT_PROPERTY",h3,new Vvc(fTc));BBb=new pdb("JSC_STRICT_INEXISTENT_UNION_PROPERTY",h3,new Vvc("Property {0} not defined on all member types of {1}"));ABb=new pdb("JSC_STRICT_INEXISTENT_PROPERTY_WITH_SUGGESTION",h3,new Vvc(gTc));wBb=new pdb("JSC_NOT_A_CONSTRUCTOR",i3,new Vvc("cannot instantiate non-constructor"));pBb=new pdb("JSC_INSTANTIATE_ABSTRACT_CLASS",

 Line: 1642 -  a.a+='function(key) {};\\n\\n/**\\n * @return {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-NodeHasAttrs\\n * @nosideeffects\\n */\\nNode.prototype.hasAttributes = function() {};\\n\\n/**\\n * @param {?string} namespaceURI\\n * @return {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isDefaultNamespace\\n * @nosideeffects\\n */\\nNode.prototype.isDefaultNamespace = function(namespaceURI) {};\\n\\n/**\\n * @param {Node} arg\\n * @return {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isEqualNode\\n * @nosideeffects\\n */\\nNode.prototype.isEqualNode = function(arg) {};\\n\\n/**\\n * @param {Node} other\\n * @return {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isSameNode\\n * @nosideeffects\\n */\\nNode.prototype.isSameNode = function(other) {};\\n\\n/**\\n * @param {string} feature\\n * @param {string} version\\n * @return {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-Node-supports\\n * @nosideeffects\\n */\\nNode.prototype.isSupported = function(feature, version) {};\\n\\n/**\\n * @param {string} prefix\\n * @return {string}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespaceURI\\n * @nosideeffects\\n */\\nNode.prototype.lookupNamespaceURI = function(prefix) {};\\n\\n/**\\n * @param {?string} namespaceURI\\n * @return {string}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix\\n * @nosideeffects\\n */\\nNode.prototype.lookupPrefix = function(namespaceURI) {};\\n\\n/**\\n * @return {undefined}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-normalize\\n */\\nNode.prototype.normalize = function() {};\\n\\n/**\\n * @param {Object} key\\n * @param {Object} data\\n * @param {UserDataHandler} handler\\n * @return {Object}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-setUserData\'\\n */\\nNode.prototype.setUserData = function(key, data, handler) {};\\n\\n/**\\n * @param {string} query\\n * @return {?Element}\\n * @see http://www.w3.org/TR/selectors-a Line: 1643 -  or\\n * @nosideeffects\\n */\\nNode.prototype.querySelector = function(query) {};\\n\\n/**\\n * @param {string} query\\n * @return {!NodeList<!Element>}\\n * @see http://www.w3.org/TR/selectors-api/#queryselectorall\\n * @nosideeffects\\n */\\nNode.prototype.querySelectorAll = function(query) {};\\n\\n/**\\n * @type {Element}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Attr-ownerElement\\n */\\nAttr.prototype.ownerElement;\\n\\n/**\\n * @type {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Attr-isId\\n */\\nAttr.prototype.isId;\\n\\n/**\\n * @type {TypeInfo}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Attr-schemaTypeInfo\\n */\\nAttr.prototype.schemaTypeInfo;\\n\\n/**\\n * @type {TypeInfo}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Element-schemaTypeInfo\\n */\\nElement.prototype.schemaTypeInfo;\\n\\n/**\\n * @param {?string} namespaceURI\\n * @param {string} localName\\n * @return {Attr}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ElGetAtNodeNS\\n * @nosideeffects\\n */\\nElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {};\\n\\n/**\\n * @param {?string} namespaceURI\\n * @param {string} localName\\n * @return {string}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ElGetAttrNS\\n * @nosideeffects\\n */\\nElement.prototype.getAttributeNS = function(namespaceURI, localName) {};\\n\\n/**\\n * @param {?string} namespaceURI\\n * @param {string} localName\\n * @return {!NodeList<!Element>}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-A6C90942\\n * @nosideeffects\\n */\\nElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {};\\n\\n/**\\n * @param {string} name\\n * @return {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ElHasAttr\\n * @nosideeffects\\n */\\nElement.prototype.hasAttribute = function(name) {};\\n\\n/**\\n * @param {?string} namespaceURI\\n * @param {string} localName\\n * @return {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ElHasAttrNS\\n * @nosideeffects\\n */\ Line: 1645 -  RIVATION_EXTENSION;\\n\\n/**\\n * @type {number}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-DERIVATION_LIST\\n */\\nTypeInfo.prototype.DERIVATION_LIST;\\n\\n/**\\n * @type {number}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-DERIVATION_RESTRICTION\\n */\\nTypeInfo.prototype.DERIVATION_RESTRICTION;\\n\\n/**\\n * @type {number}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-DERIVATION_UNION\\n */\\nTypeInfo.prototype.DERIVATION_UNION;\\n\\n/**\\n * @type {string}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-typeName\\n */\\nTypeInfo.prototype.typeName;\\n\\n/**\\n * @type {string}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-typeNamespace\\n */\\nTypeInfo.prototype.typeNamespace;\\n\\n/**\\n * @param {string} typeNamespaceArg\\n * @param {string} typeNameArg\\n * @param {number} derivationMethod\\n * @return {boolean}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-isDerivedFrom\\n * @nosideeffects\\n */\\nTypeInfo.prototype.isDerivedFrom = function(typeNamespaceArg, typeNameArg, derivationMethod) {};\\n\\n/**\\n * @constructor\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#UserDataHandler\\n */\\nfunction UserDataHandler() {}\\n\\n/**\\n * @type {number}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#UserDataHandler-CLONED\\n */\\nUserDataHandler.prototype.NODE_CLONED = 1;\\n\\n/**\\n * @type {number}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#UserDataHandler-IMPORTED\\n */\\nUserDataHandler.prototype.NODE_IMPORTED = 2;\\n\\n/**\\n * @type {number}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#UserDataHandler-DELETED\\n */\\nUserDataHandler.prototype.NODE_DELETED = 3;\\n\\n/**\\n * @type {number}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#UserDataHandler-RENAMED\\n */\\nUserDataHandler.prototype.NODE_RENAMED = 4;\\n\\n/**\\n * @type {number}\\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#UserDataHandler-ADOPTED\\n */\\nUserDataHandler.prototype.NODE_ADOPTED = 5;\\n\\n/**\\n  Line: 1789 -  a.a+="wRoot/getSelection\\n * @nosideeffects\\n */\\nDocument.prototype.getSelection = function() {};\\n\\n/**\\n * @type {string}\\n * @see https://html.spec.whatwg.org/multipage/dom.html#current-document-readiness\\n */\\nDocument.prototype.readyState;\\n\\n/**\\n * @see https://developer.apple.com/webapps/docs/documentation/AppleApplications/Reference/SafariJSRef/DOMApplicationCache/DOMApplicationCache.html\\n * @constructor\\n * @implements {EventTarget}\\n */\\nfunction DOMApplicationCache() {}\\n\\n/** @override */\\nDOMApplicationCache.prototype.addEventListener = function(\\n    type, listener, opt_options) {};\\n\\n/** @override */\\nDOMApplicationCache.prototype.removeEventListener = function(\\n    type, listener, opt_options) {};\\n\\n/** @override */\\nDOMApplicationCache.prototype.dispatchEvent = function(evt) {};\\n\\n/**\\n * The object isn't associated with an application cache. This can occur if the\\n * update process fails and there is no previous cache to revert to, or if there\\n * is no manifest file.\\n * @type {number}\\n */\\nDOMApplicationCache.prototype.UNCACHED = 0;\\n\\n/**\\n * The cache is idle.\\n * @type {number}\\n */\\nDOMApplicationCache.prototype.IDLE = 1;\\n\\n/**\\n * The update has started but the resources are not downloaded yet - for\\n * example, this can happen when the manifest file is fetched.\\n * @type {number}\\n */\\nDOMApplicationCache.prototype.CHECKING = 2;\\n\\n/**\\n * The resources are being downloaded into the cache.\\n * @type {number}\\n */\\nDOMApplicationCache.prototype.DOWNLOADING = 3;\\n\\n/**\\n * Resources have finished downloading and the new cache is ready to be used.\\n * @type {number}\\n */\\nDOMApplicationCache.prototype.UPDATEREADY = 4;\\n\\n/**\\n * The cache is obsolete.\\n * @type {number}\\n */\\nDOMApplicationCache.prototype.OBSOLETE = 5;\\n\\n/**\\n * The current status of the application cache.\\n * @type {number}\\n */\\nDOMApplicationCache.prototype.status;\\n\\n/**\\n * Sent when the update process finishes for the first time; that is, the first\\n * time an application cache is saved.\\n * @t Line: 1898 -  .\\n */\\nIDBObjectStore.prototype.index = function(name) {};\\n\\n/**\\n * @param {string} indexName The name of the index to remove.\\n * @return {undefined}\\n */\\nIDBObjectStore.prototype.deleteIndex = function(indexName) {};\\n\\n/**\\n * @param {(!IDBKeyType|IDBKeyRange)=} key The key of this value.\\n * @return {!IDBRequest} The IDBRequest object.\\n * @see http://www.w3.org/TR/IndexedDB/#widl-IDBObjectStore-count\\n */\\nIDBObjectStore.prototype.count = function(key) {};\\n\\n/**\\n * @param {(!IDBKeyType|IDBKeyRange)=} query\\n * @return {!IDBRequest} The IDBRequest object.\\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbobjectstore-getkey\\n */\\nIDBObjectStore.prototype.getKey = function(query) {};\\n\\n/**\\n * @param {(!IDBKeyType|IDBKeyRange)=} query\\n * @param {number=} count\\n * @return {!IDBRequest} The IDBRequest object.\\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbobjectstore-getall\\n */\\nIDBObjectStore.prototype.getAll = function(query, count) {};\\n\\n/**\\n * @param {(!IDBKeyType|IDBKeyRange)=} query\\n * @param {number=} count\\n * @return {!IDBRequest} The IDBRequest object.\\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbobjectstore-getallkeys\\n */\\nIDBObjectStore.prototype.getAllKeys = function(query, count) {};\\n\\n/**\\n * @param {(!IDBKeyType|IDBKeyRange)=} query\\n * @param {!IDBCursorDirection=} direction\\n * @return {!IDBRequest} The IDBRequest object.\\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbobjectstore-openkeycursor\\n */\\nIDBObjectStore.prototype.openKeyCursor = function(query, direction) {};\\n\\n\\n/**\\n * @constructor\\n * @see http://www.w3.org/TR/IndexedDB/#idl-def-IDBIndex\\n * @see https://www.w3.org/TR/IndexedDB-2/#index-interface\\n */\\nfunction IDBIndex() {}\\n\\n/**\\n * @type {string}\\n */\\nIDBIndex.prototype.name;\\n\\n/**\\n * @type {!IDBObjectStore}\\n * @const\\n */\\nIDBIndex.prototype.objectStore;\\n\\n/**\\n * @type {*}\\n * @const\\n */\\nIDBIndex.prototype.keyPath;\\n\\n/**\\n * @type {boolean}\\n * @const\\n */\\nIDBIndex.prototype.multiEntry;\\n\\n/**\\n * @type {boolean}\\n * @ Line: 1899 -  DBIndex.prototype.unique;\\n\\n/**\\n * @param {(!IDBKeyType|?IDBKeyRange)=} range The range of the cursor.\\n *     Nullable because IE <11 has problems with undefined.\\n * @param {!IDBCursorDirection=} direction The direction of cursor enumeration.\\n * @return {!IDBRequest} The IDBRequest object.\\n */\\nIDBIndex.prototype.openCursor = function(range, direction) {};\\n\\n/**\\n * @param {(!IDBKeyType|?IDBKeyRange)=} range The range of the cursor.\\n *     Nullable because IE <11 has problems with undefined.\\n * @param {!IDBCursorDirection=} direction The direction of cursor enumeration.\\n * @return {!IDBRequest} The IDBRequest object.\\n */\\nIDBIndex.prototype.openKeyCursor = function(range, direction) {};\\n\\n/**\\n * @param {!IDBKeyType|!IDBKeyRange} key The id of the object to retrieve.\\n * @return {!IDBRequest} The IDBRequest object.\\n */\\nIDBIndex.prototype.get = function(key) {};\\n\\n/**\\n * @param {!IDBKeyType|!IDBKeyRange} key The id of the object to retrieve.\\n * @return {!IDBRequest} The IDBRequest object.\\n */\\nIDBIndex.prototype.getKey = function(key) {};\\n\\n/**\\n * @param {(!IDBKeyType|!IDBKeyRange)=} query\\n * @param {number=} count\\n * @return {!IDBRequest}\\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbindex-getall\\n */\\nIDBIndex.prototype.getAll = function(query, count) {};\\n\\n/**\\n * @param {(!IDBKeyType|!IDBKeyRange)=} query\\n * @param {number=} count\\n * @return {!IDBRequest}\\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbindex-getallkeys\\n */\\nIDBIndex.prototype.getAllKeys = function(query, count) {};\\n\\n/**\\n * @param {(!IDBKeyType|!IDBKeyRange)=} opt_key\\n * @return {!IDBRequest}\\n */\\nIDBIndex.prototype.count = function(opt_key) {};\\n\\n\\n/**\\n * @constructor\\n * @see http://www.w3.org/TR/IndexedDB/#idl-def-IDBCursor\\n * @see https://www.w3.org/TR/IndexedDB-2/#cursor-interface\\n */\\nfunction IDBCursor() {}\\n\\n/**\\n * @constructor\\n * @extends {IDBCursor}\\n * @see http://www.w3.org/TR/IndexedDB/#idl-def-IDBCursor\\n * @see https://www.w3.org/TR/IndexedDB-2/#cursor-interface\\n */\\nfunction webk Line: 1999 -  ext.MAX_VARYING_VECTORS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.MAX_TEXTURE_IMAGE_UNITS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.SHADER_TYPE;\\n\\n/** @type {number} */\\nWebGLRenderingContext.DELETE_STATUS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.LINK_STATUS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.VALIDATE_STATUS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.ATTACHED_SHADERS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.ACTIVE_UNIFORMS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.ACTIVE_ATTRIBUTES;\\n\\n/** @type {number} */\\nWebGLRenderingContext.SHADING_LANGUAGE_VERSION;\\n\\n/** @type {number} */\\nWebGLRenderingContext.CURRENT_PROGRAM;\\n\\n/** @type {number} */\\nWebGLRenderingContext.NEVER;\\n\\n/** @type {number} */\\nWebGLRenderingContext.LESS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.EQUAL;\\n\\n/** @type {number} */\\nWebGLRenderingContext.LEQUAL;\\n\\n/** @type {number} */\\nWebGLRenderingContext.GREATER;\\n\\n/** @type {number} */\\nWebGLRenderingContext.NOTEQUAL;\\n\\n/** @type {number} */\\nWebGLRenderingContext.GEQUAL;\\n\\n/** @type {number} */\\nWebGLRenderingContext.ALWAYS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.KEEP;\\n\\n/** @type {number} */\\nWebGLRenderingContext.REPLACE;\\n\\n/** @type {number} */\\nWebGLRenderingContext.INCR;\\n\\n/** @type {number} */\\nWebGLRenderingContext.DECR;\\n\\n/** @type {number} */\\nWebGLRenderingContext.INVERT;\\n\\n/** @type {number} */\\nWebGLRenderingContext.INCR_WRAP;\\n\\n/** @type {number} */\\nWebGLRenderingContext.DECR_WRAP;\\n\\n/** @type {number} */\\nWebGLRenderingContext.VENDOR;\\n\\n/** @type {number} */\\nWebGLRenderingContext.RENDERER;\\n\\n/** @type {number} */\\nWebGLRenderingContext.VERSION;\\n\\n/** @type {number} */\\nWebGLRenderingContext.NEAREST;\\n\\n/** @type {number Line: 2010 -  TORS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.MAX_VARYING_VECTORS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.MAX_TEXTURE_IMAGE_UNITS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.MAX_FRAGMENT_UNIFORM_VECTORS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.SHADER_TYPE;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.DELETE_STATUS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.LINK_STATUS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.VALIDATE_STATUS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.ATTACHED_SHADERS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.ACTIVE_UNIFORMS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.ACTIVE_ATTRIBUTES;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.SHADING_LANGUAGE_VERSION;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.CURRENT_PROGRAM;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.NEVER;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.LESS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.EQUAL;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.LEQUAL;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.GREATER;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.NOTEQUAL;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.GEQUAL;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.ALWAYS;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.KEEP;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.REPLACE;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.INCR;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.DECR;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.INVERT;\\n\\n/** @type {number} */\\nWebGLRenderingContext.prototype.IN Line: 2069 -   * @param {!Float32Array|!Array<number>} values\\n * @param {number=} opt_srcOffset\\n * @return {undefined}\\n */\\nWebGL2RenderingContext.prototype.clearBufferfv = function(\\n    buffer, drawbuffer, values, opt_srcOffset) {};\\n\\n/**\\n * @param {number} buffer\\n * @param {number} drawbuffer\\n * @param {!Int32Array|!Array<number>|!Array<boolean>} values\\n * @param {number=} opt_srcOffset\\n * @return {undefined}\\n */\\nWebGL2RenderingContext.prototype.clearBufferiv = function(\\n    buffer, drawbuffer, values, opt_srcOffset) {};\\n\\n/**\\n * @param {number} buffer\\n * @param {number} drawbuffer\\n * @param {!Uint32Array|!Array<number>|!Array<boolean>} values\\n * @param {number=} opt_srcOffset\\n * @return {undefined}\\n */\\nWebGL2RenderingContext.prototype.clearBufferuiv = function(\\n    buffer, drawbuffer, values, opt_srcOffset) {};\\n\\n/**\\n * @param {number} buffer\\n * @param {number} drawbuffer\\n * @param {number} depth\\n * @param {number} stencil\\n * @return {undefined}\\n */\\nWebGL2RenderingContext.prototype.clearBufferfi = function(\\n    buffer, drawbuffer, depth, stencil) {};\\n\\n/* Query Objects */\\n\\n/**\\n * @return {?WebGLQuery}\\n */\\nWebGL2RenderingContext.prototype.createQuery = function() {};\\n\\n/**\\n * @param {?WebGLQuery} query\\n * @return {undefined}\\n */\\nWebGL2RenderingContext.prototype.deleteQuery = function(query) {};\\n\\n/**\\n * @param {?WebGLQuery} query\\n * @return {boolean}\\n */\\nWebGL2RenderingContext.prototype.isQuery = function(query) {};\\n\\n/**\\n * @param {number} target\\n * @param {!WebGLQuery} query\\n * @return {undefined}\\n */\\nWebGL2RenderingContext.prototype.beginQuery = function(target, query) {};\\n\\n/**\\n * @param {number} target\\n * @return {undefined}\\n */\\nWebGL2RenderingContext.prototype.endQuery = function(target) {};\\n\\n/**\\n * @param {number} target\\n * @param {number} pname\\n * @return {?WebGLQuery}\\n * @nosideeffects\\n */\\nWebGL2RenderingContext.prototype.getQuery = function(target, pname) {};\\n\\n/**\\n * @param {!WebGLQuery} query\\n * @param {number} pname\\n * @return Line: 2250 -  _Uc="ARRAY_TYPE",aVc="RECORD_TYPE",bVc="UNION_TYPE",cVc="FUNCTION_TYPE",dVc="GENERIC_TYPE_LIST",eVc=4294967295,fVc="0123456789abcdef",gVc="Malformed parenthetical: ",hVc="Invalid capture group name: <",iVc=1114,jVc="Bit index should be non-negative integer",kVc="String has leading or trailing whitespace",lVc="The new child node has next siblings.",mVc="The new child node has previous siblings.",nVc="The new child node already has a parent.",oVc="%s is not the parent of %s",pVc="Template Literal String node not created with Node.newTemplateLitString",

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/mock.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 618 -        setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/asynctestcase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 75 -   *           window.setTimeout(stepCallback, 100);

 Line: 81 -   *           window.setTimeout(stepCallback, 100);

 Line: 266 -   * The handle to the current setTimeout timer.

 Line: 402 -      // Run this in a setTimeout so that the caller has a chance to call

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/benchmark.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -    // Parse the 'times' query parameter if it's set.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/performancetimer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 109 -  goog.testing.PerformanceTimer.prototype.setTimeoutInterval = function(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/testrunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -   * create a wrapper that the Selenium test can hook into to query the state of

 Line: 421 -        // query parameter.  We also need to do this without bringing in any

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/jstdasyncwrapper.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 35 -  goog.testing.JsTdAsyncWrapper.REAL_SET_TIMEOUT_FN_ = goog.global.setTimeout;

 Line: 39 -   * Calls a function after a specified timeout. This uses the original setTimeout

 Line: 47 -    // default global context. Inlining breaks chrome since it requires setTimeout

 Line: 49 -    // method on setTimeout.

 Line: 50 -    var setTimeoutFn = goog.testing.JsTdAsyncWrapper.REAL_SET_TIMEOUT_FN_;

 Line: 51 -    setTimeoutFn(fn, timeout);

 Line: 172 -    // using callbacks and setTimeout.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/continuationtestcase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 33 -   * relies on Iframe load events, event or layout code that requires a setTimeout

 Line: 297 -   * window.setTimeout. In particular, if two continuations are

 Line: 307 -    step.setTimeout(

 Line: 327 -    step.setTimeout(

 Line: 432 -      step.setTimeout(

 Line: 641 -   * A saved reference to window.setTimeout so that MockClock or other overrides

 Line: 646 -  goog.testing.ContinuationTestCase.Step.protectedSetTimeout_ = window.setTimeout;

 Line: 665 -  goog.testing.ContinuationTestCase.Step.prototype.setTimeout = function(

 Line: 670 -    var setTimeout = goog.testing.ContinuationTestCase.Step.protectedSetTimeout_;

 Line: 671 -    this.timeout_ = setTimeout(func, duration);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/testcase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 277 -   * Save a reference to `window.setTimeout`, so any code that overrides the

 Line: 282 -  goog.testing.TestCase.protectedSetTimeout_ = goog.global.setTimeout;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/testcase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2000 -            ' suppressed by querystring';

 Line: 2076 -   * Parses URL query parameters for the 'runTests' parameter.

 Line: 2077 -   * @param {string} search The URL query string.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/multitestrunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 460 -  goog.testing.MultiTestRunner.prototype.setTimeout = function(timeout) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/net/xhrio.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 155 -      x.setTimeoutInterval(opt_timeoutInterval);

 Line: 331 -  goog.testing.net.XhrIo.prototype.setTimeoutInterval = function(ms) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/net/xhrio.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 220 -   * Additional headers that were requested in the last query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/mockclock.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 15 -   * @fileoverview Mock Clock implementation for working with setTimeout,

 Line: 16 -   * setInterval, clearTimeout and clearInterval within unit tests.

 Line: 38 -   * Class for unit testing code that uses setTimeout and clearTimeout.

 Line: 120 -   * Count of the number of setTimeout/setInterval/etc. calls received by this

 Line: 138 -   * PropertyReplacer instance which overwrites and resets setTimeout,

 Line: 139 -   * setInterval, etc. or null if the MockClock is not installed.

 Line: 169 -  goog.testing.MockClock.REAL_SETTIMEOUT_ = goog.global.setTimeout;

 Line: 177 -   * setTimeout, setInterval, clearTimeout and clearInterval.

 Line: 181 -      if (goog.testing.MockClock.REAL_SETTIMEOUT_ !== goog.global.setTimeout) {

 Line: 184 -              'Non default setTimeout detected. ' +

 Line: 192 -      r.set(goog.global, 'setTimeout', goog.bind(this.setTimeout_, this));

 Line: 193 -      r.set(goog.global, 'setInterval', goog.bind(this.setInterval_, this));

 Line: 306 -  goog.testing.MockClock.prototype.setTimeoutDelay = function(delay) {

 Line: 357 -   *     promises "pumped" by setTimeout which is not done in production code,

 Line: 359 -   *     promises callback and setTimeout/setInterval callbacks in tests.

 Line: 388 -   * scheduled. A setInterval call is only counted once.

 Line: 397 -   * triggered. For setInterval, each callback is counted separately.

 Line: 535 -   * Mock implementation for setTimeout.

 Line: 541 -  goog.testing.MockClock.prototype.setTimeout_ = function(

 Line: 559 -   * Mock implementation for setInterval.

 Line: 565 -  goog.testing.MockClock.prototype.setInterval_ = function(

 Line: 583 -    return this.setTimeout_(goog.bind(function() {

 Line: 604 -    return this.setTimeout_(funcToCall, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/jsunit.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 61 -    var realTimeout = window.setTimeout;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/parallel_closure_test_suite.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 97 -                       .setTimeout(timeout * 1000)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/functions/functions.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 423 -      timeout = goog.global.setTimeout(function() {

 Line: 461 -      timeout = goog.global.setTimeout(handleTimeout, interval);

 Line: 503 -        timeout = goog.global.setTimeout(handleTimeout, interval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/datasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 606 -  goog.ds.STR_ALL_CHILDREN_SELECTOR = '*';

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/jsdatasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 123 -    if (!opt_selector || opt_selector == goog.ds.STR_ALL_CHILDREN_SELECTOR) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/fastdatanode.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 185 -    if (!opt_selector || opt_selector == goog.ds.STR_ALL_CHILDREN_SELECTOR) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/jsxmlhttpdatasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 186 -      goog.global.setTimeout(goog.bind(this.success_, this), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/jsxmlhttpdatasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 102 -   * send a specific body rather than build the body from the query

 Line: 123 -        var queryData;

 Line: 125 -          queryData = this.uri_.getQueryData().toString();

 Line: 127 -          queryData = this.queryData_;

 Line: 132 -        this.xhr_.send(String(uriNoQuery), 'POST', queryData);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/xmldatasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 60 -  goog.ds.XmlDataSource.ATTRIBUTE_SELECTOR_ = '@*';

 Line: 160 -        opt_selector == goog.ds.XmlDataSource.ATTRIBUTE_SELECTOR_) {

 Line: 165 -        opt_selector == goog.ds.STR_ALL_CHILDREN_SELECTOR) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/uri/utils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -   * cases.  The query parameter utilities assume that the parameter keys are

 Line: 29 -   * query parameter mutation utilities also do not tolerate fragment identifiers.

 Line: 84 -   * @param {?string=} opt_queryData The URI-encoded query data.

 Line: 164 -   * case for the query component in the above example. Therefore, we can

 Line: 170 -   *    query     = $7

 Line: 183 -   *    $6 = <undefined>       query without ?

 Line: 203 -      '(?:\\?([^#]*))?' +    // query

 Line: 388 -   * @return {?string} The query data still encoded, or null if none.  Does not

 Line: 463 -   * @return {string} The URI, starting at the path and including the query

 Line: 510 -   * Asserts that there are no fragment or query identifiers, only in uncompiled

 Line: 518 -        'goog.uri.utils: Fragment or query identifiers are not supported: [%s]',

 Line: 524 -   * Supported query parameter values by the parameter serializing utilities.

 Line: 537 -   * An array representing a set of query parameters with alternating keys

 Line: 561 -   * Parses encoded query parameters and calls callback function for every

 Line: 568 -   * @param {string} encodedQuery Encoded query string excluding question mark at

 Line: 571 -   *     parameter found in query string.  The first argument (name) will not be

 Line: 597 -   * Split the URI into 3 parts where the [1] is the queryData without a leading

 Line: 602 -   *     middle value is the queryData without a leading '?'.

 Line: 606 -    // Find the query data and hash.

 Line: 612 -    var queryData;

 Line: 615 -      queryData = '';

 Line: 617 -      queryData = uri.substring(questionIndex + 1, hashIndex);

 Line: 619 -    return [uri.substr(0, questionIndex), queryData, uri.substr(hashIndex)];

 Line: 635 -   * @param {string} queryData

 Line: 642 -      return queryData;

 Line: 644 -    return queryData ? queryData + '&' + newData : newData;

 Line: 650 -   * @param {string} queryData

 Line: 654 -  goog.uri.utils.appendQueryDataToUri_ = function(uri, queryData) {

 Line: 659 -    parts[1] = goog.uri.utils.appendQueryData_(parts[1], queryData);

 Line: 697 -   * Builds a query data string from a sequence of alternating keys and values.

 Line: 703 -   * @return {string} The encoded query string, in the form 'a=1&b=2'.

 Line: 720 -   * Builds a query data string from a map.

 Line: 726 -   * @return {string} The encoded query string, in the form 'a=1&b=2'.

 Line: 759 -   * @param {string} uri The original URI, which may already have query data.

 Line: 763 -   * @return {string} The URI with all query parameters added.

 Line: 766 -    var queryData = arguments.length == 2 ?

 Line: 769 -    return goog.uri.utils.appendQueryDataToUri_(uri, queryData);

 Line: 774 -   * Appends query parameters from a map.

 Line: 776 -   * @param {string} uri The original URI, which may already have query data.

 Line: 783 -    var queryData = goog.uri.utils.buildQueryDataFromMap(map);

 Line: 784 -    return goog.uri.utils.appendQueryDataToUri_(uri, queryData);

 Line: 794 -   * @param {string} uri The original URI, which may already have query data.

 Line: 799 -   * @return {string} The URI with the query parameter added.

 Line: 810 -   * Finds the next instance of a query parameter with the specified name.

 Line: 880 -   * Gets the first value of a query parameter.

 Line: 909 -   * Gets all values of a query parameter.

 Line: 924 -      // query parameters.

 Line: 951 -   * Removes all instances of a query parameter.

 Line: 962 -    // Look for a query parameter.

 Line: 965 -      // Get the portion of the query string up to, but not including, the ?

 Line: 991 -   * @param {string} uri The original URI, which may already have query data.

 Line: 995 -   * @return {string} The URI with the query parameter added.

 Line: 1004 -   * Effeciently set or remove multiple query parameters in a URI. Order of

 Line: 1006 -   * appended to the end of the query. Params with values of null or undefined are

 Line: 1012 -   * @return {string} An updated URI where the query data has been updated with

 Line: 1017 -    var queryData = parts[1];

 Line: 1037 -   * query or fragment identifiers. The path to append may not contain query or

 Line: 1082 -   * Standard supported query parameters.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/uri/uri.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 120 -     * Whether or not to ignore case when comparing query params.

 Line: 126 -     * Object representing query data.

 Line: 218 -    var query = this.getEncodedQuery();

 Line: 220 -      out.push('?', query);

 Line: 238 -   * 1. foo - replaces the last part of the path, the whole query and fragment<br>

 Line: 239 -   * 2. /foo - replaces the path, the query and fragment<br>

 Line: 241 -   * 4. ?foo - replace the query and fragment<br>

 Line: 502 -   * @return {boolean} Whether the query string has been set.

 Line: 510 -   * Sets the query data.

 Line: 511 -   * @param {goog.Uri.QueryData|string|undefined} queryData QueryData object.

 Line: 513 -   *     Applies only if queryData is a string.

 Line: 520 -      this.queryData_ = queryData;

 Line: 524 -        // QueryData accepts encoded query string, so encode it if

 Line: 526 -        queryData = goog.Uri.encodeSpecialChars_(

 Line: 527 -            queryData, goog.Uri.reDisallowedInQuery_);

 Line: 537 -   * Sets the URI query.

 Line: 538 -   * @param {string} newQuery New query value.

 Line: 548 -   * @return {string} The encoded URI query, not including the ?.

 Line: 556 -   * @return {string} The decoded URI query, not including the ?.

 Line: 564 -   * Returns the query data.

 Line: 573 -   * @return {string} The encoded URI query, not including the ?.

 Line: 584 -   * Sets the value of the named query parameters, clearing previous values for

 Line: 599 -   * Sets the values of the named query parameters, clearing previous values for

 Line: 600 -   * that key.  Not new values will currently be moved to the end of the query

 Line: 627 -   * query parameter values.

 Line: 630 -   *     decoded query parameter values.

 Line: 639 -   * parameter name does not appear in the query string.

 Line: 642 -   *     undefined if the given parameter name does not appear in the query

 Line: 708 -   * Removes the named query parameter.

 Line: 911 -    // Don't use UrlDecode() here because val is not a query parameter.

 Line: 1001 -   * Regular expression for characters that are disallowed in the query.

 Line: 1036 -   * Class used to represent URI query parameters.  It is essentially a hash of

 Line: 1041 -   * @param {?string=} opt_query Optional encoded query string to parse into

 Line: 1055 -     * May be null if it requires parsing from the query string.

 Line: 1071 -     * Encoded query string, or null if it requires computing from the key map.

 Line: 1086 -   * query string and fills the map with parsed data.

 Line: 1104 -   * Creates a new query data instance from a map of names and values.

 Line: 1114 -   * @return {!goog.Uri.QueryData} The populated query data instance.

 Line: 1122 -    var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);

 Line: 1128 -        queryData.add(key, value);

 Line: 1130 -        queryData.setValues(key, value);

 Line: 1133 -    return queryData;

 Line: 1138 -   * Creates a new query data instance from parallel arrays of parameter names

 Line: 1148 -   * @return {!goog.Uri.QueryData} The populated query data instance.

 Line: 1155 -    var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);

 Line: 1157 -      queryData.add(keys[i], values[i]);

 Line: 1159 -    return queryData;

 Line: 1299 -   * Returns all the values of the parameters with the given name. If the query

 Line: 1351 -   * Returns the first value associated with the key. If the query data has no

 Line: 1354 -   * @param {*=} opt_default The default value to return if the query data

 Line: 1386 -   * @return {string} Encoded query string.

 Line: 1426 -   * @return {string} Decoded query string.

 Line: 1459 -   * Clone the query data instance.

 Line: 1513 -   * Extends a query data object with another query data or map like object. This

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/cssom/iframe/style.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 76 -  goog.cssom.iframe.style.SELECTOR_DELIMITER_ = ',';

 Line: 84 -  goog.cssom.iframe.style.SELECTOR_PART_DELIMITER_ = ' ';

 Line: 241 -            goog.cssom.iframe.style.SELECTOR_PART_DELIMITER_);

 Line: 244 -        array.push(goog.cssom.iframe.style.SELECTOR_DELIMITER_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/cssom/cssom.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 394 -    // We need the regexp to ensure we get the filename minus any query params.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/webgl/webgl.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1030 -  goog.webgl.DELETE_STATUS = 0x8B80;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/debugwindow.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 104 -    goog.global.setInterval(goog.bind(this.saveWindowPositionSize_, this), 7500);

 Line: 374 -          goog.global.setTimeout(goog.bind(this.writeBufferToLog, this), 250);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/fancywindow.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 175 -    var sel = dh.createDom(goog.dom.TagName.SELECT, {'id': id});

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/devcss/devcss.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 180 -    IE6_SELECTOR_TEXT: 'goog-ie6-selector',

 Line: 362 -    // IE6_SELECTOR_TEXT in the cssText property.

 Line: 365 -            goog.debug.DevCss.CssToken_.IE6_SELECTOR_TEXT)) {

 Line: 390 -        goog.debug.DevCss.CssToken_.IE6_SELECTOR_TEXT +

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/errorhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 37 -   * It will also try to restore window.setTimeout and window.setInterval

 Line: 234 -   * Installs exception protection for window.setTimeout to handle exceptions.

 Line: 237 -    this.protectWindowFunctionsHelper_('setTimeout');

 Line: 242 -   * Install exception protection for window.setInterval to handle exceptions.

 Line: 245 -    this.protectWindowFunctionsHelper_('setInterval');

 Line: 271 -   * asynchronously called, for example setTimeout or requestAnimationFrame.

 Line: 288 -      // IE doesn't support .call for setInterval/setTimeout, but it

 Line: 332 -    // Try to unwrap window.setTimeout and window.setInterval.

 Line: 334 -    win.setTimeout = this.unwrap(win.setTimeout);

 Line: 335 -    win.setInterval = this.unwrap(win.setInterval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/errorreporter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 376 -      var queryMap = {};

 Line: 377 -      queryMap['trace'] = opt_trace;

 Line: 379 -      // Copy context into query data map

 Line: 382 -          queryMap[this.contextPrefix_ + entry] = opt_context[entry];

 Line: 386 -      // Copy query data map into request.

 Line: 387 -      var queryData = goog.uri.utils.buildQueryDataFromMap(queryMap);

 Line: 391 -        queryData = queryData.substring(0, this.truncationLimit_);

 Line: 395 -      this.xhrSender_(requestUrl, 'POST', queryData, this.extraHeaders_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/fpsdisplay.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 110 -        this.isInDocument(), 'Render the FPS display before querying FPS');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/async/run.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 80 -   * control so we schedule a backup "setTimeout" to the unmocked timeout if

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/async/animationdelay.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 106 -   * animation, which uses a timer (setTimeout) to schedule animation.

 Line: 154 -      this.id_ = this.win_.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/async/debouncer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 115 -    // timeout. However clearTimeout and setTimeout are expensive, so we just

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/async/nexttick.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 40 -    goog.global.setTimeout(function() { throw exception; }, 0);

 Line: 46 -   * execution context. setTimeout(…, 0) takes at least 4ms when called from

 Line: 47 -   * within another setTimeout(…, 0) for legacy reasons.

 Line: 51 -   * setTimeout(_, 0) would do if it were not throttled. If you desire microtask

 Line: 91 -   * setImmediate is faster than setTimeout nor that setImmediate N is before

 Line: 199 -      // which allows starving postMessage with a busy setTimeout loop.

 Line: 239 -    // Fall back to setTimeout with 0. In browsers this creates a delay of 5ms

 Line: 243 -      goog.global.setTimeout(/** @type {function()} */ (cb), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/window/window.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 262 -   * setTimeout(

</Result>
</report_mosca>

