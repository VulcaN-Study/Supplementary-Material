/src/tools/props.html-40-
/src/tools/props.html:41:      var ta = document.createElement("textarea");
/src/tools/props.html-42-      ta.style.width = "100%";
##############################################
/src/tools/props.html-51-      }, null, 2);
/src/tools/props.html:52:      document.body.appendChild(ta);
/src/tools/props.html-53-
##############################################
/src/tools/domprops.json-2913-        "escape",
/src/tools/domprops.json:2914:        "eval",
/src/tools/domprops.json:2915:        "evaluate",
/src/tools/domprops.json-2916-        "event",
##############################################
/src/tools/domprops.json-5275-        "unescape",
/src/tools/domprops.json:5276:        "uneval",
/src/tools/domprops.json-5277-        "unicode-bidi",
##############################################
/src/README.md-198-
/src/README.md:199:- `eval` â€” mangle names visible in scopes where `eval` or `with` are used
/src/README.md-200-  (disabled by default).
##############################################
/src/README.md-301-
/src/README.md:302:- `evaluate` -- attempt to evaluate constant expressions
/src/README.md-303-
##############################################
/src/README.md-404-UglifyJS will notice the constants and, since they cannot be altered, it
/src/README.md:405:will evaluate references to them to the value itself and drop unreachable
/src/README.md-406-code as usual.  The possible downside of this approach is that the build
##############################################
/src/README.md-676-with information about where is a name defined, how many times is a name
/src/README.md:677:referenced, if it is a global or not, if a function is using `eval` or the
/src/README.md-678-`with` statement etc.  I will discuss this some place else, for now what's
##############################################
/src/lib/scope.js-63-            || this.undeclared
/src/lib/scope.js:64:            || (!options.eval && (this.scope.uses_eval || this.scope.uses_with))
/src/lib/scope.js-65-            || (options.keep_fnames
##############################################
/src/lib/scope.js-157-
/src/lib/scope.js:158:    // pass 2: find back references and eval
/src/lib/scope.js-159-    var func = null;
##############################################
/src/lib/scope.js-182-                node.thedef = g;
/src/lib/scope.js:183:                if (name == "eval" && tw.parent() instanceof AST_Call) {
/src/lib/scope.js:184:                    for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope)
/src/lib/scope.js:185:                        s.uses_eval = true;
/src/lib/scope.js-186-                }
##############################################
/src/lib/scope.js-208-    this.uses_with = false;   // will be set to true if this or some nested scope uses the `with` statement
/src/lib/scope.js:209:    this.uses_eval = false;   // will be set to true if this or nested scope uses the global `eval`
/src/lib/scope.js-210-    this.parent_scope = null; // the parent scope
##############################################
/src/lib/scope.js-320-    return this.definition().references.length == 0
/src/lib/scope.js:321:        && !(this.scope.uses_eval || this.scope.uses_with);
/src/lib/scope.js-322-});
##############################################
/src/lib/scope.js-346-        except      : [],
/src/lib/scope.js:347:        eval        : false,
/src/lib/scope.js-348-        sort        : false,
##############################################
/src/lib/scope.js-527-        nested_defuns    : true,
/src/lib/scope.js:528:        eval             : true
/src/lib/scope.js-529-    });
##############################################
/src/lib/scope.js-563-        }
/src/lib/scope.js:564:        if (options.eval
/src/lib/scope.js-565-            && node instanceof AST_SymbolRef
/src/lib/scope.js-566-            && node.undeclared()
/src/lib/scope.js:567:            && node.name == "eval") {
/src/lib/scope.js-568-            AST_Node.warn("Eval is used [{file}:{line},{col}]", node.start);
##############################################
/src/lib/ast.js-280-
/src/lib/ast.js:281:var AST_Scope = DEFNODE("Scope", "directives variables functions uses_with uses_eval parent_scope enclosed cname", {
/src/lib/ast.js-282-    $documentation: "Base class for all statements introducing a lexical scope",
##############################################
/src/lib/ast.js-287-        uses_with: "[boolean/S] tells whether this scope uses the `with` statement",
/src/lib/ast.js:288:        uses_eval: "[boolean/S] tells whether this scope contains a direct call to the global `eval`",
/src/lib/ast.js-289-        parent_scope: "[AST_Scope?/S] link to the parent scope",
##############################################
/src/lib/compress.js-58-        comparisons   : !false_by_default,
/src/lib/compress.js:59:        evaluate      : !false_by_default,
/src/lib/compress.js-60-        booleans      : !false_by_default,
##############################################
/src/lib/compress.js-704-
/src/lib/compress.js:705:    // methods to evaluate a constant expression
/src/lib/compress.js-706-    (function (def){
/src/lib/compress.js:707:        // The evaluate method returns an array with one or two
/src/lib/compress.js-708-        // elements.  If the node has been successfully reduced to a
##############################################
/src/lib/compress.js-711-        // of the array is always an AST_Node descendant; if
/src/lib/compress.js:712:        // evaluation was successful it's a node that represents the
/src/lib/compress.js-713-        // constant; otherwise it's the original or a replacement node.
/src/lib/compress.js:714:        AST_Node.DEFMETHOD("evaluate", function(compressor){
/src/lib/compress.js:715:            if (!compressor.option("evaluate")) return [ this ];
/src/lib/compress.js-716-            try {
/src/lib/compress.js:717:                var val = this._eval(compressor);
/src/lib/compress.js-718-                return [ best_of(make_node_from_constant(compressor, val, this), this), val ];
##############################################
/src/lib/compress.js-724-        def(AST_Statement, function(){
/src/lib/compress.js:725:            throw new Error(string_template("Cannot evaluate a statement [{file}:{line},{col}]", this.start));
/src/lib/compress.js-726-        });
##############################################
/src/lib/compress.js-736-
/src/lib/compress.js:737:            return node._eval(compressor);
/src/lib/compress.js-738-        };
##############################################
/src/lib/compress.js-749-              case "typeof":
/src/lib/compress.js:750:                // Function would be evaluated to an array and so typeof would
/src/lib/compress.js-751-                // incorrectly return 'object'. Hence making is a special case.
##############################################
/src/lib/compress.js-756-                // typeof <RegExp> returns "object" or "function" on different platforms
/src/lib/compress.js:757:                // so cannot evaluate reliably
/src/lib/compress.js-758-                if (e instanceof RegExp) throw def;
##############################################
/src/lib/compress.js-818-    })(function(node, func){
/src/lib/compress.js:819:        node.DEFMETHOD("_eval", func);
/src/lib/compress.js-820-    });
##############################################
/src/lib/compress.js-1032-            && !(self instanceof AST_Toplevel)
/src/lib/compress.js:1033:            && !self.uses_eval
/src/lib/compress.js-1034-           ) {
##############################################
/src/lib/compress.js-1345-    OPT(AST_DWLoop, function(self, compressor){
/src/lib/compress.js:1346:        var cond = self.condition.evaluate(compressor);
/src/lib/compress.js-1347-        self.condition = cond[0];
##############################################
/src/lib/compress.js-1422-        if (cond) {
/src/lib/compress.js:1423:            cond = cond.evaluate(compressor);
/src/lib/compress.js-1424-            self.condition = cond[0];
##############################################
/src/lib/compress.js-1453-        // `x && true`, though it probably should.
/src/lib/compress.js:1454:        var cond = self.condition.evaluate(compressor);
/src/lib/compress.js-1455-        self.condition = cond[0];
##############################################
/src/lib/compress.js-1589-        }
/src/lib/compress.js:1590:        var exp = self.expression.evaluate(compressor);
/src/lib/compress.js-1591-        out: if (exp.length == 2) try {
##############################################
/src/lib/compress.js-1640-                    if (node instanceof AST_Case) {
/src/lib/compress.js:1641:                        var exp = node.expression.evaluate(compressor);
/src/lib/compress.js-1642-                        if (exp.length < 2) {
##############################################
/src/lib/compress.js-1824-            else if (exp instanceof AST_Dot && exp.expression instanceof AST_Array && exp.property == "join") EXIT: {
/src/lib/compress.js:1825:                var separator = self.args.length == 0 ? "," : self.args[0].evaluate(compressor)[1];
/src/lib/compress.js-1826-                if (separator == null) break EXIT; // not a constant
/src/lib/compress.js-1827-                var elements = exp.expression.elements.reduce(function(a, el){
/src/lib/compress.js:1828:                    el = el.evaluate(compressor);
/src/lib/compress.js-1829-                    if (a.length == 0 || el.length == 1) {
##############################################
/src/lib/compress.js-1891-        }
/src/lib/compress.js:1892:        return self.evaluate(compressor)[0];
/src/lib/compress.js-1893-    });
##############################################
/src/lib/compress.js-1995-        }
/src/lib/compress.js:1996:        return self.evaluate(compressor)[0];
/src/lib/compress.js-1997-    });
##############################################
/src/lib/compress.js-2107-            if (self.operator == "&&") {
/src/lib/compress.js:2108:                var ll = self.left.evaluate(compressor);
/src/lib/compress.js-2109-                if (ll.length > 1) {
##############################################
/src/lib/compress.js-2111-                        compressor.warn("Condition left of && always true [{file}:{line},{col}]", self.start);
/src/lib/compress.js:2112:                        var rr = self.right.evaluate(compressor);
/src/lib/compress.js-2113-                        return rr[0];
##############################################
/src/lib/compress.js-2120-            else if (self.operator == "||") {
/src/lib/compress.js:2121:                var ll = self.left.evaluate(compressor);
/src/lib/compress.js-2122-                if (ll.length > 1) {
##############################################
/src/lib/compress.js-2127-                        compressor.warn("Condition left of || always false [{file}:{line},{col}]", self.start);
/src/lib/compress.js:2128:                        var rr = self.right.evaluate(compressor);
/src/lib/compress.js-2129-                        return rr[0];
##############################################
/src/lib/compress.js-2135-          case "&&":
/src/lib/compress.js:2136:            var ll = self.left.evaluate(compressor);
/src/lib/compress.js:2137:            var rr = self.right.evaluate(compressor);
/src/lib/compress.js-2138-            if ((ll.length > 1 && !ll[1]) || (rr.length > 1 && !rr[1])) {
##############################################
/src/lib/compress.js-2155-          case "||":
/src/lib/compress.js:2156:            var ll = self.left.evaluate(compressor);
/src/lib/compress.js:2157:            var rr = self.right.evaluate(compressor);
/src/lib/compress.js-2158-            if ((ll.length > 1 && ll[1]) || (rr.length > 1 && rr[1])) {
##############################################
/src/lib/compress.js-2175-          case "+":
/src/lib/compress.js:2176:            var ll = self.left.evaluate(compressor);
/src/lib/compress.js:2177:            var rr = self.right.evaluate(compressor);
/src/lib/compress.js-2178-            if ((ll.length > 1 && ll[0] instanceof AST_String && ll[1]) ||
##############################################
/src/lib/compress.js-2203-        }
/src/lib/compress.js:2204:        if (compressor.option("evaluate")) {
/src/lib/compress.js-2205-            if (self.operator == "+") {
##############################################
/src/lib/compress.js-2273-        }
/src/lib/compress.js:2274:        return self.evaluate(compressor)[0];
/src/lib/compress.js-2275-    });
##############################################
/src/lib/compress.js-2349-        }
/src/lib/compress.js:2350:        var cond = self.condition.evaluate(compressor);
/src/lib/compress.js-2351-        if (cond.length > 1) {
##############################################
/src/lib/compress.js-2508-        }
/src/lib/compress.js:2509:        return self.evaluate(compressor)[0];
/src/lib/compress.js-2510-    });
