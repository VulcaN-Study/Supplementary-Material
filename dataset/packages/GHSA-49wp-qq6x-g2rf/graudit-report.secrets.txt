/src/index.js-48-  async function generateCsrfCookie (opts) {
/src/index.js:49:    let secret = isCookieSigned
/src/index.js-50-      ? this.unsignCookie(this.request.cookies[cookieKey] || '')
##############################################
/src/index.js-52-    if (!secret) {
/src/index.js:53:      secret = await tokens.secret()
/src/index.js-54-      this.setCookie(cookieKey, secret, Object.assign({}, cookieOpts, opts))
##############################################
/src/index.js-59-  async function generateCsrfSecureSession (opts) {
/src/index.js:60:    let secret = this.request.session.get(sessionKey)
/src/index.js-61-    if (!secret) {
/src/index.js:62:      secret = await tokens.secret()
/src/index.js-63-      this.request.session.set(sessionKey, secret)
##############################################
/src/index.js-71-  async function generateCsrfSession () {
/src/index.js:72:    let secret = this.request.session[sessionKey]
/src/index.js-73-    if (!secret) {
/src/index.js:74:      secret = await tokens.secret()
/src/index.js-75-      this.request.session[sessionKey] = secret
##############################################
/src/index.js-80-  function csrfProtection (req, reply, next) {
/src/index.js:81:    const secret = getSecret(req, reply)
/src/index.js-82-    if (!secret) {
