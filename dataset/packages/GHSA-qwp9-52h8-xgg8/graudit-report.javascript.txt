/src/demo/ts-demo/node_modules/vm-browserify/index.js-65-    if (!wEval && wExecScript) {
/src/demo/ts-demo/node_modules/vm-browserify/index.js:66:        // win.eval() magically appears when this is called in IE:
/src/demo/ts-demo/node_modules/vm-browserify/index.js-67-        wExecScript.call(win, 'null');
##############################################
/src/demo/ts-demo/node_modules/vm-browserify/index.js-104-Script.prototype.runInThisContext = function () {
/src/demo/ts-demo/node_modules/vm-browserify/index.js:105:    return eval(this.code); // maybe...
/src/demo/ts-demo/node_modules/vm-browserify/index.js-106-};
##############################################
/src/demo/ts-demo/node_modules/vm-browserify/example/run/bundle.js-403-    if (win.eval) {
/src/demo/ts-demo/node_modules/vm-browserify/example/run/bundle.js:404:        // chrome and ff can just .eval()
/src/demo/ts-demo/node_modules/vm-browserify/example/run/bundle.js:405:        var res = win.eval(this.code);
/src/demo/ts-demo/node_modules/vm-browserify/example/run/bundle.js-406-    }
##############################################
/src/demo/ts-demo/node_modules/vm-browserify/example/run/bundle.js-430-Script.prototype.runInThisContext = function () {
/src/demo/ts-demo/node_modules/vm-browserify/example/run/bundle.js:431:    return eval(this.code); // maybe...
/src/demo/ts-demo/node_modules/vm-browserify/example/run/bundle.js-432-};
##############################################
/src/demo/ts-demo/node_modules/evp_bytestokey/README.md-7-
/src/demo/ts-demo/node_modules/evp_bytestokey/README.md:8:The insecure [key derivation algorithm from OpenSSL.][1]
/src/demo/ts-demo/node_modules/evp_bytestokey/README.md-9-
##############################################
/src/demo/ts-demo/node_modules/evp_bytestokey/README.md-11-
/src/demo/ts-demo/node_modules/evp_bytestokey/README.md:12:MD5 is insecure.
/src/demo/ts-demo/node_modules/evp_bytestokey/README.md-13-
##############################################
/src/demo/ts-demo/node_modules/evp_bytestokey/package.json-49-  },
/src/demo/ts-demo/node_modules/evp_bytestokey/package.json:50:  "description": "The insecure key derivation algorithm from OpenSSL",
/src/demo/ts-demo/node_modules/evp_bytestokey/package.json-51-  "devDependencies": {
##############################################
/src/demo/ts-demo/node_modules/serialize-javascript/README.md-110-function deserialize(serializedJavascript){
/src/demo/ts-demo/node_modules/serialize-javascript/README.md:111:  return eval('(' + serializedJavascript + ')');
/src/demo/ts-demo/node_modules/serialize-javascript/README.md-112-}
##############################################
/src/demo/ts-demo/node_modules/webpack/lib/optimize/ModuleConcatenationPlugin.js-30-						// Because of variable renaming we can't use modules with eval.
/src/demo/ts-demo/node_modules/webpack/lib/optimize/ModuleConcatenationPlugin.js:31:						parser.state.module.buildMeta.moduleConcatenationBailout = "eval()";
/src/demo/ts-demo/node_modules/webpack/lib/optimize/ModuleConcatenationPlugin.js-32-					});
##############################################
/src/demo/ts-demo/node_modules/webpack/lib/EvalDevToolModuleTemplatePlugin.js-47-				const result = new RawSource(
/src/demo/ts-demo/node_modules/webpack/lib/EvalDevToolModuleTemplatePlugin.js:48:					`eval(${JSON.stringify(content + footer)});`
/src/demo/ts-demo/node_modules/webpack/lib/EvalDevToolModuleTemplatePlugin.js-49-				);
##############################################
/src/demo/ts-demo/node_modules/webpack/lib/EvalSourceMapDevToolModuleTemplatePlugin.js-97-				const evalSource = new RawSource(
/src/demo/ts-demo/node_modules/webpack/lib/EvalSourceMapDevToolModuleTemplatePlugin.js:98:					`eval(${JSON.stringify(content + footer)});`
/src/demo/ts-demo/node_modules/webpack/lib/EvalSourceMapDevToolModuleTemplatePlugin.js-99-				);
##############################################
/src/demo/ts-demo/node_modules/jquery/src/attributes/prop.js-65-				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
/src/demo/ts-demo/node_modules/jquery/src/attributes/prop.js:66:				// Use proper attribute retrieval(#12072)
/src/demo/ts-demo/node_modules/jquery/src/attributes/prop.js-67-				var tabindex = jQuery.find.attr( elem, "tabindex" );
##############################################
/src/demo/ts-demo/node_modules/jquery/dist/jquery.js-7923-				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
/src/demo/ts-demo/node_modules/jquery/dist/jquery.js:7924:				// Use proper attribute retrieval(#12072)
/src/demo/ts-demo/node_modules/jquery/dist/jquery.js-7925-				var tabindex = jQuery.find.attr( elem, "tabindex" );
##############################################
/src/demo/ts-demo/node_modules/browserify-des/node_modules/safe-buffer/README.md-540-We think there's a serious design issue with the `Buffer` API as it exists today. It
/src/demo/ts-demo/node_modules/browserify-des/node_modules/safe-buffer/README.md:541:promotes insecure software by putting high-risk functionality into a convenient API
/src/demo/ts-demo/node_modules/browserify-des/node_modules/safe-buffer/README.md-542-with friendly "developer ergonomics".
##############################################
/src/demo/ts-demo/node_modules/browserify-des/node_modules/safe-buffer/README.md-556-Well-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while
/src/demo/ts-demo/node_modules/browserify-des/node_modules/safe-buffer/README.md:557:older, insecure packages would magically become safe from this attack vector.
/src/demo/ts-demo/node_modules/browserify-des/node_modules/safe-buffer/README.md-558-
##############################################
/src/demo/ts-demo/node_modules/fsevents/node_modules/safer-buffer/Readme.md-140-  `SaferBuffer.alloc` instead.
/src/demo/ts-demo/node_modules/fsevents/node_modules/safer-buffer/Readme.md:141:* You are still open to accidentally using the insecure deprecated API â€” use a linter to catch that.
/src/demo/ts-demo/node_modules/fsevents/node_modules/safer-buffer/Readme.md-142-
##############################################
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md-49- - HTTP/HTTPS requests, with the usual verbs you would expect
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md:50: - All of Node's native TLS options, such as 'rejectUnauthorized' (see below)
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md-51- - Basic & Digest authentication with auto-detection
##############################################
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md-123-  follow_max         : 5,    // follow up to five redirects
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md:124:  rejectUnauthorized : true  // verify SSL certificate
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md-125-}
##############################################
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md-349- - `ciphers`            : A string describing the ciphers to use or exclude.
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md:350: - `rejectUnauthorized` : If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent.
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/README.md-351- - `secureProtocol`     : The SSL method to use, e.g. SSLv3_method to force SSL version 3.
##############################################
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/lib/needle.js-28-
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/lib/needle.js:29:var tls_options = 'agent pfx key passphrase cert ca ciphers rejectUnauthorized secureProtocol checkServerIdentity';
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/lib/needle.js-30-
##############################################
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/test/redirect_spec.js-67-    function send_request(opts, cb) {
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/test/redirect_spec.js:68:      opts.rejectUnauthorized = false;
/src/demo/ts-demo/node_modules/fsevents/node_modules/needle/test/redirect_spec.js-69-      // console.log(' -- sending request ' + url + ' -- redirect to ' + location);
##############################################
/src/demo/ts-demo/node_modules/fsevents/node_modules/safe-buffer/README.md-540-We think there's a serious design issue with the `Buffer` API as it exists today. It
/src/demo/ts-demo/node_modules/fsevents/node_modules/safe-buffer/README.md:541:promotes insecure software by putting high-risk functionality into a convenient API
/src/demo/ts-demo/node_modules/fsevents/node_modules/safe-buffer/README.md-542-with friendly "developer ergonomics".
##############################################
/src/demo/ts-demo/node_modules/fsevents/node_modules/safe-buffer/README.md-556-Well-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while
/src/demo/ts-demo/node_modules/fsevents/node_modules/safe-buffer/README.md:557:older, insecure packages would magically become safe from this attack vector.
/src/demo/ts-demo/node_modules/fsevents/node_modules/safe-buffer/README.md-558-
##############################################
/src/demo/ts-demo/node_modules/bluebird/js/browser/bluebird.js-5464-    return obj;
/src/demo/ts-demo/node_modules/bluebird/js/browser/bluebird.js:5465:    eval(obj);
/src/demo/ts-demo/node_modules/bluebird/js/browser/bluebird.js-5466-}
##############################################
/src/demo/ts-demo/node_modules/bluebird/js/browser/bluebird.core.js-3622-    return obj;
/src/demo/ts-demo/node_modules/bluebird/js/browser/bluebird.core.js:3623:    eval(obj);
/src/demo/ts-demo/node_modules/bluebird/js/browser/bluebird.core.js-3624-}
##############################################
/src/demo/ts-demo/node_modules/bluebird/js/release/util.js-204-    return obj;
/src/demo/ts-demo/node_modules/bluebird/js/release/util.js:205:    eval(obj);
/src/demo/ts-demo/node_modules/bluebird/js/release/util.js-206-}
##############################################
/src/demo/ts-demo/node_modules/public-encrypt/node_modules/safe-buffer/README.md-540-We think there's a serious design issue with the `Buffer` API as it exists today. It
/src/demo/ts-demo/node_modules/public-encrypt/node_modules/safe-buffer/README.md:541:promotes insecure software by putting high-risk functionality into a convenient API
/src/demo/ts-demo/node_modules/public-encrypt/node_modules/safe-buffer/README.md-542-with friendly "developer ergonomics".
##############################################
/src/demo/ts-demo/node_modules/public-encrypt/node_modules/safe-buffer/README.md-556-Well-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while
/src/demo/ts-demo/node_modules/public-encrypt/node_modules/safe-buffer/README.md:557:older, insecure packages would magically become safe from this attack vector.
/src/demo/ts-demo/node_modules/public-encrypt/node_modules/safe-buffer/README.md-558-
##############################################
/src/demo/ts-demo/node_modules/eslint-scope/lib/scope.js-182-         * can only decide at runtime which variable a reference refers to.
/src/demo/ts-demo/node_modules/eslint-scope/lib/scope.js:183:         * Moreover, if 'eval()' is used in a scope, it might introduce new
/src/demo/ts-demo/node_modules/eslint-scope/lib/scope.js-184-         * bindings in this or its parent scopes.
##############################################
/src/demo/ts-demo/node_modules/eslint-scope/lib/scope.js-236-         /**
/src/demo/ts-demo/node_modules/eslint-scope/lib/scope.js:237:         * Whether this is a scope that contains an 'eval()' invocation.
/src/demo/ts-demo/node_modules/eslint-scope/lib/scope.js-238-         * @member {boolean} Scope#directCallToEvalScope
##############################################
/src/demo/ts-demo/node_modules/eslint-scope/lib/index.js-120- * @param {boolean} [providedOptions.directive=false]- the directive flag
/src/demo/ts-demo/node_modules/eslint-scope/lib/index.js:121: * @param {boolean} [providedOptions.ignoreEval=false]- whether to check 'eval()' calls
/src/demo/ts-demo/node_modules/eslint-scope/lib/index.js-122- * @param {boolean} [providedOptions.nodejsScope=false]- whether the whole
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2349-            if (!compressor.option("evaluate")) return this;
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2350:            var val = this._eval(compressor, 1);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2351-            return !val || val instanceof RegExp || typeof val != "object" ? val : this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2386-                    }
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2387:                    var value = element._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2388-                    if (element === value) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2404-                    } else if (key instanceof AST_Node) {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2405:                        key = key._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2406-                        if (key === prop.key) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2411-                    if (prop.value instanceof AST_Function) continue;
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2412:                    val[key] = prop.value._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2413-                    if (val[key] === prop.value) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2429-            }
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2430:            e = e._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2431-            if (e === this.expression) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2446-        def(AST_Binary, function(compressor, depth) {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2447:            var left = this.left._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2448-            if (left === this.left) return this;
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2449:            var right = this.right._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2450-            if (right === this.right) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2484-        def(AST_Conditional, function(compressor, depth) {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2485:            var condition = this.condition._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2486-            if (condition === this.condition) return this;
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2487-            var node = condition ? this.consequent : this.alternative;
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2488:            var value = node._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2489-            return value === node ? this : value;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2495-            if (HOP(fixed, "_eval")) {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2496:                value = fixed._eval();
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2497-            } else {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2498-                this._eval = return_this;
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2499:                value = fixed._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2500-                delete this._eval;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2542-                if (key instanceof AST_Node) {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2543:                    key = key._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2544-                    if (key === this.property) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2551-                } else {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2552:                    val = exp._eval(compressor, depth + 1);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2553-                    if (!val || val === exp || !HOP(val, key)) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2563-                if (key instanceof AST_Node) {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2564:                    key = key._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2565-                    if (key === exp.property) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2572-                } else {
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2573:                    val = e._eval(compressor, depth + 1);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2574-                    if (val === e || !(val && native_fns[val.constructor.name] || return_false)(key)) return this;
##############################################
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2578-                    var arg = this.args[i];
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js:2579:                    var value = arg._eval(compressor, depth);
/src/demo/ts-demo/node_modules/uglify-es/lib/compress.js-2580-                    if (arg === value) return this;
##############################################
/src/demo/ts-demo/node_modules/safe-buffer/README.md-540-We think there's a serious design issue with the `Buffer` API as it exists today. It
/src/demo/ts-demo/node_modules/safe-buffer/README.md:541:promotes insecure software by putting high-risk functionality into a convenient API
/src/demo/ts-demo/node_modules/safe-buffer/README.md-542-with friendly "developer ergonomics".
##############################################
/src/demo/ts-demo/node_modules/safe-buffer/README.md-556-Well-maintained, popular packages would be updated to use `Buffer.alloc` quickly, while
/src/demo/ts-demo/node_modules/safe-buffer/README.md:557:older, insecure packages would magically become safe from this attack vector.
/src/demo/ts-demo/node_modules/safe-buffer/README.md-558-
##############################################
/src/demo/ts-demo/node_modules/http-proxy/coverage/lcov-report/lib/http-proxy/common.js.html-601-<span class="cstat-no" title="statement not covered" >  if (isSSL.test(options[forward || 'target'].protocol)) {</span>
/src/demo/ts-demo/node_modules/http-proxy/coverage/lcov-report/lib/http-proxy/common.js.html:602:<span class="cstat-no" title="statement not covered" >    outgoing.rejectUnauthorized = (typeof options.secure === "undefined") ? true : options.secure;</span>
/src/demo/ts-demo/node_modules/http-proxy/coverage/lcov-report/lib/http-proxy/common.js.html-603-  }
##############################################
/src/demo/ts-demo/node_modules/http-proxy/coverage/lcov-report/http-proxy/common.js.html-601-<span class="cstat-no" title="statement not covered" >  if (isSSL.test(options[forward || 'target'].protocol)) {</span>
/src/demo/ts-demo/node_modules/http-proxy/coverage/lcov-report/http-proxy/common.js.html:602:<span class="cstat-no" title="statement not covered" >    outgoing.rejectUnauthorized = (typeof options.secure === "undefined") ? true : options.secure;</span>
/src/demo/ts-demo/node_modules/http-proxy/coverage/lcov-report/http-proxy/common.js.html-603-  }
##############################################
/src/demo/ts-demo/node_modules/http-proxy/lib/http-proxy/common.js-57-  if (isSSL.test(options[forward || 'target'].protocol)) {
/src/demo/ts-demo/node_modules/http-proxy/lib/http-proxy/common.js:58:    outgoing.rejectUnauthorized = (typeof options.secure === "undefined") ? true : options.secure;
/src/demo/ts-demo/node_modules/http-proxy/lib/http-proxy/common.js-59-  }
##############################################
/src/demo/ts-demo/node_modules/typescript/lib/lib.es5.d.ts-31-  */
/src/demo/ts-demo/node_modules/typescript/lib/lib.es5.d.ts:32:declare function eval(x: string): any;
/src/demo/ts-demo/node_modules/typescript/lib/lib.es5.d.ts-33-
##############################################
/src/CHANGELOG-136-30-10-2018 (v2.2.0)
/src/CHANGELOG:137:  * update insecure dependencies (mainly Lodash v4.17.11)
/src/CHANGELOG-138-  * use Karma+Istanbul to run tests
