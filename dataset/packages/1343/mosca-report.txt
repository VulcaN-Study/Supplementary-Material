<report_mosca>
 <Path>/src/angular.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 3508 -      win.setTimeout(action);

 Line: 3524 -      window.setTimeout(fn);

 Line: 6539 -        setTimeout = window.setTimeout,

 Line: 6795 -     * Executes a fn asynchronously via `setTimeout(fn, delay)`.

 Line: 6797 -     * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using

 Line: 6798 -     * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed

 Line: 6809 -      timeoutId = setTimeout(function() {

 Line: 14057 -      var setIntervalFn = function(tick, delay, deferred) {

 Line: 14058 -        var id = $window.setInterval(tick, delay);

 Line: 14072 -       * AngularJS's wrapper for `window.setInterval`. The `fn` function is executed every `delay`

 Line: 14193 -      var interval = $$intervalFactory(setIntervalFn, clearIntervalFn);

 Line: 14234 -      return function intervalFactory(setIntervalFn, clearIntervalFn) {

 Line: 14269 -          promise.$$intervalId = setIntervalFn(tick, delay, deferred, skipApply);

 Line: 17621 -   *       setTimeout(function() {

 Line: 17659 -   *     setTimeout(function() {

 Line: 19450 -         * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).

 Line: 21553 -       * AngularJS's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch

 Line: 28789 -                  eval('1+2'); // eslint-disable-line no-eval

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/angular.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1541 -   * Parses an escaped url query string into key-value pairs.

 Line: 1608 -   * This method is intended for encoding *key* or *value* parts of query component. We need a custom

 Line: 1611 -   *    query         = *( pchar / "/" / "?" )

 Line: 4433 -   * Allows the user to query if the particular service exists.

 Line: 4435 -   * @param {string} name Name of the service to query.

 Line: 11860 -        //WILL TAKE YEARS AWAY FROM YOUR LIFE.

 Line: 12155 -     * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the

 Line: 13063 -       * Shortcut method to perform `DELETE` request.

 Line: 13100 -       * Provide additional query parameters via `params` property of the `config` parameter, rather than

 Line: 13104 -       * is passed as a query parameter in the request. You must specify the name of this parameter by

 Line: 13385 -          // Throw if the url contains more than one `?` query indicator

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/angular.min.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 37 -  0,e=b.length;c<e;c++)if(w(d=x.data(a,b[c])))return d;a=a.parentNode||11===a.nodeType&&a.host}}function kd(a){for(yb(a,!0);a.firstChild;)a.removeChild(a.firstChild)}function Fb(a,b){b||yb(a);var d=a.parentNode;d&&d.removeChild(a)}function qg(a,b){b=b||C;if("complete"===b.document.readyState)b.setTimeout(a);else x(b).on("load",a)}function fd(a){function b(){C.document.removeEventListener("DOMContentLoaded",b);C.removeEventListener("load",b);a()}"complete"===C.document.readyState?C.setTimeout(a):(C.document.addEventListener("DOMContentLoaded",

 Line: 48 -  (a=a.split(" "));var b=T();r(a,function(a){a.length&&(b[a]=!0)});return b}function ra(a){return D(a)?a:{}}function Ag(a,b,d,c,e){function f(){qa=null;k()}function g(){t=y();t=z(t)?null:t;va(t,P)&&(t=P);N=P=t}function k(){var a=N;g();if(v!==h.url()||a!==t)v=h.url(),N=t,r(J,function(a){a(h.url(),t)})}var h=this,l=a.location,m=a.history,p=a.setTimeout,n=a.clearTimeout,s={},G=e(d);h.isMock=!1;h.$$completeOutstandingRequest=G.completeTask;h.$$incOutstandingRequestCount=G.incTaskCount;h.notifyWhenNoOutstandingRequests=

 Line: 115 -  b){var c;return a.$watchGroup(P,function(d,e){var f=x(d);b.call(this,f,d!==e?c:f,a);c=f})}})}}var l=a.length,m=b.length,p=new RegExp(a.replace(/./g,f),"g"),n=new RegExp(b.replace(/./g,f),"g");h.startSymbol=function(){return a};h.endSymbol=function(){return b};return h}]}function Lf(){this.$get=["$$intervalFactory","$window",function(a,b){var d={},c=function(a){b.clearInterval(a);delete d[a]},e=a(function(a,c,e){a=b.setInterval(a,c);d[a]=e;return a},c);e.cancel=function(a){if(!a)return!1;if(!a.hasOwnProperty("$$intervalId"))throw Lg("badprom");

</Result>
</report_mosca>

