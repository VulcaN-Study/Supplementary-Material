/src/lib/ParseServerRESTController.js-59-    const config = Config.get(applicationId);
/src/lib/ParseServerRESTController.js:60:    const serverURL = URL.parse(config.serverURL);
/src/lib/ParseServerRESTController.js-61-
##############################################
/src/lib/cloud-code/HTTPResponse.js-45-        try {
/src/lib/cloud-code/HTTPResponse.js:46:          _data = JSON.parse(getText());
/src/lib/cloud-code/HTTPResponse.js-47-        } catch (e) {
##############################################
/src/lib/cloud-code/httpRequest.js-121-  } else if (typeof options.params === 'string') {
/src/lib/cloud-code/httpRequest.js:122:    options.qs = _querystring.default.parse(options.params);
/src/lib/cloud-code/httpRequest.js-123-  }
##############################################
/src/lib/cloud-code/httpRequest.js-149-  if (url.search) {
/src/lib/cloud-code/httpRequest.js:150:    options.qs = Object.assign({}, options.qs, _querystring.default.parse(url.query));
/src/lib/cloud-code/httpRequest.js-151-  }
##############################################
/src/lib/batch.js-19-  if (typeof URL === 'string') {
/src/lib/batch.js:20:    return url.parse(URL);
/src/lib/batch.js-21-  }
##############################################
/src/lib/Routers/PublicAPIRouter.js-112-
/src/lib/Routers/PublicAPIRouter.js:113:      _fs.default.readFile(_path.default.resolve(views, 'choose_password'), 'utf-8', (err, data) => {
/src/lib/Routers/PublicAPIRouter.js-114-        if (err) {
##############################################
/src/lib/Routers/ClassesRouter.js-38-    if (typeof body.where === 'string') {
/src/lib/Routers/ClassesRouter.js:39:      body.where = JSON.parse(body.where);
/src/lib/Routers/ClassesRouter.js-40-    }
##############################################
/src/lib/Routers/ClassesRouter.js-124-      try {
/src/lib/Routers/ClassesRouter.js:125:        json[key] = JSON.parse(value);
/src/lib/Routers/ClassesRouter.js-126-      } catch (e) {
##############################################
/src/lib/Routers/AudiencesRouter.js-29-      response.results.forEach(item => {
/src/lib/Routers/AudiencesRouter.js:30:        item.query = JSON.parse(item.query);
/src/lib/Routers/AudiencesRouter.js-31-      });
##############################################
/src/lib/Routers/AudiencesRouter.js-39-    return super.handleGet(req).then(data => {
/src/lib/Routers/AudiencesRouter.js:40:      data.response.query = JSON.parse(data.response.query);
/src/lib/Routers/AudiencesRouter.js-41-      return data;
##############################################
/src/lib/Routers/AggregateRouter.js-37-    if (typeof body.where === 'string') {
/src/lib/Routers/AggregateRouter.js:38:      body.where = JSON.parse(body.where);
/src/lib/Routers/AggregateRouter.js-39-    }
##############################################
/src/lib/LiveQuery/ParseLiveQueryServer.js-95-      try {
/src/lib/LiveQuery/ParseLiveQueryServer.js:96:        message = JSON.parse(messageStr);
/src/lib/LiveQuery/ParseLiveQueryServer.js-97-      } catch (e) {
##############################################
/src/lib/LiveQuery/ParseLiveQueryServer.js-305-        try {
/src/lib/LiveQuery/ParseLiveQueryServer.js:306:          request = JSON.parse(request);
/src/lib/LiveQuery/ParseLiveQueryServer.js-307-        } catch (e) {
##############################################
/src/lib/Controllers/UserController.js-170-      } else {
/src/lib/Controllers/UserController.js:171:        this.adapter.sendMail(this.defaultVerificationEmail(options));
/src/lib/Controllers/UserController.js-172-      }
##############################################
/src/lib/Controllers/UserController.js-242-      } else {
/src/lib/Controllers/UserController.js:243:        this.adapter.sendMail(this.defaultResetPasswordEmail(options));
/src/lib/Controllers/UserController.js-244-      }
##############################################
/src/lib/Controllers/index.js-267-  try {
/src/lib/Controllers/index.js:268:    const parsedURI = _url.default.parse(databaseURI);
/src/lib/Controllers/index.js-269-
##############################################
/src/lib/Controllers/LoggerController.js-58-  maskSensitiveUrl(urlString) {
/src/lib/Controllers/LoggerController.js:59:    const urlObj = _url.default.parse(urlString, true);
/src/lib/Controllers/LoggerController.js-60-
##############################################
/src/lib/Controllers/LoggerController.js-252-    options = LoggerController.parseOptions(options);
/src/lib/Controllers/LoggerController.js:253:    return this.adapter.query(options);
/src/lib/Controllers/LoggerController.js-254-  }
##############################################
/src/lib/Controllers/HooksController.js-262-          try {
/src/lib/Controllers/HooksController.js:263:            body = JSON.parse(body);
/src/lib/Controllers/HooksController.js-264-          } catch (e) {
##############################################
/src/lib/Adapters/Storage/Postgres/PostgresConfigParser.js-6-  const databaseOptions = {};
/src/lib/Adapters/Storage/Postgres/PostgresConfigParser.js:7:  const parsedURI = url.parse(uri);
/src/lib/Adapters/Storage/Postgres/PostgresConfigParser.js-8-  const queryParams = parseQueryParams(parsedURI.query);
##############################################
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-37-const storageAdapterAllCollections = mongoAdapter => {
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js:38:  return mongoAdapter.connect().then(() => mongoAdapter.database.collections()).then(collections => {
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-39-    return collections.filter(collection => {
##############################################
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-131-    const encodedUri = (0, _mongodbUrl.format)((0, _mongodbUrl.parse)(this._uri));
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js:132:    this.connectionPromise = MongoClient.connect(encodedUri, this._mongoOptions).then(client => {
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-133-      // Starting mongoDB 3.0, the MongoClient.connect don't return a DB anymore but a client
##############################################
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-182-  _adaptiveCollection(name) {
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js:183:    return this.connect().then(() => this.database.collection(this._collectionPrefix + name)).then(rawCollection => new _MongoCollection.default(rawCollection)).catch(err => this.handleError(err));
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-184-  }
##############################################
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-186-  _schemaCollection() {
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js:187:    return this.connect().then(() => this._adaptiveCollection(MongoSchemaCollectionName)).then(collection => new _MongoSchemaCollection.default(collection));
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-188-  }
##############################################
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-190-  classExists(name) {
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js:191:    return this.connect().then(() => {
/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js-192-      return this.database.listCollections({
##############################################
/src/lib/Adapters/Files/GridFSBucketAdapter.js-35-    if (!this._connectionPromise) {
/src/lib/Adapters/Files/GridFSBucketAdapter.js:36:      this._connectionPromise = _mongodb.MongoClient.connect(this._databaseURI, this._mongoOptions).then(client => client.db(client.s.options.dbName));
/src/lib/Adapters/Files/GridFSBucketAdapter.js-37-    }
##############################################
/src/lib/Adapters/Files/GridStoreAdapter.js-36-    if (!this._connectionPromise) {
/src/lib/Adapters/Files/GridStoreAdapter.js:37:      this._connectionPromise = _mongodb.MongoClient.connect(this._databaseURI, this._mongoOptions).then(client => client.db(client.s.options.dbName));
/src/lib/Adapters/Files/GridStoreAdapter.js-38-    }
##############################################
/src/lib/Adapters/Files/GridStoreAdapter.js-47-      const gridStore = new _mongodb.GridStore(database, filename, 'w');
/src/lib/Adapters/Files/GridStoreAdapter.js:48:      return gridStore.open();
/src/lib/Adapters/Files/GridStoreAdapter.js-49-    }).then(gridStore => {
##############################################
/src/lib/Adapters/Files/GridStoreAdapter.js-58-      const gridStore = new _mongodb.GridStore(database, filename, 'r');
/src/lib/Adapters/Files/GridStoreAdapter.js:59:      return gridStore.open();
/src/lib/Adapters/Files/GridStoreAdapter.js-60-    }).then(gridStore => {
/src/lib/Adapters/Files/GridStoreAdapter.js:61:      return gridStore.unlink();
/src/lib/Adapters/Files/GridStoreAdapter.js-62-    }).then(gridStore => {
##############################################
/src/lib/Adapters/Files/GridStoreAdapter.js-70-        const gridStore = new _mongodb.GridStore(database, filename, 'r');
/src/lib/Adapters/Files/GridStoreAdapter.js:71:        return gridStore.open();
/src/lib/Adapters/Files/GridStoreAdapter.js-72-      });
##############################################
/src/lib/Adapters/Files/GridStoreAdapter.js-85-        const gridStore = new _mongodb.GridStore(database, filename, 'r');
/src/lib/Adapters/Files/GridStoreAdapter.js:86:        return gridStore.open();
/src/lib/Adapters/Files/GridStoreAdapter.js-87-      });
##############################################
/src/lib/Adapters/Auth/oauth2.js-115-
/src/lib/Adapters/Auth/oauth2.js:116:  const parsedUrl = url.parse(options.tokenIntrospectionEndpointUrl);
/src/lib/Adapters/Auth/oauth2.js-117-  const postData = querystring.stringify({
##############################################
/src/lib/Adapters/Auth/qq.js-39-  data = data.substring(starPos + 1, endPos - 1);
/src/lib/Adapters/Auth/qq.js:40:  return JSON.parse(data);
/src/lib/Adapters/Auth/qq.js-41-}
##############################################
/src/lib/Adapters/Auth/OAuth1Client.js-30-      res.on('end', function () {
/src/lib/Adapters/Auth/OAuth1Client.js:31:        data = JSON.parse(data);
/src/lib/Adapters/Auth/OAuth1Client.js-32-        resolve(data);
##############################################
/src/lib/Adapters/Auth/httpsRequest.js-16-      try {
/src/lib/Adapters/Auth/httpsRequest.js:17:        data = JSON.parse(data);
/src/lib/Adapters/Auth/httpsRequest.js-18-      } catch (e) {
##############################################
/src/lib/Adapters/Cache/RedisCacheAdapter/index.js-42-
/src/lib/Adapters/Cache/RedisCacheAdapter/index.js:43:        resolve(JSON.parse(res));
/src/lib/Adapters/Cache/RedisCacheAdapter/index.js-44-      });
##############################################
/src/lib/Adapters/Logger/WinstonLoggerAdapter.js-52-    return new Promise((resolve, reject) => {
/src/lib/Adapters/Logger/WinstonLoggerAdapter.js:53:      _WinstonLogger.logger.query(queryOptions, (err, res) => {
/src/lib/Adapters/Logger/WinstonLoggerAdapter.js-54-        if (err) {
##############################################
/src/lib/cli/utils/runner.js-56-
/src/lib/cli/utils/runner.js:57:  _commander.default.parse(process.argv, process.env);
/src/lib/cli/utils/runner.js-58-
##############################################
/src/lib/vendor/mongodbUrl.js-69-  var u = new Url();
/src/lib/vendor/mongodbUrl.js:70:  u.parse(url, parseQueryString, slashesDenoteHost);
/src/lib/vendor/mongodbUrl.js-71-  return u;
##############################################
/src/lib/vendor/mongodbUrl.js-181-        if (parseQueryString) {
/src/lib/vendor/mongodbUrl.js:182:          this.query = querystring.parse(this.search.slice(1));
/src/lib/vendor/mongodbUrl.js-183-        } else {
##############################################
/src/lib/vendor/mongodbUrl.js-400-    if (parseQueryString) {
/src/lib/vendor/mongodbUrl.js:401:      this.query = querystring.parse(this.query);
/src/lib/vendor/mongodbUrl.js-402-    }
##############################################
/src/lib/vendor/mongodbUrl.js-715-    var rel = new Url();
/src/lib/vendor/mongodbUrl.js:716:    rel.parse(relative, false, true);
/src/lib/vendor/mongodbUrl.js-717-    relative = rel;
##############################################
/src/lib/Options/parsers.js-37-
/src/lib/Options/parsers.js:38:  return JSON.parse(opt);
/src/lib/Options/parsers.js-39-}
##############################################
/src/lib/Options/parsers.js-56-  try {
/src/lib/Options/parsers.js:57:    return JSON.parse(opt);
/src/lib/Options/parsers.js-58-  } catch (e) {
##############################################
/src/lib/ParseServer.js-321-      var app = express();
/src/lib/ParseServer.js:322:      httpServer = require('http').createServer(app);
/src/lib/ParseServer.js-323-      httpServer.listen(config.port);
##############################################
/src/lib/Push/PushWorker.js-55-      subscriber.on('message', (channel, messageStr) => {
/src/lib/Push/PushWorker.js:56:        const workItem = JSON.parse(messageStr);
/src/lib/Push/PushWorker.js-57-        this.run(workItem);
##############################################
/src/lib/middlewares.js-72-      // upload that actually is a JSON body. So try to parse it.
/src/lib/middlewares.js:73:      req.body = JSON.parse(req.body);
/src/lib/middlewares.js-74-      fileViaJSON = true;
