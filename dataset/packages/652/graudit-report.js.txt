/src/lib/loaders/config-file.js-26-  try {
/src/lib/loaders/config-file.js:27:    configObject = JSON.parse(filename);
/src/lib/loaders/config-file.js-28-  } catch (e) {
##############################################
/src/lib/loaders/config-file.js-50-    try {
/src/lib/loaders/config-file.js:51:      config = JSON.parse(fs.readFileSync(path.resolve(filename)));
/src/lib/loaders/config-file.js-52-      config = config.hosting ? config.hosting : config;
##############################################
/src/lib/middleware/clean-urls.js-20-function redirectAsCleanUrl(req, res) {
/src/lib/middleware/clean-urls.js:21:  var pathname = url.parse(req.url).pathname;
/src/lib/middleware/clean-urls.js-22-  var query = qs.stringify(req.query);
##############################################
/src/lib/middleware/clean-urls.js-46-
/src/lib/middleware/clean-urls.js:47:    var pathname = url.parse(req.url).pathname;
/src/lib/middleware/clean-urls.js-48-    if (pathname === '/') {
##############################################
/src/lib/middleware/rewrites.js-31-
/src/lib/middleware/rewrites.js:32:    var pathname = urlParser.parse(req.url).pathname;
/src/lib/middleware/rewrites.js-33-    var match = rewrites(slasher(pathname));
##############################################
/src/lib/middleware/files.js-16-
/src/lib/middleware/files.js:17:    var parsedUrl = url.parse(req.url);
/src/lib/middleware/files.js-18-    var pathname = pathutils.normalizeMultiSlashes(parsedUrl.pathname);
##############################################
/src/lib/middleware/headers.js-54-    var headers = matcher(normalizedConfigHeaders(spec, config));
/src/lib/middleware/headers.js:55:    var pathname = urlParser.parse(req.url).pathname;
/src/lib/middleware/headers.js-56-    var matches = headers(slasher(pathname));
##############################################
/src/lib/providers/fs.js-44-      // the file you want to get the hash
/src/lib/providers/fs.js:45:      var fd = fs.createReadStream(pathname);
/src/lib/providers/fs.js-46-      var hash = crypto.createHash('md5');
##############################################
/src/lib/providers/fs.js-87-      result.etag = etag;
/src/lib/providers/fs.js:88:      result.stream = fs.createReadStream(foundPath);
/src/lib/providers/fs.js-89-      return result;
##############################################
/src/lib/cli/index.js-21-try {
/src/lib/cli/index.js:22:  env = JSON.parse(fs.readFileSync(path.resolve(ENV_FILENAME), 'utf8'));
/src/lib/cli/index.js-23-} catch (e) {
##############################################
/src/test/unit/server.spec.js-21-// supertest runner uses the connect app object in
/src/test/unit/server.spec.js:22:// a bare http.createServer() method. This
/src/test/unit/server.spec.js-23-// doesn't work with how we are loading services.
