/src/test/backbone/backbone.js-252-    if (options.collection) this.collection = options.collection;
/src/test/backbone/backbone.js:253:    if (options.parse) attrs = this.parse(attrs, options) || {};
/src/test/backbone/backbone.js-254-    options._attrs || (options._attrs = attrs);
##############################################
/src/test/backbone/backbone.js-435-      options.success = function(resp) {
/src/test/backbone/backbone.js:436:        if (!model.set(model.parse(resp, options), options)) return false;
/src/test/backbone/backbone.js-437-        if (success) success(model, resp, options);
##############################################
/src/test/backbone/backbone.js-481-        model.attributes = attributes;
/src/test/backbone/backbone.js:482:        var serverAttrs = model.parse(resp, options);
/src/test/backbone/backbone.js-483-        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
##############################################
/src/test/backbone/backbone.js-666-      options = _.defaults({}, options, setOptions);
/src/test/backbone/backbone.js:667:      if (options.parse) models = this.parse(models, options);
/src/test/backbone/backbone.js-668-      if (!_.isArray(models)) models = models ? [models] : [];
##############################################
/src/test/backbone/backbone.js-1487-          // want this.
/src/test/backbone/backbone.js:1488:          if(!options.replace) this.iframe.document.open().close();
/src/test/backbone/backbone.js-1489-          this._updateHash(this.iframe.location, fragment, options.replace);
##############################################
/src/test/backbone/test/sync.js-47-    equal(this.ajaxSettings.dataType, 'json');
/src/test/backbone/test/sync.js:48:    var data = JSON.parse(this.ajaxSettings.data);
/src/test/backbone/test/sync.js-49-    equal(data.title, 'The Tempest');
##############################################
/src/test/backbone/test/sync.js-58-    equal(this.ajaxSettings.dataType, 'json');
/src/test/backbone/test/sync.js:59:    var data = JSON.parse(this.ajaxSettings.data);
/src/test/backbone/test/sync.js-60-    equal(data.id, '1-the-tempest');
##############################################
/src/test/backbone/test/sync.js-74-    equal(this.ajaxSettings.data._method, 'PUT');
/src/test/backbone/test/sync.js:75:    var data = JSON.parse(this.ajaxSettings.data.model);
/src/test/backbone/test/sync.js-76-    equal(data.id, '2-the-tempest');
##############################################
/src/test/backbone/test/sync.js-87-    equal(this.ajaxSettings.contentType, 'application/json');
/src/test/backbone/test/sync.js:88:    var data = JSON.parse(this.ajaxSettings.data);
/src/test/backbone/test/sync.js-89-    equal(data.id, '2-the-tempest');
##############################################
/src/test/backbone/test/sync.js-100-    equal(this.ajaxSettings.contentType, 'application/x-www-form-urlencoded');
/src/test/backbone/test/sync.js:101:    var data = JSON.parse(this.ajaxSettings.data.model);
/src/test/backbone/test/sync.js-102-    equal(data.id, '2-the-tempest');
##############################################
/src/test/backbone/test/vendor/qunit.js-916-		if ( !result ) {
/src/test/backbone/test/vendor/qunit.js:917:			expected = escapeText( QUnit.jsDump.parse(expected) );
/src/test/backbone/test/vendor/qunit.js:918:			actual = escapeText( QUnit.jsDump.parse(actual) );
/src/test/backbone/test/vendor/qunit.js-919-			output += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + expected + "</pre></td></tr>";
##############################################
/src/test/backbone/test/vendor/qunit.js-1784-		while ( i-- ) {
/src/test/backbone/test/vendor/qunit.js:1785:			ret[i] = this.parse( arr[i] , undefined , stack);
/src/test/backbone/test/vendor/qunit.js-1786-		}
##############################################
/src/test/backbone/test/vendor/qunit.js-1893-
/src/test/backbone/test/vendor/qunit.js:1894:					ret = [ ret, QUnit.jsDump.parse( fn, "functionArgs" ), "){" ].join( "" );
/src/test/backbone/test/vendor/qunit.js:1895:					return join( ret, QUnit.jsDump.parse(fn,"functionCode" ), "}" );
/src/test/backbone/test/vendor/qunit.js-1896-				},
##############################################
/src/test/backbone/test/vendor/qunit.js-1910-						val = map[ key ];
/src/test/backbone/test/vendor/qunit.js:1911:						ret.push( QUnit.jsDump.parse( key, "key" ) + ": " + QUnit.jsDump.parse( val, undefined, stack ) );
/src/test/backbone/test/vendor/qunit.js-1912-					}
##############################################
/src/test/backbone/test/vendor/qunit.js-1929-							if ( val && val !== "inherit" ) {
/src/test/backbone/test/vendor/qunit.js:1930:								ret += " " + attrs[i].nodeName + "=" + QUnit.jsDump.parse( val, "attribute" );
/src/test/backbone/test/vendor/qunit.js-1931-							}
##############################################
/src/test/backbone/test/vendor/jquery.js-513-		if ( window.JSON && window.JSON.parse ) {
/src/test/backbone/test/vendor/jquery.js:514:			return window.JSON.parse( data );
/src/test/backbone/test/vendor/jquery.js-515-		}
##############################################
/src/test/backbone/test/vendor/jquery.js-8397-					if ( s.username ) {
/src/test/backbone/test/vendor/jquery.js:8398:						xhr.open( s.type, s.url, s.async, s.username, s.password );
/src/test/backbone/test/vendor/jquery.js-8399-					} else {
/src/test/backbone/test/vendor/jquery.js:8400:						xhr.open( s.type, s.url, s.async );
/src/test/backbone/test/vendor/jquery.js-8401-					}
##############################################
/src/test/backbone/test/vendor/runner.js-53-
/src/test/backbone/test/vendor/runner.js:54:	page.open(url, function(status) {
/src/test/backbone/test/vendor/runner.js-55-		if (status !== 'success') {
##############################################
/src/test/backbone/test/vendor/json2.js-102-
/src/test/backbone/test/vendor/json2.js:103:        JSON.parse(text, reviver)
/src/test/backbone/test/vendor/json2.js-104-            This method parses a JSON text to produce an object or array.
##############################################
/src/test/backbone/test/vendor/json2.js-117-
/src/test/backbone/test/vendor/json2.js:118:            myData = JSON.parse(text, function (key, value) {
/src/test/backbone/test/vendor/json2.js-119-                var a;
##############################################
/src/test/backbone/test/vendor/json2.js-130-
/src/test/backbone/test/vendor/json2.js:131:            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
/src/test/backbone/test/vendor/json2.js-132-                var d;
##############################################
/src/test/backbone/test/vendor/json2.js-466-
/src/test/backbone/test/vendor/json2.js:467:                j = eval('(' + text + ')');
/src/test/backbone/test/vendor/json2.js-468-
##############################################
/src/test/backbone/test/vendor/zepto-0.6.js-578-          if (mime == 'application/json') {
/src/test/backbone/test/vendor/zepto-0.6.js:579:            try { result = JSON.parse(xhr.responseText); }
/src/test/backbone/test/vendor/zepto-0.6.js-580-            catch (e) { error = e; }
##############################################
/src/test/backbone/test/vendor/zepto-0.6.js-592-
/src/test/backbone/test/vendor/zepto-0.6.js:593:    xhr.open(settings.type, settings.url, true);
/src/test/backbone/test/vendor/zepto-0.6.js-594-    if (settings.beforeSend(xhr, settings) === false) {
##############################################
/src/test/backbone/test/model.js-743-    model.save({x: 3}, {wait: true});
/src/test/backbone/test/model.js:744:    deepEqual(JSON.parse(this.ajaxSettings.data), {x: 3, y: 2});
/src/test/backbone/test/model.js-745-    equal(model.get('x'), 1);
##############################################
/src/test/backbone-1.1/backbone.js-251-    if (options.collection) this.collection = options.collection;
/src/test/backbone-1.1/backbone.js:252:    if (options.parse) attrs = this.parse(attrs, options) || {};
/src/test/backbone-1.1/backbone.js-253-    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
##############################################
/src/test/backbone-1.1/backbone.js-431-      options.success = function(resp) {
/src/test/backbone-1.1/backbone.js:432:        if (!model.set(model.parse(resp, options), options)) return false;
/src/test/backbone-1.1/backbone.js-433-        if (success) success(model, resp, options);
##############################################
/src/test/backbone-1.1/backbone.js-477-        model.attributes = attributes;
/src/test/backbone-1.1/backbone.js:478:        var serverAttrs = model.parse(resp, options);
/src/test/backbone-1.1/backbone.js-479-        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
##############################################
/src/test/backbone-1.1/backbone.js-663-      options = _.defaults({}, options, setOptions);
/src/test/backbone-1.1/backbone.js:664:      if (options.parse) models = this.parse(models, options);
/src/test/backbone-1.1/backbone.js-665-      var singular = !_.isArray(models);
##############################################
/src/test/backbone-1.1/backbone.js-691-            attrs = attrs === model ? model.attributes : attrs;
/src/test/backbone-1.1/backbone.js:692:            if (options.parse) attrs = existing.parse(attrs, options);
/src/test/backbone-1.1/backbone.js-693-            existing.set(attrs, options);
##############################################
/src/test/backbone-1.1/backbone.js-1495-          // want this.
/src/test/backbone-1.1/backbone.js:1496:          if(!options.replace) this.iframe.document.open().close();
/src/test/backbone-1.1/backbone.js-1497-          this._updateHash(this.iframe.location, fragment, options.replace);
##############################################
/src/test/backbone-1.1/test/collection.js-1268-    equal(job.items.get(2).subItems.get(3).get('subName'), 'Three');
/src/test/backbone-1.1/test/collection.js:1269:    job.set(job.parse(newData, {parse: true}));
/src/test/backbone-1.1/test/collection.js-1270-    equal(job.get('name'), 'NewJobName');
##############################################
/src/test/backbone-1.1/test/sync.js-45-    equal(this.ajaxSettings.dataType, 'json');
/src/test/backbone-1.1/test/sync.js:46:    var data = JSON.parse(this.ajaxSettings.data);
/src/test/backbone-1.1/test/sync.js-47-    equal(data.title, 'The Tempest');
##############################################
/src/test/backbone-1.1/test/sync.js-56-    equal(this.ajaxSettings.dataType, 'json');
/src/test/backbone-1.1/test/sync.js:57:    var data = JSON.parse(this.ajaxSettings.data);
/src/test/backbone-1.1/test/sync.js-58-    equal(data.id, '1-the-tempest');
##############################################
/src/test/backbone-1.1/test/sync.js-72-    equal(this.ajaxSettings.data._method, 'PUT');
/src/test/backbone-1.1/test/sync.js:73:    var data = JSON.parse(this.ajaxSettings.data.model);
/src/test/backbone-1.1/test/sync.js-74-    equal(data.id, '2-the-tempest');
##############################################
/src/test/backbone-1.1/test/sync.js-85-    equal(this.ajaxSettings.contentType, 'application/json');
/src/test/backbone-1.1/test/sync.js:86:    var data = JSON.parse(this.ajaxSettings.data);
/src/test/backbone-1.1/test/sync.js-87-    equal(data.id, '2-the-tempest');
##############################################
/src/test/backbone-1.1/test/sync.js-98-    equal(this.ajaxSettings.contentType, 'application/x-www-form-urlencoded');
/src/test/backbone-1.1/test/sync.js:99:    var data = JSON.parse(this.ajaxSettings.data.model);
/src/test/backbone-1.1/test/sync.js-100-    equal(data.id, '2-the-tempest');
##############################################
/src/test/backbone-1.1/test/model.js-742-    model.save({x: 3}, {wait: true});
/src/test/backbone-1.1/test/model.js:743:    deepEqual(JSON.parse(this.ajaxSettings.data), {x: 3, y: 2});
/src/test/backbone-1.1/test/model.js-744-    equal(model.get('x'), 1);
##############################################
/src/backbone.queryparams-1.1-shim.js-51-				// want this.
/src/backbone.queryparams-1.1-shim.js:52:				if (!options.replace) this.iframe.document.open().close();
/src/backbone.queryparams-1.1-shim.js-53-				this._updateHash(this.iframe.location, fragment, options.replace);
