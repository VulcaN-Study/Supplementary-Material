<report_mosca>
 <Path>/src/dist/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -              const { request, document, queryHash } = requestContext;

 Line: 41 -              let queryPlan;

 Line: 43 -                  queryPlan = yield this.queryPlanStore.get(queryHash);

 Line: 46 -                  queryPlan = buildQueryPlan_1.buildQueryPlan(operationContext);

 Line: 48 -                      Promise.resolve(this.queryPlanStore.set(queryHash, queryPlan)).catch(err => this.logger.warn('Could not store queryPlan', err));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/FieldSet.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 40 -          kind: graphql_1.Kind.SELECTION_SET,

 Line: 61 -                  selectionSet: { kind: graphql_1.Kind.SELECTION_SET, selections },

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/buildQueryPlan.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 310 -                      throw new graphql_1.GraphQLError('Must provide operation name if query contains ' +

 Line: 348 -              throw new graphql_1.GraphQLError(`Cannot query field "${fieldNode.name.value}" on type "${String(parentType)}"`, fieldNode);

 Line: 405 -                  kind: graphql_1.Kind.SELECTION_SET,

 Line: 416 -                  kind: graphql_1.Kind.SELECTION_SET,

 Line: 430 -                  kind: graphql_1.Kind.SELECTION_SET,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/loadServicesFromRemoteEndpoint.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -                      query: 'query GetServiceDefinition { _service { sdl } }',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/executeQueryPlan.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -              queryPlan,

 Line: 25 -              yield executeNode(context, queryPlan.node, data, []);

 Line: 138 -                          query: source,

 Line: 194 -  function downstreamServiceError(message, serviceName, query, variables, downstreamErrors, nodes, path) {

 Line: 201 -          query,

 Line: 253 -              kind: graphql_1.Kind.SELECTION_SET,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/snapshotSerializers/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -  const queryPlanSerializer_1 = __importDefault(require("./queryPlanSerializer"));

 Line: 12 -  exports.queryPlanSerializer = queryPlanSerializer_1.default;

</Result>
</report_mosca>

