{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 13,
          "line": 1
        },
        "extra": {
          "line": "This license applies to all parts of protobuf.js except those files\r",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 6,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 19,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) 2016, Daniel Wirtz  All rights reserved.\r",
          "message": "Syntax error"
        },
        "path": "/src/cli/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 8,
          "line": 1
        },
        "extra": {
          "line": "The MIT License\r",
          "message": "Syntax error"
        },
        "path": "/src/cli/lib/tsd-jsdoc/LICENSE",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 39,
          "line": 1
        },
        "extra": {
          "line": "import * as $protobuf from $DEPENDENCY;\r",
          "message": "Syntax error"
        },
        "path": "/src/cli/wrappers/es6.js",
        "start": {
          "col": 28,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 15,
          "line": 1
        },
        "extra": {
          "line": "Copyright 2014, Google Inc.  All rights reserved.\r",
          "message": "Syntax error"
        },
        "path": "/src/google/LICENSE",
        "start": {
          "col": 11,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_timing_attack": {
      "files": [
        {
          "file_path": "/src/dist/light/protobuf.js",
          "match_lines": [
            5842,
            5843
          ],
          "match_position": [
            5,
            20
          ],
          "match_string": "    if (hash === zeroHash)\n\n        return zero;"
        },
        {
          "file_path": "/src/dist/minimal/protobuf.js",
          "match_lines": [
            1648,
            1649
          ],
          "match_position": [
            5,
            20
          ],
          "match_string": "    if (hash === zeroHash)\n\n        return zero;"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4350,
            4354
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(field, token);\n\n                skip(\";\");\n\n            } else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4434,
            4438
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(field, token);\n\n                skip(\";\");\n\n            } else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4454,
            4459
          ],
          "match_position": [
            13,
            45
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(oneof, token);\n\n                skip(\";\");\n\n            } else {\n\n                push(token);\n\n                parseField(oneof, \"optional\");"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4502,
            4506
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(dummy, token); // skip\n\n                skip(\";\");\n\n            } else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4584,
            4587
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"rpc\")\n\n                parseMethod(service, token);\n\n            else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4627,
            4631
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(method, token);\n\n                skip(\";\");\n\n            } else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            7415,
            7416
          ],
          "match_position": [
            5,
            20
          ],
          "match_string": "    if (hash === zeroHash)\n\n        return zero;"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            369,
            373
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(field, token);\n\n                skip(\";\");\n\n            } else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            453,
            457
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(field, token);\n\n                skip(\";\");\n\n            } else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            473,
            478
          ],
          "match_position": [
            13,
            45
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(oneof, token);\n\n                skip(\";\");\n\n            } else {\n\n                push(token);\n\n                parseField(oneof, \"optional\");"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            521,
            525
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(dummy, token); // skip\n\n                skip(\";\");\n\n            } else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            603,
            606
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"rpc\")\n\n                parseMethod(service, token);\n\n            else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            646,
            650
          ],
          "match_position": [
            13,
            36
          ],
          "match_string": "            if (token === \"option\") {\n\n                parseOption(method, token);\n\n                skip(\";\");\n\n            } else\n\n                throw illegal(token);"
        },
        {
          "file_path": "/src/src/util/longbits.js",
          "match_lines": [
            129,
            130
          ],
          "match_position": [
            5,
            20
          ],
          "match_string": "    if (hash === zeroHash)\n\n        return zero;"
        }
      ],
      "metadata": {
        "cwe": "CWE-208: Observable Timing Discrepancy",
        "description": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/cli/lib/tsd-jsdoc/publish.js",
          "match_lines": [
            624,
            624
          ],
          "match_position": [
            51,
            89
          ],
          "match_string": "        if (element.type && element.type.names && /^Object\\b/i.test(element.type.names[0]) && element.properties) {"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            1136,
            1136
          ],
          "match_position": [
            10,
            28
          ],
          "match_string": "    if (!commonRe.test(name)) {"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4143,
            4143
          ],
          "match_position": [
            13,
            32
          ],
          "match_string": "        if (base10Re.test(token))"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4145,
            4145
          ],
          "match_position": [
            13,
            32
          ],
          "match_string": "        if (base16Re.test(token))"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4147,
            4147
          ],
          "match_position": [
            13,
            31
          ],
          "match_string": "        if (base8Re.test(token))"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4151,
            4151
          ],
          "match_position": [
            13,
            32
          ],
          "match_string": "        if (numberRe.test(token))"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4170,
            4170
          ],
          "match_position": [
            13,
            35
          ],
          "match_string": "        if (base10NegRe.test(token))"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4172,
            4172
          ],
          "match_position": [
            13,
            35
          ],
          "match_string": "        if (base16NegRe.test(token))"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            4176,
            4176
          ],
          "match_position": [
            13,
            34
          ],
          "match_string": "        if (base8NegRe.test(token))"
        },
        {
          "file_path": "/src/dist/protobuf.js",
          "match_lines": [
            6113,
            6116
          ],
          "match_position": [
            9,
            52
          ],
          "match_string": "        var lineText = source.substring(startOffset, endOffset);\n\n        // look for 1 or 2 slashes since startOffset would already point past\n\n        // the first slash that started the comment.\n\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);"
        },
        {
          "file_path": "/src/src/common.js",
          "match_lines": [
            27,
            27
          ],
          "match_position": [
            10,
            28
          ],
          "match_string": "    if (!commonRe.test(name)) {"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            162,
            162
          ],
          "match_position": [
            13,
            32
          ],
          "match_string": "        if (base10Re.test(token))"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            164,
            164
          ],
          "match_position": [
            13,
            32
          ],
          "match_string": "        if (base16Re.test(token))"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            166,
            166
          ],
          "match_position": [
            13,
            31
          ],
          "match_string": "        if (base8Re.test(token))"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            170,
            170
          ],
          "match_position": [
            13,
            32
          ],
          "match_string": "        if (numberRe.test(token))"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            189,
            189
          ],
          "match_position": [
            13,
            35
          ],
          "match_string": "        if (base10NegRe.test(token))"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            191,
            191
          ],
          "match_position": [
            13,
            35
          ],
          "match_string": "        if (base16NegRe.test(token))"
        },
        {
          "file_path": "/src/src/parse.js",
          "match_lines": [
            195,
            195
          ],
          "match_position": [
            13,
            34
          ],
          "match_string": "        if (base8NegRe.test(token))"
        },
        {
          "file_path": "/src/src/tokenize.js",
          "match_lines": [
            195,
            198
          ],
          "match_position": [
            9,
            52
          ],
          "match_string": "        var lineText = source.substring(startOffset, endOffset);\n\n        // look for 1 or 2 slashes since startOffset would already point past\n\n        // the first slash that started the comment.\n\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
