/src/index.js-49-  async function generateCsrfCookie (opts) {
/src/index.js:50:    let secret = isCookieSigned
/src/index.js-51-      ? this.unsignCookie(this.request.cookies[cookieKey] || '').value
##############################################
/src/index.js-53-    if (!secret) {
/src/index.js:54:      secret = await tokens.secret()
/src/index.js-55-      this.setCookie(cookieKey, secret, Object.assign({}, cookieOpts, opts))
##############################################
/src/index.js-60-  async function generateCsrfSecureSession (opts) {
/src/index.js:61:    let secret = this.request.session.get(sessionKey)
/src/index.js-62-    if (!secret) {
/src/index.js:63:      secret = await tokens.secret()
/src/index.js-64-      this.request.session.set(sessionKey, secret)
##############################################
/src/index.js-72-  async function generateCsrfSession () {
/src/index.js:73:    let secret = this.request.session[sessionKey]
/src/index.js-74-    if (!secret) {
/src/index.js:75:      secret = await tokens.secret()
/src/index.js-76-      this.request.session[sessionKey] = secret
##############################################
/src/index.js-81-  function csrfProtection (req, reply, next) {
/src/index.js:82:    const secret = getSecret(req, reply)
/src/index.js-83-    if (!secret) {
