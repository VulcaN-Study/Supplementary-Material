/src/install.js-37-    if (proxyUrl) {
/src/install.js:38:      var options = url.parse(proxyUrl);
/src/install.js-39-      options.path = downloadUrl;
/src/install.js-40-      options.headers = {
/src/install.js:41:        Host : url.parse(downloadUrl).host
/src/install.js-42-      };
##############################################
/src/install.js-50-    } else {
/src/install.js:51:      return url.parse(downloadUrl);
/src/install.js-52-    }
##############################################
/src/test/qunit/qunit.js-808-		if ( !result ) {
/src/test/qunit/qunit.js:809:			expected = escapeInnerText( QUnit.jsDump.parse(expected) );
/src/test/qunit/qunit.js:810:			actual = escapeInnerText( QUnit.jsDump.parse(actual) );
/src/test/qunit/qunit.js-811-			output += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + expected + "</pre></td></tr>";
##############################################
/src/test/qunit/qunit.js-1631-		while ( i-- ) {
/src/test/qunit/qunit.js:1632:			ret[i] = this.parse( arr[i] , undefined , stack);
/src/test/qunit/qunit.js-1633-		}
##############################################
/src/test/qunit/qunit.js-1740-
/src/test/qunit/qunit.js:1741:					ret = [ ret, QUnit.jsDump.parse( fn, "functionArgs" ), "){" ].join( "" );
/src/test/qunit/qunit.js:1742:					return join( ret, QUnit.jsDump.parse(fn,"functionCode" ), "}" );
/src/test/qunit/qunit.js-1743-				},
##############################################
/src/test/qunit/qunit.js-1757-						val = map[ key ];
/src/test/qunit/qunit.js:1758:						ret.push( QUnit.jsDump.parse( key, "key" ) + ": " + QUnit.jsDump.parse( val, undefined, stack ) );
/src/test/qunit/qunit.js-1759-					}
##############################################
/src/test/qunit/qunit.js-1772-						if ( val ) {
/src/test/qunit/qunit.js:1773:							ret += " " + a + "=" + QUnit.jsDump.parse( val, "attribute" );
/src/test/qunit/qunit.js-1774-						}
##############################################
/src/test/test/deepEqual.js-355-test("Date instances.", function() {
/src/test/test/deepEqual.js:356:	// Date, we don't need to test Date.parse() because it returns a number.
/src/test/test/deepEqual.js-357-	// Only test the Date instances by setting them a fix date.
##############################################
/src/test/test/test.js-296-test("jsDump output", function() {
/src/test/test/test.js:297:	equal( QUnit.jsDump.parse([1, 2]), "[\n  1,\n  2\n]" );
/src/test/test/test.js:298:	equal( QUnit.jsDump.parse({top: 5, left: 0}), "{\n  \"left\": 0,\n  \"top\": 5\n}" );
/src/test/test/test.js-299-	if (typeof document !== 'undefined' && document.getElementById("qunit-header")) {
/src/test/test/test.js:300:		equal( QUnit.jsDump.parse(document.getElementById("qunit-header")), "<h1 id=\"qunit-header\"></h1>" );
/src/test/test/test.js:301:		equal( QUnit.jsDump.parse(document.getElementsByTagName("h1")), "[\n  <h1 id=\"qunit-header\"></h1>\n]" );
/src/test/test/test.js-302-	}
##############################################
/src/test/test/test.js-447-	var noref = chainwrap(0);
/src/test/test/test.js:448:	var nodump = QUnit.jsDump.parse(noref);
/src/test/test/test.js-449-	equal(nodump, '{\n  "first": true,\n  "wrap": undefined\n}');
##############################################
/src/test/test/test.js-451-	var selfref = chainwrap(1);
/src/test/test/test.js:452:	var selfdump = QUnit.jsDump.parse(selfref);
/src/test/test/test.js-453-	equal(selfdump, '{\n  "first": true,\n  "wrap": recursion(-1)\n}');
##############################################
/src/test/test/test.js-455-	var parentref = chainwrap(2);
/src/test/test/test.js:456:	var parentdump = QUnit.jsDump.parse(parentref);
/src/test/test/test.js-457-	equal(parentdump, '{\n  "wrap": {\n    "first": true,\n    "wrap": recursion(-2)\n  }\n}');
##############################################
/src/test/test/test.js-459-	var circref = chainwrap(10);
/src/test/test/test.js:460:	var circdump = QUnit.jsDump.parse(circref);
/src/test/test/test.js-461-	ok(new RegExp("recursion\\(-10\\)").test(circdump), "(" +circdump + ") should show -10 recursion level");
##############################################
/src/test/test/test.js-484-
/src/test/test/test.js:485:	var arrdump = QUnit.jsDump.parse(arr);
/src/test/test/test.js-486-
##############################################
/src/test/test/test.js-495-
/src/test/test/test.js:496:	var objdump = QUnit.jsDump.parse(obj);
/src/test/test/test.js:497:	var childarrdump = QUnit.jsDump.parse(childarr);
/src/test/test/test.js-498-
