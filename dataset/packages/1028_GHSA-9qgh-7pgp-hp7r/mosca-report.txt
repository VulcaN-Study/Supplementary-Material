<report_mosca>
 <Path>/src/src/stores/indices/IndicesStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 69 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/lookup-tables/LookupTableDataAdaptersStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -        query: null,

 Line: 37 -    searchPaginated(page, perPage, query) {

 Line: 52 -          query: response.query,

 Line: 111 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/lookup-tables/LookupTableCachesStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -        query: null,

 Line: 37 -    searchPaginated(page, perPage, query) {

 Line: 52 -          query: response.query,

 Line: 111 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/lookup-tables/LookupTablesStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -        query: null,

 Line: 41 -    searchPaginated(page, perPage, query) {

 Line: 57 -          query: response.query,

 Line: 112 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/notifications/NotificationsStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/alertconditions/AlertConditionsStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -      const promise = fetch('DELETE', url).then(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/inputs/InputsStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 88 -      const promise = fetch('DELETE', URLUtils.qualifyUrl(`${this.sourceUrl}/${inputId}`));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/inputs/InputStatesStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 73 -      return fetch('DELETE', url)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/inputs/InputStaticFieldsStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/dashboards/DashboardsStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/extractors/ExtractorsStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 142 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/metrics/GlobalThroughputStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 19 -      setInterval(MetricsActions.list, this.INTERVAL);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/decorators/DecoratorsStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/alarmcallbacks/AlarmCallbacksStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -      const promise = fetch('DELETE', url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/sessions/SessionStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 35 -      const promise = new Builder('DELETE', URLUtils.qualifyUrl(`${this.sourceUrl}/${sessionId}`))

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/search/SavedSearchesStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 94 -      const queryParams = originalSearchParams.set('rangeType', originalSearchParams.get('range_type')).delete('range_type');

 Line: 95 -      const params = { title: title, query: queryParams.toJS() };

 Line: 149 -      const promise = fetch('DELETE', URLUtils.qualifyUrl(url));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/search/UniversalSearchStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -    search(type, query, timerange, streamId, limit, page, sortField, sortOrder, decorate) {

 Line: 20 -      const url = URLUtils.qualifyUrl(ApiRoutes.UniversalSearchApiController.search(type, query,

 Line: 38 -    histogram(type, query, timerange, interval, streamId, maxDataPoints) {

 Line: 40 -      const url = URLUtils.qualifyUrl(ApiRoutes.UniversalSearchApiController.histogram(type, query, interval, timerangeParams, streamId).url);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/field-analyzers/FieldQuickValuesStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 88 -      // Build a new query that scopes the result to the requested field terms

 Line: 89 -      const query = SearchStore.appendFieldQueryObjectToQueryString(originalSearchURLParams.get('q') || '*', fieldQueryObjects, SearchStore.AND_OPERATOR);

 Line: 93 -        query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/systemjobs/SystemJobsStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -      const promise = fetch('DELETE', url).then((response) => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/stores/nodes/NodesStore.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 21 -        setInterval(this._triggerList, this.INTERVAL);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/legacy/analyzers/fieldcharts.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 460 -        let query = series.gl2_query;

 Line: 462 -        if (query === undefined || query === '') {

 Line: 463 -          query = '*';

 Line: 466 -        // Add query to query list of chart.

 Line: 467 -        const queryDescription = `<div class="field-graph-query-color" style="background-color: ${lineColor};"></div> `

 Line: 476 -          gl2_query: query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/legacy/Rickshaw.Graph.Graylog2Selector.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 43 -        setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/legacy/validations.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 93 -      window.setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/logic/search/queryParser.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 0 -  var queryParser = require("logic/search/queryParser");

 Line: 23 -      TermAST = queryParser.TermAST;

 Line: 24 -      TermWithFieldAST = queryParser.TermWithFieldAST;

 Line: 25 -      Token = queryParser.Token;

 Line: 26 -      QueryParser = queryParser.QueryParser;

 Line: 27 -      TokenType = queryParser.TokenType;

 Line: 28 -      ExpressionListAST = queryParser.ExpressionListAST;

 Line: 29 -      ExpressionAST = queryParser.ExpressionAST;

 Line: 30 -      ModifierAST = queryParser.ModifierAST;

 Line: 34 -      var query = "login";

 Line: 46 -      var query = "login submit";

 Line: 57 -      var query = "action:login";

 Line: 62 -      var query = 'action:"login now"';

 Line: 67 -      var query = 'action : login';

 Line: 72 -      var query = '"login now"';

 Line: 85 -      var query = '"login now" submit';

 Line: 90 -      var query = 'submit "login now"';

 Line: 95 -      var query = '  submit  "login now" logout ';

 Line: 100 -      var query = "login OR submit";

 Line: 115 -      var query = " login ";

 Line: 120 -      var query = "  login  OR  \n \t  submit   ";

 Line: 125 -      var query = "login AND submit";

 Line: 140 -      var query = "login AND submit AND action:login";

 Line: 163 -      var query = "login && submit";

 Line: 178 -      var query = "login || submit";

 Line: 193 -      var query = "login AND ";

 Line: 203 -      var query = " AND login";

 Line: 213 -      var query = 'action : ';

 Line: 223 -      var query = 'login OR OR submit';

 Line: 235 -      var query = '\\';

 Line: 244 -    it('can parse empty query', function () {

 Line: 245 -      var query = '';

 Line: 250 -      var query = ' \n\t';

 Line: 257 -      var query = ' @$%&§öäüß#=.;_<>°"';

 Line: 262 -      var query = 'start+-end"';

 Line: 267 -      var query = "NOT submit";

 Line: 279 -      var query = "NOT submit AND action:login OR action:logout";

 Line: 303 -      var query = 'NOT ';

 Line: 313 -      var query = 'NOT NOT login';

 Line: 323 -      var query = "login NOT submit";

 Line: 342 -      var query = "login !submit";

 Line: 361 -      var query = "action:login OR action:logout NOT submit";

 Line: 383 -      var query = "login NOT submit NOT logout NOT now";

 Line: 403 -    it('can parse ! at the beginning of the query', function () {

 Line: 404 -      var query = "!login";

 Line: 414 -    it('can parse a query where AND is followed by NOT', function () {

 Line: 415 -      var query = "quick OR brown AND fox AND NOT news";

 Line: 442 -      var query = 'AND NOT';

 Line: 454 -      var query = "+submit";

 Line: 466 -      var query = "-submit";

 Line: 477 -    // TODO: This kind of query should not create any errors, the modifier seems to be silently ignored. It applies to +, - and !

 Line: 479 -      var query = '+ login';

 Line: 486 -      var query = '+-login';

 Line: 496 -      var query = "start+-end";

 Line: 504 -      var query = "[400 TO 500]";

 Line: 516 -      var query = "http_response_code:[400 TO 500]";

 Line: 529 -      var query = "{alpha TO omega}";

 Line: 541 -      var query = "character:{alpha TO omega}";

 Line: 554 -      var query = "[400 TO 500";

 Line: 562 -      var query = "{400 TO 500]";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/logic/search/UniversalSearch.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -      const query = $('#universalsearch-query');

 Line: 20 -      return query;

 Line: 23 -      const query = this._query();

 Line: 24 -      query.val(search);

 Line: 25 -      query.effect('bounce');

 Line: 37 -    queryContainsSegment(segmentInQuestion) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/logic/graphs/HistogramFormatter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    _firstDataPointTimestamp(dataPoints, queryFrom, isSearchAll) {

 Line: 21 -     * @param {object} queryTimeRange: Time ranges of the query that generated the histogram

 Line: 31 -    format(dataPoints, queryTimeRange, resolution, screenSize, isSearchAll, valueKey, legacy = false) {

 Line: 36 -        const from = this._firstDataPointTimestamp(dataPoints, queryTimeRange.from, isSearchAll);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/util/EventHandlersThrottler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 20 -      this.eventMutex = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/util/URLUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -      let query = location.search;

 Line: 17 -        if (query.indexOf('?') === 0 && query.length > 1) {

 Line: 18 -          query = query.substr(1, query.length - 1);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/routing/ApiRoutes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 219 -        const queryString = {};

 Line: 223 -        queryString.query = query;

 Line: 224 -        Object.keys(timerange).forEach((key) => { queryString[key] = timerange[key]; });

 Line: 225 -        Object.keys(streamFilter).forEach((key) => { queryString[key] = streamFilter[key]; });

 Line: 227 -        return queryString;

 Line: 229 -      _buildUrl(url, queryString) {

 Line: 232 -      search(type, query, timerange, streamId, limit, offset, sortField, sortOrder, decorate) {

 Line: 234 -        const queryString = this._buildBaseQueryString(query, timerange, streamId);

 Line: 237 -          queryString.limit = limit;

 Line: 240 -          queryString.offset = offset;

 Line: 243 -          queryString.sort = `${sortField}:${sortOrder}`;

 Line: 247 -          queryString.decorate = decorate;

 Line: 250 -        return { url: this._buildUrl(url, queryString) };

 Line: 252 -      export(type, query, timerange, streamId, limit, offset, fields) {

 Line: 254 -        const queryString = this._buildBaseQueryString(query, timerange, streamId);

 Line: 257 -          queryString.limit = limit;

 Line: 260 -          queryString.offset = offset;

 Line: 264 -          queryString.fields = fields.join(',');

 Line: 267 -        return { url: this._buildUrl(url, queryString) };

 Line: 269 -      histogram(type, query, resolution, timerange, streamId) {

 Line: 271 -        const queryString = this._buildBaseQueryString(query, timerange, streamId);

 Line: 272 -        queryString.interval = resolution;

 Line: 274 -        return { url: this._buildUrl(url, queryString) };

 Line: 276 -      fieldHistogram(type, query, field, resolution, timerange, streamId, includeCardinality) {

 Line: 278 -        const queryString = this._buildBaseQueryString(query, timerange, streamId);

 Line: 279 -        queryString.interval = resolution;

 Line: 280 -        queryString.field = field;

 Line: 281 -        queryString.cardinality = includeCardinality;

 Line: 282 -        return { url: this._buildUrl(url, queryString) };

 Line: 284 -      fieldStats(type, query, field, timerange, streamId) {

 Line: 286 -        const queryString = this._buildBaseQueryString(query, timerange, streamId);

 Line: 287 -        queryString.field = field;

 Line: 288 -        return { url: this._buildUrl(url, queryString) };

 Line: 290 -      fieldTerms(type, query, field, order, size, stackedFields, timerange, streamId) {

 Line: 292 -        const queryString = this._buildBaseQueryString(query, timerange, streamId);

 Line: 293 -        queryString.field = field;

 Line: 294 -        queryString.order = `${field}:${order}`; // REST API expects <field>:<order> format for the "order" param

 Line: 295 -        queryString.size = size;

 Line: 296 -        queryString.stacked_fields = stackedFields;

 Line: 297 -        return { url: this._buildUrl(url, queryString) };

 Line: 299 -      fieldTermsHistogram(type, query, field, order, size, stackedFields, timerange, interval, streamId) {

 Line: 301 -        const queryString = this._buildBaseQueryString(query, timerange, streamId);

 Line: 304 -          queryString.interval = interval.toUpperCase();

 Line: 306 -        queryString.field = field;

 Line: 307 -        queryString.order = `${field}:${order}`; // REST API expects <field>:<order> format for the "order" param

 Line: 308 -        queryString.size = size;

 Line: 309 -        queryString.stacked_fields = stackedFields;

 Line: 310 -        return { url: this._buildUrl(url, queryString) };

</Result>
</report_mosca>

