<report_mosca>
 <Path>/src/backbone-min.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 21 -  "onhashchange"in window&&!a?h(window).bind("hashchange",this.checkUrl):setInterval(this.checkUrl,this.interval);return this.loadUrl()},route:function(a,b){this.handlers.push({route:a,callback:b})},checkUrl:function(){var a=this.getFragment();if(a==this.fragment&&this.iframe)a=this.getFragment(this.iframe.location);if(a==this.fragment||a==decodeURIComponent(this.fragment))return false;if(this.iframe)window.location.hash=this.iframe.location.hash=a;this.loadUrl()},loadUrl:function(){var a=this.fragment=

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/backbone-min.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -  m;var s={create:"POST",update:"PUT","delete":"DELETE",read:"GET"};e.sync=function(a,b,c,d){var g=s[a];a=a==="create"||a==="update"?JSON.stringify(b.toJSON()):null;b={url:k(b),type:g,contentType:"application/json",data:a,dataType:"json",processData:false,success:c,error:d};if(e.emulateJSON){b.contentType="application/x-www-form-urlencoded";b.processData=true;b.data=a?{model:a}:{}}if(e.emulateHTTP)if(g==="PUT"||g==="DELETE"){if(e.emulateJSON)b.data._method=g;b.type="POST";b.beforeSend=function(i){i.setRequestHeader("X-HTTP-Method-Override",

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/backbone.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 697 -          setInterval(this.checkUrl, this.interval);

 Line: 895 -    // * Use `setTimeout` to batch rapid-fire updates into a single request.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/backbone.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -    // fake `"PUT"` and `"DELETE"` requests via the `_method` parameter and set a

 Line: 883 -      'delete': 'DELETE',

 Line: 899 -    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests

 Line: 932 -        if (type === 'PUT' || type === 'DELETE') {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/sync.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 107 -      equals(lastRequest.type, 'DELETE');

 Line: 116 -      equals(JSON.stringify(lastRequest.data), '{"_method":"DELETE"}');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/controller.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 45 -      setTimeout(function() {

 Line: 54 -      setTimeout(function() {

 Line: 63 -      setTimeout(function() {

 Line: 71 -      setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/controller.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -        this.query = query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/jquery-1.4.2.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 380 -  				return setTimeout( jQuery.ready, 13 );

 Line: 464 -  		if ( !obj || toString.call(obj) !== "[object Object]" || obj.nodeType || obj.setInterval ) {

 Line: 598 -  			if ( array.length == null || typeof array === "string" || jQuery.isFunction(array) || (typeof array !== "function" && array.setInterval) ) {

 Line: 768 -  		setTimeout( doScrollCheck, 1 );

 Line: 1195 -  			setTimeout(function() {

 Line: 1565 -  		if ( elem.setInterval && ( elem !== window && !elem.frameElement ) ) {

 Line: 2052 -  				if ( this.setInterval ) {

 Line: 5241 -  			setTimeout(function() {

 Line: 5768 -  			timerId = setInterval(jQuery.fx.tick, 13);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/jquery-1.4.2.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3438 -  // querying by getElementById (and provide a workaround)

 Line: 3525 -  			// Only use querySelectorAll on non-XML documents

 Line: 5002 -  			// Replace the =? sequence both in the query string and the data

 Line: 5251 -  			xhr.send( type === "POST" || type === "PUT" || type === "DELETE" ? s.data : null );

 Line: 5376 -  	// key/values into a query string

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/underscore-1.1.3.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 416 -      return setTimeout(function(){ return func.apply(func, args); }, wait);

 Line: 435 -        if (debounce || !timeout) timeout = setTimeout(throttler, wait);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/jslitmus.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 184 -        setTimeout(function() {me._run(count);}, 200);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/jslitmus.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 398 -      * The parsed query parameters the current page URL.  This is provided as a

 Line: 407 -        // Parse query params into JSLitmus.params[] hash

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/zepto-0.2.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 209 -          touchTimeout = setTimeout(function(){

 Line: 270 -          timeout = setTimeout(function(){ cache = [] }, 60000);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/qunit.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 228 -  			if ( !window.setTimeout && !config.queue.length ) {

 Line: 233 -  		if ( window.setTimeout && !config.doneTimer ) {

 Line: 234 -  			config.doneTimer = window.setTimeout(function(){

 Line: 286 -  		if ( window.setTimeout ) {

 Line: 287 -  			window.setTimeout(function() {

 Line: 304 -  		if ( timeout && window.setTimeout ) {

 Line: 305 -  			config.timeout = window.setTimeout(function() {

 Line: 471 -  		config.doneTimer = window.setTimeout(function(){

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/json2.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 466 -                  j = eval('(' + text + ')');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/vendor/json2.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -      USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO

</Result>
</report_mosca>

