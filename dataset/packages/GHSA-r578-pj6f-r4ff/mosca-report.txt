<report_mosca>
 <Path>/src/lib/followings/__tests__/resolvers.tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 171 -      const query = `

 Line: 185 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 189 -      const query = `

 Line: 205 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 209 -      const query = `

 Line: 223 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 227 -      const query = `

 Line: 228 -        query getContent {

 Line: 238 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 243 -      const query = `

 Line: 244 -        query getContent {

 Line: 255 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 262 -      const query = `

 Line: 263 -        query getContent {

 Line: 274 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, contextWithoutUser);

 Line: 278 -      const query = `

 Line: 279 -        query getContent {

 Line: 290 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, contextWithoutUser);

 Line: 294 -      const query = `

 Line: 295 -        query {

 Line: 307 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 311 -      const query = `

 Line: 312 -        query {

 Line: 325 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, contextWithoutUser);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/events/__tests__/resolver.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -      const query = `

 Line: 32 -        query {

 Line: 63 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/content-items/__tests__/resolvers.tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 229 -      const query = `

 Line: 230 -        query {

 Line: 242 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 246 -      const query = `

 Line: 247 -        query {

 Line: 259 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 263 -      const query = `

 Line: 264 -        query {

 Line: 276 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 280 -      const query = `

 Line: 281 -        query {

 Line: 289 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 293 -      const query = `

 Line: 294 -        query {

 Line: 302 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 306 -      const query = `

 Line: 307 -        query {

 Line: 315 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 319 -      const query = `

 Line: 320 -        query {

 Line: 334 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 338 -      const query = `

 Line: 339 -        query {

 Line: 347 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 351 -      const query = `

 Line: 352 -        query {

 Line: 366 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 370 -      const query = `

 Line: 371 -        query {

 Line: 394 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 398 -      const query = `

 Line: 399 -        query {

 Line: 407 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/content-items/__tests__/data-source.tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 582 -      const query = await dataSource.byPersonaFeed();

 Line: 583 -      await query.get();

 Line: 638 -      const query = await dataSource.byPersonaFeed();

 Line: 639 -      await query.get();

 Line: 660 -      const query = await dataSource.byPersonaFeed();

 Line: 661 -      await query.get();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/auth/__tests__/index.tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -      const query = `

 Line: 82 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 87 -      const query = `

 Line: 97 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 100 -    describe('currentUser query', () => {

 Line: 101 -      const query = `

 Line: 102 -        query {

 Line: 113 -        const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 129 -        const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 149 -        const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 168 -        const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 181 -          await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 199 -      const query = `

 Line: 200 -        query {

 Line: 207 -      await (0, _graphql.graphql)(schema, query, rootValue, secondContext);

 Line: 283 -        const query = `

 Line: 301 -        const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 305 -        const query = `

 Line: 323 -        await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/campuses/__tests__/resolver.tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 86 -      const query = `

 Line: 87 -        query {

 Line: 108 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 112 -      const query = `

 Line: 113 -        query {

 Line: 134 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 138 -      const query = `

 Line: 139 -        query {

 Line: 160 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 164 -      const query = `

 Line: 165 -        query {

 Line: 184 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 188 -      const query = `

 Line: 189 -        query {

 Line: 208 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 212 -      const query = `

 Line: 213 -        query {

 Line: 232 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 237 -      const query = `

 Line: 238 -        query {

 Line: 263 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 268 -      const query = `

 Line: 269 -        query {

 Line: 294 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 299 -      const query = `

 Line: 300 -        query {

 Line: 314 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 319 -      const query = `

 Line: 344 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 350 -      const query = `

 Line: 351 -        query {

 Line: 381 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/feature-feeds/__tests__/FeatureFeed.tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -    it('should query the home feed', async () => {

 Line: 50 -      const query = `

 Line: 51 -        query {

 Line: 60 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 63 -    it('should query the discover feed', async () => {

 Line: 64 -      const query = `

 Line: 65 -        query {

 Line: 74 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 78 -      const query = `

 Line: 79 -         query {

 Line: 89 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/groups/__tests__/resolver.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -      const query = `

 Line: 32 -        query {

 Line: 72 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/auth-sms/__tests__/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 70 -      const query = `

 Line: 71 -        query {

 Line: 78 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 83 -      const query = `

 Line: 84 -        query {

 Line: 91 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 96 -      const query = `

 Line: 97 -        query {

 Line: 104 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 109 -      const query = `

 Line: 122 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 130 -      const query = `

 Line: 146 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 154 -      const query = `

 Line: 169 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 191 -      const query = `

 Line: 197 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 201 -      const query = `

 Line: 220 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 227 -      const query = `

 Line: 256 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 265 -      const query = `

 Line: 300 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 309 -      const query = `

 Line: 341 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 350 -      const query = `

 Line: 375 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 382 -      const query = `

 Line: 411 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 420 -      const query = `

 Line: 457 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/people/__tests__/resolvers.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 64 -      const query = `

 Line: 81 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 85 -      const query = `

 Line: 106 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 110 -      const query = `

 Line: 129 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 133 -      const query = `

 Line: 142 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 145 -    it('gets a single person when querying by root node', async () => {

 Line: 146 -      const query = `

 Line: 147 -        query {

 Line: 179 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/content-channels/__tests__/resolvers.tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 76 -      const query = `

 Line: 77 -        query {

 Line: 85 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

 Line: 88 -    it('gets a single content channel when querying by root node', async () => {

 Line: 89 -      const query = `

 Line: 90 -        query {

 Line: 102 -      const result = await (0, _graphql.graphql)(schema, query, rootValue, context);

</Result>
</report_mosca>

