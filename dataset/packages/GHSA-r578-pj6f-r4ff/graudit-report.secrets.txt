/src/lib/auth/token.js-5-});
/src/lib/auth/token.js:6:exports.generateToken = exports.registerToken = exports.parseToken = exports.secret = void 0;
/src/lib/auth/token.js-7-
##############################################
/src/lib/auth/token.js-13-
/src/lib/auth/token.js:14:const secret = process.env.SECRET || 'ASea$2gadj#asd0';
/src/lib/auth/token.js:15:exports.secret = secret;
/src/lib/auth/token.js-16-
##############################################
/src/lib/auth/token.js.map:1:{"version":3,"sources":["../../src/auth/token.js"],"names":["secret","process","env","SECRET","parseToken","token","jwt","verify","registerToken","cookie","sessionId","userToken","rockCookie","e","TokenExpiredError","AuthenticationError","generateToken","params","sign","expiresIn"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEO,MAAMA,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAAZ,IAAsB,iBAArC;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWC,sBAAIC,MAAJ,CAAWF,KAAX,EAAkBL,MAAlB,CAA9B;;;;AAEA,MAAMQ,aAAa,GAAIH,KAAD,IAAW;AACtC,MAAI;AACF,UAAM;AAAEI,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAwBN,UAAU,CAACC,KAAD,CAAxC;AAEA,WAAO;AACLM,MAAAA,SAAS,EAAEN,KADN;AAELO,MAAAA,UAAU,EAAEH,MAFP;AAGLC,MAAAA;AAHK,KAAP;AAKD,GARD,CAQE,OAAOG,CAAP,EAAU;AACV,QAAIA,CAAC,YAAYP,sBAAIQ,iBAArB,EAAwC;AACtC,aAAO,EAAP;AACD;;AACD,UAAM,IAAIC,iCAAJ,CAAwB,eAAxB,CAAN;AACD;AACF,CAfM;;;;AAiBA,MAAMC,aAAa,GAAIC,MAAD,IAC3BX,sBAAIY,IAAJ,CAAS,EAAE,GAAGD;AAAL,CAAT,EAAwBjB,MAAxB,EAAgC;AAAEmB,EAAAA,SAAS,EAAE;AAAb,CAAhC,CADK","sourcesContent":["import { AuthenticationError } from 'apollo-server';\nimport jwt from 'jsonwebtoken';\n\nexport const secret = process.env.SECRET || 'ASea$2gadj#asd0';\n\nexport const parseToken = (token) => jwt.verify(token, secret);\n\nexport const registerToken = (token) => {\n  try {\n    const { cookie, sessionId } = parseToken(token);\n\n    return {\n      userToken: token,\n      rockCookie: cookie,\n      sessionId,\n    };\n  } catch (e) {\n    if (e instanceof jwt.TokenExpiredError) {\n      return {};\n    }\n    throw new AuthenticationError('Invalid token');\n  }\n};\n\nexport const generateToken = (params) =>\n  jwt.sign({ ...params }, secret, { expiresIn: '400d' });\n"],"file":"token.js"}
