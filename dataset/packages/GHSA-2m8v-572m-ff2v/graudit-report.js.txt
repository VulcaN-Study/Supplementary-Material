/src/lib/virtualbox.js-39-                const offset = sinceDateObj.getTimezoneOffset();
/src/lib/virtualbox.js:40:                runningSince = Math.round((Date.now() - Date.parse(sinceDateObj)) / 1000) + offset * 60;
/src/lib/virtualbox.js-41-              }
##############################################
/src/lib/virtualbox.js-50-                const offset = sinceDateObj.getTimezoneOffset();
/src/lib/virtualbox.js:51:                stoppedSince = Math.round((Date.now() - Date.parse(sinceDateObj)) / 1000) + offset * 60;
/src/lib/virtualbox.js-52-              }
##############################################
/src/lib/memory.js-146-      if (_linux) {
/src/lib/memory.js:147:        fs.readFile('/proc/meminfo', function (error, stdout) {
/src/lib/memory.js-148-          if (!error) {
##############################################
/src/lib/filesystem.js-182-      if (_linux) {
/src/lib/filesystem.js:183:        fs.readFile('/proc/sys/fs/file-nr', function (error, stdout) {
/src/lib/filesystem.js-184-          if (!error) {
##############################################
/src/lib/filesystem.js-278-      line = line.replace(/\\/g, '\\\\');
/src/lib/filesystem.js:279:      let disk = JSON.parse(line);
/src/lib/filesystem.js-280-      data.push({
##############################################
/src/lib/filesystem.js-782-              try {
/src/lib/filesystem.js:783:                const outJSON = JSON.parse(out);
/src/lib/filesystem.js-784-                if (outJSON && {}.hasOwnProperty.call(outJSON, 'blockdevices')) {
##############################################
/src/lib/filesystem.js-837-              try {
/src/lib/filesystem.js:838:                const data = JSON.parse(`[${stdout}]`);
/src/lib/filesystem.js-839-                data.forEach(disk => {
##############################################
/src/lib/dockerSocket.js-24-
/src/lib/dockerSocket.js:25:      let socket = net.createConnection({ path: socketPath });
/src/lib/dockerSocket.js-26-      let alldata = '';
##############################################
/src/lib/dockerSocket.js-46-        try {
/src/lib/dockerSocket.js:47:          data = JSON.parse(alldata);
/src/lib/dockerSocket.js-48-          callback(data);
##############################################
/src/lib/dockerSocket.js-60-
/src/lib/dockerSocket.js:61:      let socket = net.createConnection({ path: socketPath });
/src/lib/dockerSocket.js-62-      let alldata = '';
##############################################
/src/lib/dockerSocket.js-82-        try {
/src/lib/dockerSocket.js:83:          data = JSON.parse(alldata);
/src/lib/dockerSocket.js-84-          callback(data);
##############################################
/src/lib/dockerSocket.js-97-      try {
/src/lib/dockerSocket.js:98:        let socket = net.createConnection({ path: socketPath });
/src/lib/dockerSocket.js-99-        let alldata = '';
##############################################
/src/lib/dockerSocket.js-119-          try {
/src/lib/dockerSocket.js:120:            data = JSON.parse(alldata);
/src/lib/dockerSocket.js-121-            callback(data);
##############################################
/src/lib/dockerSocket.js-137-      try {
/src/lib/dockerSocket.js:138:        let socket = net.createConnection({ path: socketPath });
/src/lib/dockerSocket.js-139-        let alldata = '';
##############################################
/src/lib/dockerSocket.js-159-          try {
/src/lib/dockerSocket.js:160:            data = JSON.parse(alldata);
/src/lib/dockerSocket.js-161-            callback(data);
##############################################
/src/lib/dockerSocket.js-177-      try {
/src/lib/dockerSocket.js:178:        let socket = net.createConnection({ path: socketPath });
/src/lib/dockerSocket.js-179-        let alldata = '';
##############################################
/src/lib/dockerSocket.js-199-          try {
/src/lib/dockerSocket.js:200:            data = JSON.parse(alldata);
/src/lib/dockerSocket.js-201-            callback(data);
##############################################
/src/lib/cpu.js-857-                if (err === null) {
/src/lib/cpu.js:858:                  fs.readFile('/sys/class/thermal/thermal_zone0/temp', function (error, stdout) {
/src/lib/cpu.js-859-                    if (!error) {
##############################################
/src/lib/cpu.js-1010-            if (!result) {
/src/lib/cpu.js:1011:              fs.readFile('/proc/cpuinfo', function (error, stdout) {
/src/lib/cpu.js-1012-                if (!error) {
##############################################
/src/lib/system.js-111-                // Check Raspberry Pi
/src/lib/system.js:112:                fs.readFile('/proc/cpuinfo', function (error, stdout) {
/src/lib/system.js-113-                  if (!error) {
##############################################
/src/lib/battery.js-59-        if (battery_path) {
/src/lib/battery.js:60:          fs.readFile(battery_path + 'uevent', function (error, stdout) {
/src/lib/battery.js-61-            if (!error) {
