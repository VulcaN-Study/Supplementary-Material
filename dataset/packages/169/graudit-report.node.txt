/src/scripts/configure.js-154-function download(downloadUrl, filename, callback, ondata) {
/src/scripts/configure.js:155:    var url = require("url").parse(downloadUrl);
/src/scripts/configure.js-156-    var out = require("fs").createWriteStream(filename, { flags: 'w', encoding: null, mode: 0666 });
##############################################
/src/scripts/configure.js-166-    if (process.env.http_proxy) {
/src/scripts/configure.js:167:        var http_proxy = require("url").parse(process.env.http_proxy);
/src/scripts/configure.js-168-        options["hostname"] = http_proxy["hostname"];
##############################################
/src/scripts/configure.js-208-function unpack(filename, callback, entryCallback) {   
/src/scripts/configure.js:209:    var input = fs.createReadStream(filename, { flags: 'r', encoding: null }),
/src/scripts/configure.js-210-        files = {},
##############################################
/src/lib/follow-redirects.js-115-                    // we need to call the right api (http vs https) depending on protocol
/src/lib/follow-redirects.js:116:                    var proto = url.parse(redirectUrl).protocol;
/src/lib/follow-redirects.js-117-                    proto = proto.substr(0, proto.length - 1);
##############################################
/src/lib/follow-redirects.js-120-                    // Break url in parts
/src/lib/follow-redirects.js:121:                    var searchname = url.parse(redirectUrl).search;
/src/lib/follow-redirects.js:122:                    var hostname = url.parse(redirectUrl).hostname;
/src/lib/follow-redirects.js:123:                    var pathname = url.parse(redirectUrl).pathname;
/src/lib/follow-redirects.js-124-
