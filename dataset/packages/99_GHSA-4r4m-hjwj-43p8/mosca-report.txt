<report_mosca>
 <Path>/src/lib/transports/websocket.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 149 -      setTimeout(function(){

 Line: 211 -      setTimeout(function(){

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/transports/websocket.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 247 -    var query = this.query || {};

 Line: 259 -      query[this.timestampParam] = yeast();

 Line: 264 -      query.b64 = 1;

 Line: 267 -    query = parseqs.encode(query);

 Line: 269 -    // prepend ? to query

 Line: 271 -      query = '?' + query;

 Line: 275 -    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/transports/polling.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 218 -    var query = this.query || {};

 Line: 224 -      query[this.timestampParam] = yeast();

 Line: 228 -      query.b64 = 1;

 Line: 231 -    query = parseqs.encode(query);

 Line: 239 -    // prepend ? to query

 Line: 241 -      query = '?' + query;

 Line: 245 -    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/transports/polling-xhr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 241 -            setTimeout(function(){

 Line: 254 -      setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/transports/polling-jsonp.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 145 -      setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/transports/polling-jsonp.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 68 -    // append to query string

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/socket.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 211 -      setTimeout(function() {

 Line: 482 -    self.pingTimeoutTimer = setTimeout(function () {

 Line: 498 -    self.pingIntervalTimer = setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/socket.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 149 -    var query = clone(this.query);

 Line: 152 -    query.EIO = parser.protocol;

 Line: 155 -    query.transport = name;

 Line: 158 -    if (this.id) query.sid = this.id;

 Line: 166 -      query: query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/engine.io.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 229 -      setTimeout(function() {

 Line: 500 -    self.pingTimeoutTimer = setTimeout(function () {

 Line: 516 -    self.pingIntervalTimer = setTimeout(function () {

 Line: 1109 -      setTimeout(function () {

 Line: 1447 -            setTimeout(function(){

 Line: 1460 -      setTimeout(function() {

 Line: 2020 -      setTimeout(function(){

 Line: 2082 -      setTimeout(function(){

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/engine.io.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 167 -    var query = clone(this.query);

 Line: 170 -    query.EIO = parser.protocol;

 Line: 173 -    query.transport = name;

 Line: 176 -    if (this.id) query.sid = this.id;

 Line: 184 -      query: query,

 Line: 1032 -    // append to query string

 Line: 1839 -    var query = this.query || {};

 Line: 1845 -      query[this.timestampParam] = yeast();

 Line: 1849 -      query.b64 = 1;

 Line: 1852 -    query = parseqs.encode(query);

 Line: 1860 -    // prepend ? to query

 Line: 1862 -      query = '?' + query;

 Line: 1866 -    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;

 Line: 2118 -    var query = this.query || {};

 Line: 2130 -      query[this.timestampParam] = yeast();

 Line: 2135 -      query.b64 = 1;

 Line: 2138 -    query = parseqs.encode(query);

 Line: 2140 -    // prepend ? to query

 Line: 2142 -      query = '?' + query;

 Line: 2146 -    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;

 Line: 3846 -   * Compiles a querystring

 Line: 3867 -   * Parses a simple querystring into an object

</Result>
</report_mosca>

