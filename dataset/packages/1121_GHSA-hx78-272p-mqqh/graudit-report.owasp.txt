/src/README.md-631-
/src/README.md:632:This occurs because of caching. When the cache is set to "contextual" only the contextual variable of the rule is expected to be evaluated. Setting the cache to "strict" allows the rule to rely on parent and args parameters as well.
/src/README.md-633-
##############################################
/src/dist/utils.js-54- * Flattens object of particular type by checking if the leaf
/src/dist/utils.js:55: * evaluates to true from particular function.
/src/dist/utils.js-56- *
##############################################
/src/dist/rules.js-172-     */
/src/dist/rules.js:173:    async evaluate(parent, args, ctx, info, options) {
/src/dist/rules.js-174-        const rules = this.getRules();
##############################################
/src/dist/rules.js-211-     *
/src/dist/rules.js:212:     * Makes sure that at least one of them has evaluated to true.
/src/dist/rules.js-213-     *
##############################################
/src/dist/rules.js-215-    async resolve(parent, args, ctx, info, options) {
/src/dist/rules.js:216:        const result = await this.evaluate(parent, args, ctx, info, options);
/src/dist/rules.js-217-        if (result.every(res => res !== true)) {
##############################################
/src/dist/rules.js-241-    async resolve(parent, args, ctx, info, options) {
/src/dist/rules.js:242:        const result = await this.evaluate(parent, args, ctx, info, options);
/src/dist/rules.js-243-        if (result.some(res => res !== true)) {
##############################################
/src/dist/rules.js-267-    async resolve(parent, args, ctx, info, options) {
/src/dist/rules.js:268:        const result = await this.evaluate(parent, args, ctx, info, options);
/src/dist/rules.js-269-        if (result.some(res => res !== true)) {
##############################################
/src/dist/rules.js-286-     */
/src/dist/rules.js:287:    async evaluate(parent, args, ctx, info, options) {
/src/dist/rules.js-288-        const rules = this.getRules();
##############################################
/src/dist/rules.js-317-    async resolve(parent, args, ctx, info, options) {
/src/dist/rules.js:318:        const [res] = await this.evaluate(parent, args, ctx, info, options);
/src/dist/rules.js-319-        if (res !== true) {
##############################################
/src/dist/utils.d.ts-39- * Flattens object of particular type by checking if the leaf
/src/dist/utils.d.ts:40: * evaluates to true from particular function.
/src/dist/utils.d.ts-41- *
##############################################
/src/dist/types.d.ts-18-    extractFragments(): IFragment[];
/src/dist/types.d.ts:19:    evaluate(parent: any, args: any, ctx: any, info: any, options: IOptions): Promise<IRuleResult[]>;
/src/dist/types.d.ts-20-    resolve(parent: any, args: any, ctx: any, info: any, options: IOptions): Promise<IRuleResult>;
##############################################
/src/dist/rules.d.ts-89-     */
/src/dist/rules.d.ts:90:    evaluate(parent: any, args: any, ctx: any, info: any, options: IOptions): Promise<IRuleResult[]>;
/src/dist/rules.d.ts-91-    /**
##############################################
/src/dist/rules.d.ts-107-     *
/src/dist/rules.d.ts:108:     * Makes sure that at least one of them has evaluated to true.
/src/dist/rules.d.ts-109-     *
##############################################
/src/dist/rules.d.ts-149-     */
/src/dist/rules.d.ts:150:    evaluate(parent: any, args: any, ctx: any, info: any, options: IOptions): Promise<IRuleResult[]>;
/src/dist/rules.d.ts-151-}
