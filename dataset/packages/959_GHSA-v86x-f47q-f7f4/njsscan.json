{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 1,
          "line": 3
        },
        "extra": {
          "line": "coverage/*",
          "message": "Lexical error: end of file in comment"
        },
        "path": "/src/.eslintignore",
        "start": {
          "col": 1,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 1,
          "line": 674
        },
        "extra": {
          "line": "<http://www.gnu.org/philosophy/why-not-lgpl.html>.",
          "message": "Lexical error: WIERD end of file in quoted string"
        },
        "path": "/src/COPYING",
        "start": {
          "col": 1,
          "line": 674
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 157
        },
        "extra": {
          "line": "# download via hand-built data uris is no longer supported by chrome... you have to put data in a blob and download via the blob url",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/REFS",
        "start": {
          "col": 1,
          "line": 157
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 15,
          "line": 1
        },
        "extra": {
          "line": "Copyright 2010-2017 Mike Bostock",
          "message": "Syntax error"
        },
        "path": "/src/client/3rd_party_libs/d3/LICENSE",
        "start": {
          "col": 11,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# Minimal makefile for Sphinx documentation",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/doc/Makefile",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "message": "Syntax error"
        },
        "path": "/src/exported_to_sccdxml/python_runtime/.project",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 1,
          "line": 5
        },
        "extra": {
          "line": "</pydev_project>",
          "message": "Lexical error: WIERD end of file in regexp"
        },
        "path": "/src/exported_to_sccdxml/python_runtime/.pydevproject",
        "start": {
          "col": 1,
          "line": 5
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "message": "Syntax error"
        },
        "path": "/src/exported_to_sccdxml/python_sccd_compiler/.project",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 1,
          "line": 5
        },
        "extra": {
          "line": "</pydev_project>",
          "message": "Lexical error: WIERD end of file in regexp"
        },
        "path": "/src/exported_to_sccdxml/python_sccd_compiler/.pydevproject",
        "start": {
          "col": 1,
          "line": 5
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 19,
          "line": 2
        },
        "extra": {
          "line": "\t\"autosave-delay\": {",
          "message": "Syntax error"
        },
        "path": "/src/users/(default)/prefs",
        "start": {
          "col": 18,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "generic_path_traversal": {
      "files": [
        {
          "file_path": "/src/httpwsd.js",
          "match_lines": [
            76,
            707
          ],
          "match_position": [
            4,
            43
          ],
          "match_string": "\t\t\tvar url = _url.parse(req.url,true);\n\n\t\t\turl.pathname = decodeURI(url.pathname);\n\n\n\n\n\n\t\t\t/* serve client */\n\n\t\t\tif( req.method == 'GET' && url.pathname == '/atompm' )\n\n\t\t\t\t_fs.readFile('./client/atompm.html', 'utf8',\n\n\t\t\t\t\tfunction(err, data)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t__respond(resp,200,'',data,{'Content-Type': 'text/html'});\n\n\t\t\t\t\t});\n\n                    \n\n\t\t\telse if( req.method == 'GET' && url.pathname == '/favicon.png' )\n\n\t\t\t\t_fs.readFile('./favicon.png', 'binary',\n\n\t\t\t\t\tfunction(err, data)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t__respond(resp,200,'',data,{'Content-Type': 'image/png'});\n\n\t\t\t\t\t});\n\n\n\n\n\n\n\n\t\t\t/* provide an interface to the unfortunately unavoidable dataurize \n\n\t\t\t\tmodule which returns data URIs for resources at arbitrary URLs */\n\n\t\t\telse if( req.method == 'GET' && url.pathname == '/datauri' )\n\n\t\t\t{\n\n\t\t\t\tvar target = _url.parse(decodeURI(url['query']['target']));\n\n\t\t\t\t_duri.dataurize(\n\n\t\t\t\t\ttarget,\n\n\t\t\t\t\tfunction(err,datauri)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t__respond(resp,500,_utils.jsons(err));\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t__respond(resp,200,'',datauri);\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\n\n\n\n\n\n\t\t\t/* serve metamodels, buttons models and their icons */\n\n\t\t\telse if( req.method == 'GET' && \n\n\t\t\t\t (url.pathname.match(/\\.metamodel$/) ||\n\n\t\t\t\t  url.pathname.match(/\\.buttons.model$/) ||\n\n\t\t\t\t  url.pathname.match(/\\.icon\\.png$/i)) )\n\n\t\t\t{\n\n\t\t\t\tvar isIcon = url.pathname.match(/\\.icon\\.png$/i);\n\n\t\t\t\t_fs.readFile('./users/'+url.pathname, (isIcon ? 'binary' : 'utf8'), \n\n\t\t\t\t\tfunction(err, data)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tvar contentType = \n\n\t\t\t\t\t\t\t\t\t(isIcon ? \n\n\t\t\t\t\t\t\t\t\t\t{'Content-Type': 'image/png'} : \n\n\t\t\t\t\t\t\t\t\t\t{'Content-Type': 'application/json'});\n\n\t\t\t\t\t\t\t__respond(resp,200,'',data,contentType);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t  \t\t}\n\n\n\n\n\n\n\n\t\t\t/* serve ordinary files (e.g., js includes, images, css) \n\n\n\n\t\t\t\tNOTE:: distinguish between atompm images (e.g., grid background,\n\n\t\t\t\t\t\t filebrowser icons) and CS/Images */\n\n\t\t\telse if( req.method == 'GET' && \n\n\t\t\t\t\t   (url.pathname.match(/\\.html$/)  || \n\n\t\t\t\t\t\t url.pathname.match(/\\.css$/)   || \n\n\t  \t\t\t\t\t url.pathname.match(/\\.js$/)\t  ||\n\n\t  \t\t\t\t\t url.pathname.match(/\\.pdf$/)   ||\n\n\t\t\t\t\t \t url.pathname.match(/\\.png$/i)  ||\n\n\t\t\t\t\t\t url.pathname.match(/\\.jpg$/i)  ||\n\n\t\t\t\t\t\t url.pathname.match(/\\.jpeg$/i) ||\n\n\t\t\t\t\t\t url.pathname.match(/\\.gif$/i)  ||\n\n\t\t\t\t\t\t url.pathname.match(/\\.svg$/i)) )\n\n\t\t\t{\n\n\t\t\t\tvar isImage = url.pathname.match(/\\.png$/i) ||\n\n\t\t\t\t\t\t\t\t  url.pathname.match(/\\.jpg$/i) ||\n\n\t\t\t\t\t\t\t\t  url.pathname.match(/\\.jpeg$/i) ||\n\n\t\t \t\t\t\t\t\t  url.pathname.match(/\\.gif$/i) ||\n\n\t\t \t\t\t\t\t\t  url.pathname.match(/\\.svg$/i),\n\n\t\t\t\t\tisText \t= ! isImage && ! url.pathname.match(/\\.pdf$/);\n\n\n\n\t\t\t\tif( isImage && ! url.pathname.match(/^\\/client\\/media\\//) )\n\n\t\t\t\t\turl.pathname = '/users/'+url.pathname;\n\n\n\n\t\t\t\t_fs.readFile('.'+url.pathname, (isText ? 'utf8' : 'binary'),\n\n\t\t\t\t\tfunction(err, data)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tvar contentType = \n\n\t\t\t\t\t\t\t\t(url.pathname.match(/\\.html$/) ? \n\n\t\t\t\t\t\t\t\t\t {'Content-Type': 'text/html'} :\n\n\t\t\t\t\t\t\t\t url.pathname.match(/\\.css$/) ? \n\n\t\t\t\t\t\t\t\t\t {'Content-Type': 'text/css'} :\n\n\t\t\t\t\t\t\t\t url.pathname.match(/\\.js$/) ? \n\n\t\t\t\t\t\t\t\t\t {'Content-Type': 'application/javascript'} :\n\n\t\t\t\t\t\t\t\t url.pathname.match(/\\.pdf$/) ? \n\n\t\t\t\t\t\t\t\t\t {'Content-Type': 'application/pdf'} :\n\n\t\t\t\t\t\t\t\t url.pathname.match(/\\.png$/i) ? \n\n\t\t\t\t\t\t\t\t\t {'Content-Type': 'image/png'} :\n\n\t\t\t\t\t\t\t\t url.pathname.match(/\\.jpg$/i) || \n\n\t\t\t\t\t\t\t\t \turl.pathname.match(/\\.jpeg$/i) ? \n\n\t\t\t\t\t\t\t\t\t {'Content-Type': 'image/jpeg'} :\n\n\t\t\t\t\t\t\t\t url.pathname.match(/\\.gif$/i) ? \n\n\t\t\t\t\t\t\t\t\t {'Content-Type': 'image/gif'} :\n\n\t\t\t\t\t\t\t\t url.pathname.match(/\\.svg$/i) ? \n\n\t\t\t\t\t\t\t\t\t {'Content-Type': 'image/svg+xml'} :\n\n\t\t\t\t\t\t\t\t undefined);\n\n\t\t\t\t\t\t\t__respond(resp,200,'',data,contentType);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t  \t\t}\n\n\n\n\n\n\n\n\t\t\t/* serve encrypted user password */\n\n\t\t\telse if( req.method == 'GET' && url.pathname == '/passwd' )\n\n\t\t\t\t_fs.readFile('./users/'+url['query']['username']+'/passwd', 'utf8',\n\n\t\t\t\t\tfunction(err, data)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t__respond(resp,200,'',data,{'Content-Type': 'text/html'});\n\n\t\t\t\t\t});\n\n\n\n\n\n\t\t\t/* create new user \n\n\t\t\t \t1. make sure user doesn't already exist\n\n\t\t\t \t2. make a new copy of ./users/(default) \n\n\t\t\t \t3. create password file */\n\n\t\t\telse if( req.method == 'POST' && url.pathname == '/user' )\n\n\t\t\t{\n\n\t\t\t\tvar userdir = './users/'+url['query']['username'];\n\n\t\t\t\t_fs.exists(userdir,\n\n\t\t\t\t\tfunction(exists)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif( exists )\n\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t__respond(resp,500,'username already exists');\n\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t_fspp.cp('./users/(default)/',userdir,\n\n\t\t\t\t\t\t\tfunction(err, stdout, stderr)\n\n\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\tif( err )\n\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t_fs.writeFile(\n\n\t\t\t\t\t\t\t\t\tuserdir+'/passwd',\n\n\t\t\t\t\t\t\t\t\turl['query']['password'],\n\n\t\t\t\t\t\t\t\t\tfunction(err)\n\n\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\tif( err )\n\n\t\t\t\t\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t\t\t\t\t__respond(resp,200);\n\n\t\t\t\t\t\t\t\t\t});\t\t\t\n\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\n\n\n\n\n\n\t\t\t/* serve [a subset of] user preferences */\n\n\t\t\telse if( req.method == 'GET' && url.pathname.match(/prefs$/) )\n\n\t\t\t\t_fs.readFile('./users/'+url.pathname, 'utf8',\n\n\t\t\t\t\tfunction(err, data)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\telse if( url['query']['subset'] == undefined )\n\n\t\t\t\t\t\t\t__respond(resp,200,'',data);\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\ttry \t\t\t\n\n\t\t\t\t\t\t\t{\t\n\n\t\t\t\t\t\t\t\t__respond(\n\n\t\t\t\t\t\t\t\t\tresp,\n\n\t\t\t\t\t\t\t\t\t200,\n\n\t\t\t\t\t\t\t\t\t'',\n\n\t\t\t\t\t\t\t\t\t_utils.splitDict(\n\n\t\t\t\t\t\t\t\t\t\t_utils.jsonp(data),\n\n\t\t\t\t\t\t\t\t\t\t_utils.jsonp(url['query']['subset'])));\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcatch(err)\t{__respond(resp,500,String(err));}\n\n\t\t\t\t\t});\n\n\n\n\n\n\t\t\t/* update user preferences\n\n\n\n\t\t\t\t1 retrieve all post data\n\n\t\t\t\t2 read prefs file from disk\n\n\t\t\t\t3 apply changes \n\n\t\t\t \t4 write updated prefs to disk */\n\n\t\t\telse if( req.method == 'PUT' && url.pathname.match(/prefs$/) )\n\n\t\t\t{\n\n\t\t\t\tvar reqData = '';\n\n\t\t\t\treq.addListener(\"data\", function(chunk) {reqData += chunk;});\n\n\t\t\t\treq.addListener(\"end\", \n\n\t\t\t\t\tfunction() \n\n\t\t\t\t\t{\n\n\t\t\t\t\t\t_fs.readFile('./users/'+url.pathname, 'utf8',\n\n\t\t\t\t\t\t\tfunction(err, prefs)\n\n\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\ttry \t\t\t\n\n\t\t\t\t\t\t\t\t\t{\t\n\n\t\t\t\t\t\t\t\t\t\tprefs   = _utils.jsonp(prefs);\n\n\t\t\t\t\t\t\t\t\t\treqData = _utils.jsonp(reqData);\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcatch(err)\t\n\n\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t\t\t\tfor( var pref in reqData )\n\n\t\t\t\t\t\t\t\t\t\tprefs[pref]['value'] = reqData[pref];\n\n\n\n\t\t\t\t\t\t\t\t\t_fs.writeFile(\n\n\t\t\t\t\t\t\t\t\t\t'./users/'+url.pathname, \n\n\t\t\t\t\t\t\t\t\t\t_utils.jsons(prefs,null,'\\t'),\n\n\t\t\t\t\t\t\t\t\t\tfunction(err, data)\n\n\t\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t\tif(err) \n\n\t\t\t\t\t\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t\t\t\t\t\t__respond(resp,200);\n\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t}\t\n\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\n\n\n\n\n\n\t\t\t/*\tdelete specified file/folder */\t\n\n\t\t\telse if( req.method == 'DELETE' && url.pathname.match(/\\.(file|folder)$/) )\n\n\t\t\t{\n\n                if (url.pathname.match('_Trash_')) {\n\n                    __respond(resp,500,\"cannot remove trash!\");\n\n                } else {\n\n                    var matches  = url.pathname.match(/^\\/(.*?)\\/(.*\\/)?(.*)\\.(file|folder)$/),\n\n                         username = matches[1],\n\n                         folder = matches[2] || '',\n\n                         fname \t = matches[3],\n\n                         userdir\t = './users/'+username+'/',\n\n                         ondelete = \n\n                             function(err, stdout, stderr)\n\n                             {\n\n                                 if( err )\n\n                                     __respond(resp,500,String(err));\n\n                                 else\n\n                                     __respond(resp,200);\n\n                             },\n\n                         deletef  = \n\n                             function(response)\n\n                             {\n\n                                 var newname = userdir+'_Trash_/'+folder+fname;\n\n                                 if (_fs.existsSync(newname)) {\n\n                                     if (url.pathname.match(/\\.folder$/)) {\n\n                                         _fspp.deleteFolderRecursive(newname);\n\n                                     } else {\n\n                                         _fs.unlink(newname);\n\n                                     }\n\n                                 }\n\n                                 _fspp.mv(userdir+folder+fname,userdir+'_Trash_/'+folder,ondelete);\n\n                             };\n\n                    _fs.exists(userdir+'_Trash_/'+folder,\n\n                        function(exists)\n\n                        {\n\n                            if( ! exists )\n\n                                _fspp.mkdirs(userdir+'_Trash_/'+folder,deletef);\n\n                            else {\n\n                                deletef();\n\n                            }\n\n                        });\n\n                }\n\n\t\t\t}\n\n\n\n\n\n\n\n\t\t\t/*\tcreate folder */\t\n\n\t\t\telse if( req.method == 'POST' && url.pathname.match(/\\.folder$/) )\n\n\t\t\t{\n\n\t\t\t\tvar matches  = url.pathname.match(/^\\/(.*?)\\/(.*)\\.folder$/),\n\n\t\t\t\t\t username = matches[1],\n\n                     folder = matches[2],\n\n\t\t\t\t\t userdir\t = './users/'+username+'/',\n\n\t\t\t\t\t oncreate = \n\n\t\t\t\t\t\t function(err, stdout, stderr)\n\n\t\t\t\t\t\t {\n\n\t\t\t\t\t\t\t if( err )\n\n\t\t\t\t\t\t\t\t __respond(resp,500,String(err));\n\n\t\t\t\t\t\t\t else\n\n\t\t\t\t\t\t\t\t __respond(resp,200);\n\n\t\t\t\t\t\t };\n\n\t\t\t\t_fs.exists(userdir+folder,\n\n\t\t\t\t\tfunction(exists)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif( ! exists )\n\n\t\t\t\t\t\t\t_fspp.mkdirs(userdir+folder,oncreate);\n\n                        else {\n\n                            oncreate(\"folder \" + folder + \" already exists\");\n\n                        }\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\n\n\n\n\n\n\t\t\t/*\trename file/folder (or move) */\t\n\n\t\t\telse if( req.method == 'PUT' && url.pathname.match(/\\.(folder|file)$/) )\n\n\t\t\t{                \n\n                req.setEncoding('utf8');\n\n\t\t\t\tvar data = '';\n\n\t\t\t\treq.addListener(\"data\", function(chunk) {data += chunk;});\n\n\t\t\t\treq.addListener(\"end\", \n\n                    function() {\n\n                        data = _utils.jsonp(data);\n\n                        if (data.match(/^\\//)) {\n\n                            // move\n\n                            var matches  = url.pathname.match(/^\\/(.*?)\\/(.*\\/)?(.*)\\.(file|folder)$/),\n\n                                username = matches[1],\n\n                                folder = matches[2] || '',\n\n                                fname \t = matches[3],\n\n                                userdir\t = './users/'+username,\n\n                                onmove = \n\n                                     function(err, stdout, stderr)\n\n                                     {\n\n                                         if( err )\n\n                                             __respond(resp,500,String(err));\n\n                                         else\n\n                                             __respond(resp,200);\n\n                                     };\n\n                                if (_fs.existsSync(userdir+data+fname)) {\n\n                                    if (url.pathname.match(/\\.folder$/)) {\n\n                                         _fspp.deleteFolderRecursive(userdir+data+fname);\n\n                                     } else {\n\n                                         _fs.unlink(newname);\n\n                                     }\n\n                                }\n\n                            _fspp.mv(userdir+\"/\"+folder+fname,userdir+data,onmove);\n\n                        } else {\n\n                            // rename\n\n                            var matches  = url.pathname.match(/^\\/(.*?)\\/(.*\\/)?(.*)\\.(file|folder)$/),\n\n                                username = matches[1],\n\n                                folder = matches[2] || '',\n\n                                fname \t = matches[3],\n\n                                userdir\t = './users/'+username+'/',\n\n                                onrename = \n\n                                     function(err, stdout, stderr)\n\n                                     {\n\n                                         if( err )\n\n                                             __respond(resp,500,String(err));\n\n                                         else\n\n                                             __respond(resp,200);\n\n                                     };\n\n                            _fs.rename(userdir+folder+fname,userdir+folder+data,onrename);\n\n                        }\n\n                    }\n\n                );\n\n\t\t\t\t\n\n\t\t\t}\n\n            \n\n            else if (req.method == 'POST' && url.pathname.match(/\\.formalism$/)) {\n\n                // create new formalism\n\n                var matches = url.pathname.match(/^(.*)\\/(.*)\\.formalism$/),\n\n                    username = matches[1],\n\n                    formalism = matches[2],\n\n                    userdir\t = './users/'+username+\"/\",\n\n                    oncreatefolder = \n\n                         function(err, stdout, stderr)\n\n                         {\n\n                             if( err )\n\n                                 __respond(resp,500,String(err));\n\n                             else {\n\n                                 _fs.createReadStream(userdir+\"Formalisms/__Templates__/MetamodelTemplate.model\").pipe(_fs.createWriteStream(userdir+\"Formalisms/\"+formalism+\"/\"+formalism+\".model\"));\n\n                                 _fs.createReadStream(userdir+\"Formalisms/__Templates__/ConcreteSyntaxTemplate.model\").pipe(_fs.createWriteStream(userdir+\"Formalisms/\"+formalism+\"/\"+formalism+\".defaultIcons.model\"));\n\n                                 _fs.createReadStream(userdir+\"Formalisms/__Templates__/MetamodelTemplate.metamodel\").pipe(_fs.createWriteStream(userdir+\"Formalisms/\"+formalism+\"/\"+formalism+\".metamodel\"));\n\n                                 _fs.createReadStream(userdir+\"Formalisms/__Templates__/ConcreteSyntaxTemplate.defaultIcons.metamodel\").pipe(_fs.createWriteStream(userdir+\"Formalisms/\"+formalism+\"/\"+formalism+\".defaultIcons.metamodel\"));\n\n                                 _fs.createReadStream(userdir+\"Formalisms/__Templates__/T_TransformationTemplate.model\").pipe(_fs.createWriteStream(userdir+\"Formalisms/\"+formalism+\"/OperationalSemantics/T_OperationalSemantics.model\"));\n\n                                 _fs.createReadStream(userdir+\"Formalisms/__Templates__/T_TransformationTemplate.model\").pipe(_fs.createWriteStream(userdir+\"Formalisms/\"+formalism+\"/TranslationalSemantics/T_TranslationalSemantics.model\"));\n\n                                 __respond(resp,200);\n\n                             }\n\n                         };\n\n                _fs.mkdir(userdir+\"Formalisms/\"+formalism,function(err, stdout, stderr) {            \n\n                     if( err )\n\n                         __respond(resp,500,String(err));\n\n                     else {\n\n                         _fs.mkdirSync(userdir+\"Formalisms/\"+formalism+\"/OperationalSemantics\");\n\n                         _fs.mkdir(userdir+\"Formalisms/\"+formalism+\"/TranslationalSemantics\", oncreatefolder);\n\n                     }\n\n                });\n\n            }\n\n            \n\n            else if (req.method == 'POST' && url.pathname.match(/\\.transformation$/)) {\n\n                // create new transformation\n\n                var matches = url.pathname.match(/^\\/(.*?)\\/(.*)\\.transformation$/),\n\n                    username = matches[1],\n\n                    userdir\t = './users/'+username+\"/\";\n\n                    \n\n                _fs.createReadStream(userdir+\"Formalisms/__Templates__/T_TransformationTemplate.model\").pipe(_fs.createWriteStream('./users/'+url.pathname.slice(0, -(\".transformation\".length))));\n\n                __respond(resp,200);\n\n            }\n\n            \n\n            else if (req.method == 'POST' && url.pathname.match(/\\.rule$/)) {\n\n                // create new rule\n\n                var matches = url.pathname.match(/^\\/(.*?)\\/(.*)\\.rule$/),\n\n                    username = matches[1],\n\n                    userdir\t = './users/'+username+\"/\";\n\n                    \n\n                _fs.createReadStream(userdir+\"Formalisms/__Templates__/R_RuleTemplate.model\").pipe(_fs.createWriteStream('./users/'+url.pathname.slice(0, -(\".rule\".length))));\n\n                __respond(resp,200);\n\n            }\n\n\t\t\t\t\n\n\t\t\t/* extract user-uploaded archive to specified folder \n\n\t\t\t\t1. read in all data\n\n\t\t\t\t2. make sure destination exists and is a directory\n\n\t\t\t\t3. write data to temp file (upload###.zip)\n\n\t\t\t\t4. extract temp file and remove it\n\n\t\t\t \n\n\t\t\t\tNOTE:: it's not clear why (despite hours of googling) but the \n\n\t\t\t\t\t\t \"req.setEncoding('utf8')\" statement makes the difference\n\n\t\t\t\t\t\t between retrieving correct and corrupted (when non-text\n\n\t\t\t\t\t\t files in zip) data */\n\n\t\t\telse if( req.method == 'PUT' && url.pathname.match(/\\.file$/) )\n\n\t\t\t{\n\n\t\t\t\treq.setEncoding('utf8');\n\n\n\n\t\t\t\tvar reqData = '',\n\n\t\t\t\t\t tmpzip\t= 'upload'+Date.now()+'.zip',\n\n\t\t\t\t\t destdir\t= './users/'+url.pathname.match(/(.*)\\.file$/)[1]+'/';\n\n\t\t\t\treq.addListener(\"data\", function(chunk) {reqData += chunk;});\n\n\t\t\t\treq.addListener(\"end\", \n\n\t\t\t\t\tfunction() \n\n\t\t\t\t\t{\n\n\t\t\t\t\t\t_fs.stat(destdir,\n\n\t\t\t\t\t\t\tfunction(err,stats)\n\n\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\tif( err )\n\n\t\t\t\t\t\t\t\t\t__respond(resp,404,String(err));\n\n\t\t\t\t\t\t\t\telse if( ! stats.isDirectory() )\n\n\t\t\t\t\t\t\t\t\t__respond(resp,404,\n\n\t\t\t\t\t\t\t\t\t\t'destination is not a directory :: '+destdir);\n\n\t\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t\t\t_fs.writeFile(\n\n\t\t\t\t\t\t\t\t\t\tdestdir+tmpzip,eval('('+reqData+')'),\n\n\t\t\t\t\t\t\t\t\t\t'binary',\n\n\t\t\t\t\t\t\t\t\t\tfunction(err)\n\n\t\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t\t_cp.exec('cd '+destdir+'; unzip -o '+tmpzip,\n\n\t\t\t\t\t\t\t\t\t\t\t\tfunction(err, stdout, stderr)\n\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif( err )\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t__respond(resp,200);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t_fs.unlink(destdir+tmpzip);\n\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\n\n\t\t\t/* serve specified file/folder within a zip file */ \n\n\t\t\telse if( req.method == 'GET' && url.pathname.match(/\\.file$/) )\n\n\t\t\t{\n\n\t\t\t\tvar matches  = url.pathname.match(/^\\/(.*?)\\/(.*)\\.file$/),\n\n\t\t\t\t\t username = matches[1],\n\n \t\t\t\t\t fname \t = './'+matches[2],\n\n\t\t\t\t\t userdir\t = './users/'+username+'/',\n\n\t\t\t\t\t tmpzip\t = 'download'+Date.now()+'.zip';\n\n\n\n\t\t\t\t_fs.exists(userdir+fname,\n\n\t\t\t\t\tfunction(exists)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif( ! exists )\n\n\t\t\t\t\t\t\t__respond(resp,404,\n\n\t\t\t\t\t\t\t\t'requested file/folder does not exist :: '+fname);\n\n\t\t\t\t\t\telse \n\n\t\t\t\t\t\t\t_cp.exec('cd '+userdir+'; zip -r '+tmpzip+' \"'+fname+'\"',\n\n\t\t\t\t\t\t\t\tfunction(err, stdout, stderr)\n\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\tif( err )\n\n\t\t\t\t\t\t\t\t\t\t__respond(resp,500,String(err));\n\n\t\t\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t\t\t\t_fs.readFile(userdir+tmpzip,'binary',\n\n\t\t\t\t\t\t\t\t\t\t\tfunction(err, data)\n\n\t\t\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t\t\t__respond(resp,200,'',data,\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t{'Content-Type':'application/zip',\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t 'Content-Disposition':\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t \t'attachment; filename=\"'+tmpzip+'\"'});\n\n\t\t\t\t\t\t\t\t\t\t\t\t_fs.unlink(userdir+tmpzip);\n\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\n\n\t\t\t/*\tserve list of all files */\n\n\t\t\telse if( req.method == 'GET' && \n\n\t\t\t\t\t\turl.pathname.match(/^\\/.+\\/filelist$/) )\n\n\t\t\t{\n\n\t\t\t\tvar matches = url.pathname.match(/^\\/(.+)\\/filelist$/);\n\n\t\t\t\t_fspp.findfiles('./users/'+matches[1], \n\n\t\t\t\t\t\tfunction(err, stdout, stderr)\n\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif( err )\n\n\t\t\t\t\t\t\t\t__respond(resp,404,String(err));\n\n\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t\t__respond(resp,200,'',stdout);\n\n\t\t\t\t\t\t});\n\n\t\t\t}\n\n\n\n\n\n\n\n\t\t\t/* spawn new worker */\n\n\t\t\telse if( (url.pathname == '/csworker' || url.pathname == '/asworker') \n\n\t\t\t\t\t\t&& req.method == 'POST' )\n\n\t\t\t{\n\n\t\t\t\t/* setup and store new worker */\n\n\t\t\t\tvar worker = _cp.fork(_path.join(__dirname, '__worker.js')),\n\n\t\t\t\t\t wid \t  = workers.push(worker)-1;\n\n\t\t\t\tworkerIds2socketIds[wid] = [];\n\n\t\t\t\tworker.on('message',\n\n\t\t\t\t\tfunction(msg) \n\n\t\t\t\t\t{\n\n\t\t\t\t\t\t/* push changes (if any) to registered sockets... even empty \n\n\t\t\t\t\t\t\tchangelogs are pushed to facilitate sequence number-based\n\n\t\t\t\t\t\t\tordering */\n\n\t\t\t\t\t\tif( msg['changelog'] != undefined )\n\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tvar _msg = {'changelog':msg['changelog'],\n\n\t\t\t\t\t\t\t\t\t \t  'sequence#':msg['sequence#'],\n\n\t\t\t\t\t\t\t\t\t\t  'hitchhiker':msg['hitchhiker']};\n\n\n\n\t\t\t\t\t\t\tworkerIds2socketIds[wid].forEach(\n\n\t\t\t\t\t\t\t\tfunction(sid)\n\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t__send(\n\n\t\t\t\t\t\t\t\t\t\twsserver.sockets.sockets[sid],\n\n\t\t\t\t\t\t\t\t\t\tundefined,\n\n\t\t\t\t\t\t\t\t\t\tundefined,\n\n\t\t\t\t\t\t\t\t\t\t_msg);\n\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t/* respond to a request */\n\n\t\t\t\t\t\tif( msg['respIndex'] != undefined )\n\n\t\t\t\t\t\t\t__respond(\n\n\t\t\t\t\t\t\t\tresponses[msg['respIndex']], \n\n\t\t\t\t\t\t\t\tmsg['statusCode'],\n\n\t\t\t\t\t\t\t\tmsg['reason'],\n\n\t\t\t\t\t\t\t\tJSON.stringify(\n\n\t\t\t\t\t\t\t\t\t{'headers':\n\n\t\t\t\t\t\t\t\t\t\t(msg['headers'] || \n\n\t\t\t\t\t\t\t\t\t\t {'Content-Type': 'text/plain'}),\n\n\t\t\t\t\t\t\t\t\t 'data':msg['data'],\n\n\t\t\t\t\t\t\t\t\t 'sequence#':msg['sequence#']}),\n\n\t\t\t\t\t\t\t\t{'Content-Type': 'application/json'});\n\n\t\t\t\t\t});\n\n\t\t\t\tworker.send(\n\n\t\t\t\t\t\t{'workerType':url.pathname,\n\n\t\t\t\t\t\t 'workerId':wid});\t\t\n\n\n\n\t\t\t\t/* respond worker id (used to identify associated worker) */\n\n\t\t\t\t__respond(\n\n\t\t\t\t\tresp, \n\n\t\t\t\t\t201, \n\n\t\t\t\t\t'', \n\n\t\t\t\t\t''+wid);\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\n\n\n\n\t\t\t/* check for worker id and it's validity */\n\n\t\t\telse if( url['query'] == undefined || \n\n\t\t\t\t\t\turl['query']['wid'] == undefined )\n\n\t\t\t\t__respond(resp, 400, 'missing worker id');\n\n\t\t\telse if( workers[url['query']['wid']] == undefined )\n\n\t\t\t\t__respond(resp, 400, 'invalid worker id :: '+url['query']['wid']);\n\n\n\n\t\t\t\n\n\t\t\t/* save resp object and forward request to worker (if request is PUT or\n\n\t\t\t  \tPOST, recover request data first)\n\n\t\t\t\n\n\t\t\t\tTBI:: only registered sockets should be allowed to speak to worker\n\n\t\t\t\t\t\t... one way of doing this is forcing request urls to contain \n\n\t\t\t\t\t\tcid=socket.id## */\n\n\t\t\telse if( req.method == 'PUT' || req.method == 'POST' )\n\n\t\t\t{\n\n\t\t\t\tvar reqData = '';\n\n\t\t\t\treq.addListener(\"data\", function(chunk) {reqData += chunk;});\n\n\t\t\t\treq.addListener(\"end\", \n\n\t\t\t\t\tfunction() \n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tworkers[url['query']['wid']].send(\n\n\t\t\t\t\t\t\t\t{'method':req.method,\n\n\t\t\t\t\t\t\t\t 'uri':url.pathname,\n\n\t\t\t\t\t\t\t\t 'reqData':(reqData == '' ? \n\n\t\t\t\t\t\t\t\t\t \t\t\t\tundefined : \n\n\t\t\t\t\t\t\t\t\t\t\t\t\teval('('+reqData+')')),\n\n\t\t\t\t\t\t\t\t 'uriData':url['query'],\n\n\t\t\t\t\t\t\t\t 'respIndex':responses.push(resp)-1});\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t\tworkers[url['query']['wid']].send(\n\n\t\t\t\t\t\t{'method':req.method,\n\n\t\t\t\t\t\t 'uri':url.pathname,\n\n\t\t\t\t\t\t 'uriData':url['query'],\n\n\t\t\t\t\t\t 'respIndex':responses.push(resp)-1});"
        }
      ],
      "metadata": {
        "cwe": "CWE-23: Relative Path Traversal",
        "description": "Untrusted user input in readFile()/readFileSync() can endup in Directory Traversal Attacks.",
        "owasp": "A5: Broken Access Control",
        "severity": "ERROR"
      }
    },
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/__worker.js",
          "match_lines": [
            754,
            754
          ],
          "match_position": [
            29,
            40
          ],
          "match_string": "\t\t\t \t\t\t\t  __backstagePass = Math.random();"
        },
        {
          "file_path": "/src/__worker.js",
          "match_lines": [
            770,
            770
          ],
          "match_position": [
            24,
            35
          ],
          "match_string": "\t\t\t\t\t__backstagePass = Math.random();"
        },
        {
          "file_path": "/src/client/3rd_party_libs/d3/d3.js",
          "match_lines": [
            510,
            510
          ],
          "match_position": [
            9,
            20
          ],
          "match_string": "    i = Math.random() * m-- | 0;"
        },
        {
          "file_path": "/src/client/3rd_party_libs/d3/d3.js",
          "match_lines": [
            5924,
            5924
          ],
          "match_position": [
            11,
            22
          ],
          "match_string": "  return (Math.random() - 0.5) * 1e-6;"
        },
        {
          "file_path": "/src/client/3rd_party_libs/d3/d3.js",
          "match_lines": [
            10562,
            10562
          ],
          "match_position": [
            9,
            20
          ],
          "match_string": "    i = Math.random() * m-- | 0;"
        },
        {
          "file_path": "/src/client/3rd_party_libs/d3/d3.js",
          "match_lines": [
            11663,
            11663
          ],
          "match_position": [
            10,
            21
          ],
          "match_string": "  return Math.random();"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_username": {
      "files": [
        {
          "file_path": "/src/tests/03_model_test.js",
          "match_lines": [
            2,
            2
          ],
          "match_position": [
            1,
            31
          ],
          "match_string": "let user = \"./users/testuser/\";"
        },
        {
          "file_path": "/src/tests/04_toolbar_test.js",
          "match_lines": [
            3,
            3
          ],
          "match_position": [
            1,
            31
          ],
          "match_string": "let user = \"./users/testuser/\";"
        },
        {
          "file_path": "/src/tests/05_creating_dsl.js",
          "match_lines": [
            3,
            3
          ],
          "match_position": [
            1,
            31
          ],
          "match_string": "let user = \"./users/testuser/\";"
        },
        {
          "file_path": "/src/tests/06_transformation_test.js",
          "match_lines": [
            5,
            5
          ],
          "match_position": [
            1,
            31
          ],
          "match_string": "let user = \"./users/testuser/\";"
        },
        {
          "file_path": "/src/tests/test_utils.js",
          "match_lines": [
            87,
            87
          ],
          "match_position": [
            1,
            31
          ],
          "match_string": "let user = \"./users/testuser/\";"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/client/3rd_party_libs/raphael/raphael.js",
          "match_lines": [
            6040,
            6040
          ],
          "match_position": [
            14,
            39
          ],
          "match_string": "            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : eve(\"DOMload\");"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
