/src/examples/describe.js-10-//open a connection to the database
/src/examples/describe.js:11:db.open("DSN=myDsnName;UID=myUserName;PWD=mySuperSecretPassword;DATABASE=myAwesomeDatabase", function(err)
/src/examples/describe.js-12-{
##############################################
/src/examples/params.js-11-//open a connection to the database
/src/examples/params.js:12:db.open("DSN=myDsnName;UID=myUserName;PWD=mySuperSecretPassword;DATABASE=myAwesomeDatabase;CHARSET=UTF8", function(err)
/src/examples/params.js-13-{
##############################################
/src/README.md-177-
/src/README.md:178:ibmdb.open("DATABASE=<dbname>;HOSTNAME=<myhost>;UID=db2user;PWD=password;PORT=<dbport>;PROTOCOL=TCPIP", function (err,conn) {
/src/README.md-179-  if (err) return console.log(err);
##############################################
/src/README.md-262-```javascript
/src/README.md:263:require("ibm_db").open(connectionString, function (err, conn){
/src/README.md-264-  //conn is already open now if err is falsy
##############################################
/src/lib/odbc.js-88-    deferred = Q.defer();
/src/lib/odbc.js:89:    db.open(connStr, function(err) {
/src/lib/odbc.js-90-      if (err)
##############################################
/src/lib/odbc.js-109-
/src/lib/odbc.js:110:  db.open(connStr, function (err) {
/src/lib/odbc.js-111-    cb && cb(err, db);
##############################################
/src/lib/odbc.js-327-
/src/lib/odbc.js:328:    self.conn.open(connStr, function (err, result)
/src/lib/odbc.js-329-    {
##############################################
/src/lib/odbc.js-1820-
/src/lib/odbc.js:1821:    db.open(connStr, function (error) {
/src/lib/odbc.js-1822-      exports.debug && console.log("%s odbc.js : pool[%s] : pool.db.open new connection.", getElapsedTime(), self.index);
##############################################
/src/lib/odbc.js-1980-  //we set a timeout because a previous db.close() may
/src/lib/odbc.js:1981:  //have caused the a behind the scenes db.open() to prepare
/src/lib/odbc.js-1982-  //a new connection
##############################################
/src/test/test-binding-connection-timeOut.js-19-  console.log('Connecting...');
/src/test/test-binding-connection-timeOut.js:20:  conn.open(common.connectionString, function (err) {
/src/test/test-binding-connection-timeOut.js-21-    //TODO: it would be nice if we could somehow
##############################################
/src/test/test-max-pool-size.js-16-console.log(elapsedTime(), "Started pool.open, populate a table MTAB1 of 130 rows.");
/src/test/test-max-pool-size.js:17:pool.open(connectionString, function( err, conn) {
/src/test/test-max-pool-size.js-18-    try { conn.querySync("drop table mtab1");
##############################################
/src/test/test-max-pool-size.js-54-      console.log("Opening connection #", connectionIndex);
/src/test/test-max-pool-size.js:55:      pool.open(connectionString, function (err, connection) {
/src/test/test-max-pool-size.js-56-        if (err) {
##############################################
/src/test/test-open-close.js-14-
/src/test/test-open-close.js:15:db.open(common.connectionString, function(err) {
/src/test/test-open-close.js-16-  assert.equal(err, null);
##############################################
/src/test/nodeEE-stress-async-waterfall.js-35-    {
/src/test/nodeEE-stress-async-waterfall.js:36:      db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-async-waterfall.js-37-        runQueries();
##############################################
/src/test/test-ibm-db-issue18.js-14-*/
/src/test/test-ibm-db-issue18.js:15:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue18.js-16-{
##############################################
/src/test/bench-insertBatch1000.js-7-
/src/test/bench-insertBatch1000.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch1000.js-9-	if (err) {
##############################################
/src/test/test-chinese-char.js-8-
/src/test/test-chinese-char.js:9:ibmdb.open(connStr,(err,conn)=>{
/src/test/test-chinese-char.js-10-  if(err){ console.log(err); return; }
##############################################
/src/test/test-queryResult.js-5-
/src/test/test-queryResult.js:6:ibmdb.open(cn, function (err,conn) {
/src/test/test-queryResult.js-7-    if (err) return console.log(err);
##############################################
/src/test/test-queryResult.js-23-
/src/test/test-queryResult.js:24:ibmdb.open(cn, function (err,conn) {
/src/test/test-queryResult.js-25-    if (err) return console.log(err);
##############################################
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-19-			
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:20:			db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-21-				runQueries(db, "T1Leak" + i);
##############################################
/src/test/test-multi-open-query-close.js-14-    
/src/test/test-multi-open-query-close.js:15:    db.open(common.connectionString, function(err) {
/src/test/test-multi-open-query-close.js-16-      if (err) {
##############################################
/src/test/nodeEE-leak-multiple-query-pool-connections.js-22-					console.log("Opening connection #", i);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:23:	        		pool.open(common.connectionString, function (err, connection) {
/src/test/nodeEE-leak-multiple-query-pool-connections.js-24-						if (err) 
##############################################
/src/test/test-bad-connection-string.js-14-  
/src/test/test-bad-connection-string.js:15:db.open("this is wrong", function(err) {
/src/test/test-bad-connection-string.js-16-  console.log(err);
##############################################
/src/test/bench-prepare-not.js-7-
/src/test/bench-prepare-not.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-not.js-9-  if (err) {
##############################################
/src/test/bench-prepare-bindSync-executeNonQuery.js-7-
/src/test/bench-prepare-bindSync-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bindSync-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/promise-test-open-close.js-10-
/src/test/promise-test-open-close.js:11:db.open(common.connectionString).then(function(res) {
/src/test/promise-test-open-close.js-12-  console.log("db = ", db);
##############################################
/src/test/test-domains-open.js-13-
/src/test/test-domains-open.js:14:   db.open("wrongConnectionString", function (error) {
/src/test/test-domains-open.js-15-      console.trace();
##############################################
/src/test/test-connection-object.js-6-
/src/test/test-connection-object.js:7:db.open(common.connectionObject, function(err){
/src/test/test-connection-object.js-8-  assert.equal(err, null);
##############################################
/src/test/test-pool-connect.js-13-      console.error("Opening connection #", connectionIndex);
/src/test/test-pool-connect.js:14:      pool.open(connectionString, function (err, connection) {
/src/test/test-pool-connect.js-15-        if (err) {
##############################################
/src/test/test-ibm-db-issue14.js-14-*/
/src/test/test-ibm-db-issue14.js:15:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue14.js-16-{
##############################################
/src/test/test-sp-resultset-execute.js-35-//ibmdb.debug(true);
/src/test/test-sp-resultset-execute.js:36:ibmdb.open(common.connectionString, {fetchMode : 3}, function (err, conn) {
/src/test/test-sp-resultset-execute.js-37-    if(err) { 
##############################################
/src/test/test-queryStream.js-22-
/src/test/test-queryStream.js:23:odbc.open(common.connectionString, function(err, conn) {
/src/test/test-queryStream.js-24-    if(err) return console.log(err);
##############################################
/src/test/bench-query.js-4-
/src/test/bench-query.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query.js-6-	if (err) {
##############################################
/src/test/test-fetch-apis.js-9-
/src/test/test-fetch-apis.js:10:ibmdb.open(cn,function(err,conn){
/src/test/test-fetch-apis.js-11-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/test/test-bad-pool-connection-issue-42.js-21-    }
/src/test/test-bad-pool-connection-issue-42.js:22:    pool.open(connectionString, function (err, connection) {
/src/test/test-bad-pool-connection-issue-42.js-23-        if (err) {
##############################################
/src/test/test-issue-get-column-value-2.js-14- 
/src/test/test-issue-get-column-value-2.js:15:  db.open(common.connectionString, function(err) {
/src/test/test-issue-get-column-value-2.js-16-    if (err) {
##############################################
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-35-					connections.push(db);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:36:					db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-37-						runQueries(db, "T1" + i, "T2" + i);
##############################################
/src/test/test-blob-file.js-10-
/src/test/test-blob-file.js:11:ibmdb.open(cn, function (err,conn) {
/src/test/test-blob-file.js-12-  if (err) {
##############################################
/src/test/test-blob-file.js-83-            fs.unlinkSync("doc2.docx");
/src/test/test-blob-file.js:84:            fs.unlink("trc2.fmt", function () { console.log('done'); });
/src/test/test-blob-file.js-85-          }
##############################################
/src/test/promise-test-all-data-types.js-5-
/src/test/promise-test-all-data-types.js:6:    ibmdb.open(cn).then(function(conn) {
/src/test/promise-test-all-data-types.js-7-      //conn.querySync("drop table mytab1");
##############################################
/src/test/test-basic-test.js-6-console.log("Trying to open a connection ... ");
/src/test/test-basic-test.js:7:ibmdb.open(cn, {"fetchMode": 3}, function(err, conn) { // 3 means FETCH_ARRARY
/src/test/test-basic-test.js-8-  if(err) console.log(err);
##############################################
/src/test/test-pool-rollbackTransaction.js-7-
/src/test/test-pool-rollbackTransaction.js:8:pool.open(cn, function (err, conn) {
/src/test/test-pool-rollbackTransaction.js-9-  if (err) {
##############################################
/src/test/test-call-stmt.js-10-var query = "CaLL " + schema + ".PROC1(?, ?, ?)";
/src/test/test-call-stmt.js:11:ibmdb.open(cn, function (err, conn)
/src/test/test-call-stmt.js-12-{
##############################################
/src/test/bench-insertBatch10000.js-7-
/src/test/bench-insertBatch10000.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch10000.js-9-	if (err) {
##############################################
/src/test/test-open-connectTimeout.js-13-
/src/test/test-open-connectTimeout.js:14:db.open(common.connectionString, function(err) {
/src/test/test-open-connectTimeout.js-15-  assert.equal(db.conn.connectTimeout, 10);
##############################################
/src/test/nodeEE-stress-mixed-query.js-13-	{
/src/test/nodeEE-stress-mixed-query.js:14:		db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-mixed-query.js-15-			runQueries();
##############################################
/src/test/test-issue253.js-11-
/src/test/test-issue253.js:12:ibmdb.open(cn, function (err,conn) {
/src/test/test-issue253.js-13-  if (err) console.log(err);
##############################################
/src/test/test-global-open-close.js-4-
/src/test/test-global-open-close.js:5:odbc.open(common.connectionString, function (err, conn) {
/src/test/test-global-open-close.js-6-  assert.equal(err, null);
##############################################
/src/test/bench-insertBatch100.js-7-
/src/test/bench-insertBatch100.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch100.js-9-	if (err) {
##############################################
/src/test/webapp.js-14-    var conn;
/src/test/webapp.js:15:    pool.open(cn, function(err, connection) {
/src/test/webapp.js-16-        if(err) return console.log(err);
##############################################
/src/test/webapp.js-20-}
/src/test/webapp.js:21:pool.open(cn, function(err, conn) {
/src/test/webapp.js-22-    if(err) {
##############################################
/src/test/test-sp-resultset.js-28-var result;
/src/test/test-sp-resultset.js:29:ibmdb.open(common.connectionString, {fetchMode : 3}, function (err, conn) {
/src/test/test-sp-resultset.js-30-    if(err) {
##############################################
/src/test/test-affected-rows.js-5-
/src/test/test-affected-rows.js:6:ibmdb.open(cn, function(err, conn) {
/src/test/test-affected-rows.js-7-  if(err) console.log(err);
##############################################
/src/test/test-pool-uncommited.js-27-
/src/test/test-pool-uncommited.js:28:pool.open(cn, request);
/src/test/test-pool-uncommited.js:29:pool.open(cn, request);
/src/test/test-pool-uncommited.js-30-setTimeout(function() {
/src/test/test-pool-uncommited.js:31:    pool.open(cn, request);
/src/test/test-pool-uncommited.js:32:    pool.open(cn, request);
/src/test/test-pool-uncommited.js-33-}, 8000);
##############################################
/src/test/test-blob-insert.js-14-
/src/test/test-blob-insert.js:15:ibmdb.open(cn, function (err,conn) {
/src/test/test-blob-insert.js-16-  if (err) {
##############################################
/src/test/test-blob-insert.js-91-            fs.unlinkSync(outputfile1);
/src/test/test-blob-insert.js:92:            fs.unlink(outputfile2, function () { console.log('done'); });
/src/test/test-blob-insert.js-93-          }
##############################################
/src/test/nodeEE-leak-huge-query.js-20-    initialMemHeap = util.inspect(process.memoryUsage().heapUsed);
/src/test/nodeEE-leak-huge-query.js:21:    db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-huge-query.js-22-      
##############################################
/src/test/test-blocking-issue210.js-15-console.log(elapsedTime(), "Started pool.open, populate a table MTAB1 of 2330 rows.");
/src/test/test-blocking-issue210.js:16:pool.open(connectionString, function( err, conn) {
/src/test/test-blocking-issue210.js-17-    try { conn.querySync("drop table mtab1");
##############################################
/src/test/test-blocking-issue210.js-49-console.log(elapsedTime(), "Opening connection #1");
/src/test/test-blocking-issue210.js:50:pool.open(connectionString, function (err, connection) {
/src/test/test-blocking-issue210.js-51-        console.log(elapsedTime(), "Connection 1 opened. Start execution of Query1");
##############################################
/src/test/test-blocking-issue210.js-66-});
/src/test/test-blocking-issue210.js:67:pool.open(connectionString, function (err, connection) {
/src/test/test-blocking-issue210.js-68-        console.log(elapsedTime(), "Connection 2 opened. Start execution of Query2");
##############################################
/src/test/bench-query-fetchAllSync.js-4-
/src/test/bench-query-fetchAllSync.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetchAllSync.js-6-  if (err) {
##############################################
/src/test/test-ibm-db-issue17.js-15-*/
/src/test/test-ibm-db-issue17.js:16:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue17.js-17-{
##############################################
/src/test/bench-query-fetch.js-4-
/src/test/bench-query-fetch.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetch.js-6-  if (err) {
##############################################
/src/test/test-executeFileSync.js-7-
/src/test/test-executeFileSync.js:8:ibmdb.open(cn, function (err, conn) {
/src/test/test-executeFileSync.js-9-    if (err) {
##############################################
/src/test/test-pool-idle-connection.js-12-console.log("Trying to open a new connection at => " + getDateTime());
/src/test/test-pool-idle-connection.js:13:pool.open(cn, function (err,conn) {
/src/test/test-pool-idle-connection.js-14-  if (err) console.log(err);
##############################################
/src/test/test-pool-idle-connection.js-29-      console.log("70 seconds elapesed, try to get connection from pool at ==> "+ starttime);
/src/test/test-pool-idle-connection.js:30:      pool.open(cn, function (err,conn) {
/src/test/test-pool-idle-connection.js-31-        if (err) return console.log(err);
##############################################
/src/test/test-pool-close.js-16-      console.error("Opening connection #", connectionIndex);
/src/test/test-pool-close.js:17:      pool.open(connectionString, function (err, connection) {
/src/test/test-pool-close.js-18-        //console.error("Opened connection #", connectionIndex);
##############################################
/src/test/test-pool-close.js-44-    const pool = new ibmdb.Pool();
/src/test/test-pool-close.js:45:    pool.open(connectionString, (err, conn) => {
/src/test/test-pool-close.js-46-        if (err) { console.log("err", err); return; }
##############################################
/src/test/bench-prepare-bind-executeNonQuery.js-6-
/src/test/bench-prepare-bind-executeNonQuery.js:7:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bind-executeNonQuery.js-8-  if (err) {
##############################################
/src/test/bench-prepare-bindSync-execute-closeSync.js-7-
/src/test/bench-prepare-bindSync-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bindSync-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/bench-prepare-bind-execute-closeSync.js-7-
/src/test/bench-prepare-bind-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bind-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/bench-prepare-execute-closeSync.js-7-
/src/test/bench-prepare-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/test-date.js-6-
/src/test/test-date.js:7:db.open(common.connectionString, function(err) {
/src/test/test-date.js-8-  assert.equal(err, null);
##############################################
/src/test/test-issue211.js-19-ibmdb.debug(true);
/src/test/test-issue211.js:20:ibmdb.open(cn, function(err, conn1) {
/src/test/test-issue211.js-21-  if (err) console.log(err);
##############################################
/src/test/test-issue211.js-33-  
/src/test/test-issue211.js:34:  ibmdb.open(cn, function(err, conn2) {
/src/test/test-issue211.js-35-      if (err) return console.log(err);
##############################################
/src/test/test-all-data-types.js-46-
/src/test/test-all-data-types.js:47:ibmdb.open(cn, function(err, conn) {
/src/test/test-all-data-types.js-48-  if(err) console.log(err);
##############################################
/src/test/bench-insert.js-4-
/src/test/bench-insert.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-insert.js-6-	if (err) {
##############################################
/src/test/test-xml-datatype.js-8-var query = "CaLL " + schema + ".PROC1(?, ?, ?)";
/src/test/test-xml-datatype.js:9:ibmdb.open(cn, function (err, conn) {
/src/test/test-xml-datatype.js-10-    if (err) console.log(err);
##############################################
/src/test/bench-query-fetchAll.js-4-
/src/test/bench-query-fetchAll.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetchAll.js-6-  if (err) {
##############################################
/src/test/test-query-insert.js-7-
/src/test/test-query-insert.js:8:db.open(common.connectionString, function(err) {
/src/test/test-query-insert.js-9-  common.dropTables(db, function () {
##############################################
/src/test/test-issue-54.js-19-
/src/test/test-issue-54.js:20:db.open(common.connectionString, function(err) {
/src/test/test-issue-54.js-21-  console.log(err || "Connected");
##############################################
/src/test/bench-querySync-fetchArray.js-4-
/src/test/bench-querySync-fetchArray.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-querySync-fetchArray.js-6-  if (err) {
##############################################
/src/test/disabled/test-param-select-with-booleans-only.js-6-
/src/test/disabled/test-param-select-with-booleans-only.js:7:db.open(common.testConnectionStrings[0].connectionString, function (err) {
/src/test/disabled/test-param-select-with-booleans-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-unicode.js-6-
/src/test/disabled/test-param-select-with-unicode.js:7:db.open(common.connectionString, function(err) {
/src/test/disabled/test-param-select-with-unicode.js-8-  db.query("select ? as UNICODETEXT", ['ף צ ץ ק ר ש תכ ך ל מ ם נ ן ס ע פ 電电電買买買開开開東东東車车車'], function (err, data) {
##############################################
/src/test/disabled/test-param-select-with-decimals-only.js-6-
/src/test/disabled/test-param-select-with-decimals-only.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-decimals-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js-6-
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js:7:db.open(common.connectionString, function(err){ 
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js-8-  if (err) {
##############################################
/src/test/disabled/test-param-select-with-nulls-mixed.js-6-
/src/test/disabled/test-param-select-with-nulls-mixed.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-nulls-mixed.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-strings-only.js-6-
/src/test/disabled/test-param-select-with-strings-only.js:7:db.open(common.testConnectionStrings[0].connectionString, function (err) {
/src/test/disabled/test-param-select-with-strings-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-null.js-6-
/src/test/disabled/test-param-select-with-null.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-null.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-numbers-mixed.js-6-
/src/test/disabled/test-param-select-with-numbers-mixed.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-numbers-mixed.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-open-dont-close.js-4-
/src/test/disabled/test-open-dont-close.js:5:db.open(common.connectionString, function(err) {
/src/test/disabled/test-open-dont-close.js-6-	console.error('db.open callback');
##############################################
/src/test/disabled/test-issue-13.js-4-
/src/test/disabled/test-issue-13.js:5:db.open(common.connectionString, function(err)
/src/test/disabled/test-issue-13.js-6-{
##############################################
/src/test/disabled/test-issue-13.js-11-
/src/test/disabled/test-issue-13.js:12:    require('http').createServer(function (req, res) {
/src/test/disabled/test-issue-13.js-13-		if (req.url == "/close") {
##############################################
/src/test/disabled/test-param-select-with-numbers-only.js-6-
/src/test/disabled/test-param-select-with-numbers-only.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-numbers-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-prepare-bind-executeNonQuery.js-7-
/src/test/disabled/test-prepare-bind-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/disabled/test-prepare-bind-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/nodeEE-leak-multiple-query.js-12-		initialMemHeap = util.inspect(process.memoryUsage().heapUsed);
/src/test/nodeEE-leak-multiple-query.js:13:		db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-multiple-query.js-14-			runQueries();
##############################################
/src/test/test-multi-open-close.js-14-
/src/test/test-multi-open-close.js:15:		db.open(common.connectionString, function(err) {
/src/test/test-multi-open-close.js-16-            assert.equal(err, null);
##############################################
/src/test/bench-insertBatch10.js-7-
/src/test/bench-insertBatch10.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch10.js-9-	if (err) {
##############################################
/src/test/bench-prepare-executeNonQuery.js-7-
/src/test/bench-prepare-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/test-call-async.js-10-if(schema == undefined) schema = "NEWTON";
/src/test/test-call-async.js:11:ibmdb.open(cn, function (err, conn)
/src/test/test-call-async.js-12-{
##############################################
/src/test/bench-querySync.js-4-
/src/test/bench-querySync.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-querySync.js-6-  if (err) {
##############################################
/src/test/sql-cli.js-4-
/src/test/sql-cli.js:5:db.open(common.connectionString, function(err)
/src/test/sql-cli.js-6-{
##############################################
/src/test/run-nodeEE.js-45-function doTest(file, connectionString) {
/src/test/run-nodeEE.js:46:  fs.open('logs/' + file + '.log', 'wx', function(err, fd) {
/src/test/run-nodeEE.js-47-    var test = spawn("node", ['--expose_gc',file, connectionString.connectionString], {stdio: ['pipe', fd, fd]})
##############################################
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-18-			connections.push(db);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:19:			db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-20-				runQueries(db, "T1" + i, "T2" + i);
##############################################
/src/installer/driverInstall.js-269-
/src/installer/driverInstall.js:270:        var file_name = url.parse(installerfileURL).pathname.split('/').pop();
/src/installer/driverInstall.js-271-        INSTALLER_FILE = path.resolve(DOWNLOAD_DIR, file_name);
##############################################
/src/installer/driverInstall.js-287-        if(platform == 'win32') {
/src/installer/driverInstall.js:288:            readStream = fs.createReadStream(INSTALLER_FILE);
/src/installer/driverInstall.js-289-
##############################################
/src/installer/driverInstall.js-398-                        
/src/installer/driverInstall.js:399:                        fs.readFile(ODBC_BINDINGS_VCXPROJ_FILE, 'utf8', function (err,data) {
/src/installer/driverInstall.js-400-                            if (err)
##############################################
/src/installer/driverInstall.js-411-                            
/src/installer/driverInstall.js:412:                            fs.writeFile(ODBC_BINDINGS_VCXPROJ_FILE, result, 'utf8', function (err) {
/src/installer/driverInstall.js-413-                                if (err)
##############################################
/src/installer/driverInstall.js-557-                removeDir('build');
/src/installer/driverInstall.js:558:                readStream = fs.createReadStream(BUILD_FILE);
/src/installer/driverInstall.js-559-                /*
##############################################
/src/APIDocumentation.md-9-**Database APIs**
/src/APIDocumentation.md:10:1.  [.open(connectionString, [options,] callback)](#openApi)
/src/APIDocumentation.md-11-2.  [.openSync(connectionString)](#openSyncApi)
##############################################
/src/APIDocumentation.md-47-
/src/APIDocumentation.md:48:### <a name="openApi"></a> 1) .open(connectionString, [options,] callback)
/src/APIDocumentation.md-49-
##############################################
/src/APIDocumentation.md-68-
/src/APIDocumentation.md:69:ibmdb.open(connStr, function (err, connection) {
/src/APIDocumentation.md-70-    if (err)
##############################################
/src/APIDocumentation.md-144-
/src/APIDocumentation.md:145:ibmdb.open(cn, function (err, conn) {
/src/APIDocumentation.md-146-    if (err) {
##############################################
/src/APIDocumentation.md-178-
/src/APIDocumentation.md:179:ibmdb.open(cn, function(err, conn){
/src/APIDocumentation.md-180-
##############################################
/src/APIDocumentation.md-202-
/src/APIDocumentation.md:203:ibmdb.open(cn, function(err, conn)
/src/APIDocumentation.md-204-{
##############################################
/src/APIDocumentation.md-236-	;
/src/APIDocumentation.md:237:ibmdb.open(cn, function (err,conn) {
/src/APIDocumentation.md-238-    if (err) return console.log(err);
##############################################
/src/APIDocumentation.md-268-
/src/APIDocumentation.md:269:ibmdb.open(cn, function(err, conn){
/src/APIDocumentation.md-270-  if (err) return console.log(err);
##############################################
/src/APIDocumentation.md-292-
/src/APIDocumentation.md:293:ibmdb.open(cn, function (err, conn) {
/src/APIDocumentation.md-294-	if (err) {
##############################################
/src/APIDocumentation.md-332-
/src/APIDocumentation.md:333:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-334-  conn.prepare("insert into hits (col1, col2) VALUES (?, ?)", function (err, stmt) {
##############################################
/src/APIDocumentation.md-364-
/src/APIDocumentation.md:365:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-366-  var stmt = conn.prepareSync("select * from employee where empid = ?");
##############################################
/src/APIDocumentation.md-407-
/src/APIDocumentation.md:408:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-409-  conn.querySync("create table mytab (id int, photo BLOB(30K))");
##############################################
/src/APIDocumentation.md-444-
/src/APIDocumentation.md:445:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-446-  var stmt = conn.prepareSync("select empname from emptable where empid = ?");
##############################################
/src/APIDocumentation.md-472-
/src/APIDocumentation.md:473:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-474-  conn.querySync("create table mytab (id int, text varchar(30))");
##############################################
/src/APIDocumentation.md-505-
/src/APIDocumentation.md:506:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-507-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/APIDocumentation.md-547-
/src/APIDocumentation.md:548:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-549-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/APIDocumentation.md-576-
/src/APIDocumentation.md:577:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-578-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/APIDocumentation.md-614-
/src/APIDocumentation.md:615:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-616-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/APIDocumentation.md-649-
/src/APIDocumentation.md:650:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-651-
##############################################
/src/APIDocumentation.md-684-
/src/APIDocumentation.md:685:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-686-
##############################################
/src/APIDocumentation.md-715-
/src/APIDocumentation.md:716:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-717-
##############################################
/src/APIDocumentation.md-750-
/src/APIDocumentation.md:751:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-752-
##############################################
/src/APIDocumentation.md-781-
/src/APIDocumentation.md:782:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-783-  conn.setIsolationLevel(2);  // SQL_TXN_READ_COMMITTED
##############################################
/src/APIDocumentation.md-882-
/src/APIDocumentation.md:883:ibmdb.open(cn, function(err, conn){
/src/APIDocumentation.md-884-    conn.executeFileSync('sample2.txt', '%','out.txt');
##############################################
/src/APIDocumentation.md-916-
/src/APIDocumentation.md:917:	ibmdb.open(conStr, function(err, conn) {
/src/APIDocumentation.md-918-		if(err) console.log(err);
##############################################
/src/APIDocumentation.md-958-the list of available connections immediately. Such connection will be used
/src/APIDocumentation.md:959:the next time you call `Pool.open()` for the same connection string.
/src/APIDocumentation.md-960-
##############################################
/src/APIDocumentation.md-963-
/src/APIDocumentation.md:964:1.  [.open(connectionString, callback)](#openPoolApi)
/src/APIDocumentation.md-965-2.  [.close(callback)](#closePoolApi)
##############################################
/src/APIDocumentation.md-968-
/src/APIDocumentation.md:969:### <a name="openPoolApi"></a> 1) .open(connectionString, callback)
/src/APIDocumentation.md-970-
##############################################
/src/APIDocumentation.md-980-
/src/APIDocumentation.md:981:pool.open(cn, function (err, db) {
/src/APIDocumentation.md-982-	if (err) {
##############################################
/src/APIDocumentation.md-988-	//a connection to `cn` will be re-opened silently behind the scene
/src/APIDocumentation.md:989:	//and will be ready the next time we do `pool.open(cn)`
/src/APIDocumentation.md-990-});
##############################################
/src/APIDocumentation.md-1003-
/src/APIDocumentation.md:1004:pool.open(cn, function (err, db) {
/src/APIDocumentation.md-1005-	if (err) {
##############################################
/src/APIDocumentation.md-1031-
/src/APIDocumentation.md:1032:pool.open(connStr, function(err, db) { ...
/src/APIDocumentation.md-1033-```
##############################################
/src/APIDocumentation.md-1041-pool.setMaxPoolSize(20);
/src/APIDocumentation.md:1042:pool.open(connStr, function(err, db) { ...
/src/APIDocumentation.md-1043-```
