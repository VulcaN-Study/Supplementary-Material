/src/examples/describe.js-10-//open a connection to the database
/src/examples/describe.js:11:db.open("DSN=myDsnName;UID=myUserName;PWD=mySuperSecretPassword;DATABASE=myAwesomeDatabase", function(err)
/src/examples/describe.js-12-{
##############################################
/src/examples/params.js-11-//open a connection to the database
/src/examples/params.js:12:db.open("DSN=myDsnName;UID=myUserName;PWD=mySuperSecretPassword;DATABASE=myAwesomeDatabase;CHARSET=UTF8", function(err)
/src/examples/params.js-13-{
##############################################
/src/examples/params.js-27-    
/src/examples/params.js:28:    db.query("select ? as a, ? as b, ? as c, ? as d, ? as e", [null, 4711, true, -3.14, 'string'], function (error, result, info) {
/src/examples/params.js-29-        console.log("some random parameters");
##############################################
/src/examples/params.js-38-    
/src/examples/params.js:39:    db.query("select ?", ['áäàéêèóöòüßÄÖÜ€'], function (error, result) {
/src/examples/params.js-40-        console.log("some non-ASCII characters");
##############################################
/src/README.md-177-
/src/README.md:178:ibmdb.open("DATABASE=<dbname>;HOSTNAME=<myhost>;UID=db2user;PWD=password;PORT=<dbport>;PROTOCOL=TCPIP", function (err,conn) {
/src/README.md-179-  if (err) return console.log(err);
/src/README.md-180-  
/src/README.md:181:  conn.query('select 1 from sysibm.sysdummy1', function (err, data) {
/src/README.md-182-    if (err) console.log(err);
##############################################
/src/README.md-262-```javascript
/src/README.md:263:require("ibm_db").open(connectionString, function (err, conn){
/src/README.md-264-  //conn is already open now if err is falsy
##############################################
/src/lib/odbc.js-88-    deferred = Q.defer();
/src/lib/odbc.js:89:    db.open(connStr, function(err) {
/src/lib/odbc.js-90-      if (err)
##############################################
/src/lib/odbc.js-109-
/src/lib/odbc.js:110:  db.open(connStr, function (err) {
/src/lib/odbc.js-111-    cb && cb(err, db);
##############################################
/src/lib/odbc.js-307-
/src/lib/odbc.js:308:  self.odbc.createConnection(function (err, conn) {
/src/lib/odbc.js-309-    if(!cb)
##############################################
/src/lib/odbc.js-327-
/src/lib/odbc.js:328:    self.conn.open(connStr, function (err, result)
/src/lib/odbc.js-329-    {
##############################################
/src/lib/odbc.js-606-        query.params = params;
/src/lib/odbc.js:607:        self.conn.query(query, cbQuery);
/src/lib/odbc.js-608-      }
/src/lib/odbc.js-609-      else
/src/lib/odbc.js:610:        self.conn.query(query, params, cbQuery);
/src/lib/odbc.js-611-    }
##############################################
/src/lib/odbc.js-613-    {
/src/lib/odbc.js:614:      self.conn.query(query, cbQuery);
/src/lib/odbc.js-615-    }
##############################################
/src/lib/odbc.js-648-  self.queue.push(function (next) {
/src/lib/odbc.js:649:    //ODBCConnection.query() is the fastest-path querying mechanism.
/src/lib/odbc.js-650-    if (!self.connected)
##############################################
/src/lib/odbc.js-668-        query.params = params;
/src/lib/odbc.js:669:        self.conn.query(query, cbQuery);
/src/lib/odbc.js-670-      }
/src/lib/odbc.js-671-      else
/src/lib/odbc.js:672:        self.conn.query(sql, params, cbQuery);
/src/lib/odbc.js-673-    }
##############################################
/src/lib/odbc.js-675-    {
/src/lib/odbc.js:676:      self.conn.query(sql, cbQuery);
/src/lib/odbc.js-677-    }
##############################################
/src/lib/odbc.js-1820-
/src/lib/odbc.js:1821:    db.open(connStr, function (error) {
/src/lib/odbc.js-1822-      exports.debug && console.log("%s odbc.js : pool[%s] : pool.db.open new connection.", getElapsedTime(), self.index);
##############################################
/src/lib/odbc.js-1980-  //we set a timeout because a previous db.close() may
/src/lib/odbc.js:1981:  //have caused the a behind the scenes db.open() to prepare
/src/lib/odbc.js-1982-  //a new connection
##############################################
/src/test/test-binding-connection-timeOut.js-7-
/src/test/test-binding-connection-timeOut.js:8:db.createConnection(function (err, conn) {
/src/test/test-binding-connection-timeOut.js-9-  //connectionTimeout should be 30 by default as set in C++
##############################################
/src/test/test-binding-connection-timeOut.js-19-  console.log('Connecting...');
/src/test/test-binding-connection-timeOut.js:20:  conn.open(common.connectionString, function (err) {
/src/test/test-binding-connection-timeOut.js-21-    //TODO: it would be nice if we could somehow
##############################################
/src/test/test-max-pool-size.js-16-console.log(elapsedTime(), "Started pool.open, populate a table MTAB1 of 130 rows.");
/src/test/test-max-pool-size.js:17:pool.open(connectionString, function( err, conn) {
/src/test/test-max-pool-size.js-18-    try { conn.querySync("drop table mtab1");
##############################################
/src/test/test-max-pool-size.js-54-      console.log("Opening connection #", connectionIndex);
/src/test/test-max-pool-size.js:55:      pool.open(connectionString, function (err, connection) {
/src/test/test-max-pool-size.js-56-        if (err) {
##############################################
/src/test/test-max-pool-size.js-67-        var startTime = new Date();
/src/test/test-max-pool-size.js:68:        connection.query("select c1, c2 from mtab1", function(err, data) {
/src/test/test-max-pool-size.js-69-            if(err) console.log(err);
##############################################
/src/test/test-open-close.js-7-
/src/test/test-open-close.js:8:db.query("select * from " + common.tableName, function (err, rs, sqlca) {
/src/test/test-open-close.js-9-  assert.deepEqual(err.message, 'Connection not open.');
##############################################
/src/test/test-open-close.js-14-
/src/test/test-open-close.js:15:db.open(common.connectionString, function(err) {
/src/test/test-open-close.js-16-  assert.equal(err, null);
##############################################
/src/test/test-open-close.js-21-    
/src/test/test-open-close.js:22:    db.query("select * from " + common.tableName, function (err, rs, sqlca) {
/src/test/test-open-close.js-23-      assert.deepEqual(err.message, 'Connection not open.');
##############################################
/src/test/nodeEE-stress-async-waterfall.js-35-    {
/src/test/nodeEE-stress-async-waterfall.js:36:      db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-async-waterfall.js-37-        runQueries();
##############################################
/src/test/nodeEE-stress-async-waterfall.js-52-  {
/src/test/nodeEE-stress-async-waterfall.js:53:    db.query("create table " + tableOne + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-stress-async-waterfall.js-54-      if (err == null)
##############################################
/src/test/nodeEE-stress-async-waterfall.js-64-      
/src/test/nodeEE-stress-async-waterfall.js:65:    db.query("create table " + tableTwo + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-stress-async-waterfall.js-66-      if (err == null)
##############################################
/src/test/nodeEE-stress-async-waterfall.js-76-      
/src/test/nodeEE-stress-async-waterfall.js:77:    db.query("INSERT into " + tableOne + " values (1, 'PersonA', 'LastNameA', 'QA')", icback);
/src/test/nodeEE-stress-async-waterfall.js:78:    db.query("INSERT into " + tableOne + " values (2, 'PersonB', 'LastNameB', 'Dev')", icback);
/src/test/nodeEE-stress-async-waterfall.js:79:    db.query("INSERT into " + tableOne + " values (3, 'PersonC', 'LastNameC', 'QA')", icback);
/src/test/nodeEE-stress-async-waterfall.js:80:    db.query("INSERT into " + tableOne + " values (4, 'PersonD', 'LastNameD', 'QA')", icback);
/src/test/nodeEE-stress-async-waterfall.js:81:    db.query("INSERT into " + tableOne + " values (5, 'PersonE', 'LastNameE', 'QA')", icback);
/src/test/nodeEE-stress-async-waterfall.js-82-    
/src/test/nodeEE-stress-async-waterfall.js:83:    db.query("INSERT into " + tableTwo + " values (6, 'PersonF', 'LastNameF', 'QA Lead')", icback);
/src/test/nodeEE-stress-async-waterfall.js:84:    db.query("INSERT into " + tableTwo + " values (7, 'PersonG', 'LastNameG', 'Dev Lead')", icback);
/src/test/nodeEE-stress-async-waterfall.js-85-    
/src/test/nodeEE-stress-async-waterfall.js:86:    db.query("SELECT * from " + tableOne, scback.bind({expected: expected1}));
/src/test/nodeEE-stress-async-waterfall.js:87:    db.query("SELECT * from " + tableTwo, scback.bind({expected: expected2}));
/src/test/nodeEE-stress-async-waterfall.js-88-    
/src/test/nodeEE-stress-async-waterfall.js:89:    db.query("UPDATE " + tableOne + " SET C3 = 'QA Intern' where C2 = 'LastNameD'", ucback);
/src/test/nodeEE-stress-async-waterfall.js:90:    db.query("SELECT * from " + tableOne + " where C3 = 'QA Intern'", scback.bind({expected: expected3}));
/src/test/nodeEE-stress-async-waterfall.js-91-    
/src/test/nodeEE-stress-async-waterfall.js:92:    db.query("DELETE from " + tableTwo + " where PID = 7", dcback);
/src/test/nodeEE-stress-async-waterfall.js:93:    db.query("SELECT * from " + tableTwo + " where PID = 7", scback.bind({expected: []}));
/src/test/nodeEE-stress-async-waterfall.js:94:    db.query("DROP table " + tableTwo, drcback); 
/src/test/nodeEE-stress-async-waterfall.js:95:    db.query("SELECT tabname from syscat.tables where tabschema='ELKOREHP' and TABNAME='" + tableTwo + "'", scback.bind({expected: []}));
/src/test/nodeEE-stress-async-waterfall.js:96:    db.query("DELETE from " + tableOne + " where PID = 5", dcback);
/src/test/nodeEE-stress-async-waterfall.js:97:    db.query("SELECT * from " + tableOne + " where PID = 5", scback.bind({expected: []}));
/src/test/nodeEE-stress-async-waterfall.js:98:    db.query("DROP table " + tableOne, drcback);
/src/test/nodeEE-stress-async-waterfall.js:99:    db.query("SELECT tabname from syscat.tables where tabschema='ELKOREHP' and TABNAME='" + tableOne + "'", scback.bind({expected: []}));
/src/test/nodeEE-stress-async-waterfall.js-100-    closeConnection();
##############################################
/src/test/test-ibm-db-issue18.js-14-*/
/src/test/test-ibm-db-issue18.js:15:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue18.js-16-{
##############################################
/src/test/test-ibm-db-issue18.js-28-		*/
/src/test/test-ibm-db-issue18.js:29:		conn.query("SELECT TIMESTAMP_FORMAT('1999-12-31 23:59:59.123', 'YYYY-MM-DD HH24:MI:SS.FF') AS TD FROM SYSIBM.SYSDUMMY1;", function(err, nodetest, moreResultSets) {
/src/test/test-ibm-db-issue18.js-30-		
##############################################
/src/test/bench-insertBatch1000.js-7-
/src/test/bench-insertBatch1000.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch1000.js-9-	if (err) {
##############################################
/src/test/bench-insertBatch1000.js-25-function createTable() {
/src/test/bench-insertBatch1000.js:26:	db.query("create table bench_insert (str varchar(50))", function (err) {
/src/test/bench-insertBatch1000.js-27-		if (err) {
##############################################
/src/test/bench-insertBatch1000.js-51-	for (var x = 0; x < iterations; x++) {
/src/test/bench-insertBatch1000.js:52:		db.query(insertString, cb);
/src/test/bench-insertBatch1000.js-53-		
##############################################
/src/test/test-chinese-char.js-8-
/src/test/test-chinese-char.js:9:ibmdb.open(connStr,(err,conn)=>{
/src/test/test-chinese-char.js-10-  if(err){ console.log(err); return; }
##############################################
/src/test/test-chinese-char.js-19-  stmt.closeSync();
/src/test/test-chinese-char.js:20:  conn.query(sql, function(err, data) { // Insert Row3
/src/test/test-chinese-char.js-21-    if(err){ console.log(err); return; }
##############################################
/src/test/test-queryResult.js-5-
/src/test/test-queryResult.js:6:ibmdb.open(cn, function (err,conn) {
/src/test/test-queryResult.js-7-    if (err) return console.log(err);
##############################################
/src/test/test-queryResult.js-23-
/src/test/test-queryResult.js:24:ibmdb.open(cn, function (err,conn) {
/src/test/test-queryResult.js-25-    if (err) return console.log(err);
##############################################
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-19-			
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:20:			db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-21-				runQueries(db, "T1Leak" + i);
##############################################
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-35-	{
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:36:		db.query("create table "+ tableName + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-37-			if (err == null)
##############################################
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-47-				
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:48:		db.query("INSERT into " + tableName + " values (1, 'PersonA', 'LastNameA', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:49:		db.query("INSERT into " + tableName + " values (2, 'PersonB', 'LastNameB', 'Dev')", icback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:50:		db.query("INSERT into " + tableName + " values (3, 'PersonC', 'LastNameC', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:51:		db.query("INSERT into " + tableName + " values (4, 'PersonD', 'LastNameD', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:52:		db.query("INSERT into " + tableName + " values (5, 'PersonE', 'LastNameE', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-53-		
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:54:		db.query("SELECT * from " + tableName, scback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-55-		
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:56:		db.query("UPDATE " + tableName + " SET C3 = 'QA Intern' where C2 = 'LastNameD'", ucback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:57:		db.query("SELECT * from " + tableName + " where C3 = 'QA Intern'", scback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:58:		db.query("SELECT count(*) from " + tableName + " where PID = 7", scback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:59:		db.query("DELETE from " + tableName + " where PID = 5", dcback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:60:		db.query("INSERT into " + tableName + " values (6, 'PersonF', 'LastNameF', 'QA Lead')", icback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:61:		db.query("SELECT * from " + tableName + " where PID = 5", scback);
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:62:		db.query("DROP table " + tableName, drcback.bind({tableName: tableName}));
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-63-	}
##############################################
/src/test/test-multi-open-query-close.js-14-    
/src/test/test-multi-open-query-close.js:15:    db.open(common.connectionString, function(err) {
/src/test/test-multi-open-query-close.js-16-      if (err) {
##############################################
/src/test/test-multi-open-query-close.js-41-    
/src/test/test-multi-open-query-close.js:42:    db.query(query, function (err, rows, moreResultSets) {
/src/test/test-multi-open-query-close.js-43-             
##############################################
/src/test/nodeEE-leak-multiple-query-pool-connections.js-22-					console.log("Opening connection #", i);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:23:	        		pool.open(common.connectionString, function (err, connection) {
/src/test/nodeEE-leak-multiple-query-pool-connections.js-24-						if (err) 
##############################################
/src/test/nodeEE-leak-multiple-query-pool-connections.js-48-	{
/src/test/nodeEE-leak-multiple-query-pool-connections.js:49:		connection.query("create table "+ tableName + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-leak-multiple-query-pool-connections.js-50-			if (err == null)
##############################################
/src/test/nodeEE-leak-multiple-query-pool-connections.js-59-		});
/src/test/nodeEE-leak-multiple-query-pool-connections.js:60:		connection.query("INSERT into " + tableName + " values (1, 'PersonA', 'LastNameA', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:61:		connection.query("INSERT into " + tableName + " values (2, 'PersonB', 'LastNameB', 'Dev')", icback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:62:		connection.query("INSERT into " + tableName + " values (3, 'PersonC', 'LastNameC', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:63:		connection.query("INSERT into " + tableName + " values (4, 'PersonD', 'LastNameD', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:64:		connection.query("INSERT into " + tableName + " values (5, 'PersonE', 'LastNameE', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js-65-				
/src/test/nodeEE-leak-multiple-query-pool-connections.js:66:		connection.query("SELECT * from " + tableName, scback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js-67-				
/src/test/nodeEE-leak-multiple-query-pool-connections.js:68:		connection.query("UPDATE " + tableName + " SET C3 = 'QA Intern' where C2 = 'LastNameD'", ucback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:69:		connection.query("SELECT * from " + tableName + " where C3 = 'QA Intern'", scback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:70:		connection.query("SELECT count(*) from " + tableName + " where PID = 7", scback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:71:		connection.query("DELETE from " + tableName + " where PID = 5", dcback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:72:		connection.query("INSERT into " + tableName + " values (6, 'PersonF', 'LastNameF', 'QA Lead')", icback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:73:		connection.query("SELECT * from " + tableName + " where PID = 5", scback);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:74:		connection.query("DROP table " + tableName, drcback.bind({tableName: tableName}));
/src/test/nodeEE-leak-multiple-query-pool-connections.js-75-	}
##############################################
/src/test/test-bad-connection-string.js-14-  
/src/test/test-bad-connection-string.js:15:db.open("this is wrong", function(err) {
/src/test/test-bad-connection-string.js-16-  console.log(err);
##############################################
/src/test/bench-prepare-not.js-7-
/src/test/bench-prepare-not.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-not.js-9-  if (err) {
##############################################
/src/test/bench-prepare-not.js-23-  for (var x = 0; x < iterations; x++) {
/src/test/bench-prepare-not.js:24:    db.query("select 1 + ? as test from sysibm.sysdummy1", [1], cb);
/src/test/bench-prepare-not.js-25-  }
##############################################
/src/test/bench-prepare-bindSync-executeNonQuery.js-7-
/src/test/bench-prepare-bindSync-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bindSync-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/promise-test-open-close.js-5-
/src/test/promise-test-open-close.js:6:db.query("select * from " + common.tableName).then(null, function (err) {
/src/test/promise-test-open-close.js-7-  assert.deepEqual(err, { message: 'Connection not open.' });
##############################################
/src/test/promise-test-open-close.js-10-
/src/test/promise-test-open-close.js:11:db.open(common.connectionString).then(function(res) {
/src/test/promise-test-open-close.js-12-  console.log("db = ", db);
/src/test/promise-test-open-close.js-13-  assert.equal(db.connected, true);
/src/test/promise-test-open-close.js:14:  db.query("select * from " + common.tableName).then(null, function (err) {
/src/test/promise-test-open-close.js-15-	var errorFound = false;
##############################################
/src/test/promise-test-open-close.js-24-
/src/test/promise-test-open-close.js:25:      db.query("select * from " + common.tableName).then(null, function (err) {
/src/test/promise-test-open-close.js-26-	    if(err) console.log(err);
##############################################
/src/test/test-promisified-connection-pool.js-13-//       //         console.log("connection opened.");
/src/test/test-promisified-connection-pool.js:14://       //         conn.query('select 1 from sysibm.sysdummy1', function (err, data) {
/src/test/test-promisified-connection-pool.js-15-//       //             if (err) console.log(err);
##############################################
/src/test/test-closed.js-8-
/src/test/test-closed.js:9:db.query("select * from test", function (err, rs, sqlca) {
/src/test/test-closed.js-10-  assert.deepEqual(err.message, 'Connection not open.');
##############################################
/src/test/test-domains-open.js-13-
/src/test/test-domains-open.js:14:   db.open("wrongConnectionString", function (error) {
/src/test/test-domains-open.js-15-      console.trace();
##############################################
/src/test/test-connection-object.js-6-
/src/test/test-connection-object.js:7:db.open(common.connectionObject, function(err){
/src/test/test-connection-object.js-8-  assert.equal(err, null);
##############################################
/src/test/test-query-select.js-8-
/src/test/test-query-select.js:9:db.query("select 1 as \"COLINT\", 'some test' as \"COLTEXT\" FROM SYSIBM.SYSDUMMY1", function (err, data) {
/src/test/test-query-select.js-10-  db.closeSync();
##############################################
/src/test/test-pool-connect.js-13-      console.error("Opening connection #", connectionIndex);
/src/test/test-pool-connect.js:14:      pool.open(connectionString, function (err, connection) {
/src/test/test-pool-connect.js-15-        if (err) {
##############################################
/src/test/test-ibm-db-issue14.js-14-*/
/src/test/test-ibm-db-issue14.js:15:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue14.js-16-{
##############################################
/src/test/test-ibm-db-issue14.js-35-		*/
/src/test/test-ibm-db-issue14.js:36:		conn.query("SELECT * FROM " + testTable, function(err, nodetest, moreResultSets) {
/src/test/test-ibm-db-issue14.js-37-			console.log("COLINT\tTESTVALUE");
##############################################
/src/test/test-sp-resultset-execute.js-35-//ibmdb.debug(true);
/src/test/test-sp-resultset-execute.js:36:ibmdb.open(common.connectionString, {fetchMode : 3}, function (err, conn) {
/src/test/test-sp-resultset-execute.js-37-    if(err) { 
##############################################
/src/test/test-queryStream.js-22-
/src/test/test-queryStream.js:23:odbc.open(common.connectionString, function(err, conn) {
/src/test/test-queryStream.js-24-    if(err) return console.log(err);
##############################################
/src/test/test-query-select-fetchMode-array.js-10-
/src/test/test-query-select-fetchMode-array.js:11:db.query("select 1 as COLINT, 'some test' as COLTEXT FROM SYSIBM.SYSDUMMY1", function (err, data) {
/src/test/test-query-select-fetchMode-array.js-12-  assert.equal(err, null);
##############################################
/src/test/bench-query.js-4-
/src/test/bench-query.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query.js-6-	if (err) {
##############################################
/src/test/bench-query.js-20-	for (var x = 0; x < iterations; x++) {
/src/test/bench-query.js:21:		db.query("select 1 + 1 as test from sysibm.sysdummy1", cb);
/src/test/bench-query.js-22-	}
##############################################
/src/test/test-fetch-apis.js-9-
/src/test/test-fetch-apis.js:10:ibmdb.open(cn,function(err,conn){
/src/test/test-fetch-apis.js-11-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/test/test-bad-pool-connection-issue-42.js-21-    }
/src/test/test-bad-pool-connection-issue-42.js:22:    pool.open(connectionString, function (err, connection) {
/src/test/test-bad-pool-connection-issue-42.js-23-        if (err) {
##############################################
/src/test/test-issue-get-column-value-2.js-14- 
/src/test/test-issue-get-column-value-2.js:15:  db.open(common.connectionString, function(err) {
/src/test/test-issue-get-column-value-2.js-16-    if (err) {
##############################################
/src/test/test-issue-get-column-value-2.js-22-    db.describe({database: 'SAMPLE', schema: 'AVINASH', table: common.tableName }, function (err, rows) {
/src/test/test-issue-get-column-value-2.js:23://    db.query("select * from " + common.tableName, function (err, rows) {
/src/test/test-issue-get-column-value-2.js-24-      if (err) {
##############################################
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-35-					connections.push(db);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:36:					db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-37-						runQueries(db, "T1" + i, "T2" + i);
##############################################
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-54-	{
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:55:		db.query("create table " + tableOne + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-56-			if (err == null)
##############################################
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-66-			
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:67:		db.query("create table " + tableTwo + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-68-			if (err == null)
##############################################
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-78-				
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:79:		db.query("INSERT into " + tableOne + " values (1, 'PersonA', 'LastNameA', 'QA')", icback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:80:		db.query("INSERT into " + tableOne + " values (2, 'PersonB', 'LastNameB', 'Dev')", icback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:81:		db.query("INSERT into " + tableOne + " values (3, 'PersonC', 'LastNameC', 'QA')", icback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:82:		db.query("INSERT into " + tableOne + " values (4, 'PersonD', 'LastNameD', 'QA')", icback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:83:		db.query("INSERT into " + tableOne + " values (5, 'PersonE', 'LastNameE', 'QA')", icback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-84-		
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:85:		db.query("INSERT into " + tableTwo + " values (6, 'PersonF', 'LastNameF', 'QA Lead')", icback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:86:		db.query("INSERT into " + tableTwo + " values (7, 'PersonG', 'LastNameG', 'Dev Lead')", icback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-87-		
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:88:		db.query("SELECT * from " + tableOne, scback.bind({expected: expected1}));
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:89:		db.query("SELECT * from " + tableTwo , scback.bind({expected: expected2}));
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-90-		
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:91:		db.query("UPDATE " + tableOne + " SET C3 = 'QA Intern' where C2 = 'LastNameD'", ucback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:92:		db.query("SELECT * from " + tableOne + " where C3 = 'QA Intern'", scback.bind({expected: expected3}));
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-93-		
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:94:		db.query("DELETE from " + tableTwo + " where PID = 7", dcback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:95:		db.query("SELECT * from " + tableTwo + " where PID = 7", scback.bind({expected: []}));
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:96:		db.query("DROP table " + tableTwo, drcback.bind({tableName: tableTwo})); 
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:97:		db.query("SELECT tabname from syscat.tables where tabschema='ELKOREHP' and TABNAME='" + tableTwo + "'", scback.bind({expected: []}));
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:98:		db.query("DELETE from " + tableOne + " where PID = 5", dcback);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:99:		db.query("SELECT * from " + tableOne + " where PID = 5", scback.bind({expected: []}));
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:100:		db.query("DROP table " + tableOne , drcback.bind({tableName: tableTwo}));
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:101:		db.query("SELECT tabname from syscat.tables where tabschema='ELKOREHP' and TABNAME='" + tableOne + "'", scback.bind({expected: []}));
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-102-		
##############################################
/src/test/test-blob-file.js-10-
/src/test/test-blob-file.js:11:ibmdb.open(cn, function (err,conn) {
/src/test/test-blob-file.js-12-  if (err) {
##############################################
/src/test/test-blob-file.js-83-            fs.unlinkSync("doc2.docx");
/src/test/test-blob-file.js:84:            fs.unlink("trc2.fmt", function () { console.log('done'); });
/src/test/test-blob-file.js-85-          }
##############################################
/src/test/promise-test-all-data-types.js-5-
/src/test/promise-test-all-data-types.js:6:    ibmdb.open(cn).then(function(conn) {
/src/test/promise-test-all-data-types.js-7-      //conn.querySync("drop table mytab1");
##############################################
/src/test/promise-test-all-data-types.js-14-      conn.querySync("insert into mytab1 values (1, 2, 456736789, 1234, 67.98, 5689, 56.2390, 34567890, 45.234, 'bimal', 'kumar', '\x50', 'jha123456', '2015-09-10', '10:16:33', '2015-09-10 10:16:33.770139', BLOB(x'616263'))");
/src/test/promise-test-all-data-types.js:15:      conn.query("select * from mytab1").then(function(data) {
/src/test/promise-test-all-data-types.js-16-        console.log(data);
##############################################
/src/test/test-basic-test.js-6-console.log("Trying to open a connection ... ");
/src/test/test-basic-test.js:7:ibmdb.open(cn, {"fetchMode": 3}, function(err, conn) { // 3 means FETCH_ARRARY
/src/test/test-basic-test.js-8-  if(err) console.log(err);
##############################################
/src/test/test-basic-test.js-16-  conn.querySync("insert into mytab1 values ( 4, 'für')");
/src/test/test-basic-test.js:17:  conn.query('select 1, 4, 5 from sysibm.sysdummy1;', function (err, data) {
/src/test/test-basic-test.js-18-    if (err) {
##############################################
/src/test/test-basic-test.js-21-      console.log(data);
/src/test/test-basic-test.js:22:      conn.query('select * from mytab1 where c1 = 2;', function (err, data) {
/src/test/test-basic-test.js-23-        if (err) {
##############################################
/src/test/test-basic-test.js-26-          console.log(data);
/src/test/test-basic-test.js:27:          conn.query('select 3,7,8 from sysibm.sysdummy1', [23], function (err, data) {
/src/test/test-basic-test.js-28-            if (err) {
##############################################
/src/test/test-pool-rollbackTransaction.js-7-
/src/test/test-pool-rollbackTransaction.js:8:pool.open(cn, function (err, conn) {
/src/test/test-pool-rollbackTransaction.js-9-  if (err) {
##############################################
/src/test/test-call-stmt.js-10-var query = "CaLL " + schema + ".PROC1(?, ?, ?)";
/src/test/test-call-stmt.js:11:ibmdb.open(cn, function (err, conn)
/src/test/test-call-stmt.js-12-{
##############################################
/src/test/bench-insertBatch10000.js-7-
/src/test/bench-insertBatch10000.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch10000.js-9-	if (err) {
##############################################
/src/test/bench-insertBatch10000.js-25-function createTable() {
/src/test/bench-insertBatch10000.js:26:	db.query("create table bench_insert (str varchar(50))", function (err) {
/src/test/bench-insertBatch10000.js-27-		if (err) {
##############################################
/src/test/bench-insertBatch10000.js-51-	for (var x = 0; x < iterations; x++) {
/src/test/bench-insertBatch10000.js:52:		db.query(insertString, cb);
/src/test/bench-insertBatch10000.js-53-		
##############################################
/src/test/test-open-connectTimeout.js-13-
/src/test/test-open-connectTimeout.js:14:db.open(common.connectionString, function(err) {
/src/test/test-open-connectTimeout.js-15-  assert.equal(db.conn.connectTimeout, 10);
##############################################
/src/test/test-open-connectTimeout.js-24-    
/src/test/test-open-connectTimeout.js:25:    db.query("select * from " + common.tableName, function (err, rs, sqlca) {
/src/test/test-open-connectTimeout.js-26-      assert.deepEqual(err.message, 'Connection not open.');
##############################################
/src/test/nodeEE-stress-mixed-query.js-13-	{
/src/test/nodeEE-stress-mixed-query.js:14:		db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-mixed-query.js-15-			runQueries();
##############################################
/src/test/nodeEE-stress-mixed-query.js-28-	{
/src/test/nodeEE-stress-mixed-query.js:29:		db.query("create table " + tableOne + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-stress-mixed-query.js-30-			if (err == null)
##############################################
/src/test/nodeEE-stress-mixed-query.js-40-			
/src/test/nodeEE-stress-mixed-query.js:41:		db.query("create table " + tableTwo + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-stress-mixed-query.js-42-			if (err == null)
##############################################
/src/test/nodeEE-stress-mixed-query.js-52-			
/src/test/nodeEE-stress-mixed-query.js:53:		db.query("INSERT into " + tableOne + " values (1, 'PersonA', 'LastNameA', 'QA')", icback);
/src/test/nodeEE-stress-mixed-query.js:54:		db.query("INSERT into " + tableOne + " values (2, 'PersonB', 'LastNameB', 'Dev')", icback);
/src/test/nodeEE-stress-mixed-query.js:55:		db.query("INSERT into " + tableOne + " values (3, 'PersonC', 'LastNameC', 'QA')", icback);
/src/test/nodeEE-stress-mixed-query.js:56:		db.query("INSERT into " + tableOne + " values (4, 'PersonD', 'LastNameD', 'QA')", icback);
/src/test/nodeEE-stress-mixed-query.js:57:		db.query("INSERT into " + tableOne + " values (5, 'PersonE', 'LastNameE', 'QA')", icback);
/src/test/nodeEE-stress-mixed-query.js-58-		
/src/test/nodeEE-stress-mixed-query.js:59:		db.query("INSERT into " + tableTwo + " values (6, 'PersonF', 'LastNameF', 'QA Lead')", icback);
/src/test/nodeEE-stress-mixed-query.js:60:		db.query("INSERT into " + tableTwo + " values (7, 'PersonG', 'LastNameG', 'Dev Lead')", icback);
/src/test/nodeEE-stress-mixed-query.js-61-		
/src/test/nodeEE-stress-mixed-query.js:62:		db.query("SELECT * from " + tableOne, scback.bind({done: false, expected: expected1}));
/src/test/nodeEE-stress-mixed-query.js:63:		db.query("SELECT * from " + tableTwo, scback.bind({done: false, expected: expected2}));
/src/test/nodeEE-stress-mixed-query.js-64-		
/src/test/nodeEE-stress-mixed-query.js:65:		db.query("UPDATE " + tableOne + " SET C3 = 'QA Intern' where C2 = 'LastNameD'", ucback);
/src/test/nodeEE-stress-mixed-query.js:66:		db.query("SELECT * from " + tableOne + " where C3 = 'QA Intern'", scback.bind({done: false, expected: expected3}));
/src/test/nodeEE-stress-mixed-query.js-67-		
/src/test/nodeEE-stress-mixed-query.js:68:		db.query("DELETE from " + tableTwo + " where PID = 7", dcback);
/src/test/nodeEE-stress-mixed-query.js:69:		db.query("SELECT * from " + tableTwo + " where PID = 7", scback.bind({done: false, expected: []}));
/src/test/nodeEE-stress-mixed-query.js:70:		db.query("DROP table " + tableTwo, drcback); 
/src/test/nodeEE-stress-mixed-query.js:71:		db.query("SELECT tabname from syscat.tables where tabschema='ELKOREHP' and TABNAME='" + tableTwo + "'", scback.bind({done: false, expected: []}));
/src/test/nodeEE-stress-mixed-query.js:72:		db.query("DELETE from " + tableOne + " where PID = 5", dcback);
/src/test/nodeEE-stress-mixed-query.js:73:		db.query("SELECT * from " + tableOne + " where PID = 5", scback.bind({done: false, expected: []}));
/src/test/nodeEE-stress-mixed-query.js:74:		db.query("DROP table " + tableOne, drcback);
/src/test/nodeEE-stress-mixed-query.js:75:		db.query("SELECT tabname from syscat.tables where tabschema='ELKOREHP' and TABNAME='" + tableOne + "'", scback.bind({done: true, expected: []}));
/src/test/nodeEE-stress-mixed-query.js-76-	}
##############################################
/src/test/test-issue253.js-11-
/src/test/test-issue253.js:12:ibmdb.open(cn, function (err,conn) {
/src/test/test-issue253.js-13-  if (err) console.log(err);
##############################################
/src/test/test-issue253.js-17-  
/src/test/test-issue253.js:18:  conn.query(selectSQL, function (err, data) {
/src/test/test-issue253.js-19-      conn.querySync(dropSQL);
##############################################
/src/test/test-openSync.js-7-
/src/test/test-openSync.js:8:db.query("select * from " + common.tableName, function (err, rs, sqlca) {
/src/test/test-openSync.js-9-  assert.deepEqual(err.message, 'Connection not open.');
##############################################
/src/test/test-binding-statement-executeSync.js-7-
/src/test/test-binding-statement-executeSync.js:8:db.createConnection(function (err, conn) {
/src/test/test-binding-statement-executeSync.js-9-  conn.openSync(common.connectionString);
##############################################
/src/test/test-global-open-close.js-4-
/src/test/test-global-open-close.js:5:odbc.open(common.connectionString, function (err, conn) {
/src/test/test-global-open-close.js-6-  assert.equal(err, null);
##############################################
/src/test/bench-insertBatch100.js-7-
/src/test/bench-insertBatch100.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch100.js-9-	if (err) {
##############################################
/src/test/bench-insertBatch100.js-25-function createTable() {
/src/test/bench-insertBatch100.js:26:	db.query("create table bench_insert (str varchar(50))", function (err) {
/src/test/bench-insertBatch100.js-27-		if (err) {
##############################################
/src/test/bench-insertBatch100.js-51-	for (var x = 0; x < iterations; x++) {
/src/test/bench-insertBatch100.js:52:		db.query(insertString, cb);
/src/test/bench-insertBatch100.js-53-		
##############################################
/src/test/webapp.js-14-    var conn;
/src/test/webapp.js:15:    pool.open(cn, function(err, connection) {
/src/test/webapp.js-16-        if(err) return console.log(err);
##############################################
/src/test/webapp.js-20-}
/src/test/webapp.js:21:pool.open(cn, function(err, conn) {
/src/test/webapp.js-22-    if(err) {
##############################################
/src/test/webapp.js-65-  else
/src/test/webapp.js:66:  conn.query("SELECT id, filename, image FROM imgtab WHERE id=?", [imgid], function(err, rows) {
/src/test/webapp.js-67-    if(err){
##############################################
/src/test/test-sp-resultset.js-28-var result;
/src/test/test-sp-resultset.js:29:ibmdb.open(common.connectionString, {fetchMode : 3}, function (err, conn) {
/src/test/test-sp-resultset.js-30-    if(err) {
##############################################
/src/test/test-sp-resultset.js-61-    // Call SP Asynchronously.
/src/test/test-sp-resultset.js:62:    conn.query(query, ['1', param2], function (err, result) {
/src/test/test-sp-resultset.js-63-        if (err) console.log(err);
##############################################
/src/test/test-sp-resultset.js-83-        // Call SP Asynchronously.
/src/test/test-sp-resultset.js:84:        conn.query(query, ['1', param2], function (err, result) {
/src/test/test-sp-resultset.js-85-            if (err) console.log(err);
##############################################
/src/test/test-sp-resultset.js-105-            // Call SP Asynchronously.
/src/test/test-sp-resultset.js:106:            conn.query(query, ['1', 'abc'], function (err, result) {
/src/test/test-sp-resultset.js-107-                if (err) console.log(err);
##############################################
/src/test/test-affected-rows.js-5-
/src/test/test-affected-rows.js:6:ibmdb.open(cn, function(err, conn) {
/src/test/test-affected-rows.js-7-  if(err) console.log(err);
##############################################
/src/test/test-pool-uncommited.js-27-
/src/test/test-pool-uncommited.js:28:pool.open(cn, request);
/src/test/test-pool-uncommited.js:29:pool.open(cn, request);
/src/test/test-pool-uncommited.js-30-setTimeout(function() {
/src/test/test-pool-uncommited.js:31:    pool.open(cn, request);
/src/test/test-pool-uncommited.js:32:    pool.open(cn, request);
/src/test/test-pool-uncommited.js-33-}, 8000);
##############################################
/src/test/test-blob-insert.js-14-
/src/test/test-blob-insert.js:15:ibmdb.open(cn, function (err,conn) {
/src/test/test-blob-insert.js-16-  if (err) {
##############################################
/src/test/test-blob-insert.js-91-            fs.unlinkSync(outputfile1);
/src/test/test-blob-insert.js:92:            fs.unlink(outputfile2, function () { console.log('done'); });
/src/test/test-blob-insert.js-93-          }
##############################################
/src/test/nodeEE-leak-huge-query.js-20-    initialMemHeap = util.inspect(process.memoryUsage().heapUsed);
/src/test/nodeEE-leak-huge-query.js:21:    db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-huge-query.js-22-      
##############################################
/src/test/nodeEE-leak-huge-query.js-48-  {
/src/test/nodeEE-leak-huge-query.js:49:    db.query("create table " + tableOne + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-leak-huge-query.js-50-      if (err == null)
##############################################
/src/test/nodeEE-leak-huge-query.js-60-
/src/test/nodeEE-leak-huge-query.js:61:    db.query("create table " + tableTwo + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-leak-huge-query.js-62-      if (err == null)
##############################################
/src/test/nodeEE-leak-huge-query.js-76-    query = "values ('" + insertCount + "', '" + maxVarChar + "', '" + maxVarChar + "', '" + maxVarChar + "')";
/src/test/nodeEE-leak-huge-query.js:77:    db.query("insert into " + tableOne + " " + query, icback);
/src/test/nodeEE-leak-huge-query.js:78:    db.query("insert into " + tableTwo + " " + query, icback);
/src/test/nodeEE-leak-huge-query.js-79-  }
##############################################
/src/test/nodeEE-leak-huge-query.js-82-  {
/src/test/nodeEE-leak-huge-query.js:83:    db.query("select * from " + tableOne, scback);
/src/test/nodeEE-leak-huge-query.js:84:    db.query("select * from " + tableTwo, scback);
/src/test/nodeEE-leak-huge-query.js:85:    db.query("select * from " + tableOne + " INNER JOIN " + tableTwo + " ON " + tableOne + ".PID = " + tableTwo + ".PID", scback);
/src/test/nodeEE-leak-huge-query.js:86:    db.query("drop table " + tableOne, drcback.bind({tableName: tableOne}));
/src/test/nodeEE-leak-huge-query.js:87:    db.query("drop table " + tableTwo, drcback.bind({tableName: tableTwo}));
/src/test/nodeEE-leak-huge-query.js-88-  }
##############################################
/src/test/test-blocking-issue210.js-15-console.log(elapsedTime(), "Started pool.open, populate a table MTAB1 of 2330 rows.");
/src/test/test-blocking-issue210.js:16:pool.open(connectionString, function( err, conn) {
/src/test/test-blocking-issue210.js-17-    try { conn.querySync("drop table mtab1");
##############################################
/src/test/test-blocking-issue210.js-49-console.log(elapsedTime(), "Opening connection #1");
/src/test/test-blocking-issue210.js:50:pool.open(connectionString, function (err, connection) {
/src/test/test-blocking-issue210.js-51-        console.log(elapsedTime(), "Connection 1 opened. Start execution of Query1");
/src/test/test-blocking-issue210.js-52-        startTime1 = new Date();
/src/test/test-blocking-issue210.js:53:        connection.query("select * from mtab1", function(err, data) {
/src/test/test-blocking-issue210.js-54-            if(err) console.log(err);
##############################################
/src/test/test-blocking-issue210.js-66-});
/src/test/test-blocking-issue210.js:67:pool.open(connectionString, function (err, connection) {
/src/test/test-blocking-issue210.js-68-        console.log(elapsedTime(), "Connection 2 opened. Start execution of Query2");
/src/test/test-blocking-issue210.js-69-        startTime2 = new Date();
/src/test/test-blocking-issue210.js:70:        connection.query("select c1, c2 from mtab1", function(err, data) {
/src/test/test-blocking-issue210.js-71-            if(err) console.log(err);
##############################################
/src/test/test-blocking-issue210.js-101-    startTime1 = new Date();
/src/test/test-blocking-issue210.js:102:    conn.query(query1, params, function(err, rows) {
/src/test/test-blocking-issue210.js-103-        if(err) console.log(err);
##############################################
/src/test/test-blocking-issue210.js-107-        startTime2 = new Date();
/src/test/test-blocking-issue210.js:108:        conn.query(query2, function(err, rows) {
/src/test/test-blocking-issue210.js-109-            if(err) console.log(err);
##############################################
/src/test/bench-query-fetchAllSync.js-4-
/src/test/bench-query-fetchAllSync.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetchAllSync.js-6-  if (err) {
##############################################
/src/test/test-ibm-db-issue17.js-15-*/
/src/test/test-ibm-db-issue17.js:16:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue17.js-17-{
##############################################
/src/test/test-ibm-db-issue17.js-36-		*/
/src/test/test-ibm-db-issue17.js:37:		conn.query("insert into " + testTable + " values (" + testValues[0] + ")", function(err, nodetest, moreResultSets) {
/src/test/test-ibm-db-issue17.js-38-		
##############################################
/src/test/bench-query-fetch.js-4-
/src/test/bench-query-fetch.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetch.js-6-  if (err) {
##############################################
/src/test/test-executeFileSync.js-7-
/src/test/test-executeFileSync.js:8:ibmdb.open(cn, function (err, conn) {
/src/test/test-executeFileSync.js-9-    if (err) {
##############################################
/src/test/test-pool-idle-connection.js-12-console.log("Trying to open a new connection at => " + getDateTime());
/src/test/test-pool-idle-connection.js:13:pool.open(cn, function (err,conn) {
/src/test/test-pool-idle-connection.js-14-  if (err) console.log(err);
##############################################
/src/test/test-pool-idle-connection.js-16-  console.log("Got new connection at => " + getDateTime());
/src/test/test-pool-idle-connection.js:17:  conn.query('select 1 from sysibm.sysdummy1', function (err, data) {
/src/test/test-pool-idle-connection.js-18-    if (err) console.log(err);
##############################################
/src/test/test-pool-idle-connection.js-29-      console.log("70 seconds elapesed, try to get connection from pool at ==> "+ starttime);
/src/test/test-pool-idle-connection.js:30:      pool.open(cn, function (err,conn) {
/src/test/test-pool-idle-connection.js-31-        if (err) return console.log(err);
##############################################
/src/test/test-pool-idle-connection.js-33-        console.log("Got connection from pool at ==> " + endtime);
/src/test/test-pool-idle-connection.js:34:        conn.query('select 1 from sysibm.sysdummy1', function (err, data) {
/src/test/test-pool-idle-connection.js-35-          if (err) console.log(err);
##############################################
/src/test/test-pool-close.js-16-      console.error("Opening connection #", connectionIndex);
/src/test/test-pool-close.js:17:      pool.open(connectionString, function (err, connection) {
/src/test/test-pool-close.js-18-        //console.error("Opened connection #", connectionIndex);
##############################################
/src/test/test-pool-close.js-44-    const pool = new ibmdb.Pool();
/src/test/test-pool-close.js:45:    pool.open(connectionString, (err, conn) => {
/src/test/test-pool-close.js-46-        if (err) { console.log("err", err); return; }
##############################################
/src/test/bench-prepare-bind-executeNonQuery.js-6-
/src/test/bench-prepare-bind-executeNonQuery.js:7:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bind-executeNonQuery.js-8-  if (err) {
##############################################
/src/test/bench-prepare-bindSync-execute-closeSync.js-7-
/src/test/bench-prepare-bindSync-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bindSync-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/bench-prepare-bind-execute-closeSync.js-7-
/src/test/bench-prepare-bind-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bind-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/bench-prepare-execute-closeSync.js-7-
/src/test/bench-prepare-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/test-date.js-6-
/src/test/test-date.js:7:db.open(common.connectionString, function(err) {
/src/test/test-date.js-8-  assert.equal(err, null);
##############################################
/src/test/test-date.js-16-  
/src/test/test-date.js:17:  db.query(sql, function (err, data) {
/src/test/test-date.js-18-    assert.equal(err, null);
##############################################
/src/test/test-issue211.js-19-ibmdb.debug(true);
/src/test/test-issue211.js:20:ibmdb.open(cn, function(err, conn1) {
/src/test/test-issue211.js-21-  if (err) console.log(err);
##############################################
/src/test/test-issue211.js-33-  
/src/test/test-issue211.js:34:  ibmdb.open(cn, function(err, conn2) {
/src/test/test-issue211.js-35-      if (err) return console.log(err);
##############################################
/src/test/test-issue211.js-43-
/src/test/test-issue211.js:44:              conn1.query(stmt1, function(err, data) {
/src/test/test-issue211.js-45-                console.log('Query 1 executed');
##############################################
/src/test/test-issue211.js-55-
/src/test/test-issue211.js:56:              conn2.query(stmt2, function(err, data) {
/src/test/test-issue211.js-57-                console.log('Query 2 executed');
##############################################
/src/test/test-all-data-types.js-46-
/src/test/test-all-data-types.js:47:ibmdb.open(cn, function(err, conn) {
/src/test/test-all-data-types.js-48-  if(err) console.log(err);
##############################################
/src/test/test-all-data-types.js-61-    }
/src/test/test-all-data-types.js:62:    conn.query("select * from mytab1", function (err, data) {
/src/test/test-all-data-types.js-63-      if(err) console.log(err);
##############################################
/src/test/bench-insert.js-4-
/src/test/bench-insert.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-insert.js-6-	if (err) {
##############################################
/src/test/bench-insert.js-14-function createTable() {
/src/test/bench-insert.js:15:	db.query("create table bench_insert (str varchar(50))", function (err) {
/src/test/bench-insert.js-16-		if (err) {
##############################################
/src/test/bench-insert.js-39-	for (var x = 0; x < iterations; x++) {
/src/test/bench-insert.js:40:		db.query("insert into bench_insert (str) values ('testing')", cb);
/src/test/bench-insert.js-41-		
##############################################
/src/test/test-xml-datatype.js-8-var query = "CaLL " + schema + ".PROC1(?, ?, ?)";
/src/test/test-xml-datatype.js:9:ibmdb.open(cn, function (err, conn) {
/src/test/test-xml-datatype.js-10-    if (err) console.log(err);
##############################################
/src/test/bench-query-fetchAll.js-4-
/src/test/bench-query-fetchAll.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetchAll.js-6-  if (err) {
##############################################
/src/test/common.js-85-exports.dropTables = function (db, cb) {
/src/test/common.js:86:  db.query("drop table " + exports.tableName, cb);
/src/test/common.js-87-};
##############################################
/src/test/common.js-89-exports.createTables = function (db, cb) {
/src/test/common.js:90:  db.query("create table " + exports.tableName + " (COLINT INTEGER, COLDATETIME TIMESTAMP, COLTEXT VARCHAR(255))", cb);
/src/test/common.js-91-};
##############################################
/src/test/test-query-insert.js-7-
/src/test/test-query-insert.js:8:db.open(common.connectionString, function(err) {
/src/test/test-query-insert.js-9-  common.dropTables(db, function () {
##############################################
/src/test/test-query-insert.js-12-      
/src/test/test-query-insert.js:13:      db.query("insert into " + common.tableName + " (COLTEXT) values ('sandwich')", insertCallback);
/src/test/test-query-insert.js:14:      db.query("insert into " + common.tableName + " (COLTEXT) values ('fish')", insertCallback);
/src/test/test-query-insert.js:15:      db.query("insert into " + common.tableName + " (COLTEXT) values ('scarf')", insertCallback);
/src/test/test-query-insert.js-16-      
##############################################
/src/test/test-binding-transaction-commit.js-7-
/src/test/test-binding-transaction-commit.js:8:db.createConnection(function (err, conn) {
/src/test/test-binding-transaction-commit.js-9-  
##############################################
/src/test/test-issue-54.js-19-
/src/test/test-issue-54.js:20:db.open(common.connectionString, function(err) {
/src/test/test-issue-54.js-21-  console.log(err || "Connected");
##############################################
/src/test/test-issue-54.js-24-  if (!err) {
/src/test/test-issue-54.js:25:    db.query(sql, function (err, results, more) {
/src/test/test-issue-54.js-26-      console.log("q1 result: ", err, results, more);
##############################################
/src/test/test-issue-54.js-30-
/src/test/test-issue-54.js:31:        db.query("select 1 as x", function(err, results, more) {
/src/test/test-issue-54.js-32-          console.log("q2 result: ", err, results, more);
##############################################
/src/test/bench-querySync-fetchArray.js-4-
/src/test/bench-querySync-fetchArray.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-querySync-fetchArray.js-6-  if (err) {
##############################################
/src/test/disabled/test-binding-statement-rebinding.js-13-  
/src/test/disabled/test-binding-statement-rebinding.js:14:db.createConnection(function (err, conn) {
/src/test/disabled/test-binding-statement-rebinding.js-15-	
##############################################
/src/test/disabled/test-param-select-with-booleans-only.js-6-
/src/test/disabled/test-param-select-with-booleans-only.js:7:db.open(common.testConnectionStrings[0].connectionString, function (err) {
/src/test/disabled/test-param-select-with-booleans-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-unicode.js-6-
/src/test/disabled/test-param-select-with-unicode.js:7:db.open(common.connectionString, function(err) {
/src/test/disabled/test-param-select-with-unicode.js:8:  db.query("select ? as UNICODETEXT", ['ף צ ץ ק ר ש תכ ך ל מ ם נ ן ס ע פ 電电電買买買開开開東东東車车車'], function (err, data) {
/src/test/disabled/test-param-select-with-unicode.js-9-    db.close(function () {
##############################################
/src/test/disabled/test-param-select-with-decimals-only.js-6-
/src/test/disabled/test-param-select-with-decimals-only.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-decimals-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js-6-
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js:7:db.open(common.connectionString, function(err){ 
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js-8-  if (err) {
##############################################
/src/test/disabled/test-param-select-with-nulls-mixed.js-6-
/src/test/disabled/test-param-select-with-nulls-mixed.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-nulls-mixed.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-strings-only.js-6-
/src/test/disabled/test-param-select-with-strings-only.js:7:db.open(common.testConnectionStrings[0].connectionString, function (err) {
/src/test/disabled/test-param-select-with-strings-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-null.js-6-
/src/test/disabled/test-param-select-with-null.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-null.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-query-select-unicode.js-8-
/src/test/disabled/test-query-select-unicode.js:9:db.query("select '☯ąčęėįšųūž☎áäàéêèóöòüßÄÖÜ€ шчябы Ⅲ ❤' as UNICODETEXT FROM SYSIBM.SYSDUMMY1", function (err, data) {
/src/test/disabled/test-query-select-unicode.js-10-  db.closeSync();
##############################################
/src/test/disabled/test-param-select-with-numbers-mixed.js-6-
/src/test/disabled/test-param-select-with-numbers-mixed.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-numbers-mixed.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-open-dont-close.js-4-
/src/test/disabled/test-open-dont-close.js:5:db.open(common.connectionString, function(err) {
/src/test/disabled/test-open-dont-close.js-6-	console.error('db.open callback');
##############################################
/src/test/disabled/test-issue-13.js-4-
/src/test/disabled/test-issue-13.js:5:db.open(common.connectionString, function(err)
/src/test/disabled/test-issue-13.js-6-{
##############################################
/src/test/disabled/test-issue-13.js-11-
/src/test/disabled/test-issue-13.js:12:    require('http').createServer(function (req, res) {
/src/test/disabled/test-issue-13.js-13-		if (req.url == "/close") {
##############################################
/src/test/disabled/test-issue-13.js-21-
/src/test/disabled/test-issue-13.js:22:		db.query(query, function(err, rows, moreResultSets)
/src/test/disabled/test-issue-13.js-23-		{
##############################################
/src/test/disabled/test-param-select-with-numbers-only.js-6-
/src/test/disabled/test-param-select-with-numbers-only.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-numbers-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-prepare-bind-executeNonQuery.js-7-
/src/test/disabled/test-prepare-bind-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/disabled/test-prepare-bind-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/nodeEE-leak-multiple-query.js-12-		initialMemHeap = util.inspect(process.memoryUsage().heapUsed);
/src/test/nodeEE-leak-multiple-query.js:13:		db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-multiple-query.js-14-			runQueries();
##############################################
/src/test/nodeEE-leak-multiple-query.js-28-	{
/src/test/nodeEE-leak-multiple-query.js:29:		db.query("create table T1Leak (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-leak-multiple-query.js-30-			if (err == null)
##############################################
/src/test/nodeEE-leak-multiple-query.js-40-			
/src/test/nodeEE-leak-multiple-query.js:41:		db.query("INSERT into T1Leak values (1, 'PersonA', 'LastNameA', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query.js:42:		db.query("INSERT into T1Leak values (2, 'PersonB', 'LastNameB', 'Dev')", icback);
/src/test/nodeEE-leak-multiple-query.js:43:		db.query("INSERT into T1Leak values (3, 'PersonC', 'LastNameC', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query.js:44:		db.query("INSERT into T1Leak values (4, 'PersonD', 'LastNameD', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query.js:45:		db.query("INSERT into T1Leak values (5, 'PersonE', 'LastNameE', 'QA')", icback);
/src/test/nodeEE-leak-multiple-query.js-46-		
/src/test/nodeEE-leak-multiple-query.js:47:		db.query("SELECT * from T1Leak", scback);
/src/test/nodeEE-leak-multiple-query.js-48-		
/src/test/nodeEE-leak-multiple-query.js:49:		db.query("UPDATE T1Leak SET C3 = 'QA Intern' where C2 = 'LastNameD'", ucback);
/src/test/nodeEE-leak-multiple-query.js:50:		db.query("SELECT * from T1Leak where C3 = 'QA Intern'", scback);
/src/test/nodeEE-leak-multiple-query.js:51:		db.query("SELECT count(*) from T1Leak where PID = 7", scback);
/src/test/nodeEE-leak-multiple-query.js:52:		db.query("DELETE from T1Leak where PID = 5", dcback);
/src/test/nodeEE-leak-multiple-query.js:53:		db.query("INSERT into T1Leak values (6, 'PersonF', 'LastNameF', 'QA Lead')", icback);
/src/test/nodeEE-leak-multiple-query.js:54:		db.query("SELECT * from T1Leak where PID = 5", scback);
/src/test/nodeEE-leak-multiple-query.js:55:		db.query("DROP table T1Leak", drcback);
/src/test/nodeEE-leak-multiple-query.js-56-	}
##############################################
/src/test/test-multi-open-close.js-14-
/src/test/test-multi-open-close.js:15:		db.open(common.connectionString, function(err) {
/src/test/test-multi-open-close.js-16-            assert.equal(err, null);
##############################################
/src/test/bench-insertBatch10.js-7-
/src/test/bench-insertBatch10.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch10.js-9-	if (err) {
##############################################
/src/test/bench-insertBatch10.js-25-function createTable() {
/src/test/bench-insertBatch10.js:26:	db.query("create table bench_insert (str varchar(50))", function (err) {
/src/test/bench-insertBatch10.js-27-		if (err) {
##############################################
/src/test/bench-insertBatch10.js-50-	for (var x = 0; x < iterations; x++) {
/src/test/bench-insertBatch10.js:51:		db.query(insertString, cb);
/src/test/bench-insertBatch10.js-52-		
##############################################
/src/test/bench-prepare-executeNonQuery.js-7-
/src/test/bench-prepare-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/test-call-async.js-1-// Test case to verify result of OUT and INOUT Parameters in a Strored Procedure.
/src/test/test-call-async.js:2:// When SP is called using conn.query() assynchronously.
/src/test/test-call-async.js-3-
##############################################
/src/test/test-call-async.js-10-if(schema == undefined) schema = "NEWTON";
/src/test/test-call-async.js:11:ibmdb.open(cn, function (err, conn)
/src/test/test-call-async.js-12-{
##############################################
/src/test/test-call-async.js-45-
/src/test/test-call-async.js:46:    conn.query(query, [param1, param2, param3], function(err, result){
/src/test/test-call-async.js-47-        if(err) console.log(err);
##############################################
/src/test/test-call-async.js-71-    query = "call " + schema + ".PROC2(?)";
/src/test/test-call-async.js:72:    conn.query({"sql":query, "params" : [param1]}, function(err, result){
/src/test/test-call-async.js-73-        if(err) console.log(err);
##############################################
/src/test/test-binding-transaction-commitSync.js-7-
/src/test/test-binding-transaction-commitSync.js:8:db.createConnection(function (err, conn) {
/src/test/test-binding-transaction-commitSync.js-9-  conn.openSync(common.connectionString);
##############################################
/src/test/bench-querySync.js-4-
/src/test/bench-querySync.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-querySync.js-6-  if (err) {
##############################################
/src/test/sql-cli.js-4-
/src/test/sql-cli.js:5:db.open(common.connectionString, function(err)
/src/test/sql-cli.js-6-{
##############################################
/src/test/sql-cli.js-15-	process.stdin.on('data',function (strInput) {
/src/test/sql-cli.js:16:		db.query(strInput.toString(), function (err, rs, moreResultSets) {
/src/test/sql-cli.js-17-			if (err) {
##############################################
/src/test/run-nodeEE.js-45-function doTest(file, connectionString) {
/src/test/run-nodeEE.js:46:  fs.open('logs/' + file + '.log', 'wx', function(err, fd) {
/src/test/run-nodeEE.js-47-    var test = spawn("node", ['--expose_gc',file, connectionString.connectionString], {stdio: ['pipe', fd, fd]})
##############################################
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-18-			connections.push(db);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:19:			db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-20-				runQueries(db, "T1" + i, "T2" + i);
##############################################
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-36-	{
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:37:		db.query("create table " + tableOne + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-38-			if (err == null)
##############################################
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-48-			
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:49:		db.query("create table " + tableTwo + " (PID INTEGER, C1 VARCHAR(255), C2 VARCHAR(255), C3 VARCHAR(255))", function(err, data){
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-50-			if (err == null)
##############################################
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-60-				
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:61:		db.query("INSERT into " + tableOne + " values (1, 'PersonA', 'LastNameA', 'QA')", icback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:62:		db.query("INSERT into " + tableOne + " values (2, 'PersonB', 'LastNameB', 'Dev')", icback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:63:		db.query("INSERT into " + tableOne + " values (3, 'PersonC', 'LastNameC', 'QA')", icback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:64:		db.query("INSERT into " + tableOne + " values (4, 'PersonD', 'LastNameD', 'QA')", icback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:65:		db.query("INSERT into " + tableOne + " values (5, 'PersonE', 'LastNameE', 'QA')", icback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-66-		
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:67:		db.query("INSERT into " + tableTwo + " values (6, 'PersonF', 'LastNameF', 'QA Lead')", icback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:68:		db.query("INSERT into " + tableTwo + " values (7, 'PersonG', 'LastNameG', 'Dev Lead')", icback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-69-		
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:70:		db.query("SELECT * from " + tableOne, scback.bind({done: false, expected: expected1}));
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:71:		db.query("SELECT * from " + tableTwo , scback.bind({done: false, expected: expected2}));
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-72-		
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:73:		db.query("UPDATE " + tableOne + " SET C3 = 'QA Intern' where C2 = 'LastNameD'", ucback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:74:		db.query("SELECT * from " + tableOne + " where C3 = 'QA Intern'", scback.bind({done: false, expected: expected3}));
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-75-		
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:76:		db.query("DELETE from " + tableTwo + " where PID = 7", dcback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:77:		db.query("SELECT * from " + tableTwo + " where PID = 7", scback.bind({done: false, expected: []}));
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:78:		db.query("DROP table " + tableTwo, drcback.bind({tableName: tableTwo})); 
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:79:		db.query("SELECT tabname from syscat.tables where tabschema='ELKOREHP' and TABNAME='" + tableTwo + "'", scback.bind({done: false, expected: []}));
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:80:		db.query("DELETE from " + tableOne + " where PID = 5", dcback);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:81:		db.query("SELECT * from " + tableOne + " where PID = 5", scback.bind({done: false, expected: []}));
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:82:		db.query("DROP table " + tableOne , drcback.bind({tableName: tableTwo}));
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:83:		db.query("SELECT tabname from syscat.tables where tabschema='ELKOREHP' and TABNAME='" + tableOne + "'", scback.bind({done: true, expected: []}));
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-84-	}
##############################################
/src/installer/driverInstall.js-269-
/src/installer/driverInstall.js:270:        var file_name = url.parse(installerfileURL).pathname.split('/').pop();
/src/installer/driverInstall.js-271-        INSTALLER_FILE = path.resolve(DOWNLOAD_DIR, file_name);
##############################################
/src/installer/driverInstall.js-287-        if(platform == 'win32') {
/src/installer/driverInstall.js:288:            readStream = fs.createReadStream(INSTALLER_FILE);
/src/installer/driverInstall.js-289-
##############################################
/src/installer/driverInstall.js-398-                        
/src/installer/driverInstall.js:399:                        fs.readFile(ODBC_BINDINGS_VCXPROJ_FILE, 'utf8', function (err,data) {
/src/installer/driverInstall.js-400-                            if (err)
##############################################
/src/installer/driverInstall.js-411-                            
/src/installer/driverInstall.js:412:                            fs.writeFile(ODBC_BINDINGS_VCXPROJ_FILE, result, 'utf8', function (err) {
/src/installer/driverInstall.js-413-                                if (err)
##############################################
/src/installer/driverInstall.js-557-                removeDir('build');
/src/installer/driverInstall.js:558:                readStream = fs.createReadStream(BUILD_FILE);
/src/installer/driverInstall.js-559-                /*
##############################################
/src/APIDocumentation.md-9-**Database APIs**
/src/APIDocumentation.md:10:1.  [.open(connectionString, [options,] callback)](#openApi)
/src/APIDocumentation.md-11-2.  [.openSync(connectionString)](#openSyncApi)
/src/APIDocumentation.md:12:3.  [.query(sqlQuery [, bindingParameters], callback)](#queryApi)
/src/APIDocumentation.md-13-4.  [.querySync(sqlQuery [, bindingParameters])](#querySyncApi) 
##############################################
/src/APIDocumentation.md-47-
/src/APIDocumentation.md:48:### <a name="openApi"></a> 1) .open(connectionString, [options,] callback)
/src/APIDocumentation.md-49-
##############################################
/src/APIDocumentation.md-68-
/src/APIDocumentation.md:69:ibmdb.open(connStr, function (err, connection) {
/src/APIDocumentation.md-70-    if (err)
##############################################
/src/APIDocumentation.md-74-    }
/src/APIDocumentation.md:75:    connection.query("select 1 from sysibm.sysdummy1", function (err1, rows) {
/src/APIDocumentation.md-76-      if (err1) console.log(err1);
##############################################
/src/APIDocumentation.md-114-      var conn = ibmdb.openSync(connString, option);
/src/APIDocumentation.md:115:      conn.query("select * from customers fetch first 10 rows only", function (err, rows) {
/src/APIDocumentation.md-116-		if (err) {
##############################################
/src/APIDocumentation.md-127-
/src/APIDocumentation.md:128:### <a name="queryApi"></a> 3) .query(sqlQuery [, bindingParameters], callback)
/src/APIDocumentation.md-129-
##############################################
/src/APIDocumentation.md-144-
/src/APIDocumentation.md:145:ibmdb.open(cn, function (err, conn) {
/src/APIDocumentation.md-146-    if (err) {
##############################################
/src/APIDocumentation.md-152-    // In case of multiple resultset, query will return an array of result sets.
/src/APIDocumentation.md:153:    conn.query("select 1 from sysibm.sysdummy1;select 2 from sysibm.sysdummy1;" +
/src/APIDocumentation.md-154-               "select 3 from sysibm.sysdummy1", function (err, rows, sqlca)
##############################################
/src/APIDocumentation.md-178-
/src/APIDocumentation.md:179:ibmdb.open(cn, function(err, conn){
/src/APIDocumentation.md-180-
##############################################
/src/APIDocumentation.md-202-
/src/APIDocumentation.md:203:ibmdb.open(cn, function(err, conn)
/src/APIDocumentation.md-204-{
##############################################
/src/APIDocumentation.md-236-	;
/src/APIDocumentation.md:237:ibmdb.open(cn, function (err,conn) {
/src/APIDocumentation.md-238-    if (err) return console.log(err);
##############################################
/src/APIDocumentation.md-268-
/src/APIDocumentation.md:269:ibmdb.open(cn, function(err, conn){
/src/APIDocumentation.md-270-  if (err) return console.log(err);
##############################################
/src/APIDocumentation.md-292-
/src/APIDocumentation.md:293:ibmdb.open(cn, function (err, conn) {
/src/APIDocumentation.md-294-	if (err) {
##############################################
/src/APIDocumentation.md-332-
/src/APIDocumentation.md:333:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-334-  conn.prepare("insert into hits (col1, col2) VALUES (?, ?)", function (err, stmt) {
##############################################
/src/APIDocumentation.md-364-
/src/APIDocumentation.md:365:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-366-  var stmt = conn.prepareSync("select * from employee where empid = ?");
##############################################
/src/APIDocumentation.md-407-
/src/APIDocumentation.md:408:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-409-  conn.querySync("create table mytab (id int, photo BLOB(30K))");
##############################################
/src/APIDocumentation.md-444-
/src/APIDocumentation.md:445:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-446-  var stmt = conn.prepareSync("select empname from emptable where empid = ?");
##############################################
/src/APIDocumentation.md-472-
/src/APIDocumentation.md:473:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-474-  conn.querySync("create table mytab (id int, text varchar(30))");
##############################################
/src/APIDocumentation.md-505-
/src/APIDocumentation.md:506:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-507-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/APIDocumentation.md-547-
/src/APIDocumentation.md:548:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-549-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/APIDocumentation.md-576-
/src/APIDocumentation.md:577:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-578-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/APIDocumentation.md-614-
/src/APIDocumentation.md:615:ibmdb.open(cn,function(err,conn){
/src/APIDocumentation.md-616-  conn.querySync("create table hits (col1 varchar(40), col2 int)");
##############################################
/src/APIDocumentation.md-649-
/src/APIDocumentation.md:650:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-651-
##############################################
/src/APIDocumentation.md-684-
/src/APIDocumentation.md:685:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-686-
##############################################
/src/APIDocumentation.md-715-
/src/APIDocumentation.md:716:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-717-
##############################################
/src/APIDocumentation.md-750-
/src/APIDocumentation.md:751:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-752-
##############################################
/src/APIDocumentation.md-781-
/src/APIDocumentation.md:782:ibmdb.open(cn, function(err,conn) {
/src/APIDocumentation.md-783-  conn.setIsolationLevel(2);  // SQL_TXN_READ_COMMITTED
##############################################
/src/APIDocumentation.md-850-    }
/src/APIDocumentation.md:851:    connection.query("select 1 from sysibm.sysdummy1", function (err1, rows) {
/src/APIDocumentation.md-852-        if (err1) console.log(err1);
##############################################
/src/APIDocumentation.md-882-
/src/APIDocumentation.md:883:ibmdb.open(cn, function(err, conn){
/src/APIDocumentation.md-884-    conn.executeFileSync('sample2.txt', '%','out.txt');
##############################################
/src/APIDocumentation.md-916-
/src/APIDocumentation.md:917:	ibmdb.open(conStr, function(err, conn) {
/src/APIDocumentation.md-918-		if(err) console.log(err);
##############################################
/src/APIDocumentation.md-958-the list of available connections immediately. Such connection will be used
/src/APIDocumentation.md:959:the next time you call `Pool.open()` for the same connection string.
/src/APIDocumentation.md-960-
##############################################
/src/APIDocumentation.md-963-
/src/APIDocumentation.md:964:1.  [.open(connectionString, callback)](#openPoolApi)
/src/APIDocumentation.md-965-2.  [.close(callback)](#closePoolApi)
##############################################
/src/APIDocumentation.md-968-
/src/APIDocumentation.md:969:### <a name="openPoolApi"></a> 1) .open(connectionString, callback)
/src/APIDocumentation.md-970-
##############################################
/src/APIDocumentation.md-980-
/src/APIDocumentation.md:981:pool.open(cn, function (err, db) {
/src/APIDocumentation.md-982-	if (err) {
##############################################
/src/APIDocumentation.md-986-	//db is now an open database connection and can be used like normal
/src/APIDocumentation.md:987:	//if we run some queries with db.query(...) and then call db.close();
/src/APIDocumentation.md-988-	//a connection to `cn` will be re-opened silently behind the scene
/src/APIDocumentation.md:989:	//and will be ready the next time we do `pool.open(cn)`
/src/APIDocumentation.md-990-});
##############################################
/src/APIDocumentation.md-1003-
/src/APIDocumentation.md:1004:pool.open(cn, function (err, db) {
/src/APIDocumentation.md-1005-	if (err) {
##############################################
/src/APIDocumentation.md-1031-
/src/APIDocumentation.md:1032:pool.open(connStr, function(err, db) { ...
/src/APIDocumentation.md-1033-```
##############################################
/src/APIDocumentation.md-1041-pool.setMaxPoolSize(20);
/src/APIDocumentation.md:1042:pool.open(connStr, function(err, db) { ...
/src/APIDocumentation.md-1043-```
##############################################
/src/APIDocumentation.md-1101-
/src/APIDocumentation.md:1102:* [test-call-async.js](https://github.com/ibmdb/node-ibm_db/blob/master/test/test-call-async.js) - Example using conn.query().
/src/APIDocumentation.md-1103-
