/src/cli/main.js-24-});
/src/cli/main.js:25:program.parse(process.argv);
/src/cli/main.js-26-const { config, project, watch } = program.opts();
##############################################
/src/cli/main.js.map:1:{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/cli/main.ts"],"names":[],"mappings":";;;AAEA,qCAAqC;AACrC,6BAA6B;AAC7B,yCAAyC;AACzC,8CAAwD;AAExD,MAAM,oBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,iBAAiB,CAAC,CAAC;AAE5E,SAAS,gBAAgB,CAAC,MAAc;IACtC,OAAO,MAAM,IAAI,oBAAoB,CAAC;AACxC,CAAC;AAED,OAAO;KACJ,IAAI,CAAC,YAAY,CAAC;KAClB,wBAAwB,CAAC,KAAK,CAAC;KAC/B,MAAM,CAAC,eAAe,EAAE,qBAAqB,CAAC;KAC9C,MAAM,CAAC,aAAa,EAAE,wBAAwB,CAAC;KAC/C,MAAM,CACL,sBAAsB,EACtB,uDAAuD,EACvD,gBAAgB,EAChB,oBAAoB,CACrB;KACA,MAAM,CAAC,uBAAuB,EAAE,0BAA0B,EAAE,CAAC,KAAyB,EAAE,EAAE,CACzF,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CACxC,CAAC;AAEJ,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC1C,MAAM,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC;AAE7C,OAAO,CAAC,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAChC,oBAAO,CAAC,GAAG,CAAC,CAAC;IACb,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAE5B,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;AAClD,oBAAO,CAAC,kBAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport * as program from 'commander';\nimport * as path from 'path';\nimport * as readPkgUp from 'read-pkg-up';\nimport { execute, build, version } from '../public_api';\n\nconst DEFAULT_PROJECT_PATH = path.resolve(process.cwd(), 'ng-package.json');\n\nfunction parseProjectPath(parsed: string): string {\n  return parsed || DEFAULT_PROJECT_PATH;\n}\n\nprogram\n  .name('ng-packagr')\n  .storeOptionsAsProperties(false)\n  .option('-v, --version', 'Prints version info')\n  .option('-w, --watch', 'Watch for file changes')\n  .option(\n    '-p, --project [path]',\n    \"Path to the 'ng-package.json' or 'package.json' file.\",\n    parseProjectPath,\n    DEFAULT_PROJECT_PATH,\n  )\n  .option('-c, --config [config]', 'Path to a tsconfig file.', (value: string | undefined) =>\n    value ? path.resolve(value) : undefined,\n  );\n\nconst dir = path.dirname(module.filename);\nconst pkg = readPkgUp.sync({ cwd: dir }).pkg;\n\nprogram.on('option:version', () => {\n  version(pkg);\n  process.exit(0);\n});\n\nprogram.parse(process.argv);\n\nconst { config, project, watch } = program.opts();\nexecute(build, { config, project, watch: !!watch }).catch(() => process.exit(111));\n"]}
##############################################
/src/lib/flatten/downlevel-plugin.js-31-        code: outputText,
/src/lib/flatten/downlevel-plugin.js:32:        map: JSON.parse(sourceMapText),
/src/lib/flatten/downlevel-plugin.js-33-    };
##############################################
/src/lib/flatten/downlevel-plugin.js.map:1:{"version":3,"file":"downlevel-plugin.js","sourceRoot":"","sources":["../../../src/lib/flatten/downlevel-plugin.ts"],"names":[],"mappings":";;;AAAA,2CAA8G;AAE9G,6BAA6B;AAE7B,oCAAoC;AAEpC;;GAEG;AACH,MAAM,gBAAgB,GAAoB;IACxC,MAAM,EAAE,yBAAY,CAAC,GAAG;IACxB,MAAM,EAAE,uBAAU,CAAC,MAAM;IACzB,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,IAAI;IACf,aAAa,EAAE,IAAI;IACnB,kBAAkB,EAAE,IAAI;IACxB,gBAAgB,EAAE,iCAAoB,CAAC,OAAO;CAC/C,CAAC;AAEF;;;;GAIG;AACH,SAAgB,oBAAoB,CAAC,IAAY,EAAE,QAAgB;IACjE,GAAG,CAAC,KAAK,CAAC,OAAO,QAAQ,EAAE,CAAC,CAAC;IAE7B,MAAM,eAAe,mCAChB,gBAAgB,KACnB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAChC,CAAC;IAEF,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,4BAAe,CAAC,IAAI,EAAE;QAC1D,eAAe;KAChB,CAAC,CAAC;IAEH,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;KAC/B,CAAC;AACJ,CAAC;AAhBD,oDAgBC","sourcesContent":["import { ModuleKind, ScriptTarget, CompilerOptions, transpileModule, ModuleResolutionKind } from 'typescript';\nimport { TransformResult } from 'rollup';\nimport * as path from 'path';\n\nimport * as log from '../utils/log';\n\n/**\n * Base `tsc` `CompilerOptions` shared among various downleveling methods.\n */\nconst COMPILER_OPTIONS: CompilerOptions = {\n  target: ScriptTarget.ES5,\n  module: ModuleKind.ES2015,\n  allowJs: true,\n  sourceMap: true,\n  importHelpers: true,\n  downlevelIteration: true,\n  moduleResolution: ModuleResolutionKind.Classic,\n};\n\n/**\n * Downlevels a .js file from `ES2015` to `ES5`. Internally, uses `tsc`.\n *\n * Required for some external as they contains `ES2015` syntax such as `const` and `let`\n */\nexport function downlevelCodeWithTsc(code: string, filePath: string): TransformResult {\n  log.debug(`tsc ${filePath}`);\n\n  const compilerOptions: CompilerOptions = {\n    ...COMPILER_OPTIONS,\n    mapRoot: path.dirname(filePath),\n  };\n\n  const { outputText, sourceMapText } = transpileModule(code, {\n    compilerOptions,\n  });\n\n  return {\n    code: outputText,\n    map: JSON.parse(sourceMapText),\n  };\n}\n"]}
##############################################
/src/lib/flatten/uglify.js.map:1:{"version":3,"file":"uglify.js","sourceRoot":"","sources":["../../../src/lib/flatten/uglify.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mCAAgC;AAChC,uCAA+C;AAC/C,+BAAgC;AAChC,sCAAqC;AAErC,SAAsB,YAAY,CAAC,SAAiB,EAAE,UAAmB;;QACvE,WAAK,CAAC,iBAAiB,SAAS,EAAE,CAAC,CAAC;QAEpC,MAAM,YAAY,GAAG,GAAG,UAAU,MAAM,CAAC;QACzC,MAAM,CAAC,eAAe,EAAE,oBAAoB,CAAC,GAAa,MAAM,OAAO,CAAC,GAAG,CAAC;YAC1E,mBAAQ,CAAC,SAAS,CAAC;YACnB,mBAAQ,CAAC,GAAG,SAAS,MAAM,CAAC;SAC7B,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE;YACtD,SAAS,EAAE;gBACT,cAAc,EAAE,IAAI;gBACpB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC;gBACpD,GAAG,EAAE,eAAQ,CAAC,YAAY,CAAC;aAC5B;YACD,KAAK,EAAE;gBACL,IAAI,EAAE,CAAC;gBACP,YAAY,EAAE,IAAI;aACnB;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,MAAM;aACjB;SACF,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,oBAAS,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,oBAAS,CAAC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAE7F,OAAO;IACT,CAAC;CAAA;AA3BD,oCA2BC","sourcesContent":["import { minify } from 'terser';\nimport { writeFile, readFile } from 'fs-extra';\nimport { basename } from 'path';\nimport { debug } from '../utils/log';\n\nexport async function minifyJsFile(inputPath: string, outputPath?: string): Promise<void> {\n  debug(`minifyJsFile: ${inputPath}`);\n\n  const sourcemapOut = `${outputPath}.map`;\n  const [inputFileBuffer, inputSourceMapBuffer]: Buffer[] = await Promise.all([\n    readFile(inputPath),\n    readFile(`${inputPath}.map`),\n  ]);\n\n  const result = await minify(inputFileBuffer.toString(), {\n    sourceMap: {\n      includeSources: true,\n      content: JSON.parse(inputSourceMapBuffer.toString()),\n      url: basename(sourcemapOut),\n    },\n    parse: {\n      ecma: 5,\n      bare_returns: true,\n    },\n    format: {\n      comments: 'some',\n    },\n  });\n\n  await Promise.all([writeFile(outputPath, result.code), writeFile(sourcemapOut, result.map)]);\n\n  return;\n}\n"]}
##############################################
/src/lib/flatten/uglify.js-21-        const [inputFileBuffer, inputSourceMapBuffer] = yield Promise.all([
/src/lib/flatten/uglify.js:22:            fs_extra_1.readFile(inputPath),
/src/lib/flatten/uglify.js:23:            fs_extra_1.readFile(`${inputPath}.map`),
/src/lib/flatten/uglify.js-24-        ]);
##############################################
/src/lib/flatten/uglify.js-27-                includeSources: true,
/src/lib/flatten/uglify.js:28:                content: JSON.parse(inputSourceMapBuffer.toString()),
/src/lib/flatten/uglify.js-29-                url: path_1.basename(sourcemapOut),
##############################################
/src/lib/flatten/uglify.js-38-        });
/src/lib/flatten/uglify.js:39:        yield Promise.all([fs_extra_1.writeFile(outputPath, result.code), fs_extra_1.writeFile(sourcemapOut, result.map)]);
/src/lib/flatten/uglify.js-40-        return;
##############################################
/src/lib/ts/tsconfig.js.map:1:{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../src/lib/ts/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ng from '@angular/compiler-cli';\nimport * as path from 'path';\nimport * as ts from 'typescript';\nimport { EntryPointNode } from '../ng-package/nodes';\nimport * as log from '../utils/log';\n\n/**\n * Reads the default TypeScript configuration.\n */\nexport function readDefaultTsConfig(fileName?: string): ng.ParsedConfiguration {\n  if (!fileName) {\n    fileName = path.resolve(__dirname, 'conf', 'tsconfig.ngc.json');\n  }\n\n  // these options are mandatory\n  const extraOptions: ng.CompilerOptions = {\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n    target: ts.ScriptTarget.ES2015,\n    experimentalDecorators: true,\n\n    // sourcemaps\n    sourceMap: false,\n    inlineSources: true,\n    inlineSourceMap: true,\n\n    outDir: '',\n    declaration: true,\n\n    // ng compiler to options\n    enableResourceInlining: true,\n\n    // these are required to set the appropriate EmitFlags\n    flatModuleId: 'AUTOGENERATED',\n    flatModuleOutFile: 'AUTOGENERATED',\n  };\n\n  const config = ng.readConfiguration(fileName, extraOptions);\n  const options = config.options;\n\n  // todo: alanagius4 - the below shouldn't be needed but it seems that setting it only in create-emit-callback.ts\n  // is not working correctly\n  const transformDecorators = !options.enableIvy && options.annotationsAs !== 'decorators';\n  if ((options.annotateForClosureCompiler || options.annotationsAs === 'static fields') && transformDecorators) {\n    // This is needed as a workaround for https://github.com/angular/tsickle/issues/635\n    // Otherwise tsickle might emit references to non imported values\n    // as TypeScript elided the import.\n    options.emitDecoratorMetadata = true;\n  }\n\n  return config;\n}\n\n/**\n * Creates a parsed TypeScript configuration object.\n *\n * @param values File path or parsed configuration.\n */\nexport function createDefaultTsConfig(values?: ng.ParsedConfiguration | string): ng.ParsedConfiguration {\n  if (!values) {\n    return readDefaultTsConfig();\n  } else if (typeof values === 'string') {\n    return readDefaultTsConfig(values);\n  } else {\n    return values;\n  }\n}\n\n/**\n * Initializes TypeScript Compiler options and Angular Compiler options by overriding the\n * default config with entry point-specific values.\n */\nexport const initializeTsConfig = (defaultTsConfig: ng.ParsedConfiguration, entryPoints: EntryPointNode[]) => {\n  if (defaultTsConfig.errors.length > 0) {\n    throw ng.formatDiagnostics(defaultTsConfig.errors);\n  }\n\n  entryPoints.forEach(currentEntryPoint => {\n    const { entryPoint } = currentEntryPoint.data;\n    log.debug(`Initializing tsconfig for ${entryPoint.moduleId}`);\n    const basePath = path.dirname(entryPoint.entryFilePath);\n\n    // Resolve defaults from DI token and create a deep copy of the defaults\n    let tsConfig: ng.ParsedConfiguration = JSON.parse(JSON.stringify(defaultTsConfig));\n\n    const overrideOptions: ng.CompilerOptions = {\n      flatModuleId: entryPoint.moduleId,\n      flatModuleOutFile: `${entryPoint.flatModuleFile}.js`,\n      basePath,\n      rootDir: basePath,\n    };\n\n    tsConfig.rootNames = [entryPoint.entryFilePath];\n    tsConfig.options = { ...tsConfig.options, ...overrideOptions };\n    currentEntryPoint.data.tsConfig = tsConfig;\n  });\n};\n\n/**\n * Set the paths for entrypoint dependencies.\n *\n * This doesn't mutate the object.\n *\n * @param parsedTsConfig - A parsed tsconfig\n * @param entryPoints - A list of entryPoints\n * @param pointToSource Point the path mapping to either the source code or emitted declarations.\n * Typically for analysis one should point to the source files while for a compilation once should use the emitted declarations\n */\nexport function setDependenciesTsConfigPaths(\n  parsedTsConfig: ng.ParsedConfiguration,\n  entryPoints: EntryPointNode[],\n  pointToSource = false,\n): ng.ParsedConfiguration {\n  const tsConfig = JSON.parse(JSON.stringify(parsedTsConfig));\n\n  // Add paths mappings for dependencies\n  if (!tsConfig.options.paths) {\n    tsConfig.options.paths = {};\n  }\n\n  for (let dep of entryPoints) {\n    const { entryPoint } = dep.data;\n    const { moduleId, destinationFiles, entryFilePath } = entryPoint;\n    const mappedPath = [pointToSource ? entryFilePath : destinationFiles.declarations];\n\n    if (!tsConfig.options.paths[moduleId]) {\n      tsConfig.options.paths[moduleId] = mappedPath;\n    } else {\n      tsConfig.options.paths[moduleId].unshift(...mappedPath);\n    }\n  }\n\n  return tsConfig;\n}\n"]}
##############################################
/src/lib/ts/tsconfig.js-75-        // Resolve defaults from DI token and create a deep copy of the defaults
/src/lib/ts/tsconfig.js:76:        let tsConfig = JSON.parse(JSON.stringify(defaultTsConfig));
/src/lib/ts/tsconfig.js-77-        const overrideOptions = {
##############################################
/src/lib/ts/tsconfig.js-98-function setDependenciesTsConfigPaths(parsedTsConfig, entryPoints, pointToSource = false) {
/src/lib/ts/tsconfig.js:99:    const tsConfig = JSON.parse(JSON.stringify(parsedTsConfig));
/src/lib/ts/tsconfig.js-100-    // Add paths mappings for dependencies
