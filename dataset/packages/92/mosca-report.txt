<report_mosca>
 <Path>/src/lib/middleware/prepareQuery.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 37 -        var select = queryOptions.select.split(',');

 Line: 38 -        queryOptions.select = {};

 Line: 42 -            queryOptions.select[select[i].substring(1)] = 0;

 Line: 44 -            queryOptions.select[select[i]] = 1;

 Line: 51 -          var populate = queryOptions.populate.split(',');

 Line: 52 -          queryOptions.populate = [];

 Line: 55 -            queryOptions.populate.push({

 Line: 59 -            for (var key in queryOptions.select) {

 Line: 62 -                  queryOptions.populate[i].select += ' ';

 Line: 64 -                  queryOptions.populate[i].select = '';

 Line: 68 -                  queryOptions.populate[i].select += '-';

 Line: 71 -                queryOptions.populate[i].select += key.substring(populate[i].length + 1);

 Line: 72 -                delete queryOptions.select[key];

 Line: 79 -                queryOptions.select[populate[i]] = 1;

 Line: 81 -                delete queryOptions.select;

 Line: 86 -          queryOptions.populate = [queryOptions.populate];

 Line: 90 -      return queryOptions;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/operations.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -        var query = buildQuery(filteredContext.find(), req._ermQueryOptions).read(options.readPreference);

 Line: 21 -        query.lean(options.lean).exec().then(function (items) {

 Line: 26 -            query.skip(0).limit(0).count().then(function (count) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/buildQuery.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -    return function (query, queryOptions) {

 Line: 5 -        return query;

 Line: 9 -        query.where(queryOptions.query);

 Line: 13 -        query.skip(queryOptions.skip);

 Line: 16 -      if (options.limit && (!queryOptions.limit || queryOptions.limit === '0' || queryOptions.limit > options.limit)) {

 Line: 17 -        queryOptions.limit = options.limit;

 Line: 20 -      if (queryOptions.limit && query.op !== 'count' && !queryOptions.distinct) {

 Line: 21 -        query.limit(queryOptions.limit);

 Line: 25 -        query.sort(queryOptions.sort);

 Line: 29 -        query.populate(queryOptions.populate);

 Line: 33 -        query.select(queryOptions.select);

 Line: 37 -        query.distinct(queryOptions.distinct);

 Line: 40 -      return query;

</Result>
</report_mosca>

