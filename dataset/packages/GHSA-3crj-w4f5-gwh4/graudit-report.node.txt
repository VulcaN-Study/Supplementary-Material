/src/lib/thirdparty/less/index.js-21-        if (callback) {
/src/lib/thirdparty/less/index.js:22:            parser.parse(input, function (e, root) {
/src/lib/thirdparty/less/index.js-23-                try { callback(e, root && root.toCSS && root.toCSS(options)); } 
##############################################
/src/lib/thirdparty/less/index.js-29-            process.nextTick(function () {
/src/lib/thirdparty/less/index.js:30:                parser.parse(input, function (e, root) {
/src/lib/thirdparty/less/index.js-31-                    if (e) { return ee.emit('error', e); }
##############################################
/src/lib/thirdparty/less/index.js-202-                        } else {
/src/lib/thirdparty/less/index.js:203:                            fs.readFile(pathname, 'utf-8', function(e, data) {
/src/lib/thirdparty/less/index.js-204-                                if (e) { callback(e); }
##############################################
/src/lib/thirdparty/less/parser.js-104-                    } else {
/src/lib/thirdparty/less/parser.js:105:                        new(less.Parser)(newEnv).parse(contents, function (e, root) {
/src/lib/thirdparty/less/parser.js-106-                            fileParsedFunc(e, root, fullPath);
##############################################
/src/lib/less/importsPush.js-65-					// Create custom parser when resolving imports
/src/lib/less/importsPush.js:66:					parserFactory(newEnv, fileLoader).parse(contents, function(e, root) {
/src/lib/less/importsPush.js-67-					/* END MODIFICATION */
##############################################
/src/lib/index.js-154-
/src/lib/index.js:155:		that.fileUtils.readFile(pathname, options.rootPaths).then(function(result) {
/src/lib/index.js-156-			if (!result) {
##############################################
/src/lib/index.js-207-		return new Promise(function(resolve, reject) {
/src/lib/index.js:208:			parser.parse(config.content, function(err, tree) {
/src/lib/index.js-209-				if (err) {
##############################################
/src/lib/index.js-260-					// parse the content again to have a clean tree
/src/lib/index.js:261:					parser.parse(config.content, function(err, tree) {
/src/lib/index.js-262-						if (err) {
##############################################
/src/lib/index.js-285-					return new Promise(function(resolve, reject) {
/src/lib/index.js:286:						parser.parse(result.cssVariablesSource, function(err, tree) {
/src/lib/index.js-287-							if (err) {
##############################################
/src/lib/index.js-360-		return Promise.all([
/src/lib/index.js:361:			that.fileUtils.readFile(scopeOptions.embeddedCompareFilePath, options.rootPaths).then(function(config) {
/src/lib/index.js-362-				if (!config) {
##############################################
/src/lib/index.js-366-			}),
/src/lib/index.js:367:			that.fileUtils.readFile(scopeOptions.embeddedFilePath, options.rootPaths).then(function(config) {
/src/lib/index.js-368-				if (!config) {
##############################################
/src/lib/index.js-384-				// Create diff object between embeddedCompare and embedded
/src/lib/index.js:385:				const oBase = css.parse(embeddedCompareCss);
/src/lib/index.js:386:				const oEmbedded = css.parse(embeddedCss);
/src/lib/index.js-387-
##############################################
/src/lib/index.js-466-	function readDotTheming(dotThemingInputPath) {
/src/lib/index.js:467:		return that.fileUtils.readFile(dotThemingInputPath, options.rootPaths).then(function(result) {
/src/lib/index.js-468-			let dotTheming;
##############################################
/src/lib/index.js-471-			if (result) {
/src/lib/index.js:472:				dotTheming = JSON.parse(result.content);
/src/lib/index.js-473-				dotThemingFilePath = result.path;
##############################################
/src/lib/index.js-512-			// No css diffing and scoping
/src/lib/index.js:513:			return that.fileUtils.readFile(options.lessInputPath, options.rootPaths).then(compile);
/src/lib/index.js-514-		});
##############################################
/src/lib/fileUtils.js-49-			return new Promise(function(resolve, reject) {
/src/lib/fileUtils.js:50:				fs.readFile(fileInfo.path, {
/src/lib/fileUtils.js-51-					encoding: "utf8"
