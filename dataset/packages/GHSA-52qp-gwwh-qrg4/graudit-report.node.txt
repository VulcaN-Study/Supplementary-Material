/src/index.js-23-const newVersionIsAPatch = (latestVersion, currentVersion) => {
/src/index.js:24:    const latestVersionParsed = semver.parse(latestVersion);
/src/index.js:25:    const currentVersionParsed = semver.parse(currentVersion);
/src/index.js-26-
##############################################
/src/lib/config/port-config.js-47-const savePortsConfig = async (ports) => {
/src/lib/config/port-config.js:48:    await fs.promises.writeFile(
/src/lib/config/port-config.js-49-        path.join(baseConfig.cacheDir, 'port-config.json'),
##############################################
/src/lib/config/get-port-config.js-22-        if (await pathExists(portConfigPath)) {
/src/lib/config/get-port-config.js:23:            ports = JSON.parse(
/src/lib/config/get-port-config.js:24:                await fs.promises.readFile(
/src/lib/config/get-port-config.js-25-                    portConfigPath,
##############################################
/src/lib/config/get-port-config.js-61-        if (await pathExists(portConfigPath)) {
/src/lib/config/get-port-config.js:62:            ports = JSON.parse(
/src/lib/config/get-port-config.js:63:                await fs.promises.readFile(
/src/lib/config/get-port-config.js-64-                    portConfigPath,
##############################################
/src/lib/config/get-config-from-config-file.js-35-            if (legacyMagentoConfigExists) {
/src/lib/config/get-config-from-config-file.js:36:                const legacyMagentoConfig = JSON.parse(
/src/lib/config/get-config-from-config-file.js:37:                    await fs.promises.readFile(magentoConfigFilePath, 'utf-8')
/src/lib/config/get-config-from-config-file.js-38-                );
##############################################
/src/lib/config/php/extensions/libsodium.js-25-            }
/src/lib/config/php/extensions/libsodium.js:26:            const fileContent = await fs.promises.readFile(sodiumDynamicLibraryPath, 'utf-8');
/src/lib/config/php/extensions/libsodium.js-27-
/src/lib/config/php/extensions/libsodium.js-28-            if (/^extension=libsodium\.so$/.test(fileContent.trim())) {
/src/lib/config/php/extensions/libsodium.js:29:                await fs.promises.writeFile(
/src/lib/config/php/extensions/libsodium.js-30-                    sodiumDynamicLibraryPath,
##############################################
/src/lib/config/system-config.js-21-        if (await pathExists(systemConfigPath)) {
/src/lib/config/system-config.js:22:            const userSystemConfig = await fs.promises.readFile(systemConfigPath, 'utf-8');
/src/lib/config/system-config.js-23-            let userSystemConfigParsed;
/src/lib/config/system-config.js-24-            try {
/src/lib/config/system-config.js:25:                userSystemConfigParsed = JSON.parse(userSystemConfig);
/src/lib/config/system-config.js-26-            } catch (e) {
##############################################
/src/lib/tasks/requirements/composer.js-17-                // eslint-disable-next-line no-unused-expressions
/src/lib/tasks/requirements/composer.js:18:                magento = JSON.parse(process.env.COMPOSER_AUTH)['http-basic']['repo.magento.com'];
/src/lib/tasks/requirements/composer.js-19-            } catch (e) {
##############################################
/src/lib/tasks/docker/containers.js-148-    try {
/src/lib/tasks/docker/containers.js:149:        return JSON.parse(await execAsyncSpawn(`docker inspect --format='{{json .State.Health}}' ${containerName}`));
/src/lib/tasks/docker/containers.js-150-    } catch {
##############################################
/src/lib/tasks/magento/remove-magento.js-52-                if (file.isFile()) {
/src/lib/tasks/magento/remove-magento.js:53:                    await fs.promises.unlink(filePath);
/src/lib/tasks/magento/remove-magento.js-54-                } else if (file.isDirectory()) {
##############################################
/src/lib/tasks/status/index.js-30-
/src/lib/tasks/status/index.js:31:    const { name: folderName } = path.parse(process.cwd());
/src/lib/tasks/status/index.js-32-
##############################################
/src/lib/tasks/php-fpm/stop-php-fpm.js-10-    if (pidExists) {
/src/lib/tasks/php-fpm/stop-php-fpm.js:11:        return fs.promises.readFile(fpmPidFilePath, 'utf-8');
/src/lib/tasks/php-fpm/stop-php-fpm.js-12-    }
##############################################
/src/lib/tasks/php-fpm/stop-php-fpm.js-33-                try {
/src/lib/tasks/php-fpm/stop-php-fpm.js:34:                    await fs.promises.unlink(php.fpmPidFilePath);
/src/lib/tasks/php-fpm/stop-php-fpm.js-35-                } catch (e) {
##############################################
/src/lib/tasks/php-fpm/stop-php-fpm.js-44-            try {
/src/lib/tasks/php-fpm/stop-php-fpm.js:45:                await fs.promises.unlink(php.fpmPidFilePath);
/src/lib/tasks/php-fpm/stop-php-fpm.js-46-            } catch (e) {
##############################################
/src/lib/util/prefix.js-3-
/src/lib/util/prefix.js:4:const { name: folderName } = path.parse(process.cwd());
/src/lib/util/prefix.js-5-
##############################################
/src/lib/util/get-jsonfile-data.js-10-
/src/lib/util/get-jsonfile-data.js:11:    return JSON.parse(await fs.promises.readFile(filePath, 'utf-8'));
/src/lib/util/get-jsonfile-data.js-12-};
##############################################
/src/lib/util/set-config.js-17-
/src/lib/util/set-config.js:18:    const configTemplate = await fs.promises.readFile(template, 'utf-8');
/src/lib/util/set-config.js-19-    const compliedConfig = await eta.render(configTemplate, {
##############################################
/src/lib/util/set-config.js-23-
/src/lib/util/set-config.js:24:    const { dir } = path.parse(configPathname);
/src/lib/util/set-config.js-25-
##############################################
/src/lib/util/set-config.js-29-    }
/src/lib/util/set-config.js:30:    await fs.promises.writeFile(configPathname, compliedConfig, { encoding: 'utf-8' });
/src/lib/util/set-config.js-31-
##############################################
/src/lib/util/move-file.js-4-    const copy = () => new Promise((resolve, reject) => {
/src/lib/util/move-file.js:5:        const readStream = fs.createReadStream(from);
/src/lib/util/move-file.js-6-        const writeStream = fs.createWriteStream(to);
/src/lib/util/move-file.js-7-        const onError = async (e) => {
/src/lib/util/move-file.js:8:            await fs.promises.unlink(to);
/src/lib/util/move-file.js-9-            reject(e);
##############################################
/src/lib/util/move-file.js-16-            try {
/src/lib/util/move-file.js:17:                await fs.promises.unlink(from);
/src/lib/util/move-file.js-18-            } catch (e) {
##############################################
/src/lib/util/move-file.js-27-    try {
/src/lib/util/move-file.js:28:        await fs.promises.rename(from, to);
/src/lib/util/move-file.js-29-    } catch (e) {
##############################################
/src/lib/util/get-installed-magento-version.js-11-
/src/lib/util/get-installed-magento-version.js:12:    return JSON.parse(await fs.promises.readFile(composerPath, 'utf-8'));
/src/lib/util/get-installed-magento-version.js-13-};
