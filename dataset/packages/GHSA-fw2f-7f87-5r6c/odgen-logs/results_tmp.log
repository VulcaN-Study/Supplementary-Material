|checker| success id$0$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/index.js
Line 8	function testResource(statements, context) {
  validate.args(arguments);
  validate.statements(statements);

  if (!statements.length) {
    return false;
  }

  if (!statements.encoded) {
    statements = encode(statements, context);
  }

  var matches = resources(statements, context);

  if (matches.length) {
    return matches;
  }

  return false;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/encode.js
Line 9	function encodeStatements(statements, data) {
  if (!statements) {
    throw new SyntaxError('Must include statements to encode');
  }

  if (!data) {
    return statements;
  }

  var output = template(JSON.stringify(statements), data);
  output = JSON.parse(output);

  Object.defineProperty(output, 'encoded', {
    __proto__: null,
    value: true
  });

  return output;
}
$FilePath$/src/lib/encode.js
Line 18	  var output = template(JSON.stringify(statements), data);
$FilePath$/src/lib/encode.js
Line 4	  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
$FilePath$/src/lib/encode.js
Line 6	  return eval('`' + tmpl + '`');

