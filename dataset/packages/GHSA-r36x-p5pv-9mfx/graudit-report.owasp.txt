/src/src/lib/zlib/inflate.c-540-   if the appropriate resources are provided, the machine proceeds to the
/src/src/lib/zlib/inflate.c:541:   next state.  The NEEDBITS() macro is usually the way the state evaluates
/src/src/lib/zlib/inflate.c-542-   whether it can proceed or should return.  NEEDBITS() does the return if
##############################################
/src/src/lib/zlib/deflate.h-164-    /* Length of the best match at previous step. Matches not greater than this
/src/src/lib/zlib/deflate.h:165:     * are discarded. This is used in the lazy match evaluation.
/src/src/lib/zlib/deflate.h-166-     */
##############################################
/src/src/lib/zlib/deflate.c-32- *
/src/src/lib/zlib/deflate.c:33: *      The idea of lazy evaluation of matches is due to Jan-Mark Wams, and
/src/src/lib/zlib/deflate.c-34- *      I found it in 'freeze' written by Leonid Broukhis.
##############################################
/src/src/lib/zlib/deflate.c-1623- * block state.
/src/src/lib/zlib/deflate.c:1624: * This function does not perform lazy evaluation of matches and inserts
/src/src/lib/zlib/deflate.c-1625- * new strings in the dictionary only for unmatched strings or for short
##############################################
/src/src/lib/zlib/deflate.c-1726- * Same as above, but achieves better compression. We use a lazy
/src/src/lib/zlib/deflate.c:1727: * evaluation for matches: a match is finally adopted only if there is
/src/src/lib/zlib/deflate.c-1728- * no better match at the next window position.
##############################################
/src/src/lib/png/pngrutil.c-3108-          * Produces warnings with values of 'shift' in the range 33 to 63
/src/src/lib/png/pngrutil.c:3109:          * because the right hand side of the ?: expression is evaluated by
/src/src/lib/png/pngrutil.c-3110-          * the compiler even though it isn't used.  Microsoft Visual C (various
##############################################
/src/src/lib/png/pngget.c-1-
/src/src/lib/png/pngget.c:2:/* pngget.c - retrieval of values from info struct
/src/src/lib/png/pngget.c-3- *
##############################################
/src/src/lib/png/pngget.c-121-      {
/src/src/lib/png/pngget.c:122:         png_debug1(1, "in %s retrieval function",
/src/src/lib/png/pngget.c-123-             "png_get_x_pixels_per_meter");
##############################################
/src/src/lib/png/pngget.c-143-   {
/src/src/lib/png/pngget.c:144:      png_debug1(1, "in %s retrieval function",
/src/src/lib/png/pngget.c-145-          "png_get_y_pixels_per_meter");
##############################################
/src/src/lib/png/pngget.c-164-   {
/src/src/lib/png/pngget.c:165:      png_debug1(1, "in %s retrieval function", "png_get_pixels_per_meter");
/src/src/lib/png/pngget.c-166-
##############################################
/src/src/lib/png/pngget.c-187-   {
/src/src/lib/png/pngget.c:188:      png_debug1(1, "in %s retrieval function", "png_get_aspect_ratio");
/src/src/lib/png/pngget.c-189-
##############################################
/src/src/lib/png/pngget.c-216-
/src/src/lib/png/pngget.c:217:      png_debug1(1, "in %s retrieval function", "png_get_aspect_ratio_fixed");
/src/src/lib/png/pngget.c-218-
##############################################
/src/src/lib/png/pngget.c-241-   {
/src/src/lib/png/pngget.c:242:      png_debug1(1, "in %s retrieval function", "png_get_x_offset_microns");
/src/src/lib/png/pngget.c-243-
##############################################
/src/src/lib/png/pngget.c-261-   {
/src/src/lib/png/pngget.c:262:      png_debug1(1, "in %s retrieval function", "png_get_y_offset_microns");
/src/src/lib/png/pngget.c-263-
##############################################
/src/src/lib/png/pngget.c-281-   {
/src/src/lib/png/pngget.c:282:      png_debug1(1, "in %s retrieval function", "png_get_x_offset_pixels");
/src/src/lib/png/pngget.c-283-
##############################################
/src/src/lib/png/pngget.c-301-   {
/src/src/lib/png/pngget.c:302:      png_debug1(1, "in %s retrieval function", "png_get_y_offset_pixels");
/src/src/lib/png/pngget.c-303-
##############################################
/src/src/lib/png/pngget.c-428-   {
/src/src/lib/png/pngget.c:429:      png_debug1(1, "in %s retrieval function", "pHYs");
/src/src/lib/png/pngget.c-430-
##############################################
/src/src/lib/png/pngget.c-494-   {
/src/src/lib/png/pngget.c:495:      png_debug1(1, "in %s retrieval function", "bKGD");
/src/src/lib/png/pngget.c-496-
##############################################
/src/src/lib/png/pngget.c-524-   {
/src/src/lib/png/pngget.c:525:      png_debug1(1, "in %s retrieval function", "cHRM");
/src/src/lib/png/pngget.c-526-
##############################################
/src/src/lib/png/pngget.c-565-   {
/src/src/lib/png/pngget.c:566:      png_debug1(1, "in %s retrieval function", "cHRM_XYZ(float)");
/src/src/lib/png/pngget.c-567-
##############################################
/src/src/lib/png/pngget.c-613-   {
/src/src/lib/png/pngget.c:614:      png_debug1(1, "in %s retrieval function", "cHRM_XYZ");
/src/src/lib/png/pngget.c-615-
##############################################
/src/src/lib/png/pngget.c-645-{
/src/src/lib/png/pngget.c:646:   png_debug1(1, "in %s retrieval function", "cHRM");
/src/src/lib/png/pngget.c-647-
##############################################
/src/src/lib/png/pngget.c-680-{
/src/src/lib/png/pngget.c:681:   png_debug1(1, "in %s retrieval function", "gAMA");
/src/src/lib/png/pngget.c-682-
##############################################
/src/src/lib/png/pngget.c-699-{
/src/src/lib/png/pngget.c:700:   png_debug1(1, "in %s retrieval function", "gAMA(float)");
/src/src/lib/png/pngget.c-701-
##############################################
/src/src/lib/png/pngget.c-720-{
/src/src/lib/png/pngget.c:721:   png_debug1(1, "in %s retrieval function", "sRGB");
/src/src/lib/png/pngget.c-722-
##############################################
/src/src/lib/png/pngget.c-739-{
/src/src/lib/png/pngget.c:740:   png_debug1(1, "in %s retrieval function", "iCCP");
/src/src/lib/png/pngget.c-741-
##############################################
/src/src/lib/png/pngget.c-780-{
/src/src/lib/png/pngget.c:781:   png_debug1(1, "in %s retrieval function", "hIST");
/src/src/lib/png/pngget.c-782-
##############################################
/src/src/lib/png/pngget.c-799-{
/src/src/lib/png/pngget.c:800:   png_debug1(1, "in %s retrieval function", "IHDR");
/src/src/lib/png/pngget.c-801-
##############################################
/src/src/lib/png/pngget.c-842-{
/src/src/lib/png/pngget.c:843:   png_debug1(1, "in %s retrieval function", "oFFs");
/src/src/lib/png/pngget.c-844-
##############################################
/src/src/lib/png/pngget.c-864-{
/src/src/lib/png/pngget.c:865:   png_debug1(1, "in %s retrieval function", "pCAL");
/src/src/lib/png/pngget.c-866-
##############################################
/src/src/lib/png/pngget.c-952-
/src/src/lib/png/pngget.c:953:   png_debug1(1, "in %s retrieval function", "pHYs");
/src/src/lib/png/pngget.c-954-
##############################################
/src/src/lib/png/pngget.c-984-{
/src/src/lib/png/pngget.c:985:   png_debug1(1, "in %s retrieval function", "PLTE");
/src/src/lib/png/pngget.c-986-
##############################################
/src/src/lib/png/pngget.c-1003-{
/src/src/lib/png/pngget.c:1004:   png_debug1(1, "in %s retrieval function", "sBIT");
/src/src/lib/png/pngget.c-1005-
##############################################
/src/src/lib/png/pngget.c-1023-   {
/src/src/lib/png/pngget.c:1024:      png_debug1(1, "in 0x%lx retrieval function",
/src/src/lib/png/pngget.c-1025-         (unsigned long)png_ptr->chunk_name);
##############################################
/src/src/lib/png/pngget.c-1047-{
/src/src/lib/png/pngget.c:1048:   png_debug1(1, "in %s retrieval function", "tIME");
/src/src/lib/png/pngget.c-1049-
##############################################
/src/src/lib/png/pngget.c-1069-   {
/src/src/lib/png/pngget.c:1070:      png_debug1(1, "in %s retrieval function", "tRNS");
/src/src/lib/png/pngget.c-1071-
##############################################
/src/src/lib/png/png.h-551- *   PNG_USE_READ_MACROS: use the macros (see below)  Note that
/src/src/lib/png/png.h:552: *     the macros evaluate their argument multiple times.
/src/src/lib/png/png.h-553- *   PNG_NO_USE_READ_MACROS: call the relevant library function.
##############################################
/src/src/lib/png/png.h-2583-
/src/src/lib/png/png.h:2584:/* Two macros to help evaluate the number of rows or columns in each
/src/src/lib/png/png.h-2585- * pass.  This is expressed as a shift - effectively log2 of the number or
##############################################
/src/src/lib/png/pngpriv.h-647-/* PNG_OUT_OF_RANGE returns true if value is outside the range
/src/src/lib/png/pngpriv.h:648: * ideal-delta..ideal+delta.  Each argument is evaluated twice.
/src/src/lib/png/pngpriv.h-649- * "ideal" and "delta" should be constants, normally simple
##############################################
/src/src/lib/png/pngpriv.h-668-
/src/src/lib/png/pngpriv.h:669:/* The fixed point conversion performs range checking and evaluates
/src/src/lib/png/pngpriv.h-670- * its argument multiple times, so must be used with care.  The
##############################################
/src/src/lib/cimg/CImg.h-2214-    // Evaluate math expression.
/src/src/lib/cimg/CImg.h:2215:    inline double eval(const char *const expression,
/src/src/lib/cimg/CImg.h-2216-                       const double x=0, const double y=0, const double z=0, const double c=0);
##############################################
/src/src/lib/cimg/CImg.h-4194-#if cimg_OS==1
/src/src/lib/cimg/CImg.h:4195:      struct timeval st_time;
/src/src/lib/cimg/CImg.h-4196-      gettimeofday(&st_time,0);
##############################################
/src/src/lib/cimg/CImg.h-4603-       \return Read value.
/src/src/lib/cimg/CImg.h:4604:       \note Same as <tt>std::atof()</tt> extended to manage the retrieval of fractions from C-strings,
/src/src/lib/cimg/CImg.h-4605-       as in <em>"1/2"</em>.
##############################################
/src/src/lib/cimg/CImg.h-6561-    /**
/src/src/lib/cimg/CImg.h:6562:       \param pos_x X-coordinate of the new window location.
/src/src/lib/cimg/CImg.h:6563:       \param pos_y Y-coordinate of the new window location.
/src/src/lib/cimg/CImg.h-6564-       \note Depending on the window manager behavior, this method may not succeed (no exceptions are thrown
##############################################
/src/src/lib/cimg/CImg.h-13928-
/src/src/lib/cimg/CImg.h:13929:    // Define the math formula parser/compiler and expression evaluator.
/src/src/lib/cimg/CImg.h-13930-    struct _cimg_math_parser {
##############################################
/src/src/lib/cimg/CImg.h-14042-
/src/src/lib/cimg/CImg.h:14043:        // Free resources used for parsing and prepare for evaluation.
/src/src/lib/cimg/CImg.h-14044-        mem.resize(mempos,1,1,1,-1);
##############################################
/src/src/lib/cimg/CImg.h-15260-          const CImg<longT> &op = *p_code;
/src/src/lib/cimg/CImg.h:15261:          // Allows to avoid parameter passing to evaluation functions.
/src/src/lib/cimg/CImg.h-15262-          opcode._data = op._data; opcode._height = op._height;
##############################################
/src/src/lib/cimg/CImg.h-17465-    **/
/src/src/lib/cimg/CImg.h:17466:    double eval(const char *const expression,
/src/src/lib/cimg/CImg.h-17467-                const double x=0, const double y=0, const double z=0, const double c=0) {
/src/src/lib/cimg/CImg.h:17468:      return _eval(this,expression,x,y,z,c);
/src/src/lib/cimg/CImg.h-17469-    }
##############################################
/src/src/lib/cimg/CImg.h-17471-    //! Evaluate math formula \const.
/src/src/lib/cimg/CImg.h:17472:    double eval(const char *const expression,
/src/src/lib/cimg/CImg.h-17473-                const double x=0, const double y=0, const double z=0, const double c=0) const {
/src/src/lib/cimg/CImg.h:17474:      return _eval(0,expression,x,y,z,c);
/src/src/lib/cimg/CImg.h-17475-    }
/src/src/lib/cimg/CImg.h-17476-
/src/src/lib/cimg/CImg.h:17477:    double _eval(CImg<T> *const output, const char *const expression,
/src/src/lib/cimg/CImg.h-17478-                 const double x=0, const double y=0, const double z=0, const double c=0) const {
##############################################
/src/src/lib/cimg/CImg.h-17488-                               expression + (*expression=='>' || *expression=='<' || *expression=='*'?1:0),
/src/src/lib/cimg/CImg.h:17489:                               "eval")(x,y,z,c);
/src/src/lib/cimg/CImg.h-17490-    }
##############################################
/src/src/lib/cimg/CImg.h-17494-       \param expression Math formula, as a C-string.
/src/src/lib/cimg/CImg.h:17495:       \param xyzc Set of values (x,y,z,c) used for the evaluation.
/src/src/lib/cimg/CImg.h-17496-    **/
/src/src/lib/cimg/CImg.h-17497-    template<typename t>
/src/src/lib/cimg/CImg.h:17498:    CImg<doubleT> eval(const char *const expression, const CImg<t>& xyzc) {
/src/src/lib/cimg/CImg.h:17499:      return _eval(this,expression,xyzc);
/src/src/lib/cimg/CImg.h-17500-    }
##############################################
/src/src/lib/cimg/CImg.h-17503-    template<typename t>
/src/src/lib/cimg/CImg.h:17504:    CImg<doubleT> eval(const char *const expression, const CImg<t>& xyzc) const {
/src/src/lib/cimg/CImg.h:17505:      return _eval(0,expression,xyzc);
/src/src/lib/cimg/CImg.h-17506-    }
##############################################
/src/src/lib/cimg/CImg.h-17508-    template<typename t>
/src/src/lib/cimg/CImg.h:17509:    CImg<doubleT> _eval(CImg<T> *const output, const char *const expression, const CImg<t>& xyzc) const {
/src/src/lib/cimg/CImg.h-17510-      CImg<doubleT> res(1,xyzc.size()/4);
/src/src/lib/cimg/CImg.h-17511-      if (!expression) return res.fill(0);
/src/src/lib/cimg/CImg.h:17512:      _cimg_math_parser mp(*this,output,expression,"eval");
/src/src/lib/cimg/CImg.h-17513-#ifdef cimg_use_openmp
##############################################
/src/src/lib/cimg/CImg.h-52389-  /**
/src/src/lib/cimg/CImg.h:52390:     \param expression C-string describing the formula to evaluate.
/src/src/lib/cimg/CImg.h-52391-     \param x Value of the pre-defined variable \c x.
##############################################
/src/src/lib/cimg/CImg.h-52394-     \param c Value of the pre-defined variable \c c.
/src/src/lib/cimg/CImg.h:52395:     \return Result of the formula evaluation.
/src/src/lib/cimg/CImg.h:52396:     \note Set \c expression to \c 0 to keep evaluating the last specified \c expression.
/src/src/lib/cimg/CImg.h-52397-     \par Example
##############################################
/src/src/lib/cimg/CImg.h-52399-     const double
/src/src/lib/cimg/CImg.h:52400:     res1 = cimg::eval("cos(x)^2 + sin(y)^2",2,2),  // will return '1'.
/src/src/lib/cimg/CImg.h:52401:     res2 = cimg::eval(0,1,1);                    // will return '1' too.
/src/src/lib/cimg/CImg.h-52402-     \endcode
/src/src/lib/cimg/CImg.h-52403-  **/
/src/src/lib/cimg/CImg.h:52404:  inline double eval(const char *const expression, const double x, const double y, const double z, const double c) {
/src/src/lib/cimg/CImg.h-52405-    static const CImg<float> empty;
/src/src/lib/cimg/CImg.h:52406:    return empty.eval(expression,x,y,z,c);
/src/src/lib/cimg/CImg.h-52407-  }
##############################################
/src/src/lib/cimg/CImg.h-52409-  template<typename t>
/src/src/lib/cimg/CImg.h:52410:  inline CImg<typename cimg::superset<double,t>::type> eval(const char *const expression, const CImg<t>& xyzc) {
/src/src/lib/cimg/CImg.h-52411-    static const CImg<float> empty;
/src/src/lib/cimg/CImg.h:52412:    return empty.eval(expression,xyzc);
/src/src/lib/cimg/CImg.h-52413-  }
##############################################
/src/src/lib/jpeg/jdhuff.c-131- * The value N should be a simple variable, not an expression, because it
/src/src/lib/jpeg/jdhuff.c:132: * is evaluated multiple times.
/src/src/lib/jpeg/jdhuff.c-133- */
##############################################
/src/src/lib/gif/gif_hash.c-111- Because the average hit ratio is only 2 (2 hash references per entry),      *
/src/src/lib/gif/gif_hash.c:112: evaluating more complex keys (such as twin prime keys) does not worth it!   *
/src/src/lib/gif/gif_hash.c-113-******************************************************************************/
##############################################
/src/prebuild.js-15-    //得到目录路径
/src/prebuild.js:16:    opts.push(evaluate(pkg, binaries[i]));
/src/prebuild.js-17-}
##############################################
/src/prebuild.js-156-
/src/prebuild.js:157:function eval_template(template, opts) {
/src/prebuild.js-158-    Object.keys(opts).forEach(function (key) {
##############################################
/src/prebuild.js-187-
/src/prebuild.js:188:function evaluate(package_json, module_name) {
/src/prebuild.js-189-    var v = package_json.version;
##############################################
/src/prebuild.js-209-    };
/src/prebuild.js:210:    opts.host = fix_slashes(eval_template(package_json.binary.host, opts));
/src/prebuild.js:211:    opts.module_path = eval_template(package_json.binary.module_path, opts);
/src/prebuild.js-212-
##############################################
/src/prebuild.js-215-    opts.module = path.join(opts.module_path, opts.module_name + '.node');
/src/prebuild.js:216:    opts.remote_path = package_json.binary.remote_path ? drop_double_slashes(fix_slashes(eval_template(package_json.binary.remote_path, opts))) : default_remote_path;
/src/prebuild.js-217-    var package_name = package_json.binary.package_name ? package_json.binary.package_name : default_package_name;
/src/prebuild.js:218:    opts.package_name = eval_template(package_name, opts);
/src/prebuild.js-219-    opts.staged_tarball = path.join('build/stage', opts.remote_path, opts.package_name);
