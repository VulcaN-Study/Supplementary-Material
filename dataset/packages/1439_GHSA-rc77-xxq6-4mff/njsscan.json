{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 45,
          "line": 3
        },
        "extra": {
          "line": "Copyright (c) Handsoncode sp. z o.o. <hello@handsoncode.net>",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 44,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            1100,
            1100
          ],
          "match_position": [
            10,
            21
          ],
          "match_string": "  return Math.random();"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            1111,
            1111
          ],
          "match_position": [
            50,
            61
          ],
          "match_string": "  return bottom + Math.ceil((top - bottom + 1) * Math.random()) - 1;"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            6074,
            6074
          ],
          "match_position": [
            9,
            20
          ],
          "match_string": "    u = Math.random();"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            6075,
            6075
          ],
          "match_position": [
            19,
            30
          ],
          "match_string": "    v = 1.7156 * (Math.random() - 0.5);"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            6107,
            6107
          ],
          "match_position": [
            9,
            20
          ],
          "match_string": "    u = Math.random();"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            6115,
            6115
          ],
          "match_position": [
            9,
            20
          ],
          "match_string": "    u = Math.random();"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            6426,
            6426
          ],
          "match_position": [
            33,
            44
          ],
          "match_string": "    return -1 / rate * Math.log(Math.random());"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            6816,
            6816
          ],
          "match_position": [
            39,
            50
          ],
          "match_string": "    return scale * Math.pow(-Math.log(Math.random()), 1 / shape);"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            6858,
            6858
          ],
          "match_position": [
            53,
            64
          ],
          "match_string": "    return (a / 2 + b / 2) + (b / 2 - a / 2) * (2 * Math.random() - 1);"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            7134,
            7134
          ],
          "match_position": [
            12,
            23
          ],
          "match_string": "      p *= Math.random();"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            7200,
            7200
          ],
          "match_position": [
            13,
            24
          ],
          "match_string": "    var u = Math.random();"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            7295,
            7295
          ],
          "match_position": [
            13,
            24
          ],
          "match_string": "    var u = Math.random() - 0.5;"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_timing_attack": {
      "files": [
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            14656,
            14663
          ],
          "match_position": [
            21,
            37
          ],
          "match_string": "                    if (token !== false) {\n\n                        return token;\n\n                    } else if (this._backtrack) {\n\n                        match = false;\n\n                        continue; // rule action called reject() implying a rule MISmatch.\n\n                    } else {\n\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                        return false;"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            14672,
            14673
          ],
          "match_position": [
            13,
            29
          ],
          "match_string": "            if (token !== false) {\n\n                return token;"
        },
        {
          "file_path": "/src/es/grammar-parser/grammar-parser.js",
          "match_lines": [
            792,
            799
          ],
          "match_position": [
            29,
            45
          ],
          "match_string": "                            if (token !== false) {\n\n                                return token;\n\n                            } else if (this._backtrack) {\n\n                                match = false;\n\n                                continue; // rule action called reject() implying a rule MISmatch.\n\n                            } else {\n\n                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                                return false;"
        },
        {
          "file_path": "/src/es/grammar-parser/grammar-parser.js",
          "match_lines": [
            808,
            809
          ],
          "match_position": [
            21,
            37
          ],
          "match_string": "                    if (token !== false) {\n\n                        return token;"
        },
        {
          "file_path": "/src/lib/grammar-parser/grammar-parser.js",
          "match_lines": [
            794,
            801
          ],
          "match_position": [
            29,
            45
          ],
          "match_string": "                            if (token !== false) {\n\n                                return token;\n\n                            } else if (this._backtrack) {\n\n                                match = false;\n\n                                continue; // rule action called reject() implying a rule MISmatch.\n\n                            } else {\n\n                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                                return false;"
        },
        {
          "file_path": "/src/lib/grammar-parser/grammar-parser.js",
          "match_lines": [
            810,
            811
          ],
          "match_position": [
            21,
            37
          ],
          "match_string": "                    if (token !== false) {\n\n                        return token;"
        }
      ],
      "metadata": {
        "cwe": "CWE-208: Observable Timing Discrepancy",
        "description": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            9810,
            9810
          ],
          "match_position": [
            8,
            36
          ],
          "match_string": "  if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            9851,
            9851
          ],
          "match_position": [
            8,
            37
          ],
          "match_string": "  if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            9892,
            9892
          ],
          "match_position": [
            8,
            36
          ],
          "match_string": "  if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            9985,
            9985
          ],
          "match_position": [
            8,
            41
          ],
          "match_string": "  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            10045,
            10045
          ],
          "match_position": [
            8,
            41
          ],
          "match_string": "  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            10672,
            10672
          ],
          "match_position": [
            8,
            35
          ],
          "match_string": "  if (!/^[0-7]{1,10}$/.test(number)) {"
        },
        {
          "file_path": "/src/dist/formula-parser.js",
          "match_lines": [
            10732,
            10732
          ],
          "match_position": [
            8,
            35
          ],
          "match_string": "  if (!/^[0-7]{1,10}$/.test(number)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
