<report_mosca>
 <Path>/src/spec/integ/user-bridge-store.spec.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 159 -          it("should throw if the data query isn't an object", function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/spec/unit/request.spec.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 29 -          setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/spec/unit/event-queue.spec.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 35 -          setTimeout(() => resolve(value), timesteps * SLEEP_TIME)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/client-factory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 128 -          const queryParams = {};

 Line: 130 -              queryParams.user_id = userId;

 Line: 133 -          queryParams.access_token = this.token;

 Line: 138 -              queryParams: queryParams,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/request-factory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 45 -              setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/encryption.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 77 -              this.presenceCleanupInterval = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/room-bridge-store.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 226 -              const query = data[k];

 Line: 228 -              data["remote." + k] = query;

 Line: 244 -              const query = data[k];

 Line: 246 -              data["matrix.extras." + k] = query;

 Line: 261 -              const query = data[k];

 Line: 263 -              data["data." + k] = query;

 Line: 279 -              const query = data[k];

 Line: 281 -              data["remote." + k] = query;

 Line: 310 -              const query = data[k];

 Line: 312 -              data["matrix.extras." + k] = query;

 Line: 340 -              const query = data[k];

 Line: 342 -              data["data." + k] = query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/user-bridge-store.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 81 -       * do not exist. Rejects with an error if there was a problem querying the store.

 Line: 108 -       * do not exist. Rejects with an error if there was a problem querying the store.

 Line: 123 -       * RemoteUsers. Rejects with an error if there was a problem querying the store.

 Line: 143 -              throw new Error("Data query must be an object.");

 Line: 145 -          const query = {};

 Line: 147 -              query["data." + key] = dataQuery[key];

 Line: 149 -          query.type = "remote";

 Line: 159 -       * MatrixUsers. Rejects with an error if there was a problem querying the store.

 Line: 179 -              throw new Error("Data query must be an object.");

 Line: 181 -          const query = {};

 Line: 183 -              query["data." + key] = dataQuery[key];

 Line: 185 -          query.type = "matrix";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/membership-queue.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 190 -              await new Promise((r) => setTimeout(r, delay));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/bridge-store.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 32 -       * INSERT a multiple documents.

 Line: 44 -       * INSERT IF NOT EXISTS a single document

 Line: 53 -       * UPDATE a single document. If the document already exists, this will NOT update

 Line: 60 -       * DELETE multiple documents.

 Line: 66 -       * SELECT a single document.

 Line: 79 -       * SELECT a number of documents.

 Line: 80 -       * @param query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/state-lookup.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 93 -              await new Promise((resolve) => setTimeout(resolve, this.retryStateIn));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/components/state-lookup.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 100 -       * This will perform a room state query initially. Subsequent calls will do

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/bridge.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 340 -          this.intentLastAccessedTimeout = setTimeout(() => {

 Line: 1019 -              timeout: setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/bridge.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 955 -       * authenticated (includes the hsToken). The query parameter `access_token`

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/utils/promiseutil.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 33 -      return new Promise((r) => setTimeout(r, delayMs));

</Result>
</report_mosca>

