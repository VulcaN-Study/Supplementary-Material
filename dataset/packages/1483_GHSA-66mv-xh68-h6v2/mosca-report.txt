<report_mosca>
 <Path>/src/lib/config.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 222 -          query: Joi.alternatives(Joi.object(), Joi.array(), Joi.function()).allow(null, false, true),

 Line: 273 -      query: Joi.object({

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/request.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 272 -          this._setTimeouts();

 Line: 330 -      _setTimeouts() {

 Line: 335 -              this.raw.req.socket.setTimeout(this.route.settings.timeout.socket || 0);    // Value can be false or positive

 Line: 351 -          this._serverTimeoutId = setTimeout(internals.timeoutReply, serverTimeout, this, serverTimeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/request.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 169 -                      const query = h === -1 ? source.slice(q + 1) : source.slice(q + 1, h);

 Line: 213 -          let query = Object.create(null);

 Line: 219 -                  const entry = query[key];

 Line: 224 -                  query[key] = value;

 Line: 228 -              query = Object.assign(query, searchParams);

 Line: 235 -              query = parser(query);

 Line: 237 -                  typeof query !== 'object') {

 Line: 239 -                  throw Boom.badImplementation('Parsed query must be an object');

 Line: 243 -          return query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/toolkit.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 150 -          setTimeout(handler, options.timeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/core.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 442 -              timeoutId = setTimeout(destroy, timeout);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/auth.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 516 -          query: request.query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/validation.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 94 -              query: request.query,

 Line: 185 -              query: request.query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/security.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -                  security._xframe = 'ALLOW-FROM ' + security.xframe.source;

</Result>
</report_mosca>

