|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$4$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$5$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 21	    const sources = Array.isArray(options.source)
      ? options.source.join(" ")
      : options.source;
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$6$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$7$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 24	    const command = `zip --quiet --recurse-paths ${
      options.destination
    } ${sources}`;
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/app/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 51	    const cwd = options.cwd || process.cwd();
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$0$color:green$: 
==========================
$FilePath$/app/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 51	    const cwd = options.cwd || process.cwd();
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$0$color:green$: 
==========================
$FilePath$/app/ODGen/builtin_packages/fs.js
Line 22	module.exports = {
  read: read,
  readdir: readFile,
  readdirSync: readFile,
  readFile: readFile,
  readFileSync: readFile,
  readlink: read,
  readlinkSync: read,
  readSync: read,
  createReadStream: read
}
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 132	function zip(options) {
  const compatMode = typeof options === "string";
  if (compatMode) {
    options = {
      source: arguments[1],
      destination: arguments[0]
    };
  }

  let promise;
  if (hasNativeZip()) {
    promise = nativeZip(options);
  } else {
    promise = nodeZip(options);
  }

  if (compatMode) {
    promise.then(arguments[2]).catch(arguments[2]);
  } else {
    return promise;
  }
}
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$2$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 135	    options = {
      source: arguments[1],
      destination: arguments[0]
    };
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

|checker| success id$3$color:green$: 
==========================
$FilePath$/src/lib/bestzip.js
Line 51	    const cwd = options.cwd || process.cwd();
$FilePath$/src/lib/bestzip.js
Line 52	    const output = fs.createWriteStream(path.resolve(cwd, options.destination));
$FilePath$/src/lib/bestzip.js
Line 58	    archive.pipe(output);

