<report_mosca>
 <Path>/src/lib/column.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -    // creates a query node from this column

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -    var query = new Query({sql: this});

 Line: 50 -    query.select.apply(query, arguments);

 Line: 51 -    return query;

 Line: 69 -  // Create a constant Column (for use in SELECT)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/table.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 184 -    // create the query and pass it off

 Line: 185 -    var query = new Query(this);

 Line: 187 -      query.select.call(query, this.star());

 Line: 189 -      query.select.apply(query, arguments);

 Line: 191 -    return query;

 Line: 195 -    // create the query and pass it off

 Line: 196 -    var query = new Query(this);

 Line: 197 -    query.type = 'SUBQUERY';

 Line: 198 -    query.alias = alias;

 Line: 199 -    query.join = function(other) {

 Line: 202 -    return query;

 Line: 206 -    var query = new Query(this);

 Line: 208 -      query.select.call(query, this.star());

 Line: 209 -      query.where.apply(query,["1=2"]);

 Line: 211 -      query.insert.apply(query, arguments);

 Line: 213 -    return query;

 Line: 217 -    var query = new Query(this);

 Line: 219 -      query.select.call(query, this.star());

 Line: 220 -      query.where.apply(query,["1=2"]);

 Line: 222 -      query.replace.apply(query, arguments);

 Line: 224 -    return query;

 Line: 257 -    var query = new Query(this);

 Line: 258 -    query.where.apply(query, arguments);

 Line: 259 -    return query;

 Line: 266 -  var queryMethods = [

 Line: 283 -      var query = new Query(this);

 Line: 284 -      query[method].apply(query, arguments);

 Line: 285 -      return query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/delete.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -    type: 'DELETE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/forUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -    type: 'FOR UPDATE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/from.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -    type: 'FROM'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/update.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -    type: 'UPDATE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/where.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -          var query = column.equals(node[colName]);

 Line: 33 -            result = query;

 Line: 48 -    type: 'WHERE',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/select.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -    type: 'SELECT',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/replace.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 37 -    // intends to replace a row of default values or append a SELECT statement

 Line: 39 -    // it is a row of default values, otherwise a SELECT will be added.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/insert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    type: 'INSERT',

 Line: 37 -    // intends to insert a row of default values or append a SELECT statement

 Line: 39 -    // it is a row of default values, otherwise a SELECT will be added.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -    assert(node, 'Error while trying to add a non-existant node to a query');

 Line: 26 -    assert(node, 'Error while trying to add a non-existant node to a query');

 Line: 32 -  // into a query. The parallel dialects change made it impossible to change some nodes

 Line: 33 -  // into a query because not all nodes are constructed with the sql instance.

 Line: 35 -    var sql = query.sql || (query.table && query.table.sql);

 Line: 51 -  var initializeDialect = function(Dialect, query) {

 Line: 52 -      var config = query.sql ? query.sql.config : {};

 Line: 63 -      throw new Error('A query name has to be a non-empty String.');

 Line: 65 -    var query = this.toQuery(dialect);

 Line: 66 -    query.name = name;

 Line: 67 -    return query;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/node/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 285 -          // e.g. post.delete(post).from(post) -> DELETE post FROM post

 Line: 286 -          // e.g. post.delete([post, user]).from(post) -> DELETE post, user FROM post

 Line: 338 -      assert(typeof this._select !== 'undefined', 'FOR UPDATE can be used only in a select statement');

 Line: 383 -        var select = this.nodes.filter(function (node) {return node.type === 'SELECT';}).shift();

 Line: 533 -  // Here we are extending query with valueExpressions so that it's possible to write queries like

 Line: 534 -  //   var query=sql.select(a.select(a.x.sum()).plus(b.select(b.y.sum()))

 Line: 536 -  //   SELECT (SELECT SUM(a.x) FROM a) + (SELECT SUM(b.y) FROM b)

 Line: 539 -  //   var query=a.select().where(a.name.equals("joe")).or(a.name.equals("sam"))

 Line: 545 -  // Extend the query with the aliasMixin so that it's possible to write queries like

 Line: 546 -  //   var query=sql.select(a.select(a.count()).as("column1"))

 Line: 548 -  //   SELECT (SELECT COUNT(*) FROM a) AS "column1"

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialect/mysql.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 79 -      'ON DUPLICATE KEY UPDATE',

 Line: 131 -    return "SHOW INDEX FROM " + tableName;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialect/oracle.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 230 -    // TODO: need to add some code to the INSERT clause to support this since its the equivalent of the OUTPUT clause

 Line: 252 -    var indexes = "SELECT * FROM USER_INDEXES WHERE TABLE_NAME = '" + tableName + "'";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialect/mssql.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 206 -    //   Mssql:  IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'group') BEGIN ... END

 Line: 220 -    var whereClause='WHERE TABLE_NAME = '+tableStr;

 Line: 226 -    return ['IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES '+whereClause+') BEGIN '+createResult.join(' ')+' END'];

 Line: 235 -    //   Mssql:  IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = [group]) BEGIN ... END

 Line: 242 -    var whereClause='WHERE TABLE_NAME = '+tableResult.join(' ');

 Line: 247 -    return ['IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES '+whereClause+') BEGIN '+dropResult.join(' ')+' END'];

 Line: 290 -   * part of the SELECT and ORDER BY clauses.

 Line: 295 -   * If there's a LIMIT clause without OFFSET, we attach it to the SELECT clause so we can process it later.

 Line: 317 -     * We need to turn LIMIT into a TOP clause on the SELECT STATEMENT

 Line: 323 -      var selectInfo=Mssql.super_.prototype.findNode.call(this, actions, "SELECT"); // jshint ignore:line

 Line: 324 -      assert(selectInfo!==undefined,"MS SQL Server requires a SELECT clause when using LIMIT");

 Line: 325 -      // save the LIMIT node with the SELECT node

 Line: 332 -     * We need to turn LIMIT into a TOP clause on the SELECT STATEMENT

 Line: 380 -  //  return "SHOW INDEX FROM " + tableName;

 Line: 392 -    // TODO: need to add some code to the INSERT clause to support this since its the equivalent of the OUTPUT clause

 Line: 397 -  // We deal with SELECT specially so we can add the TOP clause if needed

 Line: 401 -      'SELECT',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialect/sqlite.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 141 -    var result = ['DELETE FROM'];

 Line: 163 -    throw new Error('SQLite does not allow FOR UPDATE clause.');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialect/postgres.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 73 -      throw new Error('Unable to use ' + value + ' in query');

 Line: 86 -    // passed in a table, not a query

 Line: 88 -      queryNode = queryNode.select(queryNode.star());

 Line: 102 -    // create the query object

 Line: 103 -    var query = { text: this.output.join(' '), values: this.params };

 Line: 109 -    return query;

 Line: 116 -    var query;

 Line: 118 -      // use the same code path for query building

 Line: 119 -      query = this.getQuery(queryNode);

 Line: 124 -    return query.text;

 Line: 131 -      case 'SELECT'          : return this.visitSelect(node);

 Line: 132 -      case 'INSERT'          : return this.visitInsert(node);

 Line: 134 -      case 'UPDATE'          : return this.visitUpdate(node);

 Line: 135 -      case 'DELETE'          : return this.visitDelete(node);

 Line: 144 -      case 'FROM'            : return this.visitFrom(node);

 Line: 145 -      case 'WHERE'           : return this.visitWhere(node);

 Line: 153 -      case 'FOR UPDATE'      : return this.visitForUpdate();

 Line: 218 -    var result = ['SELECT'];

 Line: 241 -    var result = ['INSERT'];

 Line: 284 -      'UPDATE',

 Line: 293 -    var result = ['DELETE'];

 Line: 348 -    // Nothing to do here since it's handled in the SELECT clause

 Line: 386 -      result.push('FROM');

 Line: 396 -    var result = ['WHERE', where.nodes.map(this.visit.bind(this)).join(', ')];

 Line: 611 -    this._queryNode = queryNode;

 Line: 612 -    // need to sort the top level query nodes on visitation priority

 Line: 621 -    for(var i = 0; i < queryNode.nodes.length; i++) {

 Line: 622 -      var node = queryNode.nodes[i];

 Line: 624 -        case "SELECT":

 Line: 626 -        case "DELETE":

 Line: 630 -        case "INSERT":

 Line: 632 -        case "UPDATE":

 Line: 640 -        case "FROM":

 Line: 659 -    if(missingFrom && queryNode.table instanceof Table) {

 Line: 660 -  	  // the instanceof handles the situation where a sql.select(some expression) is used and there should be no FROM clause

 Line: 674 -   * We separate out this part of query building so it can be overridden by other implementations.

 Line: 694 -    // create another query builder of the current class to build the subquery

 Line: 710 -    var alias = queryNode.alias;

 Line: 798 -      // this injects directly into SELECT statement rather than creating a parameter

 Line: 865 -            txt.push(' ON DELETE ' + onDelete);

 Line: 870 -            txt.push(' ON UPDATE ' + onUpdate);

 Line: 921 -          txt.push(' ON DELETE ' + onDelete);

 Line: 928 -          txt.push(' ON UPDATE ' + onUpdate);

 Line: 945 -      var txt = 'EXTRACT(' + functionCall.name + ' FROM ' + (nodes[0]+'') + ')';

 Line: 1016 -    return ['FOR UPDATE'];

 Line: 1069 -      updateClause.push("DO UPDATE SET");

 Line: 1095 -      "SELECT relname",

 Line: 1096 -      "FROM pg_class",

 Line: 1097 -      "WHERE oid IN (",

 Line: 1098 -      "SELECT indexrelid",

 Line: 1099 -      "FROM pg_index, pg_class WHERE pg_class.relname='" + tableName + "'",

 Line: 1100 -      "AND pg_class.relnamespace IN (SELECT pg_namespace.oid FROM pg_namespace WHERE nspname = '" + schemaName + "')",

 Line: 1191 -   * pulls the DISTINCT node out of the filters and flags the SELECT node that it should be distinct.

 Line: 1199 -    var selectInfo = this.findNode(actions,"SELECT");

 Line: 1201 -    // mark the SELECT node that it's distinct

 Line: 1206 -   * If the parent of the subquery is an INSERT we don't want to parenthesize.

 Line: 1207 -   * This happens when you create the query like so:

 Line: 1209 -   * var query=post.insert(post.id)

 Line: 1211 -   * query.add(select)

 Line: 1219 -  	if (['INSERT', 'REPLACE'].indexOf(parentQuery.nodes[0].type) === -1)  return false;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/column-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 52 -          assert.equal(table.insert({propertyName:'propVal'}).toQuery().text, 'INSERT INTO "roundtrip" ("column_name") VALUES ($1)');

 Line: 55 -          assert.equal(table.update({propertyName:'propVal'}).toQuery().text, 'UPDATE "roundtrip" SET "column_name" = $1');

 Line: 58 -          assert.equal(table.select(table.star()).from(table).toQuery().text, 'SELECT "roundtrip"."column_name" AS "propertyName" FROM "roundtrip"');

 Line: 71 -          assert.equal(table.insert({id:0, name:'name'}).toQuery().text,'INSERT INTO "ag" ("name") VALUES ($1)');

 Line: 74 -          assert.equal(table.update({id:0, name:'name'}).toQuery().text,'UPDATE "ag" SET "name" = $1');

 Line: 85 -          assert.equal(table.insert({id:0, _private:'_private', name:'name'}).toQuery().text, 'INSERT INTO "wl" ("id", "name") VALUES ($1, $2)');

 Line: 88 -          assert.equal(table.update({id:0, _private:'_private', name:'name'}).toQuery().text, 'UPDATE "wl" SET "id" = $1, "name" = $2');

 Line: 126 -            'UPDATE "sc" SET "make_me_camel" = $1 RETURNING "make_me_camel" AS "rename"');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/aggregate-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: post.select(post.count()),

 Line: 10 -      text  : 'SELECT COUNT("post".*) AS "post_count" FROM "post"',

 Line: 11 -      string: 'SELECT COUNT("post".*) AS "post_count" FROM "post"'

 Line: 14 -      text  : 'SELECT COUNT("post".*) AS "post_count" FROM "post"',

 Line: 15 -      string: 'SELECT COUNT("post".*) AS "post_count" FROM "post"'

 Line: 18 -      text  : 'SELECT COUNT(*) AS `post_count` FROM `post`',

 Line: 19 -      string: 'SELECT COUNT(*) AS `post_count` FROM `post`'

 Line: 22 -      text  : 'SELECT COUNT(*) AS [post_count] FROM [post]',

 Line: 23 -      string: 'SELECT COUNT(*) AS [post_count] FROM [post]'

 Line: 26 -      text  : 'SELECT COUNT(*) "post_count" FROM "post"',

 Line: 27 -      string: 'SELECT COUNT(*) "post_count" FROM "post"'

 Line: 33 -    query: post.select(post.count('post_count')),

 Line: 35 -      text  : 'SELECT COUNT("post".*) AS "post_count" FROM "post"',

 Line: 36 -      string: 'SELECT COUNT("post".*) AS "post_count" FROM "post"'

 Line: 39 -      text  : 'SELECT COUNT("post".*) AS "post_count" FROM "post"',

 Line: 40 -      string: 'SELECT COUNT("post".*) AS "post_count" FROM "post"'

 Line: 43 -      text  : 'SELECT COUNT(*) AS `post_count` FROM `post`',

 Line: 44 -      string: 'SELECT COUNT(*) AS `post_count` FROM `post`'

 Line: 47 -      text  : 'SELECT COUNT(*) AS [post_count] FROM [post]',

 Line: 48 -      string: 'SELECT COUNT(*) AS [post_count] FROM [post]'

 Line: 51 -      text  : 'SELECT COUNT(*) "post_count" FROM "post"',

 Line: 52 -      string: 'SELECT COUNT(*) "post_count" FROM "post"'

 Line: 58 -    query: post.select(post.count().as('post_amount')),

 Line: 60 -      text  : 'SELECT COUNT("post".*) AS "post_amount" FROM "post"',

 Line: 61 -      string: 'SELECT COUNT("post".*) AS "post_amount" FROM "post"'

 Line: 64 -      text  : 'SELECT COUNT("post".*) AS "post_amount" FROM "post"',

 Line: 65 -      string: 'SELECT COUNT("post".*) AS "post_amount" FROM "post"'

 Line: 68 -      text  : 'SELECT COUNT(*) AS `post_amount` FROM `post`',

 Line: 69 -      string: 'SELECT COUNT(*) AS `post_amount` FROM `post`'

 Line: 72 -      text  : 'SELECT COUNT(*) AS [post_amount] FROM [post]',

 Line: 73 -      string: 'SELECT COUNT(*) AS [post_amount] FROM [post]'

 Line: 76 -      text  : 'SELECT COUNT(*) "post_amount" FROM "post"',

 Line: 77 -      string: 'SELECT COUNT(*) "post_amount" FROM "post"'

 Line: 83 -    query: post.select(post.content.count()),

 Line: 85 -      text  : 'SELECT COUNT("post"."content") AS "content_count" FROM "post"',

 Line: 86 -      string: 'SELECT COUNT("post"."content") AS "content_count" FROM "post"'

 Line: 89 -      text  : 'SELECT COUNT("post"."content") AS "content_count" FROM "post"',

 Line: 90 -      string: 'SELECT COUNT("post"."content") AS "content_count" FROM "post"'

 Line: 93 -      text  : 'SELECT COUNT(`post`.`content`) AS `content_count` FROM `post`',

 Line: 94 -      string: 'SELECT COUNT(`post`.`content`) AS `content_count` FROM `post`'

 Line: 97 -      text  : 'SELECT COUNT([post].[content]) AS [content_count] FROM [post]',

 Line: 98 -      string: 'SELECT COUNT([post].[content]) AS [content_count] FROM [post]'

 Line: 101 -      text  : 'SELECT COUNT("post"."content") "content_count" FROM "post"',

 Line: 102 -      string: 'SELECT COUNT("post"."content") "content_count" FROM "post"'

 Line: 108 -    query: post.select(post.content.count('content_count')),

 Line: 110 -      text  : 'SELECT COUNT("post"."content") AS "content_count" FROM "post"',

 Line: 111 -      string: 'SELECT COUNT("post"."content") AS "content_count" FROM "post"'

 Line: 114 -      text  : 'SELECT COUNT("post"."content") AS "content_count" FROM "post"',

 Line: 115 -      string: 'SELECT COUNT("post"."content") AS "content_count" FROM "post"'

 Line: 118 -      text  : 'SELECT COUNT(`post`.`content`) AS `content_count` FROM `post`',

 Line: 119 -      string: 'SELECT COUNT(`post`.`content`) AS `content_count` FROM `post`'

 Line: 122 -      text  : 'SELECT COUNT([post].[content]) AS [content_count] FROM [post]',

 Line: 123 -      string: 'SELECT COUNT([post].[content]) AS [content_count] FROM [post]'

 Line: 126 -      text  : 'SELECT COUNT("post"."content") "content_count" FROM "post"',

 Line: 127 -      string: 'SELECT COUNT("post"."content") "content_count" FROM "post"'

 Line: 133 -    query: post.select(post.content.count().as('content_count')),

 Line: 135 -      text  : 'SELECT COUNT("post"."content") AS "content_count" FROM "post"',

 Line: 136 -      string: 'SELECT COUNT("post"."content") AS "content_count" FROM "post"'

 Line: 139 -      text  : 'SELECT COUNT("post"."content") AS "content_count" FROM "post"',

 Line: 140 -      string: 'SELECT COUNT("post"."content") AS "content_count" FROM "post"'

 Line: 143 -      text  : 'SELECT COUNT(`post`.`content`) AS `content_count` FROM `post`',

 Line: 144 -      string: 'SELECT COUNT(`post`.`content`) AS `content_count` FROM `post`'

 Line: 147 -      text  : 'SELECT COUNT([post].[content]) AS [content_count] FROM [post]',

 Line: 148 -      string: 'SELECT COUNT([post].[content]) AS [content_count] FROM [post]'

 Line: 151 -      text  : 'SELECT COUNT("post"."content") "content_count" FROM "post"',

 Line: 152 -      string: 'SELECT COUNT("post"."content") "content_count" FROM "post"'

 Line: 158 -    query: customerAlias.select(customerAlias.count()),

 Line: 160 -      text  : 'SELECT COUNT("customer".*) AS "customer_count" FROM "customer"',

 Line: 161 -      string: 'SELECT COUNT("customer".*) AS "customer_count" FROM "customer"'

 Line: 164 -      text  : 'SELECT COUNT("customer".*) AS "customer_count" FROM "customer"',

 Line: 165 -      string: 'SELECT COUNT("customer".*) AS "customer_count" FROM "customer"'

 Line: 168 -      text  : 'SELECT COUNT(*) AS `customer_count` FROM `customer`',

 Line: 169 -      string: 'SELECT COUNT(*) AS `customer_count` FROM `customer`'

 Line: 172 -      text  : 'SELECT COUNT(*) "customer_count" FROM "customer"',

 Line: 173 -      string: 'SELECT COUNT(*) "customer_count" FROM "customer"'

 Line: 179 -    query: post.select(post.id.min()),

 Line: 181 -      text  : 'SELECT MIN("post"."id") AS "id_min" FROM "post"',

 Line: 182 -      string: 'SELECT MIN("post"."id") AS "id_min" FROM "post"'

 Line: 185 -      text  : 'SELECT MIN("post"."id") AS "id_min" FROM "post"',

 Line: 186 -      string: 'SELECT MIN("post"."id") AS "id_min" FROM "post"'

 Line: 189 -      text  : 'SELECT MIN(`post`.`id`) AS `id_min` FROM `post`',

 Line: 190 -      string: 'SELECT MIN(`post`.`id`) AS `id_min` FROM `post`'

 Line: 193 -      text  : 'SELECT MIN([post].[id]) AS [id_min] FROM [post]',

 Line: 194 -      string: 'SELECT MIN([post].[id]) AS [id_min] FROM [post]'

 Line: 197 -      text  : 'SELECT MIN("post"."id") "id_min" FROM "post"',

 Line: 198 -      string: 'SELECT MIN("post"."id") "id_min" FROM "post"'

 Line: 204 -    query: post.select(post.id.min().as('min_id')),

 Line: 206 -      text  : 'SELECT MIN("post"."id") AS "min_id" FROM "post"',

 Line: 207 -      string: 'SELECT MIN("post"."id") AS "min_id" FROM "post"'

 Line: 210 -      text  : 'SELECT MIN("post"."id") AS "min_id" FROM "post"',

 Line: 211 -      string: 'SELECT MIN("post"."id") AS "min_id" FROM "post"'

 Line: 214 -      text  : 'SELECT MIN(`post`.`id`) AS `min_id` FROM `post`',

 Line: 215 -      string: 'SELECT MIN(`post`.`id`) AS `min_id` FROM `post`'

 Line: 218 -      text  : 'SELECT MIN([post].[id]) AS [min_id] FROM [post]',

 Line: 219 -      string: 'SELECT MIN([post].[id]) AS [min_id] FROM [post]'

 Line: 222 -      text  : 'SELECT MIN("post"."id") "min_id" FROM "post"',

 Line: 223 -      string: 'SELECT MIN("post"."id") "min_id" FROM "post"'

 Line: 229 -    query: post.select(post.id.min('min_id')),

 Line: 231 -      text  : 'SELECT MIN("post"."id") AS "min_id" FROM "post"',

 Line: 232 -      string: 'SELECT MIN("post"."id") AS "min_id" FROM "post"'

 Line: 235 -      text  : 'SELECT MIN("post"."id") AS "min_id" FROM "post"',

 Line: 236 -      string: 'SELECT MIN("post"."id") AS "min_id" FROM "post"'

 Line: 239 -      text  : 'SELECT MIN(`post`.`id`) AS `min_id` FROM `post`',

 Line: 240 -      string: 'SELECT MIN(`post`.`id`) AS `min_id` FROM `post`'

 Line: 243 -      text  : 'SELECT MIN([post].[id]) AS [min_id] FROM [post]',

 Line: 244 -      string: 'SELECT MIN([post].[id]) AS [min_id] FROM [post]'

 Line: 247 -      text  : 'SELECT MIN("post"."id") "min_id" FROM "post"',

 Line: 248 -      string: 'SELECT MIN("post"."id") "min_id" FROM "post"'

 Line: 254 -    query: post.select(post.id.max()),

 Line: 256 -      text  : 'SELECT MAX("post"."id") AS "id_max" FROM "post"',

 Line: 257 -      string: 'SELECT MAX("post"."id") AS "id_max" FROM "post"'

 Line: 260 -      text  : 'SELECT MAX("post"."id") AS "id_max" FROM "post"',

 Line: 261 -      string: 'SELECT MAX("post"."id") AS "id_max" FROM "post"'

 Line: 264 -      text  : 'SELECT MAX(`post`.`id`) AS `id_max` FROM `post`',

 Line: 265 -      string: 'SELECT MAX(`post`.`id`) AS `id_max` FROM `post`'

 Line: 268 -      text  : 'SELECT MAX([post].[id]) AS [id_max] FROM [post]',

 Line: 269 -      string: 'SELECT MAX([post].[id]) AS [id_max] FROM [post]'

 Line: 272 -      text  : 'SELECT MAX("post"."id") "id_max" FROM "post"',

 Line: 273 -      string: 'SELECT MAX("post"."id") "id_max" FROM "post"'

 Line: 279 -    query: post.select(post.id.max().as('max_id')),

 Line: 281 -      text  : 'SELECT MAX("post"."id") AS "max_id" FROM "post"',

 Line: 282 -      string: 'SELECT MAX("post"."id") AS "max_id" FROM "post"'

 Line: 285 -      text  : 'SELECT MAX("post"."id") AS "max_id" FROM "post"',

 Line: 286 -      string: 'SELECT MAX("post"."id") AS "max_id" FROM "post"'

 Line: 289 -      text  : 'SELECT MAX(`post`.`id`) AS `max_id` FROM `post`',

 Line: 290 -      string: 'SELECT MAX(`post`.`id`) AS `max_id` FROM `post`'

 Line: 293 -      text  : 'SELECT MAX([post].[id]) AS [max_id] FROM [post]',

 Line: 294 -      string: 'SELECT MAX([post].[id]) AS [max_id] FROM [post]'

 Line: 297 -      text  : 'SELECT MAX("post"."id") "max_id" FROM "post"',

 Line: 298 -      string: 'SELECT MAX("post"."id") "max_id" FROM "post"'

 Line: 304 -    query: post.select(post.id.max('max_id')),

 Line: 306 -      text  : 'SELECT MAX("post"."id") AS "max_id" FROM "post"',

 Line: 307 -      string: 'SELECT MAX("post"."id") AS "max_id" FROM "post"'

 Line: 310 -      text  : 'SELECT MAX("post"."id") AS "max_id" FROM "post"',

 Line: 311 -      string: 'SELECT MAX("post"."id") AS "max_id" FROM "post"'

 Line: 314 -      text  : 'SELECT MAX(`post`.`id`) AS `max_id` FROM `post`',

 Line: 315 -      string: 'SELECT MAX(`post`.`id`) AS `max_id` FROM `post`'

 Line: 318 -      text  : 'SELECT MAX([post].[id]) AS [max_id] FROM [post]',

 Line: 319 -      string: 'SELECT MAX([post].[id]) AS [max_id] FROM [post]'

 Line: 322 -      text  : 'SELECT MAX("post"."id") "max_id" FROM "post"',

 Line: 323 -      string: 'SELECT MAX("post"."id") "max_id" FROM "post"'

 Line: 329 -    query: post.select(post.id.sum()),

 Line: 331 -      text  : 'SELECT SUM("post"."id") AS "id_sum" FROM "post"',

 Line: 332 -      string: 'SELECT SUM("post"."id") AS "id_sum" FROM "post"'

 Line: 335 -      text  : 'SELECT SUM("post"."id") AS "id_sum" FROM "post"',

 Line: 336 -      string: 'SELECT SUM("post"."id") AS "id_sum" FROM "post"'

 Line: 339 -      text  : 'SELECT SUM(`post`.`id`) AS `id_sum` FROM `post`',

 Line: 340 -      string: 'SELECT SUM(`post`.`id`) AS `id_sum` FROM `post`'

 Line: 343 -      text  : 'SELECT SUM([post].[id]) AS [id_sum] FROM [post]',

 Line: 344 -      string: 'SELECT SUM([post].[id]) AS [id_sum] FROM [post]'

 Line: 347 -      text  : 'SELECT SUM("post"."id") "id_sum" FROM "post"',

 Line: 348 -      string: 'SELECT SUM("post"."id") "id_sum" FROM "post"'

 Line: 354 -    query: post.select(post.id.sum().as('sum_id')),

 Line: 356 -      text  : 'SELECT SUM("post"."id") AS "sum_id" FROM "post"',

 Line: 357 -      string: 'SELECT SUM("post"."id") AS "sum_id" FROM "post"'

 Line: 360 -      text  : 'SELECT SUM("post"."id") AS "sum_id" FROM "post"',

 Line: 361 -      string: 'SELECT SUM("post"."id") AS "sum_id" FROM "post"'

 Line: 364 -      text  : 'SELECT SUM(`post`.`id`) AS `sum_id` FROM `post`',

 Line: 365 -      string: 'SELECT SUM(`post`.`id`) AS `sum_id` FROM `post`'

 Line: 368 -      text  : 'SELECT SUM([post].[id]) AS [sum_id] FROM [post]',

 Line: 369 -      string: 'SELECT SUM([post].[id]) AS [sum_id] FROM [post]'

 Line: 372 -      text  : 'SELECT SUM("post"."id") "sum_id" FROM "post"',

 Line: 373 -      string: 'SELECT SUM("post"."id") "sum_id" FROM "post"'

 Line: 379 -    query: post.select(post.id.sum('sum_id')),

 Line: 381 -      text  : 'SELECT SUM("post"."id") AS "sum_id" FROM "post"',

 Line: 382 -      string: 'SELECT SUM("post"."id") AS "sum_id" FROM "post"'

 Line: 385 -      text  : 'SELECT SUM("post"."id") AS "sum_id" FROM "post"',

 Line: 386 -      string: 'SELECT SUM("post"."id") AS "sum_id" FROM "post"'

 Line: 389 -      text  : 'SELECT SUM(`post`.`id`) AS `sum_id` FROM `post`',

 Line: 390 -      string: 'SELECT SUM(`post`.`id`) AS `sum_id` FROM `post`'

 Line: 393 -      text  : 'SELECT SUM([post].[id]) AS [sum_id] FROM [post]',

 Line: 394 -      string: 'SELECT SUM([post].[id]) AS [sum_id] FROM [post]'

 Line: 397 -      text  : 'SELECT SUM("post"."id") "sum_id" FROM "post"',

 Line: 398 -      string: 'SELECT SUM("post"."id") "sum_id" FROM "post"'

 Line: 404 -    query: post.select(post.id.avg()),

 Line: 406 -      text  : 'SELECT AVG("post"."id") AS "id_avg" FROM "post"',

 Line: 407 -      string: 'SELECT AVG("post"."id") AS "id_avg" FROM "post"'

 Line: 410 -      text  : 'SELECT AVG("post"."id") AS "id_avg" FROM "post"',

 Line: 411 -      string: 'SELECT AVG("post"."id") AS "id_avg" FROM "post"'

 Line: 414 -      text  : 'SELECT AVG(`post`.`id`) AS `id_avg` FROM `post`',

 Line: 415 -      string: 'SELECT AVG(`post`.`id`) AS `id_avg` FROM `post`'

 Line: 418 -      text  : 'SELECT AVG([post].[id]) AS [id_avg] FROM [post]',

 Line: 419 -      string: 'SELECT AVG([post].[id]) AS [id_avg] FROM [post]'

 Line: 422 -      text  : 'SELECT AVG("post"."id") "id_avg" FROM "post"',

 Line: 423 -      string: 'SELECT AVG("post"."id") "id_avg" FROM "post"'

 Line: 429 -    query: post.select(post.id.avg().as('avg_id')),

 Line: 431 -      text  : 'SELECT AVG("post"."id") AS "avg_id" FROM "post"',

 Line: 432 -      string: 'SELECT AVG("post"."id") AS "avg_id" FROM "post"'

 Line: 435 -      text  : 'SELECT AVG("post"."id") AS "avg_id" FROM "post"',

 Line: 436 -      string: 'SELECT AVG("post"."id") AS "avg_id" FROM "post"'

 Line: 439 -      text  : 'SELECT AVG(`post`.`id`) AS `avg_id` FROM `post`',

 Line: 440 -      string: 'SELECT AVG(`post`.`id`) AS `avg_id` FROM `post`'

 Line: 443 -      text  : 'SELECT AVG([post].[id]) AS [avg_id] FROM [post]',

 Line: 444 -      string: 'SELECT AVG([post].[id]) AS [avg_id] FROM [post]'

 Line: 447 -      text  : 'SELECT AVG("post"."id") "avg_id" FROM "post"',

 Line: 448 -      string: 'SELECT AVG("post"."id") "avg_id" FROM "post"'

 Line: 454 -    query: post.select(post.id.avg('avg_id')),

 Line: 456 -      text  : 'SELECT AVG("post"."id") AS "avg_id" FROM "post"',

 Line: 457 -      string: 'SELECT AVG("post"."id") AS "avg_id" FROM "post"'

 Line: 460 -      text  : 'SELECT AVG("post"."id") AS "avg_id" FROM "post"',

 Line: 461 -      string: 'SELECT AVG("post"."id") AS "avg_id" FROM "post"'

 Line: 464 -      text  : 'SELECT AVG(`post`.`id`) AS `avg_id` FROM `post`',

 Line: 465 -      string: 'SELECT AVG(`post`.`id`) AS `avg_id` FROM `post`'

 Line: 468 -      text  : 'SELECT AVG([post].[id]) AS [avg_id] FROM [post]',

 Line: 469 -      string: 'SELECT AVG([post].[id]) AS [avg_id] FROM [post]'

 Line: 472 -      text  : 'SELECT AVG("post"."id") "avg_id" FROM "post"',

 Line: 473 -      string: 'SELECT AVG("post"."id") "avg_id" FROM "post"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/having-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query : post.select(post.userId, post.content.count()).group(post.userId).having(post.userId.gt(10)),

 Line: 8 -      text  : 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > $1)',

 Line: 9 -      string: 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10)'

 Line: 12 -      text  : 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > $1)',

 Line: 13 -      string: 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10)'

 Line: 16 -      text  : 'SELECT `post`.`userId`, COUNT(`post`.`content`) AS `content_count` FROM `post` GROUP BY `post`.`userId` HAVING (`post`.`userId` > ?)',

 Line: 17 -      string: 'SELECT `post`.`userId`, COUNT(`post`.`content`) AS `content_count` FROM `post` GROUP BY `post`.`userId` HAVING (`post`.`userId` > 10)'

 Line: 20 -      text  : 'SELECT [post].[userId], COUNT([post].[content]) AS [content_count] FROM [post] GROUP BY [post].[userId] HAVING ([post].[userId] > @1)',

 Line: 21 -      string: 'SELECT [post].[userId], COUNT([post].[content]) AS [content_count] FROM [post] GROUP BY [post].[userId] HAVING ([post].[userId] > 10)'

 Line: 24 -      text  : 'SELECT "post"."userId", COUNT("post"."content") "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > :1)',

 Line: 25 -      string: 'SELECT "post"."userId", COUNT("post"."content") "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10)'

 Line: 31 -    query : post.select(post.userId, post.content.count()).group(post.userId).having(post.userId.gt(10), post.userId.lt(100)),

 Line: 33 -      text  : 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > $1) AND ("post"."userId" < $2)',

 Line: 34 -      string: 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10) AND ("post"."userId" < 100)'

 Line: 37 -      text  : 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > $1) AND ("post"."userId" < $2)',

 Line: 38 -      string: 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10) AND ("post"."userId" < 100)'

 Line: 41 -      text  : 'SELECT `post`.`userId`, COUNT(`post`.`content`) AS `content_count` FROM `post` GROUP BY `post`.`userId` HAVING (`post`.`userId` > ?) AND (`post`.`userId` < ?)',

 Line: 42 -      string: 'SELECT `post`.`userId`, COUNT(`post`.`content`) AS `content_count` FROM `post` GROUP BY `post`.`userId` HAVING (`post`.`userId` > 10) AND (`post`.`userId` < 100)'

 Line: 45 -      text  : 'SELECT [post].[userId], COUNT([post].[content]) AS [content_count] FROM [post] GROUP BY [post].[userId] HAVING ([post].[userId] > @1) AND ([post].[userId] < @2)',

 Line: 46 -      string: 'SELECT [post].[userId], COUNT([post].[content]) AS [content_count] FROM [post] GROUP BY [post].[userId] HAVING ([post].[userId] > 10) AND ([post].[userId] < 100)'

 Line: 49 -      text  : 'SELECT "post"."userId", COUNT("post"."content") "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > :1) AND ("post"."userId" < :2)',

 Line: 50 -      string: 'SELECT "post"."userId", COUNT("post"."content") "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10) AND ("post"."userId" < 100)'

 Line: 56 -    query : post.select(post.userId, post.content.count()).group(post.userId).having([post.userId.gt(10), post.userId.lt(100)]),

 Line: 58 -      text  : 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > $1) AND ("post"."userId" < $2)',

 Line: 59 -      string: 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10) AND ("post"."userId" < 100)'

 Line: 62 -      text  : 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > $1) AND ("post"."userId" < $2)',

 Line: 63 -      string: 'SELECT "post"."userId", COUNT("post"."content") AS "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10) AND ("post"."userId" < 100)'

 Line: 66 -      text  : 'SELECT `post`.`userId`, COUNT(`post`.`content`) AS `content_count` FROM `post` GROUP BY `post`.`userId` HAVING (`post`.`userId` > ?) AND (`post`.`userId` < ?)',

 Line: 67 -      string: 'SELECT `post`.`userId`, COUNT(`post`.`content`) AS `content_count` FROM `post` GROUP BY `post`.`userId` HAVING (`post`.`userId` > 10) AND (`post`.`userId` < 100)'

 Line: 70 -      text  : 'SELECT [post].[userId], COUNT([post].[content]) AS [content_count] FROM [post] GROUP BY [post].[userId] HAVING ([post].[userId] > @1) AND ([post].[userId] < @2)',

 Line: 71 -      string: 'SELECT [post].[userId], COUNT([post].[content]) AS [content_count] FROM [post] GROUP BY [post].[userId] HAVING ([post].[userId] > 10) AND ([post].[userId] < 100)'

 Line: 74 -      text  : 'SELECT "post"."userId", COUNT("post"."content") "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > :1) AND ("post"."userId" < :2)',

 Line: 75 -      string: 'SELECT "post"."userId", COUNT("post"."content") "content_count" FROM "post" GROUP BY "post"."userId" HAVING ("post"."userId" > 10) AND ("post"."userId" < 100)'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/date-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.select(Sql.functions.YEAR(customer.metadata)),

 Line: 9 -      text  : 'SELECT EXTRACT(YEAR FROM "customer"."metadata") FROM "customer"',

 Line: 10 -      string: 'SELECT EXTRACT(YEAR FROM "customer"."metadata") FROM "customer"'

 Line: 13 -      text  : 'SELECT strftime(\'%Y\', "customer"."metadata") FROM "customer"',

 Line: 14 -      string: 'SELECT strftime(\'%Y\', "customer"."metadata") FROM "customer"'

 Line: 17 -      text  : 'SELECT YEAR(`customer`.`metadata`) FROM `customer`',

 Line: 18 -      string: 'SELECT YEAR(`customer`.`metadata`) FROM `customer`'

 Line: 21 -      text  : 'SELECT DATEPART(year, [customer].[metadata]) FROM [customer]',

 Line: 22 -      string: 'SELECT DATEPART(year, [customer].[metadata]) FROM [customer]'

 Line: 25 -      text  : 'SELECT EXTRACT(YEAR FROM "customer"."metadata") FROM "customer"',

 Line: 26 -      string: 'SELECT EXTRACT(YEAR FROM "customer"."metadata") FROM "customer"'

 Line: 32 -    query: customer.select(Sql.functions.MONTH(customer.metadata)),

 Line: 34 -      text  : 'SELECT EXTRACT(MONTH FROM "customer"."metadata") FROM "customer"',

 Line: 35 -      string: 'SELECT EXTRACT(MONTH FROM "customer"."metadata") FROM "customer"'

 Line: 38 -      text: 'SELECT strftime(\'%m\', datetime("customer"."metadata"/1000, "unixepoch")) FROM "customer"',

 Line: 39 -      string: 'SELECT strftime(\'%m\', datetime("customer"."metadata"/1000, "unixepoch")) FROM "customer"',

 Line: 45 -      text  : 'SELECT MONTH(`customer`.`metadata`) FROM `customer`',

 Line: 46 -      string: 'SELECT MONTH(`customer`.`metadata`) FROM `customer`'

 Line: 49 -      text  : 'SELECT DATEPART(month, [customer].[metadata]) FROM [customer]',

 Line: 50 -      string: 'SELECT DATEPART(month, [customer].[metadata]) FROM [customer]'

 Line: 53 -      text  : 'SELECT EXTRACT(MONTH FROM "customer"."metadata") FROM "customer"',

 Line: 54 -      string: 'SELECT EXTRACT(MONTH FROM "customer"."metadata") FROM "customer"'

 Line: 60 -    query: customer.select(Sql.functions.DAY(customer.metadata)),

 Line: 62 -      text  : 'SELECT EXTRACT(DAY FROM "customer"."metadata") FROM "customer"',

 Line: 63 -      string: 'SELECT EXTRACT(DAY FROM "customer"."metadata") FROM "customer"'

 Line: 66 -      text  : 'SELECT strftime(\'%d\', "customer"."metadata") FROM "customer"',

 Line: 67 -      string: 'SELECT strftime(\'%d\', "customer"."metadata") FROM "customer"'

 Line: 70 -      text  : 'SELECT DAY(`customer`.`metadata`) FROM `customer`',

 Line: 71 -      string: 'SELECT DAY(`customer`.`metadata`) FROM `customer`'

 Line: 74 -      text  : 'SELECT DATEPART(day, [customer].[metadata]) FROM [customer]',

 Line: 75 -      string: 'SELECT DATEPART(day, [customer].[metadata]) FROM [customer]'

 Line: 78 -      text  : 'SELECT EXTRACT(DAY FROM "customer"."metadata") FROM "customer"',

 Line: 79 -      string: 'SELECT EXTRACT(DAY FROM "customer"."metadata") FROM "customer"'

 Line: 85 -    query: customer.select(Sql.functions.HOUR(customer.metadata)),

 Line: 87 -      text  : 'SELECT EXTRACT(HOUR FROM "customer"."metadata") FROM "customer"',

 Line: 88 -      string: 'SELECT EXTRACT(HOUR FROM "customer"."metadata") FROM "customer"'

 Line: 91 -      text: 'SELECT strftime(\'%H\', datetime("customer"."metadata"/1000, "unixepoch")) FROM "customer"',

 Line: 92 -      string: 'SELECT strftime(\'%H\', datetime("customer"."metadata"/1000, "unixepoch")) FROM "customer"',

 Line: 98 -      text  : 'SELECT HOUR(`customer`.`metadata`) FROM `customer`',

 Line: 99 -      string: 'SELECT HOUR(`customer`.`metadata`) FROM `customer`'

 Line: 102 -      text  : 'SELECT DATEPART(hour, [customer].[metadata]) FROM [customer]',

 Line: 103 -      string: 'SELECT DATEPART(hour, [customer].[metadata]) FROM [customer]'

 Line: 106 -      text  : 'SELECT EXTRACT(HOUR FROM "customer"."metadata") FROM "customer"',

 Line: 107 -      string: 'SELECT EXTRACT(HOUR FROM "customer"."metadata") FROM "customer"'

 Line: 113 -    query: customer.select(Sql.functions.CURRENT_TIMESTAMP()),

 Line: 115 -      text  : 'SELECT CURRENT_TIMESTAMP FROM "customer"',

 Line: 116 -      string: 'SELECT CURRENT_TIMESTAMP FROM "customer"'

 Line: 119 -      text  : 'SELECT CURRENT_TIMESTAMP FROM "customer"',

 Line: 120 -      string: 'SELECT CURRENT_TIMESTAMP FROM "customer"'

 Line: 123 -      text  : 'SELECT CURRENT_TIMESTAMP FROM `customer`',

 Line: 124 -      string: 'SELECT CURRENT_TIMESTAMP FROM `customer`'

 Line: 127 -      text  : 'SELECT CURRENT_TIMESTAMP FROM [customer]',

 Line: 128 -      string: 'SELECT CURRENT_TIMESTAMP FROM [customer]'

 Line: 131 -      text  : 'SELECT CURRENT_TIMESTAMP FROM "customer"',

 Line: 132 -      string: 'SELECT CURRENT_TIMESTAMP FROM "customer"'

 Line: 138 -    query: Sql.select(Sql.functions.CURRENT_TIMESTAMP().plus(Sql.interval({hours:1}))),

 Line: 140 -      text  : 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'1 HOUR\')',

 Line: 141 -      string: 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'1 HOUR\')'

 Line: 144 -      text  : 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'1:0:0\' HOUR_SECOND)',

 Line: 145 -      string: 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'1:0:0\' HOUR_SECOND)'

 Line: 151 -    query: Sql.select(Sql.functions.CURRENT_TIMESTAMP().minus(Sql.interval({years:3}))),

 Line: 153 -      text  : 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'3 YEAR\')',

 Line: 154 -      string: 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'3 YEAR\')'

 Line: 157 -      text  : 'SELECT (CURRENT_TIMESTAMP - INTERVAL 3 YEAR)',

 Line: 158 -      string: 'SELECT (CURRENT_TIMESTAMP - INTERVAL 3 YEAR)'

 Line: 164 -    query: Sql.select(Sql.functions.CURRENT_TIMESTAMP().minus(Sql.interval({years:3, months:2}))),

 Line: 166 -      text  : 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'3 YEAR 2 MONTH\')',

 Line: 167 -      string: 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'3 YEAR 2 MONTH\')'

 Line: 170 -      text  : 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'3-2\' YEAR_MONTH)',

 Line: 171 -      string: 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'3-2\' YEAR_MONTH)'

 Line: 177 -    query: Sql.select(Sql.functions.CURRENT_TIMESTAMP().plus(Sql.interval({hours:1, minutes:20}))),

 Line: 179 -      text  : 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'1 HOUR 20 MINUTE\')',

 Line: 180 -      string: 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'1 HOUR 20 MINUTE\')'

 Line: 183 -      text  : 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'1:20:0\' HOUR_SECOND)',

 Line: 184 -      string: 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'1:20:0\' HOUR_SECOND)'

 Line: 190 -    query: Sql.select(Sql.functions.CURRENT_TIMESTAMP().plus(Sql.interval({hours:'sql\'injection', minutes:20}))),

 Line: 192 -      text  : 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'20 MINUTE\')',

 Line: 193 -      string: 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'20 MINUTE\')'

 Line: 196 -      text  : 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'0:20:0\' HOUR_SECOND)',

 Line: 197 -      string: 'SELECT (CURRENT_TIMESTAMP + INTERVAL \'0:20:0\' HOUR_SECOND)'

 Line: 203 -    query: Sql.select(Sql.functions.CURRENT_TIMESTAMP().minus(Sql.interval({days: 1, hours:5, minutes: 'sql\'injection'}))),

 Line: 205 -      text  : 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'1 DAY 5 HOUR\')',

 Line: 206 -      string: 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'1 DAY 5 HOUR\')'

 Line: 209 -      text  : 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'1 5:0:0\' DAY_SECOND)',

 Line: 210 -      string: 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'1 5:0:0\' DAY_SECOND)'

 Line: 216 -    query: Sql.select(Sql.functions.CURRENT_TIMESTAMP().minus(Sql.interval({years: 2, months: 5}))),

 Line: 218 -      text  : 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'2 YEAR 5 MONTH\')',

 Line: 219 -      string: 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'2 YEAR 5 MONTH\')'

 Line: 222 -      text  : 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'2-5\' YEAR_MONTH)',

 Line: 223 -      string: 'SELECT (CURRENT_TIMESTAMP - INTERVAL \'2-5\' YEAR_MONTH)'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/drop-table-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: post.drop(),

 Line: 31 -    query: post.drop().ifExists(),

 Line: 45 -      text  : 'IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = [post]) BEGIN DROP TABLE [post] END',

 Line: 46 -      string: 'IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = [post]) BEGIN DROP TABLE [post] END'

 Line: 56 -    query: post.drop().cascade(),

 Line: 77 -    query: post.drop().restrict(),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/literal-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: user.select(user.literal('foo'), user.name, user.literal('123').as('onetwothree')),

 Line: 8 -      text  : 'SELECT foo, "user"."name", 123 AS "onetwothree" FROM "user"',

 Line: 9 -      string: 'SELECT foo, "user"."name", 123 AS "onetwothree" FROM "user"'

 Line: 12 -      text  : 'SELECT foo, "user"."name", 123 AS "onetwothree" FROM "user"',

 Line: 13 -      string: 'SELECT foo, "user"."name", 123 AS "onetwothree" FROM "user"'

 Line: 16 -      text  : 'SELECT foo, `user`.`name`, 123 AS `onetwothree` FROM `user`',

 Line: 17 -      string: 'SELECT foo, `user`.`name`, 123 AS `onetwothree` FROM `user`'

 Line: 20 -      text  : 'SELECT foo, "user"."name", 123 "onetwothree" FROM "user"',

 Line: 21 -      string: 'SELECT foo, "user"."name", 123 "onetwothree" FROM "user"'

 Line: 28 -    query: user.select().where(user.literal('foo = bar')),

 Line: 30 -      text  : 'SELECT "user".* FROM "user" WHERE foo = bar',

 Line: 31 -      string: 'SELECT "user".* FROM "user" WHERE foo = bar'

 Line: 34 -      text  : 'SELECT "user".* FROM "user" WHERE foo = bar',

 Line: 35 -      string: 'SELECT "user".* FROM "user" WHERE foo = bar'

 Line: 38 -      text  : 'SELECT `user`.* FROM `user` WHERE foo = bar',

 Line: 39 -      string: 'SELECT `user`.* FROM `user` WHERE foo = bar'

 Line: 42 -      text  : 'SELECT "user".* FROM "user" WHERE foo = bar',

 Line: 43 -      string: 'SELECT "user".* FROM "user" WHERE foo = bar'

 Line: 53 -    query: user.select(subquery.count_column.count()).from(subquery),

 Line: 55 -      text  : 'SELECT COUNT("subquery_for_count"."count_column") AS "count_column_count" FROM (SELECT 1 AS "count_column" FROM "user" LIMIT 10 OFFSET 20) "subquery_for_count"',

 Line: 56 -      string: 'SELECT COUNT("subquery_for_count"."count_column") AS "count_column_count" FROM (SELECT 1 AS "count_column" FROM "user" LIMIT 10 OFFSET 20) "subquery_for_count"'

 Line: 59 -      text  : 'SELECT COUNT("subquery_for_count"."count_column") AS "count_column_count" FROM (SELECT 1 AS "count_column" FROM "user" LIMIT 10 OFFSET 20) "subquery_for_count"',

 Line: 60 -      string: 'SELECT COUNT("subquery_for_count"."count_column") AS "count_column_count" FROM (SELECT 1 AS "count_column" FROM "user" LIMIT 10 OFFSET 20) "subquery_for_count"'

 Line: 63 -      text  : 'SELECT COUNT(`subquery_for_count`.`count_column`) AS `count_column_count` FROM (SELECT 1 AS `count_column` FROM `user` LIMIT 10 OFFSET 20) `subquery_for_count`',

 Line: 64 -      string: 'SELECT COUNT(`subquery_for_count`.`count_column`) AS `count_column_count` FROM (SELECT 1 AS `count_column` FROM `user` LIMIT 10 OFFSET 20) `subquery_for_count`'

 Line: 67 -      text  : 'SELECT COUNT("subquery_for_count"."count_column") "count_column_count" FROM (SELECT 1 "count_column" FROM "user" OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY) "subquery_for_count"',

 Line: 68 -      string: 'SELECT COUNT("subquery_for_count"."count_column") "count_column_count" FROM (SELECT 1 "count_column" FROM "user" OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY) "subquery_for_count"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/for-update-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: post.select(post.star()).forUpdate(),

 Line: 9 -      text  : 'SELECT "post".* FROM "post" FOR UPDATE',

 Line: 10 -      string: 'SELECT "post".* FROM "post" FOR UPDATE'

 Line: 13 -      text  : 'SELECT `post`.* FROM `post` FOR UPDATE',

 Line: 14 -      string: 'SELECT `post`.* FROM `post` FOR UPDATE'

 Line: 20 -    query: post.select(post.star()).from(post.join(user).on(user.id.equals(post.userId))).where(post.content.equals('foo')).forUpdate(),

 Line: 22 -      text  : 'SELECT "post".* FROM "post" INNER JOIN "user" ON ("user"."id" = "post"."userId") WHERE ("post"."content" = $1) FOR UPDATE',

 Line: 23 -      string: 'SELECT "post".* FROM "post" INNER JOIN "user" ON ("user"."id" = "post"."userId") WHERE ("post"."content" = \'foo\') FOR UPDATE'

 Line: 26 -      text  : 'SELECT `post`.* FROM `post` INNER JOIN `user` ON (`user`.`id` = `post`.`userId`) WHERE (`post`.`content` = ?) FOR UPDATE',

 Line: 27 -      string: 'SELECT `post`.* FROM `post` INNER JOIN `user` ON (`user`.`id` = `post`.`userId`) WHERE (`post`.`content` = \'foo\') FOR UPDATE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/where-clause-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: user.where(user.id.isNotNull(), user.name.isNotNull()),

 Line: 8 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 9 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 12 -      text  : 'SELECT * FROM `user` WHERE ((`user`.`id` IS NOT NULL) AND (`user`.`name` IS NOT NULL))',

 Line: 13 -      string: 'SELECT * FROM `user` WHERE ((`user`.`id` IS NOT NULL) AND (`user`.`name` IS NOT NULL))'

 Line: 16 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 17 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 20 -      text  : 'SELECT * FROM [user] WHERE (([user].[id] IS NOT NULL) AND ([user].[name] IS NOT NULL))',

 Line: 21 -      string: 'SELECT * FROM [user] WHERE (([user].[id] IS NOT NULL) AND ([user].[name] IS NOT NULL))'

 Line: 24 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 25 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 31 -    query: user.and(user.id.isNotNull(), user.name.isNotNull()),

 Line: 33 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 34 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 37 -      text  : 'SELECT * FROM `user` WHERE ((`user`.`id` IS NOT NULL) AND (`user`.`name` IS NOT NULL))',

 Line: 38 -      string: 'SELECT * FROM `user` WHERE ((`user`.`id` IS NOT NULL) AND (`user`.`name` IS NOT NULL))'

 Line: 41 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 42 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 45 -      text  : 'SELECT * FROM [user] WHERE (([user].[id] IS NOT NULL) AND ([user].[name] IS NOT NULL))',

 Line: 46 -      string: 'SELECT * FROM [user] WHERE (([user].[id] IS NOT NULL) AND ([user].[name] IS NOT NULL))'

 Line: 49 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 50 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 56 -    query: user.where([user.id.isNotNull(), user.name.isNotNull()]),

 Line: 58 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 59 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 62 -      text  : 'SELECT * FROM `user` WHERE ((`user`.`id` IS NOT NULL) AND (`user`.`name` IS NOT NULL))',

 Line: 63 -      string: 'SELECT * FROM `user` WHERE ((`user`.`id` IS NOT NULL) AND (`user`.`name` IS NOT NULL))'

 Line: 66 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 67 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 70 -      text  : 'SELECT * FROM [user] WHERE (([user].[id] IS NOT NULL) AND ([user].[name] IS NOT NULL))',

 Line: 71 -      string: 'SELECT * FROM [user] WHERE (([user].[id] IS NOT NULL) AND ([user].[name] IS NOT NULL))'

 Line: 74 -      text  : 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))',

 Line: 75 -      string: 'SELECT * FROM "user" WHERE (("user"."id" IS NOT NULL) AND ("user"."name" IS NOT NULL))'

 Line: 81 -    query: user.where([]),

 Line: 83 -      text  : 'SELECT * FROM "user" WHERE (1 = 1)',

 Line: 84 -      string: 'SELECT * FROM "user" WHERE (1 = 1)'

 Line: 87 -      text  : 'SELECT * FROM `user` WHERE (1 = 1)',

 Line: 88 -      string: 'SELECT * FROM `user` WHERE (1 = 1)'

 Line: 91 -      text  : 'SELECT * FROM "user" WHERE (1 = 1)',

 Line: 92 -      string: 'SELECT * FROM "user" WHERE (1 = 1)'

 Line: 95 -      text  : 'SELECT * FROM [user] WHERE (1 = 1)',

 Line: 96 -      string: 'SELECT * FROM [user] WHERE (1 = 1)'

 Line: 99 -      text  : 'SELECT * FROM "user" WHERE (1 = 1)',

 Line: 100 -      string: 'SELECT * FROM "user" WHERE (1 = 1)'

 Line: 106 -    query: user.select().where(user.id.equals(1)).and(user.name.equals('a')),

 Line: 108 -      text  : 'SELECT "user".* FROM "user" WHERE (("user"."id" = $1) AND ("user"."name" = $2))',

 Line: 109 -      string: 'SELECT "user".* FROM "user" WHERE (("user"."id" = 1) AND ("user"."name" = \'a\'))'

 Line: 112 -      text  : 'SELECT `user`.* FROM `user` WHERE ((`user`.`id` = ?) AND (`user`.`name` = ?))',

 Line: 113 -      string: 'SELECT `user`.* FROM `user` WHERE ((`user`.`id` = 1) AND (`user`.`name` = \'a\'))'

 Line: 116 -      text  : 'SELECT "user".* FROM "user" WHERE (("user"."id" = $1) AND ("user"."name" = $2))',

 Line: 117 -      string: 'SELECT "user".* FROM "user" WHERE (("user"."id" = 1) AND ("user"."name" = \'a\'))'

 Line: 120 -      text  : 'SELECT [user].* FROM [user] WHERE (([user].[id] = @1) AND ([user].[name] = @2))',

 Line: 121 -      string: 'SELECT [user].* FROM [user] WHERE (([user].[id] = 1) AND ([user].[name] = \'a\'))'

 Line: 124 -      text  : 'SELECT "user".* FROM "user" WHERE (("user"."id" = :1) AND ("user"."name" = :2))',

 Line: 125 -      string: 'SELECT "user".* FROM "user" WHERE (("user"."id" = 1) AND ("user"."name" = \'a\'))'

 Line: 131 -    query: user.select().and(user.id.equals(1)),

 Line: 133 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" = $1)',

 Line: 134 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" = 1)'

 Line: 137 -      text  : 'SELECT `user`.* FROM `user` WHERE (`user`.`id` = ?)',

 Line: 138 -      string: 'SELECT `user`.* FROM `user` WHERE (`user`.`id` = 1)'

 Line: 141 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" = $1)',

 Line: 142 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" = 1)'

 Line: 145 -      text  : 'SELECT [user].* FROM [user] WHERE ([user].[id] = @1)',

 Line: 146 -      string: 'SELECT [user].* FROM [user] WHERE ([user].[id] = 1)'

 Line: 149 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" = :1)',

 Line: 150 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" = 1)'

 Line: 156 -    query: user.select().or(user.id.equals(1)),

 Line: 158 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" = $1)',

 Line: 159 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" = 1)'

 Line: 162 -      text  : 'SELECT `user`.* FROM `user` WHERE (`user`.`id` = ?)',

 Line: 163 -      string: 'SELECT `user`.* FROM `user` WHERE (`user`.`id` = 1)'

 Line: 166 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" = $1)',

 Line: 167 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" = 1)'

 Line: 170 -      text  : 'SELECT [user].* FROM [user] WHERE ([user].[id] = @1)',

 Line: 171 -      string: 'SELECT [user].* FROM [user] WHERE ([user].[id] = 1)'

 Line: 174 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" = :1)',

 Line: 175 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" = 1)'

 Line: 181 -    query: user.select().and(user.id.equals(1)).or(user.name.equals('a')),

 Line: 183 -      text  : 'SELECT "user".* FROM "user" WHERE (("user"."id" = $1) OR ("user"."name" = $2))',

 Line: 184 -      string: 'SELECT "user".* FROM "user" WHERE (("user"."id" = 1) OR ("user"."name" = \'a\'))'

 Line: 187 -      text  : 'SELECT `user`.* FROM `user` WHERE ((`user`.`id` = ?) OR (`user`.`name` = ?))',

 Line: 188 -      string: 'SELECT `user`.* FROM `user` WHERE ((`user`.`id` = 1) OR (`user`.`name` = \'a\'))'

 Line: 191 -      text  : 'SELECT "user".* FROM "user" WHERE (("user"."id" = $1) OR ("user"."name" = $2))',

 Line: 192 -      string: 'SELECT "user".* FROM "user" WHERE (("user"."id" = 1) OR ("user"."name" = \'a\'))'

 Line: 195 -      text  : 'SELECT [user].* FROM [user] WHERE (([user].[id] = @1) OR ([user].[name] = @2))',

 Line: 196 -      string: 'SELECT [user].* FROM [user] WHERE (([user].[id] = 1) OR ([user].[name] = \'a\'))'

 Line: 199 -      text  : 'SELECT "user".* FROM "user" WHERE (("user"."id" = :1) OR ("user"."name" = :2))',

 Line: 200 -      string: 'SELECT "user".* FROM "user" WHERE (("user"."id" = 1) OR ("user"."name" = \'a\'))'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/subfield-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.select(customer.info.subfields.age),

 Line: 9 -      text  : 'SELECT ("customer"."info")."age" FROM "customer"',

 Line: 10 -      string: 'SELECT ("customer"."info")."age" FROM "customer"'

 Line: 17 -    query: customer.select(customer.info.subfields.age.as('years')),

 Line: 19 -      text  : 'SELECT ("customer"."info")."age" AS "years" FROM "customer"',

 Line: 20 -      string: 'SELECT ("customer"."info")."age" AS "years" FROM "customer"'

 Line: 26 -    query: customer.select(customer.id).where(customer.info.subfields.salary.equals(10)),

 Line: 28 -      text  : 'SELECT "customer"."id" FROM "customer" WHERE (("customer"."info")."salary" = $1)',

 Line: 29 -      string: 'SELECT "customer"."id" FROM "customer" WHERE (("customer"."info")."salary" = 10)'

 Line: 35 -    query: customer.select(customer.info.subfields.name.distinct()),

 Line: 37 -      text  : 'SELECT DISTINCT(("customer"."info")."name") FROM "customer"',

 Line: 38 -      string: 'SELECT DISTINCT(("customer"."info")."name") FROM "customer"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/group-by-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: post.select(post.content).group(post.userId),

 Line: 8 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId"',

 Line: 9 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId"'

 Line: 12 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId"',

 Line: 13 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId"'

 Line: 16 -      text  : 'SELECT `post`.`content` FROM `post` GROUP BY `post`.`userId`',

 Line: 17 -      string: 'SELECT `post`.`content` FROM `post` GROUP BY `post`.`userId`'

 Line: 20 -      text  : 'SELECT [post].[content] FROM [post] GROUP BY [post].[userId]',

 Line: 21 -      string: 'SELECT [post].[content] FROM [post] GROUP BY [post].[userId]'

 Line: 24 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId"',

 Line: 25 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId"'

 Line: 31 -    query: post.select(post.content).group(post.userId, post.id),

 Line: 33 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"',

 Line: 34 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"'

 Line: 37 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"',

 Line: 38 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"'

 Line: 41 -      text  : 'SELECT `post`.`content` FROM `post` GROUP BY `post`.`userId`, `post`.`id`',

 Line: 42 -      string: 'SELECT `post`.`content` FROM `post` GROUP BY `post`.`userId`, `post`.`id`'

 Line: 45 -      text  : 'SELECT [post].[content] FROM [post] GROUP BY [post].[userId], [post].[id]',

 Line: 46 -      string: 'SELECT [post].[content] FROM [post] GROUP BY [post].[userId], [post].[id]'

 Line: 49 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"',

 Line: 50 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"'

 Line: 56 -    query: post.select(post.content.arrayAgg()).group(post.userId),

 Line: 58 -      text  : 'SELECT array_agg("post"."content") AS "contents" FROM "post" GROUP BY "post"."userId"',

 Line: 59 -      string: 'SELECT array_agg("post"."content") AS "contents" FROM "post" GROUP BY "post"."userId"'

 Line: 62 -      text  : 'SELECT GROUP_CONCAT("post"."content") AS "contents" FROM "post" GROUP BY "post"."userId"',

 Line: 63 -      string: 'SELECT GROUP_CONCAT("post"."content") AS "contents" FROM "post" GROUP BY "post"."userId"'

 Line: 66 -      text  : 'SELECT GROUP_CONCAT(`post`.`content`) AS `contents` FROM `post` GROUP BY `post`.`userId`',

 Line: 67 -      string: 'SELECT GROUP_CONCAT(`post`.`content`) AS `contents` FROM `post` GROUP BY `post`.`userId`'

 Line: 81 -    query: post.select(post.content.arrayAgg('post contents')).group(post.userId),

 Line: 83 -      text  : 'SELECT array_agg("post"."content") AS "post contents" FROM "post" GROUP BY "post"."userId"',

 Line: 84 -      string: 'SELECT array_agg("post"."content") AS "post contents" FROM "post" GROUP BY "post"."userId"'

 Line: 87 -      text  : 'SELECT GROUP_CONCAT("post"."content") AS "post contents" FROM "post" GROUP BY "post"."userId"',

 Line: 88 -      string: 'SELECT GROUP_CONCAT("post"."content") AS "post contents" FROM "post" GROUP BY "post"."userId"'

 Line: 91 -      text  : 'SELECT GROUP_CONCAT(`post`.`content`) AS `post contents` FROM `post` GROUP BY `post`.`userId`',

 Line: 92 -      string: 'SELECT GROUP_CONCAT(`post`.`content`) AS `post contents` FROM `post` GROUP BY `post`.`userId`'

 Line: 106 -    query: post.select(post.content).group([post.userId, post.id]),

 Line: 108 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"',

 Line: 109 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"'

 Line: 112 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"',

 Line: 113 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"'

 Line: 116 -      text  : 'SELECT `post`.`content` FROM `post` GROUP BY `post`.`userId`, `post`.`id`',

 Line: 117 -      string: 'SELECT `post`.`content` FROM `post` GROUP BY `post`.`userId`, `post`.`id`'

 Line: 120 -      text  : 'SELECT [post].[content] FROM [post] GROUP BY [post].[userId], [post].[id]',

 Line: 121 -      string: 'SELECT [post].[content] FROM [post] GROUP BY [post].[userId], [post].[id]'

 Line: 124 -      text  : 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"',

 Line: 125 -      string: 'SELECT "post"."content" FROM "post" GROUP BY "post"."userId", "post"."id"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/from-clause-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: user.select(user.star()).from(user).from(post),

 Line: 9 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 10 -      string: 'SELECT "user".* FROM "user" , "post"'

 Line: 13 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 14 -      string: 'SELECT "user".* FROM "user" , "post"'

 Line: 17 -      text  : 'SELECT `user`.* FROM `user` , `post`',

 Line: 18 -      string: 'SELECT `user`.* FROM `user` , `post`'

 Line: 21 -      text  : 'SELECT [user].* FROM [user] , [post]',

 Line: 22 -      string: 'SELECT [user].* FROM [user] , [post]'

 Line: 25 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 26 -      string: 'SELECT "user".* FROM "user" , "post"'

 Line: 31 -    query: user.select(user.star(), post.star()).from(user).from(post),

 Line: 33 -      text  : 'SELECT "user".*, "post".* FROM "user" , "post"',

 Line: 34 -      string: 'SELECT "user".*, "post".* FROM "user" , "post"'

 Line: 37 -      text  : 'SELECT "user".*, "post".* FROM "user" , "post"',

 Line: 38 -      string: 'SELECT "user".*, "post".* FROM "user" , "post"'

 Line: 41 -      text  : 'SELECT `user`.*, `post`.* FROM `user` , `post`',

 Line: 42 -      string: 'SELECT `user`.*, `post`.* FROM `user` , `post`'

 Line: 45 -      text  : 'SELECT [user].*, [post].* FROM [user] , [post]',

 Line: 46 -      string: 'SELECT [user].*, [post].* FROM [user] , [post]'

 Line: 49 -      text  : 'SELECT "user".*, "post".* FROM "user" , "post"',

 Line: 50 -      string: 'SELECT "user".*, "post".* FROM "user" , "post"'

 Line: 55 -    query: user.select(user.star()).from(user, post),

 Line: 57 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 58 -      string: 'SELECT "user".* FROM "user" , "post"'

 Line: 61 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 62 -      string: 'SELECT "user".* FROM "user" , "post"'

 Line: 65 -      text  : 'SELECT `user`.* FROM `user` , `post`',

 Line: 66 -      string: 'SELECT `user`.* FROM `user` , `post`'

 Line: 69 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 70 -      string: 'SELECT "user".* FROM "user" , "post"'

 Line: 75 -    query: user.select(user.star()).from([user, post]),

 Line: 77 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 78 -      string: 'SELECT "user".* FROM "user" , "post"'

 Line: 81 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 82 -      string: 'SELECT "user".* FROM "user" , "post"'

 Line: 85 -      text  : 'SELECT `user`.* FROM `user` , `post`',

 Line: 86 -      string: 'SELECT `user`.* FROM `user` , `post`'

 Line: 89 -      text  : 'SELECT "user".* FROM "user" , "post"',

 Line: 90 -      string: 'SELECT "user".* FROM "user" , "post"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/create-table-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -    query: group.create(),

 Line: 43 -    query: group.create().ifNotExists(),

 Line: 57 -      text  : 'IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = \'group\') BEGIN CREATE TABLE [group] ([id] varchar(100), [user_id] varchar(100)) END',

 Line: 58 -      string: 'IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = \'group\') BEGIN CREATE TABLE [group] ([id] varchar(100), [user_id] varchar(100)) END'

 Line: 68 -    query: Table.define({

 Line: 100 -    query: Table.define({

 Line: 132 -    query: Table.define({

 Line: 165 -    query: Table.define({

 Line: 196 -    query: Table.define({

 Line: 223 -    query: Table.define({

 Line: 251 -    query: Table.define({

 Line: 284 -    query: Table.define({

 Line: 298 -      text  : 'CREATE TABLE "post" ("userId" int REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE SET NULL)',

 Line: 299 -      string: 'CREATE TABLE "post" ("userId" int REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE SET NULL)'

 Line: 302 -      text  : 'CREATE TABLE "post" ("userId" int REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE SET NULL)',

 Line: 303 -      string: 'CREATE TABLE "post" ("userId" int REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE SET NULL)'

 Line: 306 -      text  : 'CREATE TABLE `post` (`userId` int REFERENCES `user`(`id`) ON DELETE RESTRICT ON UPDATE SET NULL)',

 Line: 307 -      string: 'CREATE TABLE `post` (`userId` int REFERENCES `user`(`id`) ON DELETE RESTRICT ON UPDATE SET NULL)'

 Line: 310 -      text  : 'CREATE TABLE "post" ("userId" int REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE SET NULL)',

 Line: 311 -      string: 'CREATE TABLE "post" ("userId" int REFERENCES "user"("id") ON DELETE RESTRICT ON UPDATE SET NULL)'

 Line: 317 -    query: Table.define({

 Line: 352 -    query: Table.define({

 Line: 365 -      text  : 'CREATE TABLE "picture" ("userId" int REFERENCES "user"("id") ON DELETE CASCADE)',

 Line: 366 -      string: 'CREATE TABLE "picture" ("userId" int REFERENCES "user"("id") ON DELETE CASCADE)'

 Line: 369 -      text  : 'CREATE TABLE "picture" ("userId" int REFERENCES "user"("id") ON DELETE CASCADE)',

 Line: 370 -      string: 'CREATE TABLE "picture" ("userId" int REFERENCES "user"("id") ON DELETE CASCADE)'

 Line: 373 -      text  : 'CREATE TABLE `picture` (`userId` int REFERENCES `user`(`id`) ON DELETE CASCADE)',

 Line: 374 -      string: 'CREATE TABLE `picture` (`userId` int REFERENCES `user`(`id`) ON DELETE CASCADE)'

 Line: 377 -      text  : 'CREATE TABLE "picture" ("userId" int REFERENCES "user"("id") ON DELETE CASCADE)',

 Line: 378 -      string: 'CREATE TABLE "picture" ("userId" int REFERENCES "user"("id") ON DELETE CASCADE)'

 Line: 384 -    query: Table.define({

 Line: 412 -    query: Table.define({

 Line: 439 -    query: Table.define({

 Line: 471 -    query: Table.define({

 Line: 514 -    query: users.create(),

 Line: 540 -    query: Table.define({

 Line: 590 -    query: noUsers.create(),

 Line: 615 -    query: Table.define({

 Line: 649 -    query: Table.define({

 Line: 683 -    query: Table.define({

 Line: 718 -    query: Table.define({

 Line: 748 -      text  : 'CREATE TABLE "replies" ("id" int PRIMARY KEY, "blog_id" int, "post_id" int, "user_id" int, FOREIGN KEY ( "blog_id", "user_id" ) REFERENCES "users" ON DELETE NO ACTION, CONSTRAINT "posts_idx" FOREIGN KEY ( "blog_id", "post_id" ) REFERENCES "posts" ( "blog_id", "id" ) ON DELETE CASCADE ON UPDATE SET DEFAULT)',

 Line: 749 -      string: 'CREATE TABLE "replies" ("id" int PRIMARY KEY, "blog_id" int, "post_id" int, "user_id" int, FOREIGN KEY ( "blog_id", "user_id" ) REFERENCES "users" ON DELETE NO ACTION, CONSTRAINT "posts_idx" FOREIGN KEY ( "blog_id", "post_id" ) REFERENCES "posts" ( "blog_id", "id" ) ON DELETE CASCADE ON UPDATE SET DEFAULT)'

 Line: 752 -      text  : 'CREATE TABLE "replies" ("id" int PRIMARY KEY, "blog_id" int, "post_id" int, "user_id" int, FOREIGN KEY ( "blog_id", "user_id" ) REFERENCES "users" ON DELETE NO ACTION, CONSTRAINT "posts_idx" FOREIGN KEY ( "blog_id", "post_id" ) REFERENCES "posts" ( "blog_id", "id" ) ON DELETE CASCADE ON UPDATE SET DEFAULT)',

 Line: 753 -      string: 'CREATE TABLE "replies" ("id" int PRIMARY KEY, "blog_id" int, "post_id" int, "user_id" int, FOREIGN KEY ( "blog_id", "user_id" ) REFERENCES "users" ON DELETE NO ACTION, CONSTRAINT "posts_idx" FOREIGN KEY ( "blog_id", "post_id" ) REFERENCES "posts" ( "blog_id", "id" ) ON DELETE CASCADE ON UPDATE SET DEFAULT)'

 Line: 756 -      text  : 'CREATE TABLE `replies` (`id` int PRIMARY KEY, `blog_id` int, `post_id` int, `user_id` int, FOREIGN KEY ( `blog_id`, `user_id` ) REFERENCES `users` ON DELETE NO ACTION, CONSTRAINT `posts_idx` FOREIGN KEY ( `blog_id`, `post_id` ) REFERENCES `posts` ( `blog_id`, `id` ) ON DELETE CASCADE ON UPDATE SET DEFAULT)',

 Line: 757 -      string: 'CREATE TABLE `replies` (`id` int PRIMARY KEY, `blog_id` int, `post_id` int, `user_id` int, FOREIGN KEY ( `blog_id`, `user_id` ) REFERENCES `users` ON DELETE NO ACTION, CONSTRAINT `posts_idx` FOREIGN KEY ( `blog_id`, `post_id` ) REFERENCES `posts` ( `blog_id`, `id` ) ON DELETE CASCADE ON UPDATE SET DEFAULT)'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/limit-and-offset-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -    query: user.select(user.star()).from(user).order(user.name.asc).limit(1),

 Line: 11 -      text  : 'SELECT "user".* FROM "user" ORDER BY "user"."name" LIMIT 1',

 Line: 12 -      string: 'SELECT "user".* FROM "user" ORDER BY "user"."name" LIMIT 1'

 Line: 15 -      text  : 'SELECT "user".* FROM "user" ORDER BY "user"."name" LIMIT 1',

 Line: 16 -      string: 'SELECT "user".* FROM "user" ORDER BY "user"."name" LIMIT 1'

 Line: 19 -      text  : 'SELECT `user`.* FROM `user` ORDER BY `user`.`name` LIMIT 1',

 Line: 20 -      string: 'SELECT `user`.* FROM `user` ORDER BY `user`.`name` LIMIT 1'

 Line: 23 -      text  : 'SELECT TOP(1) [user].* FROM [user] ORDER BY [user].[name]',

 Line: 24 -      string: 'SELECT TOP(1) [user].* FROM [user] ORDER BY [user].[name]'

 Line: 30 -    query: user.select(user.star()).from(user).order(user.name.asc).limit(3).offset(6),

 Line: 32 -      text  : 'SELECT "user".* FROM "user" ORDER BY "user"."name" LIMIT 3 OFFSET 6',

 Line: 33 -      string: 'SELECT "user".* FROM "user" ORDER BY "user"."name" LIMIT 3 OFFSET 6'

 Line: 36 -      text  : 'SELECT "user".* FROM "user" ORDER BY "user"."name" LIMIT 3 OFFSET 6',

 Line: 37 -      string: 'SELECT "user".* FROM "user" ORDER BY "user"."name" LIMIT 3 OFFSET 6'

 Line: 40 -      text  : 'SELECT `user`.* FROM `user` ORDER BY `user`.`name` LIMIT 3 OFFSET 6',

 Line: 41 -      string: 'SELECT `user`.* FROM `user` ORDER BY `user`.`name` LIMIT 3 OFFSET 6'

 Line: 44 -      text  : 'SELECT [user].* FROM [user] ORDER BY [user].[name] OFFSET 6 ROWS FETCH NEXT 3 ROWS ONLY',

 Line: 45 -      string: 'SELECT [user].* FROM [user] ORDER BY [user].[name] OFFSET 6 ROWS FETCH NEXT 3 ROWS ONLY'

 Line: 51 -    query: user.select(user.star()).from(user).order(user.name.asc).offset(10),

 Line: 53 -      text  : 'SELECT "user".* FROM "user" ORDER BY "user"."name" OFFSET 10',

 Line: 54 -      string: 'SELECT "user".* FROM "user" ORDER BY "user"."name" OFFSET 10'

 Line: 57 -      text  : 'SELECT "user".* FROM "user" ORDER BY "user"."name" OFFSET 10',

 Line: 58 -      string: 'SELECT "user".* FROM "user" ORDER BY "user"."name" OFFSET 10'

 Line: 61 -      text  : 'SELECT `user`.* FROM `user` ORDER BY `user`.`name` OFFSET 10',

 Line: 62 -      string: 'SELECT `user`.* FROM `user` ORDER BY `user`.`name` OFFSET 10'

 Line: 65 -      text  : 'SELECT [user].* FROM [user] ORDER BY [user].[name] OFFSET 10 ROWS',

 Line: 66 -      string: 'SELECT [user].* FROM [user] ORDER BY [user].[name] OFFSET 10 ROWS'

 Line: 69 -      text  : 'SELECT "user".* FROM "user" ORDER BY "user"."name" OFFSET 10 ROWS',

 Line: 70 -      string: 'SELECT "user".* FROM "user" ORDER BY "user"."name" OFFSET 10 ROWS'

 Line: 76 -    query: user.select(user.star()).where({

 Line: 82 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."name" = $1) OFFSET (SELECT FLOOR(RANDOM() * COUNT(*)) FROM "user" WHERE ("user"."name" = $2)) LIMIT 1',

 Line: 83 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."name" = \'John\') OFFSET (SELECT FLOOR(RANDOM() * COUNT(*)) FROM "user" WHERE ("user"."name" = \'John\')) LIMIT 1'

 Line: 86 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."name" = $1) OFFSET (SELECT FLOOR(RANDOM() * COUNT(*)) FROM "user" WHERE ("user"."name" = $2)) LIMIT 1',

 Line: 87 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."name" = \'John\') OFFSET (SELECT FLOOR(RANDOM() * COUNT(*)) FROM "user" WHERE ("user"."name" = \'John\')) LIMIT 1'

 Line: 90 -      text  : 'SELECT `user`.* FROM `user` WHERE (`user`.`name` = ?) OFFSET (SELECT FLOOR(RANDOM() * COUNT(*)) FROM `user` WHERE (`user`.`name` = ?)) LIMIT 1',

 Line: 91 -      string: 'SELECT `user`.* FROM `user` WHERE (`user`.`name` = \'John\') OFFSET (SELECT FLOOR(RANDOM() * COUNT(*)) FROM `user` WHERE (`user`.`name` = \'John\')) LIMIT 1'

 Line: 98 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."name" = :1) OFFSET (SELECT FLOOR(RANDOM() * COUNT(*)) FROM "user" WHERE ("user"."name" = :2)) ROWS FETCH NEXT 1 ROWS ONLY',

 Line: 99 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."name" = \'John\') OFFSET (SELECT FLOOR(RANDOM() * COUNT(*)) FROM "user" WHERE ("user"."name" = \'John\')) ROWS FETCH NEXT 1 ROWS ONLY'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/namespace-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -    query: u.select(u.name).from(u),

 Line: 11 -      text  : 'SELECT "u"."name" FROM "user" AS "u"',

 Line: 12 -      string: 'SELECT "u"."name" FROM "user" AS "u"'

 Line: 15 -      text  : 'SELECT "u"."name" FROM "user" AS "u"',

 Line: 16 -      string: 'SELECT "u"."name" FROM "user" AS "u"'

 Line: 19 -      text  : 'SELECT `u`.`name` FROM `user` AS `u`',

 Line: 20 -      string: 'SELECT `u`.`name` FROM `user` AS `u`'

 Line: 23 -      text  : 'SELECT [u].[name] FROM [user] AS [u]',

 Line: 24 -      string: 'SELECT [u].[name] FROM [user] AS [u]'

 Line: 27 -      text  : 'SELECT "u"."name" FROM "user" "u"',

 Line: 28 -      string: 'SELECT "u"."name" FROM "user" "u"'

 Line: 34 -    query: u.select(u.star()).from(u),

 Line: 36 -      text  : 'SELECT "u".* FROM "user" AS "u"',

 Line: 37 -      string: 'SELECT "u".* FROM "user" AS "u"'

 Line: 40 -      text  : 'SELECT "u".* FROM "user" AS "u"',

 Line: 41 -      string: 'SELECT "u".* FROM "user" AS "u"'

 Line: 44 -      text  : 'SELECT `u`.* FROM `user` AS `u`',

 Line: 45 -      string: 'SELECT `u`.* FROM `user` AS `u`'

 Line: 48 -      text  : 'SELECT [u].* FROM [user] AS [u]',

 Line: 49 -      string: 'SELECT [u].* FROM [user] AS [u]'

 Line: 52 -      text  : 'SELECT "u".* FROM "user" "u"',

 Line: 53 -      string: 'SELECT "u".* FROM "user" "u"'

 Line: 60 -    query: u.select(u.name).from(u.join(p).on(u.id.equals(p.userId).and(p.id.equals(3)))),

 Line: 62 -      text  : 'SELECT "u"."name" FROM "user" AS "u" INNER JOIN "post" AS "p" ON (("u"."id" = "p"."userId") AND ("p"."id" = $1))',

 Line: 63 -      string: 'SELECT "u"."name" FROM "user" AS "u" INNER JOIN "post" AS "p" ON (("u"."id" = "p"."userId") AND ("p"."id" = 3))'

 Line: 66 -      text  : 'SELECT "u"."name" FROM "user" AS "u" INNER JOIN "post" AS "p" ON (("u"."id" = "p"."userId") AND ("p"."id" = $1))',

 Line: 67 -      string: 'SELECT "u"."name" FROM "user" AS "u" INNER JOIN "post" AS "p" ON (("u"."id" = "p"."userId") AND ("p"."id" = 3))'

 Line: 70 -      text  : 'SELECT `u`.`name` FROM `user` AS `u` INNER JOIN `post` AS `p` ON ((`u`.`id` = `p`.`userId`) AND (`p`.`id` = ?))',

 Line: 71 -      string: 'SELECT `u`.`name` FROM `user` AS `u` INNER JOIN `post` AS `p` ON ((`u`.`id` = `p`.`userId`) AND (`p`.`id` = 3))'

 Line: 74 -      text  : 'SELECT [u].[name] FROM [user] AS [u] INNER JOIN [post] AS [p] ON (([u].[id] = [p].[userId]) AND ([p].[id] = @1))',

 Line: 75 -      string: 'SELECT [u].[name] FROM [user] AS [u] INNER JOIN [post] AS [p] ON (([u].[id] = [p].[userId]) AND ([p].[id] = 3))'

 Line: 78 -      text  : 'SELECT "u"."name" FROM "user" "u" INNER JOIN "post" "p" ON (("u"."id" = "p"."userId") AND ("p"."id" = :1))',

 Line: 79 -      string: 'SELECT "u"."name" FROM "user" "u" INNER JOIN "post" "p" ON (("u"."id" = "p"."userId") AND ("p"."id" = 3))'

 Line: 85 -    query: u.select(p.content, u.name).from(u.join(p).on(u.id.equals(p.userId).and(p.content.isNotNull()))),

 Line: 87 -      text  : 'SELECT "p"."content", "u"."name" FROM "user" AS "u" INNER JOIN "post" AS "p" ON (("u"."id" = "p"."userId") AND ("p"."content" IS NOT NULL))',

 Line: 88 -      string: 'SELECT "p"."content", "u"."name" FROM "user" AS "u" INNER JOIN "post" AS "p" ON (("u"."id" = "p"."userId") AND ("p"."content" IS NOT NULL))'

 Line: 91 -      text  : 'SELECT "p"."content", "u"."name" FROM "user" AS "u" INNER JOIN "post" AS "p" ON (("u"."id" = "p"."userId") AND ("p"."content" IS NOT NULL))',

 Line: 92 -      string: 'SELECT "p"."content", "u"."name" FROM "user" AS "u" INNER JOIN "post" AS "p" ON (("u"."id" = "p"."userId") AND ("p"."content" IS NOT NULL))'

 Line: 95 -      text  : 'SELECT `p`.`content`, `u`.`name` FROM `user` AS `u` INNER JOIN `post` AS `p` ON ((`u`.`id` = `p`.`userId`) AND (`p`.`content` IS NOT NULL))',

 Line: 96 -      string: 'SELECT `p`.`content`, `u`.`name` FROM `user` AS `u` INNER JOIN `post` AS `p` ON ((`u`.`id` = `p`.`userId`) AND (`p`.`content` IS NOT NULL))'

 Line: 99 -      text  : 'SELECT [p].[content], [u].[name] FROM [user] AS [u] INNER JOIN [post] AS [p] ON (([u].[id] = [p].[userId]) AND ([p].[content] IS NOT NULL))',

 Line: 100 -      string: 'SELECT [p].[content], [u].[name] FROM [user] AS [u] INNER JOIN [post] AS [p] ON (([u].[id] = [p].[userId]) AND ([p].[content] IS NOT NULL))'

 Line: 103 -      text  : 'SELECT "p"."content", "u"."name" FROM "user" "u" INNER JOIN "post" "p" ON (("u"."id" = "p"."userId") AND ("p"."content" IS NOT NULL))',

 Line: 104 -      string: 'SELECT "p"."content", "u"."name" FROM "user" "u" INNER JOIN "post" "p" ON (("u"."id" = "p"."userId") AND ("p"."content" IS NOT NULL))'

 Line: 123 -    query: comment.select(comment.text, comment.userId),

 Line: 125 -      text  : 'SELECT "comment"."text", "comment"."userId" FROM "comment"',

 Line: 126 -      string: 'SELECT "comment"."text", "comment"."userId" FROM "comment"'

 Line: 129 -      text  : 'SELECT "comment"."text", "comment"."userId" FROM "comment"',

 Line: 130 -      string: 'SELECT "comment"."text", "comment"."userId" FROM "comment"'

 Line: 133 -      text  : 'SELECT `comment`.`text`, `comment`.`userId` FROM `comment`',

 Line: 134 -      string: 'SELECT `comment`.`text`, `comment`.`userId` FROM `comment`'

 Line: 137 -      text  : 'SELECT [comment].[text], [comment].[userId] FROM [comment]',

 Line: 138 -      string: 'SELECT [comment].[text], [comment].[userId] FROM [comment]'

 Line: 141 -      text  : 'SELECT "comment"."text", "comment"."userId" FROM "comment"',

 Line: 142 -      string: 'SELECT "comment"."text", "comment"."userId" FROM "comment"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/join-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: user.select(user.name, post.content).from(user.join(post).on(user.id.equals(post.userId))),

 Line: 10 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 11 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 14 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 15 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 18 -      text  : 'SELECT `user`.`name`, `post`.`content` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`)',

 Line: 19 -      string: 'SELECT `user`.`name`, `post`.`content` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`)'

 Line: 22 -      text  : 'SELECT [user].[name], [post].[content] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId])',

 Line: 23 -      string: 'SELECT [user].[name], [post].[content] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId])'

 Line: 26 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 27 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 33 -    query: user.join(post).on(user.id.equals(post.userId)),

 Line: 58 -    query: user

 Line: 65 -      text  : 'SELECT "user"."name", "post"."content", "comment"."text" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") INNER JOIN "comment" ON ("post"."id" = "comment"."postId")',

 Line: 66 -      string: 'SELECT "user"."name", "post"."content", "comment"."text" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") INNER JOIN "comment" ON ("post"."id" = "comment"."postId")'

 Line: 69 -      text  : 'SELECT "user"."name", "post"."content", "comment"."text" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") INNER JOIN "comment" ON ("post"."id" = "comment"."postId")',

 Line: 70 -      string: 'SELECT "user"."name", "post"."content", "comment"."text" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") INNER JOIN "comment" ON ("post"."id" = "comment"."postId")'

 Line: 73 -      text  : 'SELECT `user`.`name`, `post`.`content`, `comment`.`text` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`) INNER JOIN `comment` ON (`post`.`id` = `comment`.`postId`)',

 Line: 74 -      string: 'SELECT `user`.`name`, `post`.`content`, `comment`.`text` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`) INNER JOIN `comment` ON (`post`.`id` = `comment`.`postId`)'

 Line: 77 -      text  : 'SELECT [user].[name], [post].[content], [comment].[text] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId]) INNER JOIN [comment] ON ([post].[id] = [comment].[postId])',

 Line: 78 -      string: 'SELECT [user].[name], [post].[content], [comment].[text] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId]) INNER JOIN [comment] ON ([post].[id] = [comment].[postId])'

 Line: 81 -      text  : 'SELECT "user"."name", "post"."content", "comment"."text" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") INNER JOIN "comment" ON ("post"."id" = "comment"."postId")',

 Line: 82 -      string: 'SELECT "user"."name", "post"."content", "comment"."text" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") INNER JOIN "comment" ON ("post"."id" = "comment"."postId")'

 Line: 88 -    query: user.select(user.name, post.content).from(user.leftJoin(post).on(user.id.equals(post.userId))),

 Line: 90 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 91 -      string: 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 94 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 95 -      string: 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 98 -      text  : 'SELECT `user`.`name`, `post`.`content` FROM `user` LEFT JOIN `post` ON (`user`.`id` = `post`.`userId`)',

 Line: 99 -      string: 'SELECT `user`.`name`, `post`.`content` FROM `user` LEFT JOIN `post` ON (`user`.`id` = `post`.`userId`)'

 Line: 102 -      text  : 'SELECT [user].[name], [post].[content] FROM [user] LEFT JOIN [post] ON ([user].[id] = [post].[userId])',

 Line: 103 -      string: 'SELECT [user].[name], [post].[content] FROM [user] LEFT JOIN [post] ON ([user].[id] = [post].[userId])'

 Line: 106 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 107 -      string: 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 113 -    query: user

 Line: 120 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId") LEFT JOIN "comment" ON ("post"."id" = "comment"."postId")',

 Line: 121 -      string: 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId") LEFT JOIN "comment" ON ("post"."id" = "comment"."postId")'

 Line: 124 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId") LEFT JOIN "comment" ON ("post"."id" = "comment"."postId")',

 Line: 125 -      string: 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId") LEFT JOIN "comment" ON ("post"."id" = "comment"."postId")'

 Line: 128 -      text  : 'SELECT `user`.`name`, `post`.`content` FROM `user` LEFT JOIN `post` ON (`user`.`id` = `post`.`userId`) LEFT JOIN `comment` ON (`post`.`id` = `comment`.`postId`)',

 Line: 129 -      string: 'SELECT `user`.`name`, `post`.`content` FROM `user` LEFT JOIN `post` ON (`user`.`id` = `post`.`userId`) LEFT JOIN `comment` ON (`post`.`id` = `comment`.`postId`)'

 Line: 132 -      text  : 'SELECT [user].[name], [post].[content] FROM [user] LEFT JOIN [post] ON ([user].[id] = [post].[userId]) LEFT JOIN [comment] ON ([post].[id] = [comment].[postId])',

 Line: 133 -      string: 'SELECT [user].[name], [post].[content] FROM [user] LEFT JOIN [post] ON ([user].[id] = [post].[userId]) LEFT JOIN [comment] ON ([post].[id] = [comment].[postId])'

 Line: 136 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId") LEFT JOIN "comment" ON ("post"."id" = "comment"."postId")',

 Line: 137 -      string: 'SELECT "user"."name", "post"."content" FROM "user" LEFT JOIN "post" ON ("user"."id" = "post"."userId") LEFT JOIN "comment" ON ("post"."id" = "comment"."postId")'

 Line: 150 -    query: user

 Line: 155 -      text  : 'SELECT "user"."name", "subposts"."content" FROM "user" INNER JOIN (SELECT "post"."content", "post"."userId" AS "subpostUserId" FROM "post") "subposts" ON ("user"."id" = "subposts"."subpostUserId")',

 Line: 156 -      string: 'SELECT "user"."name", "subposts"."content" FROM "user" INNER JOIN (SELECT "post"."content", "post"."userId" AS "subpostUserId" FROM "post") "subposts" ON ("user"."id" = "subposts"."subpostUserId")'

 Line: 159 -      text  : 'SELECT "user"."name", "subposts"."content" FROM "user" INNER JOIN (SELECT "post"."content", "post"."userId" AS "subpostUserId" FROM "post") "subposts" ON ("user"."id" = "subposts"."subpostUserId")',

 Line: 160 -      string: 'SELECT "user"."name", "subposts"."content" FROM "user" INNER JOIN (SELECT "post"."content", "post"."userId" AS "subpostUserId" FROM "post") "subposts" ON ("user"."id" = "subposts"."subpostUserId")'

 Line: 163 -      text  : 'SELECT `user`.`name`, `subposts`.`content` FROM `user` INNER JOIN (SELECT `post`.`content`, `post`.`userId` AS `subpostUserId` FROM `post`) `subposts` ON (`user`.`id` = `subposts`.`subpostUserId`)',

 Line: 164 -      string: 'SELECT `user`.`name`, `subposts`.`content` FROM `user` INNER JOIN (SELECT `post`.`content`, `post`.`userId` AS `subpostUserId` FROM `post`) `subposts` ON (`user`.`id` = `subposts`.`subpostUserId`)'

 Line: 167 -      text  : 'SELECT [user].[name], [subposts].[content] FROM [user] INNER JOIN (SELECT [post].[content], [post].[userId] AS [subpostUserId] FROM [post]) [subposts] ON ([user].[id] = [subposts].[subpostUserId])',

 Line: 168 -      string: 'SELECT [user].[name], [subposts].[content] FROM [user] INNER JOIN (SELECT [post].[content], [post].[userId] AS [subpostUserId] FROM [post]) [subposts] ON ([user].[id] = [subposts].[subpostUserId])'

 Line: 171 -      text  : 'SELECT "user"."name", "subposts"."content" FROM "user" INNER JOIN (SELECT "post"."content", "post"."userId" "subpostUserId" FROM "post") "subposts" ON ("user"."id" = "subposts"."subpostUserId")',

 Line: 172 -      string: 'SELECT "user"."name", "subposts"."content" FROM "user" INNER JOIN (SELECT "post"."content", "post"."userId" "subpostUserId" FROM "post") "subposts" ON ("user"."id" = "subposts"."subpostUserId")'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/value-expression-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -    query: customer.select(customer.name, customer.income.modulo(100)).where(customer.age.plus(5).multiply(customer.age.minus(2)).equals(10)),

 Line: 11 -      text  : 'SELECT "customer"."name", ("customer"."income" % $1) FROM "customer" WHERE ((("customer"."age" + $2) * ("customer"."age" - $3)) = $4)',

 Line: 12 -      string: 'SELECT "customer"."name", ("customer"."income" % 100) FROM "customer" WHERE ((("customer"."age" + 5) * ("customer"."age" - 2)) = 10)'

 Line: 15 -      text  : 'SELECT "customer"."name", ("customer"."income" % $1) FROM "customer" WHERE ((("customer"."age" + $2) * ("customer"."age" - $3)) = $4)',

 Line: 16 -      string: 'SELECT "customer"."name", ("customer"."income" % 100) FROM "customer" WHERE ((("customer"."age" + 5) * ("customer"."age" - 2)) = 10)'

 Line: 19 -      text  : 'SELECT `customer`.`name`, (`customer`.`income` % ?) FROM `customer` WHERE (((`customer`.`age` + ?) * (`customer`.`age` - ?)) = ?)',

 Line: 20 -      string: 'SELECT `customer`.`name`, (`customer`.`income` % 100) FROM `customer` WHERE (((`customer`.`age` + 5) * (`customer`.`age` - 2)) = 10)'

 Line: 23 -      text  : 'SELECT [customer].[name], ([customer].[income] % @1) FROM [customer] WHERE ((([customer].[age] + @2) * ([customer].[age] - @3)) = @4)',

 Line: 24 -      string: 'SELECT [customer].[name], ([customer].[income] % 100) FROM [customer] WHERE ((([customer].[age] + 5) * ([customer].[age] - 2)) = 10)'

 Line: 27 -      text  : 'SELECT "customer"."name", ("customer"."income" % :1) FROM "customer" WHERE ((("customer"."age" + :2) * ("customer"."age" - :3)) = :4)',

 Line: 28 -      string: 'SELECT "customer"."name", ("customer"."income" % 100) FROM "customer" WHERE ((("customer"."age" + 5) * ("customer"."age" - 2)) = 10)'

 Line: 35 -    query: customer.select(customer.name).where(customer.name.like(customer.id.plus('hello'))),

 Line: 37 -      text  : 'SELECT "customer"."name" FROM "customer" WHERE ("customer"."name" LIKE ("customer"."id" + $1))',

 Line: 38 -      string: 'SELECT "customer"."name" FROM "customer" WHERE ("customer"."name" LIKE ("customer"."id" + \'hello\'))'

 Line: 41 -      text  : 'SELECT "customer"."name" FROM "customer" WHERE ("customer"."name" LIKE ("customer"."id" + $1))',

 Line: 42 -      string: 'SELECT "customer"."name" FROM "customer" WHERE ("customer"."name" LIKE ("customer"."id" + \'hello\'))'

 Line: 45 -      text  : 'SELECT `customer`.`name` FROM `customer` WHERE (`customer`.`name` LIKE (`customer`.`id` + ?))',

 Line: 46 -      string: 'SELECT `customer`.`name` FROM `customer` WHERE (`customer`.`name` LIKE (`customer`.`id` + \'hello\'))'

 Line: 49 -      text  : 'SELECT [customer].[name] FROM [customer] WHERE ([customer].[name] LIKE ([customer].[id] + @1))',

 Line: 50 -      string: 'SELECT [customer].[name] FROM [customer] WHERE ([customer].[name] LIKE ([customer].[id] + \'hello\'))'

 Line: 53 -      text  : 'SELECT "customer"."name" FROM "customer" WHERE ("customer"."name" LIKE ("customer"."id" + :1))',

 Line: 54 -      string: 'SELECT "customer"."name" FROM "customer" WHERE ("customer"."name" LIKE ("customer"."id" + \'hello\'))'

 Line: 62 -    query: v.select(v.a.multiply(v.a).divide(2).plus(v.v.multiply(v.t)).equals(v.d)),

 Line: 64 -      text  : 'SELECT (((("variable"."a" * "variable"."a") / $1) + ("variable"."v" * "variable"."t")) = "variable"."d") FROM "variable"',

 Line: 65 -      string: 'SELECT (((("variable"."a" * "variable"."a") / 2) + ("variable"."v" * "variable"."t")) = "variable"."d") FROM "variable"'

 Line: 68 -      text  : 'SELECT (((("variable"."a" * "variable"."a") / $1) + ("variable"."v" * "variable"."t")) = "variable"."d") FROM "variable"',

 Line: 69 -      string: 'SELECT (((("variable"."a" * "variable"."a") / 2) + ("variable"."v" * "variable"."t")) = "variable"."d") FROM "variable"'

 Line: 72 -      text  : 'SELECT ((((`variable`.`a` * `variable`.`a`) / ?) + (`variable`.`v` * `variable`.`t`)) = `variable`.`d`) FROM `variable`',

 Line: 73 -      string: 'SELECT ((((`variable`.`a` * `variable`.`a`) / 2) + (`variable`.`v` * `variable`.`t`)) = `variable`.`d`) FROM `variable`'

 Line: 76 -      text  : 'SELECT (((([variable].[a] * [variable].[a]) / @1) + ([variable].[v] * [variable].[t])) = [variable].[d]) FROM [variable]',

 Line: 77 -      string: 'SELECT (((([variable].[a] * [variable].[a]) / 2) + ([variable].[v] * [variable].[t])) = [variable].[d]) FROM [variable]'

 Line: 80 -      text  : 'SELECT (((("variable"."a" * "variable"."a") / :1) + ("variable"."v" * "variable"."t")) = "variable"."d") FROM "variable"',

 Line: 81 -      string: 'SELECT (((("variable"."a" * "variable"."a") / 2) + ("variable"."v" * "variable"."t")) = "variable"."d") FROM "variable"'

 Line: 88 -    query: v.select(v.a.multiply(v.a).plus(v.b.multiply(v.b)).equals(v.c.multiply(v.c))),

 Line: 90 -      text  : 'SELECT ((("variable"."a" * "variable"."a") + ("variable"."b" * "variable"."b")) = ("variable"."c" * "variable"."c")) FROM "variable"',

 Line: 91 -      string: 'SELECT ((("variable"."a" * "variable"."a") + ("variable"."b" * "variable"."b")) = ("variable"."c" * "variable"."c")) FROM "variable"'

 Line: 94 -      text  : 'SELECT ((("variable"."a" * "variable"."a") + ("variable"."b" * "variable"."b")) = ("variable"."c" * "variable"."c")) FROM "variable"',

 Line: 95 -      string: 'SELECT ((("variable"."a" * "variable"."a") + ("variable"."b" * "variable"."b")) = ("variable"."c" * "variable"."c")) FROM "variable"'

 Line: 98 -      text  : 'SELECT (((`variable`.`a` * `variable`.`a`) + (`variable`.`b` * `variable`.`b`)) = (`variable`.`c` * `variable`.`c`)) FROM `variable`',

 Line: 99 -      string: 'SELECT (((`variable`.`a` * `variable`.`a`) + (`variable`.`b` * `variable`.`b`)) = (`variable`.`c` * `variable`.`c`)) FROM `variable`'

 Line: 102 -      text  : 'SELECT ((([variable].[a] * [variable].[a]) + ([variable].[b] * [variable].[b])) = ([variable].[c] * [variable].[c])) FROM [variable]',

 Line: 103 -      string: 'SELECT ((([variable].[a] * [variable].[a]) + ([variable].[b] * [variable].[b])) = ([variable].[c] * [variable].[c])) FROM [variable]'

 Line: 106 -      text  : 'SELECT ((("variable"."a" * "variable"."a") + ("variable"."b" * "variable"."b")) = ("variable"."c" * "variable"."c")) FROM "variable"',

 Line: 107 -      string: 'SELECT ((("variable"."a" * "variable"."a") + ("variable"."b" * "variable"."b")) = ("variable"."c" * "variable"."c")) FROM "variable"'

 Line: 113 -    query: post.select(post.id).where(post.content.equals(new Buffer('test'))),

 Line: 115 -      text  : 'SELECT "post"."id" FROM "post" WHERE ("post"."content" = $1)',

 Line: 116 -      string: 'SELECT "post"."id" FROM "post" WHERE ("post"."content" = \'\\x74657374\')',

 Line: 119 -      text  : 'SELECT "post"."id" FROM "post" WHERE ("post"."content" = $1)',

 Line: 120 -      string: 'SELECT "post"."id" FROM "post" WHERE ("post"."content" = x\'74657374\')',

 Line: 123 -      text  : 'SELECT `post`.`id` FROM `post` WHERE (`post`.`content` = ?)',

 Line: 124 -      string: 'SELECT `post`.`id` FROM `post` WHERE (`post`.`content` = x\'74657374\')',

 Line: 127 -      text  : 'SELECT "post"."id" FROM "post" WHERE ("post"."content" = :1)',

 Line: 128 -      string: 'SELECT "post"."id" FROM "post" WHERE ("post"."content" = utl_raw.cast_to_varchar2(hextoraw(\'74657374\')))',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/shortcut-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: user,

 Line: 10 -      text  : 'SELECT "user".* FROM "user"',

 Line: 11 -      string: 'SELECT "user".* FROM "user"'

 Line: 14 -      text  : 'SELECT "user".* FROM "user"',

 Line: 15 -      string: 'SELECT "user".* FROM "user"'

 Line: 18 -      text  : 'SELECT `user`.* FROM `user`',

 Line: 19 -      string: 'SELECT `user`.* FROM `user`'

 Line: 22 -      text  : 'SELECT [user].* FROM [user]',

 Line: 23 -      string: 'SELECT [user].* FROM [user]'

 Line: 26 -      text  : 'SELECT "user".* FROM "user"',

 Line: 27 -      string: 'SELECT "user".* FROM "user"'

 Line: 33 -    query: user.where(user.name.equals(3)),

 Line: 35 -      text  : 'SELECT * FROM "user" WHERE ("user"."name" = $1)',

 Line: 36 -      string: 'SELECT * FROM "user" WHERE ("user"."name" = 3)'

 Line: 39 -      text  : 'SELECT * FROM "user" WHERE ("user"."name" = $1)',

 Line: 40 -      string: 'SELECT * FROM "user" WHERE ("user"."name" = 3)'

 Line: 43 -      text  : 'SELECT * FROM `user` WHERE (`user`.`name` = ?)',

 Line: 44 -      string: 'SELECT * FROM `user` WHERE (`user`.`name` = 3)'

 Line: 47 -      text  : 'SELECT * FROM [user] WHERE ([user].[name] = @1)',

 Line: 48 -      string: 'SELECT * FROM [user] WHERE ([user].[name] = 3)'

 Line: 51 -      text  : 'SELECT * FROM "user" WHERE ("user"."name" = :1)',

 Line: 52 -      string: 'SELECT * FROM "user" WHERE ("user"."name" = 3)'

 Line: 58 -    query: user.where(user.name.equals(3)).where(user.id.equals(1)),

 Line: 60 -      text  : 'SELECT * FROM "user" WHERE (("user"."name" = $1) AND ("user"."id" = $2))',

 Line: 61 -      string: 'SELECT * FROM "user" WHERE (("user"."name" = 3) AND ("user"."id" = 1))'

 Line: 64 -      text  : 'SELECT * FROM "user" WHERE (("user"."name" = $1) AND ("user"."id" = $2))',

 Line: 65 -      string: 'SELECT * FROM "user" WHERE (("user"."name" = 3) AND ("user"."id" = 1))'

 Line: 68 -      text  : 'SELECT * FROM `user` WHERE ((`user`.`name` = ?) AND (`user`.`id` = ?))',

 Line: 69 -      string: 'SELECT * FROM `user` WHERE ((`user`.`name` = 3) AND (`user`.`id` = 1))'

 Line: 72 -      text  : 'SELECT * FROM [user] WHERE (([user].[name] = @1) AND ([user].[id] = @2))',

 Line: 73 -      string: 'SELECT * FROM [user] WHERE (([user].[name] = 3) AND ([user].[id] = 1))'

 Line: 76 -      text  : 'SELECT * FROM "user" WHERE (("user"."name" = :1) AND ("user"."id" = :2))',

 Line: 77 -      string: 'SELECT * FROM "user" WHERE (("user"."name" = 3) AND ("user"."id" = 1))'

 Line: 84 -    query: post.select(post.content),

 Line: 86 -      text  : 'SELECT "post"."content" FROM "post"',

 Line: 87 -      string: 'SELECT "post"."content" FROM "post"'

 Line: 90 -      text  : 'SELECT "post"."content" FROM "post"',

 Line: 91 -      string: 'SELECT "post"."content" FROM "post"'

 Line: 94 -      text  : 'SELECT `post`.`content` FROM `post`',

 Line: 95 -      string: 'SELECT `post`.`content` FROM `post`'

 Line: 98 -      text  : 'SELECT [post].[content] FROM [post]',

 Line: 99 -      string: 'SELECT [post].[content] FROM [post]'

 Line: 102 -      text  : 'SELECT "post"."content" FROM "post"',

 Line: 103 -      string: 'SELECT "post"."content" FROM "post"'

 Line: 109 -    query: post.select(post.content).where(post.userId.equals(1)),

 Line: 111 -      text  : 'SELECT "post"."content" FROM "post" WHERE ("post"."userId" = $1)',

 Line: 112 -      string: 'SELECT "post"."content" FROM "post" WHERE ("post"."userId" = 1)'

 Line: 115 -      text  : 'SELECT "post"."content" FROM "post" WHERE ("post"."userId" = $1)',

 Line: 116 -      string: 'SELECT "post"."content" FROM "post" WHERE ("post"."userId" = 1)'

 Line: 119 -      text  : 'SELECT `post`.`content` FROM `post` WHERE (`post`.`userId` = ?)',

 Line: 120 -      string: 'SELECT `post`.`content` FROM `post` WHERE (`post`.`userId` = 1)'

 Line: 123 -      text  : 'SELECT [post].[content] FROM [post] WHERE ([post].[userId] = @1)',

 Line: 124 -      string: 'SELECT [post].[content] FROM [post] WHERE ([post].[userId] = 1)'

 Line: 127 -      text  : 'SELECT "post"."content" FROM "post" WHERE ("post"."userId" = :1)',

 Line: 128 -      string: 'SELECT "post"."content" FROM "post" WHERE ("post"."userId" = 1)'

 Line: 134 -    query: post.where(post.content.isNull()).or({

 Line: 140 -      text  : 'SELECT * FROM "post" WHERE ((("post"."content" IS NULL) OR ("post"."content" = $1)) AND ("post"."userId" = $2))',

 Line: 141 -      string: 'SELECT * FROM "post" WHERE ((("post"."content" IS NULL) OR ("post"."content" = \'\')) AND ("post"."userId" = 1))'

 Line: 144 -      text  : 'SELECT * FROM "post" WHERE ((("post"."content" IS NULL) OR ("post"."content" = $1)) AND ("post"."userId" = $2))',

 Line: 145 -      string: 'SELECT * FROM "post" WHERE ((("post"."content" IS NULL) OR ("post"."content" = \'\')) AND ("post"."userId" = 1))'

 Line: 148 -      text  : 'SELECT * FROM `post` WHERE (((`post`.`content` IS NULL) OR (`post`.`content` = ?)) AND (`post`.`userId` = ?))',

 Line: 149 -      string: 'SELECT * FROM `post` WHERE (((`post`.`content` IS NULL) OR (`post`.`content` = \'\')) AND (`post`.`userId` = 1))'

 Line: 152 -      text  : 'SELECT * FROM [post] WHERE ((([post].[content] IS NULL) OR ([post].[content] = @1)) AND ([post].[userId] = @2))',

 Line: 153 -      string: 'SELECT * FROM [post] WHERE ((([post].[content] IS NULL) OR ([post].[content] = \'\')) AND ([post].[userId] = 1))'

 Line: 156 -      text  : 'SELECT * FROM "post" WHERE ((("post"."content" IS NULL) OR ("post"."content" = :1)) AND ("post"."userId" = :2))',

 Line: 157 -      string: 'SELECT * FROM "post" WHERE ((("post"."content" IS NULL) OR ("post"."content" = \'\')) AND ("post"."userId" = 1))'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/subquery-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -    query: user.select(user.name).where(user.id.in(post.select(post.userId))),

 Line: 11 -      text:   'SELECT "user"."name" FROM "user" WHERE ("user"."id" IN (SELECT "post"."userId" FROM "post"))',

 Line: 12 -      string: 'SELECT "user"."name" FROM "user" WHERE ("user"."id" IN (SELECT "post"."userId" FROM "post"))'

 Line: 15 -      text:   'SELECT "user"."name" FROM "user" WHERE ("user"."id" IN (SELECT "post"."userId" FROM "post"))',

 Line: 16 -      string: 'SELECT "user"."name" FROM "user" WHERE ("user"."id" IN (SELECT "post"."userId" FROM "post"))'

 Line: 19 -      text:   'SELECT `user`.`name` FROM `user` WHERE (`user`.`id` IN (SELECT `post`.`userId` FROM `post`))',

 Line: 20 -      string: 'SELECT `user`.`name` FROM `user` WHERE (`user`.`id` IN (SELECT `post`.`userId` FROM `post`))'

 Line: 23 -      text:   'SELECT [user].[name] FROM [user] WHERE ([user].[id] IN (SELECT [post].[userId] FROM [post]))',

 Line: 24 -      string: 'SELECT [user].[name] FROM [user] WHERE ([user].[id] IN (SELECT [post].[userId] FROM [post]))',

 Line: 27 -      text:   'SELECT "user"."name" FROM "user" WHERE ("user"."id" IN (SELECT "post"."userId" FROM "post"))',

 Line: 28 -      string: 'SELECT "user"."name" FROM "user" WHERE ("user"."id" IN (SELECT "post"."userId" FROM "post"))'

 Line: 34 -    query: user.name.in(

 Line: 40 -      text  : '("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" LIKE $1)))))',

 Line: 41 -      string: '("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" LIKE \'%HELLO%\')))))'

 Line: 44 -      text  : '("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" LIKE $1)))))',

 Line: 45 -      string: '("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" LIKE \'%HELLO%\')))))'

 Line: 48 -      text  : '(`user`.`name` IN (SELECT `customer`.`name` FROM `customer` WHERE (`user`.`name` IN (SELECT `customer`.`name` FROM `customer` WHERE (`user`.`name` LIKE ?)))))',

 Line: 49 -      string: '(`user`.`name` IN (SELECT `customer`.`name` FROM `customer` WHERE (`user`.`name` IN (SELECT `customer`.`name` FROM `customer` WHERE (`user`.`name` LIKE \'%HELLO%\')))))'

 Line: 52 -      text  : '([user].[name] IN (SELECT [customer].[name] FROM [customer] WHERE ([user].[name] IN (SELECT [customer].[name] FROM [customer] WHERE ([user].[name] LIKE @1)))))',

 Line: 53 -      string: '([user].[name] IN (SELECT [customer].[name] FROM [customer] WHERE ([user].[name] IN (SELECT [customer].[name] FROM [customer] WHERE ([user].[name] LIKE \'%HELLO%\')))))'

 Line: 56 -      text  : '("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" LIKE :1)))))',

 Line: 57 -      string: '("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" IN (SELECT "customer"."name" FROM "customer" WHERE ("user"."name" LIKE \'%HELLO%\')))))'

 Line: 63 -    query: Sql.select('*').from(user.subQuery()),

 Line: 65 -      text  : 'SELECT * FROM (SELECT * FROM "user")',

 Line: 66 -      string: 'SELECT * FROM (SELECT * FROM "user")'

 Line: 69 -      text  : 'SELECT * FROM (SELECT * FROM "user")',

 Line: 70 -      string: 'SELECT * FROM (SELECT * FROM "user")'

 Line: 73 -      text  : 'SELECT * FROM (SELECT * FROM `user`)',

 Line: 74 -      string: 'SELECT * FROM (SELECT * FROM `user`)'

 Line: 77 -      text  : 'SELECT * FROM (SELECT * FROM [user])',

 Line: 78 -      string: 'SELECT * FROM (SELECT * FROM [user])'

 Line: 81 -      text  : 'SELECT * FROM (SELECT * FROM "user")',

 Line: 82 -      string: 'SELECT * FROM (SELECT * FROM "user")'

 Line: 89 -    query: Sql.select('*').from(post.subQuery().where(post.content.equals(new Date('Sat, 01 Jan 2000 00:00:00 GMT')))),

 Line: 91 -      text  : 'SELECT * FROM (SELECT * FROM "post" WHERE ("post"."content" = $1))',

 Line: 92 -      string: 'SELECT * FROM (SELECT * FROM "post" WHERE ("post"."content" = \'2000-01-01T00:00:00.000Z\'))'

 Line: 95 -      text  : 'SELECT * FROM (SELECT * FROM "post" WHERE ("post"."content" = $1))',

 Line: 96 -      string: 'SELECT * FROM (SELECT * FROM "post" WHERE ("post"."content" = 946684800000))',

 Line: 102 -      text  : 'SELECT * FROM (SELECT * FROM `post` WHERE (`post`.`content` = ?))',

 Line: 103 -      string: 'SELECT * FROM (SELECT * FROM `post` WHERE (`post`.`content` = \'2000-01-01T00:00:00.000Z\'))'

 Line: 106 -      text  : 'SELECT * FROM (SELECT * FROM [post] WHERE ([post].[content] = @1))',

 Line: 107 -      string: 'SELECT * FROM (SELECT * FROM [post] WHERE ([post].[content] = \'2000-01-01T00:00:00.000Z\'))'

 Line: 110 -      text  : 'SELECT * FROM (SELECT * FROM "post" WHERE ("post"."content" = :1))',

 Line: 111 -      string: 'SELECT * FROM (SELECT * FROM "post" WHERE ("post"."content" = \'2000-01-01T00:00:00.000Z\'))'

 Line: 118 -    query: Sql.select('*').from(customer.subQuery('T1')).from(user.subQuery('T2')),

 Line: 120 -      text  : 'SELECT * FROM (SELECT * FROM "customer") "T1" , (SELECT * FROM "user") "T2"',

 Line: 121 -      string: 'SELECT * FROM (SELECT * FROM "customer") "T1" , (SELECT * FROM "user") "T2"'

 Line: 124 -      text  : 'SELECT * FROM (SELECT * FROM "customer") "T1" , (SELECT * FROM "user") "T2"',

 Line: 125 -      string: 'SELECT * FROM (SELECT * FROM "customer") "T1" , (SELECT * FROM "user") "T2"'

 Line: 128 -      text  : 'SELECT * FROM (SELECT * FROM `customer`) `T1` , (SELECT * FROM `user`) `T2`',

 Line: 129 -      string: 'SELECT * FROM (SELECT * FROM `customer`) `T1` , (SELECT * FROM `user`) `T2`'

 Line: 132 -      text  : 'SELECT * FROM (SELECT * FROM [customer]) [T1] , (SELECT * FROM [user]) [T2]',

 Line: 133 -      string: 'SELECT * FROM (SELECT * FROM [customer]) [T1] , (SELECT * FROM [user]) [T2]'

 Line: 136 -      text  : 'SELECT * FROM (SELECT * FROM "customer") "T1" , (SELECT * FROM "user") "T2"',

 Line: 137 -      string: 'SELECT * FROM (SELECT * FROM "customer") "T1" , (SELECT * FROM "user") "T2"'

 Line: 143 -    query: customer.name.between(

 Line: 148 -      text  : '("customer"."name" BETWEEN (SELECT MIN("customer"."name") FROM "customer") AND (SELECT MAX("customer"."name") FROM "customer"))',

 Line: 149 -      string: '("customer"."name" BETWEEN (SELECT MIN("customer"."name") FROM "customer") AND (SELECT MAX("customer"."name") FROM "customer"))'

 Line: 152 -      text  : '("customer"."name" BETWEEN (SELECT MIN("customer"."name") FROM "customer") AND (SELECT MAX("customer"."name") FROM "customer"))',

 Line: 153 -      string: '("customer"."name" BETWEEN (SELECT MIN("customer"."name") FROM "customer") AND (SELECT MAX("customer"."name") FROM "customer"))'

 Line: 156 -      text  : '(`customer`.`name` BETWEEN (SELECT MIN(`customer`.`name`) FROM `customer`) AND (SELECT MAX(`customer`.`name`) FROM `customer`))',

 Line: 157 -      string: '(`customer`.`name` BETWEEN (SELECT MIN(`customer`.`name`) FROM `customer`) AND (SELECT MAX(`customer`.`name`) FROM `customer`))'

 Line: 160 -      text  : '([customer].[name] BETWEEN (SELECT MIN([customer].[name]) FROM [customer]) AND (SELECT MAX([customer].[name]) FROM [customer]))',

 Line: 161 -      string: '([customer].[name] BETWEEN (SELECT MIN([customer].[name]) FROM [customer]) AND (SELECT MAX([customer].[name]) FROM [customer]))'

 Line: 164 -      text  : '("customer"."name" BETWEEN (SELECT MIN("customer"."name") FROM "customer") AND (SELECT MAX("customer"."name") FROM "customer"))',

 Line: 165 -      string: '("customer"."name" BETWEEN (SELECT MIN("customer"."name") FROM "customer") AND (SELECT MAX("customer"."name") FROM "customer"))'

 Line: 171 -    query: user.subQuery().where(user.name.equals(customer.name)).exists(),

 Line: 173 -      text  : '(EXISTS (SELECT * FROM "user" WHERE ("user"."name" = "customer"."name")))',

 Line: 174 -      string: '(EXISTS (SELECT * FROM "user" WHERE ("user"."name" = "customer"."name")))'

 Line: 177 -      text  : '(EXISTS (SELECT * FROM "user" WHERE ("user"."name" = "customer"."name")))',

 Line: 178 -      string: '(EXISTS (SELECT * FROM "user" WHERE ("user"."name" = "customer"."name")))'

 Line: 181 -      text  : '(EXISTS (SELECT * FROM `user` WHERE (`user`.`name` = `customer`.`name`)))',

 Line: 182 -      string: '(EXISTS (SELECT * FROM `user` WHERE (`user`.`name` = `customer`.`name`)))'

 Line: 185 -      text  : '(EXISTS (SELECT * FROM [user] WHERE ([user].[name] = [customer].[name])))',

 Line: 186 -      string: '(EXISTS (SELECT * FROM [user] WHERE ([user].[name] = [customer].[name])))'

 Line: 189 -      text  : '(EXISTS (SELECT * FROM "user" WHERE ("user"."name" = "customer"."name")))',

 Line: 190 -      string: '(EXISTS (SELECT * FROM "user" WHERE ("user"."name" = "customer"."name")))'

 Line: 197 -    query: Sql.select(limitUsers.name, post.tags).from(limitUsers.leftJoin(post).on(post.userId.equals(limitUsers.id))),

 Line: 199 -      text  : 'SELECT "limit-users"."name", "post"."tags" FROM (SELECT "user"."id", "user"."name" FROM "user" ORDER BY "user"."name" LIMIT 10 OFFSET 10) "limit-users" LEFT JOIN "post" ON ("post"."userId" = "limit-users"."id")',

 Line: 200 -      string: 'SELECT "limit-users"."name", "post"."tags" FROM (SELECT "user"."id", "user"."name" FROM "user" ORDER BY "user"."name" LIMIT 10 OFFSET 10) "limit-users" LEFT JOIN "post" ON ("post"."userId" = "limit-users"."id")'

 Line: 203 -      text  : 'SELECT "limit-users"."name", "post"."tags" FROM (SELECT "user"."id", "user"."name" FROM "user" ORDER BY "user"."name" LIMIT 10 OFFSET 10) "limit-users" LEFT JOIN "post" ON ("post"."userId" = "limit-users"."id")',

 Line: 204 -      string: 'SELECT "limit-users"."name", "post"."tags" FROM (SELECT "user"."id", "user"."name" FROM "user" ORDER BY "user"."name" LIMIT 10 OFFSET 10) "limit-users" LEFT JOIN "post" ON ("post"."userId" = "limit-users"."id")'

 Line: 207 -      text  : 'SELECT `limit-users`.`name`, `post`.`tags` FROM (SELECT `user`.`id`, `user`.`name` FROM `user` ORDER BY `user`.`name` LIMIT 10 OFFSET 10) `limit-users` LEFT JOIN `post` ON (`post`.`userId` = `limit-users`.`id`)',

 Line: 208 -      string: 'SELECT `limit-users`.`name`, `post`.`tags` FROM (SELECT `user`.`id`, `user`.`name` FROM `user` ORDER BY `user`.`name` LIMIT 10 OFFSET 10) `limit-users` LEFT JOIN `post` ON (`post`.`userId` = `limit-users`.`id`)'

 Line: 211 -      text  : 'SELECT [limit-users].[name], [post].[tags] FROM (SELECT [user].[id], [user].[name] FROM [user] ORDER BY [user].[name] OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY) [limit-users] LEFT JOIN [post] ON ([post].[userId] = [limit-users].[id])',

 Line: 212 -      string: 'SELECT [limit-users].[name], [post].[tags] FROM (SELECT [user].[id], [user].[name] FROM [user] ORDER BY [user].[name] OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY) [limit-users] LEFT JOIN [post] ON ([post].[userId] = [limit-users].[id])'

 Line: 215 -      text  : 'SELECT "limit-users"."name", "post"."tags" FROM (SELECT "user"."id", "user"."name" FROM "user" ORDER BY "user"."name" OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY) "limit-users" LEFT JOIN "post" ON ("post"."userId" = "limit-users"."id")',

 Line: 216 -      string: 'SELECT "limit-users"."name", "post"."tags" FROM (SELECT "user"."id", "user"."name" FROM "user" ORDER BY "user"."name" OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY) "limit-users" LEFT JOIN "post" ON ("post"."userId" = "limit-users"."id")'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/ilike-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: post.select(post.content, post.userId).where(post.content.ilike('A%')),

 Line: 10 -      text  : 'SELECT "post"."content", "post"."userId" FROM "post" WHERE ("post"."content" ILIKE $1)',

 Line: 11 -      string: 'SELECT "post"."content", "post"."userId" FROM "post" WHERE ("post"."content" ILIKE \'A%\')'

 Line: 17 -    query: post.insert(post.content, post.userId)

 Line: 20 -      text  : 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" ILIKE $1)',

 Line: 21 -      string: 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" ILIKE \'A%\')'

 Line: 27 -    query: post.insert([post.content, post.userId])

 Line: 30 -      text  : 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" ILIKE $1)',

 Line: 31 -      string: 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" ILIKE \'A%\')'

 Line: 37 -    query: post.insert(post.userId)

 Line: 40 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" ILIKE $1)',

 Line: 41 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" ILIKE \'A%\')'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/indexes-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: post.indexes(),

 Line: 8 -      text  : 'SELECT relname FROM pg_class WHERE oid IN ( SELECT indexrelid FROM pg_index, pg_class WHERE pg_class.relname=\'post\' AND pg_class.relnamespace IN (SELECT pg_namespace.oid FROM pg_namespace WHERE nspname = \'public\') AND pg_class.oid=pg_index.indrelid)',

 Line: 9 -      string: 'SELECT relname FROM pg_class WHERE oid IN ( SELECT indexrelid FROM pg_index, pg_class WHERE pg_class.relname=\'post\' AND pg_class.relnamespace IN (SELECT pg_namespace.oid FROM pg_namespace WHERE nspname = \'public\') AND pg_class.oid=pg_index.indrelid)'

 Line: 12 -      text  : 'SHOW INDEX FROM `post`',

 Line: 13 -      string: 'SHOW INDEX FROM `post`'

 Line: 20 -      text  : 'SELECT * FROM USER_INDEXES WHERE TABLE_NAME = \'post\'',

 Line: 21 -      string: 'SELECT * FROM USER_INDEXES WHERE TABLE_NAME = \'post\''

 Line: 27 -    query: post.indexes().create('index_name').unique().using('btree').on(post.id, post.userId).withParser('foo'),

 Line: 48 -    query: post.indexes().create().fulltext().on(post.id),

 Line: 65 -    query: post.indexes().create().spatial().on(post.id),

 Line: 82 -    query: post.indexes().create().on(post.userId, post.id),

 Line: 103 -    query: post.indexes().create().on(post.userId).on(post.id),

 Line: 124 -    query: post.indexes().create().on(post.userId, post.id.desc),

 Line: 149 -    query: post.indexes().create().on(post.userId).on(post.id.descending),

 Line: 175 -    query: post.indexes().create(),

 Line: 195 -    query: post.indexes().drop('index_name'),

 Line: 216 -    query: post.indexes().drop(post.userId, post.id),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/insert-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -    query: post.insert(post.content.value('test'), post.userId.value(1)),

 Line: 16 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2)',

 Line: 17 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 1)'

 Line: 20 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2)',

 Line: 21 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 1)'

 Line: 24 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (?, ?)',

 Line: 25 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (\'test\', 1)'

 Line: 28 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (:1, :2)',

 Line: 29 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 1)'

 Line: 35 -    query: post.insert(post.content.value('whoah')),

 Line: 37 -      text  : 'INSERT INTO "post" ("content") VALUES ($1)',

 Line: 38 -      string: 'INSERT INTO "post" ("content") VALUES (\'whoah\')'

 Line: 41 -      text  : 'INSERT INTO "post" ("content") VALUES ($1)',

 Line: 42 -      string: 'INSERT INTO "post" ("content") VALUES (\'whoah\')'

 Line: 45 -      text  : 'INSERT INTO `post` (`content`) VALUES (?)',

 Line: 46 -      string: 'INSERT INTO `post` (`content`) VALUES (\'whoah\')'

 Line: 49 -      text  : 'INSERT INTO [post] ([content]) VALUES (@1)',

 Line: 50 -      string: 'INSERT INTO [post] ([content]) VALUES (\'whoah\')'

 Line: 53 -      text  : 'INSERT INTO "post" ("content") VALUES (:1)',

 Line: 54 -      string: 'INSERT INTO "post" ("content") VALUES (\'whoah\')'

 Line: 60 -    query: post.insert({length: 0}),

 Line: 62 -      text  : 'INSERT INTO "post" ("length") VALUES ($1)',

 Line: 63 -      string: 'INSERT INTO "post" ("length") VALUES (0)'

 Line: 66 -      text  : 'INSERT INTO "post" ("length") VALUES ($1)',

 Line: 67 -      string: 'INSERT INTO "post" ("length") VALUES (0)'

 Line: 70 -      text  : 'INSERT INTO `post` (`length`) VALUES (?)',

 Line: 71 -      string: 'INSERT INTO `post` (`length`) VALUES (0)'

 Line: 74 -      text  : 'INSERT INTO [post] ([length]) VALUES (@1)',

 Line: 75 -      string: 'INSERT INTO [post] ([length]) VALUES (0)'

 Line: 78 -      text  : 'INSERT INTO "post" ("length") VALUES (:1)',

 Line: 79 -      string: 'INSERT INTO "post" ("length") VALUES (0)'

 Line: 85 -    query: post.insert({

 Line: 90 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2)',

 Line: 91 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2)'

 Line: 94 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2)',

 Line: 95 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2)'

 Line: 98 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (?, ?)',

 Line: 99 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (\'test\', 2)'

 Line: 102 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (:1, :2)',

 Line: 103 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2)'

 Line: 109 -    query: post.insert({

 Line: 114 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (LOWER($1), $2)',

 Line: 115 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (LOWER(\'TEST\'), 2)'

 Line: 118 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (LOWER($1), $2)',

 Line: 119 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (LOWER(\'TEST\'), 2)'

 Line: 122 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (LOWER(?), ?)',

 Line: 123 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (LOWER(\'TEST\'), 2)'

 Line: 126 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (LOWER(:1), :2)',

 Line: 127 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (LOWER(\'TEST\'), 2)'

 Line: 134 -    query: post.insert([{

 Line: 141 -      text  : 'INSERT INTO "post" ("content") VALUES ($1), ($2)',

 Line: 142 -      string: 'INSERT INTO "post" ("content") VALUES (\'whoah\'), (\'hey\')'

 Line: 145 -      text  : 'INSERT INTO "post" ("content") VALUES ($1), ($2)',

 Line: 146 -      string: 'INSERT INTO "post" ("content") VALUES (\'whoah\'), (\'hey\')'

 Line: 149 -      text  : 'INSERT INTO `post` (`content`) VALUES (?), (?)',

 Line: 150 -      string: 'INSERT INTO `post` (`content`) VALUES (\'whoah\'), (\'hey\')'

 Line: 153 -      text  : 'INSERT INTO "post" ("content") VALUES (:1), (:2)',

 Line: 154 -      string: 'INSERT INTO "post" ("content") VALUES (\'whoah\'), (\'hey\')'

 Line: 160 -    query: post.insert([{

 Line: 169 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2), ($3, $4)',

 Line: 170 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 173 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2), ($3, $4)',

 Line: 174 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 177 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (?, ?), (?, ?)',

 Line: 178 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 181 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (:1, :2), (:3, :4)',

 Line: 182 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 189 -    query: post.insert([{

 Line: 198 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2), ($3, $4)',

 Line: 199 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 202 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2), ($3, $4)',

 Line: 203 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 206 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (?, ?), (?, ?)',

 Line: 207 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 210 -      text  : 'INSERT INTO [post] ([content], [userId]) VALUES (@1, @2), (@3, @4)',

 Line: 211 -      string: 'INSERT INTO [post] ([content], [userId]) VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 214 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (:1, :2), (:3, :4)',

 Line: 215 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'whoah\', 1), (\'hey\', 2)'

 Line: 221 -    query: post.insert({}),

 Line: 223 -      text  : 'INSERT INTO "post" DEFAULT VALUES',

 Line: 224 -      string: 'INSERT INTO "post" DEFAULT VALUES'

 Line: 227 -      text  : 'INSERT INTO "post" DEFAULT VALUES',

 Line: 228 -      string: 'INSERT INTO "post" DEFAULT VALUES'

 Line: 231 -      text  : 'INSERT INTO `post` () VALUES ()',

 Line: 232 -      string: 'INSERT INTO `post` () VALUES ()'

 Line: 235 -      text  : 'INSERT INTO [post] DEFAULT VALUES',

 Line: 236 -      string: 'INSERT INTO [post] DEFAULT VALUES'

 Line: 239 -      text  : 'INSERT INTO "post" DEFAULT VALUES',

 Line: 240 -      string: 'INSERT INTO "post" DEFAULT VALUES'

 Line: 246 -    query: post.insert({}).returning('*'),

 Line: 248 -      text  : 'INSERT INTO "post" DEFAULT VALUES RETURNING *',

 Line: 249 -      string: 'INSERT INTO "post" DEFAULT VALUES RETURNING *'

 Line: 267 -    query: post.insert({}).returning(post.star()),

 Line: 269 -      text  : 'INSERT INTO "post" DEFAULT VALUES RETURNING *',

 Line: 270 -      string: 'INSERT INTO "post" DEFAULT VALUES RETURNING *'

 Line: 288 -    query: post.insert({}).returning(post.id),

 Line: 290 -      text  : 'INSERT INTO "post" DEFAULT VALUES RETURNING "id"',

 Line: 291 -      string: 'INSERT INTO "post" DEFAULT VALUES RETURNING "id"'

 Line: 309 -    query: post.insert({}).returning(post.id, post.content),

 Line: 311 -      text  : 'INSERT INTO "post" DEFAULT VALUES RETURNING "id", "content"',

 Line: 312 -      string: 'INSERT INTO "post" DEFAULT VALUES RETURNING "id", "content"'

 Line: 330 -    query: post.insert({}).returning([post.id, post.content]),

 Line: 332 -      text  : 'INSERT INTO "post" DEFAULT VALUES RETURNING "id", "content"',

 Line: 333 -      string: 'INSERT INTO "post" DEFAULT VALUES RETURNING "id", "content"'

 Line: 352 -    query: post.insert([{

 Line: 360 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2), ($3, DEFAULT)',

 Line: 361 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'whoah\', 1), (\'hey\', DEFAULT)',

 Line: 369 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (?, ?), (?, DEFAULT)',

 Line: 370 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (\'whoah\', 1), (\'hey\', DEFAULT)',

 Line: 374 -      text  : 'INSERT INTO [post] ([content], [userId]) VALUES (@1, @2), (@3, DEFAULT)',

 Line: 375 -      string: 'INSERT INTO [post] ([content], [userId]) VALUES (\'whoah\', 1), (\'hey\', DEFAULT)',

 Line: 379 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (:1, :2), (:3, DEFAULT)',

 Line: 380 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'whoah\', 1), (\'hey\', DEFAULT)',

 Line: 386 -    query: post.insert([{

 Line: 394 -      text  : 'INSERT INTO "post" ("userId", "content") VALUES ($1, DEFAULT), ($2, $3)',

 Line: 395 -      string: 'INSERT INTO "post" ("userId", "content") VALUES (1, DEFAULT), (2, \'hey\')',

 Line: 403 -      text  : 'INSERT INTO `post` (`userId`, `content`) VALUES (?, DEFAULT), (?, ?)',

 Line: 404 -      string: 'INSERT INTO `post` (`userId`, `content`) VALUES (1, DEFAULT), (2, \'hey\')',

 Line: 408 -      text  : 'INSERT INTO [post] ([userId], [content]) VALUES (@1, DEFAULT), (@2, @3)',

 Line: 409 -      string: 'INSERT INTO [post] ([userId], [content]) VALUES (1, DEFAULT), (2, \'hey\')',

 Line: 413 -      text  : 'INSERT INTO "post" ("userId", "content") VALUES (:1, DEFAULT), (:2, :3)',

 Line: 414 -      string: 'INSERT INTO "post" ("userId", "content") VALUES (1, DEFAULT), (2, \'hey\')',

 Line: 420 -    query: post.insert(post.content, post.userId)

 Line: 423 -      text  : 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 424 -      string: 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 427 -      text  : 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 428 -      string: 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 431 -      text  : 'INSERT INTO `post` (`content`, `userId`) SELECT \'test\', `user`.`id` FROM `user` WHERE (`user`.`name` LIKE ?)',

 Line: 432 -      string: 'INSERT INTO `post` (`content`, `userId`) SELECT \'test\', `user`.`id` FROM `user` WHERE (`user`.`name` LIKE \'A%\')'

 Line: 435 -      text  : 'INSERT INTO [post] ([content], [userId]) SELECT \'test\', [user].[id] FROM [user] WHERE ([user].[name] LIKE @1)',

 Line: 436 -      string: 'INSERT INTO [post] ([content], [userId]) SELECT \'test\', [user].[id] FROM [user] WHERE ([user].[name] LIKE \'A%\')'

 Line: 439 -      text  : 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE :1)',

 Line: 440 -      string: 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 446 -    query: post.insert([post.content, post.userId])

 Line: 449 -      text  : 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 450 -      string: 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 453 -      text  : 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 454 -      string: 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 457 -      text  : 'INSERT INTO `post` (`content`, `userId`) SELECT \'test\', `user`.`id` FROM `user` WHERE (`user`.`name` LIKE ?)',

 Line: 458 -      string: 'INSERT INTO `post` (`content`, `userId`) SELECT \'test\', `user`.`id` FROM `user` WHERE (`user`.`name` LIKE \'A%\')'

 Line: 461 -      text  : 'INSERT INTO [post] ([content], [userId]) SELECT \'test\', [user].[id] FROM [user] WHERE ([user].[name] LIKE @1)',

 Line: 462 -      string: 'INSERT INTO [post] ([content], [userId]) SELECT \'test\', [user].[id] FROM [user] WHERE ([user].[name] LIKE \'A%\')'

 Line: 465 -      text  : 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE :1)',

 Line: 466 -      string: 'INSERT INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 472 -    query: post.insert(post.userId)

 Line: 475 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 476 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 479 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 480 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 483 -      text  : 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user` WHERE (`user`.`name` LIKE ?)',

 Line: 484 -      string: 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user` WHERE (`user`.`name` LIKE \'A%\')'

 Line: 487 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" LIKE :1)',

 Line: 488 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 494 -    query: post.insert(post.userId)

 Line: 497 -      text  : 'INSERT INTO "post" ("userId") SELECT "post"."userId" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("post"."tags" LIKE $1)',

 Line: 498 -      string: 'INSERT INTO "post" ("userId") SELECT "post"."userId" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("post"."tags" LIKE \'A%\')'

 Line: 501 -      text  : 'INSERT INTO "post" ("userId") SELECT "post"."userId" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("post"."tags" LIKE $1)',

 Line: 502 -      string: 'INSERT INTO "post" ("userId") SELECT "post"."userId" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("post"."tags" LIKE \'A%\')'

 Line: 505 -      text  : 'INSERT INTO `post` (`userId`) SELECT `post`.`userId` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`) WHERE (`post`.`tags` LIKE ?)',

 Line: 506 -      string: 'INSERT INTO `post` (`userId`) SELECT `post`.`userId` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`) WHERE (`post`.`tags` LIKE \'A%\')'

 Line: 509 -      text  : 'INSERT INTO [post] ([userId]) SELECT [post].[userId] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId]) WHERE ([post].[tags] LIKE @1)',

 Line: 510 -      string: 'INSERT INTO [post] ([userId]) SELECT [post].[userId] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId]) WHERE ([post].[tags] LIKE \'A%\')'

 Line: 513 -      text  : 'INSERT INTO "post" ("userId") SELECT "post"."userId" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("post"."tags" LIKE :1)',

 Line: 514 -      string: 'INSERT INTO "post" ("userId") SELECT "post"."userId" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("post"."tags" LIKE \'A%\')'

 Line: 520 -    query: post.insert(post.userId).select(user.id).distinct().from(user),

 Line: 522 -      text  : 'INSERT INTO "post" ("userId") SELECT DISTINCT "user"."id" FROM "user"',

 Line: 523 -      string: 'INSERT INTO "post" ("userId") SELECT DISTINCT "user"."id" FROM "user"'

 Line: 526 -      text  : 'INSERT INTO "post" ("userId") SELECT DISTINCT "user"."id" FROM "user"',

 Line: 527 -      string: 'INSERT INTO "post" ("userId") SELECT DISTINCT "user"."id" FROM "user"'

 Line: 530 -      text  : 'INSERT INTO `post` (`userId`) SELECT DISTINCT `user`.`id` FROM `user`',

 Line: 531 -      string: 'INSERT INTO `post` (`userId`) SELECT DISTINCT `user`.`id` FROM `user`'

 Line: 534 -      text  : 'INSERT INTO [post] ([userId]) SELECT DISTINCT [user].[id] FROM [user]',

 Line: 535 -      string: 'INSERT INTO [post] ([userId]) SELECT DISTINCT [user].[id] FROM [user]'

 Line: 538 -      text  : 'INSERT INTO "post" ("userId") SELECT DISTINCT "user"."id" FROM "user"',

 Line: 539 -      string: 'INSERT INTO "post" ("userId") SELECT DISTINCT "user"."id" FROM "user"'

 Line: 546 -    query: post.insert(post.content.value(new Buffer('test')), post.userId.value(2)),

 Line: 548 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2)',

 Line: 549 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'\\x74657374\', 2)'

 Line: 552 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2)',

 Line: 553 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (x\'74657374\', 2)'

 Line: 556 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (?, ?)',

 Line: 557 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (x\'74657374\', 2)'

 Line: 560 -      text  : 'INSERT INTO [post] ([content], [userId]) VALUES (@1, @2)',

 Line: 561 -      string: 'INSERT INTO [post] ([content], [userId]) VALUES (\'\\x74657374\', 2)'

 Line: 564 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (:1, :2)',

 Line: 565 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (utl_raw.cast_to_varchar2(hextoraw(\'74657374\')), 2)'

 Line: 571 -    query: post.insert({

 Line: 576 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2)',

 Line: 577 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'\\x74657374\', 2)'

 Line: 580 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2)',

 Line: 581 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (x\'74657374\', 2)'

 Line: 584 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (?, ?)',

 Line: 585 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (x\'74657374\', 2)'

 Line: 588 -      text  : 'INSERT INTO [post] ([content], [userId]) VALUES (@1, @2)',

 Line: 589 -      string: 'INSERT INTO [post] ([content], [userId]) VALUES (\'\\x74657374\', 2)'

 Line: 592 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES (:1, :2)',

 Line: 593 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (utl_raw.cast_to_varchar2(hextoraw(\'74657374\')), 2)'

 Line: 599 -    query: post.insert([{

 Line: 606 -      text  : 'INSERT INTO "post" ("content") VALUES ($1), ($2)',

 Line: 607 -      string: 'INSERT INTO "post" ("content") ' +

 Line: 611 -      text  : 'INSERT INTO "post" ("content") VALUES ($1), ($2)',

 Line: 612 -      string: 'INSERT INTO "post" ("content") VALUES (x\'77686f6168\'), (x\'686579\')'

 Line: 615 -      text  : 'INSERT INTO `post` (`content`) VALUES (?), (?)',

 Line: 616 -      string: 'INSERT INTO `post` (`content`) VALUES (x\'77686f6168\'), (x\'686579\')'

 Line: 619 -      text  : 'INSERT INTO [post] ([content]) VALUES (@1), (@2)',

 Line: 620 -      string: 'INSERT INTO [post] ([content]) VALUES (\'\\x77686f6168\'), (\'\\x686579\')'

 Line: 623 -      text  : 'INSERT INTO "post" ("content") VALUES (:1), (:2)',

 Line: 624 -      string: 'INSERT INTO "post" ("content") VALUES (utl_raw.cast_to_varchar2(hextoraw(\'77686f6168\'))), (utl_raw.cast_to_varchar2(hextoraw(\'686579\')))'

 Line: 630 -    query: post.insert({

 Line: 643 -      text  : 'INSERT INTO `post` (`content`, `userId`) VALUES (?, ?) ON DUPLICATE KEY UPDATE `post`.`content` = ?',

 Line: 644 -      string: 'INSERT INTO `post` (`content`, `userId`) VALUES (\'test\', 2) ON DUPLICATE KEY UPDATE `post`.`content` = \'testupdate\''

 Line: 656 -    query: customerAliasTable.insert({

 Line: 670 -      text  : 'INSERT INTO "customer" ("id", "name") VALUES ($1, $2) ON CONFLICT ("id") DO UPDATE SET "name" = EXCLUDED."name"',

 Line: 671 -      string: 'INSERT INTO "customer" ("id", "name") VALUES (2, \'test\') ON CONFLICT ("id") DO UPDATE SET "name" = EXCLUDED."name"'

 Line: 683 -    query: customerAliasTable.insert({

 Line: 691 -      text  : 'INSERT OR IGNORE INTO "customer" ("id", "name") VALUES ($1, $2)',

 Line: 692 -      string: 'INSERT OR IGNORE INTO "customer" ("id", "name") VALUES (2, \'test\')'

 Line: 707 -    query: post.insert({

 Line: 721 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2) ON CONFLICT ("userId") DO UPDATE SET "content" = EXCLUDED."content"',

 Line: 722 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2) ON CONFLICT ("userId") DO UPDATE SET "content" = EXCLUDED."content"'

 Line: 734 -    query: post.insert({

 Line: 748 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2) ON CONFLICT ("userId", "content") DO UPDATE SET "content" = EXCLUDED."content", "userId" = EXCLUDED."userId"',

 Line: 749 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2) ON CONFLICT ("userId", "content") DO UPDATE SET "content" = EXCLUDED."content", "userId" = EXCLUDED."userId"'

 Line: 761 -    query: post.insert({

 Line: 775 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2) ON CONFLICT ("userId") DO UPDATE SET "content" = EXCLUDED."content" WHERE ("post"."userId" = $3)',

 Line: 776 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2) ON CONFLICT ("userId") DO UPDATE SET "content" = EXCLUDED."content" WHERE ("post"."userId" = 2)'

 Line: 788 -    query: post.insert({

 Line: 802 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2) ON CONFLICT ON CONSTRAINT "conc_userId" DO UPDATE SET "content" = EXCLUDED."content" WHERE ("post"."userId" = $3)',

 Line: 803 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2) ON CONFLICT ON CONSTRAINT "conc_userId" DO UPDATE SET "content" = EXCLUDED."content" WHERE ("post"."userId" = 2)'

 Line: 815 -    query: post.insert({

 Line: 828 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2) ON CONFLICT ("userId") DO NOTHING',

 Line: 829 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2) ON CONFLICT ("userId") DO NOTHING'

 Line: 841 -    query: post.insert({

 Line: 854 -      text  : 'INSERT INTO "post" ("content", "userId") VALUES ($1, $2) ON CONFLICT ON CONSTRAINT "conc_userId" DO NOTHING',

 Line: 855 -      string: 'INSERT INTO "post" ("content", "userId") VALUES (\'test\', 2) ON CONFLICT ON CONSTRAINT "conc_userId" DO NOTHING'

 Line: 867 -    query: contentTable.insert({

 Line: 880 -      text  : 'INSERT INTO "content" ("content_id", "text") VALUES ($1, $2) ON CONFLICT ("content_id") DO NOTHING',

 Line: 881 -      string: 'INSERT INTO "content" ("content_id", "text") VALUES (20, \'something\') ON CONFLICT ("content_id") DO NOTHING'

 Line: 893 -    query: contentTable.insert({

 Line: 908 -      text  : 'INSERT INTO "content" ("content_id", "text", "content_posts") VALUES ($1, $2, $3) ON CONFLICT ("content_id") DO UPDATE SET "content_posts" = EXCLUDED."content_posts"',

 Line: 909 -      string: 'INSERT INTO "content" ("content_id", "text", "content_posts") VALUES (20, \'something\', \'another thing\') ON CONFLICT ("content_id") DO UPDATE SET "content_posts" = EXCLUDED."content_posts"'

 Line: 921 -    query: post.insert([]),

 Line: 924 -      text  : 'SELECT `post`.* FROM `post` WHERE (1=2)',

 Line: 925 -      string: 'SELECT `post`.* FROM `post` WHERE (1=2)'

 Line: 931 -    query: arrayTable.insert(arrayTable.id.value(1), arrayTable.numbers.value([2, 3, 4])),

 Line: 933 -      text  : 'INSERT INTO "arraytest" ("id", "numbers") VALUES ($1, $2)',

 Line: 934 -      string: 'INSERT INTO "arraytest" ("id", "numbers") VALUES (1, \'{2,3,4}\')'

 Line: 937 -      text  : 'INSERT INTO "arraytest" ("id", "numbers") VALUES ($1, $2)',

 Line: 938 -      string: 'INSERT INTO "arraytest" ("id", "numbers") VALUES (1, \'[2,3,4]\')'

 Line: 941 -      text  : 'INSERT INTO `arraytest` (`id`, `numbers`) VALUES (?, ?)',

 Line: 942 -      string: 'INSERT INTO `arraytest` (`id`, `numbers`) VALUES (1, (2, 3, 4))'

 Line: 945 -      text  : 'INSERT INTO "arraytest" ("id", "numbers") VALUES (:1, :2)',

 Line: 946 -      string: 'INSERT INTO "arraytest" ("id", "numbers") VALUES (1, (2, 3, 4))'

 Line: 951 -    query: arrayTable.insert(arrayTable.id.value(1), arrayTable.numbers.value(["one", "two", "three"])),

 Line: 953 -      text  : 'INSERT INTO "arraytest" ("id", "numbers") VALUES ($1, $2)',

 Line: 954 -      string: 'INSERT INTO "arraytest" ("id", "numbers") VALUES (1, \'{"one","two","three"}\')'

 Line: 957 -      text  : 'INSERT INTO "arraytest" ("id", "numbers") VALUES ($1, $2)',

 Line: 958 -      string: 'INSERT INTO "arraytest" ("id", "numbers") VALUES (1, \'["one","two","three"]\')'

 Line: 961 -      text  : 'INSERT INTO `arraytest` (`id`, `numbers`) VALUES (?, ?)',

 Line: 962 -      string: 'INSERT INTO `arraytest` (`id`, `numbers`) VALUES (1, (\'one\', \'two\', \'three\'))'

 Line: 965 -      text  : 'INSERT INTO "arraytest" ("id", "numbers") VALUES (:1, :2)',

 Line: 966 -      string: 'INSERT INTO "arraytest" ("id", "numbers") VALUES (1, (\'one\', \'two\', \'three\'))'

 Line: 971 -    query: post.insert(post.userId).select(user.id).from(user),

 Line: 973 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 974 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 977 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 978 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 981 -      text  : 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user`',

 Line: 982 -      string: 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user`'

 Line: 985 -      text  : 'INSERT INTO [post] ([userId]) SELECT [user].[id] FROM [user]',

 Line: 986 -      string: 'INSERT INTO [post] ([userId]) SELECT [user].[id] FROM [user]'

 Line: 989 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 990 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 996 -    query: post.insert(post.userId).select(user.id).from(user).onConflict({

 Line: 1001 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" ON CONFLICT ("userId") DO UPDATE SET "content" = EXCLUDED."content"',

 Line: 1002 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" ON CONFLICT ("userId") DO UPDATE SET "content" = EXCLUDED."content"'

 Line: 1020 -    query: post.insert(post.userId).add(user.select(user.id)),

 Line: 1022 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 1023 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 1026 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 1027 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 1030 -      text  : 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user`',

 Line: 1031 -      string: 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user`'

 Line: 1034 -      text  : 'INSERT INTO [post] ([userId]) SELECT [user].[id] FROM [user]',

 Line: 1035 -      string: 'INSERT INTO [post] ([userId]) SELECT [user].[id] FROM [user]'

 Line: 1038 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 1039 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 1045 -    query: post.insert(post.userId).add(user.select(user.id).from(user)),

 Line: 1047 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 1048 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 1051 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 1052 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 1055 -      text  : 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user`',

 Line: 1056 -      string: 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user`'

 Line: 1059 -      text  : 'INSERT INTO [post] ([userId]) SELECT [user].[id] FROM [user]',

 Line: 1060 -      string: 'INSERT INTO [post] ([userId]) SELECT [user].[id] FROM [user]'

 Line: 1063 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 1064 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 1070 -    query: post.insert(post.userId).add(user.select(user.id).order(user.id)),

 Line: 1072 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" ORDER BY "user"."id"',

 Line: 1073 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" ORDER BY "user"."id"'

 Line: 1076 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" ORDER BY "user"."id"',

 Line: 1077 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" ORDER BY "user"."id"'

 Line: 1080 -      text  : 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user` ORDER BY `user`.`id`',

 Line: 1081 -      string: 'INSERT INTO `post` (`userId`) SELECT `user`.`id` FROM `user` ORDER BY `user`.`id`'

 Line: 1084 -      text  : 'INSERT INTO [post] ([userId]) SELECT [user].[id] FROM [user] ORDER BY [user].[id]',

 Line: 1085 -      string: 'INSERT INTO [post] ([userId]) SELECT [user].[id] FROM [user] ORDER BY [user].[id]'

 Line: 1088 -      text  : 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" ORDER BY "user"."id"',

 Line: 1089 -      string: 'INSERT INTO "post" ("userId") SELECT "user"."id" FROM "user" ORDER BY "user"."id"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/create-view-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: user.select(user.star()).createView('allUsersView'),

 Line: 9 -      text  : '(CREATE VIEW "allUsersView" AS SELECT "user".* FROM "user")',

 Line: 10 -      string: '(CREATE VIEW "allUsersView" AS SELECT "user".* FROM "user")'

 Line: 13 -      text  : '(CREATE VIEW "allUsersView" AS SELECT "user".* FROM "user")',

 Line: 14 -      string: '(CREATE VIEW "allUsersView" AS SELECT "user".* FROM "user")'

 Line: 17 -      text  : '(CREATE VIEW `allUsersView` AS SELECT `user`.* FROM `user`)',

 Line: 18 -      string: '(CREATE VIEW `allUsersView` AS SELECT `user`.* FROM `user`)'

 Line: 21 -      text  : '(CREATE VIEW [allUsersView] AS SELECT [user].* FROM [user])',

 Line: 22 -      string: '(CREATE VIEW [allUsersView] AS SELECT [user].* FROM [user])'

 Line: 25 -      text  : '(CREATE VIEW "allUsersView" AS SELECT "user".* FROM "user")',

 Line: 26 -      string: '(CREATE VIEW "allUsersView" AS SELECT "user".* FROM "user")'

 Line: 32 -    query: user.select(user.star()).where(user.id.equals(1)).createView('oneUserView'),

 Line: 34 -      text  : '(CREATE VIEW "oneUserView" AS SELECT "user".* FROM "user" WHERE ("user"."id" = 1))',

 Line: 35 -      string: '(CREATE VIEW "oneUserView" AS SELECT "user".* FROM "user" WHERE ("user"."id" = 1))'

 Line: 38 -      text  : '(CREATE VIEW "oneUserView" AS SELECT "user".* FROM "user" WHERE ("user"."id" = 1))',

 Line: 39 -      string: '(CREATE VIEW "oneUserView" AS SELECT "user".* FROM "user" WHERE ("user"."id" = 1))'

 Line: 42 -      text  : '(CREATE VIEW `oneUserView` AS SELECT `user`.* FROM `user` WHERE (`user`.`id` = 1))',

 Line: 43 -      string: '(CREATE VIEW `oneUserView` AS SELECT `user`.* FROM `user` WHERE (`user`.`id` = 1))'

 Line: 46 -      text  : '(CREATE VIEW [oneUserView] AS SELECT [user].* FROM [user] WHERE ([user].[id] = 1))',

 Line: 47 -      string: '(CREATE VIEW [oneUserView] AS SELECT [user].* FROM [user] WHERE ([user].[id] = 1))'

 Line: 50 -      text  : '(CREATE VIEW "oneUserView" AS SELECT "user".* FROM "user" WHERE ("user"."id" = 1))',

 Line: 51 -      string: '(CREATE VIEW "oneUserView" AS SELECT "user".* FROM "user" WHERE ("user"."id" = 1))'

 Line: 55 -  //Tests error raised for non-SELECT create view attempts

 Line: 57 -    query: user.delete().where(user.id.equals(1)).createView('oneUserView'),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/alter-table-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: post.alter().dropColumn(post.content),

 Line: 32 -    query: post.alter().dropColumn(post.content).dropColumn(post.userId),

 Line: 57 -    query: post.alter().dropColumn('content').dropColumn('userId'),

 Line: 82 -    query: post.alter().rename('posts'),

 Line: 115 -    query: group.alter().addColumn(group.id),

 Line: 140 -    query: group.alter().addColumn(group.id).addColumn(group.userId),

 Line: 165 -    query: group.alter().addColumn('id', 'varchar(100)').addColumn('userId', 'varchar(100)'),

 Line: 190 -    query: group.alter().renameColumn('userId', 'newUserId'),

 Line: 211 -    query: group.alter().renameColumn(group.userId, 'newUserId'),

 Line: 232 -    query: group.alter().renameColumn('userId', group.id),

 Line: 262 -    query: UserWithSignature.alter().renameColumn(UserWithSignature.get('Signature'), 'sig'),

 Line: 298 -    query: post.alter().addColumn(post.userId),

 Line: 319 -    query: post.alter().addColumn(post.picture),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/cast-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: customer.select(customer.age.cast('int')),

 Line: 10 -      text  : 'SELECT CAST("customer"."age" AS int) FROM "customer"',

 Line: 11 -      string: 'SELECT CAST("customer"."age" AS int) FROM "customer"'

 Line: 14 -      text  : 'SELECT CAST("customer"."age" AS int) FROM "customer"',

 Line: 15 -      string: 'SELECT CAST("customer"."age" AS int) FROM "customer"'

 Line: 18 -      text  : 'SELECT CAST(`customer`.`age` AS int) FROM `customer`',

 Line: 19 -      string: 'SELECT CAST(`customer`.`age` AS int) FROM `customer`'

 Line: 22 -      text  : 'SELECT CAST([customer].[age] AS int) FROM [customer]',

 Line: 23 -      string: 'SELECT CAST([customer].[age] AS int) FROM [customer]'

 Line: 26 -      text  : 'SELECT CAST("customer"."age" AS int) FROM "customer"',

 Line: 27 -      string: 'SELECT CAST("customer"."age" AS int) FROM "customer"'

 Line: 33 -    query: customer.select(customer.name.cast('varchar(10)')),

 Line: 35 -      text  : 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"',

 Line: 36 -      string: 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"'

 Line: 39 -      text  : 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"',

 Line: 40 -      string: 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"'

 Line: 43 -      text  : 'SELECT CAST(`customer`.`name` AS varchar(10)) FROM `customer`',

 Line: 44 -      string: 'SELECT CAST(`customer`.`name` AS varchar(10)) FROM `customer`'

 Line: 47 -      text  : 'SELECT CAST([customer].[name] AS varchar(10)) FROM [customer]',

 Line: 48 -      string: 'SELECT CAST([customer].[name] AS varchar(10)) FROM [customer]'

 Line: 51 -      text  : 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"',

 Line: 52 -      string: 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"'

 Line: 59 -    query: customer.select(customer.name.plus(customer.age).cast('varchar(15)')),

 Line: 61 -      text  : 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"',

 Line: 62 -      string: 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"'

 Line: 65 -      text  : 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"',

 Line: 66 -      string: 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"'

 Line: 69 -      text  : 'SELECT CAST((`customer`.`name` + `customer`.`age`) AS varchar(15)) FROM `customer`',

 Line: 70 -      string: 'SELECT CAST((`customer`.`name` + `customer`.`age`) AS varchar(15)) FROM `customer`'

 Line: 73 -      text  : 'SELECT CAST(([customer].[name] + [customer].[age]) AS varchar(15)) FROM [customer]',

 Line: 74 -      string: 'SELECT CAST(([customer].[name] + [customer].[age]) AS varchar(15)) FROM [customer]'

 Line: 77 -      text  : 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"',

 Line: 78 -      string: 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"'

 Line: 85 -    query: customer.select(customer.name.cast('varchar(15)').cast('varchar(10)')),

 Line: 87 -      text  : 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"',

 Line: 88 -      string: 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"'

 Line: 91 -      text  : 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"',

 Line: 92 -      string: 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"'

 Line: 95 -      text  : 'SELECT CAST(CAST(`customer`.`name` AS varchar(15)) AS varchar(10)) FROM `customer`',

 Line: 96 -      string: 'SELECT CAST(CAST(`customer`.`name` AS varchar(15)) AS varchar(10)) FROM `customer`'

 Line: 99 -      text  : 'SELECT CAST(CAST([customer].[name] AS varchar(15)) AS varchar(10)) FROM [customer]',

 Line: 100 -      string: 'SELECT CAST(CAST([customer].[name] AS varchar(15)) AS varchar(10)) FROM [customer]'

 Line: 103 -      text  : 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"',

 Line: 104 -      string: 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"'

 Line: 109 -  // Cast in WHERE.

 Line: 111 -    query: customer.select(customer.name).where(customer.age.cast('int').plus(100).equals(150)),

 Line: 113 -      text  : 'SELECT "customer"."name" FROM "customer" WHERE ((CAST("customer"."age" AS int) + $1) = $2)',

 Line: 114 -      string: 'SELECT "customer"."name" FROM "customer" WHERE ((CAST("customer"."age" AS int) + 100) = 150)'

 Line: 117 -      text  : 'SELECT "customer"."name" FROM "customer" WHERE ((CAST("customer"."age" AS int) + $1) = $2)',

 Line: 118 -      string: 'SELECT "customer"."name" FROM "customer" WHERE ((CAST("customer"."age" AS int) + 100) = 150)'

 Line: 121 -      text  : 'SELECT `customer`.`name` FROM `customer` WHERE ((CAST(`customer`.`age` AS int) + ?) = ?)',

 Line: 122 -      string: 'SELECT `customer`.`name` FROM `customer` WHERE ((CAST(`customer`.`age` AS int) + 100) = 150)'

 Line: 125 -      text  : 'SELECT [customer].[name] FROM [customer] WHERE ((CAST([customer].[age] AS int) + @1) = @2)',

 Line: 126 -      string: 'SELECT [customer].[name] FROM [customer] WHERE ((CAST([customer].[age] AS int) + 100) = 150)'

 Line: 129 -      text  : 'SELECT "customer"."name" FROM "customer" WHERE ((CAST("customer"."age" AS int) + :1) = :2)',

 Line: 130 -      string: 'SELECT "customer"."name" FROM "customer" WHERE ((CAST("customer"."age" AS int) + 100) = 150)'

 Line: 137 -    query: customer.select(customer.age.cast('int').as('age_int')),

 Line: 139 -      text  : 'SELECT CAST("customer"."age" AS int) AS "age_int" FROM "customer"',

 Line: 140 -      string: 'SELECT CAST("customer"."age" AS int) AS "age_int" FROM "customer"'

 Line: 143 -      text  : 'SELECT CAST("customer"."age" AS int) AS "age_int" FROM "customer"',

 Line: 144 -      string: 'SELECT CAST("customer"."age" AS int) AS "age_int" FROM "customer"'

 Line: 147 -      text  : 'SELECT CAST(`customer`.`age` AS int) AS `age_int` FROM `customer`',

 Line: 148 -      string: 'SELECT CAST(`customer`.`age` AS int) AS `age_int` FROM `customer`'

 Line: 151 -      text  : 'SELECT CAST([customer].[age] AS int) AS [age_int] FROM [customer]',

 Line: 152 -      string: 'SELECT CAST([customer].[age] AS int) AS [age_int] FROM [customer]'

 Line: 155 -      text  : 'SELECT CAST("customer"."age" AS int) "age_int" FROM "customer"',

 Line: 156 -      string: 'SELECT CAST("customer"."age" AS int) "age_int" FROM "customer"'

 Line: 163 -    query: customerAlias.select(customerAlias.age_alias.cast('int')),

 Line: 165 -      text  : 'SELECT CAST("customer"."age" AS int) FROM "customer"',

 Line: 166 -      string: 'SELECT CAST("customer"."age" AS int) FROM "customer"'

 Line: 169 -      text  : 'SELECT CAST("customer"."age" AS int) FROM "customer"',

 Line: 170 -      string: 'SELECT CAST("customer"."age" AS int) FROM "customer"'

 Line: 173 -      text  : 'SELECT CAST(`customer`.`age` AS int) FROM `customer`',

 Line: 174 -      string: 'SELECT CAST(`customer`.`age` AS int) FROM `customer`'

 Line: 177 -      text  : 'SELECT CAST([customer].[age] AS int) FROM [customer]',

 Line: 178 -      string: 'SELECT CAST([customer].[age] AS int) FROM [customer]'

 Line: 181 -      text  : 'SELECT CAST("customer"."age" AS int) FROM "customer"',

 Line: 182 -      string: 'SELECT CAST("customer"."age" AS int) FROM "customer"'

 Line: 188 -    query: customerAlias.select(customerAlias.name_alias.cast('varchar(10)')),

 Line: 190 -      text  : 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"',

 Line: 191 -      string: 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"'

 Line: 194 -      text  : 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"',

 Line: 195 -      string: 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"'

 Line: 198 -      text  : 'SELECT CAST(`customer`.`name` AS varchar(10)) FROM `customer`',

 Line: 199 -      string: 'SELECT CAST(`customer`.`name` AS varchar(10)) FROM `customer`'

 Line: 202 -      text  : 'SELECT CAST([customer].[name] AS varchar(10)) FROM [customer]',

 Line: 203 -      string: 'SELECT CAST([customer].[name] AS varchar(10)) FROM [customer]'

 Line: 206 -      text  : 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"',

 Line: 207 -      string: 'SELECT CAST("customer"."name" AS varchar(10)) FROM "customer"'

 Line: 213 -    query: customerAlias.select(customerAlias.name_alias.plus(customerAlias.age_alias).cast('varchar(15)')),

 Line: 215 -      text  : 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"',

 Line: 216 -      string: 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"'

 Line: 219 -      text  : 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"',

 Line: 220 -      string: 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"'

 Line: 223 -      text  : 'SELECT CAST((`customer`.`name` + `customer`.`age`) AS varchar(15)) FROM `customer`',

 Line: 224 -      string: 'SELECT CAST((`customer`.`name` + `customer`.`age`) AS varchar(15)) FROM `customer`'

 Line: 227 -      text  : 'SELECT CAST(([customer].[name] + [customer].[age]) AS varchar(15)) FROM [customer]',

 Line: 228 -      string: 'SELECT CAST(([customer].[name] + [customer].[age]) AS varchar(15)) FROM [customer]'

 Line: 231 -      text  : 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"',

 Line: 232 -      string: 'SELECT CAST(("customer"."name" + "customer"."age") AS varchar(15)) FROM "customer"'

 Line: 239 -    query: customerAlias.select(customerAlias.name_alias.cast('varchar(15)').cast('varchar(10)')),

 Line: 241 -      text  : 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"',

 Line: 242 -      string: 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"'

 Line: 245 -      text  : 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"',

 Line: 246 -      string: 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"'

 Line: 249 -      text  : 'SELECT CAST(CAST(`customer`.`name` AS varchar(15)) AS varchar(10)) FROM `customer`',

 Line: 250 -      string: 'SELECT CAST(CAST(`customer`.`name` AS varchar(15)) AS varchar(10)) FROM `customer`'

 Line: 253 -      text  : 'SELECT CAST(CAST([customer].[name] AS varchar(15)) AS varchar(10)) FROM [customer]',

 Line: 254 -      string: 'SELECT CAST(CAST([customer].[name] AS varchar(15)) AS varchar(10)) FROM [customer]'

 Line: 257 -      text  : 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"',

 Line: 258 -      string: 'SELECT CAST(CAST("customer"."name" AS varchar(15)) AS varchar(10)) FROM "customer"'

 Line: 263 -  // Cast in WHERE for aliased columns.

 Line: 265 -    query: customerAlias.select(customerAlias.name_alias).where(customerAlias.age_alias.cast('int').plus(100).equals(150)),

 Line: 267 -      text  : 'SELECT "customer"."name" AS "name_alias" FROM "customer" WHERE ((CAST("customer"."age" AS int) + $1) = $2)',

 Line: 268 -      string: 'SELECT "customer"."name" AS "name_alias" FROM "customer" WHERE ((CAST("customer"."age" AS int) + 100) = 150)'

 Line: 271 -      text  : 'SELECT "customer"."name" AS "name_alias" FROM "customer" WHERE ((CAST("customer"."age" AS int) + $1) = $2)',

 Line: 272 -      string: 'SELECT "customer"."name" AS "name_alias" FROM "customer" WHERE ((CAST("customer"."age" AS int) + 100) = 150)'

 Line: 275 -      text  : 'SELECT `customer`.`name` AS `name_alias` FROM `customer` WHERE ((CAST(`customer`.`age` AS int) + ?) = ?)',

 Line: 276 -      string: 'SELECT `customer`.`name` AS `name_alias` FROM `customer` WHERE ((CAST(`customer`.`age` AS int) + 100) = 150)'

 Line: 279 -      text  : 'SELECT [customer].[name] AS [name_alias] FROM [customer] WHERE ((CAST([customer].[age] AS int) + @1) = @2)',

 Line: 280 -      string: 'SELECT [customer].[name] AS [name_alias] FROM [customer] WHERE ((CAST([customer].[age] AS int) + 100) = 150)'

 Line: 283 -      text  : 'SELECT "customer"."name" "name_alias" FROM "customer" WHERE ((CAST("customer"."age" AS int) + :1) = :2)',

 Line: 284 -      string: 'SELECT "customer"."name" "name_alias" FROM "customer" WHERE ((CAST("customer"."age" AS int) + 100) = 150)'

 Line: 291 -    query: customerAlias.select(customerAlias.age_alias.cast('int').as('age_int')),

 Line: 293 -      text  : 'SELECT CAST("customer"."age" AS int) AS "age_int" FROM "customer"',

 Line: 294 -      string: 'SELECT CAST("customer"."age" AS int) AS "age_int" FROM "customer"'

 Line: 297 -      text  : 'SELECT CAST("customer"."age" AS int) AS "age_int" FROM "customer"',

 Line: 298 -      string: 'SELECT CAST("customer"."age" AS int) AS "age_int" FROM "customer"'

 Line: 301 -      text  : 'SELECT CAST(`customer`.`age` AS int) AS `age_int` FROM `customer`',

 Line: 302 -      string: 'SELECT CAST(`customer`.`age` AS int) AS `age_int` FROM `customer`'

 Line: 305 -      text  : 'SELECT CAST([customer].[age] AS int) AS [age_int] FROM [customer]',

 Line: 306 -      string: 'SELECT CAST([customer].[age] AS int) AS [age_int] FROM [customer]'

 Line: 309 -      text  : 'SELECT CAST("customer"."age" AS int) "age_int" FROM "customer"',

 Line: 310 -      string: 'SELECT CAST("customer"."age" AS int) "age_int" FROM "customer"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/case-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.select(customer.age.case([true, false], [0, 1], 2)),

 Line: 9 -      text  : 'SELECT (CASE WHEN $1 THEN $2 WHEN $3 THEN $4 ELSE $5 END) FROM "customer"',

 Line: 10 -      string: 'SELECT (CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 ELSE 2 END) FROM "customer"'

 Line: 13 -      text  : 'SELECT (CASE WHEN $1 THEN $2 WHEN $3 THEN $4 ELSE $5 END) FROM "customer"',

 Line: 14 -      string: 'SELECT (CASE WHEN 1 THEN 0 WHEN 0 THEN 1 ELSE 2 END) FROM "customer"'

 Line: 17 -      text  : 'SELECT (CASE WHEN ? THEN ? WHEN ? THEN ? ELSE ? END) FROM `customer`',

 Line: 18 -      string: 'SELECT (CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 ELSE 2 END) FROM `customer`'

 Line: 21 -      text  : 'SELECT (CASE WHEN 1=1 THEN @1 WHEN 0=1 THEN @2 ELSE @3 END) FROM [customer]',

 Line: 22 -      string: 'SELECT (CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 ELSE 2 END) FROM [customer]',

 Line: 26 -      text  : 'SELECT (CASE WHEN 1=1 THEN :1 WHEN 0=1 THEN :2 ELSE :3 END) FROM "customer"',

 Line: 27 -      string: 'SELECT (CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 ELSE 2 END) FROM "customer"',

 Line: 35 -    query: customer.select(customer.age.plus(customer.age.case([true, false], [0, 1], 2))),

 Line: 37 -      text  : 'SELECT ("customer"."age" + (CASE WHEN $1 THEN $2 WHEN $3 THEN $4 ELSE $5 END)) FROM "customer"',

 Line: 38 -      string: 'SELECT ("customer"."age" + (CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 ELSE 2 END)) FROM "customer"'

 Line: 41 -      text  : 'SELECT ("customer"."age" + (CASE WHEN $1 THEN $2 WHEN $3 THEN $4 ELSE $5 END)) FROM "customer"',

 Line: 42 -      string: 'SELECT ("customer"."age" + (CASE WHEN 1 THEN 0 WHEN 0 THEN 1 ELSE 2 END)) FROM "customer"'

 Line: 45 -      text  : 'SELECT (`customer`.`age` + (CASE WHEN ? THEN ? WHEN ? THEN ? ELSE ? END)) FROM `customer`',

 Line: 46 -      string: 'SELECT (`customer`.`age` + (CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 ELSE 2 END)) FROM `customer`'

 Line: 49 -      text  : 'SELECT ([customer].[age] + (CASE WHEN 1=1 THEN @1 WHEN 0=1 THEN @2 ELSE @3 END)) FROM [customer]',

 Line: 50 -      string: 'SELECT ([customer].[age] + (CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 ELSE 2 END)) FROM [customer]',

 Line: 54 -      text  : 'SELECT ("customer"."age" + (CASE WHEN 1=1 THEN :1 WHEN 0=1 THEN :2 ELSE :3 END)) FROM "customer"',

 Line: 55 -      string: 'SELECT ("customer"."age" + (CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 ELSE 2 END)) FROM "customer"',

 Line: 63 -    query: customer.select(customer.age.case([true, false], [0, 1], 2).plus(3)),

 Line: 65 -      text  : 'SELECT ((CASE WHEN $1 THEN $2 WHEN $3 THEN $4 ELSE $5 END) + $6) FROM "customer"',

 Line: 66 -      string: 'SELECT ((CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 ELSE 2 END) + 3) FROM "customer"',

 Line: 69 -      text  : 'SELECT ((CASE WHEN $1 THEN $2 WHEN $3 THEN $4 ELSE $5 END) + $6) FROM "customer"',

 Line: 70 -      string: 'SELECT ((CASE WHEN 1 THEN 0 WHEN 0 THEN 1 ELSE 2 END) + 3) FROM "customer"'

 Line: 73 -      text  : 'SELECT ((CASE WHEN ? THEN ? WHEN ? THEN ? ELSE ? END) + ?) FROM `customer`',

 Line: 74 -      string: 'SELECT ((CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 ELSE 2 END) + 3) FROM `customer`'

 Line: 77 -      text  : 'SELECT ((CASE WHEN 1=1 THEN @1 WHEN 0=1 THEN @2 ELSE @3 END) + @4) FROM [customer]',

 Line: 78 -      string: 'SELECT ((CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 ELSE 2 END) + 3) FROM [customer]',

 Line: 82 -      text  : 'SELECT ((CASE WHEN 1=1 THEN :1 WHEN 0=1 THEN :2 ELSE :3 END) + :4) FROM "customer"',

 Line: 83 -      string: 'SELECT ((CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 ELSE 2 END) + 3) FROM "customer"',

 Line: 91 -    query: customer.select(customer.age.case([true, false], [0, 1], customer.age.between(10, 20))),

 Line: 93 -      text  : 'SELECT (CASE WHEN $1 THEN $2 WHEN $3 THEN $4 ELSE ("customer"."age" BETWEEN $5 AND $6) END) FROM "customer"',

 Line: 94 -      string: 'SELECT (CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 ELSE ("customer"."age" BETWEEN 10 AND 20) END) FROM "customer"',

 Line: 97 -      text  : 'SELECT (CASE WHEN $1 THEN $2 WHEN $3 THEN $4 ELSE ("customer"."age" BETWEEN $5 AND $6) END) FROM "customer"',

 Line: 98 -      string: 'SELECT (CASE WHEN 1 THEN 0 WHEN 0 THEN 1 ELSE ("customer"."age" BETWEEN 10 AND 20) END) FROM "customer"'

 Line: 101 -      text  : 'SELECT (CASE WHEN ? THEN ? WHEN ? THEN ? ELSE (`customer`.`age` BETWEEN ? AND ?) END) FROM `customer`',

 Line: 102 -      string: 'SELECT (CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 ELSE (`customer`.`age` BETWEEN 10 AND 20) END) FROM `customer`'

 Line: 105 -      text  : 'SELECT (CASE WHEN 1=1 THEN @1 WHEN 0=1 THEN @2 ELSE ([customer].[age] BETWEEN @3 AND @4) END) FROM [customer]',

 Line: 106 -      string: 'SELECT (CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 ELSE ([customer].[age] BETWEEN 10 AND 20) END) FROM [customer]',

 Line: 110 -      text  : 'SELECT (CASE WHEN 1=1 THEN :1 WHEN 0=1 THEN :2 ELSE ("customer"."age" BETWEEN :3 AND :4) END) FROM "customer"',

 Line: 111 -      string: 'SELECT (CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 ELSE ("customer"."age" BETWEEN 10 AND 20) END) FROM "customer"',

 Line: 119 -    query: customer.select(customer.age.case([true, false], [0, 1])),

 Line: 121 -      text  : 'SELECT (CASE WHEN $1 THEN $2 WHEN $3 THEN $4 END) FROM "customer"',

 Line: 122 -      string: 'SELECT (CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 END) FROM "customer"',

 Line: 125 -      text  : 'SELECT (CASE WHEN $1 THEN $2 WHEN $3 THEN $4 END) FROM "customer"',

 Line: 126 -      string: 'SELECT (CASE WHEN 1 THEN 0 WHEN 0 THEN 1 END) FROM "customer"'

 Line: 129 -      text  : 'SELECT (CASE WHEN ? THEN ? WHEN ? THEN ? END) FROM `customer`',

 Line: 130 -      string: 'SELECT (CASE WHEN TRUE THEN 0 WHEN FALSE THEN 1 END) FROM `customer`'

 Line: 133 -      text  : 'SELECT (CASE WHEN 1=1 THEN @1 WHEN 0=1 THEN @2 END) FROM [customer]',

 Line: 134 -      string: 'SELECT (CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 END) FROM [customer]',

 Line: 138 -      text  : 'SELECT (CASE WHEN 1=1 THEN :1 WHEN 0=1 THEN :2 END) FROM "customer"',

 Line: 139 -      string: 'SELECT (CASE WHEN 1=1 THEN 0 WHEN 0=1 THEN 1 END) FROM "customer"',

 Line: 147 -    query: customer.select(customer.age.case([customer.age.in([10, 20, 30]), customer.age.lte(60)], [0, 1], 2)),

 Line: 149 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN ($1, $2, $3)) THEN $4 WHEN ("customer"."age" <= $5) THEN $6 ELSE $7 END) FROM "customer"',

 Line: 150 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN 0 WHEN ("customer"."age" <= 60) THEN 1 ELSE 2 END) FROM "customer"'

 Line: 153 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN ($1, $2, $3)) THEN $4 WHEN ("customer"."age" <= $5) THEN $6 ELSE $7 END) FROM "customer"',

 Line: 154 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN 0 WHEN ("customer"."age" <= 60) THEN 1 ELSE 2 END) FROM "customer"'

 Line: 157 -      text  : 'SELECT (CASE WHEN (`customer`.`age` IN (?, ?, ?)) THEN ? WHEN (`customer`.`age` <= ?) THEN ? ELSE ? END) FROM `customer`',

 Line: 158 -      string: 'SELECT (CASE WHEN (`customer`.`age` IN (10, 20, 30)) THEN 0 WHEN (`customer`.`age` <= 60) THEN 1 ELSE 2 END) FROM `customer`'

 Line: 161 -      text  : 'SELECT (CASE WHEN ([customer].[age] IN (@1, @2, @3)) THEN @4 WHEN ([customer].[age] <= @5) THEN @6 ELSE @7 END) FROM [customer]',

 Line: 162 -      string: 'SELECT (CASE WHEN ([customer].[age] IN (10, 20, 30)) THEN 0 WHEN ([customer].[age] <= 60) THEN 1 ELSE 2 END) FROM [customer]'

 Line: 165 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN (:1, :2, :3)) THEN :4 WHEN ("customer"."age" <= :5) THEN :6 ELSE :7 END) FROM "customer"',

 Line: 166 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN 0 WHEN ("customer"."age" <= 60) THEN 1 ELSE 2 END) FROM "customer"'

 Line: 173 -    query: customer.select(customer.age.case([customer.age.in([10, 20, 30]), customer.age.lte(60)], [0, 1])),

 Line: 175 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN ($1, $2, $3)) THEN $4 WHEN ("customer"."age" <= $5) THEN $6 END) FROM "customer"',

 Line: 176 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN 0 WHEN ("customer"."age" <= 60) THEN 1 END) FROM "customer"'

 Line: 179 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN ($1, $2, $3)) THEN $4 WHEN ("customer"."age" <= $5) THEN $6 END) FROM "customer"',

 Line: 180 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN 0 WHEN ("customer"."age" <= 60) THEN 1 END) FROM "customer"'

 Line: 183 -      text  : 'SELECT (CASE WHEN (`customer`.`age` IN (?, ?, ?)) THEN ? WHEN (`customer`.`age` <= ?) THEN ? END) FROM `customer`',

 Line: 184 -      string: 'SELECT (CASE WHEN (`customer`.`age` IN (10, 20, 30)) THEN 0 WHEN (`customer`.`age` <= 60) THEN 1 END) FROM `customer`'

 Line: 187 -      text  : 'SELECT (CASE WHEN ([customer].[age] IN (@1, @2, @3)) THEN @4 WHEN ([customer].[age] <= @5) THEN @6 END) FROM [customer]',

 Line: 188 -      string: 'SELECT (CASE WHEN ([customer].[age] IN (10, 20, 30)) THEN 0 WHEN ([customer].[age] <= 60) THEN 1 END) FROM [customer]'

 Line: 191 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN (:1, :2, :3)) THEN :4 WHEN ("customer"."age" <= :5) THEN :6 END) FROM "customer"',

 Line: 192 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN 0 WHEN ("customer"."age" <= 60) THEN 1 END) FROM "customer"'

 Line: 199 -    query: customer.select(customer.age.case([customer.age.in([10, 20, 30]), customer.age.lte(60)], [customer.age.plus(5), customer.age.minus(1)])),

 Line: 201 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN ($1, $2, $3)) THEN ("customer"."age" + $4) WHEN ("customer"."age" <= $5) THEN ("customer"."age" - $6) END) FROM "customer"',

 Line: 202 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN ("customer"."age" + 5) WHEN ("customer"."age" <= 60) THEN ("customer"."age" - 1) END) FROM "customer"'

 Line: 205 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN ($1, $2, $3)) THEN ("customer"."age" + $4) WHEN ("customer"."age" <= $5) THEN ("customer"."age" - $6) END) FROM "customer"',

 Line: 206 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN ("customer"."age" + 5) WHEN ("customer"."age" <= 60) THEN ("customer"."age" - 1) END) FROM "customer"'

 Line: 209 -      text  : 'SELECT (CASE WHEN (`customer`.`age` IN (?, ?, ?)) THEN (`customer`.`age` + ?) WHEN (`customer`.`age` <= ?) THEN (`customer`.`age` - ?) END) FROM `customer`',

 Line: 210 -      string: 'SELECT (CASE WHEN (`customer`.`age` IN (10, 20, 30)) THEN (`customer`.`age` + 5) WHEN (`customer`.`age` <= 60) THEN (`customer`.`age` - 1) END) FROM `customer`'

 Line: 213 -      text  : 'SELECT (CASE WHEN ([customer].[age] IN (@1, @2, @3)) THEN ([customer].[age] + @4) WHEN ([customer].[age] <= @5) THEN ([customer].[age] - @6) END) FROM [customer]',

 Line: 214 -      string: 'SELECT (CASE WHEN ([customer].[age] IN (10, 20, 30)) THEN ([customer].[age] + 5) WHEN ([customer].[age] <= 60) THEN ([customer].[age] - 1) END) FROM [customer]'

 Line: 217 -      text  : 'SELECT (CASE WHEN ("customer"."age" IN (:1, :2, :3)) THEN ("customer"."age" + :4) WHEN ("customer"."age" <= :5) THEN ("customer"."age" - :6) END) FROM "customer"',

 Line: 218 -      string: 'SELECT (CASE WHEN ("customer"."age" IN (10, 20, 30)) THEN ("customer"."age" + 5) WHEN ("customer"."age" <= 60) THEN ("customer"."age" - 1) END) FROM "customer"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/ternary-clause-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.select().where(customer.age.between(18, 25)),

 Line: 9 -      text  : 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" BETWEEN $1 AND $2)',

 Line: 10 -      string: 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" BETWEEN 18 AND 25)'

 Line: 13 -      text  : 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" BETWEEN $1 AND $2)',

 Line: 14 -      string: 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" BETWEEN 18 AND 25)'

 Line: 17 -      text  : 'SELECT `customer`.* FROM `customer` WHERE (`customer`.`age` BETWEEN ? AND ?)',

 Line: 18 -      string: 'SELECT `customer`.* FROM `customer` WHERE (`customer`.`age` BETWEEN 18 AND 25)'

 Line: 21 -      text  : 'SELECT [customer].* FROM [customer] WHERE ([customer].[age] BETWEEN @1 AND @2)',

 Line: 22 -      string: 'SELECT [customer].* FROM [customer] WHERE ([customer].[age] BETWEEN 18 AND 25)'

 Line: 25 -      text  : 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" BETWEEN :1 AND :2)',

 Line: 26 -      string: 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" BETWEEN 18 AND 25)'

 Line: 32 -    query: post.select().where(post.userId.between(customer.subQuery().select(customer.id.min()), customer.subQuery().select(customer.id.max()))),

 Line: 34 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."userId" BETWEEN (SELECT MIN("customer"."id") AS "id_min" FROM "customer") AND (SELECT MAX("customer"."id") AS "id_max" FROM "customer"))',

 Line: 35 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."userId" BETWEEN (SELECT MIN("customer"."id") AS "id_min" FROM "customer") AND (SELECT MAX("customer"."id") AS "id_max" FROM "customer"))'

 Line: 38 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."userId" BETWEEN (SELECT MIN("customer"."id") AS "id_min" FROM "customer") AND (SELECT MAX("customer"."id") AS "id_max" FROM "customer"))',

 Line: 39 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."userId" BETWEEN (SELECT MIN("customer"."id") AS "id_min" FROM "customer") AND (SELECT MAX("customer"."id") AS "id_max" FROM "customer"))'

 Line: 42 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`userId` BETWEEN (SELECT MIN(`customer`.`id`) AS `id_min` FROM `customer`) AND (SELECT MAX(`customer`.`id`) AS `id_max` FROM `customer`))',

 Line: 43 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`userId` BETWEEN (SELECT MIN(`customer`.`id`) AS `id_min` FROM `customer`) AND (SELECT MAX(`customer`.`id`) AS `id_max` FROM `customer`))'

 Line: 46 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[userId] BETWEEN (SELECT MIN([customer].[id]) AS [id_min] FROM [customer]) AND (SELECT MAX([customer].[id]) AS [id_max] FROM [customer]))',

 Line: 47 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[userId] BETWEEN (SELECT MIN([customer].[id]) AS [id_min] FROM [customer]) AND (SELECT MAX([customer].[id]) AS [id_max] FROM [customer]))'

 Line: 50 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."userId" BETWEEN (SELECT MIN("customer"."id") "id_min" FROM "customer") AND (SELECT MAX("customer"."id") "id_max" FROM "customer"))',

 Line: 51 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."userId" BETWEEN (SELECT MIN("customer"."id") "id_min" FROM "customer") AND (SELECT MAX("customer"."id") "id_max" FROM "customer"))'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/returning-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -    query: user.insert({name: 'joe'}).returning(),

 Line: 6 -      text  : 'INSERT INTO "user" ("name") VALUES ($1) RETURNING *',

 Line: 7 -      string: 'INSERT INTO "user" ("name") VALUES (\'joe\') RETURNING *'

 Line: 13 -    query: user.insert({name: 'joe'}).returning('id'),

 Line: 15 -      text  : 'INSERT INTO "user" ("name") VALUES ($1) RETURNING id',

 Line: 16 -      string: 'INSERT INTO "user" ("name") VALUES (\'joe\') RETURNING id'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/unary-clause-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.select().where(customer.age.isNotNull()),

 Line: 9 -      text  : 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" IS NOT NULL)',

 Line: 10 -      string: 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" IS NOT NULL)'

 Line: 13 -      text  : 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" IS NOT NULL)',

 Line: 14 -      string: 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" IS NOT NULL)'

 Line: 17 -      text  : 'SELECT `customer`.* FROM `customer` WHERE (`customer`.`age` IS NOT NULL)',

 Line: 18 -      string: 'SELECT `customer`.* FROM `customer` WHERE (`customer`.`age` IS NOT NULL)'

 Line: 21 -      text  : 'SELECT [customer].* FROM [customer] WHERE ([customer].[age] IS NOT NULL)',

 Line: 22 -      string: 'SELECT [customer].* FROM [customer] WHERE ([customer].[age] IS NOT NULL)'

 Line: 25 -      text  : 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" IS NOT NULL)',

 Line: 26 -      string: 'SELECT "customer".* FROM "customer" WHERE ("customer"."age" IS NOT NULL)'

 Line: 32 -    query: post.select().where(post.userId. in (customer.subQuery().select(customer.id).where(customer.age.isNull()))),

 Line: 34 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer" WHERE ("customer"."age" IS NULL)))',

 Line: 35 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer" WHERE ("customer"."age" IS NULL)))'

 Line: 38 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer" WHERE ("customer"."age" IS NULL)))',

 Line: 39 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer" WHERE ("customer"."age" IS NULL)))'

 Line: 42 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`userId` IN (SELECT `customer`.`id` FROM `customer` WHERE (`customer`.`age` IS NULL)))',

 Line: 43 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`userId` IN (SELECT `customer`.`id` FROM `customer` WHERE (`customer`.`age` IS NULL)))'

 Line: 46 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[userId] IN (SELECT [customer].[id] FROM [customer] WHERE ([customer].[age] IS NULL)))',

 Line: 47 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[userId] IN (SELECT [customer].[id] FROM [customer] WHERE ([customer].[age] IS NULL)))'

 Line: 50 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer" WHERE ("customer"."age" IS NULL)))',

 Line: 51 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer" WHERE ("customer"."age" IS NULL)))'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/join-to-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -    query: user.joinTo(post),

 Line: 64 -    query: post.joinTo(user),

 Line: 89 -    query: user.joinTo(photo),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/regex-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.select(customer.metadata.regex('age')),

 Line: 9 -      text  : 'SELECT ("customer"."metadata" ~ $1) FROM "customer"',

 Line: 10 -      string: 'SELECT ("customer"."metadata" ~ \'age\') FROM "customer"'

 Line: 16 -    query: customer.select(customer.metadata.iregex('age')),

 Line: 18 -      text  : 'SELECT ("customer"."metadata" ~* $1) FROM "customer"',

 Line: 19 -      string: 'SELECT ("customer"."metadata" ~* \'age\') FROM "customer"'

 Line: 25 -    query: customer.select(customer.metadata.notRegex('age')),

 Line: 27 -      text  : 'SELECT ("customer"."metadata" !~ $1) FROM "customer"',

 Line: 28 -      string: 'SELECT ("customer"."metadata" !~ \'age\') FROM "customer"'

 Line: 34 -    query: customer.select(customer.metadata.notIregex('age')),

 Line: 36 -      text  : 'SELECT ("customer"."metadata" !~* $1) FROM "customer"',

 Line: 37 -      string: 'SELECT ("customer"."metadata" !~* \'age\') FROM "customer"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/update-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: post.update({

 Line: 12 -      text  : 'UPDATE "post" SET "content" = $1',

 Line: 13 -      string: 'UPDATE "post" SET "content" = \'test\''

 Line: 16 -      text  : 'UPDATE "post" SET "content" = $1',

 Line: 17 -      string: 'UPDATE "post" SET "content" = \'test\''

 Line: 20 -      text  : 'UPDATE `post` SET `content` = ?',

 Line: 21 -      string: 'UPDATE `post` SET `content` = \'test\''

 Line: 24 -      text  : 'UPDATE [post] SET [content] = @1',

 Line: 25 -      string: 'UPDATE [post] SET [content] = \'test\''

 Line: 28 -      text  : 'UPDATE "post" SET "content" = :1',

 Line: 29 -      string: 'UPDATE "post" SET "content" = \'test\''

 Line: 35 -    query: post.update({

 Line: 40 -      text  : 'UPDATE "post" SET "content" = $1, "userId" = $2',

 Line: 41 -      string: 'UPDATE "post" SET "content" = \'test\', "userId" = 3'

 Line: 44 -      text  : 'UPDATE "post" SET "content" = $1, "userId" = $2',

 Line: 45 -      string: 'UPDATE "post" SET "content" = \'test\', "userId" = 3'

 Line: 48 -      text  : 'UPDATE `post` SET `content` = ?, `userId` = ?',

 Line: 49 -      string: 'UPDATE `post` SET `content` = \'test\', `userId` = 3'

 Line: 52 -      text  : 'UPDATE [post] SET [content] = @1, [userId] = @2',

 Line: 53 -      string: 'UPDATE [post] SET [content] = \'test\', [userId] = 3'

 Line: 56 -      text  : 'UPDATE "post" SET "content" = :1, "userId" = :2',

 Line: 57 -      string: 'UPDATE "post" SET "content" = \'test\', "userId" = 3'

 Line: 63 -    query: post.update({

 Line: 68 -      text  : 'UPDATE "post" SET "content" = $1, "userId" = $2',

 Line: 69 -      string: 'UPDATE "post" SET "content" = NULL, "userId" = 3'

 Line: 72 -      text  : 'UPDATE "post" SET "content" = $1, "userId" = $2',

 Line: 73 -      string: 'UPDATE "post" SET "content" = NULL, "userId" = 3'

 Line: 76 -      text  : 'UPDATE `post` SET `content` = ?, `userId` = ?',

 Line: 77 -      string: 'UPDATE `post` SET `content` = NULL, `userId` = 3'

 Line: 80 -      text  : 'UPDATE [post] SET [content] = @1, [userId] = @2',

 Line: 81 -      string: 'UPDATE [post] SET [content] = NULL, [userId] = 3'

 Line: 84 -      text  : 'UPDATE "post" SET "content" = :1, "userId" = :2',

 Line: 85 -      string: 'UPDATE "post" SET "content" = NULL, "userId" = 3'

 Line: 91 -    query: post.update({

 Line: 96 -      text  : 'UPDATE "post" SET "content" = $1, "userId" = $2 WHERE ("post"."content" = $3)',

 Line: 97 -      string: 'UPDATE "post" SET "content" = \'test\', "userId" = 3 WHERE ("post"."content" = \'no\')'

 Line: 100 -      text  : 'UPDATE "post" SET "content" = $1, "userId" = $2 WHERE ("post"."content" = $3)',

 Line: 101 -      string: 'UPDATE "post" SET "content" = \'test\', "userId" = 3 WHERE ("post"."content" = \'no\')'

 Line: 104 -      text  : 'UPDATE `post` SET `content` = ?, `userId` = ? WHERE (`post`.`content` = ?)',

 Line: 105 -      string: 'UPDATE `post` SET `content` = \'test\', `userId` = 3 WHERE (`post`.`content` = \'no\')'

 Line: 108 -      text  : 'UPDATE [post] SET [content] = @1, [userId] = @2 WHERE ([post].[content] = @3)',

 Line: 109 -      string: 'UPDATE [post] SET [content] = \'test\', [userId] = 3 WHERE ([post].[content] = \'no\')'

 Line: 112 -      text  : 'UPDATE "post" SET "content" = :1, "userId" = :2 WHERE ("post"."content" = :3)',

 Line: 113 -      string: 'UPDATE "post" SET "content" = \'test\', "userId" = 3 WHERE ("post"."content" = \'no\')'

 Line: 119 -    query: post.update({

 Line: 123 -      text  : 'UPDATE "post" SET "content" = "user"."name" FROM "user" WHERE ("post"."userId" = "user"."id")',

 Line: 124 -      string: 'UPDATE "post" SET "content" = "user"."name" FROM "user" WHERE ("post"."userId" = "user"."id")'

 Line: 127 -      text  : 'UPDATE "post" SET "content" = "user"."name" FROM "user" WHERE ("post"."userId" = "user"."id")',

 Line: 128 -      string: 'UPDATE "post" SET "content" = "user"."name" FROM "user" WHERE ("post"."userId" = "user"."id")'

 Line: 131 -      text  : 'UPDATE `post` SET `content` = `user`.`name` FROM `user` WHERE (`post`.`userId` = `user`.`id`)',

 Line: 132 -      string: 'UPDATE `post` SET `content` = `user`.`name` FROM `user` WHERE (`post`.`userId` = `user`.`id`)'

 Line: 135 -      text  : 'UPDATE [post] SET [content] = [user].[name] FROM [user] WHERE ([post].[userId] = [user].[id])',

 Line: 136 -      string: 'UPDATE [post] SET [content] = [user].[name] FROM [user] WHERE ([post].[userId] = [user].[id])'

 Line: 139 -      text  : 'UPDATE "post" SET "content" = "user"."name" FROM "user" WHERE ("post"."userId" = "user"."id")',

 Line: 140 -      string: 'UPDATE "post" SET "content" = "user"."name" FROM "user" WHERE ("post"."userId" = "user"."id")'

 Line: 147 -    query: post.update({

 Line: 151 -      text  : 'UPDATE "post" SET "userId" = "user"."id" FROM "user" WHERE ("post"."userId" = "user"."id")',

 Line: 152 -      string: 'UPDATE "post" SET "userId" = "user"."id" FROM "user" WHERE ("post"."userId" = "user"."id")'

 Line: 155 -      text  : 'UPDATE "post" SET "userId" = "user"."id" FROM "user" WHERE ("post"."userId" = "user"."id")',

 Line: 156 -      string: 'UPDATE "post" SET "userId" = "user"."id" FROM "user" WHERE ("post"."userId" = "user"."id")'

 Line: 159 -      text  : 'UPDATE `post` SET `userId` = `user`.`id` FROM `user` WHERE (`post`.`userId` = `user`.`id`)',

 Line: 160 -      string: 'UPDATE `post` SET `userId` = `user`.`id` FROM `user` WHERE (`post`.`userId` = `user`.`id`)'

 Line: 163 -      text  : 'UPDATE [post] SET [userId] = [user].[id] FROM [user] WHERE ([post].[userId] = [user].[id])',

 Line: 164 -      string: 'UPDATE [post] SET [userId] = [user].[id] FROM [user] WHERE ([post].[userId] = [user].[id])'

 Line: 167 -      text  : 'UPDATE "post" SET "userId" = "user"."id" FROM "user" WHERE ("post"."userId" = "user"."id")',

 Line: 168 -      string: 'UPDATE "post" SET "userId" = "user"."id" FROM "user" WHERE ("post"."userId" = "user"."id")'

 Line: 175 -    query: post.update({

 Line: 179 -      text  : 'UPDATE "post" SET "content" = $1',

 Line: 180 -      string: 'UPDATE "post" SET "content" = \'\\x74657374\''

 Line: 183 -      text  : 'UPDATE "post" SET "content" = $1',

 Line: 184 -      string: 'UPDATE "post" SET "content" = x\'74657374\''

 Line: 187 -      text  : 'UPDATE `post` SET `content` = ?',

 Line: 188 -      string: 'UPDATE `post` SET `content` = x\'74657374\''

 Line: 191 -      text  : 'UPDATE "post" SET "content" = :1',

 Line: 192 -      string: 'UPDATE "post" SET "content" = utl_raw.cast_to_varchar2(hextoraw(\'74657374\'))'

 Line: 199 -    query: variable.update({

 Line: 204 -      text  : 'UPDATE "variable" SET "a" = $1, "b" = $2',

 Line: 205 -      string: 'UPDATE "variable" SET "a" = TRUE, "b" = FALSE'

 Line: 208 -      text  : 'UPDATE "variable" SET "a" = $1, "b" = $2',

 Line: 209 -      string: 'UPDATE "variable" SET "a" = 1, "b" = 0'

 Line: 212 -      text  : 'UPDATE `variable` SET `a` = ?, `b` = ?',

 Line: 213 -      string: 'UPDATE `variable` SET `a` = TRUE, `b` = FALSE'

 Line: 216 -      text  : 'UPDATE "variable" SET "a" = :1, "b" = :2',

 Line: 217 -      string: 'UPDATE "variable" SET "a" = TRUE, "b" = FALSE'

 Line: 224 -    query: variable.update({

 Line: 229 -      text  : 'UPDATE "variable" SET "a" = $1, "b" = $2',

 Line: 230 -      string: 'UPDATE "variable" SET "a" = \'{"id":1,"value":2}\', "b" = \'[{"id":2,"value":3},{"id":3,"value":4}]\''

 Line: 233 -      text  : 'UPDATE "variable" SET "a" = $1, "b" = $2',

 Line: 234 -      string: 'UPDATE "variable" SET "a" = \'{"id":1,"value":2}\', "b" = \'[{"id":2,"value":3},{"id":3,"value":4}]\''

 Line: 237 -      text  : 'UPDATE `variable` SET `a` = ?, `b` = ?',

 Line: 238 -      string: 'UPDATE `variable` SET `a` = \'{"id":1,"value":2}\', `b` = (\'{"id":2,"value":3}\', \'{"id":3,"value":4}\')'

 Line: 241 -      text  : 'UPDATE "variable" SET "a" = :1, "b" = :2',

 Line: 242 -      string: 'UPDATE "variable" SET "a" = \'{"id":1,"value":2}\', "b" = (\'{"id":2,"value":3}\', \'{"id":3,"value":4}\')'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/binary-clause-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -    query: customer.select(customer.name.plus(customer.age)),

 Line: 11 -      text  : 'SELECT ("customer"."name" + "customer"."age") FROM "customer"',

 Line: 12 -      string: 'SELECT ("customer"."name" + "customer"."age") FROM "customer"'

 Line: 15 -      text  : 'SELECT ("customer"."name" + "customer"."age") FROM "customer"',

 Line: 16 -      string: 'SELECT ("customer"."name" + "customer"."age") FROM "customer"'

 Line: 19 -      text  : 'SELECT (`customer`.`name` + `customer`.`age`) FROM `customer`',

 Line: 20 -      string: 'SELECT (`customer`.`name` + `customer`.`age`) FROM `customer`'

 Line: 23 -      text  : 'SELECT ([customer].[name] + [customer].[age]) FROM [customer]',

 Line: 24 -      string: 'SELECT ([customer].[name] + [customer].[age]) FROM [customer]'

 Line: 27 -      text  : 'SELECT ("customer"."name" + "customer"."age") FROM "customer"',

 Line: 28 -      string: 'SELECT ("customer"."name" + "customer"."age") FROM "customer"'

 Line: 34 -    query: customerAlias.select(customerAlias.name_alias.plus(customerAlias.age_alias)),

 Line: 36 -      text  : 'SELECT ("customer"."name" + "customer"."age") FROM "customer"',

 Line: 37 -      string: 'SELECT ("customer"."name" + "customer"."age") FROM "customer"'

 Line: 40 -      text  : 'SELECT ("customer"."name" + "customer"."age") FROM "customer"',

 Line: 41 -      string: 'SELECT ("customer"."name" + "customer"."age") FROM "customer"'

 Line: 44 -      text  : 'SELECT (`customer`.`name` + `customer`.`age`) FROM `customer`',

 Line: 45 -      string: 'SELECT (`customer`.`name` + `customer`.`age`) FROM `customer`'

 Line: 48 -      text  : 'SELECT ([customer].[name] + [customer].[age]) FROM [customer]',

 Line: 49 -      string: 'SELECT ([customer].[name] + [customer].[age]) FROM [customer]'

 Line: 55 -    query: post.select(post.content.plus('!')).where(post.userId. in (customer.subQuery().select(customer.id))),

 Line: 57 -      text  : 'SELECT ("post"."content" + $1) FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer"))',

 Line: 58 -      string: 'SELECT ("post"."content" + \'!\') FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer"))'

 Line: 61 -      text  : 'SELECT ("post"."content" + $1) FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer"))',

 Line: 62 -      string: 'SELECT ("post"."content" + \'!\') FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer"))'

 Line: 65 -      text  : 'SELECT (`post`.`content` + ?) FROM `post` WHERE (`post`.`userId` IN (SELECT `customer`.`id` FROM `customer`))',

 Line: 66 -      string: 'SELECT (`post`.`content` + \'!\') FROM `post` WHERE (`post`.`userId` IN (SELECT `customer`.`id` FROM `customer`))'

 Line: 69 -      text  : 'SELECT ([post].[content] + @1) FROM [post] WHERE ([post].[userId] IN (SELECT [customer].[id] FROM [customer]))',

 Line: 70 -      string: 'SELECT ([post].[content] + \'!\') FROM [post] WHERE ([post].[userId] IN (SELECT [customer].[id] FROM [customer]))'

 Line: 73 -      text  : 'SELECT ("post"."content" + :1) FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer"))',

 Line: 74 -      string: 'SELECT ("post"."content" + \'!\') FROM "post" WHERE ("post"."userId" IN (SELECT "customer"."id" FROM "customer"))'

 Line: 80 -    query: post.select(post.id.plus(': ').plus(post.content)).where(post.userId.notIn(customer.subQuery().select(customer.id))),

 Line: 82 -      text  : 'SELECT (("post"."id" + $1) + "post"."content") FROM "post" WHERE ("post"."userId" NOT IN (SELECT "customer"."id" FROM "customer"))',

 Line: 83 -      string: 'SELECT (("post"."id" + \': \') + "post"."content") FROM "post" WHERE ("post"."userId" NOT IN (SELECT "customer"."id" FROM "customer"))'

 Line: 86 -      text  : 'SELECT (("post"."id" + $1) + "post"."content") FROM "post" WHERE ("post"."userId" NOT IN (SELECT "customer"."id" FROM "customer"))',

 Line: 87 -      string: 'SELECT (("post"."id" + \': \') + "post"."content") FROM "post" WHERE ("post"."userId" NOT IN (SELECT "customer"."id" FROM "customer"))'

 Line: 90 -      text  : 'SELECT ((`post`.`id` + ?) + `post`.`content`) FROM `post` WHERE (`post`.`userId` NOT IN (SELECT `customer`.`id` FROM `customer`))',

 Line: 91 -      string: 'SELECT ((`post`.`id` + \': \') + `post`.`content`) FROM `post` WHERE (`post`.`userId` NOT IN (SELECT `customer`.`id` FROM `customer`))'

 Line: 94 -      text  : 'SELECT (([post].[id] + @1) + [post].[content]) FROM [post] WHERE ([post].[userId] NOT IN (SELECT [customer].[id] FROM [customer]))',

 Line: 95 -      string: 'SELECT (([post].[id] + \': \') + [post].[content]) FROM [post] WHERE ([post].[userId] NOT IN (SELECT [customer].[id] FROM [customer]))'

 Line: 98 -      text  : 'SELECT (("post"."id" + :1) + "post"."content") FROM "post" WHERE ("post"."userId" NOT IN (SELECT "customer"."id" FROM "customer"))',

 Line: 99 -      string: 'SELECT (("post"."id" + \': \') + "post"."content") FROM "post" WHERE ("post"."userId" NOT IN (SELECT "customer"."id" FROM "customer"))'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/alias-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.select(customer.name.isNull().as('nameIsNull')),

 Line: 9 -      text  : 'SELECT ("customer"."name" IS NULL) AS "nameIsNull" FROM "customer"',

 Line: 10 -      string: 'SELECT ("customer"."name" IS NULL) AS "nameIsNull" FROM "customer"'

 Line: 13 -      text  : 'SELECT ("customer"."name" IS NULL) AS "nameIsNull" FROM "customer"',

 Line: 14 -      string: 'SELECT ("customer"."name" IS NULL) AS "nameIsNull" FROM "customer"'

 Line: 17 -      text  : 'SELECT (`customer`.`name` IS NULL) AS `nameIsNull` FROM `customer`',

 Line: 18 -      string: 'SELECT (`customer`.`name` IS NULL) AS `nameIsNull` FROM `customer`'

 Line: 21 -      text  : 'SELECT ([customer].[name] IS NULL) AS [nameIsNull] FROM [customer]',

 Line: 22 -      string: 'SELECT ([customer].[name] IS NULL) AS [nameIsNull] FROM [customer]'

 Line: 25 -      text  : 'SELECT ("customer"."name" IS NULL) "nameIsNull" FROM "customer"',

 Line: 26 -      string: 'SELECT ("customer"."name" IS NULL) "nameIsNull" FROM "customer"'

 Line: 32 -    query: customer.select(customer.name.plus(customer.age).as('nameAndAge')).where(customer.age.gt(10).and(customer.age.lt(20))),

 Line: 34 -      text  : 'SELECT ("customer"."name" + "customer"."age") AS "nameAndAge" FROM "customer" WHERE (("customer"."age" > $1) AND ("customer"."age" < $2))',

 Line: 35 -      string: 'SELECT ("customer"."name" + "customer"."age") AS "nameAndAge" FROM "customer" WHERE (("customer"."age" > 10) AND ("customer"."age" < 20))'

 Line: 38 -      text  : 'SELECT ("customer"."name" + "customer"."age") AS "nameAndAge" FROM "customer" WHERE (("customer"."age" > $1) AND ("customer"."age" < $2))',

 Line: 39 -      string: 'SELECT ("customer"."name" + "customer"."age") AS "nameAndAge" FROM "customer" WHERE (("customer"."age" > 10) AND ("customer"."age" < 20))'

 Line: 42 -      text  : 'SELECT (`customer`.`name` + `customer`.`age`) AS `nameAndAge` FROM `customer` WHERE ((`customer`.`age` > ?) AND (`customer`.`age` < ?))',

 Line: 43 -      string: 'SELECT (`customer`.`name` + `customer`.`age`) AS `nameAndAge` FROM `customer` WHERE ((`customer`.`age` > 10) AND (`customer`.`age` < 20))'

 Line: 46 -      text  : 'SELECT ([customer].[name] + [customer].[age]) AS [nameAndAge] FROM [customer] WHERE (([customer].[age] > @1) AND ([customer].[age] < @2))',

 Line: 47 -      string: 'SELECT ([customer].[name] + [customer].[age]) AS [nameAndAge] FROM [customer] WHERE (([customer].[age] > 10) AND ([customer].[age] < 20))'

 Line: 50 -      text  : 'SELECT ("customer"."name" + "customer"."age") "nameAndAge" FROM "customer" WHERE (("customer"."age" > :1) AND ("customer"."age" < :2))',

 Line: 51 -      string: 'SELECT ("customer"."name" + "customer"."age") "nameAndAge" FROM "customer" WHERE (("customer"."age" > 10) AND ("customer"."age" < 20))'

 Line: 57 -    query: customer.select(customer.age.between(10, 20).as('ageBetween')),

 Line: 59 -      text  : 'SELECT ("customer"."age" BETWEEN $1 AND $2) AS "ageBetween" FROM "customer"',

 Line: 60 -      string: 'SELECT ("customer"."age" BETWEEN 10 AND 20) AS "ageBetween" FROM "customer"'

 Line: 63 -      text  : 'SELECT ("customer"."age" BETWEEN $1 AND $2) AS "ageBetween" FROM "customer"',

 Line: 64 -      string: 'SELECT ("customer"."age" BETWEEN 10 AND 20) AS "ageBetween" FROM "customer"'

 Line: 67 -      text  : 'SELECT (`customer`.`age` BETWEEN ? AND ?) AS `ageBetween` FROM `customer`',

 Line: 68 -      string: 'SELECT (`customer`.`age` BETWEEN 10 AND 20) AS `ageBetween` FROM `customer`'

 Line: 71 -      text  : 'SELECT ([customer].[age] BETWEEN @1 AND @2) AS [ageBetween] FROM [customer]',

 Line: 72 -      string: 'SELECT ([customer].[age] BETWEEN 10 AND 20) AS [ageBetween] FROM [customer]'

 Line: 75 -      text  : 'SELECT ("customer"."age" BETWEEN :1 AND :2) "ageBetween" FROM "customer"',

 Line: 76 -      string: 'SELECT ("customer"."age" BETWEEN 10 AND 20) "ageBetween" FROM "customer"'

 Line: 82 -    query: customer.select(Sql.functions.ROUND(customer.age.as('ageBetween'), 2)),

 Line: 84 -      text  : 'SELECT ROUND("customer"."age", $1) FROM "customer"',

 Line: 85 -      string: 'SELECT ROUND("customer"."age", 2) FROM "customer"'

 Line: 88 -      text  : 'SELECT ROUND("customer"."age", $1) FROM "customer"',

 Line: 89 -      string: 'SELECT ROUND("customer"."age", 2) FROM "customer"'

 Line: 92 -      text  : 'SELECT ROUND(`customer`.`age`, ?) FROM `customer`',

 Line: 93 -      string: 'SELECT ROUND(`customer`.`age`, 2) FROM `customer`'

 Line: 96 -      text  : 'SELECT ROUND([customer].[age], @1) FROM [customer]',

 Line: 97 -      string: 'SELECT ROUND([customer].[age], 2) FROM [customer]'

 Line: 100 -      text  : 'SELECT ROUND("customer"."age", :1) FROM "customer"',

 Line: 101 -      string: 'SELECT ROUND("customer"."age", 2) FROM "customer"'

 Line: 107 -    query: customer.select(customer.age.notBetween(10, 20).as('ageNotBetween')),

 Line: 109 -      text  : 'SELECT ("customer"."age" NOT BETWEEN $1 AND $2) AS "ageNotBetween" FROM "customer"',

 Line: 110 -      string: 'SELECT ("customer"."age" NOT BETWEEN 10 AND 20) AS "ageNotBetween" FROM "customer"'

 Line: 113 -      text  : 'SELECT ("customer"."age" NOT BETWEEN $1 AND $2) AS "ageNotBetween" FROM "customer"',

 Line: 114 -      string: 'SELECT ("customer"."age" NOT BETWEEN 10 AND 20) AS "ageNotBetween" FROM "customer"'

 Line: 117 -      text  : 'SELECT (`customer`.`age` NOT BETWEEN ? AND ?) AS `ageNotBetween` FROM `customer`',

 Line: 118 -      string: 'SELECT (`customer`.`age` NOT BETWEEN 10 AND 20) AS `ageNotBetween` FROM `customer`'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/json-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.select(customer.metadata.key('age')),

 Line: 9 -      text  : 'SELECT ("customer"."metadata" -> $1) FROM "customer"',

 Line: 10 -      string: 'SELECT ("customer"."metadata" -> \'age\') FROM "customer"'

 Line: 16 -    query: customer.select(customer.metadata.keyText('age')),

 Line: 18 -      text  : 'SELECT ("customer"."metadata" ->> $1) FROM "customer"',

 Line: 19 -      string: 'SELECT ("customer"."metadata" ->> \'age\') FROM "customer"'

 Line: 25 -    query: customer.select(customer.metadata.path('{address,city}')),

 Line: 27 -      text  : 'SELECT ("customer"."metadata" #> $1) FROM "customer"',

 Line: 28 -      string: 'SELECT ("customer"."metadata" #> \'{address,city}\') FROM "customer"'

 Line: 34 -    query: customer.select(customer.metadata.pathText('{address,city}')),

 Line: 36 -      text  : 'SELECT ("customer"."metadata" #>> $1) FROM "customer"',

 Line: 37 -      string: 'SELECT ("customer"."metadata" #>> \'{address,city}\') FROM "customer"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/delete-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: post.delete().where(post.content.equals("hello's world")),

 Line: 9 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = $1)',

 Line: 10 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'hello\'\'s world\')'

 Line: 13 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = $1)',

 Line: 14 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'hello\'\'s world\')'

 Line: 17 -      text  : 'DELETE FROM `post` WHERE (`post`.`content` = ?)',

 Line: 18 -      string: 'DELETE FROM `post` WHERE (`post`.`content` = \'hello\'\'s world\')'

 Line: 21 -      text  : 'DELETE FROM [post] WHERE ([post].[content] = @1)',

 Line: 22 -      string: "DELETE FROM [post] WHERE ([post].[content] = 'hello''s world')"

 Line: 25 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = :1)',

 Line: 26 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'hello\'\'s world\')'

 Line: 32 -    query: post.delete(post).from(post),

 Line: 34 -      text: 'DELETE "post" FROM "post"',

 Line: 35 -      string: 'DELETE "post" FROM "post"'

 Line: 38 -      text: 'DELETE "post" FROM "post"',

 Line: 39 -      string: 'DELETE "post" FROM "post"'

 Line: 42 -      text: 'DELETE `post` FROM `post`',

 Line: 43 -      string: 'DELETE `post` FROM `post`'

 Line: 49 -    query: post.delete([post, post]).from(post),

 Line: 51 -      text: 'DELETE "post", "post" FROM "post"',

 Line: 52 -      string: 'DELETE "post", "post" FROM "post"'

 Line: 55 -      text: 'DELETE "post", "post" FROM "post"',

 Line: 56 -      string: 'DELETE "post", "post" FROM "post"'

 Line: 59 -      text: 'DELETE `post`, `post` FROM `post`',

 Line: 60 -      string: 'DELETE `post`, `post` FROM `post`'

 Line: 66 -    query: user

 Line: 71 -      text: 'DELETE "user" FROM "user" INNER JOIN "post" ON ("post"."userId" = "user"."id") WHERE ("post"."content" = $1)',

 Line: 72 -      string: 'DELETE "user" FROM "user" INNER JOIN "post" ON ("post"."userId" = "user"."id") WHERE ("post"."content" = \'foo\')'

 Line: 75 -      text: 'DELETE "user" FROM "user" INNER JOIN "post" ON ("post"."userId" = "user"."id") WHERE ("post"."content" = $1)',

 Line: 76 -      string: 'DELETE "user" FROM "user" INNER JOIN "post" ON ("post"."userId" = "user"."id") WHERE ("post"."content" = \'foo\')'

 Line: 79 -      text: 'DELETE `user` FROM `user` INNER JOIN `post` ON (`post`.`userId` = `user`.`id`) WHERE (`post`.`content` = ?)',

 Line: 80 -      string: 'DELETE `user` FROM `user` INNER JOIN `post` ON (`post`.`userId` = `user`.`id`) WHERE (`post`.`content` = \'foo\')'

 Line: 83 -      text: 'DELETE "user" FROM "user" INNER JOIN "post" ON ("post"."userId" = "user"."id") WHERE ("post"."content" = :1)',

 Line: 84 -      string: 'DELETE "user" FROM "user" INNER JOIN "post" ON ("post"."userId" = "user"."id") WHERE ("post"."content" = \'foo\')'

 Line: 90 -    query: post.delete().where({

 Line: 94 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = $1)',

 Line: 95 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'\')'

 Line: 98 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = $1)',

 Line: 99 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'\')'

 Line: 102 -      text  : 'DELETE FROM `post` WHERE (`post`.`content` = ?)',

 Line: 103 -      string: 'DELETE FROM `post` WHERE (`post`.`content` = \'\')'

 Line: 106 -      text  : 'DELETE FROM [post] WHERE ([post].[content] = @1)',

 Line: 107 -      string: "DELETE FROM [post] WHERE ([post].[content] = '')"

 Line: 110 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = :1)',

 Line: 111 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'\')'

 Line: 117 -    query: post.delete({

 Line: 121 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = $1)',

 Line: 122 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'\')'

 Line: 125 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = $1)',

 Line: 126 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'\')'

 Line: 129 -      text  : 'DELETE FROM `post` WHERE (`post`.`content` = ?)',

 Line: 130 -      string: 'DELETE FROM `post` WHERE (`post`.`content` = \'\')'

 Line: 133 -      text  : 'DELETE FROM [post] WHERE ([post].[content] = @1)',

 Line: 134 -      string: "DELETE FROM [post] WHERE ([post].[content] = '')"

 Line: 137 -      text  : 'DELETE FROM "post" WHERE ("post"."content" = :1)',

 Line: 138 -      string: 'DELETE FROM "post" WHERE ("post"."content" = \'\')'

 Line: 144 -    query: post.delete({

 Line: 148 -      text  : 'DELETE FROM "post" WHERE (("post"."content" = $1) OR ("post"."content" IS NULL))',

 Line: 149 -      string: 'DELETE FROM "post" WHERE (("post"."content" = \'\') OR ("post"."content" IS NULL))'

 Line: 152 -      text  : 'DELETE FROM "post" WHERE (("post"."content" = $1) OR ("post"."content" IS NULL))',

 Line: 153 -      string: 'DELETE FROM "post" WHERE (("post"."content" = \'\') OR ("post"."content" IS NULL))'

 Line: 156 -      text  : 'DELETE FROM `post` WHERE ((`post`.`content` = ?) OR (`post`.`content` IS NULL))',

 Line: 157 -      string: 'DELETE FROM `post` WHERE ((`post`.`content` = \'\') OR (`post`.`content` IS NULL))'

 Line: 160 -      text  : 'DELETE FROM [post] WHERE (([post].[content] = @1) OR ([post].[content] IS NULL))',

 Line: 161 -      string: "DELETE FROM [post] WHERE (([post].[content] = '') OR ([post].[content] IS NULL))"

 Line: 164 -      text  : 'DELETE FROM "post" WHERE (("post"."content" = :1) OR ("post"."content" IS NULL))',

 Line: 165 -      string: 'DELETE FROM "post" WHERE (("post"."content" = \'\') OR ("post"."content" IS NULL))'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/select-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -    query: post.select(post.id).select(post.content),

 Line: 11 -      text  : 'SELECT "post"."id", "post"."content" FROM "post"',

 Line: 12 -      string: 'SELECT "post"."id", "post"."content" FROM "post"'

 Line: 15 -      text  : 'SELECT "post"."id", "post"."content" FROM "post"',

 Line: 16 -      string: 'SELECT "post"."id", "post"."content" FROM "post"'

 Line: 19 -      text  : 'SELECT `post`.`id`, `post`.`content` FROM `post`',

 Line: 20 -      string: 'SELECT `post`.`id`, `post`.`content` FROM `post`'

 Line: 23 -      text  : 'SELECT [post].[id], [post].[content] FROM [post]',

 Line: 24 -      string: 'SELECT [post].[id], [post].[content] FROM [post]'

 Line: 27 -      text  : 'SELECT "post"."id", "post"."content" FROM "post"',

 Line: 28 -      string: 'SELECT "post"."id", "post"."content" FROM "post"'

 Line: 34 -    query: customerAlias.select(customerAlias.star()),

 Line: 36 -      text  : 'SELECT "customer"."id" AS "id_alias", "customer"."name" AS "name_alias", "customer"."age" AS "age_alias", "customer"."income" AS "income_alias", "customer"."metadata" AS "metadata_alias" FROM "customer"',

 Line: 37 -      string: 'SELECT "customer"."id" AS "id_alias", "customer"."name" AS "name_alias", "customer"."age" AS "age_alias", "customer"."income" AS "income_alias", "customer"."metadata" AS "metadata_alias" FROM "customer"'

 Line: 40 -      text  : 'SELECT "customer"."id" AS "id_alias", "customer"."name" AS "name_alias", "customer"."age" AS "age_alias", "customer"."income" AS "income_alias", "customer"."metadata" AS "metadata_alias" FROM "customer"',

 Line: 41 -      string: 'SELECT "customer"."id" AS "id_alias", "customer"."name" AS "name_alias", "customer"."age" AS "age_alias", "customer"."income" AS "income_alias", "customer"."metadata" AS "metadata_alias" FROM "customer"'

 Line: 44 -      text :  'SELECT `customer`.`id` AS `id_alias`, `customer`.`name` AS `name_alias`, `customer`.`age` AS `age_alias`, `customer`.`income` AS `income_alias`, `customer`.`metadata` AS `metadata_alias` FROM `customer`',

 Line: 45 -      string: 'SELECT `customer`.`id` AS `id_alias`, `customer`.`name` AS `name_alias`, `customer`.`age` AS `age_alias`, `customer`.`income` AS `income_alias`, `customer`.`metadata` AS `metadata_alias` FROM `customer`'

 Line: 48 -      text  : 'SELECT [customer].[id] AS [id_alias], [customer].[name] AS [name_alias], [customer].[age] AS [age_alias], [customer].[income] AS [income_alias], [customer].[metadata] AS [metadata_alias] FROM [customer]',

 Line: 49 -      string: 'SELECT [customer].[id] AS [id_alias], [customer].[name] AS [name_alias], [customer].[age] AS [age_alias], [customer].[income] AS [income_alias], [customer].[metadata] AS [metadata_alias] FROM [customer]'

 Line: 52 -      text  : 'SELECT "customer"."id" "id_alias", "customer"."name" "name_alias", "customer"."age" "age_alias", "customer"."income" "income_alias", "customer"."metadata" "metadata_alias" FROM "customer"',

 Line: 53 -      string: 'SELECT "customer"."id" "id_alias", "customer"."name" "name_alias", "customer"."age" "age_alias", "customer"."income" "income_alias", "customer"."metadata" "metadata_alias" FROM "customer"'

 Line: 58 -  // Test that we can generate a SELECT claus without a FROM clause

 Line: 60 -    query: Sql.select(),

 Line: 62 -      text  : 'SELECT ',

 Line: 63 -      string: 'SELECT '

 Line: 66 -      text  : 'SELECT ',

 Line: 67 -      string: 'SELECT '

 Line: 70 -      text  : 'SELECT ',

 Line: 71 -      string: 'SELECT '

 Line: 74 -      text  : 'SELECT ',

 Line: 75 -      string: 'SELECT '

 Line: 78 -      text  : 'SELECT ',

 Line: 79 -      string: 'SELECT '

 Line: 84 -  // Test that we can generate a SELECT claus without a FROM clause

 Line: 86 -    query: Sql.select("1"),

 Line: 88 -      text  : 'SELECT 1',

 Line: 89 -      string: 'SELECT 1'

 Line: 92 -      text  : 'SELECT 1',

 Line: 93 -      string: 'SELECT 1'

 Line: 96 -      text  : 'SELECT 1',

 Line: 97 -      string: 'SELECT 1'

 Line: 100 -      text  : 'SELECT 1',

 Line: 101 -      string: 'SELECT 1'

 Line: 104 -      text  : 'SELECT 1',

 Line: 105 -      string: 'SELECT 1'

 Line: 111 -    query: Sql.select("1").where("1=1"),

 Line: 113 -      text  : 'SELECT 1 WHERE (1=1)',

 Line: 114 -      string: 'SELECT 1 WHERE (1=1)'

 Line: 117 -      text  : 'SELECT 1 WHERE (1=1)',

 Line: 118 -      string: 'SELECT 1 WHERE (1=1)'

 Line: 121 -      text  : 'SELECT 1 WHERE (1=1)',

 Line: 122 -      string: 'SELECT 1 WHERE (1=1)'

 Line: 125 -      text  : 'SELECT 1 WHERE (1=1)',

 Line: 126 -      string: 'SELECT 1 WHERE (1=1)'

 Line: 129 -      text  : 'SELECT 1 WHERE (1=1)',

 Line: 130 -      string: 'SELECT 1 WHERE (1=1)'

 Line: 136 -    query: Sql.select(post.select(post.id)),

 Line: 138 -      text  : 'SELECT (SELECT "post"."id" FROM "post")',

 Line: 139 -      string: 'SELECT (SELECT "post"."id" FROM "post")'

 Line: 142 -      text  : 'SELECT (SELECT "post"."id" FROM "post")',

 Line: 143 -      string: 'SELECT (SELECT "post"."id" FROM "post")'

 Line: 146 -      text  : 'SELECT (SELECT `post`.`id` FROM `post`)',

 Line: 147 -      string: 'SELECT (SELECT `post`.`id` FROM `post`)'

 Line: 150 -      text  : 'SELECT (SELECT [post].[id] FROM [post])',

 Line: 151 -      string: 'SELECT (SELECT [post].[id] FROM [post])'

 Line: 154 -      text  : 'SELECT (SELECT "post"."id" FROM "post")',

 Line: 155 -      string: 'SELECT (SELECT "post"."id" FROM "post")'

 Line: 161 -    query: Sql.select(post.select(post.content).plus(post.select(post.content))),

 Line: 163 -      text  : 'SELECT ((SELECT "post"."content" FROM "post") + (SELECT "post"."content" FROM "post"))',

 Line: 164 -      string: 'SELECT ((SELECT "post"."content" FROM "post") + (SELECT "post"."content" FROM "post"))'

 Line: 167 -      text  : 'SELECT ((SELECT "post"."content" FROM "post") + (SELECT "post"."content" FROM "post"))',

 Line: 168 -      string: 'SELECT ((SELECT "post"."content" FROM "post") + (SELECT "post"."content" FROM "post"))'

 Line: 171 -      text  : 'SELECT ((SELECT `post`.`content` FROM `post`) + (SELECT `post`.`content` FROM `post`))',

 Line: 172 -      string: 'SELECT ((SELECT `post`.`content` FROM `post`) + (SELECT `post`.`content` FROM `post`))'

 Line: 175 -      text  : 'SELECT ((SELECT [post].[content] FROM [post]) + (SELECT [post].[content] FROM [post]))',

 Line: 176 -      string: 'SELECT ((SELECT [post].[content] FROM [post]) + (SELECT [post].[content] FROM [post]))'

 Line: 179 -      text  : 'SELECT ((SELECT "post"."content" FROM "post") + (SELECT "post"."content" FROM "post"))',

 Line: 180 -      string: 'SELECT ((SELECT "post"."content" FROM "post") + (SELECT "post"."content" FROM "post"))'

 Line: 186 -    query: post.select(post.id.as('col1')),

 Line: 188 -      text  : 'SELECT "post"."id" AS "col1" FROM "post"',

 Line: 189 -      string: 'SELECT "post"."id" AS "col1" FROM "post"'

 Line: 192 -      text  : 'SELECT "post"."id" AS "col1" FROM "post"',

 Line: 193 -      string: 'SELECT "post"."id" AS "col1" FROM "post"'

 Line: 196 -      text  : 'SELECT `post`.`id` AS `col1` FROM `post`',

 Line: 197 -      string: 'SELECT `post`.`id` AS `col1` FROM `post`'

 Line: 200 -      text  : 'SELECT [post].[id] AS [col1] FROM [post]',

 Line: 201 -      string: 'SELECT [post].[id] AS [col1] FROM [post]'

 Line: 204 -      text  : 'SELECT "post"."id" "col1" FROM "post"',

 Line: 205 -      string: 'SELECT "post"."id" "col1" FROM "post"'

 Line: 211 -    query: post.select(Sql.constant(4)),

 Line: 213 -      text  : 'SELECT $1 FROM "post"',

 Line: 214 -      string: 'SELECT 4 FROM "post"'

 Line: 217 -      text  : 'SELECT $1 FROM "post"',

 Line: 218 -      string: 'SELECT 4 FROM "post"'

 Line: 221 -      text  : 'SELECT ? FROM `post`',

 Line: 222 -      string: 'SELECT 4 FROM `post`'

 Line: 225 -      text  : 'SELECT @1 FROM [post]',

 Line: 226 -      string: 'SELECT 4 FROM [post]'

 Line: 229 -      text  : 'SELECT :1 FROM "post"',

 Line: 230 -      string: 'SELECT 4 FROM "post"'

 Line: 236 -    query: post.select(post.id,Sql.constant(4)),

 Line: 238 -      text  : 'SELECT "post"."id", $1 FROM "post"',

 Line: 239 -      string: 'SELECT "post"."id", 4 FROM "post"'

 Line: 242 -      text  : 'SELECT "post"."id", $1 FROM "post"',

 Line: 243 -      string: 'SELECT "post"."id", 4 FROM "post"'

 Line: 246 -      text  : 'SELECT `post`.`id`, ? FROM `post`',

 Line: 247 -      string: 'SELECT `post`.`id`, 4 FROM `post`'

 Line: 250 -      text  : 'SELECT [post].[id], @1 FROM [post]',

 Line: 251 -      string: 'SELECT [post].[id], 4 FROM [post]'

 Line: 254 -      text  : 'SELECT "post"."id", :1 FROM "post"',

 Line: 255 -      string: 'SELECT "post"."id", 4 FROM "post"'

 Line: 261 -    query: post.select(Sql.constant(4).as('col1')),

 Line: 263 -      text  : 'SELECT $1 AS "col1" FROM "post"',

 Line: 264 -      string: 'SELECT 4 AS "col1" FROM "post"'

 Line: 267 -      text  : 'SELECT $1 AS "col1" FROM "post"',

 Line: 268 -      string: 'SELECT 4 AS "col1" FROM "post"'

 Line: 271 -      text  : 'SELECT ? AS `col1` FROM `post`',

 Line: 272 -      string: 'SELECT 4 AS `col1` FROM `post`'

 Line: 275 -      text  : 'SELECT @1 AS [col1] FROM [post]',

 Line: 276 -      string: 'SELECT 4 AS [col1] FROM [post]'

 Line: 279 -      text  : 'SELECT :1 "col1" FROM "post"',

 Line: 280 -      string: 'SELECT 4 "col1" FROM "post"'

 Line: 286 -    query: post.select(Sql.constant(4).plus(5)),

 Line: 288 -      text  : 'SELECT ($1 + $2) FROM "post"',

 Line: 289 -      string: 'SELECT (4 + 5) FROM "post"'

 Line: 292 -      text  : 'SELECT ($1 + $2) FROM "post"',

 Line: 293 -      string: 'SELECT (4 + 5) FROM "post"'

 Line: 296 -      text  : 'SELECT (? + ?) FROM `post`',

 Line: 297 -      string: 'SELECT (4 + 5) FROM `post`'

 Line: 300 -      text  : 'SELECT (@1 + @2) FROM [post]',

 Line: 301 -      string: 'SELECT (4 + 5) FROM [post]'

 Line: 304 -      text  : 'SELECT (:1 + :2) FROM "post"',

 Line: 305 -      string: 'SELECT (4 + 5) FROM "post"'

 Line: 311 -    query: post.select(Sql.constant(4).plus(5).as('col1')),

 Line: 313 -      text  : 'SELECT ($1 + $2) AS "col1" FROM "post"',

 Line: 314 -      string: 'SELECT (4 + 5) AS "col1" FROM "post"'

 Line: 317 -      text  : 'SELECT ($1 + $2) AS "col1" FROM "post"',

 Line: 318 -      string: 'SELECT (4 + 5) AS "col1" FROM "post"'

 Line: 321 -      text  : 'SELECT (? + ?) AS `col1` FROM `post`',

 Line: 322 -      string: 'SELECT (4 + 5) AS `col1` FROM `post`'

 Line: 325 -      text  : 'SELECT (@1 + @2) AS [col1] FROM [post]',

 Line: 326 -      string: 'SELECT (4 + 5) AS [col1] FROM [post]'

 Line: 329 -      text  : 'SELECT (:1 + :2) "col1" FROM "post"',

 Line: 330 -      string: 'SELECT (4 + 5) "col1" FROM "post"'

 Line: 336 -    query: post.select(Sql.constant(4),Sql.constant("abc"),Sql.constant(true)),

 Line: 338 -      text  : 'SELECT $1, $2, $3 FROM "post"',

 Line: 339 -      string: 'SELECT 4, \'abc\', TRUE FROM "post"'

 Line: 342 -      text  : 'SELECT $1, $2, $3 FROM "post"',

 Line: 343 -      string: 'SELECT 4, \'abc\', 1 FROM "post"'

 Line: 346 -      text  : 'SELECT ?, ?, ? FROM `post`',

 Line: 347 -      string: 'SELECT 4, \'abc\', TRUE FROM `post`'

 Line: 350 -      text  : 'SELECT @1, @2, @3 FROM [post]',

 Line: 351 -      string: 'SELECT 4, \'abc\', TRUE FROM [post]'

 Line: 354 -      text  : 'SELECT :1, :2, :3 FROM "post"',

 Line: 355 -      string: 'SELECT 4, \'abc\', TRUE FROM "post"'

 Line: 361 -    query: post.select(Sql.constant(1).sum()),

 Line: 363 -      text  : 'SELECT SUM($1) AS "constant_sum" FROM "post"',

 Line: 364 -      string: 'SELECT SUM(1) AS "constant_sum" FROM "post"'

 Line: 367 -      text  : 'SELECT SUM($1) AS "constant_sum" FROM "post"',

 Line: 368 -      string: 'SELECT SUM(1) AS "constant_sum" FROM "post"'

 Line: 371 -      text  : 'SELECT SUM(?) AS `constant_sum` FROM `post`',

 Line: 372 -      string: 'SELECT SUM(1) AS `constant_sum` FROM `post`'

 Line: 375 -      text  : 'SELECT SUM(@1) AS [constant_sum] FROM [post]',

 Line: 376 -      string: 'SELECT SUM(1) AS [constant_sum] FROM [post]'

 Line: 379 -      text  : 'SELECT SUM(:1) "constant_sum" FROM "post"',

 Line: 380 -      string: 'SELECT SUM(1) "constant_sum" FROM "post"'

 Line: 386 -    query: Sql.select(post.select(post.id).as("column1")),

 Line: 388 -      text  : 'SELECT (SELECT "post"."id" FROM "post") AS "column1"',

 Line: 389 -      string: 'SELECT (SELECT "post"."id" FROM "post") AS "column1"'

 Line: 392 -      text  : 'SELECT (SELECT "post"."id" FROM "post") AS "column1"',

 Line: 393 -      string: 'SELECT (SELECT "post"."id" FROM "post") AS "column1"'

 Line: 396 -      text  : 'SELECT (SELECT `post`.`id` FROM `post`) AS `column1`',

 Line: 397 -      string: 'SELECT (SELECT `post`.`id` FROM `post`) AS `column1`'

 Line: 400 -      text  : 'SELECT (SELECT [post].[id] FROM [post]) AS [column1]',

 Line: 401 -      string: 'SELECT (SELECT [post].[id] FROM [post]) AS [column1]'

 Line: 404 -      text  : 'SELECT (SELECT "post"."id" FROM "post") "column1"',

 Line: 405 -      string: 'SELECT (SELECT "post"."id" FROM "post") "column1"'

 Line: 411 -    query: Sql.select(post.select(post.count()).as("column1")),

 Line: 413 -      text  : 'SELECT (SELECT COUNT("post".*) AS "post_count" FROM "post") AS "column1"',

 Line: 414 -      string: 'SELECT (SELECT COUNT("post".*) AS "post_count" FROM "post") AS "column1"'

 Line: 417 -      text  : 'SELECT (SELECT COUNT("post".*) AS "post_count" FROM "post") AS "column1"',

 Line: 418 -      string: 'SELECT (SELECT COUNT("post".*) AS "post_count" FROM "post") AS "column1"'

 Line: 421 -      text  : 'SELECT (SELECT COUNT(*) AS `post_count` FROM `post`) AS `column1`',

 Line: 422 -      string: 'SELECT (SELECT COUNT(*) AS `post_count` FROM `post`) AS `column1`'

 Line: 425 -      text  : 'SELECT (SELECT COUNT(*) AS [post_count] FROM [post]) AS [column1]',

 Line: 426 -      string: 'SELECT (SELECT COUNT(*) AS [post_count] FROM [post]) AS [column1]'

 Line: 429 -      text  : 'SELECT (SELECT COUNT(*) "post_count" FROM "post") "column1"',

 Line: 430 -      string: 'SELECT (SELECT COUNT(*) "post_count" FROM "post") "column1"'

 Line: 436 -    query: Sql.select(post.select(post.id).as("column1"),user.select(user.id).as("column2")),

 Line: 438 -      text  : 'SELECT (SELECT "post"."id" FROM "post") AS "column1", (SELECT "user"."id" FROM "user") AS "column2"',

 Line: 439 -      string: 'SELECT (SELECT "post"."id" FROM "post") AS "column1", (SELECT "user"."id" FROM "user") AS "column2"'

 Line: 442 -      text  : 'SELECT (SELECT "post"."id" FROM "post") AS "column1", (SELECT "user"."id" FROM "user") AS "column2"',

 Line: 443 -      string: 'SELECT (SELECT "post"."id" FROM "post") AS "column1", (SELECT "user"."id" FROM "user") AS "column2"'

 Line: 446 -      text  : 'SELECT (SELECT `post`.`id` FROM `post`) AS `column1`, (SELECT `user`.`id` FROM `user`) AS `column2`',

 Line: 447 -      string: 'SELECT (SELECT `post`.`id` FROM `post`) AS `column1`, (SELECT `user`.`id` FROM `user`) AS `column2`'

 Line: 450 -      text  : 'SELECT (SELECT [post].[id] FROM [post]) AS [column1], (SELECT [user].[id] FROM [user]) AS [column2]',

 Line: 451 -      string: 'SELECT (SELECT [post].[id] FROM [post]) AS [column1], (SELECT [user].[id] FROM [user]) AS [column2]'

 Line: 454 -      text  : 'SELECT (SELECT "post"."id" FROM "post") "column1", (SELECT "user"."id" FROM "user") "column2"',

 Line: 455 -      string: 'SELECT (SELECT "post"."id" FROM "post") "column1", (SELECT "user"."id" FROM "user") "column2"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/clause-ordering-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -  // FROM - SELECT

 Line: 8 -    query: user.from(user.join(post).on(user.id.equals(post.userId))).select(user.name, post.content),

 Line: 10 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 11 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 14 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 15 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 18 -      text  : 'SELECT `user`.`name`, `post`.`content` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`)',

 Line: 19 -      string: 'SELECT `user`.`name`, `post`.`content` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`)'

 Line: 22 -      text  : 'SELECT [user].[name], [post].[content] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId])',

 Line: 23 -      string: 'SELECT [user].[name], [post].[content] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId])'

 Line: 26 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")',

 Line: 27 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId")'

 Line: 32 -  // WHERE - FROM - SELECT

 Line: 34 -    query: user.where({

 Line: 38 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = $1)',

 Line: 39 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'\')'

 Line: 42 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = $1)',

 Line: 43 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'\')'

 Line: 46 -      text  : 'SELECT `user`.`id` FROM `user` WHERE (`user`.`name` = ?)',

 Line: 47 -      string: 'SELECT `user`.`id` FROM `user` WHERE (`user`.`name` = \'\')'

 Line: 50 -      text  : 'SELECT [user].[id] FROM [user] WHERE ([user].[name] = @1)',

 Line: 51 -      string: 'SELECT [user].[id] FROM [user] WHERE ([user].[name] = \'\')'

 Line: 54 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = :1)',

 Line: 55 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'\')'

 Line: 60 -  // SELECT - FROM - WHERE

 Line: 62 -    query: user

 Line: 69 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("user"."name" = $1)',

 Line: 70 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("user"."name" = \'\')'

 Line: 73 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("user"."name" = $1)',

 Line: 74 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("user"."name" = \'\')'

 Line: 77 -      text  : 'SELECT `user`.`name`, `post`.`content` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`) WHERE (`user`.`name` = ?)',

 Line: 78 -      string: 'SELECT `user`.`name`, `post`.`content` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`) WHERE (`user`.`name` = \'\')'

 Line: 81 -      text  : 'SELECT [user].[name], [post].[content] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId]) WHERE ([user].[name] = @1)',

 Line: 82 -      string: 'SELECT [user].[name], [post].[content] FROM [user] INNER JOIN [post] ON ([user].[id] = [post].[userId]) WHERE ([user].[name] = \'\')'

 Line: 85 -      text  : 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("user"."name" = :1)',

 Line: 86 -      string: 'SELECT "user"."name", "post"."content" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("user"."name" = \'\')'

 Line: 91 -  // SELECT - FROM - WHERE

 Line: 93 -    query: user.select(user.id).from(user).where({

 Line: 97 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = $1)',

 Line: 98 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'\')'

 Line: 101 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = $1)',

 Line: 102 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'\')'

 Line: 105 -      text  : 'SELECT `user`.`id` FROM `user` WHERE (`user`.`name` = ?)',

 Line: 106 -      string: 'SELECT `user`.`id` FROM `user` WHERE (`user`.`name` = \'\')'

 Line: 109 -      text  : 'SELECT [user].[id] FROM [user] WHERE ([user].[name] = @1)',

 Line: 110 -      string: 'SELECT [user].[id] FROM [user] WHERE ([user].[name] = \'\')'

 Line: 113 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = :1)',

 Line: 114 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'\')'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/distinct-on-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: user.select().distinctOn(user.id),

 Line: 9 -      text  : 'SELECT DISTINCT ON("user"."id") "user".* FROM "user"',

 Line: 10 -      string: 'SELECT DISTINCT ON("user"."id") "user".* FROM "user"'

 Line: 16 -    query: user.select(user.id,user.name).distinctOn(user.id),

 Line: 18 -      text  : 'SELECT DISTINCT ON("user"."id") "user"."id", "user"."name" FROM "user"',

 Line: 19 -      string: 'SELECT DISTINCT ON("user"."id") "user"."id", "user"."name" FROM "user"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/truncate-table-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: post.truncate(),

 Line: 12 -      text  : 'DELETE FROM "post"',

 Line: 13 -      string: 'DELETE FROM "post"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/tostring-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: post.content.equals(null),

 Line: 34 -    query: post.content.equals(3.14),

 Line: 60 -    query: post.content.equals('hello\''),

 Line: 86 -    query: post.content.equals([1, '2', null]),

 Line: 112 -    query: post.content.equals(new Date('Sat, 01 Jan 2000 00:00:00 GMT')),

 Line: 138 -    query: post.content.equals(new Date('Sat, 01 Jan 2000 00:00:00 GMT')),

 Line: 173 -    query: post.content.equals(customObject),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/for-share-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: post.select(post.star()).forShare(),

 Line: 9 -      text  : 'SELECT "post".* FROM "post" FOR SHARE',

 Line: 10 -      string: 'SELECT "post".* FROM "post" FOR SHARE'

 Line: 16 -    query: post.select(post.star()).from(post.join(user).on(user.id.equals(post.userId))).where(post.content.equals('foo')).forShare(),

 Line: 18 -      text  : 'SELECT "post".* FROM "post" INNER JOIN "user" ON ("user"."id" = "post"."userId") WHERE ("post"."content" = $1) FOR SHARE',

 Line: 19 -      string: 'SELECT "post".* FROM "post" INNER JOIN "user" ON ("user"."id" = "post"."userId") WHERE ("post"."content" = \'foo\') FOR SHARE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/order-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: post.select(post.content).order(post.content),

 Line: 9 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"',

 Line: 10 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"'

 Line: 13 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"',

 Line: 14 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"'

 Line: 17 -      text  : 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`',

 Line: 18 -      string: 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`'

 Line: 21 -      text  : 'SELECT [post].[content] FROM [post] ORDER BY [post].[content]',

 Line: 22 -      string: 'SELECT [post].[content] FROM [post] ORDER BY [post].[content]'

 Line: 25 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"',

 Line: 26 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"'

 Line: 32 -    query: post.select(post.content).order(post.content, post.userId.descending),

 Line: 34 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 35 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 38 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 39 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 42 -      text  : 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`, `post`.`userId` DESC',

 Line: 43 -      string: 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`, `post`.`userId` DESC'

 Line: 46 -      text  : 'SELECT [post].[content] FROM [post] ORDER BY [post].[content], [post].[userId] DESC',

 Line: 47 -      string: 'SELECT [post].[content] FROM [post] ORDER BY [post].[content], [post].[userId] DESC'

 Line: 50 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 51 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 57 -    query: post.select(post.content).order(post.content.asc, post.userId.desc),

 Line: 59 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 60 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 63 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 64 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 67 -      text  : 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`, `post`.`userId` DESC',

 Line: 68 -      string: 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`, `post`.`userId` DESC'

 Line: 71 -      text  : 'SELECT [post].[content] FROM [post] ORDER BY [post].[content], [post].[userId] DESC',

 Line: 72 -      string: 'SELECT [post].[content] FROM [post] ORDER BY [post].[content], [post].[userId] DESC'

 Line: 75 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 76 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 82 -    query: post.select(post.content).order([post.content, post.userId.descending]),

 Line: 84 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 85 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 88 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 89 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 92 -      text  : 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`, `post`.`userId` DESC',

 Line: 93 -      string: 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`, `post`.`userId` DESC'

 Line: 96 -      text  : 'SELECT [post].[content] FROM [post] ORDER BY [post].[content], [post].[userId] DESC',

 Line: 97 -      string: 'SELECT [post].[content] FROM [post] ORDER BY [post].[content], [post].[userId] DESC'

 Line: 100 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 101 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 107 -    query: post.select(post.content).order(post.content).order(post.userId.descending),

 Line: 109 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 110 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 113 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 114 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 117 -      text  : 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`, `post`.`userId` DESC',

 Line: 118 -      string: 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`, `post`.`userId` DESC'

 Line: 121 -      text  : 'SELECT [post].[content] FROM [post] ORDER BY [post].[content], [post].[userId] DESC',

 Line: 122 -      string: 'SELECT [post].[content] FROM [post] ORDER BY [post].[content], [post].[userId] DESC'

 Line: 125 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC',

 Line: 126 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content", "post"."userId" DESC'

 Line: 132 -    query: post.select(post.content.isNull()).order(post.content.isNull()),

 Line: 134 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)',

 Line: 135 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)'

 Line: 138 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)',

 Line: 139 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)'

 Line: 142 -      text  : 'SELECT (`post`.`content` IS NULL) FROM `post` ORDER BY (`post`.`content` IS NULL)',

 Line: 143 -      string: 'SELECT (`post`.`content` IS NULL) FROM `post` ORDER BY (`post`.`content` IS NULL)'

 Line: 146 -      text  : 'SELECT ([post].[content] IS NULL) FROM [post] ORDER BY ([post].[content] IS NULL)',

 Line: 147 -      string: 'SELECT ([post].[content] IS NULL) FROM [post] ORDER BY ([post].[content] IS NULL)'

 Line: 150 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)',

 Line: 151 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)'

 Line: 157 -    query: post.select(post.content.isNull()).order(post.content.isNull().descending()),

 Line: 159 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL) DESC',

 Line: 160 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL) DESC'

 Line: 163 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL) DESC',

 Line: 164 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL) DESC'

 Line: 167 -      text  : 'SELECT (`post`.`content` IS NULL) FROM `post` ORDER BY (`post`.`content` IS NULL) DESC',

 Line: 168 -      string: 'SELECT (`post`.`content` IS NULL) FROM `post` ORDER BY (`post`.`content` IS NULL) DESC'

 Line: 171 -      text  : 'SELECT ([post].[content] IS NULL) FROM [post] ORDER BY ([post].[content] IS NULL) DESC',

 Line: 172 -      string: 'SELECT ([post].[content] IS NULL) FROM [post] ORDER BY ([post].[content] IS NULL) DESC'

 Line: 175 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL) DESC',

 Line: 176 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL) DESC'

 Line: 182 -    query: post.select(post.content.isNull()).order(post.content.isNull()),

 Line: 184 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)',

 Line: 185 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)'

 Line: 188 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)',

 Line: 189 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)'

 Line: 192 -      text  : 'SELECT (`post`.`content` IS NULL) FROM `post` ORDER BY (`post`.`content` IS NULL)',

 Line: 193 -      string: 'SELECT (`post`.`content` IS NULL) FROM `post` ORDER BY (`post`.`content` IS NULL)'

 Line: 196 -      text  : 'SELECT ([post].[content] IS NULL) FROM [post] ORDER BY ([post].[content] IS NULL)',

 Line: 197 -      string: 'SELECT ([post].[content] IS NULL) FROM [post] ORDER BY ([post].[content] IS NULL)'

 Line: 200 -      text  : 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)',

 Line: 201 -      string: 'SELECT ("post"."content" IS NULL) FROM "post" ORDER BY ("post"."content" IS NULL)'

 Line: 207 -    query: post.select(sql.functions.RTRIM(post.content)).order(sql.functions.RTRIM(post.content)),

 Line: 209 -      text  : 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content")',

 Line: 210 -      string: 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content")'

 Line: 213 -      text  : 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content")',

 Line: 214 -      string: 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content")'

 Line: 217 -      text  : 'SELECT RTRIM(`post`.`content`) FROM `post` ORDER BY RTRIM(`post`.`content`)',

 Line: 218 -      string: 'SELECT RTRIM(`post`.`content`) FROM `post` ORDER BY RTRIM(`post`.`content`)'

 Line: 221 -      text  : 'SELECT RTRIM([post].[content]) FROM [post] ORDER BY RTRIM([post].[content])',

 Line: 222 -      string: 'SELECT RTRIM([post].[content]) FROM [post] ORDER BY RTRIM([post].[content])'

 Line: 225 -      text  : 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content")',

 Line: 226 -      string: 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content")'

 Line: 232 -    query: post.select(sql.functions.RTRIM(post.content)).order(sql.functions.RTRIM(post.content).descending()),

 Line: 234 -      text  : 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content") DESC',

 Line: 235 -      string: 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content") DESC'

 Line: 238 -      text  : 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content") DESC',

 Line: 239 -      string: 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content") DESC'

 Line: 242 -      text  : 'SELECT RTRIM(`post`.`content`) FROM `post` ORDER BY RTRIM(`post`.`content`) DESC',

 Line: 243 -      string: 'SELECT RTRIM(`post`.`content`) FROM `post` ORDER BY RTRIM(`post`.`content`) DESC'

 Line: 246 -      text  : 'SELECT RTRIM([post].[content]) FROM [post] ORDER BY RTRIM([post].[content]) DESC',

 Line: 247 -      string: 'SELECT RTRIM([post].[content]) FROM [post] ORDER BY RTRIM([post].[content]) DESC'

 Line: 250 -      text  : 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content") DESC',

 Line: 251 -      string: 'SELECT RTRIM("post"."content") FROM "post" ORDER BY RTRIM("post"."content") DESC'

 Line: 257 -    query: post.select(post.content).order(post.content.descending),

 Line: 259 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" DESC NULLS LAST',

 Line: 260 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" DESC NULLS LAST',

 Line: 266 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" DESC',

 Line: 267 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" DESC'

 Line: 270 -      text  : 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content` DESC',

 Line: 271 -      string: 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content` DESC'

 Line: 274 -      text  : 'SELECT [post].[content] FROM [post] ORDER BY [post].[content] DESC',

 Line: 275 -      string: 'SELECT [post].[content] FROM [post] ORDER BY [post].[content] DESC'

 Line: 278 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" DESC',

 Line: 279 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" DESC'

 Line: 285 -    query: post.select(post.content).order(post.content),

 Line: 287 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" NULLS LAST',

 Line: 288 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" NULLS LAST',

 Line: 294 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"',

 Line: 295 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"'

 Line: 298 -      text  : 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`',

 Line: 299 -      string: 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`'

 Line: 302 -      text  : 'SELECT [post].[content] FROM [post] ORDER BY [post].[content]',

 Line: 303 -      string: 'SELECT [post].[content] FROM [post] ORDER BY [post].[content]'

 Line: 306 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"',

 Line: 307 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"'

 Line: 313 -    query: post.select(post.content).order(post.content.asc),

 Line: 315 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" NULLS FIRST',

 Line: 316 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content" NULLS FIRST',

 Line: 322 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"',

 Line: 323 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"'

 Line: 326 -      text  : 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`',

 Line: 327 -      string: 'SELECT `post`.`content` FROM `post` ORDER BY `post`.`content`'

 Line: 330 -      text  : 'SELECT [post].[content] FROM [post] ORDER BY [post].[content]',

 Line: 331 -      string: 'SELECT [post].[content] FROM [post] ORDER BY [post].[content]'

 Line: 334 -      text  : 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"',

 Line: 335 -      string: 'SELECT "post"."content" FROM "post" ORDER BY "post"."content"'

 Line: 341 -    query: post.select(post.content).order([]),

 Line: 343 -      text  : 'SELECT "post"."content" FROM "post"',

 Line: 344 -      string: 'SELECT "post"."content" FROM "post"'

 Line: 347 -      text  : 'SELECT "post"."content" FROM "post"',

 Line: 348 -      string: 'SELECT "post"."content" FROM "post"'

 Line: 351 -      text  : 'SELECT `post`.`content` FROM `post`',

 Line: 352 -      string: 'SELECT `post`.`content` FROM `post`'

 Line: 355 -      text  : 'SELECT [post].[content] FROM [post]',

 Line: 356 -      string: 'SELECT [post].[content] FROM [post]'

 Line: 359 -      text  : 'SELECT "post"."content" FROM "post"',

 Line: 360 -      string: 'SELECT "post"."content" FROM "post"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/array-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: post.update({

 Line: 12 -      text  : 'UPDATE "post" SET "tags" = ("post"."tags" || ARRAY[$1])',

 Line: 13 -      string: 'UPDATE "post" SET "tags" = ("post"."tags" || ARRAY[\'nodejs\'])'

 Line: 19 -    query: post.select(

 Line: 23 -      text  : 'SELECT ("post"."tags" @> ARRAY[$1, $2]) FROM "post"',

 Line: 24 -      string: 'SELECT ("post"."tags" @> ARRAY[\'nodejs\', \'js\']) FROM "post"'

 Line: 30 -    query: post.select(

 Line: 34 -      text  : 'SELECT ("post"."tags" <@ ARRAY[$1, $2]) FROM "post"',

 Line: 35 -      string: 'SELECT ("post"."tags" <@ ARRAY[\'nodejs\', \'js\']) FROM "post"'

 Line: 41 -    query: post.select(

 Line: 45 -      text  : 'SELECT ("post"."tags" && ARRAY[$1, $2]) FROM "post"',

 Line: 46 -      string: 'SELECT ("post"."tags" && ARRAY[\'nodejs\', \'js\']) FROM "post"'

 Line: 52 -    query: post.select(post.tags.slice(2,3)),

 Line: 54 -      text  : 'SELECT ("post"."tags")[$1:$2] FROM "post"',

 Line: 55 -      string: 'SELECT ("post"."tags")[2:3] FROM "post"'

 Line: 61 -    query: post.select(post.tags.at(2)),

 Line: 63 -      text  : 'SELECT ("post"."tags")[$1] FROM "post"',

 Line: 64 -      string: 'SELECT ("post"."tags")[2] FROM "post"'

 Line: 71 -    query: post.select(Sql.array(1,2,3)),

 Line: 73 -      text  : 'SELECT ARRAY[$1, $2, $3] FROM "post"',

 Line: 74 -      string: 'SELECT ARRAY[1, 2, 3] FROM "post"'

 Line: 80 -    query: post.select(Sql.array(1,2,3).slice(2,3)),

 Line: 82 -      text  : 'SELECT (ARRAY[$1, $2, $3])[$4:$5] FROM "post"',

 Line: 83 -      string: 'SELECT (ARRAY[1, 2, 3])[2:3] FROM "post"'

 Line: 89 -    query: post.select(Sql.array(1,2,3).at(2)),

 Line: 91 -      text  : 'SELECT (ARRAY[$1, $2, $3])[$4] FROM "post"',

 Line: 92 -      string: 'SELECT (ARRAY[1, 2, 3])[2] FROM "post"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/table-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: user.select(user.id).from(user),

 Line: 8 -      text  : 'SELECT "user"."id" FROM "user"',

 Line: 9 -      string: 'SELECT "user"."id" FROM "user"'

 Line: 12 -      text  : 'SELECT "user"."id" FROM "user"',

 Line: 13 -      string: 'SELECT "user"."id" FROM "user"'

 Line: 16 -      text  : 'SELECT `user`.`id` FROM `user`',

 Line: 17 -      string: 'SELECT `user`.`id` FROM `user`'

 Line: 20 -      text  : 'SELECT [user].[id] FROM [user]',

 Line: 21 -      string: 'SELECT [user].[id] FROM [user]'

 Line: 24 -      text  : 'SELECT "user"."id" FROM "user"',

 Line: 25 -      string: 'SELECT "user"."id" FROM "user"'

 Line: 31 -    query: user.select(user.id, user.name).from(user),

 Line: 33 -      text  : 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 34 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 37 -      text  : 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 38 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 41 -      text  : 'SELECT `user`.`id`, `user`.`name` FROM `user`',

 Line: 42 -      string: 'SELECT `user`.`id`, `user`.`name` FROM `user`'

 Line: 45 -      text  : 'SELECT [user].[id], [user].[name] FROM [user]',

 Line: 46 -      string: 'SELECT [user].[id], [user].[name] FROM [user]'

 Line: 49 -      text  : 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 50 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 56 -    query: user.select(user.star()).from(user),

 Line: 58 -      text  : 'SELECT "user".* FROM "user"',

 Line: 59 -      string: 'SELECT "user".* FROM "user"'

 Line: 62 -      text  : 'SELECT "user".* FROM "user"',

 Line: 63 -      string: 'SELECT "user".* FROM "user"'

 Line: 66 -      text  : 'SELECT `user`.* FROM `user`',

 Line: 67 -      string: 'SELECT `user`.* FROM `user`'

 Line: 70 -      text  : 'SELECT [user].* FROM [user]',

 Line: 71 -      string: 'SELECT [user].* FROM [user]'

 Line: 74 -      text  : 'SELECT "user".* FROM "user"',

 Line: 75 -      string: 'SELECT "user".* FROM "user"'

 Line: 81 -    query: user.select(user.id, [ user.name ]).from(user),

 Line: 83 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 84 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 87 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 88 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 91 -      text: 'SELECT `user`.`id`, `user`.`name` FROM `user`',

 Line: 92 -      string: 'SELECT `user`.`id`, `user`.`name` FROM `user`'

 Line: 95 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 96 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 102 -    query: user.select([ user.id ], user.name).from(user),

 Line: 104 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 105 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 108 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 109 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 112 -      text: 'SELECT `user`.`id`, `user`.`name` FROM `user`',

 Line: 113 -      string: 'SELECT `user`.`id`, `user`.`name` FROM `user`'

 Line: 116 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 117 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 123 -    query: user.select([ user.id , user.name ]).from(user),

 Line: 125 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 126 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 129 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 130 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 133 -      text: 'SELECT `user`.`id`, `user`.`name` FROM `user`',

 Line: 134 -      string: 'SELECT `user`.`id`, `user`.`name` FROM `user`'

 Line: 137 -      text: 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 138 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 144 -    query: user.select(user.star(), user.star({ prefix: 'foo_' }), user.star({ prefix: 'bar_' })).from(user),

 Line: 146 -      text: 'SELECT "user".*, "user"."id" AS "foo_id", "user"."name" AS "foo_name", "user"."id" AS "bar_id", "user"."name" AS "bar_name" FROM "user"',

 Line: 147 -      string: 'SELECT "user".*, "user"."id" AS "foo_id", "user"."name" AS "foo_name", "user"."id" AS "bar_id", "user"."name" AS "bar_name" FROM "user"'

 Line: 150 -      text: 'SELECT "user".*, "user"."id" AS "foo_id", "user"."name" AS "foo_name", "user"."id" AS "bar_id", "user"."name" AS "bar_name" FROM "user"',

 Line: 151 -      string: 'SELECT "user".*, "user"."id" AS "foo_id", "user"."name" AS "foo_name", "user"."id" AS "bar_id", "user"."name" AS "bar_name" FROM "user"'

 Line: 154 -      text: 'SELECT `user`.*, `user`.`id` AS `foo_id`, `user`.`name` AS `foo_name`, `user`.`id` AS `bar_id`, `user`.`name` AS `bar_name` FROM `user`',

 Line: 155 -      string: 'SELECT `user`.*, `user`.`id` AS `foo_id`, `user`.`name` AS `foo_name`, `user`.`id` AS `bar_id`, `user`.`name` AS `bar_name` FROM `user`'

 Line: 158 -      text:   'SELECT "user".*, "user"."id" "foo_id", "user"."name" "foo_name", "user"."id" "bar_id", "user"."name" "bar_name" FROM "user"',

 Line: 159 -      string: 'SELECT "user".*, "user"."id" "foo_id", "user"."name" "foo_name", "user"."id" "bar_id", "user"."name" "bar_name" FROM "user"'

 Line: 165 -    query: user.select(user.id).from(user).where(user.name.equals('foo')),

 Line: 167 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = $1)',

 Line: 168 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'foo\')'

 Line: 171 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = $1)',

 Line: 172 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'foo\')'

 Line: 175 -      text  : 'SELECT `user`.`id` FROM `user` WHERE (`user`.`name` = ?)',

 Line: 176 -      string: 'SELECT `user`.`id` FROM `user` WHERE (`user`.`name` = \'foo\')'

 Line: 179 -      text  : 'SELECT [user].[id] FROM [user] WHERE ([user].[name] = @1)',

 Line: 180 -      string: 'SELECT [user].[id] FROM [user] WHERE ([user].[name] = \'foo\')'

 Line: 183 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = :1)',

 Line: 184 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" = \'foo\')'

 Line: 190 -    query: user.select(user.id).from(user).where(user.name.equals('foo').or(user.name.equals('bar'))),

 Line: 192 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = $1) OR ("user"."name" = $2))',

 Line: 193 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') OR ("user"."name" = \'bar\'))'

 Line: 196 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = $1) OR ("user"."name" = $2))',

 Line: 197 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') OR ("user"."name" = \'bar\'))'

 Line: 200 -      text  : 'SELECT `user`.`id` FROM `user` WHERE ((`user`.`name` = ?) OR (`user`.`name` = ?))',

 Line: 201 -      string: 'SELECT `user`.`id` FROM `user` WHERE ((`user`.`name` = \'foo\') OR (`user`.`name` = \'bar\'))'

 Line: 204 -      text  : 'SELECT [user].[id] FROM [user] WHERE (([user].[name] = @1) OR ([user].[name] = @2))',

 Line: 205 -      string: 'SELECT [user].[id] FROM [user] WHERE (([user].[name] = \'foo\') OR ([user].[name] = \'bar\'))'

 Line: 208 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = :1) OR ("user"."name" = :2))',

 Line: 209 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') OR ("user"."name" = \'bar\'))'

 Line: 215 -    query: user.select(user.id).from(user).where(user.name.equals('foo').and(user.name.equals('bar'))),

 Line: 217 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = $1) AND ("user"."name" = $2))',

 Line: 218 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') AND ("user"."name" = \'bar\'))'

 Line: 221 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = $1) AND ("user"."name" = $2))',

 Line: 222 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') AND ("user"."name" = \'bar\'))'

 Line: 225 -      text  : 'SELECT `user`.`id` FROM `user` WHERE ((`user`.`name` = ?) AND (`user`.`name` = ?))',

 Line: 226 -      string: 'SELECT `user`.`id` FROM `user` WHERE ((`user`.`name` = \'foo\') AND (`user`.`name` = \'bar\'))'

 Line: 229 -      text  : 'SELECT [user].[id] FROM [user] WHERE (([user].[name] = @1) AND ([user].[name] = @2))',

 Line: 230 -      string: 'SELECT [user].[id] FROM [user] WHERE (([user].[name] = \'foo\') AND ([user].[name] = \'bar\'))'

 Line: 233 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = :1) AND ("user"."name" = :2))',

 Line: 234 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') AND ("user"."name" = \'bar\'))'

 Line: 240 -    query: user.select(user.id).from(user).where(user.name.equals('foo')).or(user.name.equals('bar')),

 Line: 242 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = $1) OR ("user"."name" = $2))',

 Line: 243 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') OR ("user"."name" = \'bar\'))'

 Line: 246 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = $1) OR ("user"."name" = $2))',

 Line: 247 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') OR ("user"."name" = \'bar\'))'

 Line: 250 -      text  : 'SELECT `user`.`id` FROM `user` WHERE ((`user`.`name` = ?) OR (`user`.`name` = ?))',

 Line: 251 -      string: 'SELECT `user`.`id` FROM `user` WHERE ((`user`.`name` = \'foo\') OR (`user`.`name` = \'bar\'))'

 Line: 254 -      text  : 'SELECT [user].[id] FROM [user] WHERE (([user].[name] = @1) OR ([user].[name] = @2))',

 Line: 255 -      string: 'SELECT [user].[id] FROM [user] WHERE (([user].[name] = \'foo\') OR ([user].[name] = \'bar\'))'

 Line: 258 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = :1) OR ("user"."name" = :2))',

 Line: 259 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" = \'foo\') OR ("user"."name" = \'bar\'))'

 Line: 265 -    query: user.select(user.id).from(user).where(user.name.equals('foo')).or(user.name.equals('baz')).and(user.name.equals('bar')),

 Line: 267 -      text  : 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = $1) OR ("user"."name" = $2)) AND ("user"."name" = $3))',

 Line: 268 -      string: 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = \'foo\') OR ("user"."name" = \'baz\')) AND ("user"."name" = \'bar\'))'

 Line: 271 -      text  : 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = $1) OR ("user"."name" = $2)) AND ("user"."name" = $3))',

 Line: 272 -      string: 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = \'foo\') OR ("user"."name" = \'baz\')) AND ("user"."name" = \'bar\'))'

 Line: 275 -      text  : 'SELECT `user`.`id` FROM `user` WHERE (((`user`.`name` = ?) OR (`user`.`name` = ?)) AND (`user`.`name` = ?))',

 Line: 276 -      string: 'SELECT `user`.`id` FROM `user` WHERE (((`user`.`name` = \'foo\') OR (`user`.`name` = \'baz\')) AND (`user`.`name` = \'bar\'))'

 Line: 279 -      text  : 'SELECT [user].[id] FROM [user] WHERE ((([user].[name] = @1) OR ([user].[name] = @2)) AND ([user].[name] = @3))',

 Line: 280 -      string: 'SELECT [user].[id] FROM [user] WHERE ((([user].[name] = \'foo\') OR ([user].[name] = \'baz\')) AND ([user].[name] = \'bar\'))'

 Line: 283 -      text  : 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = :1) OR ("user"."name" = :2)) AND ("user"."name" = :3))',

 Line: 284 -      string: 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = \'foo\') OR ("user"."name" = \'baz\')) AND ("user"."name" = \'bar\'))'

 Line: 290 -    query: user.select(user.id).from(user).where(user.name.in(['foo', 'bar'])),

 Line: 292 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" IN ($1, $2))',

 Line: 293 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" IN (\'foo\', \'bar\'))'

 Line: 296 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" IN ($1, $2))',

 Line: 297 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" IN (\'foo\', \'bar\'))'

 Line: 300 -      text  : 'SELECT `user`.`id` FROM `user` WHERE (`user`.`name` IN (?, ?))',

 Line: 301 -      string: 'SELECT `user`.`id` FROM `user` WHERE (`user`.`name` IN (\'foo\', \'bar\'))'

 Line: 304 -      text  : 'SELECT [user].[id] FROM [user] WHERE ([user].[name] IN (@1, @2))',

 Line: 305 -      string: 'SELECT [user].[id] FROM [user] WHERE ([user].[name] IN (\'foo\', \'bar\'))'

 Line: 308 -      text  : 'SELECT "user"."id" FROM "user" WHERE ("user"."name" IN (:1, :2))',

 Line: 309 -      string: 'SELECT "user"."id" FROM "user" WHERE ("user"."name" IN (\'foo\', \'bar\'))'

 Line: 315 -    query: user.select(user.id).from(user).where(user.name.in(['foo', 'bar']).and(user.id.equals(1))),

 Line: 317 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" IN ($1, $2)) AND ("user"."id" = $3))',

 Line: 318 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" IN (\'foo\', \'bar\')) AND ("user"."id" = 1))'

 Line: 321 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" IN ($1, $2)) AND ("user"."id" = $3))',

 Line: 322 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" IN (\'foo\', \'bar\')) AND ("user"."id" = 1))'

 Line: 325 -      text  : 'SELECT `user`.`id` FROM `user` WHERE ((`user`.`name` IN (?, ?)) AND (`user`.`id` = ?))',

 Line: 326 -      string: 'SELECT `user`.`id` FROM `user` WHERE ((`user`.`name` IN (\'foo\', \'bar\')) AND (`user`.`id` = 1))'

 Line: 329 -      text  : 'SELECT [user].[id] FROM [user] WHERE (([user].[name] IN (@1, @2)) AND ([user].[id] = @3))',

 Line: 330 -      string: 'SELECT [user].[id] FROM [user] WHERE (([user].[name] IN (\'foo\', \'bar\')) AND ([user].[id] = 1))'

 Line: 333 -      text  : 'SELECT "user"."id" FROM "user" WHERE (("user"."name" IN (:1, :2)) AND ("user"."id" = :3))',

 Line: 334 -      string: 'SELECT "user"."id" FROM "user" WHERE (("user"."name" IN (\'foo\', \'bar\')) AND ("user"."id" = 1))'

 Line: 340 -    query: user.select(user.columns),

 Line: 342 -      text  : 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 343 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 346 -      text  : 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 347 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 350 -      text  : 'SELECT `user`.`id`, `user`.`name` FROM `user`',

 Line: 351 -      string: 'SELECT `user`.`id`, `user`.`name` FROM `user`'

 Line: 354 -      text  : 'SELECT [user].[id], [user].[name] FROM [user]',

 Line: 355 -      string: 'SELECT [user].[id], [user].[name] FROM [user]'

 Line: 358 -      text  : 'SELECT "user"."id", "user"."name" FROM "user"',

 Line: 359 -      string: 'SELECT "user"."id", "user"."name" FROM "user"'

 Line: 366 -    query: user

 Line: 374 -      text  : 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = $1) AND ("user"."id" = $2)) OR (("user"."name" = $3) AND ("user"."id" = $4)))',

 Line: 375 -      string: 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = \'boom\') AND ("user"."id" = 1)) OR (("user"."name" = \'bang\') AND ("user"."id" = 2)))'

 Line: 378 -      text  : 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = $1) AND ("user"."id" = $2)) OR (("user"."name" = $3) AND ("user"."id" = $4)))',

 Line: 379 -      string: 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = \'boom\') AND ("user"."id" = 1)) OR (("user"."name" = \'bang\') AND ("user"."id" = 2)))'

 Line: 382 -      text  : 'SELECT `user`.`id` FROM `user` WHERE (((`user`.`name` = ?) AND (`user`.`id` = ?)) OR ((`user`.`name` = ?) AND (`user`.`id` = ?)))',

 Line: 383 -      string: 'SELECT `user`.`id` FROM `user` WHERE (((`user`.`name` = \'boom\') AND (`user`.`id` = 1)) OR ((`user`.`name` = \'bang\') AND (`user`.`id` = 2)))'

 Line: 386 -      text  : 'SELECT [user].[id] FROM [user] WHERE ((([user].[name] = @1) AND ([user].[id] = @2)) OR (([user].[name] = @3) AND ([user].[id] = @4)))',

 Line: 387 -      string: 'SELECT [user].[id] FROM [user] WHERE ((([user].[name] = \'boom\') AND ([user].[id] = 1)) OR (([user].[name] = \'bang\') AND ([user].[id] = 2)))'

 Line: 390 -      text  : 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = :1) AND ("user"."id" = :2)) OR (("user"."name" = :3) AND ("user"."id" = :4)))',

 Line: 391 -      string: 'SELECT "user"."id" FROM "user" WHERE ((("user"."name" = \'boom\') AND ("user"."id" = 1)) OR (("user"."name" = \'bang\') AND ("user"."id" = 2)))'

 Line: 397 -    query: user.select(user.name.as('user name'), user.id.as('user id')).from(user),

 Line: 399 -      text  : 'SELECT "user"."name" AS "user name", "user"."id" AS "user id" FROM "user"',

 Line: 400 -      string: 'SELECT "user"."name" AS "user name", "user"."id" AS "user id" FROM "user"'

 Line: 403 -      text  : 'SELECT "user"."name" AS "user name", "user"."id" AS "user id" FROM "user"',

 Line: 404 -      string: 'SELECT "user"."name" AS "user name", "user"."id" AS "user id" FROM "user"'

 Line: 407 -      text  : 'SELECT `user`.`name` AS `user name`, `user`.`id` AS `user id` FROM `user`',

 Line: 408 -      string: 'SELECT `user`.`name` AS `user name`, `user`.`id` AS `user id` FROM `user`'

 Line: 411 -      text  : 'SELECT [user].[name] AS [user name], [user].[id] AS [user id] FROM [user]',

 Line: 412 -      string: 'SELECT [user].[name] AS [user name], [user].[id] AS [user id] FROM [user]'

 Line: 415 -      text  : 'SELECT "user"."name" "user name", "user"."id" "user id" FROM "user"',

 Line: 416 -      string: 'SELECT "user"."name" "user name", "user"."id" "user id" FROM "user"'

 Line: 422 -    query: user.select(user.name.as('user name')).from(user).where(user.name.equals('brian')),

 Line: 424 -      text  : 'SELECT "user"."name" AS "user name" FROM "user" WHERE ("user"."name" = $1)',

 Line: 425 -      string: 'SELECT "user"."name" AS "user name" FROM "user" WHERE ("user"."name" = \'brian\')'

 Line: 428 -      text  : 'SELECT "user"."name" AS "user name" FROM "user" WHERE ("user"."name" = $1)',

 Line: 429 -      string: 'SELECT "user"."name" AS "user name" FROM "user" WHERE ("user"."name" = \'brian\')'

 Line: 432 -      text  : 'SELECT `user`.`name` AS `user name` FROM `user` WHERE (`user`.`name` = ?)',

 Line: 433 -      string: 'SELECT `user`.`name` AS `user name` FROM `user` WHERE (`user`.`name` = \'brian\')'

 Line: 436 -      text  : 'SELECT [user].[name] AS [user name] FROM [user] WHERE ([user].[name] = @1)',

 Line: 437 -      string: 'SELECT [user].[name] AS [user name] FROM [user] WHERE ([user].[name] = \'brian\')'

 Line: 440 -      text  : 'SELECT "user"."name" "user name" FROM "user" WHERE ("user"."name" = :1)',

 Line: 441 -      string: 'SELECT "user"."name" "user name" FROM "user" WHERE ("user"."name" = \'brian\')'

 Line: 447 -    query: user.select(user.name).from(user).where(user.name.equals('brian')),

 Line: 449 -      text  : 'SELECT "user"."name" FROM "user" WHERE ("user"."name" = $1)',

 Line: 450 -      string: 'SELECT "user"."name" FROM "user" WHERE ("user"."name" = \'brian\')'

 Line: 453 -      text  : 'SELECT "user"."name" FROM "user" WHERE ("user"."name" = $1)',

 Line: 454 -      string: 'SELECT "user"."name" FROM "user" WHERE ("user"."name" = \'brian\')'

 Line: 457 -      text  : 'SELECT `user`.`name` FROM `user` WHERE (`user`.`name` = ?)',

 Line: 458 -      string: 'SELECT `user`.`name` FROM `user` WHERE (`user`.`name` = \'brian\')'

 Line: 461 -      text  : 'SELECT [user].[name] FROM [user] WHERE ([user].[name] = @1)',

 Line: 462 -      string: 'SELECT [user].[name] FROM [user] WHERE ([user].[name] = \'brian\')'

 Line: 465 -      text  : 'SELECT "user"."name" FROM "user" WHERE ("user"."name" = :1)',

 Line: 466 -      string: 'SELECT "user"."name" FROM "user" WHERE ("user"."name" = \'brian\')'

 Line: 472 -    query: user.select('name').from('user').where('name <> NULL'),

 Line: 474 -      text  : 'SELECT name FROM user WHERE (name <> NULL)',

 Line: 475 -      string: 'SELECT name FROM user WHERE (name <> NULL)'

 Line: 478 -      text  : 'SELECT name FROM user WHERE (name <> NULL)',

 Line: 479 -      string: 'SELECT name FROM user WHERE (name <> NULL)'

 Line: 482 -      text  : 'SELECT name FROM user WHERE (name <> NULL)',

 Line: 483 -      string: 'SELECT name FROM user WHERE (name <> NULL)'

 Line: 486 -      text  : 'SELECT name FROM user WHERE (name <> NULL)',

 Line: 487 -      string: 'SELECT name FROM user WHERE (name <> NULL)'

 Line: 490 -      text  : 'SELECT name FROM user WHERE (name <> NULL)',

 Line: 491 -      string: 'SELECT name FROM user WHERE (name <> NULL)'

 Line: 497 -    query: user.select('name,id').from('user').where('name <> NULL'),

 Line: 499 -      text  : 'SELECT name,id FROM user WHERE (name <> NULL)',

 Line: 500 -      string: 'SELECT name,id FROM user WHERE (name <> NULL)'

 Line: 503 -      text  : 'SELECT name,id FROM user WHERE (name <> NULL)',

 Line: 504 -      string: 'SELECT name,id FROM user WHERE (name <> NULL)'

 Line: 507 -      text  : 'SELECT name,id FROM user WHERE (name <> NULL)',

 Line: 508 -      string: 'SELECT name,id FROM user WHERE (name <> NULL)'

 Line: 511 -      text  : 'SELECT name,id FROM user WHERE (name <> NULL)',

 Line: 512 -      string: 'SELECT name,id FROM user WHERE (name <> NULL)'

 Line: 515 -      text  : 'SELECT name,id FROM user WHERE (name <> NULL)',

 Line: 516 -      string: 'SELECT name,id FROM user WHERE (name <> NULL)'

 Line: 522 -    query: user.select('name', 'id').from('user').where('name <> NULL'),

 Line: 524 -      text  : 'SELECT name, id FROM user WHERE (name <> NULL)',

 Line: 525 -      string: 'SELECT name, id FROM user WHERE (name <> NULL)'

 Line: 528 -      text  : 'SELECT name, id FROM user WHERE (name <> NULL)',

 Line: 529 -      string: 'SELECT name, id FROM user WHERE (name <> NULL)'

 Line: 532 -      text  : 'SELECT name, id FROM user WHERE (name <> NULL)',

 Line: 533 -      string: 'SELECT name, id FROM user WHERE (name <> NULL)'

 Line: 536 -      text  : 'SELECT name, id FROM user WHERE (name <> NULL)',

 Line: 537 -      string: 'SELECT name, id FROM user WHERE (name <> NULL)'

 Line: 540 -      text  : 'SELECT name, id FROM user WHERE (name <> NULL)',

 Line: 541 -      string: 'SELECT name, id FROM user WHERE (name <> NULL)'

 Line: 547 -    query: user.select('name', 'id').from('user').where('name <> NULL').and('id <> NULL'),

 Line: 549 -      text  : 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))',

 Line: 550 -      string: 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))'

 Line: 553 -      text  : 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))',

 Line: 554 -      string: 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))'

 Line: 557 -      text  : 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))',

 Line: 558 -      string: 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))'

 Line: 561 -      text  : 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))',

 Line: 562 -      string: 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))'

 Line: 565 -      text  : 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))',

 Line: 566 -      string: 'SELECT name, id FROM user WHERE ((name <> NULL) AND (id <> NULL))'

 Line: 572 -    query: user.select('name').from('user').where({

 Line: 576 -      text  : 'SELECT name FROM user WHERE ("user"."name" = $1)',

 Line: 577 -      string: 'SELECT name FROM user WHERE ("user"."name" = \'brian\')'

 Line: 580 -      text  : 'SELECT name FROM user WHERE ("user"."name" = $1)',

 Line: 581 -      string: 'SELECT name FROM user WHERE ("user"."name" = \'brian\')'

 Line: 584 -      text  : 'SELECT name FROM user WHERE (`user`.`name` = ?)',

 Line: 585 -      string: 'SELECT name FROM user WHERE (`user`.`name` = \'brian\')'

 Line: 588 -      text  : 'SELECT name FROM user WHERE ([user].[name] = @1)',

 Line: 589 -      string: 'SELECT name FROM user WHERE ([user].[name] = \'brian\')'

 Line: 592 -      text  : 'SELECT name FROM user WHERE ("user"."name" = :1)',

 Line: 593 -      string: 'SELECT name FROM user WHERE ("user"."name" = \'brian\')'

 Line: 599 -    query: user.select('name').from('user').where({

 Line: 604 -      text  : 'SELECT name FROM user WHERE (("user"."name" = $1) AND ("user"."id" = $2))',

 Line: 605 -      string: 'SELECT name FROM user WHERE (("user"."name" = \'brian\') AND ("user"."id" = 1))'

 Line: 608 -      text  : 'SELECT name FROM user WHERE (("user"."name" = $1) AND ("user"."id" = $2))',

 Line: 609 -      string: 'SELECT name FROM user WHERE (("user"."name" = \'brian\') AND ("user"."id" = 1))'

 Line: 612 -      text  : 'SELECT name FROM user WHERE ((`user`.`name` = ?) AND (`user`.`id` = ?))',

 Line: 613 -      string: 'SELECT name FROM user WHERE ((`user`.`name` = \'brian\') AND (`user`.`id` = 1))'

 Line: 616 -      text  : 'SELECT name FROM user WHERE (([user].[name] = @1) AND ([user].[id] = @2))',

 Line: 617 -      string: 'SELECT name FROM user WHERE (([user].[name] = \'brian\') AND ([user].[id] = 1))'

 Line: 620 -      text  : 'SELECT name FROM user WHERE (("user"."name" = :1) AND ("user"."id" = :2))',

 Line: 621 -      string: 'SELECT name FROM user WHERE (("user"."name" = \'brian\') AND ("user"."id" = 1))'

 Line: 627 -    query: user.select(user.name.as('quote"quote"tick`tick`')),

 Line: 629 -      text  : 'SELECT "user"."name" AS "quote""quote""tick`tick`" FROM "user"',

 Line: 630 -      string: 'SELECT "user"."name" AS "quote""quote""tick`tick`" FROM "user"'

 Line: 633 -      text  : 'SELECT "user"."name" AS "quote""quote""tick`tick`" FROM "user"',

 Line: 634 -      string: 'SELECT "user"."name" AS "quote""quote""tick`tick`" FROM "user"'

 Line: 637 -      text  : 'SELECT `user`.`name` AS `quote"quote"tick``tick``` FROM `user`',

 Line: 638 -      string: 'SELECT `user`.`name` AS `quote"quote"tick``tick``` FROM `user`'

 Line: 641 -      text  : 'SELECT [user].[name] AS [quote"quote"tick`tick`] FROM [user]',

 Line: 642 -      string: 'SELECT [user].[name] AS [quote"quote"tick`tick`] FROM [user]'

 Line: 645 -      text  : 'SELECT "user"."name" "quote""quote""tick`tick`" FROM "user"',

 Line: 646 -      string: 'SELECT "user"."name" "quote""quote""tick`tick`" FROM "user"'

 Line: 652 -    query: user.select(user.star()).where(user.id.in(user.subQuery().select(user.id))),

 Line: 654 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" IN (SELECT "user"."id" FROM "user"))',

 Line: 655 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" IN (SELECT "user"."id" FROM "user"))'

 Line: 658 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" IN (SELECT "user"."id" FROM "user"))',

 Line: 659 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" IN (SELECT "user"."id" FROM "user"))'

 Line: 662 -      text  : 'SELECT `user`.* FROM `user` WHERE (`user`.`id` IN (SELECT `user`.`id` FROM `user`))',

 Line: 663 -      string: 'SELECT `user`.* FROM `user` WHERE (`user`.`id` IN (SELECT `user`.`id` FROM `user`))'

 Line: 666 -      text  : 'SELECT [user].* FROM [user] WHERE ([user].[id] IN (SELECT [user].[id] FROM [user]))',

 Line: 667 -      string: 'SELECT [user].* FROM [user] WHERE ([user].[id] IN (SELECT [user].[id] FROM [user]))'

 Line: 670 -      text  : 'SELECT "user".* FROM "user" WHERE ("user"."id" IN (SELECT "user"."id" FROM "user"))',

 Line: 671 -      string: 'SELECT "user".* FROM "user" WHERE ("user"."id" IN (SELECT "user"."id" FROM "user"))'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/in-clause-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: post.select(post.star()).where(post.id.in([])),

 Line: 8 -      text  : 'SELECT "post".* FROM "post" WHERE (1=0)',

 Line: 9 -      string: 'SELECT "post".* FROM "post" WHERE (1=0)'

 Line: 12 -      text  : 'SELECT "post".* FROM "post" WHERE (1=0)',

 Line: 13 -      string: 'SELECT "post".* FROM "post" WHERE (1=0)'

 Line: 16 -      text  : 'SELECT `post`.* FROM `post` WHERE (1=0)',

 Line: 17 -      string: 'SELECT `post`.* FROM `post` WHERE (1=0)'

 Line: 20 -      text  : 'SELECT [post].* FROM [post] WHERE (1=0)',

 Line: 21 -      string: 'SELECT [post].* FROM [post] WHERE (1=0)'

 Line: 24 -      text  : 'SELECT "post".* FROM "post" WHERE (1=0)',

 Line: 25 -      string: 'SELECT "post".* FROM "post" WHERE (1=0)'

 Line: 31 -    query: post.select(post.star()).where(post.id.in([1])),

 Line: 33 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN ($1))',

 Line: 34 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1))'

 Line: 37 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN ($1))',

 Line: 38 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1))'

 Line: 41 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IN (?))',

 Line: 42 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IN (1))'

 Line: 45 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] IN (@1))',

 Line: 46 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] IN (1))'

 Line: 49 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (:1))',

 Line: 50 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1))'

 Line: 56 -    query: post.select(post.star()).where(post.id.in([null])),

 Line: 58 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)',

 Line: 59 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)'

 Line: 62 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)',

 Line: 63 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)'

 Line: 66 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IS NULL)',

 Line: 67 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IS NULL)'

 Line: 70 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] IS NULL)',

 Line: 71 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] IS NULL)'

 Line: 74 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)',

 Line: 75 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)'

 Line: 81 -    query: post.select(post.star()).where(post.id.in([1, 2])),

 Line: 83 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN ($1, $2))',

 Line: 84 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2))'

 Line: 87 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN ($1, $2))',

 Line: 88 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2))'

 Line: 91 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IN (?, ?))',

 Line: 92 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IN (1, 2))'

 Line: 95 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] IN (@1, @2))',

 Line: 96 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] IN (1, 2))'

 Line: 99 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (:1, :2))',

 Line: 100 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2))'

 Line: 106 -    query: post.select(post.star()).where(post.id.in([null, null])),

 Line: 108 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)',

 Line: 109 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)'

 Line: 112 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)',

 Line: 113 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)'

 Line: 116 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IS NULL)',

 Line: 117 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IS NULL)'

 Line: 120 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] IS NULL)',

 Line: 121 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] IS NULL)'

 Line: 124 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)',

 Line: 125 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NULL)'

 Line: 131 -    query: post.select(post.star()).where(post.id.in([1, null, 2])),

 Line: 133 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN ($1, $2) OR "post"."id" IS NULL)',

 Line: 134 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2) OR "post"."id" IS NULL)'

 Line: 137 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN ($1, $2) OR "post"."id" IS NULL)',

 Line: 138 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2) OR "post"."id" IS NULL)'

 Line: 141 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IN (?, ?) OR `post`.`id` IS NULL)',

 Line: 142 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IN (1, 2) OR `post`.`id` IS NULL)'

 Line: 145 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] IN (@1, @2) OR [post].[id] IS NULL)',

 Line: 146 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] IN (1, 2) OR [post].[id] IS NULL)'

 Line: 149 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (:1, :2) OR "post"."id" IS NULL)',

 Line: 150 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2) OR "post"."id" IS NULL)'

 Line: 156 -    query: post.select(post.star()).where(post.id.in([1, null, 2, null])),

 Line: 158 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN ($1, $2) OR "post"."id" IS NULL)',

 Line: 159 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2) OR "post"."id" IS NULL)'

 Line: 162 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN ($1, $2) OR "post"."id" IS NULL)',

 Line: 163 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2) OR "post"."id" IS NULL)'

 Line: 166 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IN (?, ?) OR `post`.`id` IS NULL)',

 Line: 167 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IN (1, 2) OR `post`.`id` IS NULL)'

 Line: 170 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] IN (@1, @2) OR [post].[id] IS NULL)',

 Line: 171 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] IN (1, 2) OR [post].[id] IS NULL)'

 Line: 174 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (:1, :2) OR "post"."id" IS NULL)',

 Line: 175 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IN (1, 2) OR "post"."id" IS NULL)'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/not-in-clause-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: post.select(post.star()).where(post.id.notIn([])),

 Line: 8 -      text  : 'SELECT "post".* FROM "post" WHERE (1=1)',

 Line: 9 -      string: 'SELECT "post".* FROM "post" WHERE (1=1)'

 Line: 12 -      text  : 'SELECT "post".* FROM "post" WHERE (1=1)',

 Line: 13 -      string: 'SELECT "post".* FROM "post" WHERE (1=1)'

 Line: 16 -      text  : 'SELECT `post`.* FROM `post` WHERE (1=1)',

 Line: 17 -      string: 'SELECT `post`.* FROM `post` WHERE (1=1)'

 Line: 20 -      text  : 'SELECT [post].* FROM [post] WHERE (1=1)',

 Line: 21 -      string: 'SELECT [post].* FROM [post] WHERE (1=1)'

 Line: 24 -      text  : 'SELECT "post".* FROM "post" WHERE (1=1)',

 Line: 25 -      string: 'SELECT "post".* FROM "post" WHERE (1=1)'

 Line: 31 -    query: post.select(post.star()).where(post.id.notIn([1])),

 Line: 33 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN ($1))',

 Line: 34 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN (1))'

 Line: 37 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN ($1))',

 Line: 38 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN (1))'

 Line: 41 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` NOT IN (?))',

 Line: 42 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` NOT IN (1))'

 Line: 45 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] NOT IN (@1))',

 Line: 46 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] NOT IN (1))'

 Line: 49 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN (:1))',

 Line: 50 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN (1))'

 Line: 56 -    query: post.select(post.star()).where(post.id.notIn([null])),

 Line: 58 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)',

 Line: 59 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)'

 Line: 62 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)',

 Line: 63 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)'

 Line: 66 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IS NOT NULL)',

 Line: 67 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IS NOT NULL)'

 Line: 70 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] IS NOT NULL)',

 Line: 71 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] IS NOT NULL)'

 Line: 74 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)',

 Line: 75 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)'

 Line: 81 -    query: post.select(post.star()).where(post.id.notIn([1, 2])),

 Line: 83 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN ($1, $2))',

 Line: 84 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN (1, 2))'

 Line: 87 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN ($1, $2))',

 Line: 88 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN (1, 2))'

 Line: 91 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` NOT IN (?, ?))',

 Line: 92 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` NOT IN (1, 2))'

 Line: 95 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] NOT IN (@1, @2))',

 Line: 96 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] NOT IN (1, 2))'

 Line: 99 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN (:1, :2))',

 Line: 100 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" NOT IN (1, 2))'

 Line: 106 -    query: post.select(post.star()).where(post.id.notIn([null, null])),

 Line: 108 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)',

 Line: 109 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)'

 Line: 112 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)',

 Line: 113 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)'

 Line: 116 -      text  : 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IS NOT NULL)',

 Line: 117 -      string: 'SELECT `post`.* FROM `post` WHERE (`post`.`id` IS NOT NULL)'

 Line: 120 -      text  : 'SELECT [post].* FROM [post] WHERE ([post].[id] IS NOT NULL)',

 Line: 121 -      string: 'SELECT [post].* FROM [post] WHERE ([post].[id] IS NOT NULL)'

 Line: 124 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)',

 Line: 125 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."id" IS NOT NULL)'

 Line: 131 -    query: post.select(post.star()).where(post.id.notIn([1, null, 2])),

 Line: 133 -      text  : 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN ($1, $2) OR "post"."id" IS NULL))',

 Line: 134 -      string: 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN (1, 2) OR "post"."id" IS NULL))'

 Line: 137 -      text  : 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN ($1, $2) OR "post"."id" IS NULL))',

 Line: 138 -      string: 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN (1, 2) OR "post"."id" IS NULL))'

 Line: 141 -      text  : 'SELECT `post`.* FROM `post` WHERE (NOT (`post`.`id` IN (?, ?) OR `post`.`id` IS NULL))',

 Line: 142 -      string: 'SELECT `post`.* FROM `post` WHERE (NOT (`post`.`id` IN (1, 2) OR `post`.`id` IS NULL))'

 Line: 145 -      text  : 'SELECT [post].* FROM [post] WHERE (NOT ([post].[id] IN (@1, @2) OR [post].[id] IS NULL))',

 Line: 146 -      string: 'SELECT [post].* FROM [post] WHERE (NOT ([post].[id] IN (1, 2) OR [post].[id] IS NULL))'

 Line: 149 -      text  : 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN (:1, :2) OR "post"."id" IS NULL))',

 Line: 150 -      string: 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN (1, 2) OR "post"."id" IS NULL))'

 Line: 156 -    query: post.select(post.star()).where(post.id.notIn([1, null, 2, null])),

 Line: 158 -      text  : 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN ($1, $2) OR "post"."id" IS NULL))',

 Line: 159 -      string: 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN (1, 2) OR "post"."id" IS NULL))'

 Line: 162 -      text  : 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN ($1, $2) OR "post"."id" IS NULL))',

 Line: 163 -      string: 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN (1, 2) OR "post"."id" IS NULL))'

 Line: 166 -      text  : 'SELECT `post`.* FROM `post` WHERE (NOT (`post`.`id` IN (?, ?) OR `post`.`id` IS NULL))',

 Line: 167 -      string: 'SELECT `post`.* FROM `post` WHERE (NOT (`post`.`id` IN (1, 2) OR `post`.`id` IS NULL))'

 Line: 170 -      text  : 'SELECT [post].* FROM [post] WHERE (NOT ([post].[id] IN (@1, @2) OR [post].[id] IS NULL))',

 Line: 171 -      string: 'SELECT [post].* FROM [post] WHERE (NOT ([post].[id] IN (1, 2) OR [post].[id] IS NULL))'

 Line: 174 -      text  : 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN (:1, :2) OR "post"."id" IS NULL))',

 Line: 175 -      string: 'SELECT "post".* FROM "post" WHERE (NOT ("post"."id" IN (1, 2) OR "post"."id" IS NULL))'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/matches-test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -    query: post.select(post.star()).where(post.content.match(sql.functions.TO_TSQUERY('hello'))),

 Line: 11 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."content" @@ TO_TSQUERY($1))',

 Line: 12 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."content" @@ TO_TSQUERY(\'hello\'))'

 Line: 19 -    query: post.select(post.star()).where(post.content.match('hello')),

 Line: 21 -      text  : 'SELECT "post".* FROM "post" WHERE ("post"."content" MATCH $1)',

 Line: 22 -      string: 'SELECT "post".* FROM "post" WHERE ("post"."content" MATCH \'hello\')'

 Line: 25 -      text  : 'SELECT `post`.* FROM `post` WHERE (MATCH `post`.`content` AGAINST ?)',

 Line: 26 -      string: 'SELECT `post`.* FROM `post` WHERE (MATCH `post`.`content` AGAINST \'hello\')'

 Line: 29 -      text  : 'SELECT [post].* FROM [post] WHERE (CONTAINS ([post].[content], @1))',

 Line: 30 -      string: 'SELECT [post].* FROM [post] WHERE (CONTAINS ([post].[content], \'hello\'))'

 Line: 33 -      text  : 'SELECT "post".* FROM "post" WHERE (INSTR ("post"."content", :1) > 0)',

 Line: 34 -      string: 'SELECT "post".* FROM "post" WHERE (INSTR ("post"."content", \'hello\') > 0)'

 Line: 41 -    query: post.select(post.id, sql.functions.TS_RANK_CD(post.content, sql.functions.TO_TSQUERY('hello')).as('rank')).

 Line: 44 -      text  : 'SELECT "post"."id", TS_RANK_CD("post"."content", TO_TSQUERY($1)) AS "rank" FROM "post" WHERE ("post"."content" @@ TO_TSQUERY($2)) ORDER BY TS_RANK_CD("post"."content", TO_TSQUERY($3)) DESC',

 Line: 45 -      string: 'SELECT "post"."id", TS_RANK_CD("post"."content", TO_TSQUERY(\'hello\')) AS "rank" FROM "post" WHERE ("post"."content" @@ TO_TSQUERY(\'hello\')) ORDER BY TS_RANK_CD("post"."content", TO_TSQUERY(\'hello\')) DESC'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/function-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    query: post.select(Sql.functions.LENGTH(post.content)),

 Line: 10 -      text  : 'SELECT LENGTH("post"."content") FROM "post"',

 Line: 11 -      string: 'SELECT LENGTH("post"."content") FROM "post"'

 Line: 14 -      text  : 'SELECT LENGTH("post"."content") FROM "post"',

 Line: 15 -      string: 'SELECT LENGTH("post"."content") FROM "post"'

 Line: 18 -      text  : 'SELECT LENGTH(`post`.`content`) FROM `post`',

 Line: 19 -      string: 'SELECT LENGTH(`post`.`content`) FROM `post`'

 Line: 22 -      text  : 'SELECT LEN([post].[content]) FROM [post]',

 Line: 23 -      string: 'SELECT LEN([post].[content]) FROM [post]'

 Line: 26 -      text  : 'SELECT LENGTH("post"."content") FROM "post"',

 Line: 27 -      string: 'SELECT LENGTH("post"."content") FROM "post"'

 Line: 33 -    query: post.select(Sql.functions.LEFT(post.content,4)),

 Line: 35 -      text  : 'SELECT LEFT("post"."content", $1) FROM "post"',

 Line: 36 -      string: 'SELECT LEFT("post"."content", 4) FROM "post"'

 Line: 39 -      text  : 'SELECT SUBSTR("post"."content", 1, $1) FROM "post"',

 Line: 40 -      string: 'SELECT SUBSTR("post"."content", 1, 4) FROM "post"'

 Line: 43 -      text  : 'SELECT LEFT(`post`.`content`, ?) FROM `post`',

 Line: 44 -      string: 'SELECT LEFT(`post`.`content`, 4) FROM `post`'

 Line: 47 -      text  : 'SELECT LEFT([post].[content], @1) FROM [post]',

 Line: 48 -      string: 'SELECT LEFT([post].[content], 4) FROM [post]'

 Line: 51 -      text  : 'SELECT LEFT("post"."content", :1) FROM "post"',

 Line: 52 -      string: 'SELECT LEFT("post"."content", 4) FROM "post"'

 Line: 58 -    query: post.select(Sql.functions.RIGHT(post.content,4)),

 Line: 60 -      text  : 'SELECT RIGHT("post"."content", $1) FROM "post"',

 Line: 61 -      string: 'SELECT RIGHT("post"."content", 4) FROM "post"'

 Line: 64 -      text  : 'SELECT SUBSTR("post"."content", -$1) FROM "post"',

 Line: 65 -      string: 'SELECT SUBSTR("post"."content", -4) FROM "post"'

 Line: 68 -      text  : 'SELECT RIGHT(`post`.`content`, ?) FROM `post`',

 Line: 69 -      string: 'SELECT RIGHT(`post`.`content`, 4) FROM `post`'

 Line: 72 -      text  : 'SELECT RIGHT([post].[content], @1) FROM [post]',

 Line: 73 -      string: 'SELECT RIGHT([post].[content], 4) FROM [post]'

 Line: 76 -      text  : 'SELECT RIGHT("post"."content", :1) FROM "post"',

 Line: 77 -      string: 'SELECT RIGHT("post"."content", 4) FROM "post"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/support.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -            // check if this query is expected to throw

 Line: 32 -              // build query for dialect

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/hstore-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    query: customer.update({

 Line: 11 -      text  : 'UPDATE "customer" SET "metadata" = ("customer"."metadata" || HSTORE($1, $2))',

 Line: 12 -      string: 'UPDATE "customer" SET "metadata" = ("customer"."metadata" || HSTORE(\'age\', 20))'

 Line: 18 -    query: customer.select(customer.metadata.key('age')),

 Line: 20 -      text  : 'SELECT ("customer"."metadata" -> $1) FROM "customer"',

 Line: 21 -      string: 'SELECT ("customer"."metadata" -> \'age\') FROM "customer"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/distinct-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    query: user.select(user.id.distinct()),

 Line: 8 -      text  : 'SELECT DISTINCT("user"."id") FROM "user"',

 Line: 9 -      string: 'SELECT DISTINCT("user"."id") FROM "user"'

 Line: 12 -      text  : 'SELECT DISTINCT("user"."id") FROM "user"',

 Line: 13 -      string: 'SELECT DISTINCT("user"."id") FROM "user"'

 Line: 16 -      text  : 'SELECT DISTINCT(`user`.`id`) FROM `user`',

 Line: 17 -      string: 'SELECT DISTINCT(`user`.`id`) FROM `user`'

 Line: 20 -      text  : 'SELECT DISTINCT([user].[id]) FROM [user]',

 Line: 21 -      string: 'SELECT DISTINCT([user].[id]) FROM [user]'

 Line: 24 -      text  : 'SELECT DISTINCT("user"."id") FROM "user"',

 Line: 25 -      string: 'SELECT DISTINCT("user"."id") FROM "user"'

 Line: 31 -    query: user.select(user.id.count().distinct().as('count')),

 Line: 33 -      text  : 'SELECT COUNT(DISTINCT("user"."id")) AS "count" FROM "user"',

 Line: 34 -      string: 'SELECT COUNT(DISTINCT("user"."id")) AS "count" FROM "user"'

 Line: 37 -      text  : 'SELECT COUNT(DISTINCT("user"."id")) AS "count" FROM "user"',

 Line: 38 -      string: 'SELECT COUNT(DISTINCT("user"."id")) AS "count" FROM "user"'

 Line: 41 -      text  : 'SELECT COUNT(DISTINCT(`user`.`id`)) AS `count` FROM `user`',

 Line: 42 -      string: 'SELECT COUNT(DISTINCT(`user`.`id`)) AS `count` FROM `user`'

 Line: 45 -      text  : 'SELECT COUNT(DISTINCT([user].[id])) AS [count] FROM [user]',

 Line: 46 -      string: 'SELECT COUNT(DISTINCT([user].[id])) AS [count] FROM [user]'

 Line: 49 -      text  : 'SELECT COUNT(DISTINCT("user"."id")) "count" FROM "user"',

 Line: 50 -      string: 'SELECT COUNT(DISTINCT("user"."id")) "count" FROM "user"'

 Line: 58 -    query: user.select().distinct(),

 Line: 60 -      text  : 'SELECT DISTINCT "user".* FROM "user"',

 Line: 61 -      string: 'SELECT DISTINCT "user".* FROM "user"'

 Line: 64 -      text  : 'SELECT DISTINCT "user".* FROM "user"',

 Line: 65 -      string: 'SELECT DISTINCT "user".* FROM "user"'

 Line: 68 -      text  : 'SELECT DISTINCT `user`.* FROM `user`',

 Line: 69 -      string: 'SELECT DISTINCT `user`.* FROM `user`'

 Line: 72 -      text  : 'SELECT DISTINCT [user].* FROM [user]',

 Line: 73 -      string: 'SELECT DISTINCT [user].* FROM [user]'

 Line: 76 -      text  : 'SELECT DISTINCT "user".* FROM "user"',

 Line: 77 -      string: 'SELECT DISTINCT "user".* FROM "user"'

 Line: 83 -    query: user.select(user.id).distinct(),

 Line: 85 -      text  : 'SELECT DISTINCT "user"."id" FROM "user"',

 Line: 86 -      string: 'SELECT DISTINCT "user"."id" FROM "user"'

 Line: 89 -      text  : 'SELECT DISTINCT "user"."id" FROM "user"',

 Line: 90 -      string: 'SELECT DISTINCT "user"."id" FROM "user"'

 Line: 93 -      text  : 'SELECT DISTINCT `user`.`id` FROM `user`',

 Line: 94 -      string: 'SELECT DISTINCT `user`.`id` FROM `user`'

 Line: 97 -      text  : 'SELECT DISTINCT [user].[id] FROM [user]',

 Line: 98 -      string: 'SELECT DISTINCT [user].[id] FROM [user]'

 Line: 101 -      text  : 'SELECT DISTINCT "user"."id" FROM "user"',

 Line: 102 -      string: 'SELECT DISTINCT "user"."id" FROM "user"'

 Line: 108 -    query: user.select(user.id,user.name).distinct(),

 Line: 110 -      text  : 'SELECT DISTINCT "user"."id", "user"."name" FROM "user"',

 Line: 111 -      string: 'SELECT DISTINCT "user"."id", "user"."name" FROM "user"'

 Line: 114 -      text  : 'SELECT DISTINCT "user"."id", "user"."name" FROM "user"',

 Line: 115 -      string: 'SELECT DISTINCT "user"."id", "user"."name" FROM "user"'

 Line: 118 -      text  : 'SELECT DISTINCT `user`.`id`, `user`.`name` FROM `user`',

 Line: 119 -      string: 'SELECT DISTINCT `user`.`id`, `user`.`name` FROM `user`'

 Line: 122 -      text  : 'SELECT DISTINCT [user].[id], [user].[name] FROM [user]',

 Line: 123 -      string: 'SELECT DISTINCT [user].[id], [user].[name] FROM [user]'

 Line: 126 -      text  : 'SELECT DISTINCT "user"."id", "user"."name" FROM "user"',

 Line: 127 -      string: 'SELECT DISTINCT "user"."id", "user"."name" FROM "user"'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/replace-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -    query: post.replace(post.content.value('test'), post.userId.value(1)),

 Line: 36 -    query: post.replace(post.content.value('whoah')),

 Line: 58 -    query: post.replace({length: 0}),

 Line: 80 -    query: post.replace({

 Line: 101 -    query: post.replace({

 Line: 123 -    query: post.replace([{

 Line: 146 -    query: post.replace([{

 Line: 172 -    query: post.replace([{

 Line: 201 -    query: post.replace({}),

 Line: 223 -    query: post.replace({}).returning('*'),

 Line: 243 -    query: post.replace({}).returning(post.star()),

 Line: 263 -    query: post.replace({}).returning(post.id),

 Line: 283 -    query: post.replace({}).returning(post.id, post.content),

 Line: 303 -    query: post.replace({}).returning([post.id, post.content]),

 Line: 324 -    query: post.replace([{

 Line: 352 -    query: post.replace([{

 Line: 380 -    query: post.replace(post.content, post.userId)

 Line: 386 -      text  : 'REPLACE INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 387 -      string: 'REPLACE INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 390 -      text  : 'REPLACE INTO `post` (`content`, `userId`) SELECT \'test\', `user`.`id` FROM `user` WHERE (`user`.`name` LIKE ?)',

 Line: 391 -      string: 'REPLACE INTO `post` (`content`, `userId`) SELECT \'test\', `user`.`id` FROM `user` WHERE (`user`.`name` LIKE \'A%\')'

 Line: 403 -    query: post.replace([post.content, post.userId])

 Line: 409 -      text  : 'REPLACE INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 410 -      string: 'REPLACE INTO "post" ("content", "userId") SELECT \'test\', "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 413 -      text  : 'REPLACE INTO `post` (`content`, `userId`) SELECT \'test\', `user`.`id` FROM `user` WHERE (`user`.`name` LIKE ?)',

 Line: 414 -      string: 'REPLACE INTO `post` (`content`, `userId`) SELECT \'test\', `user`.`id` FROM `user` WHERE (`user`.`name` LIKE \'A%\')'

 Line: 426 -    query: post.replace(post.userId)

 Line: 432 -      text  : 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" LIKE $1)',

 Line: 433 -      string: 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user" WHERE ("user"."name" LIKE \'A%\')'

 Line: 445 -    query: post.replace(post.userId)

 Line: 451 -      text  : 'REPLACE INTO "post" ("userId") SELECT "post"."userId" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("post"."tags" LIKE $1)',

 Line: 452 -      string: 'REPLACE INTO "post" ("userId") SELECT "post"."userId" FROM "user" INNER JOIN "post" ON ("user"."id" = "post"."userId") WHERE ("post"."tags" LIKE \'A%\')'

 Line: 455 -      text  : 'REPLACE INTO `post` (`userId`) SELECT `post`.`userId` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`) WHERE (`post`.`tags` LIKE ?)',

 Line: 456 -      string: 'REPLACE INTO `post` (`userId`) SELECT `post`.`userId` FROM `user` INNER JOIN `post` ON (`user`.`id` = `post`.`userId`) WHERE (`post`.`tags` LIKE \'A%\')'

 Line: 468 -    query: post.replace(post.userId).select(user.id).distinct().from(user),

 Line: 473 -      text  : 'REPLACE INTO "post" ("userId") SELECT DISTINCT "user"."id" FROM "user"',

 Line: 474 -      string: 'REPLACE INTO "post" ("userId") SELECT DISTINCT "user"."id" FROM "user"'

 Line: 477 -      text  : 'REPLACE INTO `post` (`userId`) SELECT DISTINCT `user`.`id` FROM `user`',

 Line: 478 -      string: 'REPLACE INTO `post` (`userId`) SELECT DISTINCT `user`.`id` FROM `user`'

 Line: 491 -    query: post.replace(post.content.value(new Buffer('test')), post.userId.value(2)),

 Line: 513 -    query: post.replace({

 Line: 538 -    query: post.replace([{

 Line: 565 -    query: post.replace({

 Line: 578 -      text  : 'REPLACE INTO `post` (`content`, `userId`) VALUES (?, ?) ON DUPLICATE KEY UPDATE `post`.`content` = ?',

 Line: 579 -      string: 'REPLACE INTO `post` (`content`, `userId`) VALUES (\'test\', 2) ON DUPLICATE KEY UPDATE `post`.`content` = \'testupdate\''

 Line: 591 -    query: customerAliasTable.replace({

 Line: 617 -    query: customerAliasTable.replace({

 Line: 641 -    query: post.replace({

 Line: 667 -    query: post.replace({

 Line: 693 -    query: post.replace({

 Line: 719 -    query: post.replace({

 Line: 745 -    query: post.replace({

 Line: 770 -    query: post.replace({

 Line: 795 -    query: contentTable.replace({

 Line: 820 -    query: contentTable.replace({

 Line: 847 -    query: post.replace([]),

 Line: 850 -      text  : 'SELECT `post`.* FROM `post` WHERE (1=2)',

 Line: 851 -      string: 'SELECT `post`.* FROM `post` WHERE (1=2)'

 Line: 857 -    query: arrayTable.replace(arrayTable.id.value(1), arrayTable.numbers.value([2, 3, 4])),

 Line: 874 -    query: arrayTable.replace(arrayTable.id.value(1), arrayTable.numbers.value(["one", "two", "three"])),

 Line: 891 -    query: post.replace(post.userId).select(user.id).from(user),

 Line: 896 -      text  : 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 897 -      string: 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 900 -      text  : 'REPLACE INTO `post` (`userId`) SELECT `user`.`id` FROM `user`',

 Line: 901 -      string: 'REPLACE INTO `post` (`userId`) SELECT `user`.`id` FROM `user`'

 Line: 913 -    query: post.replace(post.userId).select(user.id).from(user).onConflict({

 Line: 936 -    query: post.replace(post.userId).add(user.select(user.id)),

 Line: 941 -      text  : 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 942 -      string: 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 945 -      text  : 'REPLACE INTO `post` (`userId`) SELECT `user`.`id` FROM `user`',

 Line: 946 -      string: 'REPLACE INTO `post` (`userId`) SELECT `user`.`id` FROM `user`'

 Line: 958 -    query: post.replace(post.userId).add(user.select(user.id).from(user)),

 Line: 963 -      text  : 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user"',

 Line: 964 -      string: 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user"'

 Line: 967 -      text  : 'REPLACE INTO `post` (`userId`) SELECT `user`.`id` FROM `user`',

 Line: 968 -      string: 'REPLACE INTO `post` (`userId`) SELECT `user`.`id` FROM `user`'

 Line: 980 -    query: post.replace(post.userId).add(user.select(user.id).order(user.id)),

 Line: 985 -      text  : 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user" ORDER BY "user"."id"',

 Line: 986 -      string: 'REPLACE INTO "post" ("userId") SELECT "user"."id" FROM "user" ORDER BY "user"."id"'

 Line: 989 -      text  : 'REPLACE INTO `post` (`userId`) SELECT `user`.`id` FROM `user` ORDER BY `user`.`id`',

 Line: 990 -      string: 'REPLACE INTO `post` (`userId`) SELECT `user`.`id` FROM `user` ORDER BY `user`.`id`'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/dialects/schema-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -    query: userWithSchema.select(userWithSchema.id).from(userWithSchema),

 Line: 15 -      text  : 'SELECT "staging"."user"."id" FROM "staging"."user"',

 Line: 16 -      string: 'SELECT "staging"."user"."id" FROM "staging"."user"'

 Line: 19 -      text  : 'SELECT "staging"."user"."id" FROM "staging"."user"',

 Line: 20 -      string: 'SELECT "staging"."user"."id" FROM "staging"."user"'

 Line: 23 -      text  : 'SELECT `staging`.`user`.`id` FROM `staging`.`user`',

 Line: 24 -      string: 'SELECT `staging`.`user`.`id` FROM `staging`.`user`'

 Line: 27 -      text  : 'SELECT [staging].[user].[id] FROM [staging].[user]',

 Line: 28 -      string: 'SELECT [staging].[user].[id] FROM [staging].[user]'

 Line: 31 -      text  : 'SELECT "staging"."user"."id" FROM "staging"."user"',

 Line: 32 -      string: 'SELECT "staging"."user"."id" FROM "staging"."user"'

 Line: 38 -    query: userWithSchema.select(userWithSchema.id.count()).from(userWithSchema),

 Line: 40 -      text  : 'SELECT COUNT("staging"."user"."id") AS "id_count" FROM "staging"."user"',

 Line: 41 -      string: 'SELECT COUNT("staging"."user"."id") AS "id_count" FROM "staging"."user"'

 Line: 44 -      text  : 'SELECT COUNT("staging"."user"."id") AS "id_count" FROM "staging"."user"',

 Line: 45 -      string: 'SELECT COUNT("staging"."user"."id") AS "id_count" FROM "staging"."user"'

 Line: 48 -      text  : 'SELECT COUNT(`staging`.`user`.`id`) AS `id_count` FROM `staging`.`user`',

 Line: 49 -      string: 'SELECT COUNT(`staging`.`user`.`id`) AS `id_count` FROM `staging`.`user`'

 Line: 52 -      text  : 'SELECT COUNT([staging].[user].[id]) AS [id_count] FROM [staging].[user]',

 Line: 53 -      string: 'SELECT COUNT([staging].[user].[id]) AS [id_count] FROM [staging].[user]'

 Line: 56 -      text  : 'SELECT COUNT("staging"."user"."id") "id_count" FROM "staging"."user"',

 Line: 57 -      string: 'SELECT COUNT("staging"."user"."id") "id_count" FROM "staging"."user"'

 Line: 63 -    query: userWithSchema.select(userWithSchema.id, userWithSchema.name).from(userWithSchema),

 Line: 65 -      text  : 'SELECT "staging"."user"."id", "staging"."user"."name" FROM "staging"."user"',

 Line: 66 -      string: 'SELECT "staging"."user"."id", "staging"."user"."name" FROM "staging"."user"'

 Line: 69 -      text  : 'SELECT "staging"."user"."id", "staging"."user"."name" FROM "staging"."user"',

 Line: 70 -      string: 'SELECT "staging"."user"."id", "staging"."user"."name" FROM "staging"."user"'

 Line: 73 -      text  : 'SELECT `staging`.`user`.`id`, `staging`.`user`.`name` FROM `staging`.`user`',

 Line: 74 -      string: 'SELECT `staging`.`user`.`id`, `staging`.`user`.`name` FROM `staging`.`user`'

 Line: 77 -      text  : 'SELECT [staging].[user].[id], [staging].[user].[name] FROM [staging].[user]',

 Line: 78 -      string: 'SELECT [staging].[user].[id], [staging].[user].[name] FROM [staging].[user]'

 Line: 81 -      text  : 'SELECT "staging"."user"."id", "staging"."user"."name" FROM "staging"."user"',

 Line: 82 -      string: 'SELECT "staging"."user"."id", "staging"."user"."name" FROM "staging"."user"'

 Line: 89 -    query: uws.select(uws.name).from(uws),

 Line: 91 -      text  : 'SELECT "uws"."name" FROM "staging"."user" AS "uws"',

 Line: 92 -      string: 'SELECT "uws"."name" FROM "staging"."user" AS "uws"'

 Line: 95 -      text  : 'SELECT "uws"."name" FROM "staging"."user" AS "uws"',

 Line: 96 -      string: 'SELECT "uws"."name" FROM "staging"."user" AS "uws"'

 Line: 99 -      text  : 'SELECT `uws`.`name` FROM `staging`.`user` AS `uws`',

 Line: 100 -      string: 'SELECT `uws`.`name` FROM `staging`.`user` AS `uws`'

 Line: 103 -      text  : 'SELECT [uws].[name] FROM [staging].[user] AS [uws]',

 Line: 104 -      string: 'SELECT [uws].[name] FROM [staging].[user] AS [uws]'

 Line: 107 -      text  : 'SELECT "uws"."name" FROM "staging"."user" "uws"',

 Line: 108 -      string: 'SELECT "uws"."name" FROM "staging"."user" "uws"'

 Line: 120 -    query: userWithSchema.select(userWithSchema.name, postWithSchema.content).from(userWithSchema.join(postWithSchema).on(userWithSchema.id.equals(postWithSchema.userId))),

 Line: 122 -      text  : 'SELECT "staging"."user"."name", "dev"."post"."content" FROM "staging"."user" INNER JOIN "dev"."post" ON ("staging"."user"."id" = "dev"."post"."userId")',

 Line: 123 -      string: 'SELECT "staging"."user"."name", "dev"."post"."content" FROM "staging"."user" INNER JOIN "dev"."post" ON ("staging"."user"."id" = "dev"."post"."userId")'

 Line: 126 -      text  : 'SELECT "staging"."user"."name", "dev"."post"."content" FROM "staging"."user" INNER JOIN "dev"."post" ON ("staging"."user"."id" = "dev"."post"."userId")',

 Line: 127 -      string: 'SELECT "staging"."user"."name", "dev"."post"."content" FROM "staging"."user" INNER JOIN "dev"."post" ON ("staging"."user"."id" = "dev"."post"."userId")'

 Line: 130 -      text  : 'SELECT `staging`.`user`.`name`, `dev`.`post`.`content` FROM `staging`.`user` INNER JOIN `dev`.`post` ON (`staging`.`user`.`id` = `dev`.`post`.`userId`)',

 Line: 131 -      string: 'SELECT `staging`.`user`.`name`, `dev`.`post`.`content` FROM `staging`.`user` INNER JOIN `dev`.`post` ON (`staging`.`user`.`id` = `dev`.`post`.`userId`)'

 Line: 134 -      text  : 'SELECT [staging].[user].[name], [dev].[post].[content] FROM [staging].[user] INNER JOIN [dev].[post] ON ([staging].[user].[id] = [dev].[post].[userId])',

 Line: 135 -      string: 'SELECT [staging].[user].[name], [dev].[post].[content] FROM [staging].[user] INNER JOIN [dev].[post] ON ([staging].[user].[id] = [dev].[post].[userId])'

 Line: 138 -      text  : 'SELECT "staging"."user"."name", "dev"."post"."content" FROM "staging"."user" INNER JOIN "dev"."post" ON ("staging"."user"."id" = "dev"."post"."userId")',

 Line: 139 -      string: 'SELECT "staging"."user"."name", "dev"."post"."content" FROM "staging"."user" INNER JOIN "dev"."post" ON ("staging"."user"."id" = "dev"."post"."userId")'

 Line: 145 -    query: uws.select(uws.name, postWithSchema.content).from(uws.join(postWithSchema).on(uws.id.equals(postWithSchema.userId))),

 Line: 147 -      text  : 'SELECT "uws"."name", "dev"."post"."content" FROM "staging"."user" AS "uws" INNER JOIN "dev"."post" ON ("uws"."id" = "dev"."post"."userId")',

 Line: 148 -      string: 'SELECT "uws"."name", "dev"."post"."content" FROM "staging"."user" AS "uws" INNER JOIN "dev"."post" ON ("uws"."id" = "dev"."post"."userId")'

 Line: 151 -      text  : 'SELECT "uws"."name", "dev"."post"."content" FROM "staging"."user" AS "uws" INNER JOIN "dev"."post" ON ("uws"."id" = "dev"."post"."userId")',

 Line: 152 -      string: 'SELECT "uws"."name", "dev"."post"."content" FROM "staging"."user" AS "uws" INNER JOIN "dev"."post" ON ("uws"."id" = "dev"."post"."userId")'

 Line: 155 -      text  : 'SELECT `uws`.`name`, `dev`.`post`.`content` FROM `staging`.`user` AS `uws` INNER JOIN `dev`.`post` ON (`uws`.`id` = `dev`.`post`.`userId`)',

 Line: 156 -      string: 'SELECT `uws`.`name`, `dev`.`post`.`content` FROM `staging`.`user` AS `uws` INNER JOIN `dev`.`post` ON (`uws`.`id` = `dev`.`post`.`userId`)'

 Line: 159 -      text  : 'SELECT [uws].[name], [dev].[post].[content] FROM [staging].[user] AS [uws] INNER JOIN [dev].[post] ON ([uws].[id] = [dev].[post].[userId])',

 Line: 160 -      string: 'SELECT [uws].[name], [dev].[post].[content] FROM [staging].[user] AS [uws] INNER JOIN [dev].[post] ON ([uws].[id] = [dev].[post].[userId])'

 Line: 163 -      text  : 'SELECT "uws"."name", "dev"."post"."content" FROM "staging"."user" "uws" INNER JOIN "dev"."post" ON ("uws"."id" = "dev"."post"."userId")',

 Line: 164 -      string: 'SELECT "uws"."name", "dev"."post"."content" FROM "staging"."user" "uws" INNER JOIN "dev"."post" ON ("uws"."id" = "dev"."post"."userId")'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/select-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -  test('has SELECT type', function() {

 Line: 8 -    assert.equal(select.type, 'SELECT');

 Line: 13 -    assert.equal(select.toQuery().text, 'SELECT ');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/index-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 38 -    test('can create a query using the default dialect', function() {

 Line: 39 -      var query = sql.select(user.id).from(user).where(user.email.equals('brian.m.carlson@gmail.com')).toQuery();

 Line: 40 -      assert.equal(query.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = $1)');

 Line: 46 -      var query = sql.select(user.id).from(user).where(user.email.equals('brian.m.carlson@gmail.com')).toQuery();

 Line: 47 -      assert.equal(query.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = $1)');

 Line: 53 -      var query = mysql.select(user.id).from(user).where(user.email.equals('brian.m.carlson@gmail.com')).toQuery();

 Line: 54 -      assert.equal(query.text, 'SELECT `user`.`id` FROM `user` WHERE (`user`.`email` = ?)');

 Line: 108 -      assert.equal(sqliteQuery.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = $1)');

 Line: 111 -      assert.equal(postgresQuery.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = $1)');

 Line: 114 -      assert.equal(mysqlQuery.text, 'SELECT `user`.`id` FROM `user` WHERE (`user`.`email` = ?)');

 Line: 117 -      assert.equal(mssqlQuery.text, 'SELECT [user].[id] FROM [user] WHERE ([user].[email] = @1)');

 Line: 120 -      assert.equal(oracleQuery.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = :1)');

 Line: 125 -      var query = sql.select(user.id).from(user);

 Line: 127 -        query.toQuery('invalid');

 Line: 132 -      var query = sql.select(user.id).from(user).where(user.email.equals('brian.m.carlson@gmail.com')).toNamedQuery('users');

 Line: 133 -      assert.equal(query.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = $1)');

 Line: 138 -    test('provide an empty query name for toNamedQuery', function() {

 Line: 139 -      var query = sql.select(user.id).from(user);

 Line: 141 -        query.toNamedQuery('');

 Line: 145 -    test('provide an undefined query name for toNamedQuery', function() {

 Line: 146 -      var query = sql.select(user.id).from(user);

 Line: 148 -        query.toNamedQuery();

 Line: 168 -      assert.equal(sqliteQuery.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = $1)');

 Line: 172 -      assert.equal(postgresQuery.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = $1)');

 Line: 176 -      assert.equal(mysqlQuery.text, 'SELECT `user`.`id` FROM `user` WHERE (`user`.`email` = ?)');

 Line: 180 -      assert.equal(mssqlQuery.text, 'SELECT [user].[id] FROM [user] WHERE ([user].[email] = @1)');

 Line: 184 -      assert.equal(oracleQuery.text, 'SELECT "user"."id" FROM "user" WHERE ("user"."email" = :1)');

 Line: 191 -      var query = sql.select(user.id).from(user);

 Line: 193 -        query.toNamedQuery('name', 'invalid');

 Line: 200 -      var query = mssql.select(user.id).from(user).where(user.email.equals('x@y.com')).toQuery();

 Line: 201 -      assert.equal(query.text, 'SELECT [user].[id] FROM [user] WHERE ([user].[email] = @1)');

 Line: 208 -      var query = mssql.select(user.id).from(user).where(user.email.equals('x@y.com')).toQuery();

 Line: 209 -      assert.equal(query.text, 'SELECT [user].[id] FROM [user] WHERE ([user].[email] = ?)');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/table-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 34 -    test('creates query node', function() {

 Line: 253 -    var query = user.limit(3);

 Line: 261 -    var query = user.offset(20);

 Line: 269 -    var query = user.order(user.name);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/clause-definition.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    type: 'SELECT'

 Line: 19 -    assert.equal(select.type, 'SELECT');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/function-tests.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -      var query = sql.select(upper(user.id, user.email)).from(user).where(user.email.equals('brian.m.carlson@gmail.com')).toQuery();

 Line: 52 -      assert.equal(query.text, 'SELECT UPPER("user"."id", "user"."email") FROM "user" WHERE ("user"."email" = $1)');

 Line: 61 -      var query = user.select(user.id, distinctEmailCount).group(user.id).having(distinctEmailCount.gt(100)).toQuery();

 Line: 63 -      assert.equal(query.text, 'SELECT "user"."id", COUNT(DISTINCT("user"."email")) FROM "user" GROUP BY "user"."id" HAVING (COUNT(DISTINCT("user"."email")) > $1)');

 Line: 74 -      var expectedQuery = 'SELECT UPPER("user"."name") FROM "user"';

 Line: 81 -      var query = user.select(f.AVG(f.DISTINCT(f.COUNT(user.id).plus(f.MAX(user.id))).minus(f.MIN(user.id))).multiply(100)).toQuery();

 Line: 83 -      assert.equal(query.text, 'SELECT (AVG((DISTINCT((COUNT("user"."id") + MAX("user"."id"))) - MIN("user"."id"))) * $1) FROM "user"');

 Line: 88 -      var query = user.select(sql.function('PHRASE_TO_TSQUERY')('simple', user.name)).toQuery();

 Line: 89 -      assert.equal(query.text, 'SELECT PHRASE_TO_TSQUERY($1, "user"."name") FROM "user"');

</Result>
</report_mosca>

