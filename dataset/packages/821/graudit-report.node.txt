/src/lib/dialects/postgres/data-types.js-308-      const b = Buffer.from(value, 'hex');
/src/lib/dialects/postgres/data-types.js:309:      return wkx.Geometry.parse(b).toGeoJSON();
/src/lib/dialects/postgres/data-types.js-310-    }
##############################################
/src/lib/dialects/postgres/data-types.js-335-      const b = Buffer.from(value, 'hex');
/src/lib/dialects/postgres/data-types.js:336:      return wkx.Geometry.parse(b).toGeoJSON();
/src/lib/dialects/postgres/data-types.js-337-    }
##############################################
/src/lib/dialects/postgres/data-types.js-375-      }
/src/lib/dialects/postgres/data-types.js:376:      return hstore.parse(value);
/src/lib/dialects/postgres/data-types.js-377-    }
##############################################
/src/lib/dialects/postgres/data-types.js-430-    static parse(value, options = { parser: val => val }) {
/src/lib/dialects/postgres/data-types.js:431:      return range.parse(value, options.parser);
/src/lib/dialects/postgres/data-types.js-432-    }
##############################################
/src/lib/dialects/postgres/connection-manager.js-28-    const arrayParserBuilder = parser => {
/src/lib/dialects/postgres/connection-manager.js:29:      return value => this.lib.types.arrayParser.create(value, parser).parse();
/src/lib/dialects/postgres/connection-manager.js-30-    };
/src/lib/dialects/postgres/connection-manager.js-31-    const rangeParserBuilder = parser => {
/src/lib/dialects/postgres/connection-manager.js:32:      return value => dataType.parse(value, { parser });
/src/lib/dialects/postgres/connection-manager.js-33-    };
##############################################
/src/lib/dialects/postgres/connection-manager.js-51-    // Create parsers for normal or enum data types
/src/lib/dialects/postgres/connection-manager.js:52:    const parser = value => dataType.parse(value);
/src/lib/dialects/postgres/connection-manager.js-53-    const arrayParser = arrayParserBuilder(parser);
##############################################
/src/lib/dialects/postgres/hstore.js-12-  if (value === null) return null;
/src/lib/dialects/postgres/hstore.js:13:  return hstore.parse(value);
/src/lib/dialects/postgres/hstore.js-14-}
##############################################
/src/lib/dialects/mysql/data-types.js-111-      value = value.slice(4);
/src/lib/dialects/mysql/data-types.js:112:      return wkx.Geometry.parse(value).toGeoJSON();
/src/lib/dialects/mysql/data-types.js-113-    }
##############################################
/src/lib/dialects/mariadb/query.js-182-        rows = rows.map(row => {
/src/lib/dialects/mariadb/query.js:183:          row[modelField.fieldName] = row[modelField.fieldName] ? JSON.parse(
/src/lib/dialects/mariadb/query.js-184-            row[modelField.fieldName]) : null;
/src/lib/dialects/mariadb/query.js-185-          if (DataTypes.JSON.parse) {
/src/lib/dialects/mariadb/query.js:186:            return DataTypes.JSON.parse(modelField, this.sequelize.options,
/src/lib/dialects/mariadb/query.js-187-              row[modelField.fieldName]);
##############################################
/src/lib/dialects/sqlite/data-types.js-47-    static parse(data) {
/src/lib/dialects/sqlite/data-types.js:48:      return JSON.parse(data);
/src/lib/dialects/sqlite/data-types.js-49-    }
##############################################
/src/lib/sequelize.js-106-
/src/lib/sequelize.js:107:      const urlParts = url.parse(arguments[0], true);
/src/lib/sequelize.js-108-
##############################################
/src/lib/utils/validator-extras.js-90-  // by doing a preliminary check on `dateString`
/src/lib/utils/validator-extras.js:91:  const parsed = Date.parse(dateString);
/src/lib/utils/validator-extras.js-92-  if (isNaN(parsed)) {
