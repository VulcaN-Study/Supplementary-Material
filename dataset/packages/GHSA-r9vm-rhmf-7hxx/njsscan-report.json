{
  "errors": [
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as javascript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 8,
            "line": 1
          },
          "file": "/src/LICENSE",
          "source_hash": "e579f403b3a0ded061ecd396feaa5b250d827f9b7bb6cf30475485e9e3433a52",
          "start": {
            "col": 1,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    },
    {
      "code": 3,
      "help": "If the code appears to be valid, this may be a semgrep bug.",
      "level": "warn",
      "long_msg": "Could not parse LICENSE as typescript",
      "short_msg": "parse error",
      "spans": [
        {
          "context_end": null,
          "context_start": null,
          "end": {
            "col": 8,
            "line": 1
          },
          "file": "/src/LICENSE",
          "source_hash": "e579f403b3a0ded061ecd396feaa5b250d827f9b7bb6cf30475485e9e3433a52",
          "start": {
            "col": 1,
            "line": 1
          }
        }
      ],
      "type": "SourceParseError"
    }
  ],
  "njsscan_version": "0.2.8",
  "nodejs": {
    "node_sha1": {
      "files": [
        {
          "file_path": "/src/test.js",
          "match_lines": [
            406,
            406
          ],
          "match_position": [
            20,
            45
          ],
          "match_string": "        var sha1 = crypto.createHash('sha1').update(file).digest('hex');"
        },
        {
          "file_path": "/src/test.js",
          "match_lines": [
            487,
            487
          ],
          "match_position": [
            20,
            45
          ],
          "match_string": "        var sha1 = crypto.createHash('sha1').update(file).digest('hex');"
        },
        {
          "file_path": "/src/test.js",
          "match_lines": [
            574,
            574
          ],
          "match_position": [
            20,
            45
          ],
          "match_string": "        var sha1 = crypto.createHash('sha1').update(file).digest('hex');"
        },
        {
          "file_path": "/src/test.js",
          "match_lines": [
            655,
            655
          ],
          "match_position": [
            20,
            45
          ],
          "match_string": "        var sha1 = crypto.createHash('sha1').update(file).digest('hex');"
        },
        {
          "file_path": "/src/test.js",
          "match_lines": [
            736,
            736
          ],
          "match_position": [
            20,
            45
          ],
          "match_string": "        var sha1 = crypto.createHash('sha1').update(file).digest('hex');"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "SHA1 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}