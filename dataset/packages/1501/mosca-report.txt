<report_mosca>
 <Path>/src/lib/server/controllers/get.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -      provider.size({ id, token, query: req.query }, (err, size) => {

 Line: 34 -              provider.download({ id, token, query: req.query }, uploader.handleChunk.bind(uploader));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/controllers/s3.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -       * Expected query parameters:

 Line: 106 -       * Expected query parameters:

 Line: 120 -              return res.status(400).json({ error: 's3: the object key must be passed as a query parameter. For example: "?key=abc.jpg"' });

 Line: 155 -       * Expected query parameters:

 Line: 158 -       *  - url - The URL to upload to, including signed query parameters.

 Line: 166 -              return res.status(400).json({ error: 's3: the object key must be passed as a query parameter. For example: "?key=abc.jpg"' });

 Line: 191 -       * Expected query parameters:

 Line: 202 -              return res.status(400).json({ error: 's3: the object key must be passed as a query parameter. For example: "?key=abc.jpg"' });

 Line: 221 -       * Expected query parameters:

 Line: 235 -              return res.status(400).json({ error: 's3: the object key must be passed as a query parameter. For example: "?key=abc.jpg"' });

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/controllers/list.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1 -  function list({ query, params, companion }, res, next) {

 Line: 4 -      companion.provider.list({ companion, token, directory: params.id, query }, (err, data) => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/controllers/connect.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -          // todo change this query from state to "origin"

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/drive/adapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 0 -  const querystring = require('querystring');

 Line: 62 -      const query = Object.assign({}, currentQuery, {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/drive/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -          const query = options.query || {};

 Line: 48 -              pageToken: query.cursor,

 Line: 69 -              const returnData = this.adaptData(filesResponse.body, sharedDrives && sharedDrives.body, directory, query);

 Line: 126 -      adaptData(res, sharedDrivesResp, directory, query) {

 Line: 150 -              nextPagePath: adapter.getNextPagePath(res, query, directory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/instagram/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -      list({ directory = 'recent', token, query = {} }, done) {

 Line: 20 -          const cursor = query.cursor || query.max_id;

 Line: 68 -      download({ id, token, query = {} }, onData) {

 Line: 75 -              request(this._getMediaUrl(body, query.carousel_id))

 Line: 89 -      size({ id, token, query = {} }, done) {

 Line: 99 -              utils.getURLMeta(this._getMediaUrl(body, query.carousel_id))

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/instagram/graph/adapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 0 -  const querystring = require('querystring');

 Line: 53 -      const query = Object.assign({}, currentQuery, {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/instagram/graph/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -      list({ directory, token, query = {} }, done) {

 Line: 30 -              qs.after = query.cursor;

 Line: 44 -                      err ? done(err) : done(null, this.adaptData(body, username, directory, query));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/dropbox/adapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1 -  const querystring = require('querystring');

 Line: 39 -      const query = { cursor: data.cursor };

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/dropbox/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 78 -      stats({ directory, query, token }, done) {

 Line: 85 -                  cursor: query.cursor

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/onedrive/adapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 0 -  const querystring = require('querystring');

 Line: 29 -      let query = `?driveId=${item.parentReference.driveId}`;

 Line: 31 -          query = `?driveId=${item.remoteItem.parentReference.driveId}`;

 Line: 33 -      return exports.getItemId(item) + query;

 Line: 45 -      const query = { cursor: querystring.parse(data['@odata.nextLink']).$skiptoken };

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/onedrive/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -      list({ directory, query, token }, done) {

 Line: 33 -          const rootPath = query.driveId ? `/drives/${query.driveId}` : '/drive';

 Line: 36 -              qs.$skiptoken = query.cursor;

 Line: 60 -      download({ id, token, query }, onData) {

 Line: 61 -          const rootPath = query.driveId ? `/drives/${query.driveId}` : '/drive';

 Line: 78 -      size({ id, query, token }, done) {

 Line: 79 -          const rootPath = query.driveId ? `/drives/${query.driveId}` : '/drive';

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/facebook/adapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 0 -  const querystring = require('querystring');

 Line: 35 -      const query = Object.assign({}, currentQuery, {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/server/provider/facebook/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -      list({ directory, token, query = {} }, done) {

 Line: 24 -              qs.after = query.cursor;

 Line: 43 -                      err ? done(err) : done(null, this.adaptData(body, username, directory, query));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/companion.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -          res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, DELETE');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/standalone/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 34 -      const query = Object.assign({}, req.query);

 Line: 39 -              query[key] = 'x'.repeat(req.query[key].length);

 Line: 52 -          const query = qs.parse(parsed.search.replace('?', ''));

 Line: 55 -                  query[key] = 'x'.repeat(query[key].length);

 Line: 110 -      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');

</Result>
</report_mosca>

