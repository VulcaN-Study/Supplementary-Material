/src/src/commands/registration/rnto.js-13-
/src/src/commands/registration/rnto.js:14:    return Promise.resolve(this.fs.rename(from, to))
/src/src/commands/registration/rnto.js-15-    .then(() => {
##############################################
/src/src/commands/registration/site/index.js-9-    const rawSubCommand = _.get(command, 'arg', '');
/src/src/commands/registration/site/index.js:10:    const subCommand = this.commands.parse(rawSubCommand);
/src/src/commands/registration/site/index.js-11-    const subLog = log.child({subverb: subCommand.directive});
##############################################
/src/src/commands/index.js-32-  handle(command) {
/src/src/commands/index.js:33:    if (typeof command === 'string') command = this.parse(command);
/src/src/commands/index.js-34-
##############################################
/src/src/helpers/find-port.js-7-    let checkPort = min;
/src/src/helpers/find-port.js:8:    let portCheckServer = net.createServer();
/src/src/helpers/find-port.js-9-    portCheckServer.maxConnections = 0;
##############################################
/src/src/index.js-35-    this.log = this.options.log;
/src/src/index.js:36:    this.url = nodeUrl.parse(url || 'ftp://127.0.0.1:21');
/src/src/index.js-37-
##############################################
/src/src/index.js-50-
/src/src/index.js:51:    this.server = (this.isTLS ? tls : net).createServer(serverOptions, serverConnectionHandler);
/src/src/index.js-52-    this.server.on('error', err => this.log.error(err, '[Event] error'));
##############################################
/src/src/connector/active.js-38-      this.dataSocket.on('error', err => this.server && this.server.emit('client-error', {connection: this.connection, context: 'dataSocket', error: err}));
/src/src/connector/active.js:39:      this.dataSocket.connect({host, port, family}, () => {
/src/src/connector/active.js-40-        this.dataSocket.pause();
##############################################
/src/src/connector/passive.js-63-      const serverOptions = Object.assign({}, this.connection.secure ? this.server._tls : {}, {pauseOnConnect: true});
/src/src/connector/passive.js:64:      this.dataServer = (this.connection.secure ? tls : net).createServer(serverOptions, connectionHandler);
/src/src/connector/passive.js-65-      this.dataServer.maxConnections = 1;
##############################################
/src/src/fs.js-93-    .then(() => {
/src/src/fs.js:94:      const stream = fs.createReadStream(fsPath, {flags: 'r', start});
/src/src/fs.js-95-      return stream;
##############################################
/src/bin/index.js-38-    })
/src/bin/index.js:39:    .parse();
/src/bin/index.js-40-}
