{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 8,
          "line": 1
        },
        "extra": {
          "line": "The MIT License (MIT)",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            1212,
            1212
          ],
          "match_position": [
            28,
            39
          ],
          "match_string": "    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);"
        },
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            1883,
            1883
          ],
          "match_position": [
            23,
            34
          ],
          "match_string": "    return Math.floor(Math.random() * (c - a + 1)) + a;"
        },
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            9298,
            9298
          ],
          "match_position": [
            40,
            51
          ],
          "match_string": "        randId = 'datepicker-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);"
        },
        {
          "file_path": "/src/js/datepicker.js",
          "match_lines": [
            678,
            678
          ],
          "match_position": [
            9,
            20
          ],
          "match_string": "        Math.random()"
        },
        {
          "file_path": "/src/js/global.js",
          "match_lines": [
            152,
            152
          ],
          "match_position": [
            28,
            39
          ],
          "match_string": "    return Math.floor((1 + Math.random()) * 0x10000)"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            43,
            43
          ],
          "match_position": [
            17,
            41
          ],
          "match_string": "    var elems = classMatch.test(selector) ? context.getElementsByClassName(selector.slice(1)) : singlet.test(selector) ? context.getElementsByTagName(selector) : context.querySelectorAll(selector);"
        },
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            43,
            43
          ],
          "match_position": [
            97,
            118
          ],
          "match_string": "    var elems = classMatch.test(selector) ? context.getElementsByClassName(selector.slice(1)) : singlet.test(selector) ? context.getElementsByTagName(selector) : context.querySelectorAll(selector);"
        },
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            84,
            84
          ],
          "match_position": [
            15,
            36
          ],
          "match_string": "      elems = idMatch.test(selector) ?"
        },
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            86,
            86
          ],
          "match_position": [
            47,
            70
          ],
          "match_string": "      doc.getElementById(selector.slice(1)) : htmlMatch.test(selector) ?"
        },
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            282,
            282
          ],
          "match_position": [
            52,
            108
          ],
          "match_string": "    return v.classList ? v.classList.contains(c) : new RegExp(\"(^| )\" + c + \"( |$)\", \"gi\").test(v.className);"
        },
        {
          "file_path": "/src/dist/js/materialize.js",
          "match_lines": [
            1630,
            1634
          ],
          "match_position": [
            11,
            102
          ],
          "match_string": "        b;b = h.pth(a) ? a.totalLength : a;if (h.col(b)) {\n\n      if (h.rgb(b)) {\n\n        var f = /rgb\\((\\d+,\\s*[\\d]+,\\s*[\\d]+)\\)/g.exec(b);b = f ? \"rgba(\" + f[1] + \",1)\" : b;\n\n      } else b = h.hex(b) ? T(b) : h.hsl(b) ? U(b) : void 0;\n\n    } else f = (f = y(b)) ? b.substr(0, b.length - f.length) : b, b = c && !/\\s/g.test(b) ? f + c : f;b += \"\";return { original: b, numbers: b.match(d) ? b.match(d).map(Number) : [0], strings: h.str(a) || c ? b.split(d) : [] };"
        },
        {
          "file_path": "/src/extras/noUiSlider/nouislider.js",
          "match_lines": [
            129,
            129
          ],
          "match_position": [
            66,
            121
          ],
          "match_string": "        return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);"
        },
        {
          "file_path": "/src/js/cash.js",
          "match_lines": [
            18,
            18
          ],
          "match_position": [
            18,
            42
          ],
          "match_string": "    var elems = (classMatch.test(selector) ? context.getElementsByClassName(selector.slice(1)) : singlet.test(selector) ? context.getElementsByTagName(selector) : context.querySelectorAll(selector));"
        },
        {
          "file_path": "/src/js/cash.js",
          "match_lines": [
            18,
            18
          ],
          "match_position": [
            98,
            119
          ],
          "match_string": "    var elems = (classMatch.test(selector) ? context.getElementsByClassName(selector.slice(1)) : singlet.test(selector) ? context.getElementsByTagName(selector) : context.querySelectorAll(selector));"
        },
        {
          "file_path": "/src/js/cash.js",
          "match_lines": [
            57,
            57
          ],
          "match_position": [
            16,
            37
          ],
          "match_string": "      elems = (idMatch.test(selector) ?"
        },
        {
          "file_path": "/src/js/cash.js",
          "match_lines": [
            59,
            59
          ],
          "match_position": [
            47,
            70
          ],
          "match_string": "      doc.getElementById(selector.slice(1)) : htmlMatch.test(selector) ?"
        },
        {
          "file_path": "/src/js/cash.js",
          "match_lines": [
            249,
            249
          ],
          "match_position": [
            53,
            109
          ],
          "match_string": "    return (v.classList ? v.classList.contains(c) : new RegExp(\"(^| )\" + c + \"( |$)\", \"gi\").test(v.className));"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
