<report_mosca>
 <Path>/src/server/middleware/token.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 59 -   * Check for an access token in cookies, headers, and query string parameters.

 Line: 66 -   * It checks for these values in cookies, headers, and query string parameters _in addition_ to the items

 Line: 71 -   * The following example illustrates how to check for an `accessToken` in a custom cookie, query string parameter

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/common/models/acl.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 480 -      const query = {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/common/models/checkpoint.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 44 -      var query = {limit: 1}; // match all instances, return only one

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/common/models/change.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -    Change.UPDATE = 'update';

 Line: 45 -    Change.DELETE = 'delete';

 Line: 318 -     * - `Change.UPDATE`

 Line: 320 -     * - `Change.DELETE`

 Line: 328 -        return Change.UPDATE;

 Line: 334 -        return Change.DELETE;

 Line: 374 -      return a.type() === Change.DELETE &&

 Line: 375 -        b.type() === Change.DELETE;

 Line: 793 -     *  - `Change.UPDATE`: Source and target models were updated.

 Line: 794 -     *  - `Change.DELETE`: Source and or target model was deleted.

 Line: 808 -        if (sourceChangeType === Change.UPDATE && targetChangeType === Change.UPDATE) {

 Line: 809 -          return cb(null, Change.UPDATE);

 Line: 811 -        if (sourceChangeType === Change.DELETE || targetChangeType === Change.DELETE) {

 Line: 812 -          return cb(null, Change.DELETE);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/common/models/role.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -         * @param {object} [query] query object passed to model find call

 Line: 48 -         * @param {object} [query] query object passed to model find call

 Line: 57 -         * @param {object} [query] query object passed to model find call

 Line: 65 -            if (typeof query === 'function') {

 Line: 66 -              callback = query;

 Line: 67 -              query = {};

 Line: 72 -          query = query || {};

 Line: 73 -          query.where = query.where || {};

 Line: 94 -            query.where.principalType &&

 Line: 95 -            query.where.principalType !== RoleMapping.USER;

 Line: 100 -            principalType = query.where.principalType;

 Line: 102 -          // make sure we don't keep principalType in userModel query

 Line: 103 -          delete query.where.principalType;

 Line: 106 -            listByPrincipalType(this, principalModel, principalType, query, callback);

 Line: 122 -       * @param {object} [query] query object passed to model find call

 Line: 125 -      function listByPrincipalType(context, model, principalType, query, callback) {

 Line: 126 -        if (callback === undefined && typeof query === 'function') {

 Line: 127 -          callback = query;

 Line: 128 -          query = {};

 Line: 130 -        query = query || {};

 Line: 142 -          query.where = query.where || {};

 Line: 143 -          query.where.id = {inq: ids};

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/common/models/user.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 152 -      var query = {};

 Line: 156 -          query.email = credentials.email;

 Line: 158 -          query.username = credentials.username;

 Line: 162 -          query.realm = credentials.realm;

 Line: 167 -          query.email = parts[1];

 Line: 169 -            query.realm = parts[0];

 Line: 173 -          query.username = parts[1];

 Line: 175 -            query.realm = parts[0];

 Line: 179 -      return query;

 Line: 231 -      var query = self.normalizeCredentials(credentials, realmRequired,

 Line: 249 -      self.findOne({where: query}, function(err, user) {

 Line: 295 -              debug('The password is invalid for user %s', query.email || query.username);

 Line: 300 -          debug('No matching record is found for user %s', query.email || query.username);

 Line: 1050 -      var query = {userId: {inq: userIds}};

 Line: 1053 -        query[tokenPK] = {neq: options.accessToken[tokenPK]};

 Line: 1061 -        query.principalType = this.modelName;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/connectors/mail.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 157 -      g.log('\t FROM:%s', options.from);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/persisted-model.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 1698 -        setInterval(cleanup, cleanupInterval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/persisted-model.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -     * Extends Model with basic query and CRUD support.

 Line: 1085 -            if (ch.type() === Change.DELETE) return true;

 Line: 1379 -          case Change.UPDATE:

 Line: 1397 -          case Change.DELETE:

 Line: 1444 -            case Change.UPDATE:

 Line: 1455 -            case Change.DELETE:

 Line: 1552 -        // The workaround is to query the DB to check if the model already exists

 Line: 2010 -     * querying the Change model.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/model.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 501 -        // Default to `true` so that hidden properties cannot be used in query

 Line: 503 -        // Default to `12` for the max depth of a query object

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/example/replication/app.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 138 -    setInterval(function() {

</Result>
</report_mosca>

