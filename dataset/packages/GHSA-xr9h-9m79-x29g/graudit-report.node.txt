/src/build/cache.js-74-                if (content.expires.getTime() >= new Date().getTime()) {
/src/build/cache.js:75:                    const headers = JSON.parse(content.headers);
/src/build/cache.js-76-                    ctx.set(headers);
/src/build/cache.js-77-                    ctx.set('x-rendertron-cached', content.saved.toUTCString());
/src/build/cache.js:78:                    let payload = JSON.parse(content.payload);
/src/build/cache.js-79-                    if (payload && typeof (payload) == 'object' &&
##############################################
/src/build/renderer.js-101-        // Inject <base> tag with the origin of the request (ie. no path).
/src/build/renderer.js:102:        const parsedUrl = url.parse(requestUrl);
/src/build/renderer.js-103-        await page.evaluate(injectBaseHref, `${parsedUrl.protocol}//${parsedUrl.host}`);
##############################################
/src/build/datastore-cache.js-74-                if (content.expires.getTime() >= new Date().getTime()) {
/src/build/datastore-cache.js:75:                    const headers = JSON.parse(content.headers);
/src/build/datastore-cache.js-76-                    ctx.set(headers);
##############################################
/src/build/datastore-cache.js-78-                    try {
/src/build/datastore-cache.js:79:                        let payload = JSON.parse(content.payload);
/src/build/datastore-cache.js-80-                        if (payload && typeof (payload) === 'object' &&
##############################################
/src/build/rendertron.js-53-    restricted(href) {
/src/build/rendertron.js:54:        const parsedUrl = url.parse(href);
/src/build/rendertron.js-55-        const protocol = parsedUrl.protocol || '';
