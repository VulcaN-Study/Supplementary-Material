/src/scripts/updatedb.js-68-        if (process.env.http_proxy) {
/src/scripts/updatedb.js:69:            var options = url.parse(process.env.http_proxy);
/src/scripts/updatedb.js-70-
##############################################
/src/scripts/updatedb.js-72-            options.headers = {
/src/scripts/updatedb.js:73:Host: url.parse(downloadUrl).host
/src/scripts/updatedb.js-74-            };
##############################################
/src/scripts/updatedb.js-77-        } else {
/src/scripts/updatedb.js:78:            return url.parse(downloadUrl);
/src/scripts/updatedb.js-79-        }
##############################################
/src/scripts/updatedb.js-131-
/src/scripts/updatedb.js:132:var pipeSteam = fs.createReadStream(tmpFile).pipe(unzipStream);
/src/scripts/updatedb.js-133-
##############################################
/src/scripts/updatedb.js-218-
/src/scripts/updatedb.js:219:    lazy(fs.createReadStream(tmpDataFile))
/src/scripts/updatedb.js-220-        .lines
##############################################
/src/lib/geoip.js-112-
/src/lib/geoip.js:113:function preload(callback) {
/src/lib/geoip.js-114-    var datFile;
##############################################
/src/lib/geoip.js-125-
/src/lib/geoip.js:126:    //when the preload function receives a callback, do the task asynchronously
/src/lib/geoip.js-127-    if (typeof arguments[0] === 'function') {
##############################################
/src/lib/geoip.js-129-                function (cb) {
/src/lib/geoip.js:130:                    fs.open(dataFiles.country, 'r', function (err, file) {
/src/lib/geoip.js-131-                        if (err) {
##############################################
/src/lib/geoip.js-210-
/src/lib/geoip.js:211:preload();
/src/lib/geoip.js-212-
