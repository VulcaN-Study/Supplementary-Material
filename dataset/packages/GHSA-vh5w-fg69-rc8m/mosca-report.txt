<report_mosca>
 <Path>/src/third_party/closure/goog/mochikit/async/deferred.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 789 -   *   setTimeout(function() { value.callback(6); }, 2000);

 Line: 881 -    this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugin_impl.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 233 -    SELECTION: 4,

 Line: 252 -        handleSelectionChange: goog.editor.PluginImpl.Op.SELECTION,

 Line: 255 -        queryCommandValue: goog.editor.PluginImpl.Op.QUERY_COMMAND,

 Line: 336 -   * BEFORECHANGE, CHANGE, and SELECTIONCHANGE events, and calls

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/command.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 22 -   * Commands that the editor can excute via execCommand or queryCommandValue.

 Line: 61 -    UPDATE_LINK_BUBBLE: 'updateLinkBubble',

 Line: 63 -    // queryCommandValue only: returns the default tag name used in the field.

 Line: 70 -    UPDATE_LOREM: 'updatelorem',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/seamlessfield.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 306 -    // Because doFieldSizingGecko can be called after a setTimeout

 Line: 475 -    // Another point to note is that we do it on a setTimeout to allow for

 Line: 485 -      goog.global.setTimeout(goog.bind(function() {

 Line: 572 -      goog.global.setTimeout(function() { self.doFieldSizingGecko(); }, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/seamlessfield.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 479 -        !goog.editor.BrowserFeature.CLEARS_SELECTION_WHEN_FOCUS_LEAVES) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/style.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 120 -  goog.editor.style.SELECTABLE_INPUT_TYPES_ =

 Line: 148 -    if (goog.editor.BrowserFeature.HAS_UNSELECTABLE_STYLE) {

 Line: 164 -      if (input.type in goog.editor.style.SELECTABLE_INPUT_TYPES_) {

 Line: 207 -    if (goog.editor.BrowserFeature.HAS_UNSELECTABLE_STYLE) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/tableeditor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 77 -    INSERT_ROW_AFTER: '+insertRowAfter',

 Line: 78 -    INSERT_ROW_BEFORE: '+insertRowBefore',

 Line: 79 -    INSERT_COLUMN_AFTER: '+insertColumnAfter',

 Line: 80 -    INSERT_COLUMN_BEFORE: '+insertColumnBefore',

 Line: 204 -        case goog.editor.plugins.TableEditor.COMMAND.INSERT_ROW_BEFORE:

 Line: 207 -        case goog.editor.plugins.TableEditor.COMMAND.INSERT_ROW_AFTER:

 Line: 210 -        case goog.editor.plugins.TableEditor.COMMAND.INSERT_COLUMN_BEFORE:

 Line: 213 -        case goog.editor.plugins.TableEditor.COMMAND.INSERT_COLUMN_AFTER:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/undoredo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 431 -        previousFieldObject.execCommand(goog.editor.Command.UPDATE_LOREM);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/linkbubble.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 121 -  goog.editor.plugins.LinkBubble.DELETE_LINK_SPAN_ID_ = 'tr_delete-link-span';

 Line: 129 -  goog.editor.plugins.LinkBubble.DELETE_LINK_ID_ = 'tr_delete-link';

 Line: 250 -    return command == goog.editor.Command.UPDATE_LINK_BUBBLE;

 Line: 257 -    if (command == goog.editor.Command.UPDATE_LINK_BUBBLE) {

 Line: 423 -        goog.editor.plugins.LinkBubble.DELETE_LINK_SPAN_ID_);

 Line: 425 -        goog.editor.plugins.LinkBubble.DELETE_LINK_ID_,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/loremipsum.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 73 -   * Handles queryCommandValue.

 Line: 74 -   * @param {string} command The command to query.

 Line: 86 -   *     Should be CLEAR_LOREM or UPDATE_LOREM.

 Line: 95 -    } else if (command == goog.editor.Command.UPDATE_LOREM) {

 Line: 105 -        command == goog.editor.Command.UPDATE_LOREM ||

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/firststrong.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 130 -    if (goog.editor.Field.SELECTION_CHANGE_KEYCODES[e.keyCode]) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/abstractdialogplugin.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 263 -        goog.editor.Field.EventType.SELECTIONCHANGE);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/removeformatting.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 712 -          case String(goog.dom.TagName.SELECT):

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/basictextformatter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 399 -        // TODO(nicksantos): See if we can use queryCommandValue here.

 Line: 414 -        // We use queryCommandValue here since we don't just want to know if a

 Line: 688 -   * queryCommandState, etc.

 Line: 831 -      // NOTE(user): This doesn't check queryCommandState because it seems to

 Line: 1107 -      // (Note that queryCommandValue() will only return true if the

 Line: 1583 -  // Helpers for queryCommandState

 Line: 1748 -   * Wrapper for browser's queryCommandState.

 Line: 1749 -   * @param {Document|TextRange|Range} queryObject The object to query.

 Line: 1752 -   *     performing the queryCommandState.

 Line: 1759 -        this.queryCommandHelper_(true, queryObject, command, opt_styleWithCss));

 Line: 1764 -   * Wrapper for browser's queryCommandValue.

 Line: 1765 -   * @param {Document|TextRange|Range} queryObject The object to query.

 Line: 1768 -   *     performing the queryCommandValue.

 Line: 1775 -        false, queryObject, command, opt_styleWithCss);

 Line: 1780 -   * Helper function to perform queryCommand(Value|State).

 Line: 1781 -   * @param {boolean} isGetQueryCommandState True to use queryCommandState, false

 Line: 1782 -   *     to use queryCommandValue.

 Line: 1783 -   * @param {Document|TextRange|Range} queryObject The object to query.

 Line: 1786 -   *     performing the queryCommand(Value|State).

 Line: 1791 -      isGetQueryCommandState, queryObject, command, opt_styleWithCss) {

 Line: 1802 -    var ret = isGetQueryCommandState ? queryObject.queryCommandState(command) :

 Line: 1803 -                                       queryObject.queryCommandValue(command);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/enterhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 211 -   * @param {goog.events.Event} e The DELETE keypress event.

 Line: 240 -          // properly conform to what the user expects when DELETE is pressed.

 Line: 282 -      } else if (e.keyCode == goog.events.KeyCodes.DELETE) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/plugins/tagonenterhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 74 -   * queryCommandValue calls asking for goog.editor.Command.BLOCKQUOTE.

 Line: 146 -      if (e.keyCode == goog.events.KeyCodes.DELETE) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/browserfeature.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 84 -    CLEARS_SELECTION_WHEN_FOCUS_LEAVES:

 Line: 88 -    HAS_UNSELECTABLE_STYLE: goog.userAgent.GECKO || goog.userAgent.WEBKIT,

 Line: 181 -    SELECTS_IMAGES_ON_CLICK: goog.userAgent.IE || goog.userAgent.OPERA,

 Line: 190 -    COLLAPSES_SELECTION_ONMOUSEDOWN: false,

 Line: 194 -    CARET_INSIDE_SELECTION: goog.userAgent.OPERA,

 Line: 236 -    CAN_SELECT_EMPTY_ELEMENT: !goog.userAgent.IE && !goog.userAgent.WEBKIT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/range.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 316 -   * execCommand and queryCommandValue, which will fail often if there are

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/clicktoeditwrapper.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 240 -      this.originalDomHelper_.getWindow().setTimeout(this.finishMouseUpBound_, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/clicktoeditwrapper.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 171 -    this.fieldObj_.execCommand(goog.editor.Command.UPDATE_LOREM);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/field.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 283 -     * Dispatched after a user action that will eventually fire a SELECTIONCHANGE

 Line: 284 -     * event. For mouseups, this is fired immediately before SELECTIONCHANGE,

 Line: 285 -     * since {@link #handleMouseUp_} fires SELECTIONCHANGE immediately. May be

 Line: 286 -     * fired up to {@link #SELECTION_CHANGE_FREQUENCY_} ms before SELECTIONCHANGE

 Line: 290 -    BEFORESELECTIONCHANGE: 'beforeselectionchange',

 Line: 296 -    SELECTIONCHANGE: 'selectionchange'

 Line: 357 -   * Target node to be used when dispatching SELECTIONCHANGE asynchronously on

 Line: 913 -        goog.editor.Field.SELECTION_CHANGE_FREQUENCY_, this);

 Line: 938 -  goog.editor.Field.SELECTION_CHANGE_FREQUENCY_ = 250;

 Line: 1150 -  goog.editor.Field.SELECTION_CHANGE_KEYCODES = {

 Line: 1171 -   * SELECTION_CHANGE_KEYCODES

 Line: 1175 -  goog.editor.Field.CTRL_KEYS_CAUSING_SELECTION_CHANGES_ = {

 Line: 1186 -   * or extending it from SELECTION_CHANGE_KEYCODES

 Line: 1376 -   * Fires `BEFORESELECTIONCHANGE` and starts the selection change timer

 Line: 1377 -   * (which will fire `SELECTIONCHANGE`) if the given event is a key event

 Line: 1383 -    if (this.isEventStopped(goog.editor.Field.EventType.SELECTIONCHANGE)) {

 Line: 1387 -    if (goog.editor.Field.SELECTION_CHANGE_KEYCODES[e.keyCode] ||

 Line: 1389 -         goog.editor.Field.CTRL_KEYS_CAUSING_SELECTION_CHANGES_[e.keyCode])) {

 Line: 1390 -      this.dispatchEvent(goog.editor.Field.EventType.BEFORESELECTIONCHANGE);

 Line: 1646 -    if (this.isEventStopped(goog.editor.Field.EventType.SELECTIONCHANGE)) {

 Line: 1659 -      type: goog.editor.Field.EventType.SELECTIONCHANGE,

 Line: 1664 -        goog.editor.PluginImpl.Op.SELECTION, opt_e, opt_target);

 Line: 2007 -    if (!goog.editor.BrowserFeature.CLEARS_SELECTION_WHEN_FOCUS_LEAVES &&

 Line: 2106 -    this.dispatchEvent(goog.editor.Field.EventType.BEFORESELECTIONCHANGE);

 Line: 2211 -      this.execCommand(goog.editor.Command.UPDATE_LOREM);

 Line: 2490 -      this.execCommand(goog.editor.Command.UPDATE_LOREM);

 Line: 2564 -    this.execCommand(goog.editor.Command.UPDATE_LOREM);

 Line: 2653 -      // NOTE(user): This hasn't been confirmed.  isHttps_ allows a query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/editor/link.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 222 -    field.execCommand(goog.editor.Command.UPDATE_LINK_BUBBLE);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/eventtype.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -    SELECTIONCHANGE: 'selectionchange',

 Line: 63 -    SELECTSTART: 'selectstart',  // IE, Safari, Chrome

 Line: 84 -    SELECT: 'select',

 Line: 141 -    TIMEUPDATE: 'timeupdate',

 Line: 152 -    UPDATE: 'update',

 Line: 153 -    UPDATESTART: 'updatestart',

 Line: 154 -    UPDATEEND: 'updateend',

 Line: 195 -    UPDATEFOUND: 'updatefound',

 Line: 251 -    COMPOSITIONUPDATE: 'compositionupdate',

 Line: 280 -    DOMNODEINSERTED: 'DOMNodeInserted',

 Line: 282 -    DOMNODEREMOVEDFROMDOCUMENT: 'DOMNodeRemovedFromDocument',

 Line: 283 -    DOMNODEINSERTEDINTODOCUMENT: 'DOMNodeInsertedIntoDocument',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/pastehandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 488 -            e.shiftKey && e.keyCode == goog.events.KeyCodes.INSERT ||

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/imehandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -   * Spurious UPDATE events are common on all browsers.

 Line: 86 -              el, goog.events.EventType.COMPOSITIONUPDATE,

 Line: 109 -    UPDATE: 'updateIme',

 Line: 242 -            goog.events.ImeHandler.EventType.UPDATE, e));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/keyhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 220 -    '63272': goog.events.KeyCodes.DELETE,        // 46

 Line: 226 -    '63302': goog.events.KeyCodes.INSERT         // 45

 Line: 256 -    'U+007F': goog.events.KeyCodes.DELETE,       // 46

 Line: 261 -    'Insert': goog.events.KeyCodes.INSERT        // 45

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/listenable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -   * Listenable, so that we can query that fact at runtime. The class

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/events/keycodes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -    INSERT: 45,  // also NUM_INSERT

 Line: 51 -    DELETE: 46,  // also NUM_DELETE

 Line: 205 -      case goog.events.KeyCodes.INSERT:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/fx/anim/anim.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 37 -   * animation, which uses a timer (setTimeout) to schedule animation.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/fx/abstractdragdrop.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 419 -        doc.body, goog.events.EventType.SELECTSTART, this.suppressSelect_);

 Line: 549 -        doc.body, goog.events.EventType.SELECTSTART, this.suppressSelect_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/style/style.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 459 -      // In quirks mode, the offset can be determined by querying the body's

 Line: 460 -      // clientLeft/clientTop, but in standards mode, it is found by querying

 Line: 463 -      // too expensive just to query them all.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/entries.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 162 -   * that are associated with a query parameter.

 Line: 170 -    // Apply this restriction for settings since they turn in to query

 Line: 176 -     * The value of this setting's query parameter.

 Line: 183 -     * The query parameter that controls this setting.

 Line: 205 -    // settings (associated query parameter, token, etc).

 Line: 230 -   * Sets the value of the entry based on the value of the query parameter. Once

 Line: 231 -   * this is called, configuration settings (associated query parameter, token,

 Line: 233 -   * @param {?string} value The part of the query param for this setting after

 Line: 241 -   * Returns the value to be used in the query parameter for this tweak.

 Line: 273 -   * Sets the initial query parameter value for this setting. May not be called

 Line: 275 -   * @param {string} value The initial query parameter value for this setting.

 Line: 284 -   * Returns the name of the query parameter used for this setting.

 Line: 285 -   * @return {?string} The param name. Null if no query parameter is directly

 Line: 294 -   * Sets the name of the query parameter used for this setting. If null is

 Line: 295 -   * passed the the setting will not appear in the top-level query string.

 Line: 305 -   * Applies the default value or query param value if this is the first time

 Line: 373 -   * Returns the query param encoded representation of the setting's value.

 Line: 562 -        // Make the query parameter values case-insensitive since users might

 Line: 802 -     * The token to use in the query parameter.

 Line: 815 -    // Take setting out of top-level query parameter list.

 Line: 840 -   * Sets the token to use in the query parameter.

 Line: 849 -   * Returns the token to use in the query parameter.

 Line: 870 -   * entries modify the same query parameter. For example:

 Line: 890 -     * A map of token->true/false for all tokens that appeared in the query

 Line: 935 -    // Initialize from query param.

 Line: 947 -    var queryParamValues = {};

 Line: 957 -        queryParamValues[token] = !negative;

 Line: 960 -    this.queryParamValues_ = queryParamValues;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/tweak.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -   * @fileoverview Provides facilities for creating and querying tweaks.

 Line: 67 -      var queryString = window.location.search;

 Line: 178 -   * single query parameter. A call to goog.tweak.endBooleanGroup() must be used

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/registry.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -   * @param {string} queryParams Value of window.location.search.

 Line: 54 -     * The map of query params to use when initializing entry settings.

 Line: 95 -   * Simple parser for query params. Makes all keys lower-case.

 Line: 96 -   * @param {string} queryParams The part of the url between the ? and the #.

 Line: 101 -    var parts = queryParams.substr(1).split('&');

 Line: 144 -    // Set its value from the query params.

 Line: 237 -   * query parameter.

 Line: 262 -   * Returns the query part of the URL that will apply all set tweaks.

 Line: 265 -   * @return {string} The query string.

 Line: 286 -      // Strip all tweak query params from the existing query string. This will

 Line: 287 -      // make the final query string contain only the tweak settings that are set

 Line: 288 -      // to their non-default values and also maintain non-tweak related query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/testhelpers.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -   * @param {string} queryParams The query parameter string to use for the

 Line: 56 -    // Initialize the registry with the given query string.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/tweak/tweakui.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 287 -   * Reloads the page with query parameters set by the UI.

 Line: 291 -    var queryString = this.registry_.makeUrlQuery();

 Line: 294 -      wnd.location.search = queryString;

 Line: 646 -    var selectElem = dh.createElement(goog.dom.TagName.SELECT);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/abstractdialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 258 -        goog.ui.Dialog.EventType.SELECT,

 Line: 259 -        // Listen for the SELECT event, which means a button was clicked, and

 Line: 301 -   * Map from keys that will be returned in the wrapped dialog SELECT events to

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/tabpane.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 138 -    // is selected.  You don't get a SELECT at all.  We listen for SELECT

 Line: 140 -    // SELECT.

 Line: 142 -        radio, [goog.events.EventType.SELECT, goog.events.EventType.CLICK],

 Line: 163 -        this.tabBar_, goog.ui.Component.EventType.SELECT, this.handleTabSelect_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/toolbarcontroller.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 79 -    // queryable commands. Add them to the list of commands to query on

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/defaulttoolbar.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 347 -      // set the button object's queryable property to true.

 Line: 843 -   *   <li>(@code queryable} - Whether the button's state should be queried

 Line: 861 -   *   queryable:(undefined|boolean)}}

 Line: 880 -      queryable: true

 Line: 887 -      queryable: true

 Line: 894 -      queryable: true

 Line: 901 -      queryable: true

 Line: 907 -      queryable: true

 Line: 913 -      queryable: true

 Line: 919 -      queryable: true

 Line: 926 -      queryable: true

 Line: 933 -      queryable: true

 Line: 940 -      queryable: true

 Line: 947 -      queryable: true

 Line: 954 -      queryable: true

 Line: 973 -      queryable: true

 Line: 980 -      queryable: true

 Line: 987 -      queryable: true

 Line: 994 -      queryable: true

 Line: 1014 -      queryable: true

 Line: 1020 -      queryable: true

 Line: 1027 -      queryable: true

 Line: 1033 -      queryable: true

 Line: 1040 -      queryable: true

 Line: 1047 -      queryable: true

 Line: 1055 -      queryable: true

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/editor/linkdialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 518 -        this.tabPane_, goog.ui.Component.EventType.SELECT, this.onChangeTab_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/buttonrenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 86 -      // If button has CHECKED or SELECTED state, assign aria-pressed

 Line: 87 -      case goog.ui.Component.State.SELECTED:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/tab.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -    // Tabs support the SELECTED state.

 Line: 48 -    this.setSupportedState(goog.ui.Component.State.SELECTED, true);

 Line: 50 -    // Tabs must dispatch state transition events for the DISABLED and SELECTED

 Line: 53 -        goog.ui.Component.State.DISABLED | goog.ui.Component.State.SELECTED,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/option.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -   * of the option and not dispatching any SELECTED events, for backwards

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/paletterenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 192 -    goog.a11y.aria.setState(cell, goog.a11y.aria.State.SELECTED, false);

 Line: 394 -      goog.a11y.aria.setState(cell, goog.a11y.aria.State.SELECTED, select);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/serverchart.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1523 -    var queryData = this.uri_.getQueryData();

 Line: 1524 -    queryData.remove(goog.ui.ServerChart.UriParam.LEGEND_TEXTS);

 Line: 1525 -    queryData.remove(goog.ui.ServerChart.UriParam.DATA_COLORS);

 Line: 1526 -    queryData.remove(goog.ui.ServerChart.UriParam.DATA);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/vimeo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   *   <li> {@link goog.ui.Component.State.SELECTED}: flash video is shown

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/flickr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   *   <li> {@link goog.ui.Component.State.SELECTED}: flash video is shown

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/youtube.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   *   <li> {@link !goog.ui.Component.State.SELECTED}: a static thumbnail is shown

 Line: 44 -   *   <li> {@link goog.ui.Component.State.SELECTED}: video is playing

 Line: 94 -   * It will change its DOM structure between SELECTED and !SELECTED, and rely on

 Line: 95 -   * CSS definitions on the others. On !SELECTED, the renderer will render a

 Line: 96 -   * youtube static `<img>`, with a thumbnail of the video. On SELECTED, the

 Line: 145 -   * structure when the youtube movie is SELECTED (by default fired by a MOUSEUP

 Line: 168 -    if (!!(state & goog.ui.Component.State.SELECTED) && enable) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/photo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -   *   <li> {@link goog.ui.Component.State.SELECTED}: photo is being displayed.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/googlevideo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   *   <li> {@link goog.ui.Component.State.SELECTED}: flash video is shown

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/picasa.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -   *   <li> {@link goog.ui.Component.State.SELECTED}: flash album is shown

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/mp3.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -   *   <li> {@link goog.ui.Component.State.SELECTED}: mp3 is playing

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/media/media.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 124 -    this.setSupportedState(goog.ui.Component.State.SELECTED, true);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/controlrenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 169 -      goog.a11y.aria.Role.MENU_ITEM, goog.a11y.aria.State.SELECTED,

 Line: 173 -      goog.a11y.aria.Role.TAB, goog.a11y.aria.State.SELECTED,

 Line: 174 -      goog.a11y.aria.Role.TREEITEM, goog.a11y.aria.State.SELECTED);

 Line: 437 -    if (control.isSupportedState(goog.ui.Component.State.SELECTED)) {

 Line: 439 -          element, goog.ui.Component.State.SELECTED, control.isSelected());

 Line: 596 -          goog.ui.Component.State.SELECTED, goog.a11y.aria.State.SELECTED,

 Line: 640 -        attr == goog.a11y.aria.State.SELECTED;

 Line: 924 -        goog.ui.Component.State.SELECTED, goog.getCssName(baseClass, 'selected'),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/submenu.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 395 -        this.isSupportedState(goog.ui.Component.State.SELECTED) ||

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/dialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 745 -    // setTimeout, but that was deemed undesirable.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/dialog.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1042 -        // Users may expect to hit escape on a SELECT element.

 Line: 1044 -            target.tagName == goog.dom.TagName.SELECT && !target.disabled;

 Line: 1081 -        // Users may expect to hit enter on a TEXTAREA, SELECT or an A element.

 Line: 1083 -                                    target.tagName == goog.dom.TagName.SELECT ||

 Line: 1125 -    this.type = goog.ui.Dialog.EventType.SELECT;

 Line: 1136 -   * TODO(attila): Change this to goog.ui.Dialog.EventType.SELECT.

 Line: 1138 -   * @deprecated Use goog.ui.Dialog.EventType.SELECT.

 Line: 1140 -  goog.ui.Dialog.SELECT_EVENT = 'dialogselect';

 Line: 1153 -    SELECT: 'dialogselect',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/selectionmenubutton.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 215 -    var MSG_SELECTIONMENUITEM_ALL = goog.getMsg('All');

 Line: 217 -    var MSG_SELECTIONMENUITEM_NONE = goog.getMsg('None');

 Line: 220 -        MSG_SELECTIONMENUITEM_ALL, null, this.getDomHelper(),

 Line: 223 -        MSG_SELECTIONMENUITEM_NONE, null, this.getDomHelper(),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/prompt.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 184 -        this, goog.ui.Dialog.EventType.SELECT, this.onPromptExit_);

 Line: 410 -        this, goog.ui.Dialog.EventType.SELECT, this.onPromptExit_, true, this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/select.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 157 -   * Handles {@link goog.events.EventType.SELECT} events raised by the

 Line: 399 -   * {@link goog.events.EventType.SELECT} events dispatched by it.

 Line: 424 -          this.selectionModel_, goog.events.EventType.SELECT,

 Line: 474 -            contentElement, goog.a11y.aria.State.SELECTED, true);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/abstractspellchecker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 31 -   * different stack (for example by calling setInterval(0)).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/remotearraymatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 137 -  goog.ui.ac.RemoteArrayMatcher.prototype.setTimeoutInterval = function(

 Line: 139 -    this.xhr_.setTimeoutInterval(interval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/remotearraymatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -   *     search term is passed to the server as the 'token' query param.

 Line: 34 -   *     The value is sent to the server as the 'use_similar' query param which is

 Line: 47 -     * query params.

 Line: 223 -   *     as the 'token' query param.

 Line: 225 -   *     server; passed as the 'max_matches' query param.  The server is

 Line: 238 -    // Set the query params on the URL.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/inputhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 783 -      this.timer_.setInterval(time);

 Line: 1045 -          window.setTimeout(goog.bind(this.processBlur, this), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/remote.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 110 -  goog.ui.ac.Remote.prototype.setTimeoutInterval = function(interval) {

 Line: 111 -    this.matcher_.setTimeoutInterval(interval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/richremotearraymatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -   *     search term is passed to the server as the 'token' query param.

 Line: 36 -   *     The value is sent to the server as the 'use_similar' query param which is

 Line: 100 -   *     as the 'token' query param.

 Line: 102 -   *     server; passed as the 'max_matches' query param. The server is

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/renderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1072 -        type: goog.ui.ac.AutoComplete.EventType.SELECT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/autocomplete.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 707 -      this.dismissTimer_ = window.setTimeout(goog.bind(this.dismiss, this), 100);

 Line: 739 -      window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ac/autocomplete.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 95 -          goog.ui.ac.AutoComplete.EventType.SELECT,

 Line: 223 -    SELECT: 'select',

 Line: 238 -    UPDATE: 'update',

 Line: 245 -    SUGGESTIONS_UPDATE: 'suggestionsupdate'

 Line: 387 -        case goog.ui.ac.AutoComplete.EventType.SELECT:

 Line: 655 -          type: goog.ui.ac.AutoComplete.EventType.UPDATE,

 Line: 667 -        type: goog.ui.ac.AutoComplete.EventType.UPDATE,

 Line: 697 -    this.dispatchEvent(goog.ui.ac.AutoComplete.EventType.SUGGESTIONS_UPDATE);

 Line: 834 -    this.dispatchEvent(goog.ui.ac.AutoComplete.EventType.SUGGESTIONS_UPDATE);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/palette.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -        goog.ui.Component.State.CHECKED | goog.ui.Component.State.SELECTED |

 Line: 160 -          this.selectionModel_, goog.events.EventType.SELECT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/gauge.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 151 -  goog.ui.Gauge.FACTOR_RADIUS_FROM_SIZE = 0.45;

 Line: 656 -    var r = Math.round(goog.ui.Gauge.FACTOR_RADIUS_FROM_SIZE * size);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/selectionmodel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -   * Single-selection model.  Dispatches a {@link goog.events.EventType.SELECT}

 Line: 183 -   * Removes the given item (if it exists).  Dispatches a `SELECT` event if

 Line: 191 -        this.dispatchEvent(goog.events.EventType.SELECT);

 Line: 224 -   * dispatches a `SELECT` event.

 Line: 234 -    // Always dispatch a SELECT event; let listeners decide what to do if the

 Line: 236 -    this.dispatchEvent(goog.events.EventType.SELECT);

 Line: 251 -   * item, and dispatches a `SELECT` event.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/charpicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 399 -    var MSG_CHAR_PICKER_RECENT_SELECTIONS = goog.getMsg('Recent Selections:');

 Line: 403 -            goog.dom.TagName.SPAN, null, MSG_CHAR_PICKER_RECENT_SELECTIONS));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/dragdropdetector.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 297 -                // iframe.  We setTimeout so that handleNodeInserted_ is called

 Line: 299 -                goog.global.setTimeout(

 Line: 492 -      goog.global.setTimeout(goog.bind(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/tabrenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 119 -        tab.setState(goog.ui.Component.State.SELECTED, false);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/tabbar.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 41 -   *   <li>{@link goog.ui.Component.EventType.SELECT} when selected, and

 Line: 42 -   *   <li>{@link goog.ui.Component.EventType.UNSELECT} when deselected.

 Line: 47 -   * `SELECT` event and an `ACTION` event; subsequent clicks on an

 Line: 221 -      // Select the tab and have it dispatch a SELECT event, to be handled in

 Line: 225 -      // De-select the currently selected tab and have it dispatch an UNSELECT

 Line: 296 -   * Handles `SELECT` events dispatched by tabs as they become selected.

 Line: 310 -   * Handles `UNSELECT` events dispatched by tabs as they become deselected.

 Line: 363 -    // Listen for SELECT, UNSELECT, DISABLE, and HIDE events dispatched by tabs.

 Line: 365 -        .listen(this, goog.ui.Component.EventType.SELECT, this.handleTabSelect)

 Line: 367 -            this, goog.ui.Component.EventType.UNSELECT, this.handleTabUnselect)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/bubble.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 192 -  goog.ui.Bubble.prototype.setTimeout = function(timeout) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/datepicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 357 -    SELECT: 'select'

 Line: 777 -   * Sets the selected date. Will always fire the SELECT event.

 Line: 787 -   * Sets the selected date, and optionally fires the SELECT event based on param.

 Line: 822 -          goog.ui.DatePicker.Events.SELECT, this, this.date_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/keyboardshortcuthandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1189 -    // INPUT, TEXTAREA, BUTTON, SELECT, etc.

 Line: 1194 -        el.tagName == goog.dom.TagName.SELECT;

 Line: 1213 -    // Event target is one of (TEXTAREA, INPUT, BUTTON, SELECT).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/menuitemrenderer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 124 -        item, element, item.isSupportedState(goog.ui.Component.State.SELECTED) ||

 Line: 315 -      case goog.ui.Component.State.SELECTED:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/popupdatepicker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 131 -            this.datePicker_, goog.ui.DatePicker.Events.SELECT,

 Line: 282 -            this.datePicker_, goog.ui.DatePicker.Events.SELECT,

 Line: 308 -            this.datePicker_, goog.ui.DatePicker.Events.SELECT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/control.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 932 -    return this.hasState(goog.ui.Component.State.SELECTED);

 Line: 943 -    if (this.isTransitionAllowed(goog.ui.Component.State.SELECTED, select)) {

 Line: 944 -      this.setState(goog.ui.Component.State.SELECTED, select);

 Line: 1360 -    if (this.isAutoState(goog.ui.Component.State.SELECTED)) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/component.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 236 -    SELECT: 'select',

 Line: 239 -    UNSELECT: 'unselect',

 Line: 360 -     * @see goog.ui.Component.EventType.SELECT

 Line: 361 -     * @see goog.ui.Component.EventType.UNSELECT

 Line: 363 -    SELECTED: 0x08,

 Line: 409 -      case goog.ui.Component.State.SELECTED:

 Line: 410 -        return isEntering ? goog.ui.Component.EventType.SELECT :

 Line: 411 -                            goog.ui.Component.EventType.UNSELECT;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/ratings.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 146 -        goog.dom.TagName.SELECT, goog.asserts.assert(el))[0];

 Line: 245 -        if (this.attachedFormField_.tagName == goog.dom.TagName.SELECT) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/ui/menuitem.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 121 -      case goog.ui.Component.State.SELECTED:

 Line: 137 -    this.setSupportedState(goog.ui.Component.State.SELECTED, selectable);

 Line: 304 -    if (this.isSupportedState(goog.ui.Component.State.SELECTED)) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/forms.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 171 -        case goog.dom.InputType.SELECT_MULTIPLE:

 Line: 322 -        case goog.dom.InputType.SELECT_ONE:

 Line: 324 -        case goog.dom.InputType.SELECT_MULTIPLE:

 Line: 425 -      case goog.dom.InputType.SELECT_ONE:

 Line: 430 -      case goog.dom.InputType.SELECT_MULTIPLE:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/annotate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -   * @fileoverview Methods for annotating occurrences of query terms in text or

 Line: 45 -   * @param {*=} opt_ignoreCase  Whether to ignore the case of the query

 Line: 94 -   * @param {*} ignoreCase  Whether to ignore the case of the query terms

 Line: 181 -   * Annotates occurrences of query terms in plain text. This process consists of

 Line: 182 -   * identifying all occurrences of all query terms, calling a provided function

 Line: 193 -   * @param {*=} opt_ignoreCase  Whether to ignore the case of the query

 Line: 209 -   * Annotates occurrences of query terms in plain text. This process consists of

 Line: 210 -   * identifying all occurrences of all query terms, calling a provided function

 Line: 222 -   * @param {*} ignoreCase  Whether to ignore the case of the query terms

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/attr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 105 -    SELECTED: 'selected',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/browserrange/w3crange.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 229 -  // SELECTION MODIFICATION

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/browserrange/ierange.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 715 -  // SELECTION MODIFICATION

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/browserrange/abstractrange.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 284 -  // SELECTION MODIFICATION

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/inputtype.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -   * all input element types (for INPUT, BUTTON, SELECT and TEXTAREA

 Line: 24 -   * Enum of all input types (for INPUT, BUTTON, SELECT and TEXTAREA elements)

 Line: 47 -    SELECT_MULTIPLE: 'select-multiple',

 Line: 48 -    SELECT_ONE: 'select-one',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/animationframe/polyfill.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 43 -          return goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/dom.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 194 -   * SVG namespace you should use querySelector or querySelectorAll instead.

 Line: 324 -      var query = tagName + (opt_class ? '.' + opt_class : '');

 Line: 2086 -        element.tagName == goog.dom.TagName.SELECT ||

 Line: 2454 -    var query =

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/dom/tagname.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 457 -  goog.dom.TagName.SELECT = new goog.dom.TagName('SELECT');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/a11y/aria/datatables.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 52 -          goog.a11y.aria.State.MULTISELECTABLE, false,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/a11y/aria/attributes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 135 -    MULTISELECTABLE: 'multiselectable',

 Line: 174 -    SELECTED: 'selected',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/a11y/aria/aria.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 60 -    goog.dom.TagName.SELECT, goog.dom.TagName.SOURCE, goog.dom.TagName.TEXTAREA,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/timer/timer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 8 -   * This is only an abstraction above `setInterval`.

 Line: 24 -   * @param {Object=} opt_timerObject  An object that has `setTimeout`,

 Line: 25 -   *     `setInterval`, `clearTimeout` and `clearInterval`

 Line: 40 -     * An object that implements `setTimeout`, `setInterval`,

 Line: 45 -     * @private {{setTimeout:!Function, clearTimeout:!Function}}

 Line: 47 -    this.timerObject_ = /** @type {{setTimeout, clearTimeout}} */ (

 Line: 85 -   * `window.setTimeout`. Passing this value to `window.clearTimeout`

 Line: 102 -   * An object that implements `setTimeout`, `setInterval`,

 Line: 107 -   * @type {{setTimeout, clearTimeout}}

 Line: 123 -   * Variable for storing the result of `setInterval`.

 Line: 142 -  goog.Timer.prototype.setInterval = function(interval) {

 Line: 155 -   * Callback for the `setTimeout` used by the timer.

 Line: 162 -        this.timer_ = this.timerObject_.setTimeout(

 Line: 167 -      // Prevents setInterval from registering a duplicate timeout when called

 Line: 203 -      // window.setInterval in FireFox has a bug - it fires based on

 Line: 211 -      // to setTimeout logic.

 Line: 214 -      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);

 Line: 279 -      return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/bootstrap/webworkers.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 34 -        eval(opt_sourceText)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/bootstrap/nodejs.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 64 -      eval(opt_sourceText);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/module/loader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 200 -    eval(t_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/module/modulemanager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 386 -    window.setTimeout(

 Line: 619 -      window.setTimeout(loadFn, delay);

 Line: 640 -        goog.global.setTimeout(

 Line: 815 -        window.setTimeout(goog.bind(callbackWrapper.execute, callbackWrapper), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/module/moduleinfo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 304 -      window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/math/rangeset.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 175 -   * @param {goog.math.Range} a The query range.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/locale/locale.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 57 -    TIME_ZONE_SELECTED_IDS: 'TimeZoneSelectedIds',

 Line: 58 -    TIME_ZONE_SELECTED_SHORT_NAMES: 'TimeZoneSelectedShortNames',

 Line: 59 -    TIME_ZONE_SELECTED_LONG_NAMES: 'TimeZoneSelectedLongNames',

 Line: 317 -        dataObj, goog.locale.Resource.TIME_ZONE_SELECTED_IDS, localeName);

 Line: 329 -        dataObj, goog.locale.Resource.TIME_ZONE_SELECTED_SHORT_NAMES, localeName);

 Line: 341 -        dataObj, goog.locale.Resource.TIME_ZONE_SELECTED_LONG_NAMES, localeName);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/sanitizer/html_test_vectors.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21486 -           "<SELECT />",

 Line: 21487 -           "<SELECT></SELECT>",

 Line: 21499 -           "<SELECT />",

 Line: 21500 -           "<SELECT></SELECT>",

 Line: 21517 -           "<SELECT />",

 Line: 21518 -           "<SELECT></SELECT>",

 Line: 21533 -           "<SELECT />",

 Line: 21534 -           "<SELECT></SELECT>",

 Line: 21549 -           "<SELECT />",

 Line: 21550 -           "<SELECT></SELECT>",

 Line: 21565 -           "<SELECT />",

 Line: 21566 -           "<SELECT></SELECT>",

 Line: 21581 -           "<SELECT />",

 Line: 21582 -           "<SELECT></SELECT>",

 Line: 21597 -           "<SELECT />",

 Line: 21598 -           "<SELECT></SELECT>",

 Line: 21613 -           "<SELECT />",

 Line: 21614 -           "<SELECT></SELECT>",

 Line: 21629 -           "<SELECT />",

 Line: 21630 -           "<SELECT></SELECT>",

 Line: 21645 -           "<SELECT />",

 Line: 21646 -           "<SELECT></SELECT>",

 Line: 21661 -           "<SELECT />",

 Line: 21662 -           "<SELECT></SELECT>",

 Line: 21677 -           "<SELECT />",

 Line: 21678 -           "<SELECT></SELECT>",

 Line: 21693 -           "<SELECT />",

 Line: 21694 -           "<SELECT></SELECT>",

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/sanitizer/tagwhitelist.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 93 -    'SELECT': true,    // HTMLSelectElement

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/sanitizer/csssanitizer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 38 -  goog.html.sanitizer.CssSanitizer.SELECTOR_REGEX_ =

 Line: 132 -              goog.html.sanitizer.CssSanitizer.SELECTOR_REGEX_,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/sanitizer/attributewhitelist.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -    '* ARIA-MULTISELECTABLE': true,

 Line: 39 -    '* ARIA-SELECTED': true,

 Line: 89 -    '* SELECTED': true,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/html/safeurl.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 591 -   *     Otherwise, a colon after a (?) must be in a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/i18n/charpickerdata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 553 -  goog.i18n.CharPickerData.MSG_CP_VARIATION_SELECTOR =

 Line: 2220 -    goog.i18n.CharPickerData.MSG_CP_VARIATION_SELECTOR,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/i18n/messageformat.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 176 -    SELECT: 2,

 Line: 334 -        case goog.i18n.MessageFormat.BlockType_.SELECT:

 Line: 604 -  goog.i18n.MessageFormat.SELECT_BLOCK_RE_ = /^\s*(\w+)\s*,\s*select\s*,/;

 Line: 622 -    if (goog.i18n.MessageFormat.SELECT_BLOCK_RE_.test(pattern)) {

 Line: 623 -      return goog.i18n.MessageFormat.BlockType_.SELECT;

 Line: 653 -          case goog.i18n.MessageFormat.BlockType_.SELECT:

 Line: 654 -            block.type = goog.i18n.MessageFormat.BlockType_.SELECT;

 Line: 692 -    var replaceRegex = goog.i18n.MessageFormat.SELECT_BLOCK_RE_;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/i18n/ucharnames.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -      var MSG_VARIATION_SELECTOR_SEQNUM = goog.getMsg(

 Line: 64 -      return MSG_VARIATION_SELECTOR_SEQNUM;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/history/history.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 919 -      this.timer_.setInterval(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/history/history.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 696 -   * Older versions of Webkit cannot query the location hash, but it still can be

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/style/pixeldensitymonitor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 72 -     * The media query list for a query that detects high density, if supported

 Line: 127 -   * Media query that matches for high density.

 Line: 160 -   * Handles a change to the media query and checks whether the density has

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/mock/mock.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 502 -  goog.labs.mock.MockManager_.prototype.setTimeoutMode_ = function(timeoutMode) {

 Line: 682 -      var timeout = setTimeout(() => {

 Line: 821 -    this.mockedItem.$timeoutModeSetter = goog.bind(this.setTimeoutMode_, this);

 Line: 906 -    this.mockedItem.$timeoutModeSetter = goog.bind(this.setTimeoutMode_, this);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 112 -   * messageUrlParams: custom url query parameters to be added to every message

 Line: 468 -   * For applications to query the current HTTP session id, sent by the server

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/wirev8.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 141 -   * Must be valid JSON as it is insecure to use eval() to decode JS literals;

 Line: 142 -   * and eval() is disallowed in Chrome apps too.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/channelrequest.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 405 -  ChannelRequest.prototype.setTimeout = function(timeout) {

 Line: 952 -  ChannelRequest.prototype.resetTimeout = function(opt_timeout) {

 Line: 954 -      this.setTimeout(opt_timeout);

 Line: 988 -        requestStats.setTimeout(goog.bind(this.onWatchDogTimeout_, this), time);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/netutils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 91 -        goog.global.setTimeout(function() {

 Line: 125 -      goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/requeststats.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 376 -  requestStats.setTimeout = function(fn, ms) {

 Line: 380 -    return goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/webchannelbase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 229 -     * is equivalent to setTimeout(0).

 Line: 658 -      // requestStats.setTimeout(goog.bind(this.connectTest_, this, testPath), 0);

 Line: 1158 -    // Use async.run instead of setTimeout(0) to avoid the 1s message delay

 Line: 1200 -    this.forwardChannelTimerId_ = requestStats.setTimeout(

 Line: 1412 -    request.setTimeout(

 Line: 1490 -    // Use async.run instead of setTimeout(0) to avoid the 1s message delay

 Line: 1492 -    // backChannelTimerId_ stays unset, as with setTimeout(0)

 Line: 1518 -    this.backChannelTimerId_ = requestStats.setTimeout(

 Line: 1573 -      this.backChannelRequest_.setTimeout(this.backChannelRequestTimeoutMs_);

 Line: 1725 -        this.deadBackChannelTimerId_ = requestStats.setTimeout(

 Line: 2110 -      request.resetTimeout(this.backChannelRequestTimeoutMs_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/webchannel/webchannelbase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 950 -   * querying only after the test connection has completed. This may be

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/net/xhr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 345 -        timer = goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/labs/testing/environment.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 161 -     * installed (override i.e. setTimeout) by default. It can be accessed

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/structs/prioritypool.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 69 -    this.delayTimeout_ = goog.global.setTimeout(

 Line: 95 -        this.delayTimeout_ = goog.global.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/disposable/idisposable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 22 -   * 2. Cancel timers (setTimeout, setInterval, goog.Timer).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/websocket.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 404 -    // Firing this event allows handlers to query the URL.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/jsloader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 173 -      timeout = window.setTimeout(function() {

 Line: 350 -      window.setTimeout(function() { goog.dom.removeNode(scriptNode); }, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/crossdomainrpc.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 490 -    var responseDetectorHandle = window.setInterval(goog.bind(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/iframeloadmonitor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 82 -      this.intervalId_ = window.setInterval(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xhrmanager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 142 -  goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {

 Line: 268 -      xhrIo.setTimeoutInterval(this.timeoutInterval_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/crosspagechannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 469 -      window.setTimeout(goog.bind(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/crosspagechannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 275 -    // when querying its parent's 'closed' status. Note that this is a different

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xpc/iframepollingtransport.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 458 -      this.getWindow().setTimeout(goog.bind(this.connect, this), 100);

 Line: 516 -      this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);

 Line: 527 -      this.getWindow().setTimeout(goog.bind(function() {

 Line: 838 -        window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);

 Line: 862 -    goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/networktester.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 163 -  goog.net.NetworkTester.prototype.setTimeout = function(timeoutMs) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/tmpnetwork.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 98 -        goog.global.setTimeout(function() {

 Line: 155 -    goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/channelrequest.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 128 -    this.pollingTimer_.setInterval(goog.net.ChannelRequest.POLLING_INTERVAL_MS);

 Line: 455 -  goog.net.ChannelRequest.prototype.setTimeout = function(timeout) {

 Line: 1014 -    goog.net.BrowserChannel.setTimeout(

 Line: 1047 -    goog.net.BrowserChannel.setTimeout(

 Line: 1132 -    this.watchDogTimerId_ = goog.net.BrowserChannel.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/xhrio.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 349 -      x.setTimeoutInterval(opt_timeoutInterval);

 Line: 428 -  goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/iframeio.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 251 -   *     manage query string params.

 Line: 560 -      // For GET requests, we assume that the caller didn't want the queryparams

 Line: 931 -          goog.dom.TagName.SELECT, goog.asserts.assert(this.form_));

 Line: 933 -          goog.dom.TagName.SELECT, /** @type {!Element} */ (clone));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/browserchannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 945 -      goog.net.BrowserChannel.setTimeout(

 Line: 1375 -    this.forwardChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 1403 -    this.forwardChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 1535 -    request.setTimeout(

 Line: 1637 -    this.backChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 1662 -    this.backChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 1858 -        this.deadBackChannelTimerId_ = goog.net.BrowserChannel.setTimeout(

 Line: 2413 -  goog.net.BrowserChannel.setTimeout = function(fn, ms) {

 Line: 2417 -    return goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/net/browserchannel.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1152 -   * querying only after the test connection has completed. This may be

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/promise/promise.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 1258 -      promise.unhandledRejectionId_ = goog.global.setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/promise/thenable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 83 -   * that we can query that fact at runtime. The class must have already

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/base.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 1112 -    // of a string to eval (which keeps the original source intact) or

 Line: 1171 -    eval(arguments[0]);

 Line: 2144 -   *    eval('someSource;//# sourceUrl sourcefile.js');

 Line: 2644 -          goog.global.setTimeout(cb, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/transpile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 1417 -  "js/es6/math/fround.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require util/defines';\n\n$jscomp.polyfill('Math.fround', function(orig) {\n  if (orig) return orig;\n\n  if ($jscomp.SIMPLE_FROUND_POLYFILL || typeof Float32Array !== 'function') {\n    // Explicitly requested a no-op polyfill, or Float32Array not available.\n    return /** @return {number} */ function(/** number */ arg) {\n      return arg;\n    };\n  }\n\n  var arr = new Float32Array(1);\n  /**\n   * Rounds the given double-precision number to single-precision (float32).\n   *\n   * Polyfills the static function Math.fround().\n   *\n   * This polyfill is slightly incorrect for IE8 and IE9, where it performs no\n   * rounding at all. This is generally not a problem, since Math.fround is\n   * primarily used for optimization (to force faster 32-bit operations rather\n   * than 64-bit), but in cases where (a) the logic actually depends on a\n   * correct fround implementation and (b) the application targets very old\n   * browsers, this polyfill will be insufficient.  For that case, see\n   * https://gist.github.com/shicks/7a97ec6b3f10212e60a89a7f6d2d097d for a\n   * more correct polyfill that does not depend on Float32Array.\n   *\n   * @param {number} arg A 64-bit double-precision number.\n   * @return {number} The closest float32 to the argument.\n   */\n  var polyfill = function(arg) {\n    arr[0] = arg;\n    return arr[0];\n  };\n  return polyfill;\n}, 'es6', 'es3');\n",

 Line: 1473 -  "js/es6/reflect/isextensible.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/defines';\n'require util/polyfill';\n\n\n$jscomp.polyfill('Reflect.isExtensible', function(orig) {\n  if (orig) return orig;\n  if ($jscomp.ASSUME_ES5 || typeof Object.isExtensible == 'function') {\n    return Object.isExtensible;\n  }\n  return function() { return true; };\n}, 'es6', 'es3');\n",

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/transpile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 41 -  $jscomp.polyfill("Promise",function(NativePromise){if(NativePromise&&!$jscomp.FORCE_POLYFILL_PROMISE)return NativePromise;function AsyncExecutor(){this.batch_=null}AsyncExecutor.prototype.asyncExecute=function(f){if(this.batch_==null){this.batch_=[];var self=this;this.asyncExecuteFunction(function(){self.executeBatch_()})}this.batch_.push(f)};var nativeSetTimeout=$jscomp.global["setTimeout"];AsyncExecutor.prototype.asyncExecuteFunction=function(f){nativeSetTimeout(f,0)};AsyncExecutor.prototype.executeBatch_=

 Line: 771 -  @return {string}\n * @nosideeffects\n * @see https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Predefined_Functions/escape_and_unescape_Functions\n */\nfunction escape(str) {}\n\n/**\n * Should only be used in browsers where encode/decodeURIComponent\n * are not present, as the latter handle fancy Unicode characters.\n * @param {string} str\n * @return {string}\n * @nosideeffects\n * @see https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Predefined_Functions/escape_and_unescape_Functions\n */\nfunction unescape(str) {}\n\n/**\n * @param {*} num\n * @return {boolean}\n * @nosideeffects\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n */\nfunction isFinite(num) {}\n\n/**\n * @param {*} num\n * @return {boolean}\n * @nosideeffects\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n */\nfunction isNaN(num) {}\n\n/**\n * @param {*} num\n * @return {number}\n * @nosideeffects\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\n */\nfunction parseFloat(num) {}\n\n/**\n * Parse an integer. Use of `parseInt` without `base` is strictly\n * banned in Google. If you really want to parse octal or hex based on the\n * leader, then pass `undefined` as the base.\n *\n * @param {*} num\n * @param {number|undefined} base\n * @return {number}\n * @nosideeffects\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n */\nfunction parseInt(num, base) {}\n\n/**\n * @param {string} code\n * @return {*}\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n */\nfunction eval(code) {}\n\n\n\n/**\n * @constructor\n * @param {*=} opt_value\n * @return {!Object}\n * @nosideeffects\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n */\nfunction Object(opt_value) {}\n\n/**\n * The constructor of the current object.\n * @type {Function}\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_ Line: 1070 -  @return {undefined}\n */\nfunction alert(message) {}\n\n/**\n * @param {number=} immediateID\n * @see https://developer.mozilla.org/en-US/docs/DOM/window.clearImmediate\n * @see http://msdn.microsoft.com/en-us/library/ie/hh924825(v=vs.85).aspx\n * @return {undefined}\n */\nfunction clearImmediate(immediateID) {}\n\n/**\n * @param {?number|undefined} intervalID\n * @see https://developer.mozilla.org/en/DOM/window.clearInterval\n * @suppress {duplicate}\n * @return {undefined}\n */\nfunction clearInterval(intervalID) {}\n\n/**\n * @param {?number|undefined} timeoutID\n * @see https://developer.mozilla.org/en/DOM/window.clearTimeout\n * @suppress {duplicate}\n * @return {undefined}\n */\nfunction clearTimeout(timeoutID) {}\n\n/**\n * @param {*} message\n * @return {boolean}\n * @see https://developer.mozilla.org/en/DOM/window.confirm\n */\nfunction confirm(message) {}\n\n/**\n * @see https://developer.mozilla.org/en/DOM/window.dump\n * @param {*} x\n * @return {undefined}\n */\nfunction dump(x) {}\n\n/**\n * @param {string} message\n * @param {string=} opt_value\n * @return {?string}\n * @see https://developer.mozilla.org/en/DOM/window.prompt\n */\nfunction prompt(message, opt_value) {}\n\n/**\n * @param {function()} callback\n * @param {...?} callbackParams\n * @return {number}\n * @see https://developer.mozilla.org/en-US/docs/DOM/window.setImmediate\n * @see http://msdn.microsoft.com/en-us/library/ie/hh773176(v=vs.85).aspx\n */\nfunction setImmediate(callback, callbackParams) {}\n\n/**\n * @param {Function|!TrustedScript|string} callback\n * @param {number=} opt_delay\n * @param {...?} callbackParams\n * @return {number}\n * @see https://developer.mozilla.org/en/DOM/window.setInterval\n * @see https://html.spec.whatwg.org/multipage/webappapis.html#timers\n */\nfunction setInterval(callback, opt_delay, callbackParams) {}\n\n/**\n * @param {Function|!TrustedScript|string} callback\n * @param {number=} opt_delay\n * @param {...*} callbackParams\n * @return {number}\n * @see https://developer.mozilla.org/en/DOM/window.setTimeout\n * @see https://html.spec.whatwg.org/multipage/web Line: 1071 -  mers\n */\nfunction setTimeout(callback, opt_delay, callbackParams) {}\n\n/**\n * Returns whether the object has a property with the specified name.\n *\n * @param {*} propertyName Implicitly cast to a string.\n * @return {boolean}\n * @nosideeffects\n * @see http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n */\nfunction hasOwnProperty (propertyName) {}\n',

 Line: 1457 -   -   An exception thrown by the method will be caught and asynchronously\n   *     rethrown when it cannot interrupt any other code. This class provides\n   *     no way to catch such exceptions.\n   * @param {function():?} f\n   */\n  AsyncExecutor.prototype.asyncExecute = function(f) {\n    if (this.batch_ == null) {\n      // no batch created yet, or last batch was fully executed\n      this.batch_ = [];\n      var self = this;\n      this.asyncExecuteFunction(function() { self.executeBatch_(); });\n    }\n    this.batch_.push(f);\n  };\n\n  // NOTE: We want to make sure AsyncExecutor will work as expected even if\n  // testing code should override setTimeout()\n  /** @const {function(!Function, number)} */\n  var nativeSetTimeout = $jscomp.global['setTimeout'];\n\n  /**\n   * Schedule a function to execute asynchronously as soon as possible.\n   *\n   * NOTE: May be overridden for testing.\n   * @package\n   * @param {function()} f\n   */\n  AsyncExecutor.prototype.asyncExecuteFunction = function(f) {\n    nativeSetTimeout(f, 0);\n  };\n\n  /**\n   * Execute scheduled jobs in a batch until all are executed or the batch\n   * execution time limit has been reached.\n   * @private\n   */\n  AsyncExecutor.prototype.executeBatch_ = function() {\n    while (this.batch_ && this.batch_.length) {\n      var /** !Array<?function()> */ executingBatch = this.batch_;\n      // Executions scheduled while executing this batch go into a new one to\n      // avoid the batch array getting too big.\n      this.batch_ = [];\n      for (var i = 0; i < executingBatch.length; ++i) {\n        var f = /** @type {function()} */ (executingBatch[i]);\n        executingBatch[i] = null;  // free memory\n        try {\n          f();\n        } catch (error) {\n          this.asyncThrow_(error);\n        }\n      }\n    }\n    // All jobs finished executing, so force scheduling a new batch next\n    // time asyncExecute() is called.\n    this.batch_ = null;\n  };\n\n  /**\n   * @private\n   * @param {*} exception\n   */\n  AsyncExecutor.prototype.asyncThrow_ = function(exception) {\n    this.asyncExec</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/transpile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 737 -  123);xpa=Ju("DEFAULT_VALUE",124);ypa=Ju("NEW_TARGET",125);zpa=Ju("IMPORT_META",126);Apa=Ju("STRING_TYPE",127);Bpa=Ju("BOOLEAN_TYPE",128);Cpa=Ju("NUMBER_TYPE",129);Dpa=Ju("FUNCTION_TYPE",130);Epa=Ju("PARAMETERIZED_TYPE",131);Fpa=Ju("UNION_TYPE",132);Gpa=Ju("ANY_TYPE",133);Hpa=Ju("VOID_TYPE",135);Ipa=Ju("NAMED_TYPE",137);Jpa=Ju("RECORD_TYPE",139);Kpa=Ju("UNDEFINED_TYPE",140);qu=Ju("ARRAY_TYPE",141);Lpa=Ju("GENERIC_TYPE",142);Mpa=Ju("GENERIC_TYPE_LIST",143);ru=Ju("PIPE",145);Npa=Ju("STAR",146);su=Ju("QMARK",

 Line: 746 -  function hv(){hv=function(){};lqa=gv("ALL",0);mqa=gv("ARROW",1);nqa=gv("BOOLEAN",2);oqa=gv("ENUM",3);pqa=gv("ENUM_ELEMENT",4);qqa=gv("FUNCTION",5);rqa=gv("INSTANCE_OBJECT",6);sqa=gv("NAMED",7);tqa=gv("NO",8);uqa=gv("NO_OBJECT",9);vqa=gv("NO_RESOLVED",10);wqa=gv("NULL",11);xqa=gv("NUMBER",12);yqa=gv("PROTOTYPE_OBJECT",13);zqa=gv("PROXY_OBJECT",14);Aqa=gv("RECORD",15);Bqa=gv("STRING",16);Cqa=gv("SYMBOL",17);Dqa=gv("TEMPLATE",18);Eqa=gv("TEMPLATIZED",19);Fqa=gv("UNION",20);Gqa=gv("UNKNOWN",21);Hqa=gv("VOID",

 Line: 914 -  ceURI) {};\n\n/**\n * @return {undefined}\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-normalize\n */\nNode.prototype.normalize = function() {};\n\n/**\n * @param {string} query\n * @return {?Element}\n * @see http://www.w3.org/TR/selectors-api/#queryselector\n * @nosideeffects\n */\nNode.prototype.querySelector = function(query) {};\n\n/**\n * @param {string} query\n * @return {!NodeList<!Element>}\n * @see http://www.w3.org/TR/selectors-api/#queryselectorall\n * @nosideeffects\n */\nNode.prototype.querySelectorAll = function(query) {};\n\n/**\n * @type {Element}\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Attr-ownerElement\n */\nAttr.prototype.ownerElement;\n\n/**\n * @type {boolean}\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#Attr-isId\n */\nAttr.prototype.isId;\n\n/**\n * @param {?string} namespaceURI\n * @param {string} localName\n * @return {Attr}\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ElGetAtNodeNS\n * @nosideeffects\n */\nElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {};\n\n/**\n * @param {?string} namespaceURI\n * @param {string} localName\n * @return {string}\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ElGetAttrNS\n * @nosideeffects\n */\nElement.prototype.getAttributeNS = function(namespaceURI, localName) {};\n\n/**\n * @param {?string} namespaceURI\n * @param {string} localName\n * @return {!NodeList<!Element>}\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-A6C90942\n * @nosideeffects\n */\nElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {};\n\n/**\n * @param {string} name\n * @return {boolean}\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ElHasAttr\n * @nosideeffects\n */\nElement.prototype.hasAttribute = function(name) {};\n\n/**\n * @param {?string} namespaceURI\n * @param {string} localName\n * @return {boolean}\n * @see http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ElHasAttrNS\n * @nosideeffects\n */\nElement.prototype.hasAttributeNS = function(namespaceURI, localName) {};\n\n/**\n * @param {?str Line: 936 -  \n/**\n * The update has started but the resources are not downloaded yet - for\n * example, this can happen when the manifest file is fetched.\n * @const {number}\n */\nApplicationCache.prototype.CHECKING;\n\n/**\n * The update has started but the resources are not downloaded yet - for\n * example, this can happen when the manifest file is fetched.\n * @const {number}\n */\nApplicationCache.CHECKING;\n\n/**\n * The resources are being downloaded into the cache.\n * @const {number}\n */\nApplicationCache.prototype.DOWNLOADING;\n\n/**\n * The resources are being downloaded into the cache.\n * @const {number}\n */\nApplicationCache.DOWNLOADING;\n\n/**\n * Resources have finished downloading and the new cache is ready to be used.\n * @const {number}\n */\nApplicationCache.prototype.UPDATEREADY;\n\n/**\n * Resources have finished downloading and the new cache is ready to be used.\n * @const {number}\n */\nApplicationCache.UPDATEREADY;\n\n/**\n * The cache is obsolete.\n * @const {number}\n */\nApplicationCache.prototype.OBSOLETE;\n\n/**\n * The cache is obsolete.\n * @const {number}\n */\nApplicationCache.OBSOLETE;\n\n/**\n * The current status of the application cache.\n * @type {number}\n */\nApplicationCache.prototype.status;\n\n/**\n * Sent when the update process finishes for the first time; that is, the first\n * time an application cache is saved.\n * @type {?function(!Event): void}\n */\nApplicationCache.prototype.oncached;\n\n/**\n * Sent when the cache update process begins.\n * @type {?function(!Event): void}\n */\nApplicationCache.prototype.onchecking;\n\n/**\n * Sent when the update process begins downloading resources in the manifest\n * file.\n * @type {?function(!Event): void}\n */\nApplicationCache.prototype.ondownloading;\n\n/**\n * Sent when an error occurs.\n * @type {?function(!Event): void}\n */\nApplicationCache.prototype.onerror;\n\n/**\n * Sent when the update process finishes but the manifest file does not change.\n * @type {?function(!Event): void}\n */\nApplicationCache.prototype.onnoupdate;\n\n/**\n * Sent when each resource in the manifest file begin Line: 961 -  /\nLocation.prototype.host;\n\n/**\n * Returns the Location object's URL's host. Can be set, to navigate to the\n * same URL with a changed host.\n * @type {string}\n * @see https://html.spec.whatwg.org/multipage/history.html#dom-location-hostname\n */\nLocation.prototype.hostname;\n\n/**\n * Returns the Location object's URL's port. Can be set, to navigate to the\n * same URL with a changed port.\n * @type {string}\n * @see https://html.spec.whatwg.org/multipage/history.html#the-location-interface:dom-location-port\n */\nLocation.prototype.port;\n\n/**\n * Returns the Location object's URL's path. Can be set, to navigate to the\n * same URL with a changed path.\n * @type {string}\n * @see https://html.spec.whatwg.org/multipage/history.html#dom-location-pathname\n */\nLocation.prototype.pathname;\n\n/**\n * Returns the Location object's URL's query (includes leading \"?\" if\n * non-empty). Can be set, to navigate to the same URL with a changed query\n * (ignores leading \"?\").\n * @type {string}\n * @see https://html.spec.whatwg.org/multipage/history.html#dom-location-search\n */\nLocation.prototype.search;\n\n/**\n * Returns the Location object's URL's fragment (includes leading \"#\" if\n * non-empty). Can be set, to navigate to the same URL with a changed fragment\n * (ignores leading \"#\").\n * @type {string}\n * @see https://html.spec.whatwg.org/multipage/history.html#dom-location-hash\n */\nLocation.prototype.hash;\n\n/**\n * Navigates to the given page.\n * @param {!TrustedURL|string} url\n * @return {undefined}\n * @see https://html.spec.whatwg.org/multipage/history.html#dom-location-assign\n */\nLocation.prototype.assign = function(url) {};\n\n/**\n * Removes the current page from the session history and navigates to the given\n * page.\n * @param {!TrustedURL|string} url\n * @return {undefined}\n * @see https://html.spec.whatwg.org/multipage/history.html#dom-location-replace\n */\nLocation.prototype.replace = function(url) {};\n\n/**\n * Reloads the current page.\n * @param {boolean=} forceReload If true, reloads the page from\n *     the server. Defaults to fals Line: 965 -  MStringMap but it behaves close enough to an object to\n * pass as an object.\n * @const {!Object<string, string>}\n */\nHTMLElement.prototype.dataset;\n\n\n/**\n * @constructor\n * @implements {IArrayLike<string>}\n * @see https://dom.spec.whatwg.org/#interface-domtokenlist\n */\nfunction DOMTokenList() {}\n\n/**\n * Returns the number of CSS classes applied to this Element.\n * @type {number}\n */\nDOMTokenList.prototype.length;\n\n/**\n * Returns the string value applied to this Element.\n * @type {string|undefined}\n */\nDOMTokenList.prototype.value;\n\n/**\n * @param {number} index The index of the item to return.\n * @return {string} The CSS class at the specified index.\n * @nosideeffects\n */\nDOMTokenList.prototype.item = function(index) {};\n\n/**\n * @param {string} token The CSS class to check for.\n * @return {boolean} Whether the CSS class has been applied to the Element.\n * @nosideeffects\n */\nDOMTokenList.prototype.contains = function(token) {};\n\n/**\n * @param {...string} var_args The CSS class(es) to add to this element.\n * @return {undefined}\n */\nDOMTokenList.prototype.add = function(var_args) {};\n\n/**\n * @param {...string} var_args The CSS class(es) to remove from this element.\n * @return {undefined}\n */\nDOMTokenList.prototype.remove = function(var_args) {};\n\n/**\n * Replaces token with newToken.\n * @param {string} token The CSS class to replace.\n * @param {string} newToken The new CSS class to use.\n * @return {undefined}\n */\nDOMTokenList.prototype.replace = function(token, newToken) {};\n\n/**\n * @param {string} token The token to query for.\n * @return {boolean} Whether the token was found.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/supports\n * @nosideeffects\n */\nDOMTokenList.prototype.supports = function(token) {};\n\n/**\n * @param {string} token The CSS class to toggle from this element.\n * @param {boolean=} opt_force True to add the class whether it exists\n *     or not. False to remove the class whether it exists or not.\n *     This argument is not supported on IE 10 and below, according to\n *  Line: 1119 -  "externs/url.js":"/*\n * Copyright 2015 The Closure Compiler Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Definitions for URL and URLSearchParams from the spec at\n * https://url.spec.whatwg.org.\n *\n * @externs\n * @author rdcronin@google.com (Devlin Cronin)\n */\n\n/**\n * @typedef {Array<string>}\n */\nvar URLSearchParamsTupleType;\n\n/**\n * Represents the query string of a URL.\n *\n * * When `init` is a string, it is basically parsed as a query string\n *   `'name1=value1&name2=value2'`.\n *\n * * When `init` is an array of arrays of string\n *   `([['name1', 'value1'], ['name2', 'value2']])`,\n *   it must contain pairs of strings, where the first item in the pair will be\n *   interpreted as a key and the second as a value.\n *\n *   NOTE: The specification uses Iterable rather than Array, but this is not\n *   supported in Edge 17 - 18.\n *\n * * When `init` is an object, keys and values will be interpreted as such\n *   `({name1: 'value1', name2: 'value2'}).\n *\n * @see https://url.spec.whatwg.org/#interface-urlsearchparams\n * @constructor\n * @implements {Iterable<!Array<string>>}\n * @param {(string|!Array<!URLSearchParamsTupleType>|!Object<string,string>)=}\n *     init\n */\nfunction URLSearchParams(init) {}\n\n/**\n * @param {string} name\n * @param {string} value\n * @return {undefined}\n */\nURLSearchParams.prototype.append = function(name, value) {};\n\n/**\n * @param {string} name\n * @return {undefined}\n */\nURLSearchParams.prototype.delete = function(name) {};\n\n/**\n * @return {!IteratorItera Line: 1161 -   * @param {!IDBKeyType|!IDBKeyRange} key The key of the document to retrieve.\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBObjectStore.prototype.get = function(key) {};\n\n/**\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBObjectStore.prototype.clear = function() {};\n\n/**\n * @param {?IDBKeyRange=} range The range of the cursor.\n *     Nullable because IE <11 has problems with undefined.\n * @param {!IDBCursorDirection=} direction The direction of cursor enumeration.\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBObjectStore.prototype.openCursor = function(range, direction) {};\n\n/**\n * @param {string} name The name of the index.\n * @param {string|!Array<string>} keyPath The path to the index key.\n * @param {!IDBIndexParameters=} opt_paramters Optional parameters\n *     for the created index.\n * @return {!IDBIndex} The IDBIndex object.\n */\nIDBObjectStore.prototype.createIndex = function(name, keyPath, opt_paramters) {};\n\n/**\n * @param {string} name The name of the index to retrieve.\n * @return {!IDBIndex} The IDBIndex object.\n */\nIDBObjectStore.prototype.index = function(name) {};\n\n/**\n * @param {string} indexName The name of the index to remove.\n * @return {undefined}\n */\nIDBObjectStore.prototype.deleteIndex = function(indexName) {};\n\n/**\n * @param {(!IDBKeyType|IDBKeyRange)=} key The key of this value.\n * @return {!IDBRequest} The IDBRequest object.\n * @see http://www.w3.org/TR/IndexedDB/#widl-IDBObjectStore-count\n */\nIDBObjectStore.prototype.count = function(key) {};\n\n/**\n * @param {(!IDBKeyType|IDBKeyRange)=} query\n * @return {!IDBRequest} The IDBRequest object.\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbobjectstore-getkey\n */\nIDBObjectStore.prototype.getKey = function(query) {};\n\n/**\n * @param {(!IDBKeyType|IDBKeyRange)=} query\n * @param {number=} count\n * @return {!IDBRequest} The IDBRequest object.\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbobjectstore-getall\n */\nIDBObjectStore.prototype.getAll = function(query, count) {};\n\n/**\n * @param {(!IDBKeyType|IDBKeyRange)=} query\ Line: 1162 -  ber=} count\n * @return {!IDBRequest} The IDBRequest object.\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbobjectstore-getallkeys\n */\nIDBObjectStore.prototype.getAllKeys = function(query, count) {};\n\n/**\n * @param {(!IDBKeyType|IDBKeyRange)=} query\n * @param {!IDBCursorDirection=} direction\n * @return {!IDBRequest} The IDBRequest object.\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbobjectstore-openkeycursor\n */\nIDBObjectStore.prototype.openKeyCursor = function(query, direction) {};\n\n\n/**\n * @constructor\n * @see http://www.w3.org/TR/IndexedDB/#idl-def-IDBIndex\n * @see https://www.w3.org/TR/IndexedDB-2/#index-interface\n */\nfunction IDBIndex() {}\n\n/**\n * @type {string}\n */\nIDBIndex.prototype.name;\n\n/**\n * @const {!IDBObjectStore}\n */\nIDBIndex.prototype.objectStore;\n\n/**\n * @const {*}\n */\nIDBIndex.prototype.keyPath;\n\n/**\n * @const {boolean}\n */\nIDBIndex.prototype.multiEntry;\n\n/**\n * @const {boolean}\n */\nIDBIndex.prototype.unique;\n\n/**\n * @param {(!IDBKeyType|?IDBKeyRange)=} range The range of the cursor.\n *     Nullable because IE <11 has problems with undefined.\n * @param {!IDBCursorDirection=} direction The direction of cursor enumeration.\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBIndex.prototype.openCursor = function(range, direction) {};\n\n/**\n * @param {(!IDBKeyType|?IDBKeyRange)=} range The range of the cursor.\n *     Nullable because IE <11 has problems with undefined.\n * @param {!IDBCursorDirection=} direction The direction of cursor enumeration.\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBIndex.prototype.openKeyCursor = function(range, direction) {};\n\n/**\n * @param {!IDBKeyType|!IDBKeyRange} key The id of the object to retrieve.\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBIndex.prototype.get = function(key) {};\n\n/**\n * @param {!IDBKeyType|!IDBKeyRange} key The id of the object to retrieve.\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBIndex.prototype.getKey = function(key) {};\n\n/**\n * @param {(!IDBKeyType|!IDBKeyRange)=} query\n * @param {number Line: 1163 -  eturn {!IDBRequest}\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbindex-getall\n */\nIDBIndex.prototype.getAll = function(query, count) {};\n\n/**\n * @param {(!IDBKeyType|!IDBKeyRange)=} query\n * @param {number=} count\n * @return {!IDBRequest}\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbindex-getallkeys\n */\nIDBIndex.prototype.getAllKeys = function(query, count) {};\n\n/**\n * @param {(!IDBKeyType|!IDBKeyRange)=} opt_key\n * @return {!IDBRequest}\n */\nIDBIndex.prototype.count = function(opt_key) {};\n\n\n/**\n * @constructor\n * @see http://www.w3.org/TR/IndexedDB/#idl-def-IDBCursor\n * @see https://www.w3.org/TR/IndexedDB-2/#cursor-interface\n */\nfunction IDBCursor() {}\n\n/**\n * @const {(!IDBObjectStore|!IDBIndex)}\n */\nIDBCursor.prototype.source;\n\n/**\n * @const {!IDBCursorDirection}\n */\nIDBCursor.prototype.direction;\n\n/**\n * @const {!IDBKeyType}\n */\nIDBCursor.prototype.key;\n\n/**\n * @const {!IDBKeyType}\n */\nIDBCursor.prototype.primaryKey;\n\n/**\n * @param {*} value The new value for the current object in the cursor.\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBCursor.prototype.update = function(value) {};\n\n/**\n * Note: Must be quoted to avoid parse error.\n * @param {!IDBKeyType=} key Continue enumerating the cursor from the specified\n *     key (or next).\n * @return {undefined}\n */\nIDBCursor.prototype.continue = function(key) {};\n\n/**\n * @param {!IDBKeyType} key\n * @param {!IDBKeyType} primaryKey\n * @return {undefined}\n * @see https://www.w3.org/TR/IndexedDB-2/#dom-idbcursor-continueprimarykey\n */\nIDBCursor.prototype.continuePrimaryKey = function(key, primaryKey) {};\n\n/**\n * @param {number} count Number of times to iterate the cursor.\n * @return {undefined}\n */\nIDBCursor.prototype.advance = function(count) {};\n\n/**\n * Note: Must be quoted to avoid parse error.\n * @return {!IDBRequest} The IDBRequest object.\n */\nIDBCursor.prototype.delete = function() {};\n\n\n/**\n * @constructor\n * @extends {IDBCursor}\n * @see http://www.w3.org/TR/IndexedDB/#idl-def-IDBCursorWithValue\n */\nfunction IDBCursorWi Line: 1263 -  LE_COVERAGE_INVERT;\n\n/** @const {number} */\nWebGLRenderingContext.COMPRESSED_TEXTURE_FORMATS;\n\n/** @const {number} */\nWebGLRenderingContext.DONT_CARE;\n\n/** @const {number} */\nWebGLRenderingContext.FASTEST;\n\n/** @const {number} */\nWebGLRenderingContext.NICEST;\n\n/** @const {number} */\nWebGLRenderingContext.GENERATE_MIPMAP_HINT;\n\n/** @const {number} */\nWebGLRenderingContext.BYTE;\n\n/** @const {number} */\nWebGLRenderingContext.UNSIGNED_BYTE;\n\n/** @const {number} */\nWebGLRenderingContext.SHORT;\n\n/** @const {number} */\nWebGLRenderingContext.UNSIGNED_SHORT;\n\n/** @const {number} */\nWebGLRenderingContext.INT;\n\n/** @const {number} */\nWebGLRenderingContext.UNSIGNED_INT;\n\n/** @const {number} */\nWebGLRenderingContext.FLOAT;\n\n/** @const {number} */\nWebGLRenderingContext.DEPTH_COMPONENT;\n\n/** @const {number} */\nWebGLRenderingContext.ALPHA;\n\n/** @const {number} */\nWebGLRenderingContext.RGB;\n\n/** @const {number} */\nWebGLRenderingContext.RGBA;\n\n/** @const {number} */\nWebGLRenderingContext.LUMINANCE;\n\n/** @const {number} */\nWebGLRenderingContext.LUMINANCE_ALPHA;\n\n/** @const {number} */\nWebGLRenderingContext.UNSIGNED_SHORT_4_4_4_4;\n\n/** @const {number} */\nWebGLRenderingContext.UNSIGNED_SHORT_5_5_5_1;\n\n/** @const {number} */\nWebGLRenderingContext.UNSIGNED_SHORT_5_6_5;\n\n/** @const {number} */\nWebGLRenderingContext.FRAGMENT_SHADER;\n\n/** @const {number} */\nWebGLRenderingContext.VERTEX_SHADER;\n\n/** @const {number} */\nWebGLRenderingContext.MAX_VERTEX_ATTRIBS;\n\n/** @const {number} */\nWebGLRenderingContext.MAX_VERTEX_UNIFORM_VECTORS;\n\n/** @const {number} */\nWebGLRenderingContext.MAX_VARYING_VECTORS;\n\n/** @const {number} */\nWebGLRenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n\n/** @const {number} */\nWebGLRenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n\n/** @const {number} */\nWebGLRenderingContext.MAX_TEXTURE_IMAGE_UNITS;\n\n/** @const {number} */\nWebGLRenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS;\n\n/** @const {number} */\nWebGLRenderingContext.SHADER_TYPE;\n\n/** @const {number} */\nWebGLRenderingContext.DELETE_ Line: 1273 -  totype.UNSIGNED_SHORT;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.INT;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.UNSIGNED_INT;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.FLOAT;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.DEPTH_COMPONENT;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.ALPHA;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.RGB;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.RGBA;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.LUMINANCE;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.LUMINANCE_ALPHA;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.UNSIGNED_SHORT_4_4_4_4;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.UNSIGNED_SHORT_5_5_5_1;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.UNSIGNED_SHORT_5_6_5;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.FRAGMENT_SHADER;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.VERTEX_SHADER;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.MAX_VERTEX_ATTRIBS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.MAX_VERTEX_UNIFORM_VECTORS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.MAX_VARYING_VECTORS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.MAX_TEXTURE_IMAGE_UNITS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.MAX_FRAGMENT_UNIFORM_VECTORS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.SHADER_TYPE;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.DELETE_STATUS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.LINK_STATUS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.VALIDATE_STATUS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.ATTACHED_SHADERS;\n\n/** @const {number} */\nWebGLRenderingContext.prototype.ACTIVE_UNIFORMS;\n\n/** @const {number Line: 1326 -  ffer, drawbuffer, depth, stencil) {};\n\n/* Query Objects */\n\n/**\n * @return {?WebGLQuery}\n */\nWebGL2RenderingContext.prototype.createQuery = function() {};\n\n/**\n * @param {?WebGLQuery} query\n * @return {undefined}\n */\nWebGL2RenderingContext.prototype.deleteQuery = function(query) {};\n\n/**\n * @param {?WebGLQuery} query\n * @return {boolean}\n */\nWebGL2RenderingContext.prototype.isQuery = function(query) {};\n\n/**\n * @param {number} target\n * @param {!WebGLQuery} query\n * @return {undefined}\n */\nWebGL2RenderingContext.prototype.beginQuery = function(target, query) {};\n\n/**\n * @param {number} target\n * @return {undefined}\n */\nWebGL2RenderingContext.prototype.endQuery = function(target) {};\n\n/**\n * @param {number} target\n * @param {number} pname\n * @return {?WebGLQuery}\n * @nosideeffects\n */\nWebGL2RenderingContext.prototype.getQuery = function(target, pname) {};\n\n/**\n * @param {!WebGLQuery} query\n * @param {number} pname\n * @return {*}\n */\nWebGL2RenderingContext.prototype.getQueryParameter = function(query, pname) {};\n\n/* Sampler Objects */\n\n/**\n * @return {?WebGLSampler}\n */\nWebGL2RenderingContext.prototype.createSampler = function() {};\n\n/**\n * @param {?WebGLSampler} sampler\n * @return {undefined}\n */\nWebGL2RenderingContext.prototype.deleteSampler = function(sampler) {};\n\n/**\n * @param {?WebGLSampler} sampler\n * @return {boolean}\n */\nWebGL2RenderingContext.prototype.isSampler = function(sampler) {};\n\n/**\n * @param {number} unit\n * @param {?WebGLSampler} sampler\n * @return {undefined}\n */\nWebGL2RenderingContext.prototype.bindSampler = function(unit, sampler) {};\n\n/**\n * @param {!WebGLSampler} sampler\n * @param {number} pname\n * @param {number} param\n * @return {undefined}\n */\nWebGL2RenderingContext.prototype.samplerParameteri = function(\n    sampler, pname, param) {};\n\n/**\n * @param {!WebGLSampler} sampler\n * @param {number} pname\n * @param {number} param\n * @return {undefined}\n */\nWebGL2RenderingContext.prototype.samplerParameterf = function(\n    sampler, pname, param) {};\n\n/**\n * @param  Line: 1671 -  function ZB(){ZB=function(){};Nua=YB("UNKNOWN",0);WB=YB("KNOWN",1);XB=YB("LOOSE",2);Oua=YB("LOOSE_UNION",3)}function $B(a){this.a=a}l($B,n);function aC(a,b,c,d){var e;return e=a.a,e(b,c,d)}function bC(){this.b=this.c=0}var Pua,cC;l(bC,n);function dC(a,b,c,d,e){var f=new bC;f.a=a;f.c=b;f.g=c;f.b=d;f.f=e;E(ph(f.b)==f.f.length);a=f.f;for(b=0;b<a.length;b++)G(a[b]);return f}function eC(){Qua();return Pua}bC.prototype.toString=function(){var a=x(Tg(),"{");null==this.a||Rua(this,a);return x(a,"}").toString()};

 Line: 1792 -  lI("STATIC_MEMBER",20);WF=lI("GENERATOR_FN",21);XF=lI("ARROW_FN",22);YF=lI("ASYNC_FN",23);ZF=lI("YIELD_ALL",24);Axa=lI("EXPORT_DEFAULT",25);Bxa=lI("EXPORT_ALL_FROM",26);$F=lI("CONSTANT_VAR_FLAGS",27);aG=lI("IS_GENERATOR_MARKER",28);bG=lI("IS_GENERATOR_SAFE",29);cG=lI("COMPUTED_PROP_METHOD",30);dG=lI("COMPUTED_PROP_GETTER",31);eG=lI("COMPUTED_PROP_SETTER",32);Cxa=lI("COMPUTED_PROP_VARIABLE",33);AF=lI("DECLARED_TYPE_EXPR",34);DF=lI("TYPE_BEFORE_CAST",35);fG=lI("OPT_ES6_TYPED",36);Dxa=lI("GENERIC_TYPE",

 Line: 1793 -  37);Exa=lI("IMPLEMENTS",38);Fxa=lI("CONSTRUCT_SIGNATURE",39);Gxa=lI("ACCESS_MODIFIER",40);Hxa=lI("NON_INDEXABLE",41);Ixa=lI("PARSE_RESULTS",42);Jxa=lI("GOOG_MODULE",43);Kxa=lI("GOOG_MODULE_REQUIRE",44);Lxa=lI("FEATURE_SET",45);Mxa=lI("WAS_PREVIOUSLY_PROVIDED",46);Nxa=lI("TRANSPILED",47);gG=lI("DELETED",48);Oxa=lI("MODULE_ALIAS",49);Pxa=lI("IS_UNUSED_PARAMETER",50);Qxa=lI("MODULE_EXPORT",51);hG=lI("IS_SHORTHAND_PROPERTY",52);Rxa=lI("ES6_MODULE",53);Sxa=lI("TYPEDEF_TYPE",54);iG=lI("DEFINE_NAME",55);

 Line: 1924 -  function FM(){FM=function(){};yFa=DM("BREAK",0,"break",(W(),wGa));zFa=DM("CASE",1,"case",xGa);AFa=DM("CATCH",2,"catch",yGa);BFa=DM("CONTINUE",3,"continue",zGa);CFa=DM("DEBUGGER",4,"debugger",AGa);DFa=DM("DEFAULT",5,"default",BGa);EFa=DM("DELETE",6,"delete",CGa);FFa=DM("DO",7,"do",DGa);GFa=DM("ELSE",8,"else",EGa);HFa=DM("FINALLY",9,"finally",FGa);IFa=DM("FOR",10,"for",HM);CM=DM("FUNCTION",11,"function",IM);JFa=DM("IF",12,"if",JM);KFa=DM("IN",13,"in",KM);LFa=DM("INSTANCEOF",14,"instanceof",GGa);MFa=

 Line: 1930 -  function W(){W=function(){};YM=BN("END_OF_FILE",0,"End of File");dHa=BN("ERROR",1,"error");ZM=BN("IDENTIFIER",2,"identifier");wGa=AN("BREAK",3);xGa=AN("CASE",4);yGa=AN("CATCH",5);zGa=AN("CONTINUE",6);AGa=AN("DEBUGGER",7);BGa=AN("DEFAULT",8);CGa=AN("DELETE",9);DGa=AN("DO",10);EGa=AN("ELSE",11);FGa=AN("FINALLY",12);HM=AN("FOR",13);IM=AN("FUNCTION",14);JM=AN("IF",15);KM=AN("IN",16);GGa=AN("INSTANCEOF",17);LM=AN("NEW",18);HGa=AN("RETURN",19);IGa=AN("SWITCH",20);JGa=AN("THIS",21);KGa=AN("THROW",22);LGa=

 Line: 1958 -  32);bJa=UN("GET_ACCESSOR",33);cJa=UN("SET_ACCESSOR",34);dJa=UN("PROPERTY_NAME_ASSIGNMENT",35);eJa=UN("COMPUTED_PROPERTY_DEFINITION",36);fJa=UN("COMPUTED_PROPERTY_GETTER",37);gJa=UN("COMPUTED_PROPERTY_METHOD",38);hJa=UN("COMPUTED_PROPERTY_SETTER",39);iJa=UN("MISSING_PRIMARY_EXPRESSION",40);jJa=UN("COMMA_EXPRESSION",41);kJa=UN("BINARY_OPERATOR",42);lJa=UN("CONDITIONAL_EXPRESSION",43);mJa=UN("UNARY_EXPRESSION",44);nJa=UN("UPDATE_EXPRESSION",45);oJa=UN("MEMBER_EXPRESSION",46);pJa=UN("NEW_EXPRESSION",

 Line: 1961 -  VJa=UN("PARAMETERIZED_TYPE_TREE",83);WJa=UN("ARRAY_TYPE",84);XJa=UN("RECORD_TYPE",85);YJa=UN("UNION_TYPE",86);ZJa=UN("FUNCTION_TYPE",87);$Ja=UN("GENERIC_TYPE_LIST",88);aKa=UN("MEMBER_VARIABLE",89);bKa=UN("COMPUTED_PROPERTY_MEMBER_VARIABLE",90);cKa=UN("TYPE_ALIAS",91);dKa=UN("AMBIENT_DECLARATION",92);eKa=UN("INDEX_SIGNATURE",93);fKa=UN("CALL_SIGNATURE",94);gKa=UN("NEW_TARGET_EXPRESSION",95);hKa=UN("AWAIT_EXPRESSION",96);iKa=UN("DYNAMIC_IMPORT_EXPRESSION",97);jKa=UN("IMPORT_META_EXPRESSION",98)}

 Line: 2038 -  function CP(){CP=function(){};kOa=AP("ALL",0,"all",0,0,(tP(),pP));lOa=AP("COND",1,"cond",3,3,qP);mOa=AP("EQ",2,"eq",2,2,rP);nOa=AP("ISCTOR",3,"isCtor",1,1,rP);oOa=AP("ISDEFINED",4,"isDefined",1,1,iOa);pOa=AP("ISRECORD",5,"isRecord",1,1,rP);qOa=AP("ISTEMPLATIZED",6,"isTemplatized",1,1,rP);rOa=AP("ISUNKNOWN",7,"isUnknown",1,1,rP);sOa=AP("INSTANCEOF",8,"instanceOf",1,1,qP);vP=AP("MAPUNION",9,"mapunion",2,2,qP);wP=AP("MAPRECORD",10,"maprecord",2,2,qP);tOa=AP("NONE",11,"none",0,0,pP);xP=AP("PRINTTYPE",

 Line: 2039 -  12,"printType",2,2,qP);yP=AP("PROPTYPE",13,"propType",2,2,qP);uOa=AP("RAWTYPEOF",14,"rawTypeOf",1,1,pP);vOa=AP("SUB",15,"sub",2,2,rP);wOa=AP("STREQ",16,"streq",2,2,hOa);xOa=AP("RECORD",17,"record",1,2147483647,pP);zP=AP("TEMPLATETYPEOF",18,"templateTypeOf",2,2,pP);yOa=AP("TYPE",19,"type",2,2147483647,pP);zOa=AP("TYPEEXPR",20,"typeExpr",1,1,pP);AOa=AP("TYPEOFVAR",21,"typeOfVar",1,1,qP);BOa=AP("UNION",22,"union",2,2147483647,pP);COa=AP("UNKNOWN",23,"unknown",0,0,pP);jOa=null}

 Line: 2400 -  function e_a(){e_a=function(){};YZa=U("JSC_WEAK_FILE_REACHABLE_FROM_ENTRY_POINT_ERROR","File strongly reachable from an entry point must not be weak: {0}");$Za=U("JSC_EXPLICIT_WEAK_ENTRY_POINT_ERROR","Explicit entry point input must not be weak: {0}");ZZa=DJ("JSC_IMPLICIT_WEAK_ENTRY_POINT_ERROR","Implicit entry point input should not be weak: {0}")}XZa.prototype.ba=!0;function f_a(){}l(f_a,n);

 Line: 2703 -  function UZ(){UZ=function(){};ZZ=q_("SET_FROM_GLOBAL",0);o_=q_("SET_FROM_LOCAL",1);B8a=q_("PROTOTYPE_GET",2);$Z=q_("ALIASING_GET",3);p_=q_("DIRECT_GET",4);c9a=q_("CALL_GET",5);d9a=q_("DELETE_PROP",6);e9a=q_("SUBCLASSING_GET",7)}function f_(){this.u=0}l(f_,n);f_.prototype.O=function(){return this.g};f_.prototype.Ke=function(){return this.g?Oz(this.g):null};f_.prototype.eg=function(){return this.o};function r_(a){return q(a.a,(UZ(),ZZ))||q(a.a,(UZ(),o_))}

 Line: 2960 -  "Property {0} never defined on {1}. Did you mean {2}?");veb=EJ("JSC_STRICT_INEXISTENT_PROPERTY","Property {0} never defined on {1}");ueb=EJ("JSC_STRICT_INEXISTENT_UNION_PROPERTY","Property {0} not defined on all member types of {1}");seb=EJ("JSC_STRICT_INEXISTENT_PROPERTY_WITH_SUGGESTION","Property {0} never defined on {1}. Did you mean {2}?");web=DJ("JSC_NOT_A_CONSTRUCTOR","cannot instantiate non-constructor");xeb=DJ("JSC_INSTANTIATE_ABSTRACT_CLASS","cannot instantiate abstract class");O0=DJ("JSC_BAD_TYPE_FOR_BIT_OPERATION",

 Line: 3524 -  function jvb(){jvb=function(){};gvb=ivb("PRESERVE",0);hvb=ivb("DELETE",1)}function kvb(){}l(kvb,n);function lvb(a,b){var c=new kvb;c.a=a;c.b=b;return c}g=kvb.prototype;g.wg=function(a,b){this.b.B(a)&&this.a.wg(a,b)};g.Fk=function(a){return this.b.B(a)?this.a.Fk(a):null};g.dl=function(){return this.a.dl()};g.$i=function(a,b){return lvb(this.a.$i(a,b),this.b)};g.lj=function(){return this.a.lj()};function mvb(){}l(mvb,bvb);

 Line: 3546 -  Vvb=DJ("JSC_ARGUMENTS_CALLER_FORBIDDEN",'"arguments.caller" cannot be used in strict mode');Xvb=DJ("JSC_FUNCTION_CALLER_FORBIDDEN","A function''s \"caller\" property cannot be used in strict mode");Yvb=DJ("JSC_FUNCTION_ARGUMENTS_PROP_FORBIDDEN","A function''s \"arguments\" property cannot be used in strict mode");cwb=DJ("JSC_DELETE_VARIABLE","variables, functions, and arguments cannot be deleted in strict mode");ewb=U("JSC_DUPLICATE_OBJECT_KEY",'Object literal contains illegal duplicate key "{0}", disallowed in strict mode');

 Line: 3717 -  tyb=DJ("JSC_PRIVATE_OVERRIDE","Overriding private property of {0}.");syb=U("JSC_EXTEND_FINAL_CLASS","{0} is not allowed to extend final class {1}.");uyb=DJ("JSC_VISIBILITY_MISMATCH","Overriding {0} property of {1} with {2} property.");P5=DJ("JSC_CONSTANT_PROPERTY_REASSIGNED_VALUE","constant property {0} assigned a value more than once");O5=DJ("JSC_CONSTANT_PROPERTY_DELETED","constant property {0} cannot be deleted");I5=DJ("JSC_CONVENTION_MISMATCH","Declared access conflicts with access convention.")}

 Line: 3983 -  IJb.prototype.b=function(a,b,c){b=c.a.w();JJb(a);for(var d=a.a.h();d.i();){var e=d.j();e.a&&(c.a.add(e),G2(G(e.a),a,c))}JJb(c);return b<c.a.w()};function KJb(){this.a=0}var LJb,MJb;l(KJb,z);function NJb(a,b){var c=new KJb;c.b=a;c.a=b;return c}KJb.prototype.P=function(a){return z.prototype.c.call(this,a)};function n8(){n8=function(){};LJb=NJb("SINGLE",0);MJb=NJb("UNION",1)}function OJb(){this.f=0;this.c=!1}l(OJb,n);function PJb(a,b){return bd(a.o,b)}

 Line: 4241 -  function WQb(){WQb=function(){};CQb=U("JSC_CANNOT_CONVERT_FIELDS","Can only convert class member variables (fields) in declarations or the right hand side of a simple assignment.");AQb=DJ("JSC_CANNOT_CONVERT_BOUNDED_GENERICS","Bounded generics are not yet implemented.");FQb=U("JSC_TYPE_ALIAS_ALREADY_DECLARED","Type alias already declared as a variable: {0}");IQb=DJ("JSC_TYPE_QUERY_NOT_SUPPORTED","Type query is currently not supported.");HQb=U("JSC_UNSUPPORTED_RECORD_TYPE","Currently only member variables are supported in record types, please consider using interfaces instead.");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/mock.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 644 -        setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/asynctestcase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 75 -   *           window.setTimeout(stepCallback, 100);

 Line: 81 -   *           window.setTimeout(stepCallback, 100);

 Line: 264 -   * The handle to the current setTimeout timer.

 Line: 400 -      // Run this in a setTimeout so that the caller has a chance to call

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/benchmark.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -    // Parse the 'times' query parameter if it's set.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/performancetimer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 107 -  goog.testing.PerformanceTimer.prototype.setTimeoutInterval = function(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/testrunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -   * create a wrapper that the Selenium test can hook into to query the state of

 Line: 426 -        // query parameter.  We also need to do this without bringing in any

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/jstdasyncwrapper.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 35 -  goog.testing.JsTdAsyncWrapper.REAL_SET_TIMEOUT_FN_ = goog.global.setTimeout;

 Line: 39 -   * Calls a function after a specified timeout. This uses the original setTimeout

 Line: 47 -    // default global context. Inlining breaks chrome since it requires setTimeout

 Line: 49 -    // method on setTimeout.

 Line: 50 -    var setTimeoutFn = goog.testing.JsTdAsyncWrapper.REAL_SET_TIMEOUT_FN_;

 Line: 51 -    setTimeoutFn(fn, timeout);

 Line: 172 -    // using callbacks and setTimeout.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/continuationtestcase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 33 -   * relies on Iframe load events, event or layout code that requires a setTimeout

 Line: 295 -   * window.setTimeout. In particular, if two continuations are

 Line: 305 -    step.setTimeout(

 Line: 325 -    step.setTimeout(

 Line: 430 -      step.setTimeout(

 Line: 639 -   * A saved reference to window.setTimeout so that MockClock or other overrides

 Line: 644 -  goog.testing.ContinuationTestCase.Step.protectedSetTimeout_ = window.setTimeout;

 Line: 663 -  goog.testing.ContinuationTestCase.Step.prototype.setTimeout = function(

 Line: 668 -    var setTimeout = goog.testing.ContinuationTestCase.Step.protectedSetTimeout_;

 Line: 669 -    this.timeout_ = setTimeout(func, duration);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/testcase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 269 -   * Save a reference to `window.setTimeout`, so any code that overrides the

 Line: 274 -  goog.testing.TestCase.protectedSetTimeout_ = goog.global.setTimeout;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/testcase.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2030 -            ' suppressed by querystring';

 Line: 2106 -   * Parses URL query parameters for the 'runTests' parameter.

 Line: 2107 -   * @param {string} search The URL query string.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/multitestrunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 459 -  goog.testing.MultiTestRunner.prototype.setTimeout = function(timeout) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/net/xhrio.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 155 -      x.setTimeoutInterval(opt_timeoutInterval);

 Line: 331 -  goog.testing.net.XhrIo.prototype.setTimeoutInterval = function(ms) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/net/xhrio.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 220 -   * Additional headers that were requested in the last query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/mockclock.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 15 -   * @fileoverview Mock Clock implementation for working with setTimeout,

 Line: 16 -   * setInterval, clearTimeout and clearInterval within unit tests.

 Line: 37 -   * Class for unit testing code that uses setTimeout and clearTimeout.

 Line: 125 -   * Count of the number of setTimeout/setInterval/etc. calls received by this

 Line: 143 -   * PropertyReplacer instance which overwrites and resets setTimeout,

 Line: 144 -   * setInterval, etc. or null if the MockClock is not installed.

 Line: 174 -  goog.testing.MockClock.REAL_SETTIMEOUT_ = goog.global.setTimeout;

 Line: 182 -   * setTimeout, setInterval, clearTimeout and clearInterval.

 Line: 186 -      if (goog.testing.MockClock.REAL_SETTIMEOUT_ !== goog.global.setTimeout) {

 Line: 189 -              'Non default setTimeout detected. ' +

 Line: 197 -      r.set(goog.global, 'setTimeout', goog.bind(this.setTimeout_, this));

 Line: 198 -      r.set(goog.global, 'setInterval', goog.bind(this.setInterval_, this));

 Line: 331 -  goog.testing.MockClock.prototype.setTimeoutDelay = function(delay) {

 Line: 386 -   *     promises "pumped" by setTimeout which is not done in production code,

 Line: 388 -   *     promises callback and setTimeout/setInterval callbacks in tests.

 Line: 417 -   * scheduled. A setInterval call is only counted once.

 Line: 426 -   * triggered. For setInterval, each callback is counted separately.

 Line: 564 -   * Mock implementation for setTimeout.

 Line: 570 -  goog.testing.MockClock.prototype.setTimeout_ = function(

 Line: 588 -   * Mock implementation for setInterval.

 Line: 594 -  goog.testing.MockClock.prototype.setInterval_ = function(

 Line: 612 -    return this.setTimeout_(goog.bind(function() {

 Line: 633 -    return this.setTimeout_(funcToCall, 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/jsunit.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 62 -    var realTimeout = window.setTimeout;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/testing/parallel_closure_test_suite.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 98 -                       .setTimeout(timeout * 1000)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/functions/functions.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 416 -      timeout = goog.global.setTimeout(function() {

 Line: 454 -      timeout = goog.global.setTimeout(handleTimeout, interval);

 Line: 496 -        timeout = goog.global.setTimeout(handleTimeout, interval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/datasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 597 -  goog.ds.STR_ALL_CHILDREN_SELECTOR = '*';

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/jsdatasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 114 -    if (!opt_selector || opt_selector == goog.ds.STR_ALL_CHILDREN_SELECTOR) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/fastdatanode.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 176 -    if (!opt_selector || opt_selector == goog.ds.STR_ALL_CHILDREN_SELECTOR) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/jsxmlhttpdatasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 177 -      goog.global.setTimeout(goog.bind(this.success_, this), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/jsxmlhttpdatasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 93 -   * send a specific body rather than build the body from the query

 Line: 114 -        var queryData;

 Line: 116 -          queryData = this.uri_.getQueryData().toString();

 Line: 118 -          queryData = this.queryData_;

 Line: 123 -        this.xhr_.send(String(uriNoQuery), 'POST', queryData);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/datasource/xmldatasource.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 51 -  goog.ds.XmlDataSource.ATTRIBUTE_SELECTOR_ = '@*';

 Line: 151 -        opt_selector == goog.ds.XmlDataSource.ATTRIBUTE_SELECTOR_) {

 Line: 156 -        opt_selector == goog.ds.STR_ALL_CHILDREN_SELECTOR) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/uri/utils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -   * cases.  The query parameter utilities assume that the parameter keys are

 Line: 21 -   * query parameter mutation utilities also do not tolerate fragment identifiers.

 Line: 73 -   * @param {?string=} opt_queryData The URI-encoded query data.

 Line: 153 -   * case for the query component in the above example. Therefore, we can

 Line: 159 -   *    query     = $7

 Line: 172 -   *    $6 = <undefined>       query without ?

 Line: 192 -      '(?:\\?([^#]*))?' +    // query

 Line: 377 -   * @return {?string} The query data still encoded, or null if none.  Does not

 Line: 452 -   * @return {string} The URI, starting at the path and including the query

 Line: 499 -   * Asserts that there are no fragment or query identifiers, only in uncompiled

 Line: 507 -        'goog.uri.utils: Fragment or query identifiers are not supported: [%s]',

 Line: 513 -   * Supported query parameter values by the parameter serializing utilities.

 Line: 526 -   * An array representing a set of query parameters with alternating keys

 Line: 550 -   * Parses encoded query parameters and calls callback function for every

 Line: 557 -   * @param {string} encodedQuery Encoded query string excluding question mark at

 Line: 560 -   *     parameter found in query string.  The first argument (name) will not be

 Line: 586 -   * Split the URI into 3 parts where the [1] is the queryData without a leading

 Line: 591 -   *     middle value is the queryData without a leading '?'.

 Line: 595 -    // Find the query data and hash.

 Line: 601 -    var queryData;

 Line: 604 -      queryData = '';

 Line: 606 -      queryData = uri.substring(questionIndex + 1, hashIndex);

 Line: 608 -    return [uri.substr(0, questionIndex), queryData, uri.substr(hashIndex)];

 Line: 624 -   * @param {string} queryData

 Line: 631 -      return queryData;

 Line: 633 -    return queryData ? queryData + '&' + newData : newData;

 Line: 639 -   * @param {string} queryData

 Line: 643 -  goog.uri.utils.appendQueryDataToUri_ = function(uri, queryData) {

 Line: 648 -    parts[1] = goog.uri.utils.appendQueryData_(parts[1], queryData);

 Line: 686 -   * Builds a query data string from a sequence of alternating keys and values.

 Line: 692 -   * @return {string} The encoded query string, in the form 'a=1&b=2'.

 Line: 709 -   * Builds a query data string from a map.

 Line: 715 -   * @return {string} The encoded query string, in the form 'a=1&b=2'.

 Line: 748 -   * @param {string} uri The original URI, which may already have query data.

 Line: 752 -   * @return {string} The URI with all query parameters added.

 Line: 755 -    var queryData = arguments.length == 2 ?

 Line: 758 -    return goog.uri.utils.appendQueryDataToUri_(uri, queryData);

 Line: 763 -   * Appends query parameters from a map.

 Line: 765 -   * @param {string} uri The original URI, which may already have query data.

 Line: 772 -    var queryData = goog.uri.utils.buildQueryDataFromMap(map);

 Line: 773 -    return goog.uri.utils.appendQueryDataToUri_(uri, queryData);

 Line: 783 -   * @param {string} uri The original URI, which may already have query data.

 Line: 788 -   * @return {string} The URI with the query parameter added.

 Line: 797 -   * Finds the next instance of a query parameter with the specified name.

 Line: 867 -   * Gets the first value of a query parameter.

 Line: 896 -   * Gets all values of a query parameter.

 Line: 911 -      // query parameters.

 Line: 938 -   * Removes all instances of a query parameter.

 Line: 949 -    // Look for a query parameter.

 Line: 952 -      // Get the portion of the query string up to, but not including, the ?

 Line: 978 -   * @param {string} uri The original URI, which may already have query data.

 Line: 982 -   * @return {string} The URI with the query parameter added.

 Line: 991 -   * Effeciently set or remove multiple query parameters in a URI. Order of

 Line: 993 -   * appended to the end of the query. Params with values of null or undefined are

 Line: 999 -   * @return {string} An updated URI where the query data has been updated with

 Line: 1004 -    var queryData = parts[1];

 Line: 1024 -   * query or fragment identifiers. The path to append may not contain query or

 Line: 1069 -   * Standard supported query parameters.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/uri/uri.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 110 -     * Whether or not to ignore case when comparing query params.

 Line: 116 -     * Object representing query data.

 Line: 208 -    var query = this.getEncodedQuery();

 Line: 210 -      out.push('?', query);

 Line: 228 -   * 1. foo - replaces the last part of the path, the whole query and fragment<br>

 Line: 229 -   * 2. /foo - replaces the path, the query and fragment<br>

 Line: 231 -   * 4. ?foo - replace the query and fragment<br>

 Line: 492 -   * @return {boolean} Whether the query string has been set.

 Line: 500 -   * Sets the query data.

 Line: 501 -   * @param {goog.Uri.QueryData|string|undefined} queryData QueryData object.

 Line: 503 -   *     Applies only if queryData is a string.

 Line: 510 -      this.queryData_ = queryData;

 Line: 514 -        // QueryData accepts encoded query string, so encode it if

 Line: 516 -        queryData = goog.Uri.encodeSpecialChars_(

 Line: 517 -            queryData, goog.Uri.reDisallowedInQuery_);

 Line: 527 -   * Sets the URI query.

 Line: 528 -   * @param {string} newQuery New query value.

 Line: 538 -   * @return {string} The encoded URI query, not including the ?.

 Line: 546 -   * @return {string} The decoded URI query, not including the ?.

 Line: 554 -   * Returns the query data.

 Line: 563 -   * @return {string} The encoded URI query, not including the ?.

 Line: 574 -   * Sets the value of the named query parameters, clearing previous values for

 Line: 589 -   * Sets the values of the named query parameters, clearing previous values for

 Line: 590 -   * that key.  Not new values will currently be moved to the end of the query

 Line: 617 -   * query parameter values.

 Line: 620 -   *     decoded query parameter values.

 Line: 629 -   * parameter name does not appear in the query string.

 Line: 632 -   *     undefined if the given parameter name does not appear in the query

 Line: 698 -   * Removes the named query parameter.

 Line: 901 -    // Don't use UrlDecode() here because val is not a query parameter.

 Line: 991 -   * Regular expression for characters that are disallowed in the query.

 Line: 1026 -   * Class used to represent URI query parameters.  It is essentially a hash of

 Line: 1031 -   * @param {?string=} opt_query Optional encoded query string to parse into

 Line: 1045 -     * May be null if it requires parsing from the query string.

 Line: 1061 -     * Encoded query string, or null if it requires computing from the key map.

 Line: 1076 -   * query string and fills the map with parsed data.

 Line: 1094 -   * Creates a new query data instance from a map of names and values.

 Line: 1104 -   * @return {!goog.Uri.QueryData} The populated query data instance.

 Line: 1112 -    var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);

 Line: 1118 -        queryData.add(key, value);

 Line: 1120 -        queryData.setValues(key, value);

 Line: 1123 -    return queryData;

 Line: 1128 -   * Creates a new query data instance from parallel arrays of parameter names

 Line: 1138 -   * @return {!goog.Uri.QueryData} The populated query data instance.

 Line: 1145 -    var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);

 Line: 1147 -      queryData.add(keys[i], values[i]);

 Line: 1149 -    return queryData;

 Line: 1289 -   * Returns all the values of the parameters with the given name. If the query

 Line: 1341 -   * Returns the first value associated with the key. If the query data has no

 Line: 1344 -   * @param {*=} opt_default The default value to return if the query data

 Line: 1376 -   * @return {string} Encoded query string.

 Line: 1416 -   * @return {string} Decoded query string.

 Line: 1449 -   * Clone the query data instance.

 Line: 1503 -   * Extends a query data object with another query data or map like object. This

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/cssom/iframe/style.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 66 -  goog.cssom.iframe.style.SELECTOR_DELIMITER_ = ',';

 Line: 74 -  goog.cssom.iframe.style.SELECTOR_PART_DELIMITER_ = ' ';

 Line: 231 -            goog.cssom.iframe.style.SELECTOR_PART_DELIMITER_);

 Line: 234 -        array.push(goog.cssom.iframe.style.SELECTOR_DELIMITER_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/cssom/cssom.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 395 -    // We need the regexp to ensure we get the filename minus any query params.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/webgl/webgl.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1022 -  goog.webgl.DELETE_STATUS = 0x8B80;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/debugwindow.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 95 -    goog.global.setInterval(goog.bind(this.saveWindowPositionSize_, this), 7500);

 Line: 365 -          goog.global.setTimeout(goog.bind(this.writeBufferToLog, this), 250);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/fancywindow.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 176 -    var sel = dh.createDom(goog.dom.TagName.SELECT, {'id': id});

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/devcss/devcss.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 172 -    IE6_SELECTOR_TEXT: 'goog-ie6-selector',

 Line: 354 -    // IE6_SELECTOR_TEXT in the cssText property.

 Line: 357 -            goog.debug.DevCss.CssToken_.IE6_SELECTOR_TEXT)) {

 Line: 382 -        goog.debug.DevCss.CssToken_.IE6_SELECTOR_TEXT +

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/errorhandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 28 -   * It will also try to restore window.setTimeout and window.setInterval

 Line: 235 -   * Installs exception protection for window.setTimeout to handle exceptions.

 Line: 238 -    this.protectWindowFunctionsHelper_('setTimeout');

 Line: 243 -   * Install exception protection for window.setInterval to handle exceptions.

 Line: 246 -    this.protectWindowFunctionsHelper_('setInterval');

 Line: 291 -   * asynchronously called, for example setTimeout or requestAnimationFrame.

 Line: 308 -      // IE doesn't support .call for setInterval/setTimeout, but it

 Line: 352 -    // Try to unwrap window.setTimeout and window.setInterval.

 Line: 354 -    win.setTimeout = this.unwrap(win.setTimeout);

 Line: 355 -    win.setInterval = this.unwrap(win.setInterval);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/errorreporter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 368 -      var queryMap = {};

 Line: 369 -      queryMap['trace'] = opt_trace;

 Line: 371 -      // Copy context into query data map

 Line: 374 -          queryMap[this.contextPrefix_ + entry] = opt_context[entry];

 Line: 378 -      // Copy query data map into request.

 Line: 379 -      var queryData = goog.uri.utils.buildQueryDataFromMap(queryMap);

 Line: 383 -        queryData = queryData.substring(0, this.truncationLimit_);

 Line: 387 -      this.xhrSender_(requestUrl, 'POST', queryData, this.extraHeaders_);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/debug/fpsdisplay.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 102 -        this.isInDocument(), 'Render the FPS display before querying FPS');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/async/run.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 72 -   * control so we schedule a backup "setTimeout" to the unmocked timeout if

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/async/animationdelay.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 96 -   * animation, which uses a timer (setTimeout) to schedule animation.

 Line: 144 -      this.id_ = this.win_.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/async/debouncer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 107 -    // timeout. However clearTimeout and setTimeout are expensive, so we just

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/async/nexttick.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 36 -    goog.global.setTimeout(function() { throw exception; }, 0);

 Line: 42 -   * execution context. setTimeout(…, 0) takes at least 4ms when called from

 Line: 43 -   * within another setTimeout(…, 0) for legacy reasons.

 Line: 47 -   * setTimeout(_, 0) would do if it were not throttled. If you desire microtask

 Line: 87 -   * setImmediate is faster than setTimeout nor that setImmediate N is before

 Line: 196 -      // which allows starving postMessage with a busy setTimeout loop.

 Line: 217 -    // Fall back to setTimeout with 0. In browsers this creates a delay of 5ms

 Line: 221 -      goog.global.setTimeout(/** @type {function()} */ (cb), 0);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/closure/goog/window/window.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 264 -   * setTimeout(

</Result>
</report_mosca>

