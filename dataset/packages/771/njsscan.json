{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 13,
          "line": 2
        },
        "extra": {
          "line": "  \"extends\": \"loopback\",",
          "message": "Syntax error"
        },
        "path": "/src/.eslintrc",
        "start": {
          "col": 12,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 13,
          "line": 2
        },
        "extra": {
          "line": "  \"exclude\":  [",
          "message": "Syntax error"
        },
        "path": "/src/.nycrc",
        "start": {
          "col": 12,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# Lines starting with '#' are comments.",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/CODEOWNERS",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 18,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) IBM Corp. 2013,2018. All Rights Reserved.",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_nosqli_injection": {
      "files": [
        {
          "file_path": "/src/common/models/user.js",
          "match_lines": [
            232,
            302
          ],
          "match_position": [
            5,
            24
          ],
          "match_string": "    var query = self.normalizeCredentials(credentials, realmRequired,\n\n      realmDelimiter);\n\n\n\n    if (realmRequired && !query.realm) {\n\n      var err1 = new Error(g.f('{{realm}} is required'));\n\n      err1.statusCode = 400;\n\n      err1.code = 'REALM_REQUIRED';\n\n      fn(err1);\n\n      return fn.promise;\n\n    }\n\n    if (!query.email && !query.username) {\n\n      var err2 = new Error(g.f('{{username}} or {{email}} is required'));\n\n      err2.statusCode = 400;\n\n      err2.code = 'USERNAME_EMAIL_REQUIRED';\n\n      fn(err2);\n\n      return fn.promise;\n\n    }\n\n\n\n    self.findOne({where: query}, function(err, user) {\n\n      var defaultError = new Error(g.f('login failed'));\n\n      defaultError.statusCode = 401;\n\n      defaultError.code = 'LOGIN_FAILED';\n\n\n\n      function tokenHandler(err, token) {\n\n        if (err) return fn(err);\n\n        if (Array.isArray(include) ? include.indexOf('user') !== -1 : include === 'user') {\n\n          // NOTE(bajtos) We can't set token.user here:\n\n          //  1. token.user already exists, it's a function injected by\n\n          //     \"AccessToken belongsTo User\" relation\n\n          //  2. ModelBaseClass.toJSON() ignores own properties, thus\n\n          //     the value won't be included in the HTTP response\n\n          // See also loopback#161 and loopback#162\n\n          token.__data.user = user;\n\n        }\n\n        fn(err, token);\n\n      }\n\n\n\n      if (err) {\n\n        debug('An error is reported from User.findOne: %j', err);\n\n        fn(defaultError);\n\n      } else if (user) {\n\n        user.hasPassword(credentials.password, function(err, isMatch) {\n\n          if (err) {\n\n            debug('An error is reported from User.hasPassword: %j', err);\n\n            fn(defaultError);\n\n          } else if (isMatch) {\n\n            if (self.settings.emailVerificationRequired && !user.emailVerified) {\n\n              // Fail to log in if email verification is not done yet\n\n              debug('User email has not been verified');\n\n              err = new Error(g.f('login failed as the email has not been verified'));\n\n              err.statusCode = 401;\n\n              err.code = 'LOGIN_FAILED_EMAIL_NOT_VERIFIED';\n\n              err.details = {\n\n                userId: user.id,\n\n              };\n\n              fn(err);\n\n            } else {\n\n              if (user.createAccessToken.length === 2) {\n\n                user.createAccessToken(credentials.ttl, tokenHandler);\n\n              } else {\n\n                user.createAccessToken(credentials.ttl, credentials, tokenHandler);\n\n              }\n\n            }\n\n          } else {\n\n            debug('The password is invalid for user %s', query.email || query.username);\n\n            fn(defaultError);\n\n          }\n\n        });\n\n      } else {\n\n        debug('No matching record is found for user %s', query.email || query.username);\n\n        fn(defaultError);"
        }
      ],
      "metadata": {
        "cwe": "CWE-943: Improper Neutralization of Special Elements in Data Query Logic",
        "description": "Untrusted user input in findOne() function can result in NoSQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_username": {
      "files": [
        {
          "file_path": "/src/common/models/role-mapping.js",
          "match_lines": [
            23,
            23
          ],
          "match_position": [
            3,
            28
          ],
          "match_string": "  RoleMapping.USER = 'USER';"
        },
        {
          "file_path": "/src/lib/access-context.js",
          "match_lines": [
            289,
            289
          ],
          "match_position": [
            1,
            24
          ],
          "match_string": "Principal.USER = 'USER';"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/common/models/access-token.js",
          "match_lines": [
            123,
            150
          ],
          "match_position": [
            7,
            18
          ],
          "match_string": "      id = req.header(headers[i]);\n\n\n\n      if (typeof id === 'string') {\n\n        // Add support for oAuth 2.0 bearer token\n\n        // http://tools.ietf.org/html/rfc6750\n\n        if (id.indexOf('Bearer ') === 0) {\n\n          id = id.substring(7);\n\n          if (options.bearerTokenBase64Encoded) {\n\n            // Decode from base64\n\n            var buf = new Buffer(id, 'base64');\n\n            id = buf.toString('utf8');\n\n          }\n\n        } else if (/^Basic /i.test(id)) {\n\n          id = id.substring(6);\n\n          id = (new Buffer(id, 'base64')).toString('utf8');\n\n          // The spec says the string is user:pass, so if we see both parts\n\n          // we will assume the longer of the two is the token, so we will\n\n          // extract \"a2b2c3\" from:\n\n          //   \"a2b2c3\"\n\n          //   \"a2b2c3:\"   (curl http://a2b2c3@localhost:3000/)\n\n          //   \"token:a2b2c3\" (curl http://token:a2b2c3@localhost:3000/)\n\n          //   \":a2b2c3\"\n\n          var parts = /^([^:]*):(.*)$/.exec(id);\n\n          if (parts) {\n\n            id = parts[2].length > parts[1].length ? parts[2] : parts[1];\n\n          }\n\n        }\n\n        return id;"
        },
        {
          "file_path": "/src/server/middleware/token.js",
          "match_lines": [
            39,
            39
          ],
          "match_position": [
            34,
            60
          ],
          "match_string": "  } else if (!req.accessToken && literalRegExp.test(req.url)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
