/src/lib/reader/read-sources.js-115-  var parsedMap = typeof sourceMap == 'string' ?
/src/lib/reader/read-sources.js:116:      JSON.parse(sourceMap) :
/src/lib/reader/read-sources.js-117-      sourceMap;
##############################################
/src/lib/reader/is-allowed-resource.js-26-  match = isRemote ?
/src/lib/reader/is-allowed-resource.js:27:    url.parse(uri).host :
/src/lib/reader/is-allowed-resource.js-28-    uri;
##############################################
/src/lib/reader/is-allowed-resource.js-73-function isRemoteRule(rule) {
/src/lib/reader/is-allowed-resource.js:74:  return isRemoteResource(rule) || url.parse(HTTP_PROTOCOL + '//' + rule).host == rule;
/src/lib/reader/is-allowed-resource.js-75-}
##############################################
/src/lib/reader/load-remote-resource.js-17-  requestOptions = override(
/src/lib/reader/load-remote-resource.js:18:    url.parse(uri),
/src/lib/reader/load-remote-resource.js-19-    inlineRequest || {}
##############################################
/src/lib/reader/apply-source-maps.js-103-      if (sourceMap) {
/src/lib/reader/apply-source-maps.js:104:        parsedMap = JSON.parse(sourceMap);
/src/lib/reader/apply-source-maps.js-105-        rebasedMap = rebaseRemoteMap(parsedMap, uri);
##############################################
/src/lib/reader/apply-source-maps.js-135-
/src/lib/reader/apply-source-maps.js:136:  return JSON.parse(buffer.toString());
/src/lib/reader/apply-source-maps.js-137-}
##############################################
/src/lib/reader/apply-source-maps.js-176-  sourceMap = fs.readFileSync(uri, 'utf-8');
/src/lib/reader/apply-source-maps.js:177:  return JSON.parse(sourceMap);
/src/lib/reader/apply-source-maps.js-178-}
##############################################
/src/lib/options/inline-request.js-15-    {
/src/lib/options/inline-request.js:16:      hostname: url.parse(httpProxy).hostname,
/src/lib/options/inline-request.js:17:      port: parseInt(url.parse(httpProxy).port)
/src/lib/options/inline-request.js-18-    } :
