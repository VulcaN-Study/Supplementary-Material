<report_mosca>
 <Path>/src/build/marsdb.polyfills.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 8 -  ction(t){m.call(t.data)};l&&p||(l=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return v[++h]=function(){c("function"==typeof t?t:Function(t),e)},n(h),h},p=function(t){delete v[t]},"process"==t("./_cof")(_)?n=function(t){_.nextTick(s(m,t,1))}:d?(o=new d,i=o.port2,o.port1.onmessage=y,n=s(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",y,!1)):n=g in u("script")?function(t){a.appendChild(u("script"))[g]=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(s(m,t,1),0)}),e.exports={set:l,clear:p}},{"./_cof":12,"./_ctx":16,"./_dom-create":19,"./_global":25,"./_html":28,"./_invoke":29}],54:[function(t,e,r){var n=Math.ceil,o=Math.floor;e.exports=function(t){return isNaN(t=+t)?0:(t>0?o:n)(t)}},{}],55:[function(t,e,r){var n=t("./_iobject"),o=t("./_defined");e.exports=function(t){return n(o(t))}},{"./_defined":17,"./_iobject":30}],56:[function(t,e,r){var n=t("./_to-integer"),o=Math.min;e.exports=function(t){return t>0?o(n(t),9007199254740991):0}},{"./_to-integer":54}],57:[function(t,e,r){var n=0,o=Math.random();e.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+o).toString(36))}},{}],58:[function(t,e,r){var n=t("./_shared")("wks"),o=t("./_uid"),i=t("./_global").Symbol,s="function"==typeof i;e.exports=function(t){return n[t]||(n[t]=s&&i[t]||(s?i:o)("Symbol."+t))}},{"./_global":25,"./_shared":50,"./_uid":57}],59:[function(t,e,r){var n=t("./_classof"),o=t("./_wks")("iterator"),i=t("./_iterators");e.exports=t("./_core").getIteratorMethod=function(t){return void 0!=t?t[o]||t["@@iterator"]||i[n(t)]:void 0}},{"./_classof":11,"./_core":15,"./_iterators":39,"./_wks":58}],60:[function(t,e,r){"use strict";var n=t("./_add-to-unscopables"),o=t("./_iter-step"),i=t("./_iterators"),s=t("./_to-iobject");e.exports=t("./_iter-define")(Array,"Array",function(t,e){this._t=s(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,o(1)):"keys"==e?o(0,r):"values"==e?o(0,t[r]):o(0,[r,t[r]])},"va</Result>
</report_mosca>

<report_mosca>
 <Path>/src/build/marsdb.min.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 2 -  or(var o=[],i=null,u=null,s=null,f=null,n=0;n<e.length;n++)switch(n%3){case 0:i=e[n]>>2&63,u=(3&e[n])<<4;break;case 1:u|=e[n]>>4&15,s=(15&e[n])<<2;break;case 2:s|=e[n]>>6&3,f=63&e[n],o.push(a(i)),o.push(a(u)),o.push(a(s)),o.push(a(f)),i=null,u=null,s=null,f=null}return null!=i&&(o.push(a(i)),o.push(a(u)),null==s?o.push("="):o.push(a(s)),null==f&&o.push("=")),o.join("")}},{key:"decode",value:function(e){var t=Math.floor(3*e.length/4);"="==e.charAt(e.length-1)&&(t--,"="==e.charAt(e.length-2)&&t--);for(var n=this.newBinary(t),r=null,o=null,i=null,u=0,a=0;a<e.length;a++){var f=e.charAt(a),c=s(f);switch(a%4){case 0:if(0>c)throw new Error("invalid base64 string");r=c<<2;break;case 1:if(0>c)throw new Error("invalid base64 string");r|=c>>4,n[u++]=r,o=(15&c)<<4;break;case 2:c>=0&&(o|=c>>2,n[u++]=o,i=(3&c)<<6);break;case 3:c>=0&&(n[u++]=i|c)}}return n}},{key:"newBinary",value:function(e){if("undefined"==typeof Uint8Array||"undefined"==typeof ArrayBuffer){for(var t=[],n=0;e>n;n++)t.push(0);return t.$Uint8ArrayPolyfill=!0,t}return new Uint8Array(new ArrayBuffer(e))}}]),e}();n["default"]=new f},{}],3:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":f(t))&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0];J+=1,R=[],D=!1;var t=J;setTimeout(function(){t===J&&(D=!0,(0,p["default"])(R,function(e){return e()}),R=[])},e)}function s(){D&&console.warn("You are trying to change some default of the Collection,but all collec Line: 44 -  rocess:function(e,t){return(0,i["default"])(e,t.value)}}},{"fast.js/map":49,invariant:56}],28:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0}),n.reduce=void 0;var o=e("fast.js/array/reduce"),i=r(o),u=e("invariant"),a=r(u);n.reduce={method:function(e,t){return(0,a["default"])("function"==typeof e,"reduce(...): reducer argument must be a function"),this._addPipeline("reduce",e,t),this},process:function(e,t){return(0,i["default"])(e,t.value,t.args[0])}}},{"fast.js/array/reduce":40,invariant:56}],29:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0}),n.sortFunc=void 0;var o=e("invariant"),i=r(o);n.sortFunc={method:function(e){return(0,i["default"])("function"==typeof e,"sortFunc(...): argument must be a function"),this._addPipeline("sortFunc",e),this},process:function(e,t){return e.sort(t.value)}}},{invariant:56}],30:[function(e,t,n){"use strict";function r(e,t,n){var r=null,o=0,i=null,u=!0,a=null,s=function(){var s=this,f=arguments;if(i){var c=n&&o>=n;if(u=!c,c&&a){var l=i;return l.debouncePassed=!0,clearTimeout(r),a(),o+=1,l}}else i=new Promise(function(n,c){(a=function(){u?(r=setTimeout(a,t),u=!1):(n(e.apply(s,f)),i=null,o=0,r=null,u=!0,a=null)})()});return o+=1,i},f=function(e){n=e},c=function(e){t=e},l=function(){clearTimeout(r)};return s.updateBatchSize=f,s.updateWait=c,s.cancel=l,s.func=e,s}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=r},{}],31:[function(e,t,n){"use strict";var r=e("./dist/AsyncEventEmitter")["default"],o=e("./dist/Collection")["default"],i=e("./dist/CursorObservable")["default"],u=e("./dist/debounce")["default"],a=e("./dist/StorageManager")["default"],s=e("./dist/Random")["default"],f=e("./dist/EJSON")["default"],c=e("./dist/Base64")["default"],l=e("./dist/PromiseQueue")["default"];t.exports={__esModule:!0,"default":o,Random:s,EJSON:f,Base64:c,Collection:o,CursorObservable:i,StorageManager:a,EventEmitter:r,PromiseQueue:l,debounce:u}},{"./dist/AsyncEventEmitter":1,"./dist/Base64":</Result>
</report_mosca>

<report_mosca>
 <Path>/src/build/marsdb.min.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -  key:"_modifyDocument",value:function(e,t){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];if(!(0,E.isPlainObject)(t))throw new Error("Modifier must be an object");t=m["default"].clone(t);var r,o=(0,E.isOperatorObject)(t);if(o)r=m["default"].clone(e),(0,h["default"])(t,function(e,t){var o=M[t];if(n.isInsert&&"$setOnInsert"===t&&(o=M.$set),!o)throw new Error("Invalid modifier specified "+t);(0,h["default"])(e,function(e,i){if(""===i)throw new Error("An empty update path is not valid.");if("_id"===i&&!n.isInsert)throw new Error("Mod on _id not allowed for update.");var u=i.split(".");if(!(0,y["default"])(u,function(e){return e}))throw new Error("The update path '"+i+"' contains an empty field name, which is not allowed.");var a=k(r,u,{noCreate:x[t],forbidArray:"$rename"===t,arrayIndices:n.arrayIndices}),s=u.pop();o(a,s,e,i,r)})});else{if(!n.isInsert&&t._id&&!m["default"].equals(e._id,t._id))throw new Error("Cannot change the _id of a document");for(var i in t)if(/\./.test(i))throw new Error("When replacing document, field name may not contain '.'");r=t,r._id=e._id}return r}}]),e}();n["default"]=S;var P=function(e){var t={};return f["default"].object(e)||(e={_id:e}),(0,h["default"])(e,function(e,n){if("$"!==n.substr(0,1)&&!(0,E.isOperatorObject)(e,!0)){var r=n.split("."),o=k(t,r);o&&(o[r[r.length-1]]=e)}}),t},k=n.findModTarget=function(e,t,n){n=n||{};for(var r=!1,o=0;o<t.length;o++){var i=o===t.length-1,a=t[o],s=(0,E.isIndexable)(e);if(!s){if(n.noCreate)return;var f=new Error("cannot use the part '"+a+"' to traverse "+e);throw f.setPropertyError=!0,f}if(e instanceof Array){if(n.forbidArray)return null;if("$"===a){if(r)throw new Error("Too many positional (i.e. '$') elements");if(!n.arrayIndices||!n.arrayIndices.length)throw new Error("The positional operator did not find the match needed from the query");a=n.arrayIndices[0],r=!0}else{if(!(0,E.isNumericKey)(a)){if(n.noCreate)return;throw new Error("can't append to array using string field name ["+a+"]")}a=parseInt(a,10)}if(i&&(t[o]=a),n.noCreate&&a>=e.length)return;for(;e.length<a;)e.push(null);if(!i)if(e.length===</Result>
</report_mosca>

<report_mosca>
 <Path>/src/build/marsdb.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 435 -    setTimeout(function () {

 Line: 7094 -              timeout = setTimeout(_maybeResolve, wait);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/build/marsdb.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 555 -       * @param  {Object} query

 Line: 570 -        this.emit('beforeRemove', query, options);

 Line: 572 -          this.emit('sync:remove', query, options);

 Line: 586 -       * @param  {Object} query

 Line: 601 -        this.emit('beforeUpdate', query, modifier, options);

 Line: 603 -          this.emit('sync:update', query, modifier, options);

 Line: 614 -       * Make a cursor with given query and return.

 Line: 618 -       * @param  {Object} query

 Line: 633 -       * Finds one object by given query and sort object.

 Line: 636 -       * @param  {Object} query

 Line: 651 -       * Returns a number of matched by query objects. It's

 Line: 656 -       * @param  {Object} query

 Line: 670 -       * Return a list of ids by given query. Uses only

 Line: 672 -       * @param  {Object} query

 Line: 981 -        return new cursorClass(this.db, query, options);

 Line: 1236 -   * Class for storing information about query

 Line: 1246 -      var query = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

 Line: 1256 -      _this2._query = query;

 Line: 1284 -        this._query = query;

 Line: 1387 -        var queryFilter = function queryFilter(doc) {

 Line: 1391 -        return new _DocumentRetriver2.default(this.db).retriveForQeury(this._query, queryFilter, retrOpts).then(function (results) {

 Line: 1557 -    function CursorObservable(db, query, options) {

 Line: 1560 -      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CursorObservable).call(this, db, query, options));

 Line: 1723 -       * Consider to update a query by given newDoc and oldDoc,

 Line: 1749 -        // 1. Is a new doc or old doc matched by a query?

 Line: 1755 -        // it's match a query

 Line: 1794 -       * Execute query and propagate result to observers.

 Line: 2605 -    // This is just used as a comment in the query (in MongoDB, it also ends up in

 Line: 2606 -    // query logs); it has no effect on the actual selection.

 Line: 3149 -      // In the special case of a numeric part in a *sort selector* (not a query

 Line: 3217 -        // query, something arbitrary happens; this appears to be consistent with

 Line: 3315 -      var query = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

 Line: 3319 -      this._query = query;

 Line: 3513 -            throw new Error('The positional operator did not find the ' + 'match needed from the query');

 Line: 4316 -     * by given query based on _id field of the query

 Line: 4320 -     * @param  {Object} query

 Line: 4327 -        var queryFilter = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_QUERY_FILTER : arguments[1];

 Line: 4333 -          // fast path for scalar query

 Line: 4338 -        } else if (_checkTypes2.default.object(query) && query.hasOwnProperty('_id') && _checkTypes2.default.object(query._id) && query._id.hasOwnProperty('$in') && _checkTypes2.default.array(query._id.$in)) {

 Line: 4341 -          selectorIds = query._id.$in;

 Line: 4364 -        var queryFilter = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_QUERY_FILTER : arguments[0];

 Line: 4380 -              if (result.length < limit && queryFilter(doc)) {

 Line: 4406 -        var queryFilter = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_QUERY_FILTER : arguments[0];

 Line: 4426 -            if (doc && queryFilter(doc)) {

 Line: 8048 -   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/debounce.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 25 -              timeout = setTimeout(maybeResolve, wait);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/CursorObservable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -    constructor(db, query, options) {

 Line: 20 -      super(db, query, options);

 Line: 184 -     * Consider to update a query by given newDoc and oldDoc,

 Line: 210 -      // 1. Is a new doc or old doc matched by a query?

 Line: 220 -      // it's match a query

 Line: 258 -     * Execute query and propagate result to observers.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Cursor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 38 -   * Class for storing information about query

 Line: 44 -    constructor(db, query = {}, options = {}) {

 Line: 49 -      this._query = query;

 Line: 78 -      this._query = query;

 Line: 171 -      const queryFilter = (doc) => {

 Line: 176 -        .retriveForQeury(this._query, queryFilter, retrOpts)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Collection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 32 -    setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Collection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 138 -     * @param  {Object} query

 Line: 146 -      this.emit('beforeRemove', query, options);

 Line: 148 -        this.emit('sync:remove', query, options);

 Line: 160 -     * @param  {Object} query

 Line: 168 -      this.emit('beforeUpdate', query, modifier, options);

 Line: 170 -        this.emit('sync:update', query, modifier, options);

 Line: 181 -     * Make a cursor with given query and return.

 Line: 185 -     * @param  {Object} query

 Line: 195 -     * Finds one object by given query and sort object.

 Line: 198 -     * @param  {Object} query

 Line: 208 -     * Returns a number of matched by query objects. It's

 Line: 213 -     * @param  {Object} query

 Line: 222 -     * Return a list of ids by given query. Uses only

 Line: 224 -     * @param  {Object} query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/DocumentRetriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -     * by given query based on _id field of the query

 Line: 27 -     * @param  {Object} query

 Line: 30 -    retriveForQeury(query, queryFilter = DEFAULT_QUERY_FILTER, options = {}) {

 Line: 34 -        // fast path for scalar query

 Line: 40 -        _check.object(query) && query.hasOwnProperty('_id') &&

 Line: 41 -        _check.object(query._id) && query._id.hasOwnProperty('$in') &&

 Line: 46 -        selectorIds = query._id.$in;

 Line: 77 -            if (result.length < limit && queryFilter(doc)) {

 Line: 108 -          if (doc && queryFilter(doc)) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/DocumentModifier.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -      this._query = query;

 Line: 200 -                                 'match needed from the query');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/DocumentMatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 383 -    // This is just used as a comment in the query (in MongoDB, it also ends up in

 Line: 384 -    // query logs); it has no effect on the actual selection.

 Line: 935 -      // In the special case of a numeric part in a *sort selector* (not a query

 Line: 1006 -        // query, something arbitrary happens; this appears to be consistent with

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/CollectionDelegate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 68 -      return new cursorClass(this.db, query, options);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/DocumentMatcher.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -              with query ${JSON.stringify(selector)}`, function() {

 Line: 276 -        // This query means: All 'a.b' must be non-5, and some 'a.b' must be >6.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/Cursor.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 505 -              setTimeout(() => {

 Line: 520 -              setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/Cursor.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 192 -      it('should return all objects with empty query object', function () {

 Line: 200 -      it('should return all objects with undefined query object', function () {

 Line: 448 -      it('should join for all docs only by one query call', function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/CursorObservable.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 91 -        setTimeout(() => {

 Line: 156 -          setTimeout(() => {done()}, 10);

 Line: 173 -          setTimeout(() => {done()}, 10);

 Line: 191 -          setTimeout(() => {done()}, 10);

 Line: 237 -              setTimeout(done, 60);

 Line: 250 -            setTimeout(() => {

 Line: 282 -          setTimeout(() => {done()}, 40);

 Line: 299 -          setTimeout(() => {done()}, 40);

 Line: 338 -            setTimeout(() => {done()}, 40);

 Line: 443 -              setTimeout(resolve, 50);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/CursorObservable.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 144 -      it('should not update if inserted document not match query', function (done) {

 Line: 269 -      it('should not update a cursor when updated dcc does not match a query', function (done) {

 Line: 277 -            done(new Error('Called when document does not match query'));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/DocumentModifier.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -    var modifyWithQuery = function (doc, query, mod, expected) {

 Line: 10 -      it(`should update ${JSON.stringify(doc)} with query ${JSON.stringify(query)}

 Line: 26 -    var exceptionWithQuery = function (doc, query, mod) {

 Line: 28 -          with query ${JSON.stringify(query)} by mod ${JSON.stringify(mod)}`, function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/Collection.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 241 -      it('should remove multiple documents by query', function () {

 Line: 287 -          query.should.to.be.deep.equals({a: {$in: [1, 3]}});

 Line: 464 -      it('should return count of documents by query', function () {

 Line: 512 -      it('should return list of ids by given query', function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/DocumentRetriver.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 57 -      it('should use queryFilter for filtering documents', function () {

 Line: 96 -      it('should filter documents by queryFilter', function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/both/PromiseQueue.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 55 -              setTimeout(() => {

 Line: 71 -              setTimeout(() => {

 Line: 80 -              setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/debounce.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 31 -              timeout = setTimeout(_maybeResolve, wait);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/CursorObservable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -    function CursorObservable(db, query, options) {

 Line: 66 -      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CursorObservable).call(this, db, query, options));

 Line: 229 -       * Consider to update a query by given newDoc and oldDoc,

 Line: 255 -        // 1. Is a new doc or old doc matched by a query?

 Line: 261 -        // it's match a query

 Line: 300 -       * Execute query and propagate result to observers.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/Cursor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 90 -   * Class for storing information about query

 Line: 100 -      var query = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

 Line: 110 -      _this2._query = query;

 Line: 138 -        this._query = query;

 Line: 241 -        var queryFilter = function queryFilter(doc) {

 Line: 245 -        return new _DocumentRetriver2.default(this.db).retriveForQeury(this._query, queryFilter, retrOpts).then(function (results) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/Collection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 80 -    setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/Collection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 200 -       * @param  {Object} query

 Line: 215 -        this.emit('beforeRemove', query, options);

 Line: 217 -          this.emit('sync:remove', query, options);

 Line: 231 -       * @param  {Object} query

 Line: 246 -        this.emit('beforeUpdate', query, modifier, options);

 Line: 248 -          this.emit('sync:update', query, modifier, options);

 Line: 259 -       * Make a cursor with given query and return.

 Line: 263 -       * @param  {Object} query

 Line: 278 -       * Finds one object by given query and sort object.

 Line: 281 -       * @param  {Object} query

 Line: 296 -       * Returns a number of matched by query objects. It's

 Line: 301 -       * @param  {Object} query

 Line: 315 -       * Return a list of ids by given query. Uses only

 Line: 317 -       * @param  {Object} query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/DocumentRetriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -     * by given query based on _id field of the query

 Line: 53 -     * @param  {Object} query

 Line: 60 -        var queryFilter = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_QUERY_FILTER : arguments[1];

 Line: 66 -          // fast path for scalar query

 Line: 71 -        } else if (_checkTypes2.default.object(query) && query.hasOwnProperty('_id') && _checkTypes2.default.object(query._id) && query._id.hasOwnProperty('$in') && _checkTypes2.default.array(query._id.$in)) {

 Line: 74 -          selectorIds = query._id.$in;

 Line: 97 -        var queryFilter = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_QUERY_FILTER : arguments[0];

 Line: 113 -              if (result.length < limit && queryFilter(doc)) {

 Line: 139 -        var queryFilter = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_QUERY_FILTER : arguments[0];

 Line: 159 -            if (doc && queryFilter(doc)) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/DocumentModifier.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 51 -      var query = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

 Line: 55 -      this._query = query;

 Line: 249 -            throw new Error('The positional operator did not find the ' + 'match needed from the query');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/DocumentMatcher.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 427 -    // This is just used as a comment in the query (in MongoDB, it also ends up in

 Line: 428 -    // query logs); it has no effect on the actual selection.

 Line: 971 -      // In the special case of a numeric part in a *sort selector* (not a query

 Line: 1039 -        // query, something arbitrary happens; this appears to be consistent with

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/CollectionDelegate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 116 -        return new cursorClass(this.db, query, options);

</Result>
</report_mosca>

