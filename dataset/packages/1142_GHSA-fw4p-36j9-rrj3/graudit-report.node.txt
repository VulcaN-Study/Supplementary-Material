/src/lib/dialects/postgres/data-types.js-444-    const b = new Buffer(value, 'hex');
/src/lib/dialects/postgres/data-types.js:445:    return wkx.Geometry.parse(b).toGeoJSON();
/src/lib/dialects/postgres/data-types.js-446-  };
##############################################
/src/lib/dialects/postgres/data-types.js-480-    const b = new Buffer(value, 'hex');
/src/lib/dialects/postgres/data-types.js:481:    return wkx.Geometry.parse(b).toGeoJSON();
/src/lib/dialects/postgres/data-types.js-482-  };
##############################################
/src/lib/dialects/postgres/data-types.js-504-    }
/src/lib/dialects/postgres/data-types.js:505:    return hstore.parse(value);
/src/lib/dialects/postgres/data-types.js-506-  };
##############################################
/src/lib/dialects/postgres/data-types.js-546-
/src/lib/dialects/postgres/data-types.js:547:    return range.parse(value, parser);
/src/lib/dialects/postgres/data-types.js-548-  };
##############################################
/src/lib/dialects/postgres/connection-manager.js-41-      for (const oid of dataType.types.postgres.oids) {
/src/lib/dialects/postgres/connection-manager.js:42:        this.oidMap[oid] = value => dataType.parse(value, oid, this.lib.types.getTypeParser);
/src/lib/dialects/postgres/connection-manager.js-43-      }
##############################################
/src/lib/dialects/postgres/connection-manager.js-49-          return this.lib.types.arrayParser.create(value, v =>
/src/lib/dialects/postgres/connection-manager.js:50:            dataType.parse(v, oid, this.lib.types.getTypeParser)
/src/lib/dialects/postgres/connection-manager.js:51:          ).parse();
/src/lib/dialects/postgres/connection-manager.js-52-        };
##############################################
/src/lib/dialects/postgres/hstore.js-12-  if (value === null) return null;
/src/lib/dialects/postgres/hstore.js:13:  return hstore.parse(value);
/src/lib/dialects/postgres/hstore.js-14-}
##############################################
/src/lib/dialects/mysql/data-types.js-159-
/src/lib/dialects/mysql/data-types.js:160:    return wkx.Geometry.parse(value).toGeoJSON();
/src/lib/dialects/mysql/data-types.js-161-  };
##############################################
/src/lib/dialects/sqlite/data-types.js-41-  JSONTYPE.parse = function parse(data) {
/src/lib/dialects/sqlite/data-types.js:42:    return JSON.parse(data);
/src/lib/dialects/sqlite/data-types.js-43-  };
##############################################
/src/lib/sequelize.js-115-
/src/lib/sequelize.js:116:      const urlParts = url.parse(arguments[0]);
/src/lib/sequelize.js-117-
##############################################
/src/lib/utils/validator-extras.js-90-  // by doing a preliminary check on `dateString`
/src/lib/utils/validator-extras.js:91:  const parsed = Date.parse(dateString);
/src/lib/utils/validator-extras.js-92-  if (isNaN(parsed)) {
