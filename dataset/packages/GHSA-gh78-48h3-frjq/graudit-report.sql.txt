/src/examples/proxy/index.js-105-  console.log('Connection to :', dstHost, dstPort)
/src/examples/proxy/index.js:106:  var mqttConn = net.createConnection(
/src/examples/proxy/index.js-107-    {
##############################################
/src/benchmarks/bombing.js-3-const mqtt = require('mqtt')
/src/benchmarks/bombing.js:4:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, keepalive: 0 })
/src/benchmarks/bombing.js-5-const interval = 5000
##############################################
/src/benchmarks/throughputCounter.js-4-
/src/benchmarks/throughputCounter.js:5:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, encoding: 'binary', keepalive: 0 })
/src/benchmarks/throughputCounter.js-6-const interval = 5000
##############################################
/src/benchmarks/throughputCounterQoS1.js-4-
/src/benchmarks/throughputCounterQoS1.js:5:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, encoding: 'binary', keepalive: 0 })
/src/benchmarks/throughputCounterQoS1.js-6-const interval = 5000
##############################################
/src/benchmarks/pingpong.js-5-const mode = require('compute-mode')
/src/benchmarks/pingpong.js:6:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, keepalive: 0 })
/src/benchmarks/pingpong.js-7-const interval = 5000
##############################################
/src/benchmarks/bombingQoS1.js-3-const mqtt = require('mqtt')
/src/benchmarks/bombingQoS1.js:4:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, keepalive: 0 })
/src/benchmarks/bombingQoS1.js-5-const interval = 5000
##############################################
/src/test/events.js-163-    const port = server.address().port
/src/test/events.js:164:    publisher = mqtt.connect({ port: port, host: 'localhost', clean: true, keepalive: 30 })
/src/test/events.js-165-
##############################################
/src/test/not-blocking.js-36-    for (var i = 0; i < total; i++) {
/src/test/not-blocking.js:37:      clients[i] = mqtt.connect({
/src/test/not-blocking.js-38-        port: port,
##############################################
/src/test/not-blocking.js-71-
/src/test/not-blocking.js:72:    const publisher = mqtt.connect({
/src/test/not-blocking.js-73-      port: port,
##############################################
/src/test/not-blocking.js-95-    function startSubscriber () {
/src/test/not-blocking.js:96:      subscriber = mqtt.connect({
/src/test/not-blocking.js-97-        port: port,
##############################################
/src/test/not-blocking.js-148-
/src/test/not-blocking.js:149:    const publisher = mqtt.connect({
/src/test/not-blocking.js-150-      port: port,
##############################################
/src/test/not-blocking.js-172-    function startSubscriber () {
/src/test/not-blocking.js:173:      subscriber = mqtt.connect({
/src/test/not-blocking.js-174-        port: port,
##############################################
/src/test/close_socket_by_other_party.js-147-  // client 1
/src/test/close_socket_by_other_party.js:148:  client1 = mqtt.connect('mqtt://localhost', { clientId: 'client1', resubscribe: false, reconnectPeriod: -1 })
/src/test/close_socket_by_other_party.js-149-  client1.on('message', () => {
##############################################
/src/test/close_socket_by_other_party.js-158-    // client 2
/src/test/close_socket_by_other_party.js:159:    client2 = mqtt.connect('mqtt://localhost', { clientId: 'client2', resubscribe: false })
/src/test/close_socket_by_other_party.js-160-    client2.on('message', () => {
##############################################
/src/test/close_socket_by_other_party.js-167-      // pubClient
/src/test/close_socket_by_other_party.js:168:      const pubClient = mqtt.connect('mqtt://localhost', { clientId: 'pubClient' })
/src/test/close_socket_by_other_party.js-169-      pubClient.publish(_sameTopic, 'world', { qos: 0, retain: false }, () => {
##############################################
/src/test/connect.js-664-
/src/test/connect.js:665:  const client = mqtt.connect(`ws://localhost:${port}`, {
/src/test/connect.js-666-    wsOptions: {
##############################################
/src/test/connect.js-703-
/src/test/connect.js:704:  const client = mqtt.connect({
/src/test/connect.js-705-    port,
##############################################
/src/test/connect.js-760-
/src/test/connect.js:761:  const client = net.connect({
/src/test/connect.js-762-    port,
##############################################
/src/test/connect.js-818-
/src/test/connect.js:819:  const client = net.createConnection(
/src/test/connect.js-820-    {
##############################################
/src/test/connect.js-879-
/src/test/connect.js:880:  const client = net.createConnection(
/src/test/connect.js-881-    {
##############################################
/src/test/connect.js-923-
/src/test/connect.js:924:  const client = mqtt.connect(`ws://localhost:${port}`)
/src/test/connect.js-925-
##############################################
/src/test/connect.js-960-
/src/test/connect.js:961:  const client = mqtt.connect(`ws://localhost:${port}`, {
/src/test/connect.js-962-    wsOptions: {
##############################################
/src/test/connect.js-1003-
/src/test/connect.js:1004:  const client = mqtt.connect(`ws://localhost:${port}`, {
/src/test/connect.js-1005-    wsOptions: {
