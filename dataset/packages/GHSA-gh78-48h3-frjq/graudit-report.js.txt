/src/examples/proxy/index.js-79-  const parsedProto = version === 1
/src/examples/proxy/index.js:80:    ? proxyProtocol.V1BinaryProxyProtocol.parse(protocol)
/src/examples/proxy/index.js:81:    : proxyProtocol.V2ProxyProtocol.parse(protocol)
/src/examples/proxy/index.js-82-  // console.log(parsedProto)
##############################################
/src/examples/proxy/index.js-105-  console.log('Connection to :', dstHost, dstPort)
/src/examples/proxy/index.js:106:  var mqttConn = net.createConnection(
/src/examples/proxy/index.js-107-    {
##############################################
/src/examples/proxy/index.js-137-
/src/examples/proxy/index.js:138:  const server = require('net').createServer(broker.handle)
/src/examples/proxy/index.js-139-
##############################################
/src/examples/clusters/index.js-24-
/src/examples/clusters/index.js:25:  const server = require('net').createServer(aedes.handle)
/src/examples/clusters/index.js-26-
##############################################
/src/benchmarks/bombing.js-3-const mqtt = require('mqtt')
/src/benchmarks/bombing.js:4:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, keepalive: 0 })
/src/benchmarks/bombing.js-5-const interval = 5000
##############################################
/src/benchmarks/throughputCounter.js-4-
/src/benchmarks/throughputCounter.js:5:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, encoding: 'binary', keepalive: 0 })
/src/benchmarks/throughputCounter.js-6-const interval = 5000
##############################################
/src/benchmarks/throughputCounterQoS1.js-4-
/src/benchmarks/throughputCounterQoS1.js:5:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, encoding: 'binary', keepalive: 0 })
/src/benchmarks/throughputCounterQoS1.js-6-const interval = 5000
##############################################
/src/benchmarks/server.js-5-const aedes = require('../')()
/src/benchmarks/server.js:6:const server = require('net').createServer(aedes.handle)
/src/benchmarks/server.js-7-const port = 1883
##############################################
/src/benchmarks/pingpong.js-5-const mode = require('compute-mode')
/src/benchmarks/pingpong.js:6:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, keepalive: 0 })
/src/benchmarks/pingpong.js-7-const interval = 5000
##############################################
/src/benchmarks/pingpong.js-30-client.on('message', function (topic, payload) {
/src/benchmarks/pingpong.js:31:  var sentAt = JSON.parse(payload)
/src/benchmarks/pingpong.js-32-  var diff = process.hrtime(sentAt)
##############################################
/src/benchmarks/bombingQoS1.js-3-const mqtt = require('mqtt')
/src/benchmarks/bombingQoS1.js:4:const client = mqtt.connect({ port: 1883, host: 'localhost', clean: true, keepalive: 0 })
/src/benchmarks/bombingQoS1.js-5-const interval = 5000
##############################################
/src/lib/client.js-80-        if (data) {
/src/lib/client.js:81:          client._parser.parse(data)
/src/lib/client.js-82-        } else {
/src/lib/client.js:83:          client._parser.parse(buf)
/src/lib/client.js-84-        }
/src/lib/client.js-85-      } else if (buf) {
/src/lib/client.js:86:        client._parser.parse(buf)
/src/lib/client.js-87-      }
##############################################
/src/test/events.js-158-  const mqtt = require('mqtt')
/src/test/events.js:159:  const server = require('net').createServer(broker.handle)
/src/test/events.js-160-  var publisher
##############################################
/src/test/events.js-163-    const port = server.address().port
/src/test/events.js:164:    publisher = mqtt.connect({ port: port, host: 'localhost', clean: true, keepalive: 30 })
/src/test/events.js-165-
##############################################
/src/test/not-blocking.js-12-  const broker = aedes()
/src/test/not-blocking.js:13:  const server = net.createServer(broker.handle)
/src/test/not-blocking.js-14-  const total = 200
##############################################
/src/test/not-blocking.js-36-    for (var i = 0; i < total; i++) {
/src/test/not-blocking.js:37:      clients[i] = mqtt.connect({
/src/test/not-blocking.js-38-        port: port,
##############################################
/src/test/not-blocking.js-56-  const broker = aedes()
/src/test/not-blocking.js:57:  const server = net.createServer(broker.handle)
/src/test/not-blocking.js-58-  const total = 10000
##############################################
/src/test/not-blocking.js-71-
/src/test/not-blocking.js:72:    const publisher = mqtt.connect({
/src/test/not-blocking.js-73-      port: port,
##############################################
/src/test/not-blocking.js-95-    function startSubscriber () {
/src/test/not-blocking.js:96:      subscriber = mqtt.connect({
/src/test/not-blocking.js-97-        port: port,
##############################################
/src/test/not-blocking.js-133-  const broker = aedes({ concurrency: 15 })
/src/test/not-blocking.js:134:  const server = net.createServer(broker.handle)
/src/test/not-blocking.js-135-  const total = 10000
##############################################
/src/test/not-blocking.js-148-
/src/test/not-blocking.js:149:    const publisher = mqtt.connect({
/src/test/not-blocking.js-150-      port: port,
##############################################
/src/test/not-blocking.js-172-    function startSubscriber () {
/src/test/not-blocking.js:173:      subscriber = mqtt.connect({
/src/test/not-blocking.js-174-        port: port,
##############################################
/src/test/close_socket_by_other_party.js-136-
/src/test/close_socket_by_other_party.js:137:  const server = require('net').createServer(broker.handle)
/src/test/close_socket_by_other_party.js-138-  const port = 1883
##############################################
/src/test/close_socket_by_other_party.js-147-  // client 1
/src/test/close_socket_by_other_party.js:148:  client1 = mqtt.connect('mqtt://localhost', { clientId: 'client1', resubscribe: false, reconnectPeriod: -1 })
/src/test/close_socket_by_other_party.js-149-  client1.on('message', () => {
##############################################
/src/test/close_socket_by_other_party.js-158-    // client 2
/src/test/close_socket_by_other_party.js:159:    client2 = mqtt.connect('mqtt://localhost', { clientId: 'client2', resubscribe: false })
/src/test/close_socket_by_other_party.js-160-    client2.on('message', () => {
##############################################
/src/test/close_socket_by_other_party.js-167-      // pubClient
/src/test/close_socket_by_other_party.js:168:      const pubClient = mqtt.connect('mqtt://localhost', { clientId: 'pubClient' })
/src/test/close_socket_by_other_party.js-169-      pubClient.publish(_sameTopic, 'world', { qos: 0, retain: false }, () => {
##############################################
/src/test/connect.js-655-
/src/test/connect.js:656:  const server = http.createServer()
/src/test/connect.js:657:  ws.createServer({
/src/test/connect.js-658-    server: server
##############################################
/src/test/connect.js-664-
/src/test/connect.js:665:  const client = mqtt.connect(`ws://localhost:${port}`, {
/src/test/connect.js-666-    wsOptions: {
##############################################
/src/test/connect.js-698-
/src/test/connect.js:699:  const server = net.createServer(broker.handle)
/src/test/connect.js-700-  server.listen(port, function (err) {
##############################################
/src/test/connect.js-703-
/src/test/connect.js:704:  const client = mqtt.connect({
/src/test/connect.js-705-    port,
##############################################
/src/test/connect.js-755-
/src/test/connect.js:756:  const server = net.createServer(broker.handle)
/src/test/connect.js-757-  server.listen(port, function (err) {
##############################################
/src/test/connect.js-760-
/src/test/connect.js:761:  const client = net.connect({
/src/test/connect.js-762-    port,
##############################################
/src/test/connect.js-813-
/src/test/connect.js:814:  const server = net.createServer(broker.handle)
/src/test/connect.js-815-  server.listen(port, function (err) {
##############################################
/src/test/connect.js-818-
/src/test/connect.js:819:  const client = net.createConnection(
/src/test/connect.js-820-    {
##############################################
/src/test/connect.js-874-
/src/test/connect.js:875:  const server = net.createServer(broker.handle)
/src/test/connect.js-876-  server.listen(port, function (err) {
##############################################
/src/test/connect.js-879-
/src/test/connect.js:880:  const client = net.createConnection(
/src/test/connect.js-881-    {
##############################################
/src/test/connect.js-914-
/src/test/connect.js:915:  const server = http.createServer()
/src/test/connect.js:916:  ws.createServer({
/src/test/connect.js-917-    server: server
##############################################
/src/test/connect.js-923-
/src/test/connect.js:924:  const client = mqtt.connect(`ws://localhost:${port}`)
/src/test/connect.js-925-
##############################################
/src/test/connect.js-951-
/src/test/connect.js:952:  const server = http.createServer()
/src/test/connect.js:953:  ws.createServer({
/src/test/connect.js-954-    server: server
##############################################
/src/test/connect.js-960-
/src/test/connect.js:961:  const client = mqtt.connect(`ws://localhost:${port}`, {
/src/test/connect.js-962-    wsOptions: {
##############################################
/src/test/connect.js-994-
/src/test/connect.js:995:  const server = http.createServer()
/src/test/connect.js:996:  ws.createServer({
/src/test/connect.js-997-    server: server
##############################################
/src/test/connect.js-1003-
/src/test/connect.js:1004:  const client = mqtt.connect(`ws://localhost:${port}`, {
/src/test/connect.js-1005-    wsOptions: {
##############################################
/src/docs/Aedes.md-171-const aedes = require('./aedes')()
/src/docs/Aedes.md:172:const server = require('net').createServer(aedes.handle)
/src/docs/Aedes.md-173-```
##############################################
/src/docs/Examples.md-7-const aedes = require('aedes')()
/src/docs/Examples.md:8:const server = require('net').createServer(aedes.handle)
/src/docs/Examples.md-9-const port = 1883
##############################################
/src/docs/Examples.md-27-
/src/docs/Examples.md:28:const server = require('tls').createServer(options, aedes.handle)
/src/docs/Examples.md-29-
##############################################
/src/docs/Examples.md-38-const aedes = require('./aedes')()
/src/docs/Examples.md:39:const httpServer = require('http').createServer()
/src/docs/Examples.md-40-const ws = require('websocket-stream')
##############################################
/src/docs/Examples.md-42-
/src/docs/Examples.md:43:ws.createServer({ server: httpServer }, aedes.handle)
/src/docs/Examples.md-44-
##############################################
/src/example.js-3-const aedes = require('./aedes')()
/src/example.js:4:const server = require('net').createServer(aedes.handle)
/src/example.js:5:const httpServer = require('http').createServer()
/src/example.js-6-const ws = require('websocket-stream')
##############################################
/src/example.js-13-
/src/example.js:14:ws.createServer({
/src/example.js-15-  server: httpServer
