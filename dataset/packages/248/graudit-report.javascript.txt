/src/src/lib/zlib/zlib.h-1358-   unpredictable consequences, which is possible only if zlib was compiled with
/src/src/lib/zlib/zlib.h:1359:   the insecure functions sprintf() or vsprintf() because the secure snprintf()
/src/src/lib/zlib/zlib.h-1360-   or vsnprintf() functions were not available.  This can be determined using
##############################################
/src/src/lib/cimg/CImg.h-2214-    // Evaluate math expression.
/src/src/lib/cimg/CImg.h:2215:    inline double eval(const char *const expression,
/src/src/lib/cimg/CImg.h-2216-                       const double x=0, const double y=0, const double z=0, const double c=0);
##############################################
/src/src/lib/cimg/CImg.h-17465-    **/
/src/src/lib/cimg/CImg.h:17466:    double eval(const char *const expression,
/src/src/lib/cimg/CImg.h-17467-                const double x=0, const double y=0, const double z=0, const double c=0) {
/src/src/lib/cimg/CImg.h:17468:      return _eval(this,expression,x,y,z,c);
/src/src/lib/cimg/CImg.h-17469-    }
##############################################
/src/src/lib/cimg/CImg.h-17471-    //! Evaluate math formula \const.
/src/src/lib/cimg/CImg.h:17472:    double eval(const char *const expression,
/src/src/lib/cimg/CImg.h-17473-                const double x=0, const double y=0, const double z=0, const double c=0) const {
/src/src/lib/cimg/CImg.h:17474:      return _eval(0,expression,x,y,z,c);
/src/src/lib/cimg/CImg.h-17475-    }
/src/src/lib/cimg/CImg.h-17476-
/src/src/lib/cimg/CImg.h:17477:    double _eval(CImg<T> *const output, const char *const expression,
/src/src/lib/cimg/CImg.h-17478-                 const double x=0, const double y=0, const double z=0, const double c=0) const {
##############################################
/src/src/lib/cimg/CImg.h-17497-    template<typename t>
/src/src/lib/cimg/CImg.h:17498:    CImg<doubleT> eval(const char *const expression, const CImg<t>& xyzc) {
/src/src/lib/cimg/CImg.h:17499:      return _eval(this,expression,xyzc);
/src/src/lib/cimg/CImg.h-17500-    }
##############################################
/src/src/lib/cimg/CImg.h-17503-    template<typename t>
/src/src/lib/cimg/CImg.h:17504:    CImg<doubleT> eval(const char *const expression, const CImg<t>& xyzc) const {
/src/src/lib/cimg/CImg.h:17505:      return _eval(0,expression,xyzc);
/src/src/lib/cimg/CImg.h-17506-    }
##############################################
/src/src/lib/cimg/CImg.h-17508-    template<typename t>
/src/src/lib/cimg/CImg.h:17509:    CImg<doubleT> _eval(CImg<T> *const output, const char *const expression, const CImg<t>& xyzc) const {
/src/src/lib/cimg/CImg.h-17510-      CImg<doubleT> res(1,xyzc.size()/4);
##############################################
/src/src/lib/cimg/CImg.h-52399-     const double
/src/src/lib/cimg/CImg.h:52400:     res1 = cimg::eval("cos(x)^2 + sin(y)^2",2,2),  // will return '1'.
/src/src/lib/cimg/CImg.h:52401:     res2 = cimg::eval(0,1,1);                    // will return '1' too.
/src/src/lib/cimg/CImg.h-52402-     \endcode
/src/src/lib/cimg/CImg.h-52403-  **/
/src/src/lib/cimg/CImg.h:52404:  inline double eval(const char *const expression, const double x, const double y, const double z, const double c) {
/src/src/lib/cimg/CImg.h-52405-    static const CImg<float> empty;
/src/src/lib/cimg/CImg.h:52406:    return empty.eval(expression,x,y,z,c);
/src/src/lib/cimg/CImg.h-52407-  }
##############################################
/src/src/lib/cimg/CImg.h-52409-  template<typename t>
/src/src/lib/cimg/CImg.h:52410:  inline CImg<typename cimg::superset<double,t>::type> eval(const char *const expression, const CImg<t>& xyzc) {
/src/src/lib/cimg/CImg.h-52411-    static const CImg<float> empty;
/src/src/lib/cimg/CImg.h:52412:    return empty.eval(expression,xyzc);
/src/src/lib/cimg/CImg.h-52413-  }
