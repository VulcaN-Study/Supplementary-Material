/src/hl-tests/letsencrypt/a.js-30-
/src/hl-tests/letsencrypt/a.js:31:var server = spdy.createServer(options, function(req, res) {
/src/hl-tests/letsencrypt/a.js-32-  res.writeHead(200);
##############################################
/src/hl-tests/letsencrypt/proxy.js-49-
/src/hl-tests/letsencrypt/proxy.js:50:http.createServer(function(req, res){
/src/hl-tests/letsencrypt/proxy.js-51-  // request.get('http://127.0.0.1:3000').pipe(res);
##############################################
/src/hl-tests/letsencrypt/proxy.js-68-var msg = randomstring.generate(size);
/src/hl-tests/letsencrypt/proxy.js:69:http.createServer(function(req, res){
/src/hl-tests/letsencrypt/proxy.js-70-  res.writeHead(200);
##############################################
/src/hl-tests/paths.js-13-  }
/src/hl-tests/paths.js:14:  var server = http.createServer(handleRequest);
/src/hl-tests/paths.js-15-
##############################################
/src/hl-tests/64/proxy.js-43-
/src/hl-tests/64/proxy.js:44:http.createServer(function(req, res){
/src/hl-tests/64/proxy.js-45-
##############################################
/src/lib/etcd-backend.js-46-      try {
/src/lib/etcd-backend.js:47:          JSON.parse(str);
/src/lib/etcd-backend.js-48-      } catch (e) {
##############################################
/src/lib/etcd-backend.js-68-      else if(body.node.key && body.node.value && IsJsonString(body.node.value)){
/src/lib/etcd-backend.js:69:        var config = JSON.parse(body.node.value);
/src/lib/etcd-backend.js-70-        if (typeof config.docker !== 'undefined'){
##############################################
/src/lib/proxy.js-181-  var httpServerModule = opts.serverModule || http;
/src/lib/proxy.js:182:  var server = this.server = httpServerModule.createServer(function (req, res) {
/src/lib/proxy.js-183-    var src = _this._getSource(req);
##############################################
/src/lib/proxy.js-272-
/src/lib/proxy.js:273:  var httpsServer = this.httpsServer = https.createServer(ssl, function (req, res) {
/src/lib/proxy.js-274-
##############################################
/src/lib/letsencrypt.js-43-  // we need to proxy for example: 'example.com/.well-known/acme-challenge' -> 'localhost:port/example.com/'
/src/lib/letsencrypt.js:44:  http.createServer(function (req, res){
/src/lib/letsencrypt.js:45:    var uri = url.parse(req.url).pathname;
/src/lib/letsencrypt.js-46-    var filename = path.join(certPath, uri);
##############################################
/src/lib/letsencrypt.js-66-      res.writeHead(200);
/src/lib/letsencrypt.js:67:      fs.createReadStream(filename, "binary").pipe(res);
/src/lib/letsencrypt.js-68-    });
##############################################
/src/test/test_hostheader.js-131-	return new Promise(function(resolve, reject){
/src/test/test_hostheader.js:132:		var server = http.createServer(function(req, res){
/src/test/test_hostheader.js-133-			res.write("");
##############################################
/src/test/test_register.js-355-		  var net = require('net')
/src/test/test_register.js:356:		  var tester = net.createServer()
/src/test/test_register.js-357-		  .once('error', function (err) {
##############################################
/src/test/test_pathnames.js-66-	return new Promise(function(resolve, reject){
/src/test/test_pathnames.js:67:		var server = http.createServer(function(req, res){
/src/test/test_pathnames.js-68-      res.write("");
