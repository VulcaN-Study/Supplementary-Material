/src/lib/transport.js-154-  try {
/src/lib/transport.js:155:    return JSON.parse(str)
/src/lib/transport.js-156-  } catch (e) {
##############################################
/src/lib/transport.js-233-    'https' === config.protocol
/src/lib/transport.js:234:      ? Https.createServer(config.custom || config.serverOptions)
/src/lib/transport.js:235:      : Http.createServer()
/src/lib/transport.js-236-
##############################################
/src/lib/transport.js-263-    req.setEncoding('utf8')
/src/lib/transport.js:264:    req.query = Qs.parse(Url.parse(req.url).query)
/src/lib/transport.js-265-
##############################################
/src/lib/transport.js-348-        maxFreeSockets: Infinity,
/src/lib/transport.js:349:        rejectUnauthorized: false
/src/lib/transport.js-350-      })
##############################################
/src/lib/plugins.js-41-
/src/lib/plugins.js:42:    var preload = plugin.init.preload
/src/lib/plugins.js:43:    preload = _.isFunction(preload) ? preload : _.noop
/src/lib/plugins.js:44:    var meta = preload.call(seneca, plugin) || {}
/src/lib/plugins.js-45-
##############################################
/src/lib/plugins.js-72-
/src/lib/plugins.js:73:    var preload_name = meta.name || plugin.name
/src/lib/plugins.js:74:    var preload_fullname = Common.make_plugin_key(preload_name, plugin.tag)
/src/lib/plugins.js:75:    seneca.private$.exports[preload_name] = meta.export || plugin
/src/lib/plugins.js-76-
/src/lib/plugins.js:77:    resolve_plugin_exports(seneca, preload_fullname, meta)
/src/lib/plugins.js-78-
##############################################
/src/lib/api.js-190-  this.options({ log: { level: 'warn' } })
/src/lib/api.js:191:  this.private$.logger = Logging.preload.call(this).extend.logger
/src/lib/api.js-192-  return this
##############################################
/src/lib/api.js-215-
/src/lib/api.js:216:  this.private$.logger = Logging.preload.call(this).extend.logger
/src/lib/api.js-217-
##############################################
/src/lib/common.js-64-  try {
/src/lib/common.js:65:    return !!JSON.parse(v)
/src/lib/common.js-66-  } catch (e) {
##############################################
/src/lib/logging.js-13-function logging() {
/src/lib/logging.js:14:  // Everything is in preload as logging plugins are
/src/lib/logging.js-15-  // a special case that need to be loaded before any calls to seneca.log.
##############################################
/src/lib/logging.js-17-
/src/lib/logging.js:18:logging.preload = function() {
/src/lib/logging.js-19-  var seneca = this
##############################################
/src/seneca.js-1041-
/src/seneca.js:1042:    return log_plugin.preload.call(instance).extend.logger
/src/seneca.js-1043-  }
