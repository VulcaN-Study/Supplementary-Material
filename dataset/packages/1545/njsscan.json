{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 19,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) 2016, Massachusetts Institute of Technology",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 12,
          "line": 1
        },
        "extra": {
          "line": "The Scratch trademarks, including the Scratch name, logo, the Scratch Cat, Gobo, Pico, Nano, Tera and Giga graphics (the \"Marks\"), are property of the Massachusetts Institute of Technology (MIT). Marks may not be used to endorse or promote products derived from this software without specific prior written permission.",
          "message": "Syntax error"
        },
        "path": "/src/TRADEMARK",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "eval_nodejs": {
      "files": [
        {
          "file_path": "/src/src/blocks/scratch3_looks.js",
          "match_lines": [
            344,
            351
          ],
          "match_position": [
            35,
            32
          ],
          "match_string": "            this._bubbleTimeout = setTimeout(() => {\n\n                this._bubbleTimeout = null;\n\n                // Clear say bubble if it hasn't been changed and proceed.\n\n                if (this._getBubbleState(target).usageId === usageId) {\n\n                    this._updateBubble(target, 'say', '');\n\n                }\n\n                resolve();\n\n            }, 1000 * args.SECS);"
        },
        {
          "file_path": "/src/src/blocks/scratch3_looks.js",
          "match_lines": [
            364,
            371
          ],
          "match_position": [
            35,
            32
          ],
          "match_string": "            this._bubbleTimeout = setTimeout(() => {\n\n                this._bubbleTimeout = null;\n\n                // Clear think bubble if it hasn't been changed and proceed.\n\n                if (this._getBubbleState(target).usageId === usageId) {\n\n                    this._updateBubble(target, 'think', '');\n\n                }\n\n                resolve();\n\n            }, 1000 * args.SECS);"
        }
      ],
      "metadata": {
        "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/src/util/uid.js",
          "match_lines": [
            24,
            24
          ],
          "match_position": [
            30,
            41
          ],
          "match_string": "        id[i] = soup_.charAt(Math.random() * soupLength);"
        },
        {
          "file_path": "/src/src/util/math-util.js",
          "match_lines": [
            99,
            99
          ],
          "match_position": [
            44,
            55
          ],
          "match_string": "        const randInt = lower + Math.floor(Math.random() * possibleOptions);"
        },
        {
          "file_path": "/src/src/extensions/scratch3_translate/index.js",
          "match_lines": [
            101,
            101
          ],
          "match_position": [
            24,
            35
          ],
          "match_string": "            Math.floor(Math.random() * this._supportedLanguages.length)].value;"
        },
        {
          "file_path": "/src/src/blocks/scratch3_motion.js",
          "match_lines": [
            87,
            87
          ],
          "match_position": [
            48,
            59
          ],
          "match_string": "            targetX = Math.round(stageWidth * (Math.random() - 0.5));"
        },
        {
          "file_path": "/src/src/blocks/scratch3_motion.js",
          "match_lines": [
            88,
            88
          ],
          "match_position": [
            49,
            60
          ],
          "match_string": "            targetY = Math.round(stageHeight * (Math.random() - 0.5));"
        },
        {
          "file_path": "/src/src/blocks/scratch3_motion.js",
          "match_lines": [
            128,
            128
          ],
          "match_position": [
            49,
            60
          ],
          "match_string": "            util.target.setDirection(Math.round(Math.random() * 360) - 180);"
        },
        {
          "file_path": "/src/src/blocks/scratch3_operators.js",
          "match_lines": [
            88,
            88
          ],
          "match_position": [
            37,
            48
          ],
          "match_string": "            return low + Math.floor(Math.random() * ((high + 1) - low));"
        },
        {
          "file_path": "/src/src/blocks/scratch3_operators.js",
          "match_lines": [
            90,
            90
          ],
          "match_position": [
            17,
            28
          ],
          "match_string": "        return (Math.random() * (high - low)) + low;"
        },
        {
          "file_path": "/src/src/sprites/rendered-target.js",
          "match_lines": [
            987,
            987
          ],
          "match_position": [
            28,
            39
          ],
          "match_string": "            newTarget.x = (Math.random() - 0.5) * 400 / 2;"
        },
        {
          "file_path": "/src/src/sprites/rendered-target.js",
          "match_lines": [
            988,
            988
          ],
          "match_position": [
            28,
            39
          ],
          "match_string": "            newTarget.y = (Math.random() - 0.5) * 300 / 2;"
        },
        {
          "file_path": "/src/src/util/cast.js",
          "match_lines": [
            202,
            202
          ],
          "match_position": [
            43,
            54
          ],
          "match_string": "                    return 1 + Math.floor(Math.random() * length);"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_injection_dos": {
      "files": [
        {
          "file_path": "/src/src/serialization/deserialize-assets.js",
          "match_lines": [
            18,
            33
          ],
          "match_position": [
            5,
            42
          ],
          "match_string": "    const fileName = assetFileName ? assetFileName : sound.md5;\n\n    const storage = runtime.storage;\n\n    if (!storage) {\n\n        log.error('No storage module present; cannot load sound asset: ', fileName);\n\n        return Promise.resolve(null);\n\n    }\n\n\n\n    if (!zip) { // Zip will not be provided if loading project json from server\n\n        return Promise.resolve(null);\n\n    }\n\n\n\n    let soundFile = zip.file(fileName);\n\n    if (!soundFile) {\n\n        // look for assetfile in a flat list of files, or in a folder\n\n        const fileMatch = new RegExp(`^([^/]*/)?${fileName}$`);\n\n        soundFile = zip.file(fileMatch)[0]; // use first matching file"
        },
        {
          "file_path": "/src/src/serialization/deserialize-assets.js",
          "match_lines": [
            80,
            113
          ],
          "match_position": [
            5,
            44
          ],
          "match_string": "    const fileName = assetFileName ? assetFileName :\n\n        `${assetId}.${costume.dataFormat}`;\n\n\n\n    if (!storage) {\n\n        log.error('No storage module present; cannot load costume asset: ', fileName);\n\n        return Promise.resolve(null);\n\n    }\n\n\n\n    if (costume.asset) {\n\n        // When uploading a sprite from an image file, the asset data will be provided\n\n        // @todo Cache the asset data somewhere and pull it out here\n\n        return Promise.resolve(storage.createAsset(\n\n            costume.asset.assetType,\n\n            costume.asset.dataFormat,\n\n            new Uint8Array(Object.keys(costume.asset.data).map(key => costume.asset.data[key])),\n\n            null,\n\n            true\n\n        )).then(asset => {\n\n            costume.asset = asset;\n\n            costume.assetId = asset.assetId;\n\n            costume.md5 = `${asset.assetId}.${asset.dataFormat}`;\n\n        });\n\n    }\n\n\n\n    if (!zip) {\n\n        // Zip will not be provided if loading project json from server\n\n        return Promise.resolve(null);\n\n    }\n\n\n\n    let costumeFile = zip.file(fileName);\n\n    if (!costumeFile) {\n\n        // look for assetfile in a flat list of files, or in a folder\n\n        const fileMatch = new RegExp(`^([^/]*/)?${fileName}$`);\n\n        costumeFile = zip.file(fileMatch)[0]; // use the first matched file"
        }
      ],
      "metadata": {
        "cwe": "CWE-400: Uncontrolled Resource Consumption",
        "description": "User controlled data in RegExp() can make the application vulnerable to layer 7 DoS.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
