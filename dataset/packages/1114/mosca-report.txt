<report_mosca>
 <Path>/src/lib/GraphQL/loaders/defaultGraphQLQueries.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -      description: 'The health query can be used to check if the server is up and running.',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/loaders/usersQueries.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -      description: 'The Me query can be used to return the current user data.',

 Line: 27 -      async resolve(_source, _args, context, queryInfo) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/loaders/parseClassTypes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 326 -          description: 'This is the $inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.',

 Line: 330 -          description: 'This is the $notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.',

 Line: 415 -              async resolve(source, args, context, queryInfo) {

 Line: 495 -      description: `The ${classGraphQLFindResultTypeName} object type is used in the ${className} find query to return the data of the matched objects.`,

 Line: 498 -          description: 'This is the objects returned by the query',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/loaders/objectsMutations.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 105 -      type: new _graphql.GraphQLNonNull(defaultGraphQLTypes.UPDATE_RESULT),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/loaders/objectsQueries.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 186 -          // Silently replace the limit on the query with the max configured

 Line: 229 -      description: 'The get query can be used to get an object of a certain class by its objectId.',

 Line: 263 -      description: 'The find query can be used to find objects of a certain class.',

 Line: 266 -        where: defaultGraphQLTypes.WHERE_ATT,

 Line: 285 -      async resolve(_source, args, context, queryInfo) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/loaders/parseClassMutations.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 78 -      type: defaultGraphQLTypes.UPDATE_RESULT,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/loaders/parseClassQueries.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 30 -      description: `The ${getGraphQLQueryName} query can be used to get an object of the ${className} class by its id.`,

 Line: 38 -      async resolve(_source, args, context, queryInfo) {

 Line: 64 -      description: `The ${findGraphQLQueryName} query can be used to find objects of the ${className} class.`,

 Line: 68 -      async resolve(_source, args, context, queryInfo) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/loaders/usersMutations.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 80 -            query: {},

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/loaders/defaultGraphQLTypes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -  exports.load = exports.SIGN_UP_RESULT = exports.FIND_RESULT = exports.POLYGON_CONSTRAINT = exports.GEO_POINT_CONSTRAINT = exports.FILE_CONSTRAINT = exports.BYTES_CONSTRAINT = exports.DATE_CONSTRAINT = exports.OBJECT_CONSTRAINT = exports.ARRAY_CONSTRAINT = exports.BOOLEAN_CONSTRAINT = exports.NUMBER_CONSTRAINT = exports.STRING_CONSTRAINT = exports._options = exports._regex = exports._dontSelect = exports._select = exports._exists = exports._nin = exports._in = exports._gte = exports._gt = exports._lte = exports._lt = exports._ne = exports._eq = exports.GEO_INTERSECTS = exports.GEO_WITHIN_OPERATOR = exports.CENTER_SPHERE_OPERATOR = exports.WITHIN_OPERATOR = exports.BOX_OPERATOR = exports.TEXT_OPERATOR = exports.SEARCH_OPERATOR = exports.SELECT_OPERATOR = exports.SUBQUERY = exports.COUNT_ATT = exports.LIMIT_ATT = exports.SKIP_ATT = exports.WHERE_ATT = exports.SUBQUERY_READ_PREFERENCE_ATT = exports.INCLUDE_READ_PREFERENCE_ATT = exports.READ_PREFERENCE_ATT = exports.READ_PREFERENCE = exports.INCLUDE_ATT = exports.KEYS_ATT = exports.SESSION_TOKEN_ATT = exports.CLASS = exports.CLASS_FIELDS = exports.UPDATE_RESULT = exports.UPDATE_RESULT_FIELDS = exports.CREATE_RESULT = exports.CREATE_RESULT_FIELDS = exports.INPUT_FIELDS = exports.ACL_ATT = exports.CREATED_AT_ATT = exports.UPDATED_AT_ATT = exports.OBJECT_ID_ATT = exports.FIELDS_ATT = exports.CLASS_NAME_ATT = exports.RELATION_OP = exports.POLYGON_INFO = exports.POLYGON = exports.GEO_POINT_INFO = exports.GEO_POINT = exports.GEO_POINT_FIELDS = exports.FILE_INFO = exports.FILE = exports.parseFileValue = exports.BYTES = exports.DATE = exports.serializeDateIso = exports.parseDateIsoValue = exports.OBJECT = exports.ANY = exports.parseObjectFields = exports.parseListValues = exports.parseValue = exports.parseBooleanValue = exports.parseFloatValue = exports.parseIntValue = exports.parseStringValue = exports.TypeValidationError = void 0;

 Line: 432 -  const UPDATED_AT_ATT = {

 Line: 436 -  exports.UPDATED_AT_ATT = UPDATED_AT_ATT;

 Line: 457 -  const UPDATE_RESULT_FIELDS = {

 Line: 458 -    updatedAt: UPDATED_AT_ATT

 Line: 460 -  exports.UPDATE_RESULT_FIELDS = UPDATE_RESULT_FIELDS;

 Line: 461 -  const UPDATE_RESULT = new _graphql.GraphQLObjectType({

 Line: 464 -    fields: UPDATE_RESULT_FIELDS

 Line: 466 -  exports.UPDATE_RESULT = UPDATE_RESULT;

 Line: 468 -  const CLASS_FIELDS = _objectSpread({}, CREATE_RESULT_FIELDS, UPDATE_RESULT_FIELDS, INPUT_FIELDS);

 Line: 515 -    description: 'The read preference for the main query to be executed.',

 Line: 529 -  const WHERE_ATT = {

 Line: 533 -  exports.WHERE_ATT = WHERE_ATT;

 Line: 551 -    description: 'The Subquery input type is used to specific a different query to a different class.',

 Line: 554 -      where: Object.assign({}, WHERE_ATT, {

 Line: 555 -        type: new _graphql.GraphQLNonNull(WHERE_ATT.type)

 Line: 560 -  const SELECT_OPERATOR = new _graphql.GraphQLInputObjectType({

 Line: 564 -      query: {

 Line: 574 -  exports.SELECT_OPERATOR = SELECT_OPERATOR;

 Line: 611 -    description: 'The BoxOperator input type is used to specifiy a $box operation on a within geo query.',

 Line: 637 -    description: 'The CenterSphereOperator input type is used to specifiy a $centerSphere operation on a geoWithin query.',

 Line: 738 -    description: 'This is the $select operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.',

 Line: 739 -    type: SELECT_OPERATOR

 Line: 743 -    description: 'This is the $dontSelect operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.',

 Line: 744 -    type: SELECT_OPERATOR

 Line: 960 -        description: 'This is the objects returned by the query',

 Line: 988 -    parseGraphQLSchema.graphQLTypes.push(UPDATE_RESULT);

 Line: 992 -    parseGraphQLSchema.graphQLTypes.push(SELECT_OPERATOR);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/GraphQL/ParseGraphQLSchema.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 107 -        query: graphQLQuery,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/ParseServerRESTController.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 87 -      let query;

 Line: 90 -        query = data;

 Line: 103 -            query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/triggers.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 237 -  function getRequestQueryObject(triggerType, auth, query, count, config, isGet) {

 Line: 241 -      query,

 Line: 431 -      let queryResult = parseQuery;

 Line: 434 -        queryResult = result;

 Line: 437 -      const jsonQuery = queryResult.toJSON();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/cloud-code/httpRequest.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 183 -   * @property {String} method The method of the request. GET, POST, PUT, DELETE, HEAD, and OPTIONS are supported. Will default to GET if not specified.

 Line: 184 -   * @property {String|Object} params The query portion of the url. You can pass a JSON object of key value pairs like params: {q : 'Sean Plott'} or a raw string like params:q=Sean Plott.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/cloud-code/Parse.Cloud.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 299 -   * @property {Parse.Query} query The query triggering the hook.

 Line: 304 -   * @property {Boolean} isGet wether the query a `get` or a `find`

 Line: 312 -   * @property {Parse.Query} query The query triggering the hook.

 Line: 313 -   * @property {Array<Parse.Object>} results The results the query yielded.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/SessionsRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 93 -      this.route('DELETE', '/sessions/:objectId', req => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/RolesRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -      this.route('DELETE', '/roles/:objectId', req => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/PurgeRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -      this.route('DELETE', '/purge/:className', middleware.promiseEnforceMasterKeyAccess, req => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/ClassesRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -        // Silently replace the limit on the query with the max configured

 Line: 138 -          throw new _node.default.Error(_node.default.Error.INVALID_QUERY, `Invalid parameter for query: ${key}`);

 Line: 202 -      this.route('DELETE', '/classes/:className/:objectId', req => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/AudiencesRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 57 -      this.route('DELETE', '/push_audiences/:objectId', middleware.promiseEnforceMasterKeyAccess, req => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/FilesRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 114 -        next(new _node.default.Error(_node.default.Error.FILE_DELETE_ERROR, 'Could not delete file.'));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/LogsRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -    // query params:

 Line: 30 -    // level (optional) Level of logging you want to query for (info || error)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/InstallationsRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 44 -      this.route('DELETE', '/installations/:objectId', req => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/CloudCodeRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 41 -      this.route('DELETE', '/cloud_code/jobs/:objectId', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.deleteJob);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/UsersRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 56 -        // Use query parameters instead if provided in url

 Line: 83 -        let query;

 Line: 86 -          query = {

 Line: 91 -          query = {

 Line: 95 -          query = {

 Line: 104 -        return req.config.database.find('_User', query).then(results => {

 Line: 383 -      this.route('DELETE', '/users/:objectId', req => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/AggregateRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 103 -        throw new _node.default.Error(_node.default.Error.INVALID_QUERY, `Invalid parameter for query: ${stageName}`);

 Line: 108 -          throw new _node.default.Error(_node.default.Error.INVALID_QUERY, `Invalid parameter for query: group. Please use objectId instead of _id`);

 Line: 112 -          throw new _node.default.Error(_node.default.Error.INVALID_QUERY, `Invalid parameter for query: group. objectId is required`);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/PushRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -     * Get query condition from the request body.

 Line: 57 -     * @returns {Object} The query condition, the where field in a query api call

 Line: 68 -        throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED, 'Channels and query can not be set at the same time.');

 Line: 78 -        throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED, 'Sending a push requires either "channels" or a "where" query.');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Routers/SchemasRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 111 -      this.route('DELETE', '/schemas/:className', middleware.promiseEnforceMasterKeyAccess, deleteSchema);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/LiveQuery/ParseLiveQueryServer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 491 -      return typeof query === 'object' && Object.keys(query).length == 1 && typeof query.objectId === 'string' ? 'get' : 'find';

 Line: 703 -        _Client.Client.pushError(parseWebsocket, 2, 'Cannot find client with clientId ' + parseWebsocket.clientId + '. Make sure you connect to live query server before unsubscribing.');

 Line: 713 -        _Client.Client.pushError(parseWebsocket, 2, 'Cannot find subscription with clientId ' + parseWebsocket.clientId + ' subscriptionId ' + requestId + '. Make sure you subscribe to live query server before unsubscribing.');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/LiveQuery/QueryTools.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -   * and quickly determine if a query has changed.

 Line: 63 -   * Generate a hash from a query, with unique fields for columns, values, order,

 Line: 68 -  function queryHash(query) {

 Line: 70 -      query = {

 Line: 71 -        className: query.className,

 Line: 72 -        where: query._where

 Line: 109 -    return query.className + ':' + sections.join('|');

 Line: 137 -   * It's a lightweight, where-clause only implementation of a full query engine.

 Line: 139 -   * queries, we can avoid building a full-blown query tool.

 Line: 143 -  function matchesQuery(object, query) {

 Line: 147 -      if (className !== query.className) {

 Line: 151 -      return matchesQuery(object, query._where);

 Line: 154 -    for (var field in query) {

 Line: 155 -      if (!matchesKeyConstraints(object, field, query[field])) {

 Line: 378 -          // Not a query type, but a way to add options to $regex. Ignore and

 Line: 383 -          // Not a query type, but a way to add a cap to $nearSphere. Ignore and

 Line: 402 -    queryHash: queryHash,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/LiveQuery/ParseWebSocketServer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 33 -        const pingIntervalId = setInterval(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/LiveQuery/RequestSchema.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -      query: {

 Line: 92 -      query: {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/LiveQuery/Subscription.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -    // It is query condition eg query.where

 Line: 13 -    constructor(className, query, queryHash) {

 Line: 15 -      this.query = query;

 Line: 16 -      this.hash = queryHash;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Controllers/DatabaseController.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -    const newQuery = _lodash.default.cloneDeep(query); //Can't be any existing '_wperm' query, we don't allow client queries on that, no need to $and

 Line: 39 -    const newQuery = _lodash.default.cloneDeep(query); //Can't be any existing '_rperm' query, we don't allow client queries on that, no need to $and

 Line: 83 -      throw new _node.Parse.Error(_node.Parse.Error.INVALID_QUERY, 'Cannot query on ACL.');

 Line: 88 -        query.$or.forEach(el => validateQuery(el, skipMongoDBServer13732Workaround));

 Line: 92 -           * level of the query can not make efficient use of indexes due to a

 Line: 101 -           * the logic is unnecessary. Some query patterns are even slowed by

 Line: 103 -           * query plans being chosen.

 Line: 111 -           * subdocument of the $or predicate, allowing MongoDB's query planner

 Line: 118 -           * constrained to only 1 operator per query. As a result, these ops

 Line: 128 -            if (query[key] != null && typeof query[key] == 'object') {

 Line: 129 -              hasNears = '$near' in query[key] || '$nearSphere' in query[key];

 Line: 133 -              query.$or.forEach(subquery => {

 Line: 134 -                subquery[key] = query[key];

 Line: 136 -              delete query[key];

 Line: 139 -          query.$or.forEach(el => validateQuery(el, skipMongoDBServer13732Workaround));

 Line: 148 -        query.$and.forEach(el => validateQuery(el, skipMongoDBServer13732Workaround));

 Line: 155 -      if (query.$nor instanceof Array && query.$nor.length > 0) {

 Line: 156 -        query.$nor.forEach(el => validateQuery(el, skipMongoDBServer13732Workaround));

 Line: 163 -      if (query && query[key] && query[key].$regex) {

 Line: 164 -        if (typeof query[key].$options === 'string') {

 Line: 166 -            throw new _node.Parse.Error(_node.Parse.Error.INVALID_QUERY, `Bad $options value for query: ${query[key].$options}`);

 Line: 365 -   * When querying, the fieldName may be compound, extract the root fieldName

 Line: 452 -    validateObject(className, object, query, {

 Line: 467 -        return schema.validateObject(className, object, query);

 Line: 471 -    update(className, query, update, {

 Line: 476 -      const originalQuery = query;

 Line: 488 -            query = this.addPointerPermissions(schemaController, className, 'update', query, aclGroup);

 Line: 496 -            query = addWriteACL(query, acl);

 Line: 533 -              return this.adapter.find(className, schema, query, {}).then(result => {

 Line: 543 -              return this.adapter.updateObjectsByQuery(className, schema, query, update);

 Line: 545 -              return this.adapter.upsertOneObject(className, schema, query, update);

 Line: 547 -              return this.adapter.findOneAndUpdate(className, schema, query, update);

 Line: 673 -    } // Removes objects matches this query from the database.

 Line: 682 -    destroy(className, query, {

 Line: 690 -            query = this.addPointerPermissions(schemaController, className, 'delete', query, aclGroup);

 Line: 695 -          } // delete by query

 Line: 699 -            query = addWriteACL(query, acl);

 Line: 713 -          }).then(parseFormatSchema => this.adapter.deleteObjectsByQuery(className, parseFormatSchema, query)).catch(error => {

 Line: 806 -    relatedIds(className, key, owningId, queryOptions) {

 Line: 811 -      } = queryOptions;

 Line: 820 -        queryOptions.skip = 0;

 Line: 836 -    } // Modifies query so that it no longer has $in on relation fields, or

 Line: 838 -    // Returns a promise that resolves when query is mutated

 Line: 841 -    reduceInRelation(className, query, schema) {

 Line: 845 -        const ors = query['$or'];

 Line: 848 -            query['$or'][index] = aQuery;

 Line: 864 -        if (query[key] && (query[key]['$in'] || query[key]['$ne'] || query[key]['$nin'] || query[key].__type == 'Pointer')) {

 Line: 873 -              relatedIds = query[key]['$in'].map(r => r.objectId);

 Line: 876 -              relatedIds = query[key]['$nin'].map(r => r.objectId);

 Line: 894 -        } // remove the current queryKey as we don,t need it anymore

 Line: 897 -        delete query[key]; // execute each query independently to build the list of

 Line: 907 -              this.addNotInObjectIdsIds(ids, query);

 Line: 909 -              this.addInObjectIdsIds(ids, query);

 Line: 922 -    } // Modifies query so that it no longer has $relatedTo

 Line: 923 -    // Returns a promise that resolves when query is mutated

 Line: 926 -    reduceRelationKeys(className, query, queryOptions) {

 Line: 929 -          return this.reduceRelationKeys(className, aQuery, queryOptions);

 Line: 933 -      var relatedTo = query['$relatedTo'];

 Line: 936 -        return this.relatedIds(relatedTo.object.className, relatedTo.key, relatedTo.object.objectId, queryOptions).then(ids => {

 Line: 937 -          delete query['$relatedTo'];

 Line: 938 -          this.addInObjectIdsIds(ids, query);

 Line: 939 -          return this.reduceRelationKeys(className, query, queryOptions);

 Line: 944 -    addInObjectIdsIds(ids = null, query) {

 Line: 945 -      const idsFromString = typeof query.objectId === 'string' ? [query.objectId] : null;

 Line: 946 -      const idsFromEq = query.objectId && query.objectId['$eq'] ? [query.objectId['$eq']] : null;

 Line: 947 -      const idsFromIn = query.objectId && query.objectId['$in'] ? query.objectId['$in'] : null; // -disable-next

 Line: 960 -      if (!('objectId' in query)) {

 Line: 961 -        query.objectId = {

 Line: 964 -      } else if (typeof query.objectId === 'string') {

 Line: 965 -        query.objectId = {

 Line: 967 -          $eq: query.objectId

 Line: 971 -      query.objectId['$in'] = idsIntersection;

 Line: 972 -      return query;

 Line: 975 -    addNotInObjectIdsIds(ids = [], query) {

 Line: 976 -      const idsFromNin = query.objectId && query.objectId['$nin'] ? query.objectId['$nin'] : [];

 Line: 981 -      if (!('objectId' in query)) {

 Line: 982 -        query.objectId = {

 Line: 985 -      } else if (typeof query.objectId === 'string') {

 Line: 986 -        query.objectId = {

 Line: 988 -          $eq: query.objectId

 Line: 992 -      query.objectId['$nin'] = allIds;

 Line: 993 -      return query;

 Line: 994 -    } // Runs a query on the database.

 Line: 1010 -    find(className, query, {

 Line: 1024 -      op = op || (typeof query.objectId == 'string' && Object.keys(query).length === 1 ? 'get' : 'find'); // Count operation if counting

 Line: 1029 -        //Allow volatile classes if querying with Master (for _PushStatus)

 Line: 1057 -          const queryOptions = {

 Line: 1075 -          return (isMaster ? Promise.resolve() : schemaController.validatePermission(className, aclGroup, op)).then(() => this.reduceRelationKeys(className, query, queryOptions)).then(() => this.reduceInRelation(className, query, schemaController)).then(() => {

 Line: 1079 -              query = this.addPointerPermissions(schemaController, className, op, query, aclGroup); // ProtectedFields is generated before executing the query so we

 Line: 1080 -              // can optimize the query using Mongo Projection at a later stage.

 Line: 1082 -              protectedFields = this.addProtectedFields(schemaController, className, query, aclGroup, auth);

 Line: 1095 -                query = addWriteACL(query, aclGroup);

 Line: 1097 -                query = addReadACL(query, aclGroup);

 Line: 1107 -                return this.adapter.count(className, schema, query, readPreference);

 Line: 1113 -                return this.adapter.distinct(className, schema, query, distinct);

 Line: 1122 -              return this.adapter.find(className, schema, query, queryOptions).then(objects => objects.map(object => {

 Line: 1167 -    addPointerPermissions(schema, className, operation, query, aclGroup = []) {

 Line: 1171 -        return query;

 Line: 1201 -              $and: [q, query]

 Line: 1206 -          return Object.assign({}, query, {

 Line: 1219 -        return query;

 Line: 1223 -    addProtectedFields(schema, className, query = {}, aclGroup = [], auth = {}) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Controllers/UserController.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -      const query = {

 Line: 75 -      // add additional query params and additional fields that need to be updated

 Line: 78 -        query.emailVerified = false;

 Line: 79 -        query._email_verify_token_expires_at = {

 Line: 97 -        return _rest.default.update(this.config, masterAuth, '_User', query, updateFields);

 Line: 141 -      var query = new RestQuery(this.config, Auth.master(this.config), '_User', where);

 Line: 142 -      return query.execute().then(function (result) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Controllers/LoggerController.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 60 -      const query = urlObj.query;

 Line: 63 -      for (const key in query) {

 Line: 66 -          sanitizedQuery += key + '=' + query[key] + '&';

 Line: 234 -    // query params:

 Line: 235 -    // level (optional) Level of logging you want to query for (info || error)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Controllers/HooksController.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 99 -      return this.database.find(DefaultHooksCollectionName, query).then(results => {

 Line: 108 -      return this.database.destroy(DefaultHooksCollectionName, query).then(() => {

 Line: 114 -      var query;

 Line: 117 -        query = {

 Line: 121 -        query = {

 Line: 129 -      return this.database.update(DefaultHooksCollectionName, query, hook, {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Controllers/SchemaController.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 188 -      query: {

 Line: 191 -      // the stringified JSON query

 Line: 313 -      query: {

 Line: 316 -      //storing query as JSON string to prevent "Nested keys should not contain the '$' or '.' characters" error

 Line: 1087 -    async validateObject(className, object, query) {

 Line: 1132 -      return thenValidateRequiredColumns(promise, className, object, query);

 Line: 1136 -    validateRequiredColumns(className, object, query) {

 Line: 1144 -        if (query && query.objectId) {

 Line: 1312 -  function thenValidateRequiredColumns(schemaPromise, className, object, query) {

 Line: 1314 -      return schema.validateRequiredColumns(className, object, query);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Auth.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 102 -      const query = new RestQuery(config, master(config), '_Session', {

 Line: 105 -      results = (await query.execute()).results;

 Line: 150 -    var query = new RestQuery(config, master(config), '_User', {

 Line: 153 -    return query.execute().then(response => {

 Line: 264 -    const results = []; // Build an OR query across all parentRoles

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Storage/Postgres/sql/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -  // Helper for linking to external query files;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Storage/Postgres/PostgresConfigParser.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -    const queryParams = parseQueryParams(parsedURI.query);

 Line: 14 -    databaseOptions.ssl = queryParams.ssl && queryParams.ssl.toLowerCase() === 'true' ? true : false;

 Line: 15 -    databaseOptions.binary = queryParams.binary && queryParams.binary.toLowerCase() === 'true' ? true : false;

 Line: 16 -    databaseOptions.client_encoding = queryParams.client_encoding;

 Line: 17 -    databaseOptions.application_name = queryParams.application_name;

 Line: 18 -    databaseOptions.fallback_application_name = queryParams.fallback_application_name;

 Line: 28 -    queryString = queryString || '';

 Line: 29 -    return queryString.split('&').reduce((p, c) => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Storage/Postgres/PostgresStorageAdapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 322 -    query,

 Line: 330 -    for (const fieldName in query) {

 Line: 333 -      const fieldValue = query[fieldName]; // nothingin the schema, it's gonna blow up

 Line: 399 -            query: subQuery,

 Line: 780 -        throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN, `Postgres doesn't support this query type yet ${JSON.stringify(fieldValue)}`);

 Line: 828 -      return this._client.one('SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = $1)', [name], a => a.exists);

 Line: 836 -        yield t.none(`UPDATE "_SCHEMA" SET $2:name = json_object_set_key($2:name, $3::text, $4::jsonb) WHERE "className"=$1`, values);

 Line: 895 -        yield t.none('UPDATE "_SCHEMA" SET $2:name = json_object_set_key($2:name, $3::text, $4::jsonb) WHERE "className"=$1', [className, 'schema', 'indexes', JSON.stringify(existingIndexes)]);

 Line: 903 -        const q2 = t.none('INSERT INTO "_SCHEMA" ("className", "schema", "isParseClass") VALUES ($<className>, $<schema>, true)', {

 Line: 1019 -        const columns = yield t.map('SELECT column_name FROM information_schema.columns WHERE table_name = $<className>', {

 Line: 1064 -        const result = yield t.any('SELECT "schema" FROM "_SCHEMA" WHERE "className" = $<className> and ("schema"::json->\'fields\'->$<fieldName>) is not null', {

 Line: 1073 -          yield t.none('UPDATE "_SCHEMA" SET "schema"=jsonb_set("schema", $<path>, $<type>)  WHERE "className"=$<className>', {

 Line: 1086 -        query: `DROP TABLE IF EXISTS $1:name`,

 Line: 1089 -        query: `DELETE FROM "_SCHEMA" WHERE "className" = $1`,

 Line: 1102 -          const results = yield t.any('SELECT * FROM "_SCHEMA"');

 Line: 1108 -            query: 'DROP TABLE IF EXISTS $<className:name>',

 Line: 1153 -        yield t.none('UPDATE "_SCHEMA" SET "schema"=$<schema> WHERE "className"=$<className>', {

 Line: 1171 -        return yield t.map('SELECT * FROM "_SCHEMA"', null, row => toParseSchema(_objectSpread({

 Line: 1182 -      return this._client.any('SELECT * FROM "_SCHEMA" WHERE "className"=$<className>', {

 Line: 1316 -      const qs = `INSERT INTO $1:name (${columnsPattern}) VALUES (${valuesPattern})`;

 Line: 1346 -    deleteObjectsByQuery(className, schema, query) {

 Line: 1347 -      debug('deleteObjectsByQuery', className, query);

 Line: 1353 -        query

 Line: 1361 -      const qs = `WITH deleted AS (DELETE FROM $1:name WHERE ${where.pattern} RETURNING *) SELECT count(*) FROM deleted`;

 Line: 1378 -    findOneAndUpdate(className, schema, query, update) {

 Line: 1379 -      debug('findOneAndUpdate', className, query, update);

 Line: 1380 -      return this.updateObjectsByQuery(className, schema, query, update).then(val => val[0]);

 Line: 1384 -    updateObjectsByQuery(className, schema, query, update) {

 Line: 1385 -      debug('updateObjectsByQuery', className, query, update);

 Line: 1582 -        query

 Line: 1585 -      const whereClause = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';

 Line: 1586 -      const qs = `UPDATE $1:name SET ${updatePatterns.join()} ${whereClause} RETURNING *`;

 Line: 1592 -    upsertOneObject(className, schema, query, update) {

 Line: 1595 -        query,

 Line: 1598 -      const createValue = Object.assign({}, query, update);

 Line: 1605 -        return this.findOneAndUpdate(className, schema, query, update);

 Line: 1609 -    find(className, schema, query, {

 Line: 1615 -      debug('find', className, query, {

 Line: 1626 -        query,

 Line: 1630 -      const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';

 Line: 1688 -      const qs = `SELECT ${columns} FROM $1:name ${wherePattern} ${sortPattern} ${limitPattern} ${skipPattern}`;

 Line: 1829 -    count(className, schema, query, readPreference, estimate = true) {

 Line: 1830 -      debug('count', className, query, readPreference, estimate);

 Line: 1834 -        query,

 Line: 1838 -      const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';

 Line: 1842 -        qs = `SELECT count(*) FROM $1:name ${wherePattern}`;

 Line: 1844 -        qs = 'SELECT reltuples AS approximate_row_count FROM pg_class WHERE relname = $1';

 Line: 1862 -    distinct(className, schema, query, fieldName) {

 Line: 1863 -      debug('distinct', className, query);

 Line: 1878 -        query,

 Line: 1882 -      const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';

 Line: 1884 -      let qs = `SELECT DISTINCT ${transformer}($1:name) $2:name FROM $3:name ${wherePattern}`;

 Line: 1887 -        qs = `SELECT DISTINCT ${transformer}($1:raw) $2:raw FROM $3:name ${wherePattern}`;

 Line: 1963 -                  columns.push(`EXTRACT(${mongoAggregateToPostgres[operation]} FROM $${index}:name AT TIME ZONE 'UTC') AS $${index + 1}:name`);

 Line: 2065 -          wherePattern = patterns.length > 0 ? `WHERE ${patterns.join(` ${orOrAnd} `)}` : '';

 Line: 2094 -      const qs = `SELECT ${columns.join()} FROM $1:name ${wherePattern} ${sortPattern} ${limitPattern} ${skipPattern} ${groupPattern}`;

 Line: 2157 -        query: 'DROP INDEX $1:name',

 Line: 2164 -      const qs = 'SELECT * FROM pg_indexes WHERE tablename = ${className}';

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Storage/Mongo/MongoSchemaCollection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 164 -  function _mongoSchemaQueryFromNameQuery(name, query) {

 Line: 171 -        object[key] = query[key];

 Line: 242 -    } // Atomically find and delete an object based on query.

 Line: 264 -    upsertSchema(name, query, update) {

 Line: 265 -      return this._collection.upsertOne(_mongoSchemaQueryFromNameQuery(name, query), update);

 Line: 274 -    // TODO: don't spend an extra query on finding the schema if the type we are trying to add isn't a GeoPoint.

 Line: 303 -        // already exists. (it could have added inbetween the last query and the update)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Storage/Mongo/MongoCollection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 104 -      // If query is empty, then use estimatedDocumentCount instead.

 Line: 108 -      if (typeof query !== 'object' || !Object.keys(query).length) {

 Line: 125 -    distinct(field, query) {

 Line: 126 -      return this._mongoCollection.distinct(field, query);

 Line: 141 -    } // Atomically updates data in the database for a single (first) object that matched the query

 Line: 142 -    // If there is nothing that matches the query - does insert

 Line: 143 -    // Postgres Note: `INSERT ... ON CONFLICT UPDATE` that is available since 9.5.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 404 -    deleteObjectsByQuery(className, schema, query) {

 Line: 407 -        const mongoWhere = (0, _MongoTransform.transformWhere)(className, query, schema);

 Line: 423 -    updateObjectsByQuery(className, schema, query, update) {

 Line: 426 -      const mongoWhere = (0, _MongoTransform.transformWhere)(className, query, schema);

 Line: 428 -    } // Atomically finds and updates an object based on query.

 Line: 432 -    findOneAndUpdate(className, schema, query, update) {

 Line: 435 -      const mongoWhere = (0, _MongoTransform.transformWhere)(className, query, schema);

 Line: 448 -    upsertOneObject(className, schema, query, update) {

 Line: 451 -      const mongoWhere = (0, _MongoTransform.transformWhere)(className, query, schema);

 Line: 453 -    } // Executes a find. Accepts: className, query in Parse format, and { skip, limit, sort }.

 Line: 456 -    find(className, schema, query, {

 Line: 464 -      const mongoWhere = (0, _MongoTransform.transformWhere)(className, query, schema);

 Line: 480 -      return this.createTextIndexesIfNeeded(className, query, schema).then(() => this._adaptiveCollection(className)).then(collection => collection.find(mongoWhere, {

 Line: 512 -    _rawFind(className, query) {

 Line: 519 -    count(className, schema, query, readPreference) {

 Line: 522 -      return this._adaptiveCollection(className).then(collection => collection.count((0, _MongoTransform.transformWhere)(className, query, schema, true), {

 Line: 528 -    distinct(className, schema, query, fieldName) {

 Line: 532 -      return this._adaptiveCollection(className).then(collection => collection.distinct(transformField, (0, _MongoTransform.transformWhere)(className, query, schema))).then(objects => {

 Line: 784 -    createTextIndexesIfNeeded(className, query, schema) {

 Line: 785 -      for (const fieldName in query) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Storage/Mongo/MongoTransform.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 411 -    } // Handle query constraints

 Line: 455 -      throw new Parse.Error(Parse.Error.INVALID_JSON, `You cannot use ${value} as a query parameter.`);

 Line: 459 -  // Returns the mongo form of the query.

 Line: 545 -          throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, 'can only query on ' + restKey);

 Line: 936 -  } // Transforms a query constraint from REST API format to Mongo format.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Auth/oauth2.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 60 -  const querystring = require('querystring');

 Line: 116 -    const postData = querystring.stringify({

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Auth/janraincapture.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -  var querystring = require('querystring');

 Line: 30 -    var query_string_data = querystring.stringify({

 Line: 37 -      path: '/entity?' + query_string_data

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Auth/janrainengage.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -  var querystring = require('querystring'); // Returns a promise that fulfills iff this user id is valid.

 Line: 30 -    var post_data = querystring.stringify({

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Auth/weibo.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -  var querystring = require('querystring'); // Returns a promise that fulfills iff this user id is valid.

 Line: 27 -    var postData = querystring.stringify({

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Cache/InMemoryCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 44 -        record.timeout = setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Adapters/Logger/WinstonLoggerAdapter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -    } // custom query as winston is currently limited

 Line: 34 -    query(options, callback = () => {}) {

 Line: 45 -      const queryOptions = {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/StatusHandler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 215 -        query: JSON.stringify(where),

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/rest.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 34 -      const query = new RestQuery(config, auth, className, restWhere, restOptions, clientSDK);

 Line: 35 -      return query.execute();

 Line: 48 -      const query = new RestQuery(config, auth, className, restWhere, restOptions, clientSDK);

 Line: 49 -      return query.execute();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/RestQuery.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 169 -  } // A convenient method to perform all the steps of processing a query

 Line: 210 -      const query = new RestQuery(config, auth, className, restWhere, restOptions, clientSDK);

 Line: 213 -      } = await query.execute();

 Line: 430 -    } // The select value must have precisely two keys - query and key

 Line: 484 -    } // The dontSelect value must have precisely two keys - query and key

 Line: 766 -    const queryPromises = Object.keys(pointersHash).map(className => {

 Line: 782 -      var query = new RestQuery(config, auth, className, where, includeRestOptions);

 Line: 783 -      return query.execute({

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/AccountLockout.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -      const query = {

 Line: 29 -      return this._config.database.update('_User', query, updateFields);

 Line: 37 -      const query = {

 Line: 43 -      return this._config.database.find('_User', query).then(users => {

 Line: 70 -      const query = {

 Line: 79 -      return this._config.database.update('_User', query, updateFields);

 Line: 89 -      const query = {

 Line: 99 -      return this._config.database.update('_User', query, updateFields).catch(err => {

 Line: 116 -      const query = {

 Line: 125 -      return this._config.database.find('_User', query).then(users => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/vendor/mongodbUrl.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -  const querystring = require('querystring');

 Line: 79 -    // Back slashes before the query string get converted to forward slashes

 Line: 181 -            this.query = querystring.parse(this.search.slice(1));

 Line: 400 -        this.query = querystring.parse(this.query);

 Line: 403 -      // no query string, but parseQueryString still requested

 Line: 628 -    var query = '';

 Line: 640 -    if (this.query !== null && typeof this.query === 'object') query = querystring.stringify(this.query);

 Line: 641 -    var search = this.search || query && '?' + query || '';

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Options/Definitions.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 176 -      "help": "Live query server configuration options (will start the liveQuery server)",

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Options/docs.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 34 -   * @property {LiveQueryServerOptions} liveQueryServerOptions Live query server configuration options (will start the liveQuery server)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/PromiseRouter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -    //   Must be one of: POST, GET, PUT, DELETE

 Line: 71 -        case 'DELETE':

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/RestWrite.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 34 -  // query and data are both provided in REST API format. So data

 Line: 36 -  // If query is null, this is a "create" and the data in data should be

 Line: 38 -  // Otherwise this is an "update" - the object matching the query

 Line: 43 -  function RestWrite(config, auth, className, query, data, originalData, clientSDK) {

 Line: 322 -    const query = providers.reduce((memo, provider) => {

 Line: 327 -      const queryKey = `authData.${provider}.id`;

 Line: 328 -      const query = {};

 Line: 329 -      query[queryKey] = authData[provider].id;

 Line: 339 -        $or: query

 Line: 526 -    // TODO: Check if there is a unique index, and if so, skip this query.

 Line: 709 -      // null query means create

 Line: 933 -      }); // Sanity checks when running a query

 Line: 1078 -  // since this might not have a query, meaning it won't return the full result back.

 Line: 1311 -  // Because it could be either on the query or on the data

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/ParseServer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 86 -  //                 and query

 Line: 332 -     * @returns {ParseLiveQueryServer} the live query server instance

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Push/PushQueue.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -          const query = {

 Line: 63 -            query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Push/utils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 123 -   * @param {Object} where A query condition

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Push/PushWorker.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -      query,

 Line: 72 -      delete query.where;

 Line: 74 -      return _rest.default.find(config, auth, '_Installation', where, query).then(({

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/middlewares.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 280 -    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');

</Result>
</report_mosca>

