/src/build/lib/install.js-182-        context$1$0.next = 13;
/src/build/lib/install.js:183:        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.open({
/src/build/lib/install.js-184-          prefix: binarySpec,
##############################################
/src/build/lib/install.js-200-        context$1$0.next = 21;
/src/build/lib/install.js:201:        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tempFile.path, body, { encoding: 'binary' }));
/src/build/lib/install.js-202-
##############################################
/src/build/lib/install.js-241-        context$1$0.next = 42;
/src/build/lib/install.js:242:        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(extractedBin, { encoding: 'binary' }));
/src/build/lib/install.js-243-
##############################################
/src/build/lib/install.js-248-        context$1$0.next = 46;
/src/build/lib/install.js:249:        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(newBin, binContents, { encoding: 'binary', mode: 493 }));
/src/build/lib/install.js-250-
##############################################
/src/build/test/chromedriver-specs.js-132-        try {
/src/build/test/chromedriver-specs.js:133:          body = JSON.parse(body);
/src/build/test/chromedriver-specs.js-134-        } catch (e) {}
##############################################
/src/lib/install.js-77-  if (version === 'LATEST') {
/src/lib/install.js:78:    version = JSON.parse(await request.get({uri: CD_CDN + '/LATEST_RELEASE'}));
/src/lib/install.js-79-  }
##############################################
/src/lib/install.js-88-  log.info(`Opening temp file to write ${binarySpec} to...`);
/src/lib/install.js:89:  let tempFile = await tempDir.open({
/src/lib/install.js-90-    prefix: binarySpec,
##############################################
/src/lib/install.js-97-  log.info(`Writing binary content to ${tempFile.path}...`);
/src/lib/install.js:98:  await fs.writeFile(tempFile.path, body, {encoding: 'binary'});
/src/lib/install.js-99-  await fs.chmod(tempFile.path, 0o0644);
##############################################
/src/lib/install.js-119-  log.info(`Copying unzipped binary, reading from ${extractedBin}...`);
/src/lib/install.js:120:  let binContents = await fs.readFile(extractedBin, {encoding: 'binary'});
/src/lib/install.js-121-  log.info(`Writing to ${newBin}...`);
/src/lib/install.js:122:  await fs.writeFile(newBin, binContents, {encoding: 'binary', mode: 0o755});
/src/lib/install.js-123-  log.info(`${newBin} successfully put in place`);
##############################################
/src/test/chromedriver-specs.js-50-        try {
/src/test/chromedriver-specs.js:51:          body = JSON.parse(body);
/src/test/chromedriver-specs.js-52-        } catch (e) {}
