/src/generators/docker-compose/templates/jhipster-registry.yml.ejs-51-            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID=jhipster-registry
/src/generators/docker-compose/templates/jhipster-registry.yml.ejs:52:            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET=jhipster-registry
/src/generators/docker-compose/templates/jhipster-registry.yml.ejs-53-            <%_ } _%>
##############################################
/src/generators/server/prompts.js-296-        if (this.authenticationType === 'jwt' || this.applicationType === 'microservice') {
/src/generators/server/prompts.js:297:            this.jwtSecretKey = getBase64Secret(null, 64);
/src/generators/server/prompts.js-298-        }
##############################################
/src/generators/server/index.js-201-                }
/src/generators/server/index.js:202:                this.jwtSecretKey = configuration.get('jwtSecretKey');
/src/generators/server/index.js-203-                this.nativeLanguage = configuration.get('nativeLanguage');
##############################################
/src/generators/server/index.js-259-                    // Generate JWT secret key if key does not already exist in config
/src/generators/server/index.js:260:                    if (this.authenticationType === 'jwt' && this.jwtSecretKey === undefined) {
/src/generators/server/index.js:261:                        this.jwtSecretKey = getBase64Secret(null, 64);
/src/generators/server/index.js-262-                    }
##############################################
/src/generators/server/templates/src/test/java/package/web/rest/UserResourceIT.java.ejs-134-
/src/generators/server/templates/src/test/java/package/web/rest/UserResourceIT.java.ejs:135:    private static final String DEFAULT_PASSWORD = "passjohndoe";
/src/generators/server/templates/src/test/java/package/web/rest/UserResourceIT.java.ejs-136-    <%_ if (authenticationType !== 'oauth2') { _%>
/src/generators/server/templates/src/test/java/package/web/rest/UserResourceIT.java.ejs:137:    private static final String UPDATED_PASSWORD = "passjhipster";
/src/generators/server/templates/src/test/java/package/web/rest/UserResourceIT.java.ejs-138-    <%_ } _%>
##############################################
/src/generators/server/templates/src/main/resources/swagger/api.yml.ejs-67-        sessionId:
/src/generators/server/templates/src/main/resources/swagger/api.yml.ejs:68:            type: apiKey
/src/generators/server/templates/src/main/resources/swagger/api.yml.ejs-69-            name: JSESSIONID
##############################################
/src/generators/server/templates/src/main/resources/swagger/api.yml.ejs-71-        csrf:
/src/generators/server/templates/src/main/resources/swagger/api.yml.ejs:72:            type: apiKey
/src/generators/server/templates/src/main/resources/swagger/api.yml.ejs-73-            name: XSRF-TOKEN
##############################################
/src/generators/server/templates/src/main/resources/config/liquibase/data/oauth_client_details.csv.ejs:1:client_id;resource_ids;client_secret;scope;authorized_grant_types;web_server_redirect_uri;authorities;access_token_validity;refresh_token_validity;additional_information;autoapprove
/src/generators/server/templates/src/main/resources/config/liquibase/data/oauth_client_details.csv.ejs-2-<%= baseName %>app;res_<%= baseName %>;bXktc2VjcmV0LXRva2VuLXRvLWNoYW5nZS1pbi1wcm9kdWN0aW9uLWFuZC10by1rZWVwLWluLWEtc2VjdXJlLXBsYWNl;read,write;password,refresh_token,authorization_code,implicit;;ROLE_ADMIN,ROLE_USER;1800;2000;{};true
##############################################
/src/generators/server/templates/src/main/docker/app.yml.ejs-64-            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID=web_app
/src/generators/server/templates/src/main/docker/app.yml.ejs:65:            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET=web_app
/src/generators/server/templates/src/main/docker/app.yml.ejs-66-            <%_ } _%>
##############################################
/src/generators/server/templates/src/main/docker/app.yml.ejs-68-            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID=internal
/src/generators/server/templates/src/main/docker/app.yml.ejs:69:            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET=internal
/src/generators/server/templates/src/main/docker/app.yml.ejs-70-            <%_ } _%>
##############################################
/src/generators/server/templates/src/main/docker/jhipster-registry.yml.ejs-42-            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID=jhipster-registry
/src/generators/server/templates/src/main/docker/jhipster-registry.yml.ejs:43:            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET=jhipster-registry
/src/generators/server/templates/src/main/docker/jhipster-registry.yml.ejs-44-            <%_ } _%>
##############################################
/src/generators/server/templates/src/main/java/package/security/jwt/TokenProvider.java.ejs-63-        byte[] keyBytes;
/src/generators/server/templates/src/main/java/package/security/jwt/TokenProvider.java.ejs:64:        String secret = jHipsterProperties.getSecurity().getAuthentication().getJwt().getSecret();
/src/generators/server/templates/src/main/java/package/security/jwt/TokenProvider.java.ejs-65-        if (!StringUtils.isEmpty(secret)) {
##############################################
/src/generators/server/templates/src/main/java/package/security/oauth2/OAuth2TokenEndpointClientAdapter.java.ejs-109-    protected String getClientSecret() {
/src/generators/server/templates/src/main/java/package/security/oauth2/OAuth2TokenEndpointClientAdapter.java.ejs:110:        String clientSecret = oAuth2Properties.getWebClientConfiguration().getSecret();
/src/generators/server/templates/src/main/java/package/security/oauth2/OAuth2TokenEndpointClientAdapter.java.ejs:111:        if (clientSecret == null) {
/src/generators/server/templates/src/main/java/package/security/oauth2/OAuth2TokenEndpointClientAdapter.java.ejs-112-            throw new InvalidClientException("no client-secret configured in application properties");
##############################################
/src/generators/server/templates/src/main/java/package/security/oauth2/UaaTokenEndpointClient.java.ejs-52-        String clientId = getClientId();
/src/generators/server/templates/src/main/java/package/security/oauth2/UaaTokenEndpointClient.java.ejs:53:        String clientSecret = getClientSecret();
/src/generators/server/templates/src/main/java/package/security/oauth2/UaaTokenEndpointClient.java.ejs-54-        String authorization = clientId + ":" + clientSecret;
##############################################
/src/generators/server/templates/src/main/java/package/config/UaaProperties.java.ejs-83-        private String clientId = "web_app";
/src/generators/server/templates/src/main/java/package/config/UaaProperties.java.ejs:84:        private String secret = "changeit";
/src/generators/server/templates/src/main/java/package/config/UaaProperties.java.ejs-85-
##############################################
/src/generators/server/templates/src/main/java/package/config/UaaProperties.java.ejs-114-        public void setSecret(String secret) {
/src/generators/server/templates/src/main/java/package/config/UaaProperties.java.ejs:115:            this.secret = secret;
/src/generators/server/templates/src/main/java/package/config/UaaProperties.java.ejs-116-        }
##############################################
/src/generators/server/templates/src/main/java/package/config/oauth2/OAuth2Properties.java.ejs-43-        private String clientId = "web_app";
/src/generators/server/templates/src/main/java/package/config/oauth2/OAuth2Properties.java.ejs:44:        private String secret = "changeit";
/src/generators/server/templates/src/main/java/package/config/oauth2/OAuth2Properties.java.ejs-45-        /**
##############################################
/src/generators/server/templates/src/main/java/package/config/oauth2/OAuth2Properties.java.ejs-73-        public void setSecret(String secret) {
/src/generators/server/templates/src/main/java/package/config/oauth2/OAuth2Properties.java.ejs:74:            this.secret = secret;
/src/generators/server/templates/src/main/java/package/config/oauth2/OAuth2Properties.java.ejs-75-        }
##############################################
/src/generators/ci-cd/prompts.js-134-                { name: `Build and publish a ${chalk.yellow('*Docker*')} image`, value: 'publishDocker' },
/src/generators/ci-cd/prompts.js:135:                { name: `Deploy to ${chalk.yellow('*Heroku*')} (requires HEROKU_API_KEY set on CI service)`, value: 'heroku' }
/src/generators/ci-cd/prompts.js-136-            ]
##############################################
/src/generators/ci-cd/prompts.js-146-                { name: `Analyze your code with ${chalk.yellow('*Sonar*')} (requires SONAR_TOKEN set on CI service)`, value: 'sonar' },
/src/generators/ci-cd/prompts.js:147:                { name: `Deploy to ${chalk.yellow('*Heroku*')} (requires HEROKU_API_KEY set on CI service)`, value: 'heroku' }
/src/generators/ci-cd/prompts.js-148-            ]
##############################################
/src/generators/ci-cd/prompts.js-157-                { name: `Analyze your code with ${chalk.yellow('*Sonar*')} (requires SONAR_TOKEN set on CI service)`, value: 'sonar' },
/src/generators/ci-cd/prompts.js:158:                { name: `Deploy to ${chalk.yellow('*Heroku*')} (requires HEROKU_API_KEY set on CI service)`, value: 'heroku' }
/src/generators/ci-cd/prompts.js-159-            ]
##############################################
/src/generators/ci-cd/templates/.gitlab-ci.yml.ejs-133-#    script:
/src/generators/ci-cd/templates/.gitlab-ci.yml.ejs:134:#        - ./gradlew jib -Djib.to.image="$IMAGE_TAG" -Djib.to.auth.username="gitlab-ci-token"  -Djib.to.auth.password="$CI_BUILD_TOKEN"
/src/generators/ci-cd/templates/.gitlab-ci.yml.ejs-135-
##############################################
/src/generators/entity-server/templates/src/test/gatling/user-files/simulations/EntityGatlingTest.scala.ejs-162-        .formParam("scope", "read write")
/src/generators/entity-server/templates/src/test/gatling/user-files/simulations/EntityGatlingTest.scala.ejs:163:        .formParam("client_secret", "bXktc2VjcmV0LXRva2VuLXRvLWNoYW5nZS1pbi1wcm9kdWN0aW9uLWFuZC10by1rZWVwLWluLWEtc2VjdXJlLXBsYWNl")
/src/generators/entity-server/templates/src/test/gatling/user-files/simulations/EntityGatlingTest.scala.ejs-164-        .formParam("client_id", "<%= baseName%>app")
##############################################
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs-98-                    });
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs:99:                    addApiKeyAuthorization();
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs-100-                });
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs-101-
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs:102:                function addApiKeyAuthorization() {
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs-103-                <%_ if (authenticationType === 'session' || authenticationType === 'oauth2' || authenticationType === 'uaa') { _%>
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs:104:                    var apiKeyAuth = new SwaggerClient.ApiKeyAuthorization("X-XSRF-TOKEN", getCSRF(), "header");
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs:105:                    window.swaggerUi.api.clientAuthorizations.add("key", apiKeyAuth);
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs-106-                <%_ } else if (authenticationType === 'jwt') { _%>
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs-107-                    var authToken = JSON.parse(localStorage.getItem("<%=jhiPrefixDashed %>-authenticationtoken") || sessionStorage.getItem("<%=jhiPrefixDashed %>-authenticationtoken"));
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs:108:                    var apiKeyAuth = new SwaggerClient.ApiKeyAuthorization("Authorization", "Bearer " + authToken, "header");
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs:109:                    window.swaggerUi.api.clientAuthorizations.add("bearer", apiKeyAuth);
/src/generators/client/templates/angular/src/main/webapp/swagger-ui/index.html.ejs-110-                <%_ } _%>
##############################################
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-98-                    });
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs:99:                    addApiKeyAuthorization();
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-100-                });
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-101-
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs:102:                function addApiKeyAuthorization() {
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-103-                <%_ if (authenticationType === 'session' || authenticationType === 'uaa') { _%>
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs:104:                    var apiKeyAuth = new SwaggerClient.ApiKeyAuthorization("X-XSRF-TOKEN", getCSRF(), "header");
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs:105:                    window.swaggerUi.api.clientAuthorizations.add("key", apiKeyAuth);
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-106-                <%_ } else if (authenticationType === 'oauth2') { _%>
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-107-                    var authToken = JSON.parse(localStorage.getItem("jhi-authenticationToken")).access_token;
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs:108:                    var apiKeyAuth = new SwaggerClient.ApiKeyAuthorization("Authorization",
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-109-                            "Bearer " + authToken, "header");
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs:110:                    window.swaggerUi.api.clientAuthorizations.add("key", apiKeyAuth);
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-111-                <%_ } else if (authenticationType === 'jwt') { _%>
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-112-                    var authToken = JSON.parse(localStorage.getItem("jhi-authenticationToken") || sessionStorage.getItem("jhi-authenticationToken"));
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs:113:                    var apiKeyAuth = new SwaggerClient.ApiKeyAuthorization("Authorization", "Bearer " + authToken, "header");
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs:114:                    window.swaggerUi.api.clientAuthorizations.add("bearer", apiKeyAuth);
/src/generators/client/templates/react/src/main/webapp/swagger-ui/index.html.ejs-115-                <%_ } _%>
##############################################
/src/generators/docker-base.js-64-function generateJwtSecret() {
/src/generators/docker-base.js:65:    if (this.jwtSecretKey === undefined) {
/src/generators/docker-base.js:66:        this.jwtSecretKey = getBase64Secret();
/src/generators/docker-base.js-67-    }
##############################################
/src/generators/docker-base.js-155-    this.adminPassword = this.config.get('adminPassword');
/src/generators/docker-base.js:156:    this.jwtSecretKey = this.config.get('jwtSecretKey');
/src/generators/docker-base.js-157-
