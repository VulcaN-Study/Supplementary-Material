/src/README.md-110-
/src/README.md:111:You can dynamically generate nonces to allow inline `<script>` tags to be safely evaluated. Here's a simple example:
/src/README.md-112-
##############################################
/src/README.md-142-
/src/README.md:143:* [Google's CSP Evaluator tool](https://csp-evaluator.withgoogle.com/)
/src/README.md-144-* [GitHub's CSP journey](http://githubengineering.com/githubs-csp-journey/)
##############################################
/src/dist/lib/config.js-45-    ],
/src/dist/lib/config.js:46:    mustQuote: ['none', 'self', 'unsafe-inline', 'unsafe-eval', 'strict-dynamic'],
/src/dist/lib/config.js:47:    unsafes: ["'unsafe-inline'", 'unsafe-inline', "'unsafe-eval'", 'unsafe-eval'],
/src/dist/lib/config.js-48-    strictDynamics: ["'strict-dynamic'", 'strict-dynamic'],
##############################################
/src/dist/lib/transform-directives-for-browser.js-15-    });
/src/dist/lib/transform-directives-for-browser.js:16:    // Rename `scriptSrc` values `unsafe-inline` and `unsafe-eval`
/src/dist/lib/transform-directives-for-browser.js-17-    var scriptSrc = directives.scriptSrc;
##############################################
/src/dist/lib/transform-directives-for-browser.js-22-        }
/src/dist/lib/transform-directives-for-browser.js:23:        if (scriptSrc.indexOf("'unsafe-eval'") !== -1) {
/src/dist/lib/transform-directives-for-browser.js:24:            optionsValues.push('eval-script');
/src/dist/lib/transform-directives-for-browser.js-25-        }
