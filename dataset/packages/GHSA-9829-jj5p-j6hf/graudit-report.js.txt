/src/src/interpolation/index.js-10-            with(context) {
/src/src/interpolation/index.js:11:                return eval(source)
/src/src/interpolation/index.js-12-            }
##############################################
/src/src/interpolation/Interpolator.js-21-    this.interpolateString = function(context, value) {
/src/src/interpolation/Interpolator.js:22:        return parser.assemble(context, parser.parse(value))
/src/src/interpolation/Interpolator.js-23-    },
##############################################
/src/src/interpolation/Interpolator.js-57-                with(context) {
/src/src/interpolation/Interpolator.js:58:                    return eval(value.slice(1))
/src/src/interpolation/Interpolator.js-59-                }
##############################################
/src/index.js-116-            with(context) {
/src/index.js:117:                if (eval(workflowDefinition.condition)) {
/src/index.js-118-                    return true;
##############################################
/src/test/interpolator.test.js-9-        var mark = "abc[123]def[/123]hij"
/src/test/interpolator.test.js:10:        var parsed = interpolator.parse(mark) 
/src/test/interpolator.test.js-11-        assert.equal(parsed[0](),"abc")
##############################################
/src/test/interpolator.test.js-16-        var mark = "[123]def[/123]"
/src/test/interpolator.test.js:17:        var parsed = interpolator.parse(mark) 
/src/test/interpolator.test.js-18-        assert.deepEqual(parsed[0].source,{tag:"123", content:"def"})
##############################################
/src/test/interpolator.test.js-84-        var mark = "[hbs]42[/hbs]"
/src/test/interpolator.test.js:85:        var parsed = interpolator.parse(mark) 
/src/test/interpolator.test.js-86-        assert.equal(parsed[0]({a:1}), "42")
##############################################
/src/test/interpolator.test.js-109-        var mark = "[eval]a[f][/eval]"
/src/test/interpolator.test.js:110:        var parsed = interpolator.parse(mark) 
/src/test/interpolator.test.js-111-        assert.equal(parsed[0]({f : 1, a:['x','y','z']}),'y')
##############################################
/src/tasks/sql/pg.js-11-
/src/tasks/sql/pg.js:12:            pg.connect(connection, function(err, client, dbDone) {
/src/tasks/sql/pg.js-13-                if (err) {
##############################################
/src/tasks/sql/pg.js-30-                debug("executing sql command %s ", command, p)
/src/tasks/sql/pg.js:31:                client.query(command, p, handleResult)
/src/tasks/sql/pg.js-32-            });
