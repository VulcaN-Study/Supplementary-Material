[
 {
  "id": 1,
  "file": "/src/php/funchand/call_user_func_array.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "  // improved by: Diplom@t (http://difane.com/)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: Depending on the `cb` that is passed,\n  //      note 1: this function can use `eval` and/or `new Function`.\n  //      note 1: The `eval` input is however checked to only allow valid function names,\n  //      note 1: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 1: already pass any function to be executed here.\n  //   example 1: call_user_func_array('isNaN', ['a'])\n  //   returns 1: true\n  //   example 2: call_user_func_array('isNaN', [1])\n  //   returns 2: false",
  "line": 16,
  "start": 11,
  "end": 22
 },
 {
  "id": 2,
  "file": "/src/php/funchand/call_user_func_array.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "      func = new Function(null, 'return ' + cb)(); // eslint-disable-line no-new-func\n    }\n  } else if (Object.prototype.toString.call(cb) === '[object Array]') {\n    if (typeof cb[0] === 'string') {\n      if (cb[0].match(validJSFunctionNamePattern)) {\n        func = eval(cb[0] + \"['\" + cb[1] + \"']\"); // eslint-disable-line no-eval\n      }\n    } else {\n      func = cb[0][cb[1]];\n    }\n",
  "line": 38,
  "start": 33,
  "end": 44
 },
 {
  "id": 3,
  "file": "/src/php/funchand/call_user_func_array.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "\n    if (typeof cb[0] === 'string') {\n      if (typeof $global[cb[0]] === 'function') {\n        scope = $global[cb[0]];\n      } else if (cb[0].match(validJSFunctionNamePattern)) {\n        scope = eval(cb[0]); // eslint-disable-line no-eval\n      }\n    } else if (_typeof(cb[0]) === 'object') {\n      scope = cb[0];\n    }\n  } else if (typeof cb === 'function') {",
  "line": 48,
  "start": 43,
  "end": 54
 },
 {
  "id": 4,
  "file": "/src/php/funchand/call_user_func.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "  // improved by: Diplom@t (http://difane.com/)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: Depends on call_user_func_array which in turn depends on the `cb` that is passed,\n  //      note 1: this function can use `eval`.\n  //      note 1: The `eval` input is however checked to only allow valid function names,\n  //      note 1: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 1: already pass any function to be executed here.\n  //   example 1: call_user_func('isNaN', 'a')\n  //   returns 1: true\n\n  var callUserFuncArray = require('../funchand/call_user_func_array');",
  "line": 12,
  "start": 7,
  "end": 18
 },
 {
  "id": 5,
  "file": "/src/php/json/json_decode.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "  if (m) {\n    // In the third stage we use the eval function to compile the text into a\n    // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n    // in JavaScript: it can begin a block or an object literal. We wrap the text\n    // in parens to eliminate the ambiguity.\n    j = eval('(' + text + ')'); // eslint-disable-line no-eval\n    return j;\n  }\n\n  // usable by json_last_error()\n  $locutus.php.last_error_json = 4;",
  "line": 80,
  "start": 75,
  "end": 86
 },
 {
  "id": 6,
  "file": "/src/php/var/is_callable.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "  //      note 1: a global variable and set that instead.\n  //      note 1: When used on an object, depends on a constructor property\n  //      note 1: being kept on the object prototype\n  //      note 2: Depending on the `callableName` that is passed, this function can use eval.\n  //      note 2: The eval input is however checked to only allow valid function names,\n  //      note 2: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 2: already pass any function to be executed here.\n  //   example 1: is_callable('is_callable')\n  //   returns 1: true\n  //   example 2: is_callable('bogusFunction', true)\n  //   returns 2: true // gives true because does not do strict checking",
  "line": 21,
  "start": 16,
  "end": 27
 },
 {
  "id": 7,
  "file": "/src/php/var/is_callable.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "    }\n    return true;\n  }\n\n  // validFunctionName avoids exploits\n  if (validFunctionName && typeof eval(method) === 'function') {\n    // eslint-disable-line no-eval\n    if (callableName) {\n      $global[callableName] = name;\n    }\n    return true;",
  "line": 81,
  "start": 76,
  "end": 87
 }
]
