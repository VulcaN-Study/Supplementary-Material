/src/php/var/is_callable.js.map:1:{"version":3,"sources":["../../../src/php/var/is_callable.js"],"names":["module","exports","is_callable","mixedVar","syntaxOnly","callableName","$global","window","global","validJSFunctionNamePattern","name","obj","method","validFunctionName","getFuncName","fn","exec","test","toString","match","Object","prototype","call","length","constructor","eval"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAsBC,QAAtB,EAAgCC,UAAhC,EAA4CC,YAA5C,EAA0D;AAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAW,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAAxD;;AAEA,MAAIC,6BAA6B,kDAAjC;;AAEA,MAAIC,OAAO,EAAX;AACA,MAAIC,MAAM,EAAV;AACA,MAAIC,SAAS,EAAb;AACA,MAAIC,oBAAoB,KAAxB;;AAEA,MAAIC,cAAc,SAAdA,WAAc,CAAUC,EAAV,EAAc;AAC9B,QAAIL,OAAQ,6BAAD,CAAgCM,IAAhC,CAAqCD,EAArC,CAAX;AACA,QAAI,CAACL,IAAL,EAAW;AACT,aAAO,aAAP;AACD;AACD,WAAOA,KAAK,CAAL,CAAP;AACD,GAND;;AAQA;AACA,MAAI,oBAAoBO,IAApB,CAAyBd,SAASe,QAAT,EAAzB,CAAJ,EAAmD;AACjD,WAAO,KAAP;AACD;;AAED,MAAI,OAAOf,QAAP,KAAoB,QAAxB,EAAkC;AAChCQ,UAAML,OAAN;AACAM,aAAST,QAAT;AACAO,WAAOP,QAAP;AACAU,wBAAoB,CAAC,CAACH,KAAKS,KAAL,CAAWV,0BAAX,CAAtB;AACD,GALD,MAKO,IAAI,OAAON,QAAP,KAAoB,UAAxB,EAAoC;AACzC,WAAO,IAAP;AACD,GAFM,MAEA,IAAIiB,OAAOC,SAAP,CAAiBH,QAAjB,CAA0BI,IAA1B,CAA+BnB,QAA/B,MAA6C,gBAA7C,IACTA,SAASoB,MAAT,KAAoB,CADX,IAET,QAAOpB,SAAS,CAAT,CAAP,MAAuB,QAFd,IAGT,OAAOA,SAAS,CAAT,CAAP,KAAuB,QAHlB,EAG4B;AACjCQ,UAAMR,SAAS,CAAT,CAAN;AACAS,aAAST,SAAS,CAAT,CAAT;AACAO,WAAO,CAACC,IAAIa,WAAJ,IAAmBV,YAAYH,IAAIa,WAAhB,CAApB,IAAoD,IAApD,GAA2DZ,MAAlE;AACD;;AAED,MAAIR,cAAc,OAAOO,IAAIC,MAAJ,CAAP,KAAuB,UAAzC,EAAqD;AACnD,QAAIP,YAAJ,EAAkB;AAChBC,cAAQD,YAAR,IAAwBK,IAAxB;AACD;AACD,WAAO,IAAP;AACD;;AAED;AACA,MAAIG,qBAAqB,OAAOY,KAAKb,MAAL,CAAP,KAAwB,UAAjD,EAA6D;AAAE;AAC7D,QAAIP,YAAJ,EAAkB;AAChBC,cAAQD,YAAR,IAAwBK,IAAxB;AACD;AACD,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CAtFD","file":"is_callable.js","sourcesContent":["module.exports = function is_callable (mixedVar, syntaxOnly, callableName) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/is_callable/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  //    input by: Fran√ßois\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: KnightYoshi\n  // improved by: Waldo Malqui Silva (https://fayr.us/waldo/)\n  //      note 1: The variable callableName cannot work as a string variable passed by\n  //      note 1: reference as in PHP (since JavaScript does not support passing\n  //      note 1: strings by reference), but instead will take the name of\n  //      note 1: a global variable and set that instead.\n  //      note 1: When used on an object, depends on a constructor property\n  //      note 1: being kept on the object prototype\n  //      note 2: Depending on the `callableName` that is passed, this function can use eval.\n  //      note 2: The eval input is however checked to only allow valid function names,\n  //      note 2: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 2: already pass any function to be executed here.\n  //   example 1: is_callable('is_callable')\n  //   returns 1: true\n  //   example 2: is_callable('bogusFunction', true)\n  //   returns 2: true // gives true because does not do strict checking\n  //   example 3: function SomeClass () {}\n  //   example 3: SomeClass.prototype.someMethod = function (){}\n  //   example 3: var testObj = new SomeClass()\n  //   example 3: is_callable([testObj, 'someMethod'], true, 'myVar')\n  //   example 3: var $result = myVar\n  //   returns 3: 'SomeClass::someMethod'\n  //   example 4: is_callable(function () {})\n  //   returns 4: true\n  //   example 5: is_callable(class MyClass {})\n  //   returns 5: false\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n\n  var validJSFunctionNamePattern = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/\n\n  var name = ''\n  var obj = {}\n  var method = ''\n  var validFunctionName = false\n\n  var getFuncName = function (fn) {\n    var name = (/\\W*function\\s+([\\w$]+)\\s*\\(/).exec(fn)\n    if (!name) {\n      return '(Anonymous)'\n    }\n    return name[1]\n  }\n\n  // eslint-disable-next-line no-useless-escape\n  if (/(^class|\\(this\\,)/.test(mixedVar.toString())) {\n    return false\n  }\n\n  if (typeof mixedVar === 'string') {\n    obj = $global\n    method = mixedVar\n    name = mixedVar\n    validFunctionName = !!name.match(validJSFunctionNamePattern)\n  } else if (typeof mixedVar === 'function') {\n    return true\n  } else if (Object.prototype.toString.call(mixedVar) === '[object Array]' &&\n    mixedVar.length === 2 &&\n    typeof mixedVar[0] === 'object' &&\n    typeof mixedVar[1] === 'string') {\n    obj = mixedVar[0]\n    method = mixedVar[1]\n    name = (obj.constructor && getFuncName(obj.constructor)) + '::' + method\n  }\n\n  if (syntaxOnly || typeof obj[method] === 'function') {\n    if (callableName) {\n      $global[callableName] = name\n    }\n    return true\n  }\n\n  // validFunctionName avoids exploits\n  if (validFunctionName && typeof eval(method) === 'function') { // eslint-disable-line no-eval\n    if (callableName) {\n      $global[callableName] = name\n    }\n    return true\n  }\n\n  return false\n}\n"]}
##############################################
/src/php/var/is_callable.js-20-  //      note 2: The eval input is however checked to only allow valid function names,
/src/php/var/is_callable.js:21:  //      note 2: So it should not be unsafer than uses without eval (seeing as you can)
/src/php/var/is_callable.js-22-  //      note 2: already pass any function to be executed here.
##############################################
/src/php/var/is_callable.js-80-  // validFunctionName avoids exploits
/src/php/var/is_callable.js:81:  if (validFunctionName && typeof eval(method) === 'function') {
/src/php/var/is_callable.js-82-    // eslint-disable-line no-eval
##############################################
/src/php/var/doubleval.js.map:1:{"version":3,"sources":["../../../src/php/var/doubleval.js"],"names":["module","exports","doubleval","mixedVar","floatval","require"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,SAAT,CAAoBC,QAApB,EAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,WAAWC,QAAQ,iBAAR,CAAf;;AAEA,SAAOD,SAASD,QAAT,CAAP;AACD,CAXD","file":"doubleval.js","sourcesContent":["module.exports = function doubleval (mixedVar) {\n  //  discuss at: http://locutus.io/php/doubleval/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes\n  //      note 1: it different from the PHP implementation. We can't fix this unfortunately.\n  //   example 1: doubleval(186)\n  //   returns 1: 186.00\n\n  var floatval = require('../var/floatval')\n\n  return floatval(mixedVar)\n}\n"]}
##############################################
/src/php/var/doubleval.js-2-
/src/php/var/doubleval.js:3:module.exports = function doubleval(mixedVar) {
/src/php/var/doubleval.js-4-  //  discuss at: http://locutus.io/php/doubleval/
##############################################
/src/php/var/doubleval.js-7-  //      note 1: it different from the PHP implementation. We can't fix this unfortunately.
/src/php/var/doubleval.js:8:  //   example 1: doubleval(186)
/src/php/var/doubleval.js-9-  //   returns 1: 186.00
##############################################
/src/php/funchand/call_user_func.js-11-  //      note 1: The `eval` input is however checked to only allow valid function names,
/src/php/funchand/call_user_func.js:12:  //      note 1: So it should not be unsafer than uses without eval (seeing as you can)
/src/php/funchand/call_user_func.js-13-  //      note 1: already pass any function to be executed here.
##############################################
/src/php/funchand/call_user_func_array.js-15-  //      note 1: The `eval` input is however checked to only allow valid function names,
/src/php/funchand/call_user_func_array.js:16:  //      note 1: So it should not be unsafer than uses without eval (seeing as you can)
/src/php/funchand/call_user_func_array.js-17-  //      note 1: already pass any function to be executed here.
##############################################
/src/php/funchand/call_user_func_array.js-37-      if (cb[0].match(validJSFunctionNamePattern)) {
/src/php/funchand/call_user_func_array.js:38:        func = eval(cb[0] + "['" + cb[1] + "']"); // eslint-disable-line no-eval
/src/php/funchand/call_user_func_array.js-39-      }
##############################################
/src/php/funchand/call_user_func_array.js-47-      } else if (cb[0].match(validJSFunctionNamePattern)) {
/src/php/funchand/call_user_func_array.js:48:        scope = eval(cb[0]); // eslint-disable-line no-eval
/src/php/funchand/call_user_func_array.js-49-      }
##############################################
/src/php/funchand/call_user_func.js.map:1:{"version":3,"sources":["../../../src/php/funchand/call_user_func.js"],"names":["module","exports","call_user_func","cb","parameters","callUserFuncArray","require","Array","prototype","slice","call","arguments"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,cAAT,CAAyBC,EAAzB,EAA6BC,UAA7B,EAAyC;AAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,oBAAoBC,QAAQ,kCAAR,CAAxB;AACAF,eAAaG,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAb;AACA,SAAON,kBAAkBF,EAAlB,EAAsBC,UAAtB,CAAP;AACD,CAhBD","file":"call_user_func.js","sourcesContent":["module.exports = function call_user_func (cb, parameters) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/call_user_func/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Diplom@t (http://difane.com/)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: Depends on call_user_func_array which in turn depends on the `cb` that is passed,\n  //      note 1: this function can use `eval`.\n  //      note 1: The `eval` input is however checked to only allow valid function names,\n  //      note 1: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 1: already pass any function to be executed here.\n  //   example 1: call_user_func('isNaN', 'a')\n  //   returns 1: true\n\n  var callUserFuncArray = require('../funchand/call_user_func_array')\n  parameters = Array.prototype.slice.call(arguments, 1)\n  return callUserFuncArray(cb, parameters)\n}\n"]}
##############################################
/src/php/funchand/call_user_func_array.js.map:1:{"version":3,"sources":["../../../src/php/funchand/call_user_func_array.js"],"names":["module","exports","call_user_func_array","cb","parameters","$global","window","global","func","scope","validJSFunctionNamePattern","match","Function","Object","prototype","toString","call","eval","Error","apply"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,oBAAT,CAA+BC,EAA/B,EAAmCC,UAAnC,EAA+C;AAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAW,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAAxD;AACA,MAAIC,IAAJ;AACA,MAAIC,QAAQ,IAAZ;;AAEA,MAAIC,6BAA6B,kDAAjC;;AAEA,MAAI,OAAOP,EAAP,KAAc,QAAlB,EAA4B;AAC1B,QAAI,OAAOE,QAAQF,EAAR,CAAP,KAAuB,UAA3B,EAAuC;AACrCK,aAAOH,QAAQF,EAAR,CAAP;AACD,KAFD,MAEO,IAAIA,GAAGQ,KAAH,CAASD,0BAAT,CAAJ,EAA0C;AAC/CF,aAAQ,IAAII,QAAJ,CAAa,IAAb,EAAmB,YAAYT,EAA/B,GAAR,CAD+C,CACD;AAC/C;AACF,GAND,MAMO,IAAIU,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+Bb,EAA/B,MAAuC,gBAA3C,EAA6D;AAClE,QAAI,OAAOA,GAAG,CAAH,CAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAIA,GAAG,CAAH,EAAMQ,KAAN,CAAYD,0BAAZ,CAAJ,EAA6C;AAC3CF,eAAOS,KAAKd,GAAG,CAAH,IAAQ,IAAR,GAAeA,GAAG,CAAH,CAAf,GAAuB,IAA5B,CAAP,CAD2C,CACF;AAC1C;AACF,KAJD,MAIO;AACLK,aAAOL,GAAG,CAAH,EAAMA,GAAG,CAAH,CAAN,CAAP;AACD;;AAED,QAAI,OAAOA,GAAG,CAAH,CAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAI,OAAOE,QAAQF,GAAG,CAAH,CAAR,CAAP,KAA0B,UAA9B,EAA0C;AACxCM,gBAAQJ,QAAQF,GAAG,CAAH,CAAR,CAAR;AACD,OAFD,MAEO,IAAIA,GAAG,CAAH,EAAMQ,KAAN,CAAYD,0BAAZ,CAAJ,EAA6C;AAClDD,gBAAQQ,KAAKd,GAAG,CAAH,CAAL,CAAR,CADkD,CAC9B;AACrB;AACF,KAND,MAMO,IAAI,QAAOA,GAAG,CAAH,CAAP,MAAiB,QAArB,EAA+B;AACpCM,cAAQN,GAAG,CAAH,CAAR;AACD;AACF,GAlBM,MAkBA,IAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AACnCK,WAAOL,EAAP;AACD;;AAED,MAAI,OAAOK,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAIU,KAAJ,CAAUV,OAAO,0BAAjB,CAAN;AACD;;AAED,SAAOA,KAAKW,KAAL,CAAWV,KAAX,EAAkBL,UAAlB,CAAP;AACD,CAxDD","file":"call_user_func_array.js","sourcesContent":["module.exports = function call_user_func_array (cb, parameters) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/call_user_func_array/\n  // original by: Thiago Mata (http://thiagomata.blog.com)\n  //  revised by: Jon Hohle\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Diplom@t (http://difane.com/)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: Depending on the `cb` that is passed,\n  //      note 1: this function can use `eval` and/or `new Function`.\n  //      note 1: The `eval` input is however checked to only allow valid function names,\n  //      note 1: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 1: already pass any function to be executed here.\n  //   example 1: call_user_func_array('isNaN', ['a'])\n  //   returns 1: true\n  //   example 2: call_user_func_array('isNaN', [1])\n  //   returns 2: false\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n  var func\n  var scope = null\n\n  var validJSFunctionNamePattern = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/\n\n  if (typeof cb === 'string') {\n    if (typeof $global[cb] === 'function') {\n      func = $global[cb]\n    } else if (cb.match(validJSFunctionNamePattern)) {\n      func = (new Function(null, 'return ' + cb)()) // eslint-disable-line no-new-func\n    }\n  } else if (Object.prototype.toString.call(cb) === '[object Array]') {\n    if (typeof cb[0] === 'string') {\n      if (cb[0].match(validJSFunctionNamePattern)) {\n        func = eval(cb[0] + \"['\" + cb[1] + \"']\") // eslint-disable-line no-eval\n      }\n    } else {\n      func = cb[0][cb[1]]\n    }\n\n    if (typeof cb[0] === 'string') {\n      if (typeof $global[cb[0]] === 'function') {\n        scope = $global[cb[0]]\n      } else if (cb[0].match(validJSFunctionNamePattern)) {\n        scope = eval(cb[0]) // eslint-disable-line no-eval\n      }\n    } else if (typeof cb[0] === 'object') {\n      scope = cb[0]\n    }\n  } else if (typeof cb === 'function') {\n    func = cb\n  }\n\n  if (typeof func !== 'function') {\n    throw new Error(func + ' is not a valid function')\n  }\n\n  return func.apply(scope, parameters)\n}\n"]}
##############################################
/src/php/json/json_decode.js.map:1:{"version":3,"sources":["../../../src/php/json/json_decode.js"],"names":["module","exports","json_decode","strJson","$global","window","global","$locutus","php","json","JSON","parse","err","SyntaxError","Error","last_error_json","chars","join","cx","RegExp","j","text","lastIndex","test","replace","a","charCodeAt","toString","slice","m","eval"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAsBC,OAAtB,EAA+B;AAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA,MAAIC,UAAW,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAAxD;AACAF,UAAQG,QAAR,GAAmBH,QAAQG,QAAR,IAAoB,EAAvC;AACA,MAAIA,WAAWH,QAAQG,QAAvB;AACAA,WAASC,GAAT,GAAeD,SAASC,GAAT,IAAgB,EAA/B;;AAEA,MAAIC,OAAOL,QAAQM,IAAnB;AACA,MAAI,QAAOD,IAAP,yCAAOA,IAAP,OAAgB,QAAhB,IAA4B,OAAOA,KAAKE,KAAZ,KAAsB,UAAtD,EAAkE;AAChE,QAAI;AACF,aAAOF,KAAKE,KAAL,CAAWR,OAAX,CAAP;AACD,KAFD,CAEE,OAAOS,GAAP,EAAY;AACZ,UAAI,EAAEA,eAAeC,WAAjB,CAAJ,EAAmC;AACjC,cAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED;AACAP,eAASC,GAAT,CAAaO,eAAb,GAA+B,CAA/B;AACA,aAAO,IAAP;AACD;AACF;;AAED,MAAIC,QAAQ,CACV,IADU,EAEV,MAFU,EAGV,eAHU,EAIV,QAJU,EAKV,QALU,EAMV,QANU,EAOV,eAPU,EAQV,eARU,EASV,eATU,EAUV,QAVU,EAWV,eAXU,EAYVC,IAZU,CAYL,EAZK,CAAZ;AAaA,MAAIC,KAAK,IAAIC,MAAJ,CAAW,MAAMH,KAAN,GAAc,GAAzB,EAA8B,GAA9B,CAAT;AACA,MAAII,CAAJ;AACA,MAAIC,OAAOlB,OAAX;;AAEA;AACA;AACA;AACAe,KAAGI,SAAH,GAAe,CAAf;AACA,MAAIJ,GAAGK,IAAH,CAAQF,IAAR,CAAJ,EAAmB;AACjBA,WAAOA,KAAKG,OAAL,CAAaN,EAAb,EAAiB,UAAUO,CAAV,EAAa;AACnC,aAAO,QAAQ,CAAC,SAASA,EAAEC,UAAF,CAAa,CAAb,EACtBC,QADsB,CACb,EADa,CAAV,EAEZC,KAFY,CAEN,CAAC,CAFK,CAAf;AAGD,KAJM,CAAP;AAKD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,IAAK,eAAD,CACLN,IADK,CACAF,KAAKG,OAAL,CAAa,oCAAb,EAAmD,GAAnD,EACLA,OADK,CACG,iEADH,EACsE,GADtE,EAELA,OAFK,CAEG,sBAFH,EAE2B,EAF3B,CADA,CAAR;;AAKA,MAAIK,CAAJ,EAAO;AACL;AACA;AACA;AACA;AACAT,QAAIU,KAAK,MAAMT,IAAN,GAAa,GAAlB,CAAJ,CALK,CAKsB;AAC3B,WAAOD,CAAP;AACD;;AAED;AACAb,WAASC,GAAT,CAAaO,eAAb,GAA+B,CAA/B;AACA,SAAO,IAAP;AACD,CAlGD","file":"json_decode.js","sourcesContent":["module.exports = function json_decode (strJson) { // eslint-disable-line camelcase\n  //       discuss at: http://phpjs.org/functions/json_decode/\n  //      original by: Public Domain (http://www.json.org/json2.js)\n  // reimplemented by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  //      improved by: T.J. Leahy\n  //      improved by: Michael White\n  //           note 1: If node or the browser does not offer JSON.parse,\n  //           note 1: this function falls backslash\n  //           note 1: to its own implementation using eval, and hence should be considered unsafe\n  //        example 1: json_decode('[ 1 ]')\n  //        returns 1: [1]\n\n  /*\n    http://www.JSON.org/json2.js\n    2008-11-19\n    Public Domain.\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n    See http://www.JSON.org/js.html\n  */\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n  $global.$locutus = $global.$locutus || {}\n  var $locutus = $global.$locutus\n  $locutus.php = $locutus.php || {}\n\n  var json = $global.JSON\n  if (typeof json === 'object' && typeof json.parse === 'function') {\n    try {\n      return json.parse(strJson)\n    } catch (err) {\n      if (!(err instanceof SyntaxError)) {\n        throw new Error('Unexpected error type in json_decode()')\n      }\n\n      // usable by json_last_error()\n      $locutus.php.last_error_json = 4\n      return null\n    }\n  }\n\n  var chars = [\n    '\\u0000',\n    '\\u00ad',\n    '\\u0600-\\u0604',\n    '\\u070f',\n    '\\u17b4',\n    '\\u17b5',\n    '\\u200c-\\u200f',\n    '\\u2028-\\u202f',\n    '\\u2060-\\u206f',\n    '\\ufeff',\n    '\\ufff0-\\uffff'\n  ].join('')\n  var cx = new RegExp('[' + chars + ']', 'g')\n  var j\n  var text = strJson\n\n  // Parsing happens in four stages. In the first stage, we replace certain\n  // Unicode characters with escape sequences. JavaScript handles many characters\n  // incorrectly, either silently deleting them, or treating them as line endings.\n  cx.lastIndex = 0\n  if (cx.test(text)) {\n    text = text.replace(cx, function (a) {\n      return '\\\\u' + ('0000' + a.charCodeAt(0)\n        .toString(16))\n        .slice(-4)\n    })\n  }\n\n  // In the second stage, we run the text against regular expressions that look\n  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n  // because they can cause invocation, and '=' because it can cause mutation.\n  // But just to be safe, we want to reject all unexpected forms.\n  // We split the second stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n  var m = (/^[\\],:{}\\s]*$/)\n    .test(text.replace(/\\\\(?:[\"\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n    .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?/g, ']')\n    .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))\n\n  if (m) {\n    // In the third stage we use the eval function to compile the text into a\n    // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n    // in JavaScript: it can begin a block or an object literal. We wrap the text\n    // in parens to eliminate the ambiguity.\n    j = eval('(' + text + ')') // eslint-disable-line no-eval\n    return j\n  }\n\n  // usable by json_last_error()\n  $locutus.php.last_error_json = 4\n  return null\n}\n"]}
##############################################
/src/php/json/json_decode.js-79-    // in parens to eliminate the ambiguity.
/src/php/json/json_decode.js:80:    j = eval('(' + text + ')'); // eslint-disable-line no-eval
/src/php/json/json_decode.js-81-    return j;
