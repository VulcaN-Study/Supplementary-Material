|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 96	function fork(modulePath, argsOrOptions, options) {
    var basedir = path.dirname(caller_1.caller());
    var args = getArgs(argsOrOptions) || [];
    options = getOptions(argsOrOptions, options);
    if (/^\.{0,2}\//.test(modulePath)) {
        var filePath = path.resolve(basedir, modulePath);
        return spawn(process.execPath, [filePath].concat(args), options);
    }
    var promise = resolve_promise_1.resolve(modulePath, { basedir: basedir })
        .then(function (filePath) { return spawn(process.execPath, [filePath].concat(args), options); });
    return promise;
}
$FilePath$/src/lib/process-promises.js
Line 102	        return spawn(process.execPath, [filePath].concat(args), options);
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 30	  sink_hqbpillvul_spawn(command);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 96	function fork(modulePath, argsOrOptions, options) {
    var basedir = path.dirname(caller_1.caller());
    var args = getArgs(argsOrOptions) || [];
    options = getOptions(argsOrOptions, options);
    if (/^\.{0,2}\//.test(modulePath)) {
        var filePath = path.resolve(basedir, modulePath);
        return spawn(process.execPath, [filePath].concat(args), options);
    }
    var promise = resolve_promise_1.resolve(modulePath, { basedir: basedir })
        .then(function (filePath) { return spawn(process.execPath, [filePath].concat(args), options); });
    return promise;
}
$FilePath$/src/lib/process-promises.js
Line 102	        return spawn(process.execPath, [filePath].concat(args), options);
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 30	  sink_hqbpillvul_spawn(command);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 96	function fork(modulePath, argsOrOptions, options) {
    var basedir = path.dirname(caller_1.caller());
    var args = getArgs(argsOrOptions) || [];
    options = getOptions(argsOrOptions, options);
    if (/^\.{0,2}\//.test(modulePath)) {
        var filePath = path.resolve(basedir, modulePath);
        return spawn(process.execPath, [filePath].concat(args), options);
    }
    var promise = resolve_promise_1.resolve(modulePath, { basedir: basedir })
        .then(function (filePath) { return spawn(process.execPath, [filePath].concat(args), options); });
    return promise;
}
$FilePath$/src/lib/process-promises.js
Line 102	        return spawn(process.execPath, [filePath].concat(args), options);
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 30	  sink_hqbpillvul_spawn(command);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 43	function exec(command, options) {
    return new PromiseWithEvents_1.PromiseWithEvents(function (resolve, reject, eventEmitter) {
        var childProcess = cp.exec(command, options, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve({
                    stdout: stdout.toString(),
                    stderr: stderr.toString()
                });
            }
        });
        process.nextTick(function () { return eventEmitter.emit('process', childProcess); });
    });
}
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 43	function exec(command, options) {
    return new PromiseWithEvents_1.PromiseWithEvents(function (resolve, reject, eventEmitter) {
        var childProcess = cp.exec(command, options, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve({
                    stdout: stdout.toString(),
                    stderr: stderr.toString()
                });
            }
        });
        process.nextTick(function () { return eventEmitter.emit('process', childProcess); });
    });
}
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 43	function exec(command, options) {
    return new PromiseWithEvents_1.PromiseWithEvents(function (resolve, reject, eventEmitter) {
        var childProcess = cp.exec(command, options, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve({
                    stdout: stdout.toString(),
                    stderr: stderr.toString()
                });
            }
        });
        process.nextTick(function () { return eventEmitter.emit('process', childProcess); });
    });
}
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 43	function exec(command, options) {
    return new PromiseWithEvents_1.PromiseWithEvents(function (resolve, reject, eventEmitter) {
        var childProcess = cp.exec(command, options, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve({
                    stdout: stdout.toString(),
                    stderr: stderr.toString()
                });
            }
        });
        process.nextTick(function () { return eventEmitter.emit('process', childProcess); });
    });
}
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$0$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 43	function exec(command, options) {
    return new PromiseWithEvents_1.PromiseWithEvents(function (resolve, reject, eventEmitter) {
        var childProcess = cp.exec(command, options, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve({
                    stdout: stdout.toString(),
                    stderr: stderr.toString()
                });
            }
        });
        process.nextTick(function () { return eventEmitter.emit('process', childProcess); });
    });
}
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

|checker| success id$1$color:green$: 
==========================
$FilePath$/src/lib/process-promises.js
Line 43	function exec(command, options) {
    return new PromiseWithEvents_1.PromiseWithEvents(function (resolve, reject, eventEmitter) {
        var childProcess = cp.exec(command, options, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve({
                    stdout: stdout.toString(),
                    stderr: stderr.toString()
                });
            }
        });
        process.nextTick(function () { return eventEmitter.emit('process', childProcess); });
    });
}
$FilePath$/app/ODGen/builtin_packages/child_process.js
Line 6	  sink_hqbpillvul_exec(sink);

