/src/cold.js-94-	/* WEBPACK VAR INJECTION */(function(process) {if (process.env.COLOR_MODEL_COVERAGE) {
/src/cold.js:95:	  eval('module.exports = require("./.coverage/lib");');
/src/cold.js-96-	} else {
##############################################
/src/cold.js-325-
/src/cold.js:326:	var _r = __webpack_require__(5); eval('var Component = _r');
/src/cold.js-327-
##############################################
/src/cold.js-423-
/src/cold.js:424:	var _r = __webpack_require__(5); eval('var Component = _r');
/src/cold.js:425:	var _r = __webpack_require__(8);       eval('var Rgb       = _r');
/src/cold.js:426:	var _r = __webpack_require__(14);       eval('var Lab       = _r');
/src/cold.js-427-
##############################################
/src/cold.js-546-
/src/cold.js:547:	var _r = __webpack_require__(5); eval('var Component = _r');
/src/cold.js:548:	var _r = __webpack_require__(7);       eval('var Xyz       = _r');
/src/cold.js:549:	var _r = __webpack_require__(9);       eval('var Hsl       = _r');
/src/cold.js-550-
##############################################
/src/cold.js-706-
/src/cold.js:707:	var _r = __webpack_require__(5); eval('var Component = _r');
/src/cold.js:708:	var _r = __webpack_require__(8);       eval('var Rgb       = _r');
/src/cold.js-709-
##############################################
/src/cold.js-1453-
/src/cold.js:1454:	var _r = __webpack_require__(8); eval('var Rgb = _r');
/src/cold.js-1455-
##############################################
/src/cold.js-1528-
/src/cold.js:1529:	var _r = __webpack_require__(5); eval('var Component = _r');
/src/cold.js-1530-
##############################################
/src/generate.js-56-			if(process.argv[2] === 'save'){
/src/generate.js:57:				fs.writeFile('./test/images/'+name+'.nfo', ascii, function(err){
/src/generate.js-58-					count++;
##############################################
/src/generate.js-73-		if(process.argv[2] === 'save'){
/src/generate.js:74:			fs.writeFile('./test/images/mixed.nfo', rendered);
/src/generate.js-75-			count++;
##############################################
/src/figlet.js-71-            var fileName = this.fontPath + name+ '.flf';
/src/figlet.js:72:            fs.readFile(fileName, 'utf8', function(error, data) {
/src/figlet.js-73-                if(error) throw(error);
##############################################
/src/figlet.js-76-        },
/src/figlet.js:77:        preloadDirectory : function(path, callback){
/src/figlet.js-78-            //todo
##############################################
/src/bin/ascii-art-61-			if(argv.o){
/src/bin/ascii-art:62:				fs.writeFile(argv.o, rendered);
/src/bin/ascii-art-63-			}else{
##############################################
/src/bin/ascii-art-227-                    var dir = argv.g?process.cwd()+'/Fonts/':__dirname+'/../Fonts/';
/src/bin/ascii-art:228:                    fs.writeFile(dir+target.toLowerCase()+'.flf', str, function(err){
/src/bin/ascii-art-229-                        ftp.raw.quit(function(err, data) {
##############################################
/src/image.js-25-        module.exports = factory(function(url, cb){
/src/image.js:26:            fs.readFile(url, function(err, data){
/src/image.js-27-                if (err) return cb(err);
##############################################
/src/image.js-149-                        if(err) return callback(err);
/src/image.js:150:                        if(location) require('fs').writeFile(location, text, function(err){
/src/image.js-151-                            return callback(err, text);
##############################################
/src/test/test.js-36-        file = '/images/'+file.join('.')+'.nfo';
/src/test/test.js:37:        fs.readFile(__dirname+file, function(err, result){
/src/test/test.js-38-            image.write(function(err, ascii){
##############################################
/src/test/test.js-150-                var file = (isNode?__dirname:'base/test')+'/images/mixed.nfo';
/src/test/test.js:151:                var expected = fs.readFile(__dirname+'/images/mixed.nfo', function(err, result){
/src/test/test.js-152-                    var expected = result.toString();
