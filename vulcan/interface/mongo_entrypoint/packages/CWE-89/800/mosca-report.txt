<report_mosca>
 <Path>/src/browser/subscriber/Broadcaster.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -       * Broadcasts "BEFORE_INSERT", "BEFORE_UPDATE", "BEFORE_REMOVE" events for all given subjects.

 Line: 72 -       * Broadcasts "AFTER_INSERT", "AFTER_UPDATE", "AFTER_REMOVE" events for all given subjects.

 Line: 94 -       * Broadcasts "BEFORE_INSERT" event.

 Line: 107 -                              .filter(function (listener) { return listener.type === EventListenerTypes.BEFORE_INSERT && listener.isAllowed(subject.entity); })

 Line: 124 -       * Broadcasts "BEFORE_UPDATE" event.

 Line: 137 -                              .filter(function (listener) { return listener.type === EventListenerTypes.BEFORE_UPDATE && listener.isAllowed(subject.entity); })

 Line: 189 -       * Broadcasts "AFTER_INSERT" event.

 Line: 202 -                              .filter(function (listener) { return listener.type === EventListenerTypes.AFTER_INSERT && listener.isAllowed(subject.entity); })

 Line: 219 -       * Broadcasts "AFTER_UPDATE" event.

 Line: 232 -                              .filter(function (listener) { return listener.type === EventListenerTypes.AFTER_UPDATE && listener.isAllowed(subject.entity); })

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/connection/Connection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 254 -              var queryRunner, schemas, databases_1;

 Line: 259 -                          queryRunner = _a.sent();

 Line: 269 -                          return [4 /*yield*/, PromiseUtils.runInSequence(databases_1, function (database) { return queryRunner.clearDatabase(schemas, database); })];

 Line: 273 -                      case 3: return [4 /*yield*/, queryRunner.clearDatabase(schemas)];

 Line: 277 -                      case 5: return [4 /*yield*/, queryRunner.release()];

 Line: 382 -       * Executes raw SQL query and returns raw database results.

 Line: 384 -      Connection.prototype.query = function (query, parameters, queryRunner) {

 Line: 392 -                          if (queryRunner && queryRunner.isReleased)

 Line: 394 -                          usedQueryRunner = queryRunner || this.createQueryRunner("master");

 Line: 413 -       * Creates a new query builder that can be used to build a sql query.

 Line: 415 -      Connection.prototype.createQueryBuilder = function (entityOrRunner, alias, queryRunner) {

 Line: 420 -              return new SelectQueryBuilder(this, queryRunner)

 Line: 429 -       * Creates a query runner used for perform queries on a single database connection.

 Line: 430 -       * Using query runners you can control your queries to execute using single database connection and

 Line: 440 -          var queryRunner = this.driver.createQueryRunner(mode);

 Line: 443 -          return queryRunner;

 Line: 461 -          return new EntityManagerFactory().create(this, queryRunner);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/entity-manager/SqljsEntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -      function SqljsEntityManager(connection, queryRunner) {

 Line: 56 -          var _this = _super.call(this, connection, queryRunner) || this;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/entity-manager/EntityManagerFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -      EntityManagerFactory.prototype.create = function (connection, queryRunner) {

 Line: 18 -              return new SqljsEntityManager(connection, queryRunner);

 Line: 19 -          return new EntityManager(connection, queryRunner);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/entity-manager/EntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -      function EntityManager(connection, queryRunner) {

 Line: 71 -              this.queryRunner = queryRunner;

 Line: 136 -       * Executes raw SQL query and returns raw database results.

 Line: 146 -       * Creates a new query builder that can be used to build a sql query.

 Line: 148 -      EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {

 Line: 150 -              return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);

 Line: 237 -              var queryRunner, transactionEntityManager, executors_1, finalTarget, metadata, databaseEntityLoader, executor, executorsNeedsToBeExecuted, isTransactionStartedByItself, error_1, rollbackError_2;

 Line: 241 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 257 -                                              databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);

 Line: 261 -                                              executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 273 -                          databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);

 Line: 277 -                          executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 289 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 299 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 310 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 321 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 335 -       * Executes fast and efficient INSERT query.

 Line: 336 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 344 -                      // todo: in the future create InsertResult with query result information

 Line: 352 -                          // todo: in the future create InsertResult with query result information

 Line: 364 -       * Executes fast and efficient UPDATE query.

 Line: 372 -                      // todo: in the future create UpdateResult with query result information

 Line: 380 -                          // todo: in the future create UpdateResult with query result information

 Line: 392 -       * Executes fast and efficient UPDATE query.

 Line: 400 -                      // todo: in the future create UpdateResult with query result information

 Line: 408 -                          // todo: in the future create UpdateResult with query result information

 Line: 429 -              var queryRunner, transactionEntityManager, executors_2, finalTarget, metadata, databaseEntityLoader, executor, executorsNeedsToBeExecuted, isTransactionStartedByItself, error_2, rollbackError_3;

 Line: 433 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 449 -                                              databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);

 Line: 453 -                                              executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 465 -                          databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);

 Line: 469 -                          executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 481 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 491 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 502 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 513 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 527 -       * Executes fast and efficient DELETE query.

 Line: 535 -                      // todo: in the future create DeleteResult with query result information

 Line: 543 -                          // todo: in the future create DeleteResult with query result information

 Line: 555 -       * Executes fast and efficient DELETE query.

 Line: 563 -                      // todo: in the future create DeleteResult with query result information

 Line: 571 -                          // todo: in the future create DeleteResult with query result information

 Line: 655 -                  // if no ids passed, no need to execute a query - just return an empty array of values

 Line: 718 -              var metadata, queryRunner;

 Line: 723 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 727 -                          return [4 /*yield*/, queryRunner.truncate(metadata.tablePath)];

 Line: 731 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 810 -       * This is used when entity manager is created with a single query runner,

 Line: 811 -       * and this single query runner needs to be released after job with entity manager is done.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/entity-manager/MongoEntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 68 -           * Gets query runner used to execute queries.

 Line: 84 -              var query, cursor;

 Line: 88 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 89 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 112 -              var query, cursor, _a, results, count;

 Line: 116 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 117 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 130 -                                  this.count(entityClassOrName, query),

 Line: 145 -              var metadata, query, objectIdInstance, cursor;

 Line: 150 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};

 Line: 152 -                          query["_id"] = { $in: ids.map(function (id) {

 Line: 157 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 179 -              var query, cursor, result;

 Line: 183 -                          query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 184 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 205 -              var query, objectIdInstance, cursor, result;

 Line: 209 -                          query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};

 Line: 211 -                          query["_id"] = (id instanceof objectIdInstance)

 Line: 214 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 233 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 235 -      MongoEntityManager.prototype.createCursor = function (entityClassOrName, query) {

 Line: 237 -          return this.queryRunner.cursor(metadata.tableName, query);

 Line: 240 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 243 -      MongoEntityManager.prototype.createEntityCursor = function (entityClassOrName, query) {

 Line: 245 -          var cursor = this.createCursor(entityClassOrName, query);

 Line: 302 -       * Count number of matching documents in the db to a query.

 Line: 304 -      MongoEntityManager.prototype.count = function (entityClassOrName, query, options) {

 Line: 306 -          return this.queryRunner.count(metadata.tableName, query, options);

 Line: 327 -      MongoEntityManager.prototype.deleteMany = function (entityClassOrName, query, options) {

 Line: 329 -          return this.queryRunner.deleteMany(metadata.tableName, query, options);

 Line: 334 -      MongoEntityManager.prototype.deleteOne = function (entityClassOrName, query, options) {

 Line: 336 -          return this.queryRunner.deleteOne(metadata.tableName, query, options);

 Line: 341 -      MongoEntityManager.prototype.distinct = function (entityClassOrName, key, query, options) {

 Line: 343 -          return this.queryRunner.distinct(metadata.tableName, key, query, options);

 Line: 362 -      MongoEntityManager.prototype.findOneAndDelete = function (entityClassOrName, query, options) {

 Line: 364 -          return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);

 Line: 369 -      MongoEntityManager.prototype.findOneAndReplace = function (entityClassOrName, query, replacement, options) {

 Line: 371 -          return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);

 Line: 376 -      MongoEntityManager.prototype.findOneAndUpdate = function (entityClassOrName, query, update, options) {

 Line: 378 -          return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);

 Line: 496 -      MongoEntityManager.prototype.replaceOne = function (entityClassOrName, query, doc, options) {

 Line: 498 -          return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);

 Line: 510 -      MongoEntityManager.prototype.updateMany = function (entityClassOrName, query, update, options) {

 Line: 512 -          return this.queryRunner.updateMany(metadata.tableName, query, update, options);

 Line: 517 -      MongoEntityManager.prototype.updateOne = function (entityClassOrName, query, update, options) {

 Line: 519 -          return this.queryRunner.updateOne(metadata.tableName, query, update, options);

 Line: 525 -       * Converts FindManyOptions to mongodb query.

 Line: 539 -       * Converts FindOneOptions to mongodb query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/persistence/SubjectOperationExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -      function SubjectOperationExecutor(connection, transactionEntityManager, queryRunner, subjects) {

 Line: 56 -          this.queryRunner = queryRunner;

 Line: 80 -       * Executes queries using given query runner.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/persistence/SubjectBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 95 -      function SubjectBuilder(connection, queryRunner) {

 Line: 97 -          this.queryRunner = queryRunner;

 Line: 473 -                                          // we cannot check if it was removed or not until we query the database

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/relations/RelationCount.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -  export function RelationCount(relation, alias, queryBuilderFactory) {

 Line: 11 -              queryBuilderFactory: queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/relations/RelationId.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -  export function RelationId(relation, alias, queryBuilderFactory) {

 Line: 11 -              queryBuilderFactory: queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/listeners/BeforeInsert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              type: EventListenerTypes.BEFORE_INSERT

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/listeners/AfterUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              type: EventListenerTypes.AFTER_UPDATE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/listeners/AfterInsert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              type: EventListenerTypes.AFTER_INSERT

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/decorator/listeners/BeforeUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -              type: EventListenerTypes.BEFORE_UPDATE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/find-options/FindOptionsUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 52 -       * Applies give find one options to the given query builder.

 Line: 62 -       * Applies give find many options to the given query builder.

 Line: 72 -       * Applies give find options to the given query builder.

 Line: 75 -          // if options are not set then simply return query builder. This is made for simplicity of usage.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/schema-builder/MongoSchemaBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 64 -              var queryRunner, promises;

 Line: 68 -                          queryRunner = this.connection.driver.createQueryRunner();

 Line: 85 -       * Returns query to be executed by schema builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/schema-builder/RdbmsSchemaBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 159 -                          // its important to disable this mode despite the fact we are release query builder

 Line: 160 -                          // because there exist drivers which reuse same query runner. Also its important to disable

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 46 -              queryBuilderFactory: relationCount.queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-count/RelationCountLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -      function RelationCountLoader(connection, queryRunner, relationCountAttributes) {

 Line: 41 -          this.queryRunner = queryRunner;

 Line: 69 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 79 -                                  // apply condition (custom query builder factory)

 Line: 108 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 123 -                                  // apply condition (custom query builder factory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/QueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -  // todo: completely cover query builder with tests

 Line: 49 -  // todo: implement relation/entity loading and setting them into properties within a separate query

 Line: 59 -      function QueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 67 -              this.queryRunner = queryRunner;

 Line: 76 -           * Gets the main alias string used in this query builder.

 Line: 87 -       * Creates SELECT query and selects given data.

 Line: 105 -       * Creates INSERT query.

 Line: 116 -       * Creates UPDATE query and applies given update values.

 Line: 133 -       * Creates DELETE query.

 Line: 144 -       * Sets entity's relation with which this query builder gonna work.

 Line: 184 -          // set parent query builder parameters as well in sub-query mode

 Line: 212 -       * Parameters in the query are escaped for the currently used driver.

 Line: 225 -       * Gets query to be executed with all parameters used in it.

 Line: 231 -       * Executes sql generated by query builder and returns raw database results.

 Line: 235 -              var _a, sql, parameters, queryRunner;

 Line: 240 -                          queryRunner = this.obtainQueryRunner();

 Line: 244 -                          return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 248 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 265 -       * Creates a completely new query builder.

 Line: 266 -       * Uses same query runner as current QueryBuilder.

 Line: 272 -       * Clones query builder as it is.

 Line: 273 -       * Note: it uses new query runner, if you want query builder that uses exactly same query runner,

 Line: 274 -       * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)

 Line: 275 -       * where queryBuilder is cloned QueryBuilder.

 Line: 296 -       * Sets or overrides query builder's QueryRunner.

 Line: 299 -          this.queryRunner = queryRunner;

 Line: 354 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 418 -       * Creates "WHERE" expression.

 Line: 426 -                  return " WHERE " + (conditions.length ? "(" + conditions + ") AND" : "") + " " + condition;

 Line: 430 -              return this.expressionMap.extraAppendedAndWhereCondition ? " WHERE " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : "";

 Line: 432 -              return " WHERE (" + conditions + ") AND " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);

 Line: 433 -          return " WHERE " + conditions;

 Line: 452 -       * Creates "WHERE" expression and variables for the given "ids".

 Line: 527 -       * Creates a query builder used to execute sql queries inside this query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/JoinAttribute.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Stores all join attributes which will be used to build a JOIN query.

 Line: 8 -      function JoinAttribute(connection, queryExpressionMap, joinAttribute) {

 Line: 10 -          this.queryExpressionMap = queryExpressionMap;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/Brackets.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Allows to use brackets in WHERE expressions for better syntax.

 Line: 6 -       * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/UpdateQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -      function UpdateQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 25 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 33 -       * Gets generated sql query without parameters being replaced.

 Line: 58 -       * Sets WHERE condition in the query builder.

 Line: 59 -       * If you had previously WHERE expression defined,

 Line: 60 -       * calling this function will override previously set WHERE conditions.

 Line: 73 -       * Adds new AND WHERE condition in the query builder.

 Line: 83 -       * Adds new OR WHERE condition in the query builder.

 Line: 93 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 102 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 111 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 120 -       * Sets ORDER BY condition in the query builder.

 Line: 146 -       * Adds ORDER BY condition in the query builder.

 Line: 180 -       * Creates UPDATE express used to perform insert query.

 Line: 190 -                  // todo: make this and other query builder to work with properly with tables without metadata

 Line: 227 -          // generate and return sql update query

 Line: 229 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + this.expressionMap.returning;

 Line: 232 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + this.expressionMap.returning + whereExpression;

 Line: 235 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?

 Line: 239 -       * Creates "ORDER BY" part of SQL query.

 Line: 258 -       * Creates "LIMIT" parts of SQL query.

 Line: 278 -          throw new Error("Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify inserted values.");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationUpdater.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 45 -          this.queryBuilder = queryBuilder;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-id/RelationIdLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -      function RelationIdLoader(connection, queryRunner, relationIdAttributes) {

 Line: 41 -          this.queryRunner = queryRunner;

 Line: 94 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 107 -                                  // apply condition (custom query builder factory)

 Line: 131 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 160 -                                  // apply condition (custom query builder factory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-id/RelationIdAttribute.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * Stores all join relation id attributes which will be used to build a JOIN query.

 Line: 9 -          this.queryExpressionMap = queryExpressionMap;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 46 -              queryBuilderFactory: relationId.queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/DeleteQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -      function DeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 22 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 30 -       * Gets generated sql query without parameters being replaced.

 Line: 40 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 49 -       * Sets WHERE condition in the query builder.

 Line: 50 -       * If you had previously WHERE expression defined,

 Line: 51 -       * calling this function will override previously set WHERE conditions.

 Line: 64 -       * Adds new AND WHERE condition in the query builder.

 Line: 74 -       * Adds new OR WHERE condition in the query builder.

 Line: 84 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 93 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 101 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 129 -       * Creates DELETE express used to perform query.

 Line: 134 -              return "DELETE FROM " + this.getTableName(this.getMainTableName()) + whereExpression + " RETURNING " + this.expressionMap.returning;

 Line: 137 -              return "DELETE FROM " + this.getTableName(this.getMainTableName()) + " OUTPUT " + this.expressionMap.returning + whereExpression;

 Line: 140 -              return "DELETE FROM " + this.getTableName(this.getMainTableName()) + whereExpression; // todo: how do we replace aliases in where to nothing?

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/SelectQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 78 -       * Gets generated sql query without parameters being replaced.

 Line: 99 -       * Creates a subquery - query that can be used inside other queries.

 Line: 108 -       * Creates SELECT query and selects given data.

 Line: 127 -       * Adds new selection to the SELECT query.

 Line: 146 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 156 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 186 -       * INNER JOINs and adds all selection properties to SELECT.

 Line: 197 -       * LEFT JOINs and adds all selection properties to SELECT.

 Line: 208 -       * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 221 -       * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 234 -       * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 247 -       * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 263 -      SelectQueryBuilder.prototype.loadRelationIdAndMap = function (mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {

 Line: 271 -          relationIdAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 286 -      SelectQueryBuilder.prototype.loadRelationCountAndMap = function (mapToProperty, relationName, aliasName, queryBuilderFactory) {

 Line: 291 -          relationCountAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 318 -       * Sets WHERE condition in the query builder.

 Line: 319 -       * If you had previously WHERE expression defined,

 Line: 320 -       * calling this function will override previously set WHERE conditions.

 Line: 333 -       * Adds new AND WHERE condition in the query builder.

 Line: 343 -       * Adds new OR WHERE condition in the query builder.

 Line: 353 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 367 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 380 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 393 -       * Sets HAVING condition in the query builder.

 Line: 405 -       * Adds new AND HAVING condition in the query builder.

 Line: 415 -       * Adds new OR HAVING condition in the query builder.

 Line: 425 -       * Sets GROUP BY condition in the query builder.

 Line: 439 -       * Adds GROUP BY condition in the query builder.

 Line: 446 -       * Sets ORDER BY condition in the query builder.

 Line: 472 -       * Adds ORDER BY condition in the query builder.

 Line: 487 -       * If you want to implement pagination, and you are having join in your query,

 Line: 497 -       * If you want to implement pagination, and you are having join in your query,

 Line: 527 -       * Gets first raw result returned by execution of generated query builder sql.

 Line: 540 -       * Gets all raw results returned by execution of generated query builder sql.

 Line: 544 -              var queryRunner;

 Line: 551 -                          queryRunner = this.obtainQueryRunner();

 Line: 559 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 570 -       * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 574 -              var queryRunner;

 Line: 578 -                          queryRunner = this.obtainQueryRunner();

 Line: 587 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 598 -       * Gets single entity returned by execution of generated query builder sql.

 Line: 628 -       * Gets entities returned by execution of generated query builder sql.

 Line: 647 -       * Gets count - number of entities selected by sql generated by this query builder.

 Line: 652 -              var queryRunner;

 Line: 658 -                          queryRunner = this.obtainQueryRunner();

 Line: 666 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 677 -       * Executes built SQL query and returns entities and overall entities count (without limitation).

 Line: 682 -              var queryRunner, entitiesAndRaw, count;

 Line: 688 -                          queryRunner = this.obtainQueryRunner();

 Line: 701 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 712 -       * Executes built SQL query and returns raw data stream.

 Line: 717 -              var _a, sql, parameters, queryRunner, releaseFn;

 Line: 723 -                          queryRunner = this.obtainQueryRunner();

 Line: 729 -                                  return queryRunner.release();

 Line: 732 -                          return [2 /*return*/, queryRunner.stream(sql, parameters, releaseFn, releaseFn)];

 Line: 735 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 746 -       * Enables or disables query result caching.

 Line: 813 -       * Creates "SELECT FROM" part of SQL query.

 Line: 818 -              throw new Error("Cannot build query because main alias is not set (call qb#from method)");

 Line: 891 -          // create a selection query

 Line: 901 -              return "SELECT ROWNUM " + this.escape("RN") + "," + selection + " FROM " + froms.join(", ") + lock;

 Line: 902 -          return "SELECT " + selection + " FROM " + froms.join(", ") + lock;

 Line: 905 -       * Creates "JOIN" part of SQL query.

 Line: 988 -       * Creates "GROUP BY" part of SQL query.

 Line: 996 -       * Creates "ORDER BY" part of SQL query.

 Line: 1015 -       * Creates "LIMIT" and "OFFSET" parts of SQL query for Oracle database.

 Line: 1019 -              sql = "SELECT * FROM (" + sql + ") WHERE ";

 Line: 1030 -       * Creates "LIMIT" and "OFFSET" parts of SQL query.

 Line: 1035 -          // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results

 Line: 1077 -       * Creates "LOCK" part of SQL query.

 Line: 1096 -                      return " FOR UPDATE";

 Line: 1109 -       * Creates "HAVING" part of SQL query.

 Line: 1214 -       * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 1219 -              var metadata, broadcaster, relationIdLoader, relationCountLoader, relationIdMetadataTransformer, relationCountMetadataTransformer, rawResults, entities, _a, selects, orderBys_1, metadata_1, mainAliasName_1, querySelects, condition, parameters_1, ids, areAllNumbers, rawRelationIdResults, rawRelationCountResults, transformer;

 Line: 1233 -                          relationIdLoader = new RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);

 Line: 1234 -                          relationCountLoader = new RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);

 Line: 1244 -                          querySelects = metadata_1.primaryColumns.map(function (primaryColumn) {

 Line: 1251 -                          return [4 /*yield*/, new SelectQueryBuilder(this.connection, queryRunner)

 Line: 1252 -                                  .select("DISTINCT " + querySelects.join(", "))

 Line: 1278 -                                  // fixes #190. if all numbers then its safe to perform query without parameter

 Line: 1374 -                                  query: this.getSql(),

 Line: 1376 -                              }, queryRunner)];

 Line: 1382 -                      case 2: return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 1388 -                                  query: this.getSql(),

 Line: 1392 -                              }, savedQueryResultCacheOptions, queryRunner)];

 Line: 1417 -       * Creates a query builder used to execute sql queries inside this query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/InsertQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -       * Gets generated sql query without parameters being replaced.

 Line: 79 -       * Creates INSERT express used to perform insert query.

 Line: 149 -          // generate sql query

 Line: 151 -              return "INSERT INTO " + this.getTableName(this.getMainTableName()) + (columnNames ? "(" + columnNames + ")" : "") + " VALUES " + values + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "") + " RETURNING " + this.expressionMap.returning;

 Line: 154 -              return "INSERT INTO " + this.getTableName(this.getMainTableName()) + "(" + columnNames + ") OUTPUT " + this.expressionMap.returning + " VALUES " + values;

 Line: 157 -              return "INSERT INTO " + this.getTableName(this.getMainTableName()) + "(" + columnNames + ") VALUES " + values + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "");

 Line: 168 -          throw new Error("Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationRemover.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 45 -          this.queryBuilder = queryBuilder;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -       * Gets generated sql query without parameters being replaced.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/RelationLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 36 -       * example: SELECT category.id AS category_id, category.name AS category_name FROM category category

 Line: 37 -       *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1

 Line: 59 -       * SELECT post

 Line: 60 -       * FROM post post

 Line: 61 -       * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]

 Line: 77 -       * SELECT category

 Line: 78 -       * FROM category category

 Line: 107 -       * SELECT post

 Line: 108 -       * FROM post post

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/query-builder/QueryExpressionMap.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -   * Contains all properties of the QueryBuilder that needs to be build a final query.

 Line: 29 -           * All aliases (including main alias) used in the query.

 Line: 33 -           * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.

 Line: 37 -           * Data needs to be SELECT-ed.

 Line: 45 -           * Optional on conflict statement used in insertion query in postgres.

 Line: 61 -           * WHERE queries.

 Line: 77 -           * Parameters used to be escaped in final query.

 Line: 102 -           * Indicates if query builder creates a subquery.

 Line: 107 -           * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,

 Line: 108 -           * but user can use them in WHERE expressions.

 Line: 112 -           * Indicates if query result cache is enabled or not.

 Line: 117 -           * Used in INSERT query.

 Line: 200 -           * Gets relation metadata of the relation this query builder works with.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/LimitOnUpdateNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -   * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.

 Line: 16 -          var _this = _super.call(this, "Your database does not support LIMIT on UPDATE statements.") || this;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/QueryRunnerProviderAlreadyReleasedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -   * Thrown when consumer tries to use query runner from query runner provider after it was released.

 Line: 18 -          _this.message = "Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/OptimisticLockCanNotBeUsedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -   * Thrown when an optimistic lock cannot be used in query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/OffsetWithoutLimitNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -   * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.

 Line: 16 -          var _this = _super.call(this, driverName + " does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).") || this;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/error/QueryFailedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -   * Thrown when query execution has failed.

 Line: 30 -          Object.assign(_this, __assign({}, driverError, { name: "QueryFailedError", query: query, parameters: parameters || [] }));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/oracle/OracleDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 223 -       * Creates a query runner used to execute database queries.

 Line: 231 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/oracle/OracleQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 56 -           * Indicates if connection for this query runner is released.

 Line: 57 -           * Once its released, query runner cannot run queries anymore.

 Line: 70 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 110 -       * You cannot use query runner methods once its released.

 Line: 182 -       * Executes a given SQL query.

 Line: 190 -              var queryStartTime_1, handler, executionOptions, databaseConnection, err_1;

 Line: 196 -                          queryStartTime_1 = +new Date();

 Line: 200 -                              var queryEndTime = +new Date();

 Line: 201 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 202 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 203 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 205 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 251 -                              ? "INSERT INTO \"" + tableName + "\" (" + columns + ") VALUES (" + values + ")"

 Line: 252 -                              : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 278 -                          sql = "UPDATE \"" + tableName + "\" SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 301 -                          sql = "DELETE FROM \"" + tableName + "\" WHERE " + conditionString;

 Line: 321 -                              sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\", \"level\") " +

 Line: 322 -                                  ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 323 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 326 -                              sql = "INSERT INTO \"" + tableName + "\" (\"ancestor\", \"descendant\") " +

 Line: 327 -                                  ("SELECT \"ancestor\", " + newEntityId + " FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 328 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 333 -                          return [4 /*yield*/, this.query("SELECT MAX(\"level\") as \"level\" FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId)];

 Line: 370 -                          tablesSql = "SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (" + tableNamesString + ")";

 Line: 371 -                          columnsSql = "SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (" + tableNamesString + ")";

 Line: 372 -                          indicesSql = "SELECT ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS, LISTAGG(cols.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY cols.COLUMN_NAME) AS COLUMN_NAMES\n                                FROM USER_INDEXES ind, USER_IND_COLUMNS cols \n                                WHERE ind.INDEX_NAME = cols.INDEX_NAME AND ind.TABLE_NAME IN (" + tableNamesString + ")\n                                GROUP BY ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS";

 Line: 373 -                          constraintsSql = "SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (" + tableNamesString + ") \nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position";

 Line: 471 -                          sql = "SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '" + tableName + "'";

 Line: 543 -                          sql = "SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '" + tableName + "' AND COLUMN_NAME = '" + columnName + "'";

 Line: 790 -                      sql += " ON DELETE " + foreignKey.onDelete;

 Line: 915 -                          dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS \"', table_name, '\";') AS query FROM information_schema.tables WHERE table_schema = '" + this.dbName + "'";

 Line: 952 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 953 -       * instead they will be memorized into a special variable inside query runner.

 Line: 960 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 995 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/postgres/PostgresQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -           * Indicates if connection for this query runner is released.

 Line: 56 -           * Once its released, query runner cannot run queries anymore.

 Line: 69 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 115 -       * You cannot use query runner methods once its released.

 Line: 186 -       * Executes a given SQL query.

 Line: 192 -          // console.log("query: ", query);

 Line: 196 -              var databaseConnection, queryStartTime;

 Line: 203 -                          queryStartTime = +new Date();

 Line: 207 -                              var queryEndTime = +new Date();

 Line: 208 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 209 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 210 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 212 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 275 -                              ? "INSERT INTO " + this.escapeTablePath(tablePath) + "(" + columns + ") VALUES (" + values + ") " + generatedColumnSql

 Line: 276 -                              : "INSERT INTO " + this.escapeTablePath(tablePath) + " DEFAULT VALUES " + generatedColumnSql;

 Line: 298 -              var updateValues, conditionString, query, updateParams, conditionParams, allParameters;

 Line: 304 -                          query = "UPDATE " + this.escapeTablePath(tablePath) + " SET " + updateValues + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 327 -                          sql = "DELETE FROM " + this.escapeTablePath(tablePath) + " WHERE " + conditionString;

 Line: 349 -                              sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\", \"level\") " +

 Line: 350 -                                  ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 351 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 354 -                              sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\") " +

 Line: 355 -                                  ("SELECT \"ancestor\", " + newEntityId + " FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 356 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 362 -                          return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + this.escapeTablePath(tablePath) + " WHERE descendant = " + parentId)];

 Line: 403 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 421 -                          tablesSql = "SELECT * FROM information_schema.tables WHERE " + tablesCondition;

 Line: 422 -                          columnsSql = "SELECT * FROM information_schema.columns WHERE table_schema IN (" + schemaNamesString + ")";

 Line: 423 -                          indicesSql = "SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name, ix.indisunique AS is_unique, a.attnum, ix.indkey FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (" + tableNamesString + ") AND t.relnamespace = ns.OID AND ns.nspname IN (" + schemaNamesString + ") ORDER BY t.relname, i.relname";

 Line: 424 -                          foreignKeysSql = "SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_schema IN (" + schemaNamesString + ") AND constraint_type = 'FOREIGN KEY'";

 Line: 425 -                          uniqueKeysSql = "SELECT * FROM information_schema.table_constraints WHERE table_schema IN (" + schemaNamesString + ") AND constraint_type = 'UNIQUE'";

 Line: 426 -                          primaryKeysSql = "SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema IN (" + schemaNamesString + ")";

 Line: 540 -                          sql = "SELECT * FROM information_schema.tables WHERE table_schema = " + parsedTablePath.schema + " AND table_name = " + parsedTablePath.tableName;

 Line: 626 -                          sql = "SELECT * FROM information_schema.columns WHERE table_schema = " + parsedTablePath.schema + " AND table_name = '" + parsedTablePath.tableName + "' AND column_name = '" + columnName + "'";

 Line: 1044 -                          selectDropsQuery = "SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname IN (" + schemaNamesString + ")";

 Line: 1074 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 1075 -       * instead they will be memorized into a special variable inside query runner.

 Line: 1082 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 1137 -              add += " ON DELETE " + foreignKey.onDelete;

 Line: 1183 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/postgres/PostgresDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 56 -           * We store all created query runners because we need to release them.

 Line: 304 -       * Creates a query runner used to execute database queries.

 Line: 379 -       * and an array of parameter names to be passed to a query.

 Line: 593 -       * Loads postgres query stream package.

 Line: 658 -                      case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];

 Line: 669 -       * Executes given query.

 Line: 671 -      PostgresDriver.prototype.executeQuery = function (connection, query) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqljs/SqljsQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 88 -       * Executes a given SQL query.

 Line: 95 -              var databaseConnection, queryStartTime, statement, maxQueryExecutionTime, queryEndTime, queryExecutionTime, result;

 Line: 102 -                          queryStartTime = +new Date();

 Line: 107 -                              queryEndTime = +new Date();

 Line: 108 -                              queryExecutionTime = queryEndTime - queryStartTime;

 Line: 109 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 110 -                                  this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 139 -                  sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 160 -                                              value = databaseConnection.exec("SELECT last_insert_rowid()")[0].values[0][0];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqljs/SqljsDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 108 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/mongodb/MongoQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 44 -           * Indicates if connection for this query runner is released.

 Line: 45 -           * Once its released, query runner cannot run queries anymore.

 Line: 46 -           * Always false for mongodb since mongodb has a single query executor instance.

 Line: 50 -           * Indicates if transaction is active in this query executor.

 Line: 66 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 68 -      MongoQueryRunner.prototype.cursor = function (collectionName, query) {

 Line: 91 -       * Count number of matching documents in the db to a query.

 Line: 93 -      MongoQueryRunner.prototype.count = function (collectionName, query, options) {

 Line: 133 -      MongoQueryRunner.prototype.deleteMany = function (collectionName, query, options) {

 Line: 146 -      MongoQueryRunner.prototype.deleteOne = function (collectionName, query, options) {

 Line: 159 -      MongoQueryRunner.prototype.distinct = function (collectionName, key, query, options) {

 Line: 163 -                      case 0: return [4 /*yield*/, this.getCollection(collectionName).distinct(key, query, options)];

 Line: 198 -      MongoQueryRunner.prototype.findOneAndDelete = function (collectionName, query, options) {

 Line: 211 -      MongoQueryRunner.prototype.findOneAndReplace = function (collectionName, query, replacement, options) {

 Line: 224 -      MongoQueryRunner.prototype.findOneAndUpdate = function (collectionName, query, update, options) {

 Line: 425 -      MongoQueryRunner.prototype.replaceOne = function (collectionName, query, doc, options) {

 Line: 451 -      MongoQueryRunner.prototype.updateMany = function (collectionName, query, update, options) {

 Line: 464 -      MongoQueryRunner.prototype.updateOne = function (collectionName, query, update, options) {

 Line: 545 -       * Executes a given SQL query.

 Line: 548 -          throw new Error("Executing SQL query is not supported by MongoDB driver.");

 Line: 865 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 866 -       * instead they will be memorized into a special variable inside query runner.

 Line: 873 -       * Disables special query runner mode in which sql queries won't be executed

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/mongodb/MongoDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 175 -       * Creates a query runner used to execute database queries.

 Line: 183 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlite-abstract/AbstractSqliteDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 179 -       * Creates a query runner used to execute database queries.

 Line: 248 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 56 -           * Indicates if connection for this query runner is released.

 Line: 57 -           * Once its released, query runner cannot run queries anymore.

 Line: 73 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 93 -       * We don't do anything here because sqlite do not support multiple connections thus query runners.

 Line: 158 -       * Executes a given SQL query.

 Line: 185 -              var updateValues, conditionString, query, updateParams, conditionParams, allParameters;

 Line: 191 -                          query = "UPDATE \"" + tableName + "\" SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 214 -                          sql = "DELETE FROM \"" + tableName + "\" WHERE " + conditionString;

 Line: 234 -                              sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\", \"level\") " +

 Line: 235 -                                  ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 236 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 239 -                              sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\") " +

 Line: 240 -                                  ("SELECT \"ancestor\", " + newEntityId + " FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 241 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 247 -                          return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + tableName + " WHERE descendant = " + parentId)];

 Line: 286 -                          return [4 /*yield*/, this.query("SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (" + tableNamesString + ")")];

 Line: 454 -                          sql = "SELECT * FROM sqlite_master WHERE type = 'table' AND name = '" + tableName + "'";

 Line: 799 -                      case 0: return [4 /*yield*/, this.query("DELETE FROM \"" + tableName + "\"")];

 Line: 825 -                          selectDropsQuery = "select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'";

 Line: 859 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 860 -       * instead they will be memorized into a special variable inside query runner.

 Line: 867 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 893 -       * Builds a query for create column.

 Line: 937 -                                  sql1 += " ON DELETE " + foreignKey.onDelete;

 Line: 952 -                          sql2 = "INSERT INTO \"temporary_" + table.name + "\"(" + oldColumnNames + ") SELECT " + oldColumnNames + " FROM \"" + table.name + "\"";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlserver/MssqlParameter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1 -   * Sql server driver requires parameter types to be specified fo input parameters used in the query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlserver/SqlServerDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 226 -       * Creates a query runner used to execute database queries.

 Line: 234 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlserver/SqlServerQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 57 -           * Indicates if connection for this query runner is released.

 Line: 58 -           * Once its released, query runner cannot run queries anymore.

 Line: 71 -           * Last executed query in a transaction.

 Line: 73 -           * that's why we store last executed query promise to wait it when we execute next query.

 Line: 79 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 102 -       * You cannot use query runner methods once its released.

 Line: 262 -       * Executes a given SQL query.

 Line: 284 -                              var pool, request_1, queryStartTime_1, err_1;

 Line: 310 -                                          queryStartTime_1 = +new Date();

 Line: 314 -                                              var queryEndTime = +new Date();

 Line: 315 -                                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 316 -                                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 317 -                                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 328 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 405 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 442 -                          generatedColumnNames = generatedColumns.map(function (generatedColumn) { return "INSERTED.\"" + generatedColumn.databaseName + "\""; }).join(", ");

 Line: 445 -                              ? "INSERT INTO " + this.escapeTablePath(tablePath) + "(" + columns + ") " + generatedColumnSql + " VALUES (" + values + ")"

 Line: 446 -                              : "INSERT INTO " + this.escapeTablePath(tablePath) + " " + generatedColumnSql + " DEFAULT VALUES ";

 Line: 480 -                          sql = "UPDATE " + this.escapeTablePath(tablePath) + " SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 501 -                          sql = "DELETE FROM " + this.escapeTablePath(tablePath) + " WHERE " + conditionString;

 Line: 521 -                              sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\", \"level\") " +

 Line: 522 -                                  ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 523 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 526 -                              sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\") " +

 Line: 527 -                                  ("SELECT \"ancestor\", " + newEntityId + " FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 528 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 534 -                          return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + this.escapeTablePath(tablePath) + " WHERE descendant = " + parentId)];

 Line: 605 -                              return "SELECT * FROM " + dbName + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN (" + tableNamesString + ") AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 606 -                          }).join(" UNION ALL ");

 Line: 608 -                              return "SELECT * FROM " + dbName + ".INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 609 -                          }).join(" UNION ALL ");

 Line: 611 -                              return "SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM " + dbName + ".INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages " +

 Line: 613 -                                  ("WHERE columnUsages.TABLE_SCHEMA IN (" + schemaNamesString + ") AND tableConstraints.TABLE_SCHEMA IN (" + schemaNamesString + ")");

 Line: 614 -                          }).join(" UNION ALL ");

 Line: 616 -                              return "SELECT COLUMN_NAME, TABLE_NAME FROM " + dbName + ".INFORMATION_SCHEMA.COLUMNS WHERE COLUMNPROPERTY(object_id(TABLE_SCHEMA + '.' + TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1 AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 617 -                          }).join(" UNION ALL ");

 Line: 619 -                              return "SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, \n                    COLUMN_NAME = col.name, IS_UNIQUE = ind.is_unique, ind.*, ic.*, col.* \n                    FROM " + dbName + ".sys.indexes ind \n                    INNER JOIN " + dbName + ".sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id\n                    INNER JOIN " + dbName + ".sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id \n                    INNER JOIN " + dbName + ".sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 \n                    AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0";

 Line: 620 -                          }).join(" UNION ALL ");

 Line: 730 -                      case 0: return [4 /*yield*/, this.query("SELECT DB_ID('" + database + "') as db_id")];

 Line: 749 -                          sql = "SELECT * FROM " + parsedTablePath.database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" + parsedTablePath.tableName + "' AND TABLE_SCHEMA = " + (parsedTablePath.schema === "SCHEMA_NAME()" ? parsedTablePath.schema : "'" + parsedTablePath.schema + "'");

 Line: 772 -              var query, dbName, schema, currentDBQuery, currentDB, query;

 Line: 777 -                          query = "IF SCHEMA_ID('" + path + "') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA " + path + "' END";

 Line: 782 -                          return [4 /*yield*/, this.query("SELECT DB_NAME() AS db_name")];

 Line: 789 -                          query = "IF SCHEMA_ID('" + schema + "') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA " + schema + "' END";

 Line: 856 -                          sql = "SELECT * FROM " + parsedTablePath.database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" + parsedTablePath.tableName + "' AND COLUMN_NAME = '" + columnName + "' AND TABLE_SCHEMA = " + (parsedTablePath.schema === "SCHEMA_NAME()" ? parsedTablePath.schema : "'" + parsedTablePath.schema + "'");

 Line: 1088 -                          oldPrimaryKeySql = "SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM " + database + ".INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\nLEFT JOIN " + database + ".INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\nWHERE tableConstraints.TABLE_CATALOG = '" + database + "' AND columnUsages.TABLE_SCHEMA = '" + schema + "' AND tableConstraints.TABLE_SCHEMA = '" + schema + "'";

 Line: 1122 -                      sql += " ON DELETE " + foreignKey.onDelete;

 Line: 1255 -                          allTablesSql = "SELECT * FROM " + database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 1265 -                                              dropForeignKeySql = "SELECT 'ALTER TABLE \"" + database + "\".\"' + OBJECT_SCHEMA_NAME(fk.parent_object_id, DB_ID('" + database + "')) + '\".\"' + OBJECT_NAME(fk.parent_object_id, DB_ID('" + database + "')) + '\" DROP CONSTRAINT \"' + fk.name + '\"' as query FROM " + database + ".sys.foreign_keys AS fk WHERE fk.referenced_object_id = object_id('\"" + database + "\".\"" + tablesResult["TABLE_SCHEMA"] + "\".\"" + tablesResult["TABLE_NAME"] + "\"')";

 Line: 1306 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 1307 -       * instead they will be memorized into a special variable inside query runner.

 Line: 1314 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 1394 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/mysql/MysqlDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 232 -       * Creates a query runner used to execute database queries.

 Line: 240 -       * and an array of parameter names to be passed to a query.

 Line: 514 -              // we give error before calling any other method that creates actual query runner

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/mysql/MysqlQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -           * Indicates if connection for this query runner is released.

 Line: 56 -           * Once its released, query runner cannot run queries anymore.

 Line: 69 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 109 -       * You cannot use query runner methods once its released.

 Line: 177 -       * Executes a raw SQL query.

 Line: 185 -              var databaseConnection, queryStartTime_1, err_1;

 Line: 194 -                          queryStartTime_1 = +new Date();

 Line: 198 -                              var queryEndTime = +new Date();

 Line: 199 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 200 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 201 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 203 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 266 -                          sql = "INSERT INTO `" + this.escapeTablePath(tablePath) + "`(" + columns + ") VALUES (" + values + ")";

 Line: 295 -                          sql = "UPDATE `" + this.escapeTablePath(tablePath) + "` SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 318 -                          sql = "DELETE FROM `" + this.escapeTablePath(tablePath) + "` WHERE " + conditionString;

 Line: 337 -                          return [4 /*yield*/, this.query("INSERT INTO `" + this.escapeTablePath(tablePath) + "`(`ancestor`, `descendant`, `level`) " +

 Line: 338 -                                  ("SELECT `ancestor`, " + newEntityId + ", `level` + 1 FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId + " ") +

 Line: 339 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1"))];

 Line: 343 -                      case 2: return [4 /*yield*/, this.query("INSERT INTO `" + this.escapeTablePath(tablePath) + "`(`ancestor`, `descendant`) " +

 Line: 344 -                              ("SELECT `ancestor`, " + newEntityId + " FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId + " ") +

 Line: 345 -                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId))];

 Line: 351 -                          return [4 /*yield*/, this.query("SELECT MAX(`level`) as `level` FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId)];

 Line: 401 -                          tablesSql = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND TABLE_NAME IN (" + tableNamesString + ")";

 Line: 402 -                          columnsSql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN (" + databaseNamesString + ")";

 Line: 403 -                          indicesSql = "SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND INDEX_NAME != 'PRIMARY' ORDER BY SEQ_IN_INDEX";

 Line: 404 -                          foreignKeysSql = "SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND REFERENCED_COLUMN_NAME IS NOT NULL";

 Line: 425 -                                              return [4 /*yield*/, this.query("SHOW INDEX FROM `" + dbTable["TABLE_SCHEMA"] + "`.`" + dbTable["TABLE_NAME"] + "` WHERE Key_name = 'PRIMARY'")];

 Line: 521 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '" + database + "'")];

 Line: 539 -                          sql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '" + parsedTablePath.database + "' AND TABLE_NAME = '" + parsedTablePath.tableName + "'";

 Line: 559 -                          sql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '" + parsedTablePath.database + "' AND TABLE_NAME = '" + parsedTablePath.tableName + "' AND COLUMN_NAME = '" + columnName + "'";

 Line: 823 -                      sql += " ON DELETE " + foreignKey.onDelete;

 Line: 862 -                      revertSql += " ON DELETE " + foreignKey.onDelete;

 Line: 966 -                          dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`;') AS query FROM information_schema.tables WHERE table_schema = '" + database + "'";

 Line: 1003 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 1004 -       * instead they will be memorized into a special variable inside query runner.

 Line: 1011 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 1076 -       * Builds a part of query to create/change a column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlite/SqliteDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 88 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/sqlite/SqliteQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 67 -       * Executes a given SQL query.

 Line: 75 -              var databaseConnection, queryStartTime;

 Line: 82 -                          queryStartTime = +new Date();

 Line: 86 -                              var queryEndTime = +new Date();

 Line: 87 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 88 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 89 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 91 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 116 -                  sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/cordova/CordovaQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 67 -       * Executes a given SQL query.

 Line: 75 -              var databaseConnection, queryStartTime;

 Line: 82 -                          queryStartTime = +new Date();

 Line: 86 -                              var queryEndTime = +new Date();

 Line: 87 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 88 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 89 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 99 -                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 120 -                  sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/cordova/CordovaDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 86 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/websql/WebsqlDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 99 -       * Creates a query runner used to execute database queries.

 Line: 125 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/driver/websql/WebsqlQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 141 -       * Executes a given SQL query.

 Line: 149 -              var db, queryStartTime_1, err_1;

 Line: 159 -                          queryStartTime_1 = +new Date();

 Line: 164 -                                  var queryEndTime = +new Date();

 Line: 165 -                                  var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 166 -                                  if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 167 -                                      _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 174 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 201 -                  sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 253 -                          return [4 /*yield*/, this.query("SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (" + tableNamesString + ")")];

 Line: 380 -                          selectDropsQuery = "select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/RepositoryFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -      RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {

 Line: 24 -                  queryRunner: queryRunner,

 Line: 41 -                  queryRunner: queryRunner,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/Repository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 45 -       * Creates a new query builder that can be used to build a sql query.

 Line: 47 -      Repository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 48 -          return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);

 Line: 123 -       * Executes fast and efficient INSERT query.

 Line: 124 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 167 -       * Executes fast and efficient DELETE query.

 Line: 181 -       * Executes fast and efficient DELETE query.

 Line: 256 -       * Executes a raw SQL query and returns a raw database results.

 Line: 257 -       * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/TreeRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 134 -       * Creates a query builder used to get descendants of the entities in a tree.

 Line: 177 -       * Creates a query builder used to get ancestors of the entities in the tree.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/AbstractRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -       * Creates a new query builder for the repository's entity that can be used to build a sql query.

 Line: 58 -       * Creates a new query builder for the given entity that can be used to build a sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/BaseEntity.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 72 -       * Creates a new query builder that can be used to build a sql query.

 Line: 178 -       * Executes a raw SQL query and returns a raw database results.

 Line: 179 -       * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/repository/MongoRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -       * Raw SQL query execution is not supported by MongoDB.

 Line: 33 -      MongoRepository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 71 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 74 -          return this.manager.createCursor(this.metadata.target, query);

 Line: 77 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 81 -          return this.manager.createEntityCursor(this.metadata.target, query);

 Line: 96 -       * Count number of matching documents in the db to a query.

 Line: 99 -          return this.manager.count(this.metadata.target, query || {}, options);

 Line: 119 -          return this.manager.deleteMany(this.metadata.tableName, query, options);

 Line: 125 -          return this.manager.deleteOne(this.metadata.tableName, query, options);

 Line: 130 -      MongoRepository.prototype.distinct = function (key, query, options) {

 Line: 131 -          return this.manager.distinct(this.metadata.tableName, key, query, options);

 Line: 149 -          return this.manager.findOneAndDelete(this.metadata.tableName, query, options);

 Line: 155 -          return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);

 Line: 161 -          return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);

 Line: 264 -          return this.manager.replaceOne(this.metadata.tableName, query, doc, options);

 Line: 276 -          return this.manager.updateMany(this.metadata.tableName, query, update, options);

 Line: 282 -          return this.manager.updateOne(this.metadata.tableName, query, update, options);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/migration/MigrationExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -      function MigrationExecutor(connection, queryRunner) {

 Line: 50 -          this.queryRunner = queryRunner;

 Line: 62 -              var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, pendingMigrations, transactionStartedByUs, err_1, rollbackError_1;

 Line: 66 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 101 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 120 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 131 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 141 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 156 -              var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_2, rollbackError_2;

 Line: 160 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 186 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 201 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 212 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 222 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 243 -                      case 0: return [4 /*yield*/, queryRunner.hasTable("migrations")];

 Line: 247 -                          return [4 /*yield*/, queryRunner.createTable(new Table("migrations", [

 Line: 320 -                          return [4 /*yield*/, queryRunner.insert("migrations", {

 Line: 327 -                      case 2: return [4 /*yield*/, queryRunner.insert("migrations", {

 Line: 348 -                          return [4 /*yield*/, queryRunner.delete("migrations", {

 Line: 355 -                      case 2: return [4 /*yield*/, queryRunner.delete("migrations", {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/cache/RedisQueryResultCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 37 -   * Caches query result into Redis database.

 Line: 97 -       * Caches given query result.

 Line: 101 -      RedisQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 130 -       * Stores given query result in the cache.

 Line: 132 -      RedisQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 175 -      RedisQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/cache/QueryResultCacheFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * Caches query result into Redis database.

 Line: 16 -       * Creates a new query result cache based on connection options.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/cache/DbQueryResultCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 40 -   * Caches query result into current database, into separate table called "query-result-cache".

 Line: 81 -                          queryRunner = this.getQueryRunner(queryRunner);

 Line: 83 -                          return [4 /*yield*/, queryRunner.hasTable("query-result-cache")];

 Line: 88 -                          return [4 /*yield*/, queryRunner.createTable(new Table("query-result-cache", [

 Line: 134 -       * Caches given query result.

 Line: 138 -      DbQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 139 -          queryRunner = this.getQueryRunner(queryRunner);

 Line: 153 -                  .setParameters({ query: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.query, "nvarchar") : options.query })

 Line: 165 -       * Stores given query result in the cache.

 Line: 167 -      DbQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 173 -                          queryRunner = this.getQueryRunner(queryRunner);

 Line: 180 -                                  query: new MssqlParameter(options.query, "nvarchar"),

 Line: 185 -                          return [4 /*yield*/, queryRunner.update("query-result-cache", insertedValues, { identifier: insertedValues.identifier })];

 Line: 191 -                          return [4 /*yield*/, queryRunner.update("query-result-cache", insertedValues, { query: insertedValues.query })];

 Line: 196 -                      return [4 /*yield*/, queryRunner.insert("query-result-cache", insertedValues)];

 Line: 218 -      DbQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

 Line: 237 -       * Gets a query runner to work with.

 Line: 241 -              return queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/logger/DebugLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -       * Logs query and parameters used in it.

 Line: 19 -      DebugLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 28 -       * Logs query that failed.

 Line: 30 -      DebugLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 40 -       * Logs query that is slow.

 Line: 42 -      DebugLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 54 -      DebugLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 62 -      DebugLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 71 -      DebugLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/logger/AdvancedConsoleLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -       * Logs query and parameters used in it.

 Line: 18 -      AdvancedConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 20 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 21 -              PlatformTools.logInfo("executing query:", PlatformTools.highlightSql(sql));

 Line: 25 -       * Logs query that is failed.

 Line: 27 -      AdvancedConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 29 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 35 -       * Logs query that is slow.

 Line: 37 -      AdvancedConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 38 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 45 -      AdvancedConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 53 -      AdvancedConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 60 -      AdvancedConsoleLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/logger/SimpleConsoleLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -       * Logs query and parameters used in it.

 Line: 17 -      SimpleConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 19 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 20 -              console.log("executing query" + ": " + sql);

 Line: 24 -       * Logs query that is failed.

 Line: 26 -      SimpleConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 28 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 34 -       * Logs query that is slow.

 Line: 36 -      SimpleConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 37 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 44 -      SimpleConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 52 -      SimpleConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 59 -      SimpleConsoleLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/logger/FileLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -       * Logs query and parameters used in it.

 Line: 18 -      FileLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 20 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 25 -       * Logs query that is failed.

 Line: 27 -      FileLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 29 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 37 -       * Logs query that is slow.

 Line: 39 -      FileLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 40 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 46 -      FileLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 54 -      FileLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 61 -      FileLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/metadata/types/EventListenerTypes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -      EventListenerTypes.BEFORE_INSERT = "before-insert";

 Line: 8 -      EventListenerTypes.AFTER_INSERT = "after-insert";

 Line: 9 -      EventListenerTypes.BEFORE_UPDATE = "before-update";

 Line: 10 -      EventListenerTypes.AFTER_UPDATE = "after-update";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/browser/metadata/ColumnMetadata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 30 -           * Indicates if column is selected by query builder or not.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/typeorm-browser.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 541 -               * Stores all join attributes which will be used to build a JOIN query.

 Line: 547 -                  function JoinAttribute(connection, queryExpressionMap, joinAttribute) {

 Line: 549 -                      this.queryExpressionMap = queryExpressionMap;

 Line: 1569 -               * Thrown when consumer tries to use query runner from query runner provider after it was released.

 Line: 1576 -                      _this.message = "Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.";

 Line: 1657 -                   * Creates a new query builder that can be used to build a sql query.

 Line: 1659 -                  Repository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 1660 -                      return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);

 Line: 1735 -                   * Executes fast and efficient INSERT query.

 Line: 1736 -                   * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 1779 -                   * Executes fast and efficient DELETE query.

 Line: 1793 -                   * Executes fast and efficient DELETE query.

 Line: 1868 -                   * Executes a raw SQL query and returns a raw database results.

 Line: 1869 -                   * Raw query execution is supported only by relational databases (MongoDB is not supported).

 Line: 1927 -                       * Indicates if connection for this query runner is released.

 Line: 1928 -                       * Once its released, query runner cannot run queries anymore.

 Line: 1929 -                       * Always false for mongodb since mongodb has a single query executor instance.

 Line: 1933 -                       * Indicates if transaction is active in this query executor.

 Line: 1949 -                   * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 1951 -                  MongoQueryRunner.prototype.cursor = function (collectionName, query) {

 Line: 1974 -                   * Count number of matching documents in the db to a query.

 Line: 1976 -                  MongoQueryRunner.prototype.count = function (collectionName, query, options) {

 Line: 2016 -                  MongoQueryRunner.prototype.deleteMany = function (collectionName, query, options) {

 Line: 2029 -                  MongoQueryRunner.prototype.deleteOne = function (collectionName, query, options) {

 Line: 2042 -                  MongoQueryRunner.prototype.distinct = function (collectionName, key, query, options) {

 Line: 2046 -                                  case 0: return [4 /*yield*/, this.getCollection(collectionName).distinct(key, query, options)];

 Line: 2081 -                  MongoQueryRunner.prototype.findOneAndDelete = function (collectionName, query, options) {

 Line: 2094 -                  MongoQueryRunner.prototype.findOneAndReplace = function (collectionName, query, replacement, options) {

 Line: 2107 -                  MongoQueryRunner.prototype.findOneAndUpdate = function (collectionName, query, update, options) {

 Line: 2308 -                  MongoQueryRunner.prototype.replaceOne = function (collectionName, query, doc, options) {

 Line: 2334 -                  MongoQueryRunner.prototype.updateMany = function (collectionName, query, update, options) {

 Line: 2347 -                  MongoQueryRunner.prototype.updateOne = function (collectionName, query, update, options) {

 Line: 2428 -                   * Executes a given SQL query.

 Line: 2431 -                      throw new Error("Executing SQL query is not supported by MongoDB driver.");

 Line: 2748 -                   * Enables special query runner mode in which sql queries won't be executed,

 Line: 2749 -                   * instead they will be memorized into a special variable inside query runner.

 Line: 2756 -                   * Disables special query runner mode in which sql queries won't be executed

 Line: 2956 -                          var queryRunner, promises;

 Line: 2960 -                                      queryRunner = this.connection.driver.createQueryRunner();

 Line: 2977 -                   * Returns query to be executed by schema builder.

 Line: 3272 -                   * Creates a query runner used to execute database queries.

 Line: 3280 -                   * and an array of parameter names to be passed to a query.

 Line: 3663 -                   * Applies give find one options to the given query builder.

 Line: 3673 -                   * Applies give find many options to the given query builder.

 Line: 3683 -                   * Applies give find options to the given query builder.

 Line: 3686 -                      // if options are not set then simply return query builder. This is made for simplicity of usage.

 Line: 3832 -                       * Gets query runner used to execute queries.

 Line: 3848 -                          var query, cursor;

 Line: 3852 -                                      query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 3853 -                                      return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 3876 -                          var query, cursor, _a, results, count;

 Line: 3880 -                                      query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 3881 -                                      return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 3894 -                                              this.count(entityClassOrName, query),

 Line: 3909 -                          var metadata, query, objectIdInstance, cursor;

 Line: 3914 -                                      query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};

 Line: 3916 -                                      query["_id"] = { $in: ids.map(function (id) {

 Line: 3921 -                                      return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 3943 -                          var query, cursor, result;

 Line: 3947 -                                      query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 3948 -                                      return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 3969 -                          var query, objectIdInstance, cursor, result;

 Line: 3973 -                                      query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};

 Line: 3975 -                                      query["_id"] = (id instanceof objectIdInstance)

 Line: 3978 -                                      return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 3997 -                   * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 3999 -                  MongoEntityManager.prototype.createCursor = function (entityClassOrName, query) {

 Line: 4001 -                      return this.queryRunner.cursor(metadata.tableName, query);

 Line: 4004 -                   * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 4007 -                  MongoEntityManager.prototype.createEntityCursor = function (entityClassOrName, query) {

 Line: 4009 -                      var cursor = this.createCursor(entityClassOrName, query);

 Line: 4066 -                   * Count number of matching documents in the db to a query.

 Line: 4068 -                  MongoEntityManager.prototype.count = function (entityClassOrName, query, options) {

 Line: 4070 -                      return this.queryRunner.count(metadata.tableName, query, options);

 Line: 4091 -                  MongoEntityManager.prototype.deleteMany = function (entityClassOrName, query, options) {

 Line: 4093 -                      return this.queryRunner.deleteMany(metadata.tableName, query, options);

 Line: 4098 -                  MongoEntityManager.prototype.deleteOne = function (entityClassOrName, query, options) {

 Line: 4100 -                      return this.queryRunner.deleteOne(metadata.tableName, query, options);

 Line: 4105 -                  MongoEntityManager.prototype.distinct = function (entityClassOrName, key, query, options) {

 Line: 4107 -                      return this.queryRunner.distinct(metadata.tableName, key, query, options);

 Line: 4126 -                  MongoEntityManager.prototype.findOneAndDelete = function (entityClassOrName, query, options) {

 Line: 4128 -                      return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);

 Line: 4133 -                  MongoEntityManager.prototype.findOneAndReplace = function (entityClassOrName, query, replacement, options) {

 Line: 4135 -                      return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);

 Line: 4140 -                  MongoEntityManager.prototype.findOneAndUpdate = function (entityClassOrName, query, update, options) {

 Line: 4142 -                      return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);

 Line: 4260 -                  MongoEntityManager.prototype.replaceOne = function (entityClassOrName, query, doc, options) {

 Line: 4262 -                      return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);

 Line: 4274 -                  MongoEntityManager.prototype.updateMany = function (entityClassOrName, query, update, options) {

 Line: 4276 -                      return this.queryRunner.updateMany(metadata.tableName, query, update, options);

 Line: 4281 -                  MongoEntityManager.prototype.updateOne = function (entityClassOrName, query, update, options) {

 Line: 4283 -                      return this.queryRunner.updateOne(metadata.tableName, query, update, options);

 Line: 4289 -                   * Converts FindManyOptions to mongodb query.

 Line: 4303 -                   * Converts FindOneOptions to mongodb query.

 Line: 4363 -                   * Raw SQL query execution is not supported by MongoDB.

 Line: 4373 -                  MongoRepository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 4411 -                   * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 4414 -                      return this.manager.createCursor(this.metadata.target, query);

 Line: 4417 -                   * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 4421 -                      return this.manager.createEntityCursor(this.metadata.target, query);

 Line: 4436 -                   * Count number of matching documents in the db to a query.

 Line: 4439 -                      return this.manager.count(this.metadata.target, query || {}, options);

 Line: 4459 -                      return this.manager.deleteMany(this.metadata.tableName, query, options);

 Line: 4465 -                      return this.manager.deleteOne(this.metadata.tableName, query, options);

 Line: 4470 -                  MongoRepository.prototype.distinct = function (key, query, options) {

 Line: 4471 -                      return this.manager.distinct(this.metadata.tableName, key, query, options);

 Line: 4489 -                      return this.manager.findOneAndDelete(this.metadata.tableName, query, options);

 Line: 4495 -                      return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);

 Line: 4501 -                      return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);

 Line: 4604 -                      return this.manager.replaceOne(this.metadata.tableName, query, doc, options);

 Line: 4616 -                      return this.manager.updateMany(this.metadata.tableName, query, update, options);

 Line: 4622 -                      return this.manager.updateOne(this.metadata.tableName, query, update, options);

 Line: 4729 -                   * Creates a query builder used to get descendants of the entities in a tree.

 Line: 4772 -                   * Creates a query builder used to get ancestors of the entities in the tree.

 Line: 5614 -                  function SubjectBuilder(connection, queryRunner) {

 Line: 5616 -                      this.queryRunner = queryRunner;

 Line: 5992 -                                                      // we cannot check if it was removed or not until we query the database

 Line: 6439 -                  EventListenerTypes.BEFORE_INSERT = "before-insert";

 Line: 6440 -                  EventListenerTypes.AFTER_INSERT = "after-insert";

 Line: 6441 -                  EventListenerTypes.BEFORE_UPDATE = "before-update";

 Line: 6442 -                  EventListenerTypes.AFTER_UPDATE = "after-update";

 Line: 6476 -                   * Broadcasts "BEFORE_INSERT", "BEFORE_UPDATE", "BEFORE_REMOVE" events for all given subjects.

 Line: 6498 -                   * Broadcasts "AFTER_INSERT", "AFTER_UPDATE", "AFTER_REMOVE" events for all given subjects.

 Line: 6520 -                   * Broadcasts "BEFORE_INSERT" event.

 Line: 6533 -                                          .filter(function (listener) { return listener.type === EventListenerTypes_1.EventListenerTypes.BEFORE_INSERT && listener.isAllowed(subject.entity); })

 Line: 6550 -                   * Broadcasts "BEFORE_UPDATE" event.

 Line: 6563 -                                          .filter(function (listener) { return listener.type === EventListenerTypes_1.EventListenerTypes.BEFORE_UPDATE && listener.isAllowed(subject.entity); })

 Line: 6615 -                   * Broadcasts "AFTER_INSERT" event.

 Line: 6628 -                                          .filter(function (listener) { return listener.type === EventListenerTypes_1.EventListenerTypes.AFTER_INSERT && listener.isAllowed(subject.entity); })

 Line: 6645 -                   * Broadcasts "AFTER_UPDATE" event.

 Line: 6658 -                                          .filter(function (listener) { return listener.type === EventListenerTypes_1.EventListenerTypes.AFTER_UPDATE && listener.isAllowed(subject.entity); })

 Line: 6817 -                  function SubjectOperationExecutor(connection, transactionEntityManager, queryRunner, subjects) {

 Line: 6826 -                      this.queryRunner = queryRunner;

 Line: 6850 -                   * Executes queries using given query runner.

 Line: 8148 -                   * Creates a new query builder for the repository's entity that can be used to build a sql query.

 Line: 8158 -                   * Creates a new query builder for the given entity that can be used to build a sql query.

 Line: 8305 -                  RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {

 Line: 8313 -                              queryRunner: queryRunner,

 Line: 8330 -                              queryRunner: queryRunner,

 Line: 8441 -                  function EntityManager(connection, queryRunner) {

 Line: 8451 -                          this.queryRunner = queryRunner;

 Line: 8516 -                   * Executes raw SQL query and returns raw database results.

 Line: 8526 -                   * Creates a new query builder that can be used to build a sql query.

 Line: 8528 -                  EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {

 Line: 8530 -                          return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);

 Line: 8617 -                          var queryRunner, transactionEntityManager, executors_1, finalTarget, metadata, databaseEntityLoader, executor, executorsNeedsToBeExecuted, isTransactionStartedByItself, error_1, rollbackError_2;

 Line: 8621 -                                      queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 8637 -                                                          databaseEntityLoader = new SubjectBuilder_1.SubjectBuilder(this.connection, queryRunner);

 Line: 8641 -                                                          executor = new SubjectOperationExecutor_1.SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 8653 -                                      databaseEntityLoader = new SubjectBuilder_1.SubjectBuilder(this.connection, queryRunner);

 Line: 8657 -                                      executor = new SubjectOperationExecutor_1.SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 8669 -                                      return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 8679 -                                      return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 8690 -                                      return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 8701 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 8715 -                   * Executes fast and efficient INSERT query.

 Line: 8716 -                   * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 8724 -                                  // todo: in the future create InsertResult with query result information

 Line: 8732 -                                      // todo: in the future create InsertResult with query result information

 Line: 8744 -                   * Executes fast and efficient UPDATE query.

 Line: 8752 -                                  // todo: in the future create UpdateResult with query result information

 Line: 8760 -                                      // todo: in the future create UpdateResult with query result information

 Line: 8772 -                   * Executes fast and efficient UPDATE query.

 Line: 8780 -                                  // todo: in the future create UpdateResult with query result information

 Line: 8788 -                                      // todo: in the future create UpdateResult with query result information

 Line: 8809 -                          var queryRunner, transactionEntityManager, executors_2, finalTarget, metadata, databaseEntityLoader, executor, executorsNeedsToBeExecuted, isTransactionStartedByItself, error_2, rollbackError_3;

 Line: 8813 -                                      queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 8829 -                                                          databaseEntityLoader = new SubjectBuilder_1.SubjectBuilder(this.connection, queryRunner);

 Line: 8833 -                                                          executor = new SubjectOperationExecutor_1.SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 8845 -                                      databaseEntityLoader = new SubjectBuilder_1.SubjectBuilder(this.connection, queryRunner);

 Line: 8849 -                                      executor = new SubjectOperationExecutor_1.SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 8861 -                                      return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 8871 -                                      return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 8882 -                                      return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 8893 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 8907 -                   * Executes fast and efficient DELETE query.

 Line: 8915 -                                  // todo: in the future create DeleteResult with query result information

 Line: 8923 -                                      // todo: in the future create DeleteResult with query result information

 Line: 8935 -                   * Executes fast and efficient DELETE query.

 Line: 8943 -                                  // todo: in the future create DeleteResult with query result information

 Line: 8951 -                                      // todo: in the future create DeleteResult with query result information

 Line: 9035 -                              // if no ids passed, no need to execute a query - just return an empty array of values

 Line: 9098 -                          var metadata, queryRunner;

 Line: 9103 -                                      queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 9107 -                                      return [4 /*yield*/, queryRunner.truncate(metadata.tablePath)];

 Line: 9111 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 9190 -                   * This is used when entity manager is created with a single query runner,

 Line: 9191 -                   * and this single query runner needs to be released after job with entity manager is done.

 Line: 9278 -                       * Indicates if connection for this query runner is released.

 Line: 9279 -                       * Once its released, query runner cannot run queries anymore.

 Line: 9295 -                       * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 9315 -                   * We don't do anything here because sqlite do not support multiple connections thus query runners.

 Line: 9380 -                   * Executes a given SQL query.

 Line: 9407 -                          var updateValues, conditionString, query, updateParams, conditionParams, allParameters;

 Line: 9413 -                                      query = "UPDATE \"" + tableName + "\" SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 9436 -                                      sql = "DELETE FROM \"" + tableName + "\" WHERE " + conditionString;

 Line: 9456 -                                          sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\", \"level\") " +

 Line: 9457 -                                              ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 9458 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 9461 -                                          sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\") " +

 Line: 9462 -                                              ("SELECT \"ancestor\", " + newEntityId + " FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 9463 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 9469 -                                      return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + tableName + " WHERE descendant = " + parentId)];

 Line: 9508 -                                      return [4 /*yield*/, this.query("SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (" + tableNamesString + ")")];

 Line: 9676 -                                      sql = "SELECT * FROM sqlite_master WHERE type = 'table' AND name = '" + tableName + "'";

 Line: 10021 -                                  case 0: return [4 /*yield*/, this.query("DELETE FROM \"" + tableName + "\"")];

 Line: 10047 -                                      selectDropsQuery = "select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'";

 Line: 10081 -                   * Enables special query runner mode in which sql queries won't be executed,

 Line: 10082 -                   * instead they will be memorized into a special variable inside query runner.

 Line: 10089 -                   * Disables special query runner mode in which sql queries won't be executed

 Line: 10115 -                   * Builds a query for create column.

 Line: 10159 -                                              sql1 += " ON DELETE " + foreignKey.onDelete;

 Line: 10174 -                                      sql2 = "INSERT INTO \"temporary_" + table.name + "\"(" + oldColumnNames + ") SELECT " + oldColumnNames + " FROM \"" + table.name + "\"";

 Line: 10370 -                                      // its important to disable this mode despite the fact we are release query builder

 Line: 10371 -                                      // because there exist drivers which reuse same query runner. Also its important to disable

 Line: 11072 -                   * Creates a query runner used to execute database queries.

 Line: 11141 -                   * and an array of parameter names to be passed to a query.

 Line: 11330 -               * Thrown when query execution has failed.

 Line: 11341 -                      Object.assign(_this, __assign({}, driverError, { name: "QueryFailedError", query: query, parameters: parameters || [] }));

 Line: 11397 -                       * Indicates if connection for this query runner is released.

 Line: 11398 -                       * Once its released, query runner cannot run queries anymore.

 Line: 11411 -                       * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 11451 -                   * You cannot use query runner methods once its released.

 Line: 11523 -                   * Executes a given SQL query.

 Line: 11531 -                          var queryStartTime_1, handler, executionOptions, databaseConnection, err_2;

 Line: 11537 -                                      queryStartTime_1 = +new Date();

 Line: 11541 -                                          var queryEndTime = +new Date();

 Line: 11542 -                                          var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 11543 -                                          if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 11544 -                                              _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 11546 -                                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 11592 -                                          ? "INSERT INTO \"" + tableName + "\" (" + columns + ") VALUES (" + values + ")"

 Line: 11593 -                                          : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 11619 -                                      sql = "UPDATE \"" + tableName + "\" SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 11642 -                                      sql = "DELETE FROM \"" + tableName + "\" WHERE " + conditionString;

 Line: 11662 -                                          sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\", \"level\") " +

 Line: 11663 -                                              ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 11664 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 11667 -                                          sql = "INSERT INTO \"" + tableName + "\" (\"ancestor\", \"descendant\") " +

 Line: 11668 -                                              ("SELECT \"ancestor\", " + newEntityId + " FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 11669 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 11674 -                                      return [4 /*yield*/, this.query("SELECT MAX(\"level\") as \"level\" FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId)];

 Line: 11711 -                                      tablesSql = "SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (" + tableNamesString + ")";

 Line: 11712 -                                      columnsSql = "SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (" + tableNamesString + ")";

 Line: 11713 -                                      indicesSql = "SELECT ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS, LISTAGG(cols.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY cols.COLUMN_NAME) AS COLUMN_NAMES\n                                FROM USER_INDEXES ind, USER_IND_COLUMNS cols \n                                WHERE ind.INDEX_NAME = cols.INDEX_NAME AND ind.TABLE_NAME IN (" + tableNamesString + ")\n                                GROUP BY ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS";

 Line: 11714 -                                      constraintsSql = "SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (" + tableNamesString + ") \nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position";

 Line: 11812 -                                      sql = "SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '" + tableName + "'";

 Line: 11884 -                                      sql = "SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '" + tableName + "' AND COLUMN_NAME = '" + columnName + "'";

 Line: 12131 -                                  sql += " ON DELETE " + foreignKey.onDelete;

 Line: 12256 -                                      dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS \"', table_name, '\";') AS query FROM information_schema.tables WHERE table_schema = '" + this.dbName + "'";

 Line: 12293 -                   * Enables special query runner mode in which sql queries won't be executed,

 Line: 12294 -                   * instead they will be memorized into a special variable inside query runner.

 Line: 12301 -                   * Disables special query runner mode in which sql queries won't be executed

 Line: 12336 -                   * Builds a query for create column.

 Line: 12573 -                   * Creates a query runner used to execute database queries.

 Line: 12581 -                   * and an array of parameter names to be passed to a query.

 Line: 13195 -                       * Indicates if connection for this query runner is released.

 Line: 13196 -                       * Once its released, query runner cannot run queries anymore.

 Line: 13209 -                       * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 13249 -                   * You cannot use query runner methods once its released.

 Line: 13317 -                   * Executes a raw SQL query.

 Line: 13325 -                          var databaseConnection, queryStartTime_2, err_3;

 Line: 13334 -                                      queryStartTime_2 = +new Date();

 Line: 13338 -                                          var queryEndTime = +new Date();

 Line: 13339 -                                          var queryExecutionTime = queryEndTime - queryStartTime_2;

 Line: 13340 -                                          if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 13341 -                                              _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 13343 -                                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 13406 -                                      sql = "INSERT INTO `" + this.escapeTablePath(tablePath) + "`(" + columns + ") VALUES (" + values + ")";

 Line: 13435 -                                      sql = "UPDATE `" + this.escapeTablePath(tablePath) + "` SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 13458 -                                      sql = "DELETE FROM `" + this.escapeTablePath(tablePath) + "` WHERE " + conditionString;

 Line: 13477 -                                      return [4 /*yield*/, this.query("INSERT INTO `" + this.escapeTablePath(tablePath) + "`(`ancestor`, `descendant`, `level`) " +

 Line: 13478 -                                              ("SELECT `ancestor`, " + newEntityId + ", `level` + 1 FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId + " ") +

 Line: 13479 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1"))];

 Line: 13483 -                                  case 2: return [4 /*yield*/, this.query("INSERT INTO `" + this.escapeTablePath(tablePath) + "`(`ancestor`, `descendant`) " +

 Line: 13484 -                                          ("SELECT `ancestor`, " + newEntityId + " FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId + " ") +

 Line: 13485 -                                          ("UNION ALL SELECT " + newEntityId + ", " + newEntityId))];

 Line: 13491 -                                      return [4 /*yield*/, this.query("SELECT MAX(`level`) as `level` FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId)];

 Line: 13541 -                                      tablesSql = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND TABLE_NAME IN (" + tableNamesString + ")";

 Line: 13542 -                                      columnsSql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN (" + databaseNamesString + ")";

 Line: 13543 -                                      indicesSql = "SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND INDEX_NAME != 'PRIMARY' ORDER BY SEQ_IN_INDEX";

 Line: 13544 -                                      foreignKeysSql = "SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND REFERENCED_COLUMN_NAME IS NOT NULL";

 Line: 13565 -                                                          return [4 /*yield*/, this.query("SHOW INDEX FROM `" + dbTable["TABLE_SCHEMA"] + "`.`" + dbTable["TABLE_NAME"] + "` WHERE Key_name = 'PRIMARY'")];

 Line: 13661 -                                  case 0: return [4 /*yield*/, this.query("SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '" + database + "'")];

 Line: 13679 -                                      sql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '" + parsedTablePath.database + "' AND TABLE_NAME = '" + parsedTablePath.tableName + "'";

 Line: 13699 -                                      sql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '" + parsedTablePath.database + "' AND TABLE_NAME = '" + parsedTablePath.tableName + "' AND COLUMN_NAME = '" + columnName + "'";

 Line: 13963 -                                  sql += " ON DELETE " + foreignKey.onDelete;

 Line: 14002 -                                  revertSql += " ON DELETE " + foreignKey.onDelete;

 Line: 14106 -                                      dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`;') AS query FROM information_schema.tables WHERE table_schema = '" + database + "'";

 Line: 14143 -                   * Enables special query runner mode in which sql queries won't be executed,

 Line: 14144 -                   * instead they will be memorized into a special variable inside query runner.

 Line: 14151 -                   * Disables special query runner mode in which sql queries won't be executed

 Line: 14216 -                   * Builds a part of query to create/change a column.

 Line: 14467 -                   * Creates a query runner used to execute database queries.

 Line: 14475 -                   * and an array of parameter names to be passed to a query.

 Line: 14749 -                          // we give error before calling any other method that creates actual query runner

 Line: 14772 -               * Sql server driver requires parameter types to be specified fo input parameters used in the query.

 Line: 14850 -                       * Indicates if connection for this query runner is released.

 Line: 14851 -                       * Once its released, query runner cannot run queries anymore.

 Line: 14864 -                       * Last executed query in a transaction.

 Line: 14866 -                       * that's why we store last executed query promise to wait it when we execute next query.

 Line: 14872 -                       * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 14895 -                   * You cannot use query runner methods once its released.

 Line: 15055 -                   * Executes a given SQL query.

 Line: 15077 -                                          var pool, request_1, queryStartTime_3, err_5;

 Line: 15103 -                                                      queryStartTime_3 = +new Date();

 Line: 15107 -                                                          var queryEndTime = +new Date();

 Line: 15108 -                                                          var queryExecutionTime = queryEndTime - queryStartTime_3;

 Line: 15109 -                                                          if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 15110 -                                                              _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 15121 -                                                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 15198 -                                                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 15235 -                                      generatedColumnNames = generatedColumns.map(function (generatedColumn) { return "INSERTED.\"" + generatedColumn.databaseName + "\""; }).join(", ");

 Line: 15238 -                                          ? "INSERT INTO " + this.escapeTablePath(tablePath) + "(" + columns + ") " + generatedColumnSql + " VALUES (" + values + ")"

 Line: 15239 -                                          : "INSERT INTO " + this.escapeTablePath(tablePath) + " " + generatedColumnSql + " DEFAULT VALUES ";

 Line: 15273 -                                      sql = "UPDATE " + this.escapeTablePath(tablePath) + " SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 15294 -                                      sql = "DELETE FROM " + this.escapeTablePath(tablePath) + " WHERE " + conditionString;

 Line: 15314 -                                          sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\", \"level\") " +

 Line: 15315 -                                              ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 15316 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 15319 -                                          sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\") " +

 Line: 15320 -                                              ("SELECT \"ancestor\", " + newEntityId + " FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 15321 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 15327 -                                      return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + this.escapeTablePath(tablePath) + " WHERE descendant = " + parentId)];

 Line: 15398 -                                          return "SELECT * FROM " + dbName + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN (" + tableNamesString + ") AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 15399 -                                      }).join(" UNION ALL ");

 Line: 15401 -                                          return "SELECT * FROM " + dbName + ".INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 15402 -                                      }).join(" UNION ALL ");

 Line: 15404 -                                          return "SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM " + dbName + ".INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages " +

 Line: 15406 -                                              ("WHERE columnUsages.TABLE_SCHEMA IN (" + schemaNamesString + ") AND tableConstraints.TABLE_SCHEMA IN (" + schemaNamesString + ")");

 Line: 15407 -                                      }).join(" UNION ALL ");

 Line: 15409 -                                          return "SELECT COLUMN_NAME, TABLE_NAME FROM " + dbName + ".INFORMATION_SCHEMA.COLUMNS WHERE COLUMNPROPERTY(object_id(TABLE_SCHEMA + '.' + TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1 AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 15410 -                                      }).join(" UNION ALL ");

 Line: 15412 -                                          return "SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, \n                    COLUMN_NAME = col.name, IS_UNIQUE = ind.is_unique, ind.*, ic.*, col.* \n                    FROM " + dbName + ".sys.indexes ind \n                    INNER JOIN " + dbName + ".sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id\n                    INNER JOIN " + dbName + ".sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id \n                    INNER JOIN " + dbName + ".sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 \n                    AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0";

 Line: 15413 -                                      }).join(" UNION ALL ");

 Line: 15523 -                                  case 0: return [4 /*yield*/, this.query("SELECT DB_ID('" + database + "') as db_id")];

 Line: 15542 -                                      sql = "SELECT * FROM " + parsedTablePath.database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" + parsedTablePath.tableName + "' AND TABLE_SCHEMA = " + (parsedTablePath.schema === "SCHEMA_NAME()" ? parsedTablePath.schema : "'" + parsedTablePath.schema + "'");

 Line: 15565 -                          var query, dbName, schema, currentDBQuery, currentDB, query;

 Line: 15570 -                                      query = "IF SCHEMA_ID('" + path + "') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA " + path + "' END";

 Line: 15575 -                                      return [4 /*yield*/, this.query("SELECT DB_NAME() AS db_name")];

 Line: 15582 -                                      query = "IF SCHEMA_ID('" + schema + "') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA " + schema + "' END";

 Line: 15649 -                                      sql = "SELECT * FROM " + parsedTablePath.database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" + parsedTablePath.tableName + "' AND COLUMN_NAME = '" + columnName + "' AND TABLE_SCHEMA = " + (parsedTablePath.schema === "SCHEMA_NAME()" ? parsedTablePath.schema : "'" + parsedTablePath.schema + "'");

 Line: 15881 -                                      oldPrimaryKeySql = "SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM " + database + ".INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\nLEFT JOIN " + database + ".INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\nWHERE tableConstraints.TABLE_CATALOG = '" + database + "' AND columnUsages.TABLE_SCHEMA = '" + schema + "' AND tableConstraints.TABLE_SCHEMA = '" + schema + "'";

 Line: 15915 -                                  sql += " ON DELETE " + foreignKey.onDelete;

 Line: 16048 -                                      allTablesSql = "SELECT * FROM " + database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 16058 -                                                          dropForeignKeySql = "SELECT 'ALTER TABLE \"" + database + "\".\"' + OBJECT_SCHEMA_NAME(fk.parent_object_id, DB_ID('" + database + "')) + '\".\"' + OBJECT_NAME(fk.parent_object_id, DB_ID('" + database + "')) + '\" DROP CONSTRAINT \"' + fk.name + '\"' as query FROM " + database + ".sys.foreign_keys AS fk WHERE fk.referenced_object_id = object_id('\"" + database + "\".\"" + tablesResult["TABLE_SCHEMA"] + "\".\"" + tablesResult["TABLE_NAME"] + "\"')";

 Line: 16099 -                   * Enables special query runner mode in which sql queries won't be executed,

 Line: 16100 -                   * instead they will be memorized into a special variable inside query runner.

 Line: 16107 -                   * Disables special query runner mode in which sql queries won't be executed

 Line: 16187 -                   * Builds a query for create column.

 Line: 16431 -                   * Creates a query runner used to execute database queries.

 Line: 16439 -                   * and an array of parameter names to be passed to a query.

 Line: 16807 -                       * Indicates if connection for this query runner is released.

 Line: 16808 -                       * Once its released, query runner cannot run queries anymore.

 Line: 16821 -                       * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 16867 -                   * You cannot use query runner methods once its released.

 Line: 16938 -                   * Executes a given SQL query.

 Line: 16944 -                      // console.log("query: ", query);

 Line: 16948 -                          var databaseConnection, queryStartTime;

 Line: 16955 -                                      queryStartTime = +new Date();

 Line: 16959 -                                          var queryEndTime = +new Date();

 Line: 16960 -                                          var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 16961 -                                          if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 16962 -                                              _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 16964 -                                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 17027 -                                          ? "INSERT INTO " + this.escapeTablePath(tablePath) + "(" + columns + ") VALUES (" + values + ") " + generatedColumnSql

 Line: 17028 -                                          : "INSERT INTO " + this.escapeTablePath(tablePath) + " DEFAULT VALUES " + generatedColumnSql;

 Line: 17050 -                          var updateValues, conditionString, query, updateParams, conditionParams, allParameters;

 Line: 17056 -                                      query = "UPDATE " + this.escapeTablePath(tablePath) + " SET " + updateValues + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 17079 -                                      sql = "DELETE FROM " + this.escapeTablePath(tablePath) + " WHERE " + conditionString;

 Line: 17101 -                                          sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\", \"level\") " +

 Line: 17102 -                                              ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 17103 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 17106 -                                          sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\") " +

 Line: 17107 -                                              ("SELECT \"ancestor\", " + newEntityId + " FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 17108 -                                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 17114 -                                      return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + this.escapeTablePath(tablePath) + " WHERE descendant = " + parentId)];

 Line: 17155 -                                      return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 17173 -                                      tablesSql = "SELECT * FROM information_schema.tables WHERE " + tablesCondition;

 Line: 17174 -                                      columnsSql = "SELECT * FROM information_schema.columns WHERE table_schema IN (" + schemaNamesString + ")";

 Line: 17175 -                                      indicesSql = "SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name, ix.indisunique AS is_unique, a.attnum, ix.indkey FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (" + tableNamesString + ") AND t.relnamespace = ns.OID AND ns.nspname IN (" + schemaNamesString + ") ORDER BY t.relname, i.relname";

 Line: 17176 -                                      foreignKeysSql = "SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_schema IN (" + schemaNamesString + ") AND constraint_type = 'FOREIGN KEY'";

 Line: 17177 -                                      uniqueKeysSql = "SELECT * FROM information_schema.table_constraints WHERE table_schema IN (" + schemaNamesString + ") AND constraint_type = 'UNIQUE'";

 Line: 17178 -                                      primaryKeysSql = "SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema IN (" + schemaNamesString + ")";

 Line: 17292 -                                      sql = "SELECT * FROM information_schema.tables WHERE table_schema = " + parsedTablePath.schema + " AND table_name = " + parsedTablePath.tableName;

 Line: 17378 -                                      sql = "SELECT * FROM information_schema.columns WHERE table_schema = " + parsedTablePath.schema + " AND table_name = '" + parsedTablePath.tableName + "' AND column_name = '" + columnName + "'";

 Line: 17796 -                                      selectDropsQuery = "SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname IN (" + schemaNamesString + ")";

 Line: 17826 -                   * Enables special query runner mode in which sql queries won't be executed,

 Line: 17827 -                   * instead they will be memorized into a special variable inside query runner.

 Line: 17834 -                   * Disables special query runner mode in which sql queries won't be executed

 Line: 17889 -                          add += " ON DELETE " + foreignKey.onDelete;

 Line: 17935 -                   * Builds a query for create column.

 Line: 18013 -                       * We store all created query runners because we need to release them.

 Line: 18261 -                   * Creates a query runner used to execute database queries.

 Line: 18336 -                   * and an array of parameter names to be passed to a query.

 Line: 18550 -                   * Loads postgres query stream package.

 Line: 18615 -                                  case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];

 Line: 18626 -                   * Executes given query.

 Line: 18628 -                  PostgresDriver.prototype.executeQuery = function (connection, query) {

 Line: 18652 -               * Allows to use brackets in WHERE expressions for better syntax.

 Line: 18656 -                   * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.

 Line: 18739 -               * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.

 Line: 18744 -                      var _this = _super.call(this, "Your database does not support LIMIT on UPDATE statements.") || this;

 Line: 18789 -                  function UpdateQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 18790 -                      var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 18798 -                   * Gets generated sql query without parameters being replaced.

 Line: 18823 -                   * Sets WHERE condition in the query builder.

 Line: 18824 -                   * If you had previously WHERE expression defined,

 Line: 18825 -                   * calling this function will override previously set WHERE conditions.

 Line: 18838 -                   * Adds new AND WHERE condition in the query builder.

 Line: 18848 -                   * Adds new OR WHERE condition in the query builder.

 Line: 18858 -                   * Adds new AND WHERE with conditions for the given ids.

 Line: 18867 -                   * Adds new AND WHERE with conditions for the given ids.

 Line: 18876 -                   * Adds new OR WHERE with conditions for the given ids.

 Line: 18885 -                   * Sets ORDER BY condition in the query builder.

 Line: 18911 -                   * Adds ORDER BY condition in the query builder.

 Line: 18945 -                   * Creates UPDATE express used to perform insert query.

 Line: 18955 -                              // todo: make this and other query builder to work with properly with tables without metadata

 Line: 18992 -                      // generate and return sql update query

 Line: 18994 -                          return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + this.expressionMap.returning;

 Line: 18997 -                          return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + this.expressionMap.returning + whereExpression;

 Line: 19000 -                          return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?

 Line: 19004 -                   * Creates "ORDER BY" part of SQL query.

 Line: 19023 -                   * Creates "LIMIT" parts of SQL query.

 Line: 19043 -                      throw new Error("Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify inserted values.");

 Line: 19076 -                  function DeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 19077 -                      var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 19085 -                   * Gets generated sql query without parameters being replaced.

 Line: 19095 -                   * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 19104 -                   * Sets WHERE condition in the query builder.

 Line: 19105 -                   * If you had previously WHERE expression defined,

 Line: 19106 -                   * calling this function will override previously set WHERE conditions.

 Line: 19119 -                   * Adds new AND WHERE condition in the query builder.

 Line: 19129 -                   * Adds new OR WHERE condition in the query builder.

 Line: 19139 -                   * Adds new AND WHERE with conditions for the given ids.

 Line: 19148 -                   * Adds new AND WHERE with conditions for the given ids.

 Line: 19156 -                   * Adds new OR WHERE with conditions for the given ids.

 Line: 19184 -                   * Creates DELETE express used to perform query.

 Line: 19189 -                          return "DELETE FROM " + this.getTableName(this.getMainTableName()) + whereExpression + " RETURNING " + this.expressionMap.returning;

 Line: 19192 -                          return "DELETE FROM " + this.getTableName(this.getMainTableName()) + " OUTPUT " + this.expressionMap.returning + whereExpression;

 Line: 19195 -                          return "DELETE FROM " + this.getTableName(this.getMainTableName()) + whereExpression; // todo: how do we replace aliases in where to nothing?

 Line: 19236 -                   * Gets generated sql query without parameters being replaced.

 Line: 19289 -                   * Creates INSERT express used to perform insert query.

 Line: 19359 -                      // generate sql query

 Line: 19361 -                          return "INSERT INTO " + this.getTableName(this.getMainTableName()) + (columnNames ? "(" + columnNames + ")" : "") + " VALUES " + values + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "") + " RETURNING " + this.expressionMap.returning;

 Line: 19364 -                          return "INSERT INTO " + this.getTableName(this.getMainTableName()) + "(" + columnNames + ") OUTPUT " + this.expressionMap.returning + " VALUES " + values;

 Line: 19367 -                          return "INSERT INTO " + this.getTableName(this.getMainTableName()) + "(" + columnNames + ") VALUES " + values + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "");

 Line: 19378 -                      throw new Error("Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.");

 Line: 19403 -                      this.queryBuilder = queryBuilder;

 Line: 19544 -                      this.queryBuilder = queryBuilder;

 Line: 19681 -                   * example: SELECT category.id AS category_id, category.name AS category_name FROM category category

 Line: 19682 -                   *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1

 Line: 19704 -                   * SELECT post

 Line: 19705 -                   * FROM post post

 Line: 19706 -                   * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]

 Line: 19722 -                   * SELECT category

 Line: 19723 -                   * FROM category category

 Line: 19752 -                   * SELECT post

 Line: 19753 -                   * FROM post post

 Line: 19819 -                   * Gets generated sql query without parameters being replaced.

 Line: 20042 -                   * Executes a given SQL query.

 Line: 20049 -                          var databaseConnection, queryStartTime, statement, maxQueryExecutionTime, queryEndTime, queryExecutionTime, result;

 Line: 20056 -                                      queryStartTime = +new Date();

 Line: 20061 -                                          queryEndTime = +new Date();

 Line: 20062 -                                          queryExecutionTime = queryEndTime - queryStartTime;

 Line: 20063 -                                          if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 20064 -                                              this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 20093 -                              sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 20114 -                                                          value = databaseConnection.exec("SELECT last_insert_rowid()")[0].values[0][0];

 Line: 20295 -                   * Creates a query runner used to execute database queries.

 Line: 20484 -              // todo: completely cover query builder with tests

 Line: 20494 -              // todo: implement relation/entity loading and setting them into properties within a separate query

 Line: 20504 -                  function QueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 20512 -                          this.queryRunner = queryRunner;

 Line: 20521 -                       * Gets the main alias string used in this query builder.

 Line: 20532 -                   * Creates SELECT query and selects given data.

 Line: 20550 -                   * Creates INSERT query.

 Line: 20561 -                   * Creates UPDATE query and applies given update values.

 Line: 20578 -                   * Creates DELETE query.

 Line: 20589 -                   * Sets entity's relation with which this query builder gonna work.

 Line: 20629 -                      // set parent query builder parameters as well in sub-query mode

 Line: 20657 -                   * Parameters in the query are escaped for the currently used driver.

 Line: 20670 -                   * Gets query to be executed with all parameters used in it.

 Line: 20676 -                   * Executes sql generated by query builder and returns raw database results.

 Line: 20680 -                          var _a, sql, parameters, queryRunner;

 Line: 20685 -                                      queryRunner = this.obtainQueryRunner();

 Line: 20689 -                                      return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 20693 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 20710 -                   * Creates a completely new query builder.

 Line: 20711 -                   * Uses same query runner as current QueryBuilder.

 Line: 20717 -                   * Clones query builder as it is.

 Line: 20718 -                   * Note: it uses new query runner, if you want query builder that uses exactly same query runner,

 Line: 20719 -                   * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)

 Line: 20720 -                   * where queryBuilder is cloned QueryBuilder.

 Line: 20741 -                   * Sets or overrides query builder's QueryRunner.

 Line: 20744 -                      this.queryRunner = queryRunner;

 Line: 20799 -                   * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 20863 -                   * Creates "WHERE" expression.

 Line: 20871 -                              return " WHERE " + (conditions.length ? "(" + conditions + ") AND" : "") + " " + condition;

 Line: 20875 -                          return this.expressionMap.extraAppendedAndWhereCondition ? " WHERE " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : "";

 Line: 20877 -                          return " WHERE (" + conditions + ") AND " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);

 Line: 20878 -                      return " WHERE " + conditions;

 Line: 20897 -                   * Creates "WHERE" expression and variables for the given "ids".

 Line: 20972 -                   * Creates a query builder used to execute sql queries inside this query builder.

 Line: 21004 -               * Contains all properties of the QueryBuilder that needs to be build a final query.

 Line: 21020 -                       * All aliases (including main alias) used in the query.

 Line: 21024 -                       * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.

 Line: 21028 -                       * Data needs to be SELECT-ed.

 Line: 21036 -                       * Optional on conflict statement used in insertion query in postgres.

 Line: 21052 -                       * WHERE queries.

 Line: 21068 -                       * Parameters used to be escaped in final query.

 Line: 21093 -                       * Indicates if query builder creates a subquery.

 Line: 21098 -                       * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,

 Line: 21099 -                       * but user can use them in WHERE expressions.

 Line: 21103 -                       * Indicates if query result cache is enabled or not.

 Line: 21108 -                       * Used in INSERT query.

 Line: 21191 -                       * Gets relation metadata of the relation this query builder works with.

 Line: 21265 -               * Stores all join relation id attributes which will be used to build a JOIN query.

 Line: 21272 -                      this.queryExpressionMap = queryExpressionMap;

 Line: 21800 -               * Thrown when an optimistic lock cannot be used in query builder.

 Line: 21828 -                  function RelationIdLoader(connection, queryRunner, relationIdAttributes) {

 Line: 21830 -                      this.queryRunner = queryRunner;

 Line: 21883 -                                              // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 21896 -                                              // apply condition (custom query builder factory)

 Line: 21920 -                                              // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 21949 -                                              // apply condition (custom query builder factory)

 Line: 22027 -                          queryBuilderFactory: relationId.queryBuilderFactory

 Line: 22047 -                  function RelationCountLoader(connection, queryRunner, relationCountAttributes) {

 Line: 22049 -                      this.queryRunner = queryRunner;

 Line: 22077 -                                              // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 22087 -                                              // apply condition (custom query builder factory)

 Line: 22116 -                                              // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 22131 -                                              // apply condition (custom query builder factory)

 Line: 22260 -                          queryBuilderFactory: relationCount.queryBuilderFactory

 Line: 22311 -               * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.

 Line: 22316 -                      var _this = _super.call(this, driverName + " does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).") || this;

 Line: 22410 -                   * Gets generated sql query without parameters being replaced.

 Line: 22431 -                   * Creates a subquery - query that can be used inside other queries.

 Line: 22440 -                   * Creates SELECT query and selects given data.

 Line: 22459 -                   * Adds new selection to the SELECT query.

 Line: 22478 -                   * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 22488 -                   * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 22518 -                   * INNER JOINs and adds all selection properties to SELECT.

 Line: 22529 -                   * LEFT JOINs and adds all selection properties to SELECT.

 Line: 22540 -                   * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 22553 -                   * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 22566 -                   * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 22579 -                   * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 22595 -                  SelectQueryBuilder.prototype.loadRelationIdAndMap = function (mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {

 Line: 22603 -                      relationIdAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 22618 -                  SelectQueryBuilder.prototype.loadRelationCountAndMap = function (mapToProperty, relationName, aliasName, queryBuilderFactory) {

 Line: 22623 -                      relationCountAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 22650 -                   * Sets WHERE condition in the query builder.

 Line: 22651 -                   * If you had previously WHERE expression defined,

 Line: 22652 -                   * calling this function will override previously set WHERE conditions.

 Line: 22665 -                   * Adds new AND WHERE condition in the query builder.

 Line: 22675 -                   * Adds new OR WHERE condition in the query builder.

 Line: 22685 -                   * Adds new AND WHERE with conditions for the given ids.

 Line: 22699 -                   * Adds new AND WHERE with conditions for the given ids.

 Line: 22712 -                   * Adds new OR WHERE with conditions for the given ids.

 Line: 22725 -                   * Sets HAVING condition in the query builder.

 Line: 22737 -                   * Adds new AND HAVING condition in the query builder.

 Line: 22747 -                   * Adds new OR HAVING condition in the query builder.

 Line: 22757 -                   * Sets GROUP BY condition in the query builder.

 Line: 22771 -                   * Adds GROUP BY condition in the query builder.

 Line: 22778 -                   * Sets ORDER BY condition in the query builder.

 Line: 22804 -                   * Adds ORDER BY condition in the query builder.

 Line: 22819 -                   * If you want to implement pagination, and you are having join in your query,

 Line: 22829 -                   * If you want to implement pagination, and you are having join in your query,

 Line: 22859 -                   * Gets first raw result returned by execution of generated query builder sql.

 Line: 22872 -                   * Gets all raw results returned by execution of generated query builder sql.

 Line: 22876 -                          var queryRunner;

 Line: 22883 -                                      queryRunner = this.obtainQueryRunner();

 Line: 22891 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 22902 -                   * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 22906 -                          var queryRunner;

 Line: 22910 -                                      queryRunner = this.obtainQueryRunner();

 Line: 22919 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 22930 -                   * Gets single entity returned by execution of generated query builder sql.

 Line: 22960 -                   * Gets entities returned by execution of generated query builder sql.

 Line: 22979 -                   * Gets count - number of entities selected by sql generated by this query builder.

 Line: 22984 -                          var queryRunner;

 Line: 22990 -                                      queryRunner = this.obtainQueryRunner();

 Line: 22998 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 23009 -                   * Executes built SQL query and returns entities and overall entities count (without limitation).

 Line: 23014 -                          var queryRunner, entitiesAndRaw, count;

 Line: 23020 -                                      queryRunner = this.obtainQueryRunner();

 Line: 23033 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 23044 -                   * Executes built SQL query and returns raw data stream.

 Line: 23049 -                          var _a, sql, parameters, queryRunner, releaseFn;

 Line: 23055 -                                      queryRunner = this.obtainQueryRunner();

 Line: 23061 -                                              return queryRunner.release();

 Line: 23064 -                                      return [2 /*return*/, queryRunner.stream(sql, parameters, releaseFn, releaseFn)];

 Line: 23067 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 23078 -                   * Enables or disables query result caching.

 Line: 23145 -                   * Creates "SELECT FROM" part of SQL query.

 Line: 23150 -                          throw new Error("Cannot build query because main alias is not set (call qb#from method)");

 Line: 23223 -                      // create a selection query

 Line: 23233 -                          return "SELECT ROWNUM " + this.escape("RN") + "," + selection + " FROM " + froms.join(", ") + lock;

 Line: 23234 -                      return "SELECT " + selection + " FROM " + froms.join(", ") + lock;

 Line: 23237 -                   * Creates "JOIN" part of SQL query.

 Line: 23320 -                   * Creates "GROUP BY" part of SQL query.

 Line: 23328 -                   * Creates "ORDER BY" part of SQL query.

 Line: 23347 -                   * Creates "LIMIT" and "OFFSET" parts of SQL query for Oracle database.

 Line: 23351 -                          sql = "SELECT * FROM (" + sql + ") WHERE ";

 Line: 23362 -                   * Creates "LIMIT" and "OFFSET" parts of SQL query.

 Line: 23367 -                      // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results

 Line: 23409 -                   * Creates "LOCK" part of SQL query.

 Line: 23428 -                                  return " FOR UPDATE";

 Line: 23441 -                   * Creates "HAVING" part of SQL query.

 Line: 23546 -                   * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 23551 -                          var metadata, broadcaster, relationIdLoader, relationCountLoader, relationIdMetadataTransformer, relationCountMetadataTransformer, rawResults, entities, _a, selects, orderBys_1, metadata_1, mainAliasName_1, querySelects, condition, parameters_6, ids, areAllNumbers, rawRelationIdResults, rawRelationCountResults, transformer;

 Line: 23565 -                                      relationIdLoader = new RelationIdLoader_1.RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);

 Line: 23566 -                                      relationCountLoader = new RelationCountLoader_1.RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);

 Line: 23576 -                                      querySelects = metadata_1.primaryColumns.map(function (primaryColumn) {

 Line: 23583 -                                      return [4 /*yield*/, new SelectQueryBuilder(this.connection, queryRunner)

 Line: 23584 -                                              .select("DISTINCT " + querySelects.join(", "))

 Line: 23610 -                                              // fixes #190. if all numbers then its safe to perform query without parameter

 Line: 23706 -                                              query: this.getSql(),

 Line: 23708 -                                          }, queryRunner)];

 Line: 23714 -                                  case 2: return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 23720 -                                              query: this.getSql(),

 Line: 23724 -                                          }, savedQueryResultCacheOptions, queryRunner)];

 Line: 23749 -                   * Creates a query builder used to execute sql queries inside this query builder.

 Line: 25034 -                       * Indicates if column is selected by query builder or not.

 Line: 25751 -                  function MigrationExecutor(connection, queryRunner) {

 Line: 25753 -                      this.queryRunner = queryRunner;

 Line: 25765 -                          var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, pendingMigrations, transactionStartedByUs, err_7, rollbackError_10;

 Line: 25769 -                                      queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 25804 -                                      return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 25823 -                                      return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 25834 -                                      return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 25844 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 25859 -                          var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_8, rollbackError_11;

 Line: 25863 -                                      queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 25889 -                                      return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 25904 -                                      return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 25915 -                                      return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 25925 -                                      return [4 /*yield*/, queryRunner.release()];

 Line: 25946 -                                  case 0: return [4 /*yield*/, queryRunner.hasTable("migrations")];

 Line: 25950 -                                      return [4 /*yield*/, queryRunner.createTable(new Table_7.Table("migrations", [

 Line: 26023 -                                      return [4 /*yield*/, queryRunner.insert("migrations", {

 Line: 26030 -                                  case 2: return [4 /*yield*/, queryRunner.insert("migrations", {

 Line: 26051 -                                      return [4 /*yield*/, queryRunner.delete("migrations", {

 Line: 26058 -                                  case 2: return [4 /*yield*/, queryRunner.delete("migrations", {

 Line: 26615 -                  function SqljsEntityManager(connection, queryRunner) {

 Line: 26616 -                      var _this = _super.call(this, connection, queryRunner) || this;

 Line: 26690 -                  EntityManagerFactory.prototype.create = function (connection, queryRunner) {

 Line: 26694 -                          return new SqljsEntityManager_1.SqljsEntityManager(connection, queryRunner);

 Line: 26695 -                      return new EntityManager_3.EntityManager(connection, queryRunner);

 Line: 26846 -                   * Executes a given SQL query.

 Line: 26854 -                          var db, queryStartTime_4, err_9;

 Line: 26864 -                                      queryStartTime_4 = +new Date();

 Line: 26869 -                                              var queryEndTime = +new Date();

 Line: 26870 -                                              var queryExecutionTime = queryEndTime - queryStartTime_4;

 Line: 26871 -                                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 26872 -                                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 26879 -                                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 26906 -                              sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 26958 -                                      return [4 /*yield*/, this.query("SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (" + tableNamesString + ")")];

 Line: 27085 -                                      selectDropsQuery = "select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'";

 Line: 27190 -                   * Creates a query runner used to execute database queries.

 Line: 27216 -                   * and an array of parameter names to be passed to a query.

 Line: 27289 -                   * Executes a given SQL query.

 Line: 27297 -                          var databaseConnection, queryStartTime;

 Line: 27304 -                                      queryStartTime = +new Date();

 Line: 27308 -                                          var queryEndTime = +new Date();

 Line: 27309 -                                          var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 27310 -                                          if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 27311 -                                              _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 27313 -                                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 27338 -                              sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 27443 -                   * Creates a query runner used to execute database queries.

 Line: 27553 -                   * Executes a given SQL query.

 Line: 27561 -                          var databaseConnection, queryStartTime;

 Line: 27568 -                                      queryStartTime = +new Date();

 Line: 27572 -                                          var queryEndTime = +new Date();

 Line: 27573 -                                          var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 27574 -                                          if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 27575 -                                              _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 27585 -                                          _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 27606 -                              sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 27714 -                   * Creates a query runner used to execute database queries.

 Line: 29496 -                   * Logs query and parameters used in it.

 Line: 29498 -                  SimpleConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 29500 -                          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29501 -                          console.log("executing query" + ": " + sql);

 Line: 29505 -                   * Logs query that is failed.

 Line: 29507 -                  SimpleConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 29509 -                          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29515 -                   * Logs query that is slow.

 Line: 29517 -                  SimpleConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 29518 -                      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29525 -                  SimpleConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 29533 -                  SimpleConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 29540 -                  SimpleConsoleLogger.prototype.log = function (level, message, queryRunner) {

 Line: 29603 -                   * Logs query and parameters used in it.

 Line: 29605 -                  AdvancedConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 29607 -                          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29608 -                          PlatformTools_11.PlatformTools.logInfo("executing query:", PlatformTools_11.PlatformTools.highlightSql(sql));

 Line: 29612 -                   * Logs query that is failed.

 Line: 29614 -                  AdvancedConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 29616 -                          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29622 -                   * Logs query that is slow.

 Line: 29624 -                  AdvancedConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 29625 -                      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29632 -                  AdvancedConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 29640 -                  AdvancedConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 29647 -                  AdvancedConsoleLogger.prototype.log = function (level, message, queryRunner) {

 Line: 29710 -                   * Logs query and parameters used in it.

 Line: 29712 -                  FileLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 29714 -                          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29719 -                   * Logs query that is failed.

 Line: 29721 -                  FileLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 29723 -                          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29731 -                   * Logs query that is slow.

 Line: 29733 -                  FileLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 29734 -                      var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 29740 -                  FileLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 29748 -                  FileLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 29755 -                  FileLogger.prototype.log = function (level, message, queryRunner) {

 Line: 29828 -                   * Logs query and parameters used in it.

 Line: 29830 -                  DebugLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 29839 -                   * Logs query that failed.

 Line: 29841 -                  DebugLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 29851 -                   * Logs query that is slow.

 Line: 29853 -                  DebugLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 29865 -                  DebugLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 29873 -                  DebugLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 29882 -                  DebugLogger.prototype.log = function (level, message, queryRunner) {

 Line: 29980 -               * Caches query result into Redis database.

 Line: 30040 -                   * Caches given query result.

 Line: 30044 -                  RedisQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 30073 -                   * Stores given query result in the cache.

 Line: 30075 -                  RedisQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 30118 -                  RedisQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

 Line: 30187 -               * Caches query result into current database, into separate table called "query-result-cache".

 Line: 30228 -                                      queryRunner = this.getQueryRunner(queryRunner);

 Line: 30230 -                                      return [4 /*yield*/, queryRunner.hasTable("query-result-cache")];

 Line: 30235 -                                      return [4 /*yield*/, queryRunner.createTable(new Table_9.Table("query-result-cache", [

 Line: 30281 -                   * Caches given query result.

 Line: 30285 -                  DbQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 30286 -                      queryRunner = this.getQueryRunner(queryRunner);

 Line: 30300 -                              .setParameters({ query: this.connection.driver instanceof SqlServerDriver_9.SqlServerDriver ? new MssqlParameter_4.MssqlParameter(options.query, "nvarchar") : options.query })

 Line: 30312 -                   * Stores given query result in the cache.

 Line: 30314 -                  DbQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 30320 -                                      queryRunner = this.getQueryRunner(queryRunner);

 Line: 30327 -                                              query: new MssqlParameter_4.MssqlParameter(options.query, "nvarchar"),

 Line: 30332 -                                      return [4 /*yield*/, queryRunner.update("query-result-cache", insertedValues, { identifier: insertedValues.identifier })];

 Line: 30338 -                                      return [4 /*yield*/, queryRunner.update("query-result-cache", insertedValues, { query: insertedValues.query })];

 Line: 30343 -                                  return [4 /*yield*/, queryRunner.insert("query-result-cache", insertedValues)];

 Line: 30365 -                  DbQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

 Line: 30384 -                   * Gets a query runner to work with.

 Line: 30388 -                          return queryRunner;

 Line: 30412 -               * Caches query result into Redis database.

 Line: 30425 -                   * Creates a new query result cache based on connection options.

 Line: 30705 -                          var queryRunner, schemas, databases_1;

 Line: 30710 -                                      queryRunner = _a.sent();

 Line: 30720 -                                      return [4 /*yield*/, PromiseUtils_5.PromiseUtils.runInSequence(databases_1, function (database) { return queryRunner.clearDatabase(schemas, database); })];

 Line: 30724 -                                  case 3: return [4 /*yield*/, queryRunner.clearDatabase(schemas)];

 Line: 30728 -                                  case 5: return [4 /*yield*/, queryRunner.release()];

 Line: 30833 -                   * Executes raw SQL query and returns raw database results.

 Line: 30835 -                  Connection.prototype.query = function (query, parameters, queryRunner) {

 Line: 30843 -                                      if (queryRunner && queryRunner.isReleased)

 Line: 30845 -                                      usedQueryRunner = queryRunner || this.createQueryRunner("master");

 Line: 30864 -                   * Creates a new query builder that can be used to build a sql query.

 Line: 30866 -                  Connection.prototype.createQueryBuilder = function (entityOrRunner, alias, queryRunner) {

 Line: 30871 -                          return new SelectQueryBuilder_1.SelectQueryBuilder(this, queryRunner)

 Line: 30880 -                   * Creates a query runner used for perform queries on a single database connection.

 Line: 30881 -                   * Using query runners you can control your queries to execute using single database connection and

 Line: 30891 -                      var queryRunner = this.driver.createQueryRunner(mode);

 Line: 30894 -                      return queryRunner;

 Line: 30912 -                      return new EntityManagerFactory_1.EntityManagerFactory().create(this, queryRunner);

 Line: 31981 -                  type: EventListenerTypes_2.EventListenerTypes.AFTER_INSERT

 Line: 32074 -                  type: EventListenerTypes_5.EventListenerTypes.AFTER_UPDATE

 Line: 32105 -                  type: EventListenerTypes_6.EventListenerTypes.BEFORE_INSERT

 Line: 32167 -                  type: EventListenerTypes_8.EventListenerTypes.BEFORE_UPDATE

 Line: 32238 -      function RelationCount(relation, alias, queryBuilderFactory) {

 Line: 32245 -                  queryBuilderFactory: queryBuilderFactory

 Line: 32532 -      function RelationId(relation, alias, queryBuilderFactory) {

 Line: 32539 -                  queryBuilderFactory: queryBuilderFactory

 Line: 33186 -                   * Creates a new query builder that can be used to build a sql query.

 Line: 33292 -                   * Executes a raw SQL query and returns a raw database results.

 Line: 33293 -                   * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/subscriber/Broadcaster.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 52 -       * Broadcasts "BEFORE_INSERT", "BEFORE_UPDATE", "BEFORE_REMOVE" events for all given subjects.

 Line: 74 -       * Broadcasts "AFTER_INSERT", "AFTER_UPDATE", "AFTER_REMOVE" events for all given subjects.

 Line: 96 -       * Broadcasts "BEFORE_INSERT" event.

 Line: 109 -                              .filter(function (listener) { return listener.type === EventListenerTypes_1.EventListenerTypes.BEFORE_INSERT && listener.isAllowed(subject.entity); })

 Line: 126 -       * Broadcasts "BEFORE_UPDATE" event.

 Line: 139 -                              .filter(function (listener) { return listener.type === EventListenerTypes_1.EventListenerTypes.BEFORE_UPDATE && listener.isAllowed(subject.entity); })

 Line: 191 -       * Broadcasts "AFTER_INSERT" event.

 Line: 204 -                              .filter(function (listener) { return listener.type === EventListenerTypes_1.EventListenerTypes.AFTER_INSERT && listener.isAllowed(subject.entity); })

 Line: 221 -       * Broadcasts "AFTER_UPDATE" event.

 Line: 234 -                              .filter(function (listener) { return listener.type === EventListenerTypes_1.EventListenerTypes.AFTER_UPDATE && listener.isAllowed(subject.entity); })

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/connection/Connection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 256 -              var queryRunner, schemas, databases_1;

 Line: 261 -                          queryRunner = _a.sent();

 Line: 271 -                          return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(databases_1, function (database) { return queryRunner.clearDatabase(schemas, database); })];

 Line: 275 -                      case 3: return [4 /*yield*/, queryRunner.clearDatabase(schemas)];

 Line: 279 -                      case 5: return [4 /*yield*/, queryRunner.release()];

 Line: 384 -       * Executes raw SQL query and returns raw database results.

 Line: 386 -      Connection.prototype.query = function (query, parameters, queryRunner) {

 Line: 394 -                          if (queryRunner && queryRunner.isReleased)

 Line: 396 -                          usedQueryRunner = queryRunner || this.createQueryRunner("master");

 Line: 415 -       * Creates a new query builder that can be used to build a sql query.

 Line: 417 -      Connection.prototype.createQueryBuilder = function (entityOrRunner, alias, queryRunner) {

 Line: 422 -              return new SelectQueryBuilder_1.SelectQueryBuilder(this, queryRunner)

 Line: 431 -       * Creates a query runner used for perform queries on a single database connection.

 Line: 432 -       * Using query runners you can control your queries to execute using single database connection and

 Line: 442 -          var queryRunner = this.driver.createQueryRunner(mode);

 Line: 445 -          return queryRunner;

 Line: 463 -          return new EntityManagerFactory_1.EntityManagerFactory().create(this, queryRunner);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/entity-manager/SqljsEntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 57 -      function SqljsEntityManager(connection, queryRunner) {

 Line: 58 -          var _this = _super.call(this, connection, queryRunner) || this;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/entity-manager/EntityManagerFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -      EntityManagerFactory.prototype.create = function (connection, queryRunner) {

 Line: 20 -              return new SqljsEntityManager_1.SqljsEntityManager(connection, queryRunner);

 Line: 21 -          return new EntityManager_1.EntityManager(connection, queryRunner);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/entity-manager/EntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -      function EntityManager(connection, queryRunner) {

 Line: 73 -              this.queryRunner = queryRunner;

 Line: 138 -       * Executes raw SQL query and returns raw database results.

 Line: 148 -       * Creates a new query builder that can be used to build a sql query.

 Line: 150 -      EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {

 Line: 152 -              return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);

 Line: 239 -              var queryRunner, transactionEntityManager, executors_1, finalTarget, metadata, databaseEntityLoader, executor, executorsNeedsToBeExecuted, isTransactionStartedByItself, error_1, rollbackError_2;

 Line: 243 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 259 -                                              databaseEntityLoader = new SubjectBuilder_1.SubjectBuilder(this.connection, queryRunner);

 Line: 263 -                                              executor = new SubjectOperationExecutor_1.SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 275 -                          databaseEntityLoader = new SubjectBuilder_1.SubjectBuilder(this.connection, queryRunner);

 Line: 279 -                          executor = new SubjectOperationExecutor_1.SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 291 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 301 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 312 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 323 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 337 -       * Executes fast and efficient INSERT query.

 Line: 338 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 346 -                      // todo: in the future create InsertResult with query result information

 Line: 354 -                          // todo: in the future create InsertResult with query result information

 Line: 366 -       * Executes fast and efficient UPDATE query.

 Line: 374 -                      // todo: in the future create UpdateResult with query result information

 Line: 382 -                          // todo: in the future create UpdateResult with query result information

 Line: 394 -       * Executes fast and efficient UPDATE query.

 Line: 402 -                      // todo: in the future create UpdateResult with query result information

 Line: 410 -                          // todo: in the future create UpdateResult with query result information

 Line: 431 -              var queryRunner, transactionEntityManager, executors_2, finalTarget, metadata, databaseEntityLoader, executor, executorsNeedsToBeExecuted, isTransactionStartedByItself, error_2, rollbackError_3;

 Line: 435 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 451 -                                              databaseEntityLoader = new SubjectBuilder_1.SubjectBuilder(this.connection, queryRunner);

 Line: 455 -                                              executor = new SubjectOperationExecutor_1.SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 467 -                          databaseEntityLoader = new SubjectBuilder_1.SubjectBuilder(this.connection, queryRunner);

 Line: 471 -                          executor = new SubjectOperationExecutor_1.SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);

 Line: 483 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 493 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 504 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 515 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 529 -       * Executes fast and efficient DELETE query.

 Line: 537 -                      // todo: in the future create DeleteResult with query result information

 Line: 545 -                          // todo: in the future create DeleteResult with query result information

 Line: 557 -       * Executes fast and efficient DELETE query.

 Line: 565 -                      // todo: in the future create DeleteResult with query result information

 Line: 573 -                          // todo: in the future create DeleteResult with query result information

 Line: 657 -                  // if no ids passed, no need to execute a query - just return an empty array of values

 Line: 720 -              var metadata, queryRunner;

 Line: 725 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 729 -                          return [4 /*yield*/, queryRunner.truncate(metadata.tablePath)];

 Line: 733 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 812 -       * This is used when entity manager is created with a single query runner,

 Line: 813 -       * and this single query runner needs to be released after job with entity manager is done.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/entity-manager/MongoEntityManager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 70 -           * Gets query runner used to execute queries.

 Line: 86 -              var query, cursor;

 Line: 90 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 91 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 114 -              var query, cursor, _a, results, count;

 Line: 118 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 119 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 132 -                                  this.count(entityClassOrName, query),

 Line: 147 -              var metadata, query, objectIdInstance, cursor;

 Line: 152 -                          query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};

 Line: 154 -                          query["_id"] = { $in: ids.map(function (id) {

 Line: 159 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 181 -              var query, cursor, result;

 Line: 185 -                          query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions);

 Line: 186 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 207 -              var query, objectIdInstance, cursor, result;

 Line: 211 -                          query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};

 Line: 213 -                          query["_id"] = (id instanceof objectIdInstance)

 Line: 216 -                          return [4 /*yield*/, this.createEntityCursor(entityClassOrName, query)];

 Line: 235 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 237 -      MongoEntityManager.prototype.createCursor = function (entityClassOrName, query) {

 Line: 239 -          return this.queryRunner.cursor(metadata.tableName, query);

 Line: 242 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 245 -      MongoEntityManager.prototype.createEntityCursor = function (entityClassOrName, query) {

 Line: 247 -          var cursor = this.createCursor(entityClassOrName, query);

 Line: 304 -       * Count number of matching documents in the db to a query.

 Line: 306 -      MongoEntityManager.prototype.count = function (entityClassOrName, query, options) {

 Line: 308 -          return this.queryRunner.count(metadata.tableName, query, options);

 Line: 329 -      MongoEntityManager.prototype.deleteMany = function (entityClassOrName, query, options) {

 Line: 331 -          return this.queryRunner.deleteMany(metadata.tableName, query, options);

 Line: 336 -      MongoEntityManager.prototype.deleteOne = function (entityClassOrName, query, options) {

 Line: 338 -          return this.queryRunner.deleteOne(metadata.tableName, query, options);

 Line: 343 -      MongoEntityManager.prototype.distinct = function (entityClassOrName, key, query, options) {

 Line: 345 -          return this.queryRunner.distinct(metadata.tableName, key, query, options);

 Line: 364 -      MongoEntityManager.prototype.findOneAndDelete = function (entityClassOrName, query, options) {

 Line: 366 -          return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);

 Line: 371 -      MongoEntityManager.prototype.findOneAndReplace = function (entityClassOrName, query, replacement, options) {

 Line: 373 -          return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);

 Line: 378 -      MongoEntityManager.prototype.findOneAndUpdate = function (entityClassOrName, query, update, options) {

 Line: 380 -          return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);

 Line: 498 -      MongoEntityManager.prototype.replaceOne = function (entityClassOrName, query, doc, options) {

 Line: 500 -          return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);

 Line: 512 -      MongoEntityManager.prototype.updateMany = function (entityClassOrName, query, update, options) {

 Line: 514 -          return this.queryRunner.updateMany(metadata.tableName, query, update, options);

 Line: 519 -      MongoEntityManager.prototype.updateOne = function (entityClassOrName, query, update, options) {

 Line: 521 -          return this.queryRunner.updateOne(metadata.tableName, query, update, options);

 Line: 527 -       * Converts FindManyOptions to mongodb query.

 Line: 541 -       * Converts FindOneOptions to mongodb query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/persistence/SubjectOperationExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -      function SubjectOperationExecutor(connection, transactionEntityManager, queryRunner, subjects) {

 Line: 58 -          this.queryRunner = queryRunner;

 Line: 82 -       * Executes queries using given query runner.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/persistence/SubjectBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 97 -      function SubjectBuilder(connection, queryRunner) {

 Line: 99 -          this.queryRunner = queryRunner;

 Line: 475 -                                          // we cannot check if it was removed or not until we query the database

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/relations/RelationCount.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -  function RelationCount(relation, alias, queryBuilderFactory) {

 Line: 13 -              queryBuilderFactory: queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/relations/RelationId.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -  function RelationId(relation, alias, queryBuilderFactory) {

 Line: 13 -              queryBuilderFactory: queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/listeners/BeforeInsert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              type: EventListenerTypes_1.EventListenerTypes.BEFORE_INSERT

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/listeners/AfterUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              type: EventListenerTypes_1.EventListenerTypes.AFTER_UPDATE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/listeners/AfterInsert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              type: EventListenerTypes_1.EventListenerTypes.AFTER_INSERT

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/decorator/listeners/BeforeUpdate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -              type: EventListenerTypes_1.EventListenerTypes.BEFORE_UPDATE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/EntityCreateCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 53 -              describe: "Name of the connection on which to run a query"

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/SubscriberCreateCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 53 -              describe: "Name of the connection on which to run a query"

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/InitCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -              describe: "Name of the connection on which to run a query"

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationGenerateCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 55 -              describe: "Name of the connection on which run a query."

 Line: 120 -                                  var queryString = typeof query === "string" ? query : query.up;

 Line: 121 -                                  upSqls_1.push("        await queryRunner.query(\"" + queryString.replace(new RegExp("\"", "g"), "\\\"") + "\");");

 Line: 122 -                                  if (typeof query !== "string" && query.down)

 Line: 123 -                                      downSqls_1.push("        await queryRunner.query(\"" + query.down.replace(new RegExp("\"", "g"), "\\\"") + "\");");

 Line: 128 -                                  var queryString = typeof query === "string" ? query : query.up;

 Line: 129 -                                  upSqls_1.push("        await queryRunner.query(`" + queryString.replace(new RegExp("`", "g"), "\\`") + "`);");

 Line: 130 -                                  if (typeof query !== "string" && query.down)

 Line: 131 -                                      downSqls_1.push("        await queryRunner.query(`" + query.down.replace(new RegExp("`", "g"), "\\`") + "`);");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/QueryCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -   * Executes an sql query on the given connection.

 Line: 47 -          this.describe = "Executes given SQL query on a default connection. Specify connection name to run query on a specific connection.";

 Line: 54 -              describe: "Name of the connection on which to run a query."

 Line: 64 -              var connection, queryRunner, connectionOptionsReader, connectionOptions, queryResult, err_1;

 Line: 69 -                          queryRunner = undefined;

 Line: 88 -                          // create a query runner and execute query using it

 Line: 89 -                          queryRunner = _a.sent();

 Line: 90 -                          console.log(chalk.green("Running query: ") + PlatformTools_1.PlatformTools.highlightSql(argv._[1]));

 Line: 91 -                          return [4 /*yield*/, queryRunner.query(argv._[1])];

 Line: 93 -                          queryResult = _a.sent();

 Line: 96 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 106 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 117 -                          console.log(chalk.black.bgRed("Error during query execution:"));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationCreateCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 53 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationRunCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 54 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/CacheClearCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 46 -          this.describe = "Clears all data stored in query runner cache.";

 Line: 53 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/commands/MigrationRevertCommand.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 53 -              describe: "Name of the connection on which run a query."

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/find-options/FindOptionsUtils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 54 -       * Applies give find one options to the given query builder.

 Line: 64 -       * Applies give find many options to the given query builder.

 Line: 74 -       * Applies give find options to the given query builder.

 Line: 77 -          // if options are not set then simply return query builder. This is made for simplicity of usage.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/schema-builder/MongoSchemaBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 66 -              var queryRunner, promises;

 Line: 70 -                          queryRunner = this.connection.driver.createQueryRunner();

 Line: 87 -       * Returns query to be executed by schema builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/schema-builder/RdbmsSchemaBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 161 -                          // its important to disable this mode despite the fact we are release query builder

 Line: 162 -                          // because there exist drivers which reuse same query runner. Also its important to disable

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -              queryBuilderFactory: relationCount.queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-count/RelationCountLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 41 -      function RelationCountLoader(connection, queryRunner, relationCountAttributes) {

 Line: 43 -          this.queryRunner = queryRunner;

 Line: 71 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 81 -                                  // apply condition (custom query builder factory)

 Line: 110 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 125 -                                  // apply condition (custom query builder factory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/QueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 41 -  // todo: completely cover query builder with tests

 Line: 51 -  // todo: implement relation/entity loading and setting them into properties within a separate query

 Line: 61 -      function QueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 69 -              this.queryRunner = queryRunner;

 Line: 78 -           * Gets the main alias string used in this query builder.

 Line: 89 -       * Creates SELECT query and selects given data.

 Line: 107 -       * Creates INSERT query.

 Line: 118 -       * Creates UPDATE query and applies given update values.

 Line: 135 -       * Creates DELETE query.

 Line: 146 -       * Sets entity's relation with which this query builder gonna work.

 Line: 186 -          // set parent query builder parameters as well in sub-query mode

 Line: 214 -       * Parameters in the query are escaped for the currently used driver.

 Line: 227 -       * Gets query to be executed with all parameters used in it.

 Line: 233 -       * Executes sql generated by query builder and returns raw database results.

 Line: 237 -              var _a, sql, parameters, queryRunner;

 Line: 242 -                          queryRunner = this.obtainQueryRunner();

 Line: 246 -                          return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 250 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 267 -       * Creates a completely new query builder.

 Line: 268 -       * Uses same query runner as current QueryBuilder.

 Line: 274 -       * Clones query builder as it is.

 Line: 275 -       * Note: it uses new query runner, if you want query builder that uses exactly same query runner,

 Line: 276 -       * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)

 Line: 277 -       * where queryBuilder is cloned QueryBuilder.

 Line: 298 -       * Sets or overrides query builder's QueryRunner.

 Line: 301 -          this.queryRunner = queryRunner;

 Line: 356 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 420 -       * Creates "WHERE" expression.

 Line: 428 -                  return " WHERE " + (conditions.length ? "(" + conditions + ") AND" : "") + " " + condition;

 Line: 432 -              return this.expressionMap.extraAppendedAndWhereCondition ? " WHERE " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : "";

 Line: 434 -              return " WHERE (" + conditions + ") AND " + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);

 Line: 435 -          return " WHERE " + conditions;

 Line: 454 -       * Creates "WHERE" expression and variables for the given "ids".

 Line: 529 -       * Creates a query builder used to execute sql queries inside this query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/JoinAttribute.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Stores all join attributes which will be used to build a JOIN query.

 Line: 10 -      function JoinAttribute(connection, queryExpressionMap, joinAttribute) {

 Line: 12 -          this.queryExpressionMap = queryExpressionMap;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/Brackets.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Allows to use brackets in WHERE expressions for better syntax.

 Line: 8 -       * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/UpdateQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -      function UpdateQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 27 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 35 -       * Gets generated sql query without parameters being replaced.

 Line: 60 -       * Sets WHERE condition in the query builder.

 Line: 61 -       * If you had previously WHERE expression defined,

 Line: 62 -       * calling this function will override previously set WHERE conditions.

 Line: 75 -       * Adds new AND WHERE condition in the query builder.

 Line: 85 -       * Adds new OR WHERE condition in the query builder.

 Line: 95 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 104 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 113 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 122 -       * Sets ORDER BY condition in the query builder.

 Line: 148 -       * Adds ORDER BY condition in the query builder.

 Line: 182 -       * Creates UPDATE express used to perform insert query.

 Line: 192 -                  // todo: make this and other query builder to work with properly with tables without metadata

 Line: 229 -          // generate and return sql update query

 Line: 231 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression + " RETURNING " + this.expressionMap.returning;

 Line: 234 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + " OUTPUT " + this.expressionMap.returning + whereExpression;

 Line: 237 -              return "UPDATE " + this.getTableName(this.getMainTableName()) + " SET " + updateColumnAndValues.join(", ") + whereExpression; // todo: how do we replace aliases in where to nothing?

 Line: 241 -       * Creates "ORDER BY" part of SQL query.

 Line: 260 -       * Creates "LIMIT" parts of SQL query.

 Line: 280 -          throw new Error("Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify inserted values.");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationUpdater.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -          this.queryBuilder = queryBuilder;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-id/RelationIdLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 41 -      function RelationIdLoader(connection, queryRunner, relationIdAttributes) {

 Line: 43 -          this.queryRunner = queryRunner;

 Line: 96 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 109 -                                  // apply condition (custom query builder factory)

 Line: 133 -                                  // example: if post.category was not found in db then no need to execute query for category.imageIds

 Line: 162 -                                  // apply condition (custom query builder factory)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-id/RelationIdAttribute.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 4 -   * Stores all join relation id attributes which will be used to build a JOIN query.

 Line: 11 -          this.queryExpressionMap = queryExpressionMap;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 48 -              queryBuilderFactory: relationId.queryBuilderFactory

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/DeleteQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -      function DeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {

 Line: 24 -          var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;

 Line: 32 -       * Gets generated sql query without parameters being replaced.

 Line: 42 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 51 -       * Sets WHERE condition in the query builder.

 Line: 52 -       * If you had previously WHERE expression defined,

 Line: 53 -       * calling this function will override previously set WHERE conditions.

 Line: 66 -       * Adds new AND WHERE condition in the query builder.

 Line: 76 -       * Adds new OR WHERE condition in the query builder.

 Line: 86 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 95 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 103 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 131 -       * Creates DELETE express used to perform query.

 Line: 136 -              return "DELETE FROM " + this.getTableName(this.getMainTableName()) + whereExpression + " RETURNING " + this.expressionMap.returning;

 Line: 139 -              return "DELETE FROM " + this.getTableName(this.getMainTableName()) + " OUTPUT " + this.expressionMap.returning + whereExpression;

 Line: 142 -              return "DELETE FROM " + this.getTableName(this.getMainTableName()) + whereExpression; // todo: how do we replace aliases in where to nothing?

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/SelectQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 80 -       * Gets generated sql query without parameters being replaced.

 Line: 101 -       * Creates a subquery - query that can be used inside other queries.

 Line: 110 -       * Creates SELECT query and selects given data.

 Line: 129 -       * Adds new selection to the SELECT query.

 Line: 148 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 158 -       * Specifies FROM which entity's table select/update/delete will be executed.

 Line: 188 -       * INNER JOINs and adds all selection properties to SELECT.

 Line: 199 -       * LEFT JOINs and adds all selection properties to SELECT.

 Line: 210 -       * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 223 -       * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 236 -       * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 249 -       * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.

 Line: 265 -      SelectQueryBuilder.prototype.loadRelationIdAndMap = function (mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {

 Line: 273 -          relationIdAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 288 -      SelectQueryBuilder.prototype.loadRelationCountAndMap = function (mapToProperty, relationName, aliasName, queryBuilderFactory) {

 Line: 293 -          relationCountAttribute.queryBuilderFactory = queryBuilderFactory;

 Line: 320 -       * Sets WHERE condition in the query builder.

 Line: 321 -       * If you had previously WHERE expression defined,

 Line: 322 -       * calling this function will override previously set WHERE conditions.

 Line: 335 -       * Adds new AND WHERE condition in the query builder.

 Line: 345 -       * Adds new OR WHERE condition in the query builder.

 Line: 355 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 369 -       * Adds new AND WHERE with conditions for the given ids.

 Line: 382 -       * Adds new OR WHERE with conditions for the given ids.

 Line: 395 -       * Sets HAVING condition in the query builder.

 Line: 407 -       * Adds new AND HAVING condition in the query builder.

 Line: 417 -       * Adds new OR HAVING condition in the query builder.

 Line: 427 -       * Sets GROUP BY condition in the query builder.

 Line: 441 -       * Adds GROUP BY condition in the query builder.

 Line: 448 -       * Sets ORDER BY condition in the query builder.

 Line: 474 -       * Adds ORDER BY condition in the query builder.

 Line: 489 -       * If you want to implement pagination, and you are having join in your query,

 Line: 499 -       * If you want to implement pagination, and you are having join in your query,

 Line: 529 -       * Gets first raw result returned by execution of generated query builder sql.

 Line: 542 -       * Gets all raw results returned by execution of generated query builder sql.

 Line: 546 -              var queryRunner;

 Line: 553 -                          queryRunner = this.obtainQueryRunner();

 Line: 561 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 572 -       * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 576 -              var queryRunner;

 Line: 580 -                          queryRunner = this.obtainQueryRunner();

 Line: 589 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 600 -       * Gets single entity returned by execution of generated query builder sql.

 Line: 630 -       * Gets entities returned by execution of generated query builder sql.

 Line: 649 -       * Gets count - number of entities selected by sql generated by this query builder.

 Line: 654 -              var queryRunner;

 Line: 660 -                          queryRunner = this.obtainQueryRunner();

 Line: 668 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 679 -       * Executes built SQL query and returns entities and overall entities count (without limitation).

 Line: 684 -              var queryRunner, entitiesAndRaw, count;

 Line: 690 -                          queryRunner = this.obtainQueryRunner();

 Line: 703 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 714 -       * Executes built SQL query and returns raw data stream.

 Line: 719 -              var _a, sql, parameters, queryRunner, releaseFn;

 Line: 725 -                          queryRunner = this.obtainQueryRunner();

 Line: 731 -                                  return queryRunner.release();

 Line: 734 -                          return [2 /*return*/, queryRunner.stream(sql, parameters, releaseFn, releaseFn)];

 Line: 737 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 748 -       * Enables or disables query result caching.

 Line: 815 -       * Creates "SELECT FROM" part of SQL query.

 Line: 820 -              throw new Error("Cannot build query because main alias is not set (call qb#from method)");

 Line: 893 -          // create a selection query

 Line: 903 -              return "SELECT ROWNUM " + this.escape("RN") + "," + selection + " FROM " + froms.join(", ") + lock;

 Line: 904 -          return "SELECT " + selection + " FROM " + froms.join(", ") + lock;

 Line: 907 -       * Creates "JOIN" part of SQL query.

 Line: 990 -       * Creates "GROUP BY" part of SQL query.

 Line: 998 -       * Creates "ORDER BY" part of SQL query.

 Line: 1017 -       * Creates "LIMIT" and "OFFSET" parts of SQL query for Oracle database.

 Line: 1021 -              sql = "SELECT * FROM (" + sql + ") WHERE ";

 Line: 1032 -       * Creates "LIMIT" and "OFFSET" parts of SQL query.

 Line: 1037 -          // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results

 Line: 1079 -       * Creates "LOCK" part of SQL query.

 Line: 1098 -                      return " FOR UPDATE";

 Line: 1111 -       * Creates "HAVING" part of SQL query.

 Line: 1216 -       * Executes sql generated by query builder and returns object with raw results and entities created from them.

 Line: 1221 -              var metadata, broadcaster, relationIdLoader, relationCountLoader, relationIdMetadataTransformer, relationCountMetadataTransformer, rawResults, entities, _a, selects, orderBys_1, metadata_1, mainAliasName_1, querySelects, condition, parameters_1, ids, areAllNumbers, rawRelationIdResults, rawRelationCountResults, transformer;

 Line: 1235 -                          relationIdLoader = new RelationIdLoader_1.RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);

 Line: 1236 -                          relationCountLoader = new RelationCountLoader_1.RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);

 Line: 1246 -                          querySelects = metadata_1.primaryColumns.map(function (primaryColumn) {

 Line: 1253 -                          return [4 /*yield*/, new SelectQueryBuilder(this.connection, queryRunner)

 Line: 1254 -                                  .select("DISTINCT " + querySelects.join(", "))

 Line: 1280 -                                  // fixes #190. if all numbers then its safe to perform query without parameter

 Line: 1376 -                                  query: this.getSql(),

 Line: 1378 -                              }, queryRunner)];

 Line: 1384 -                      case 2: return [4 /*yield*/, queryRunner.query(sql, parameters)];

 Line: 1390 -                                  query: this.getSql(),

 Line: 1394 -                              }, savedQueryResultCacheOptions, queryRunner)];

 Line: 1419 -       * Creates a query builder used to execute sql queries inside this query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/InsertQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 28 -       * Gets generated sql query without parameters being replaced.

 Line: 81 -       * Creates INSERT express used to perform insert query.

 Line: 151 -          // generate sql query

 Line: 153 -              return "INSERT INTO " + this.getTableName(this.getMainTableName()) + (columnNames ? "(" + columnNames + ")" : "") + " VALUES " + values + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "") + " RETURNING " + this.expressionMap.returning;

 Line: 156 -              return "INSERT INTO " + this.getTableName(this.getMainTableName()) + "(" + columnNames + ") OUTPUT " + this.expressionMap.returning + " VALUES " + values;

 Line: 159 -              return "INSERT INTO " + this.getTableName(this.getMainTableName()) + "(" + columnNames + ") VALUES " + values + (this.expressionMap.onConflict ? " ON CONFLICT " + this.expressionMap.onConflict : "");

 Line: 170 -          throw new Error("Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationRemover.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -          this.queryBuilder = queryBuilder;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationQueryBuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 65 -       * Gets generated sql query without parameters being replaced.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/RelationLoader.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 38 -       * example: SELECT category.id AS category_id, category.name AS category_name FROM category category

 Line: 39 -       *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1

 Line: 61 -       * SELECT post

 Line: 62 -       * FROM post post

 Line: 63 -       * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]

 Line: 79 -       * SELECT category

 Line: 80 -       * FROM category category

 Line: 109 -       * SELECT post

 Line: 110 -       * FROM post post

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/query-builder/QueryExpressionMap.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -   * Contains all properties of the QueryBuilder that needs to be build a final query.

 Line: 31 -           * All aliases (including main alias) used in the query.

 Line: 35 -           * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.

 Line: 39 -           * Data needs to be SELECT-ed.

 Line: 47 -           * Optional on conflict statement used in insertion query in postgres.

 Line: 63 -           * WHERE queries.

 Line: 79 -           * Parameters used to be escaped in final query.

 Line: 104 -           * Indicates if query builder creates a subquery.

 Line: 109 -           * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,

 Line: 110 -           * but user can use them in WHERE expressions.

 Line: 114 -           * Indicates if query result cache is enabled or not.

 Line: 119 -           * Used in INSERT query.

 Line: 202 -           * Gets relation metadata of the relation this query builder works with.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/LimitOnUpdateNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -   * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.

 Line: 18 -          var _this = _super.call(this, "Your database does not support LIMIT on UPDATE statements.") || this;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/QueryRunnerProviderAlreadyReleasedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -   * Thrown when consumer tries to use query runner from query runner provider after it was released.

 Line: 20 -          _this.message = "Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/OptimisticLockCanNotBeUsedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -   * Thrown when an optimistic lock cannot be used in query builder.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/OffsetWithoutLimitNotSupportedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -   * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.

 Line: 18 -          var _this = _super.call(this, driverName + " does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).") || this;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/error/QueryFailedError.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -   * Thrown when query execution has failed.

 Line: 32 -          Object.assign(_this, __assign({}, driverError, { name: "QueryFailedError", query: query, parameters: parameters || [] }));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/oracle/OracleDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 225 -       * Creates a query runner used to execute database queries.

 Line: 233 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/oracle/OracleQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 58 -           * Indicates if connection for this query runner is released.

 Line: 59 -           * Once its released, query runner cannot run queries anymore.

 Line: 72 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 112 -       * You cannot use query runner methods once its released.

 Line: 184 -       * Executes a given SQL query.

 Line: 192 -              var queryStartTime_1, handler, executionOptions, databaseConnection, err_1;

 Line: 198 -                          queryStartTime_1 = +new Date();

 Line: 202 -                              var queryEndTime = +new Date();

 Line: 203 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 204 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 205 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 207 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 253 -                              ? "INSERT INTO \"" + tableName + "\" (" + columns + ") VALUES (" + values + ")"

 Line: 254 -                              : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 280 -                          sql = "UPDATE \"" + tableName + "\" SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 303 -                          sql = "DELETE FROM \"" + tableName + "\" WHERE " + conditionString;

 Line: 323 -                              sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\", \"level\") " +

 Line: 324 -                                  ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 325 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 328 -                              sql = "INSERT INTO \"" + tableName + "\" (\"ancestor\", \"descendant\") " +

 Line: 329 -                                  ("SELECT \"ancestor\", " + newEntityId + " FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 330 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 335 -                          return [4 /*yield*/, this.query("SELECT MAX(\"level\") as \"level\" FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId)];

 Line: 372 -                          tablesSql = "SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (" + tableNamesString + ")";

 Line: 373 -                          columnsSql = "SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (" + tableNamesString + ")";

 Line: 374 -                          indicesSql = "SELECT ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS, LISTAGG(cols.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY cols.COLUMN_NAME) AS COLUMN_NAMES\n                                FROM USER_INDEXES ind, USER_IND_COLUMNS cols \n                                WHERE ind.INDEX_NAME = cols.INDEX_NAME AND ind.TABLE_NAME IN (" + tableNamesString + ")\n                                GROUP BY ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS";

 Line: 375 -                          constraintsSql = "SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (" + tableNamesString + ") \nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position";

 Line: 473 -                          sql = "SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '" + tableName + "'";

 Line: 545 -                          sql = "SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '" + tableName + "' AND COLUMN_NAME = '" + columnName + "'";

 Line: 792 -                      sql += " ON DELETE " + foreignKey.onDelete;

 Line: 917 -                          dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS \"', table_name, '\";') AS query FROM information_schema.tables WHERE table_schema = '" + this.dbName + "'";

 Line: 954 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 955 -       * instead they will be memorized into a special variable inside query runner.

 Line: 962 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 997 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/postgres/PostgresQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 57 -           * Indicates if connection for this query runner is released.

 Line: 58 -           * Once its released, query runner cannot run queries anymore.

 Line: 71 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 117 -       * You cannot use query runner methods once its released.

 Line: 188 -       * Executes a given SQL query.

 Line: 194 -          // console.log("query: ", query);

 Line: 198 -              var databaseConnection, queryStartTime;

 Line: 205 -                          queryStartTime = +new Date();

 Line: 209 -                              var queryEndTime = +new Date();

 Line: 210 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 211 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 212 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 214 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 277 -                              ? "INSERT INTO " + this.escapeTablePath(tablePath) + "(" + columns + ") VALUES (" + values + ") " + generatedColumnSql

 Line: 278 -                              : "INSERT INTO " + this.escapeTablePath(tablePath) + " DEFAULT VALUES " + generatedColumnSql;

 Line: 300 -              var updateValues, conditionString, query, updateParams, conditionParams, allParameters;

 Line: 306 -                          query = "UPDATE " + this.escapeTablePath(tablePath) + " SET " + updateValues + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 329 -                          sql = "DELETE FROM " + this.escapeTablePath(tablePath) + " WHERE " + conditionString;

 Line: 351 -                              sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\", \"level\") " +

 Line: 352 -                                  ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 353 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 356 -                              sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\") " +

 Line: 357 -                                  ("SELECT \"ancestor\", " + newEntityId + " FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 358 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 364 -                          return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + this.escapeTablePath(tablePath) + " WHERE descendant = " + parentId)];

 Line: 405 -                          return [4 /*yield*/, this.query("SELECT * FROM current_schema()")];

 Line: 423 -                          tablesSql = "SELECT * FROM information_schema.tables WHERE " + tablesCondition;

 Line: 424 -                          columnsSql = "SELECT * FROM information_schema.columns WHERE table_schema IN (" + schemaNamesString + ")";

 Line: 425 -                          indicesSql = "SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name, ix.indisunique AS is_unique, a.attnum, ix.indkey FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (" + tableNamesString + ") AND t.relnamespace = ns.OID AND ns.nspname IN (" + schemaNamesString + ") ORDER BY t.relname, i.relname";

 Line: 426 -                          foreignKeysSql = "SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_schema IN (" + schemaNamesString + ") AND constraint_type = 'FOREIGN KEY'";

 Line: 427 -                          uniqueKeysSql = "SELECT * FROM information_schema.table_constraints WHERE table_schema IN (" + schemaNamesString + ") AND constraint_type = 'UNIQUE'";

 Line: 428 -                          primaryKeysSql = "SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema IN (" + schemaNamesString + ")";

 Line: 542 -                          sql = "SELECT * FROM information_schema.tables WHERE table_schema = " + parsedTablePath.schema + " AND table_name = " + parsedTablePath.tableName;

 Line: 628 -                          sql = "SELECT * FROM information_schema.columns WHERE table_schema = " + parsedTablePath.schema + " AND table_name = '" + parsedTablePath.tableName + "' AND column_name = '" + columnName + "'";

 Line: 1046 -                          selectDropsQuery = "SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname IN (" + schemaNamesString + ")";

 Line: 1076 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 1077 -       * instead they will be memorized into a special variable inside query runner.

 Line: 1084 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 1139 -              add += " ON DELETE " + foreignKey.onDelete;

 Line: 1185 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/postgres/PostgresDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 58 -           * We store all created query runners because we need to release them.

 Line: 306 -       * Creates a query runner used to execute database queries.

 Line: 381 -       * and an array of parameter names to be passed to a query.

 Line: 595 -       * Loads postgres query stream package.

 Line: 660 -                      case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];

 Line: 671 -       * Executes given query.

 Line: 673 -      PostgresDriver.prototype.executeQuery = function (connection, query) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqljs/SqljsQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 90 -       * Executes a given SQL query.

 Line: 97 -              var databaseConnection, queryStartTime, statement, maxQueryExecutionTime, queryEndTime, queryExecutionTime, result;

 Line: 104 -                          queryStartTime = +new Date();

 Line: 109 -                              queryEndTime = +new Date();

 Line: 110 -                              queryExecutionTime = queryEndTime - queryStartTime;

 Line: 111 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 112 -                                  this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);

 Line: 141 -                  sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 162 -                                              value = databaseConnection.exec("SELECT last_insert_rowid()")[0].values[0][0];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqljs/SqljsDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 110 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/mongodb/MongoQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 46 -           * Indicates if connection for this query runner is released.

 Line: 47 -           * Once its released, query runner cannot run queries anymore.

 Line: 48 -           * Always false for mongodb since mongodb has a single query executor instance.

 Line: 52 -           * Indicates if transaction is active in this query executor.

 Line: 68 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 70 -      MongoQueryRunner.prototype.cursor = function (collectionName, query) {

 Line: 93 -       * Count number of matching documents in the db to a query.

 Line: 95 -      MongoQueryRunner.prototype.count = function (collectionName, query, options) {

 Line: 135 -      MongoQueryRunner.prototype.deleteMany = function (collectionName, query, options) {

 Line: 148 -      MongoQueryRunner.prototype.deleteOne = function (collectionName, query, options) {

 Line: 161 -      MongoQueryRunner.prototype.distinct = function (collectionName, key, query, options) {

 Line: 165 -                      case 0: return [4 /*yield*/, this.getCollection(collectionName).distinct(key, query, options)];

 Line: 200 -      MongoQueryRunner.prototype.findOneAndDelete = function (collectionName, query, options) {

 Line: 213 -      MongoQueryRunner.prototype.findOneAndReplace = function (collectionName, query, replacement, options) {

 Line: 226 -      MongoQueryRunner.prototype.findOneAndUpdate = function (collectionName, query, update, options) {

 Line: 427 -      MongoQueryRunner.prototype.replaceOne = function (collectionName, query, doc, options) {

 Line: 453 -      MongoQueryRunner.prototype.updateMany = function (collectionName, query, update, options) {

 Line: 466 -      MongoQueryRunner.prototype.updateOne = function (collectionName, query, update, options) {

 Line: 547 -       * Executes a given SQL query.

 Line: 550 -          throw new Error("Executing SQL query is not supported by MongoDB driver.");

 Line: 867 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 868 -       * instead they will be memorized into a special variable inside query runner.

 Line: 875 -       * Disables special query runner mode in which sql queries won't be executed

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/mongodb/MongoDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 177 -       * Creates a query runner used to execute database queries.

 Line: 185 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlite-abstract/AbstractSqliteDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 181 -       * Creates a query runner used to execute database queries.

 Line: 250 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 58 -           * Indicates if connection for this query runner is released.

 Line: 59 -           * Once its released, query runner cannot run queries anymore.

 Line: 75 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 95 -       * We don't do anything here because sqlite do not support multiple connections thus query runners.

 Line: 160 -       * Executes a given SQL query.

 Line: 187 -              var updateValues, conditionString, query, updateParams, conditionParams, allParameters;

 Line: 193 -                          query = "UPDATE \"" + tableName + "\" SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 216 -                          sql = "DELETE FROM \"" + tableName + "\" WHERE " + conditionString;

 Line: 236 -                              sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\", \"level\") " +

 Line: 237 -                                  ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 238 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 241 -                              sql = "INSERT INTO \"" + tableName + "\"(\"ancestor\", \"descendant\") " +

 Line: 242 -                                  ("SELECT \"ancestor\", " + newEntityId + " FROM \"" + tableName + "\" WHERE \"descendant\" = " + parentId + " ") +

 Line: 243 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 249 -                          return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + tableName + " WHERE descendant = " + parentId)];

 Line: 288 -                          return [4 /*yield*/, this.query("SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (" + tableNamesString + ")")];

 Line: 456 -                          sql = "SELECT * FROM sqlite_master WHERE type = 'table' AND name = '" + tableName + "'";

 Line: 801 -                      case 0: return [4 /*yield*/, this.query("DELETE FROM \"" + tableName + "\"")];

 Line: 827 -                          selectDropsQuery = "select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'";

 Line: 861 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 862 -       * instead they will be memorized into a special variable inside query runner.

 Line: 869 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 895 -       * Builds a query for create column.

 Line: 939 -                                  sql1 += " ON DELETE " + foreignKey.onDelete;

 Line: 954 -                          sql2 = "INSERT INTO \"temporary_" + table.name + "\"(" + oldColumnNames + ") SELECT " + oldColumnNames + " FROM \"" + table.name + "\"";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlserver/MssqlParameter.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * Sql server driver requires parameter types to be specified fo input parameters used in the query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlserver/SqlServerDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 228 -       * Creates a query runner used to execute database queries.

 Line: 236 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlserver/SqlServerQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 59 -           * Indicates if connection for this query runner is released.

 Line: 60 -           * Once its released, query runner cannot run queries anymore.

 Line: 73 -           * Last executed query in a transaction.

 Line: 75 -           * that's why we store last executed query promise to wait it when we execute next query.

 Line: 81 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 104 -       * You cannot use query runner methods once its released.

 Line: 264 -       * Executes a given SQL query.

 Line: 286 -                              var pool, request_1, queryStartTime_1, err_1;

 Line: 312 -                                          queryStartTime_1 = +new Date();

 Line: 316 -                                              var queryEndTime = +new Date();

 Line: 317 -                                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 318 -                                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 319 -                                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 330 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 407 -                                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 444 -                          generatedColumnNames = generatedColumns.map(function (generatedColumn) { return "INSERTED.\"" + generatedColumn.databaseName + "\""; }).join(", ");

 Line: 447 -                              ? "INSERT INTO " + this.escapeTablePath(tablePath) + "(" + columns + ") " + generatedColumnSql + " VALUES (" + values + ")"

 Line: 448 -                              : "INSERT INTO " + this.escapeTablePath(tablePath) + " " + generatedColumnSql + " DEFAULT VALUES ";

 Line: 482 -                          sql = "UPDATE " + this.escapeTablePath(tablePath) + " SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 503 -                          sql = "DELETE FROM " + this.escapeTablePath(tablePath) + " WHERE " + conditionString;

 Line: 523 -                              sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\", \"level\") " +

 Line: 524 -                                  ("SELECT \"ancestor\", " + newEntityId + ", \"level\" + 1 FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 525 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1");

 Line: 528 -                              sql = "INSERT INTO " + this.escapeTablePath(tablePath) + "(\"ancestor\", \"descendant\") " +

 Line: 529 -                                  ("SELECT \"ancestor\", " + newEntityId + " FROM " + this.escapeTablePath(tablePath) + " WHERE \"descendant\" = " + parentId + " ") +

 Line: 530 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId);

 Line: 536 -                          return [4 /*yield*/, this.query("SELECT MAX(level) as level FROM " + this.escapeTablePath(tablePath) + " WHERE descendant = " + parentId)];

 Line: 607 -                              return "SELECT * FROM " + dbName + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN (" + tableNamesString + ") AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 608 -                          }).join(" UNION ALL ");

 Line: 610 -                              return "SELECT * FROM " + dbName + ".INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 611 -                          }).join(" UNION ALL ");

 Line: 613 -                              return "SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM " + dbName + ".INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages " +

 Line: 615 -                                  ("WHERE columnUsages.TABLE_SCHEMA IN (" + schemaNamesString + ") AND tableConstraints.TABLE_SCHEMA IN (" + schemaNamesString + ")");

 Line: 616 -                          }).join(" UNION ALL ");

 Line: 618 -                              return "SELECT COLUMN_NAME, TABLE_NAME FROM " + dbName + ".INFORMATION_SCHEMA.COLUMNS WHERE COLUMNPROPERTY(object_id(TABLE_SCHEMA + '.' + TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1 AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 619 -                          }).join(" UNION ALL ");

 Line: 621 -                              return "SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, \n                    COLUMN_NAME = col.name, IS_UNIQUE = ind.is_unique, ind.*, ic.*, col.* \n                    FROM " + dbName + ".sys.indexes ind \n                    INNER JOIN " + dbName + ".sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id\n                    INNER JOIN " + dbName + ".sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id \n                    INNER JOIN " + dbName + ".sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 \n                    AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0";

 Line: 622 -                          }).join(" UNION ALL ");

 Line: 732 -                      case 0: return [4 /*yield*/, this.query("SELECT DB_ID('" + database + "') as db_id")];

 Line: 751 -                          sql = "SELECT * FROM " + parsedTablePath.database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" + parsedTablePath.tableName + "' AND TABLE_SCHEMA = " + (parsedTablePath.schema === "SCHEMA_NAME()" ? parsedTablePath.schema : "'" + parsedTablePath.schema + "'");

 Line: 774 -              var query, dbName, schema, currentDBQuery, currentDB, query;

 Line: 779 -                          query = "IF SCHEMA_ID('" + path + "') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA " + path + "' END";

 Line: 784 -                          return [4 /*yield*/, this.query("SELECT DB_NAME() AS db_name")];

 Line: 791 -                          query = "IF SCHEMA_ID('" + schema + "') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA " + schema + "' END";

 Line: 858 -                          sql = "SELECT * FROM " + parsedTablePath.database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" + parsedTablePath.tableName + "' AND COLUMN_NAME = '" + columnName + "' AND TABLE_SCHEMA = " + (parsedTablePath.schema === "SCHEMA_NAME()" ? parsedTablePath.schema : "'" + parsedTablePath.schema + "'");

 Line: 1090 -                          oldPrimaryKeySql = "SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM " + database + ".INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\nLEFT JOIN " + database + ".INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\nWHERE tableConstraints.TABLE_CATALOG = '" + database + "' AND columnUsages.TABLE_SCHEMA = '" + schema + "' AND tableConstraints.TABLE_SCHEMA = '" + schema + "'";

 Line: 1124 -                      sql += " ON DELETE " + foreignKey.onDelete;

 Line: 1257 -                          allTablesSql = "SELECT * FROM " + database + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA IN (" + schemaNamesString + ")";

 Line: 1267 -                                              dropForeignKeySql = "SELECT 'ALTER TABLE \"" + database + "\".\"' + OBJECT_SCHEMA_NAME(fk.parent_object_id, DB_ID('" + database + "')) + '\".\"' + OBJECT_NAME(fk.parent_object_id, DB_ID('" + database + "')) + '\" DROP CONSTRAINT \"' + fk.name + '\"' as query FROM " + database + ".sys.foreign_keys AS fk WHERE fk.referenced_object_id = object_id('\"" + database + "\".\"" + tablesResult["TABLE_SCHEMA"] + "\".\"" + tablesResult["TABLE_NAME"] + "\"')";

 Line: 1308 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 1309 -       * instead they will be memorized into a special variable inside query runner.

 Line: 1316 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 1396 -       * Builds a query for create column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/mysql/MysqlDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 234 -       * Creates a query runner used to execute database queries.

 Line: 242 -       * and an array of parameter names to be passed to a query.

 Line: 516 -              // we give error before calling any other method that creates actual query runner

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/mysql/MysqlQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 57 -           * Indicates if connection for this query runner is released.

 Line: 58 -           * Once its released, query runner cannot run queries anymore.

 Line: 71 -           * Indicates if special query runner mode in which sql queries won't be executed is enabled.

 Line: 111 -       * You cannot use query runner methods once its released.

 Line: 179 -       * Executes a raw SQL query.

 Line: 187 -              var databaseConnection, queryStartTime_1, err_1;

 Line: 196 -                          queryStartTime_1 = +new Date();

 Line: 200 -                              var queryEndTime = +new Date();

 Line: 201 -                              var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 202 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 203 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 205 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 268 -                          sql = "INSERT INTO `" + this.escapeTablePath(tablePath) + "`(" + columns + ") VALUES (" + values + ")";

 Line: 297 -                          sql = "UPDATE `" + this.escapeTablePath(tablePath) + "` SET " + updateValues + " " + (conditionString ? (" WHERE " + conditionString) : "");

 Line: 320 -                          sql = "DELETE FROM `" + this.escapeTablePath(tablePath) + "` WHERE " + conditionString;

 Line: 339 -                          return [4 /*yield*/, this.query("INSERT INTO `" + this.escapeTablePath(tablePath) + "`(`ancestor`, `descendant`, `level`) " +

 Line: 340 -                                  ("SELECT `ancestor`, " + newEntityId + ", `level` + 1 FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId + " ") +

 Line: 341 -                                  ("UNION ALL SELECT " + newEntityId + ", " + newEntityId + ", 1"))];

 Line: 345 -                      case 2: return [4 /*yield*/, this.query("INSERT INTO `" + this.escapeTablePath(tablePath) + "`(`ancestor`, `descendant`) " +

 Line: 346 -                              ("SELECT `ancestor`, " + newEntityId + " FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId + " ") +

 Line: 347 -                              ("UNION ALL SELECT " + newEntityId + ", " + newEntityId))];

 Line: 353 -                          return [4 /*yield*/, this.query("SELECT MAX(`level`) as `level` FROM `" + this.escapeTablePath(tablePath) + "` WHERE `descendant` = " + parentId)];

 Line: 403 -                          tablesSql = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND TABLE_NAME IN (" + tableNamesString + ")";

 Line: 404 -                          columnsSql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN (" + databaseNamesString + ")";

 Line: 405 -                          indicesSql = "SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND INDEX_NAME != 'PRIMARY' ORDER BY SEQ_IN_INDEX";

 Line: 406 -                          foreignKeysSql = "SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA IN (" + databaseNamesString + ") AND REFERENCED_COLUMN_NAME IS NOT NULL";

 Line: 427 -                                              return [4 /*yield*/, this.query("SHOW INDEX FROM `" + dbTable["TABLE_SCHEMA"] + "`.`" + dbTable["TABLE_NAME"] + "` WHERE Key_name = 'PRIMARY'")];

 Line: 523 -                      case 0: return [4 /*yield*/, this.query("SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '" + database + "'")];

 Line: 541 -                          sql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '" + parsedTablePath.database + "' AND TABLE_NAME = '" + parsedTablePath.tableName + "'";

 Line: 561 -                          sql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '" + parsedTablePath.database + "' AND TABLE_NAME = '" + parsedTablePath.tableName + "' AND COLUMN_NAME = '" + columnName + "'";

 Line: 825 -                      sql += " ON DELETE " + foreignKey.onDelete;

 Line: 864 -                      revertSql += " ON DELETE " + foreignKey.onDelete;

 Line: 968 -                          dropTablesQuery = "SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`;') AS query FROM information_schema.tables WHERE table_schema = '" + database + "'";

 Line: 1005 -       * Enables special query runner mode in which sql queries won't be executed,

 Line: 1006 -       * instead they will be memorized into a special variable inside query runner.

 Line: 1013 -       * Disables special query runner mode in which sql queries won't be executed

 Line: 1078 -       * Builds a part of query to create/change a column.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlite/SqliteDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 90 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/sqlite/SqliteQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 69 -       * Executes a given SQL query.

 Line: 77 -              var databaseConnection, queryStartTime;

 Line: 84 -                          queryStartTime = +new Date();

 Line: 88 -                              var queryEndTime = +new Date();

 Line: 89 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 90 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 91 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 93 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 118 -                  sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/cordova/CordovaQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 69 -       * Executes a given SQL query.

 Line: 77 -              var databaseConnection, queryStartTime;

 Line: 84 -                          queryStartTime = +new Date();

 Line: 88 -                              var queryEndTime = +new Date();

 Line: 89 -                              var queryExecutionTime = queryEndTime - queryStartTime;

 Line: 90 -                              if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 91 -                                  _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 101 -                              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 122 -                  sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/cordova/CordovaDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 88 -       * Creates a query runner used to execute database queries.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/websql/WebsqlDriver.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 101 -       * Creates a query runner used to execute database queries.

 Line: 127 -       * and an array of parameter names to be passed to a query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/driver/websql/WebsqlQueryRunner.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 143 -       * Executes a given SQL query.

 Line: 151 -              var db, queryStartTime_1, err_1;

 Line: 161 -                          queryStartTime_1 = +new Date();

 Line: 166 -                                  var queryEndTime = +new Date();

 Line: 167 -                                  var queryExecutionTime = queryEndTime - queryStartTime_1;

 Line: 168 -                                  if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)

 Line: 169 -                                      _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);

 Line: 176 -                                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);

 Line: 203 -                  sql = columns.length > 0 ? ("INSERT INTO \"" + tableName + "\"(" + columns + ") VALUES (" + values + ")") : "INSERT INTO \"" + tableName + "\" DEFAULT VALUES";

 Line: 255 -                          return [4 /*yield*/, this.query("SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (" + tableNamesString + ")")];

 Line: 382 -                          selectDropsQuery = "select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/RepositoryFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -      RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {

 Line: 26 -                  queryRunner: queryRunner,

 Line: 43 -                  queryRunner: queryRunner,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/Repository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -       * Creates a new query builder that can be used to build a sql query.

 Line: 49 -      Repository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 50 -          return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);

 Line: 125 -       * Executes fast and efficient INSERT query.

 Line: 126 -       * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.

 Line: 169 -       * Executes fast and efficient DELETE query.

 Line: 183 -       * Executes fast and efficient DELETE query.

 Line: 258 -       * Executes a raw SQL query and returns a raw database results.

 Line: 259 -       * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/TreeRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 136 -       * Creates a query builder used to get descendants of the entities in a tree.

 Line: 179 -       * Creates a query builder used to get ancestors of the entities in the tree.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/AbstractRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -       * Creates a new query builder for the repository's entity that can be used to build a sql query.

 Line: 60 -       * Creates a new query builder for the given entity that can be used to build a sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/BaseEntity.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 74 -       * Creates a new query builder that can be used to build a sql query.

 Line: 180 -       * Executes a raw SQL query and returns a raw database results.

 Line: 181 -       * Raw query execution is supported only by relational databases (MongoDB is not supported).

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/repository/MongoRepository.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -       * Raw SQL query execution is not supported by MongoDB.

 Line: 35 -      MongoRepository.prototype.createQueryBuilder = function (alias, queryRunner) {

 Line: 73 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 76 -          return this.manager.createCursor(this.metadata.target, query);

 Line: 79 -       * Creates a cursor for a query that can be used to iterate over results from MongoDB.

 Line: 83 -          return this.manager.createEntityCursor(this.metadata.target, query);

 Line: 98 -       * Count number of matching documents in the db to a query.

 Line: 101 -          return this.manager.count(this.metadata.target, query || {}, options);

 Line: 121 -          return this.manager.deleteMany(this.metadata.tableName, query, options);

 Line: 127 -          return this.manager.deleteOne(this.metadata.tableName, query, options);

 Line: 132 -      MongoRepository.prototype.distinct = function (key, query, options) {

 Line: 133 -          return this.manager.distinct(this.metadata.tableName, key, query, options);

 Line: 151 -          return this.manager.findOneAndDelete(this.metadata.tableName, query, options);

 Line: 157 -          return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);

 Line: 163 -          return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);

 Line: 266 -          return this.manager.replaceOne(this.metadata.tableName, query, doc, options);

 Line: 278 -          return this.manager.updateMany(this.metadata.tableName, query, update, options);

 Line: 284 -          return this.manager.updateOne(this.metadata.tableName, query, update, options);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/typeorm-browser.min.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -   Error('This option/function is not supported in the browser environment. Failed operation: fs.writeFile("'+e+'").');return Promise.reject(null)},e.highlightSql=function(e){return e},e.highlightJson=function(e){return e},e.logInfo=function(e,t){console.info(e+" ",t)},e.logError=function(e,t){console.error(e+" ",t)},e.logWarn=function(e,t){console.warn(e+" ",t)},e.log=function(e){console.log(e)},e.warn=function(e){return e},e.type="browser",e}(),e("PlatformTools",n),r=function(){return function(){}}(),e("EventEmitter",r),i=function(){return function(){}}(),e("Readable",i),o=function(){return function(){}}(),e("Writable",o)}}}),System.register("typeorm/find-options/JoinOptions",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/find-options/FindOneOptions",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/find-options/FindManyOptions",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/common/ObjectType",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/error/QueryRunnerProviderAlreadyReleasedError",[],function(e,t){"use strict";var n;t&&t.id;return{setters:[],execute:function(){n=function(e){function t(){var t=e.call(this)||this;return t.name="QueryRunnerProviderAlreadyReleasedError",t.message="Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.",t.stack=(new Error).stack,t}return __extends(t,e),t}(Error),e("QueryRunnerProviderAlreadyReleasedError",n)}}}),System.register("typeorm/common/DeepPartial",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/repository/RemoveOptions",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/repository/SaveOptions",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/error/NoNeedToReleaseEntityManagerError" Line: 15 -  n(r){switch(r.label){case 0:return[4,this.getCollection(e).rename(t,n)];case 1:return[2,r.sent()]}})})},e.prototype.replaceOne=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(i){switch(i.label){case 0:return[4,this.getCollection(e).replaceOne(t,n,r)];case 1:return[2,i.sent()]}})})},e.prototype.stats=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){switch(n.label){case 0:return[4,this.getCollection(e).stats(t)];case 1:return[2,n.sent()]}})})},e.prototype.updateMany=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(i){switch(i.label){case 0:return[4,this.getCollection(e).updateMany(t,n,r)];case 1:return[2,i.sent()]}})})},e.prototype.updateOne=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(i){switch(i.label){case 0:return[4,this.getCollection(e).updateOne(t,n,r)];case 1:return[2,i.sent()]}})})},e.prototype.clearDatabase=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return[4,this.databaseConnection.dropDatabase()];case 1:return e.sent(),[2]}})})},e.prototype.connect=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return[2]})})},e.prototype.release=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return[2]})})},e.prototype.startTransaction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return[2]})})},e.prototype.commitTransaction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return[2]})})},e.prototype.rollbackTransaction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return[2]})})},e.prototype.query=function(e,t){throw new Error("Executing SQL query is not supported by MongoDB driver.")},e.prototype.stream=function(e,t,n,r){throw new Error("Stream is not supported by MongoDB driver.")},e.pr Line: 45 -  criber/EntitySubscriberInterface",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/metadata/types/EventListenerTypes",[],function(e,t){"use strict";var n;t&&t.id;return{setters:[],execute:function(){n=function(){function e(){}return e.AFTER_LOAD="after-load",e.BEFORE_INSERT="before-insert",e.AFTER_INSERT="after-insert",e.BEFORE_UPDATE="before-update",e.AFTER_UPDATE="after-update",e.BEFORE_REMOVE="before-remove",e.AFTER_REMOVE="after-remove",e}(),e("EventListenerTypes",n)}}}),System.register("typeorm/subscriber/Broadcaster",["typeorm/metadata/types/EventListenerTypes"],function(e,t){"use strict";var n,r;t&&t.id;return{setters:[function(e){n=e}],execute:function(){r=function(){function e(e){this.connection=e}return e.prototype.broadcastBeforeEventsForAll=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){var i,o,a,s,u=this;return __generator(this,function(c){switch(c.label){case 0:return i=t.map(function(t){return u.broadcastBeforeInsertEvent(e,t)}),o=n.map(function(t){return u.broadcastBeforeUpdateEvent(e,t)}),a=r.map(function(t){return u.broadcastBeforeRemoveEvent(e,t)}),s=i.concat(o).concat(a),[4,Promise.all(s)];case 1:return c.sent(),[2]}})})},e.prototype.broadcastAfterEventsForAll=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){var i,o,a,s,u=this;return __generator(this,function(c){switch(c.label){case 0:return i=t.map(function(t){return u.broadcastAfterInsertEvent(e,t)}),o=n.map(function(t){return u.broadcastAfterUpdateEvent(e,t)}),a=r.map(function(t){return u.broadcastAfterRemoveEvent(e,t)}),s=i.concat(o).concat(a),[4,Promise.all(s)];case 1:return c.sent(),[2]}})})},e.prototype.broadcastBeforeInsertEvent=function(e,t){return __awaiter(this,void 0,void 0,function(){var r,i,o=this;return __generator(this,function(a){switch(a.label){case 0:return r=t.metadata.listeners.filter(function(e){return e.type===n.EventListenerTypes.BEFORE_INSERT&&e.isAllowed(t.entity)}).map(function(e){return e.execute(t.entity)}),i=this.connection.subscribers.filter(function(e){return o.isAllowedSubscriber(e,t.en Line: 46 -  e.beforeInsert}).map(function(n){return n.beforeInsert({manager:e,entity:t.entity})}),[4,Promise.all(r.concat(i))];case 1:return a.sent(),[2]}})})},e.prototype.broadcastBeforeUpdateEvent=function(e,t){return __awaiter(this,void 0,void 0,function(){var r,i,o=this;return __generator(this,function(a){switch(a.label){case 0:return r=t.metadata.listeners.filter(function(e){return e.type===n.EventListenerTypes.BEFORE_UPDATE&&e.isAllowed(t.entity)}).map(function(e){return e.execute(t.entity)}),i=this.connection.subscribers.filter(function(e){return o.isAllowedSubscriber(e,t.entityTarget)&&e.beforeUpdate}).map(function(n){return n.beforeUpdate({manager:e,entity:t.entity,databaseEntity:t.databaseEntity,updatedColumns:t.diffColumns,updatedRelations:t.diffRelations})}),[4,Promise.all(r.concat(i))];case 1:return a.sent(),[2]}})})},e.prototype.broadcastBeforeRemoveEvent=function(e,t){return __awaiter(this,void 0,void 0,function(){var r,i,o=this;return __generator(this,function(a){switch(a.label){case 0:return r=t.metadata.listeners.filter(function(e){return e.type===n.EventListenerTypes.BEFORE_REMOVE&&e.isAllowed(t.entity)}).map(function(e){return e.execute(t.databaseEntity)}),i=this.connection.subscribers.filter(function(e){return o.isAllowedSubscriber(e,t.entityTarget)&&e.beforeRemove}).map(function(n){return n.beforeRemove({manager:e,entity:t.hasEntity?t.entity:void 0,databaseEntity:t.databaseEntity,entityId:t.metadata.getEntityIdMixedMap(t.databaseEntity)})}),[4,Promise.all(r.concat(i))];case 1:return a.sent(),[2]}})})},e.prototype.broadcastAfterInsertEvent=function(e,t){return __awaiter(this,void 0,void 0,function(){var r,i,o=this;return __generator(this,function(a){switch(a.label){case 0:return r=t.metadata.listeners.filter(function(e){return e.type===n.EventListenerTypes.AFTER_INSERT&&e.isAllowed(t.entity)}).map(function(e){return e.execute(t.entity)}),i=this.connection.subscribers.filter(function(e){return o.isAllowedSubscriber(e,t.entityTarget)&&e.afterInsert}).map(function(n){return n.afterInsert({manager:e,entity:t.entity})}),[4,Promise.all(r.concat(i))];case 1:return a.sent(),[ Line: 47 -  ototype.broadcastAfterUpdateEvent=function(e,t){return __awaiter(this,void 0,void 0,function(){var r,i,o=this;return __generator(this,function(a){switch(a.label){case 0:return r=t.metadata.listeners.filter(function(e){return e.type===n.EventListenerTypes.AFTER_UPDATE&&e.isAllowed(t.entity)}).map(function(e){return e.execute(t.entity)}),i=this.connection.subscribers.filter(function(e){return o.isAllowedSubscriber(e,t.entityTarget)&&e.afterUpdate}).map(function(n){return n.afterUpdate({manager:e,entity:t.entity,databaseEntity:t.databaseEntity,updatedColumns:t.diffColumns,updatedRelations:t.diffRelations})}),[4,Promise.all(r.concat(i))];case 1:return a.sent(),[2]}})})},e.prototype.broadcastAfterRemoveEvent=function(e,t){return __awaiter(this,void 0,void 0,function(){var r,i,o=this;return __generator(this,function(a){switch(a.label){case 0:return r=t.metadata.listeners.filter(function(e){return e.type===n.EventListenerTypes.AFTER_REMOVE&&e.isAllowed(t.entity)}).map(function(e){return e.execute(t.entity)}),i=this.connection.subscribers.filter(function(e){return o.isAllowedSubscriber(e,t.entityTarget)&&e.afterRemove}).map(function(n){return n.afterRemove({manager:e,entity:t.hasEntity?t.entity:void 0,databaseEntity:t.databaseEntity,entityId:t.metadata.getEntityIdMixedMap(t.databaseEntity)})}),[4,Promise.all(r.concat(i))];case 1:return a.sent(),[2]}})})},e.prototype.broadcastLoadEventsForAll=function(e,t){return __awaiter(this,void 0,void 0,function(){var n=this;return __generator(this,function(r){switch(r.label){case 0:return[4,Promise.all(t.map(function(t){return n.broadcastLoadEvents(e,t)}))];case 1:return r.sent(),[2]}})})},e.prototype.broadcastLoadEvents=function(e,t){return __awaiter(this,void 0,void 0,function(){var r,i,o,a=this;return __generator(this,function(s){switch(s.label){case 0:return t instanceof Promise?[2]:(r=this.connection.getMetadata(e).relations.reduce(function(e,n){if(!t.hasOwnProperty(n.propertyName))return e;var r=n.getEntityValue(t);return r instanceof Array?e=e.concat(a.broadcastLoadEventsForAll(n.inverseEntityMetadata.target,r)):r&&e.push(a.broadcastLoadEv Line: 70 -  ve()},e.prototype.startTransaction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:if(this.isTransactionActive)throw new n.TransactionAlreadyStartedError;return this.isTransactionActive=!0,[4,this.query("BEGIN TRANSACTION")];case 1:return e.sent(),[2]}})})},e.prototype.commitTransaction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:if(!this.isTransactionActive)throw new r.TransactionNotStartedError;return[4,this.query("COMMIT")];case 1:return e.sent(),this.isTransactionActive=!1,[2]}})})},e.prototype.rollbackTransaction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:if(!this.isTransactionActive)throw new r.TransactionNotStartedError;return[4,this.query("ROLLBACK")];case 1:return e.sent(),this.isTransactionActive=!1,[2]}})})},e.prototype.query=function(e,t){throw new Error("Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers")},e.prototype.stream=function(e,t,n,r){throw new Error("Stream is not supported by sqlite driver.")},e.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){throw new Error("Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers")})})},e.prototype.update=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o,a,s,u;return __generator(this,function(c){switch(c.label){case 0:return r=this.parametrize(t).join(", "),i=this.parametrize(n,Object.keys(t).length).join(" AND "),o='UPDATE "'+e+'" SET '+r+" "+(i?" WHERE "+i:""),a=Object.keys(t).map(function(e){return t[e]}),s=Object.keys(n).map(function(e){return n[e]}),u=a.concat(s),[4,this.query(o,u)];case 1:return c.sent(),[2]}})})},e.prototype.delete=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o;return __generator(this,function(a){switch(a.label){case 0:return r="string"==typeof t?t:this.parametrize(t).join(" AND "),i=t instanceof Object?Objec Line: 71 -  (function(e){return t[e]}):n,o='DELETE FROM "'+e+'" WHERE '+r,[4,this.query(o,i)];case 1:return a.sent(),[2]}})})},e.prototype.insertIntoClosureTable=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){var i,o;return __generator(this,function(a){switch(a.label){case 0:return i="",i=r?'INSERT INTO "'+e+'"("ancestor", "descendant", "level") SELECT "ancestor", '+t+', "level" + 1 FROM "'+e+'" WHERE "descendant" = '+n+" UNION ALL SELECT "+t+", "+t+", 1":'INSERT INTO "'+e+'"("ancestor", "descendant") SELECT "ancestor", '+t+' FROM "'+e+'" WHERE "descendant" = '+n+" UNION ALL SELECT "+t+", "+t,[4,this.query(i)];case 1:return a.sent(),r?[4,this.query("SELECT MAX(level) as level FROM "+e+" WHERE descendant = "+n)]:[3,3];case 2:return o=a.sent(),[2,o&&o[0]&&o[0].level?parseInt(o[0].level)+1:1];case 3:return[2,-1]}})})},e.prototype.getTable=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return[4,this.getTables([e])];case 1:return t=n.sent(),[2,t.length>0?t[0]:void 0]}})})},e.prototype.getTables=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r=this;return __generator(this,function(o){switch(o.label){case 0:return e&&e.length?(t=e.map(function(e){return"'"+e+"'"}).join(", "),[4,this.query("SELECT * FROM sqlite_master WHERE type = 'table' AND name IN ("+t+")")]):[2,[]];case 1:return(n=o.sent())&&n.length?[2,Promise.all(n.map(function(e){return __awaiter(r,void 0,void 0,function(){var t,n,r,o,p,d,m,f,h,y,g,v=this;return __generator(this,function(b){switch(b.label){case 0:return t=new a.Table(e.name),[4,Promise.all([this.query('PRAGMA table_info("'+e.name+'")'),this.query('PRAGMA index_list("'+e.name+'")'),this.query('PRAGMA foreign_key_list("'+e.name+'")')])];case 1:return n=b.sent(),r=n[0],o=n[1],p=n[2],d=void 0,-1!==(m=e.sql).indexOf("AUTOINCREMENT")&&(d=m.substr(0,m.indexOf("AUTOINCREMENT")),f=d.lastIndexOf(","),h=d.lastIndexOf("("),-1!==f?(d=d.substr(f),d=d.substr(0,d.lastIndexOf('"')),d=d.substr(d.indexOf('"')+1)):-1!==h&&(d=d.substr(h),d=d.substr(0,d.lastIndexOf('"')),d=d.substr Line: 73 -  (y)];case 3:return g=b.sent(),t.indices=g.filter(function(e){return!!e}),[2,t]}})})}))]:[2,[]]}})})},e.prototype.hasDatabase=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return[2,Promise.resolve(!1)]})})},e.prototype.hasTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n;return __generator(this,function(r){switch(r.label){case 0:return t="SELECT * FROM sqlite_master WHERE type = 'table' AND name = '"+e+"'",[4,this.query(t)];case 1:return n=r.sent(),[2,!!n.length]}})})},e.prototype.createDatabase=function(e){return Promise.resolve([])},e.prototype.createSchema=function(e){return Promise.resolve([])},e.prototype.createTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i=this;return __generator(this,function(o){switch(o.label){case 0:return t=e.columns.map(function(e){return i.buildCreateColumnSql(e)}).join(", "),n='CREATE TABLE "'+e.name+'" ('+t,(r=e.columns.filter(function(e){return e.isPrimary&&!e.isGenerated})).length>0&&(n+=", PRIMARY KEY("+r.map(function(e){return""+e.name}).join(", ")+")"),n+=")",[4,this.query(n)];case 1:return o.sent(),[2]}})})},e.prototype.dropTable=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return t='DROP TABLE "'+e+'"',[4,this.query(t)];case 1:return n.sent(),[2]}})})},e.prototype.hasColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return n='PRAGMA table_info("'+e+'")',[4,this.query(n)];case 1:return r=i.sent(),[2,!!r.find(function(e){return e.name===t})]}})})},e.prototype.addColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return[4,this.getTableSchema(e)];case 1:return n=i.sent(),(r=n.clone()).addColumns([t]),[4,this.recreateTable(r,n)];case 2:return i.sent(),[2]}})})},e.prototype.addColumns=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label) Line: 75 -  otype.createForeignKeys=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return[4,this.getTableSchema(e)];case 1:return n=i.sent(),(r=n.clone()).addForeignKeys(t),[2,this.recreateTable(r)]}})})},e.prototype.dropForeignKey=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){return[2,this.dropForeignKeys(e,[t])]})})},e.prototype.dropForeignKeys=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return[4,this.getTableSchema(e)];case 1:return n=i.sent(),(r=n.clone()).removeForeignKeys(t),[2,this.recreateTable(r)]}})})},e.prototype.createIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return n=t.columnNames.map(function(e){return'"'+e+'"'}).join(","),r="CREATE "+(t.isUnique?"UNIQUE ":"")+'INDEX "'+t.name+'" ON "'+(e instanceof a.Table?e.name:e)+'"('+n+")",[4,this.query(r)];case 1:return i.sent(),[2]}})})},e.prototype.dropIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var e;return __generator(this,function(n){switch(n.label){case 0:return e='DROP INDEX "'+t+'"',[4,this.query(e)];case 1:return n.sent(),[2]}})})},e.prototype.truncate=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return[4,this.query('DELETE FROM "'+e+'"')];case 1:return t.sent(),[2]}})})},e.prototype.clearDatabase=function(){return __awaiter(this,void 0,void 0,function(){var e,t,n,r,i=this;return __generator(this,function(o){switch(o.label){case 0:return[4,this.query("PRAGMA foreign_keys = OFF;")];case 1:return o.sent(),[4,this.startTransaction()];case 2:o.sent(),o.label=3;case 3:return o.trys.push([3,7,12,14]),e="select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'",[4,this.query(e)];case 4:return t=o.sent(),[4,Promise.all(t.map(function(e){return i.query(e.query)}))];case 5:return Line: 76 -  this.commitTransaction()];case 6:return o.sent(),[3,14];case 7:n=o.sent(),o.label=8;case 8:return o.trys.push([8,10,,11]),[4,this.rollbackTransaction()];case 9:return o.sent(),[3,11];case 10:return r=o.sent(),[3,11];case 11:throw n;case 12:return[4,this.query("PRAGMA foreign_keys = ON;")];case 13:return o.sent(),[7];case 14:return[2]}})})},e.prototype.enableSqlMemory=function(){this.sqlMemoryMode=!0},e.prototype.disableSqlMemory=function(){this.sqlsInMemory=[],this.sqlMemoryMode=!1},e.prototype.getMemorySql=function(){return this.sqlsInMemory},e.prototype.parametrize=function(e,t){return void 0===t&&(t=0),Object.keys(e).map(function(e,n){return'"'+e+'"=$'+(t+n+1)})},e.prototype.buildCreateColumnSql=function(e){var t='"'+e.name+'"';return e instanceof o.ColumnMetadata?t+=" "+this.driver.normalizeType(e):t+=" "+this.connection.driver.createFullType(e),e.collation&&(t+=" COLLATE "+e.collation),!0!==e.isNullable&&(t+=" NOT NULL"),!0===e.isUnique&&(t+=" UNIQUE"),!0===e.isGenerated&&"increment"===e.generationStrategy?t+=" PRIMARY KEY AUTOINCREMENT":!0===e.isPrimary&&!0===e.isGenerated&&(t+=" PRIMARY KEY"),void 0!==e.default&&null!==e.default&&(t+=" DEFAULT ("+e.default+")"),t},e.prototype.recreateTable=function(e,t,n){return void 0===n&&(n=!0),__awaiter(this,void 0,void 0,function(){var r,i,o,a,s,u,c,l,p,d=this;return __generator(this,function(m){switch(m.label){case 0:return r=e.columns.map(function(e){return d.buildCreateColumnSql(e)}).join(", "),i=e.columns.map(function(e){return'"'+e.name+'"'}).join(", "),o='CREATE TABLE "temporary_'+e.name+'" ('+r,e.foreignKeys.forEach(function(e){var t=e.columnNames.map(function(e){return'"'+e+'"'}).join(", "),n=e.referencedColumnNames.map(function(e){return'"'+e+'"'}).join(", ");o+=", FOREIGN KEY("+t+') REFERENCES "'+e.referencedTableName+'"('+n+")",e.onDelete&&(o+=" ON DELETE "+e.onDelete)}),(a=e.columns.filter(function(e){return e.isPrimary&&!e.isGenerated})).length>0&&(o+=", PRIMARY KEY("+a.map(function(e){return""+e.name}).join(", ")+")"),o+=")",[4,this.query(o)];case 1:return m.sent(),s=t?t.columns.map(function(e){return'"'+e.name+'"'}). Line: 77 -  n?(u='INSERT INTO "temporary_'+e.name+'"('+s+") SELECT "+s+' FROM "'+e.name+'"',[4,this.query(u)]):[3,3];case 2:m.sent(),m.label=3;case 3:return c='DROP TABLE "'+e.name+'"',[4,this.query(c)];case 4:return m.sent(),l='ALTER TABLE "temporary_'+e.name+'" RENAME TO "'+e.name+'"',[4,this.query(l)];case 5:return m.sent(),p=e.indices.map(function(t){return d.createIndex(e.name,t)}),[4,Promise.all(p)];case 6:return m.sent(),[2]}})})},e.prototype.getTableSchema=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return e instanceof a.Table?[2,e]:[3,1];case 1:return[4,this.getTable(e)];case 2:if(!(t=n.sent()))throw new Error("Table named "+e+" was not found in the database.");return[2,t]}})})},e}(),e("AbstractSqliteQueryRunner",p)}}}),System.register("typeorm/schema-builder/RdbmsSchemaBuilder",["typeorm/schema-builder/schema/Table","typeorm/schema-builder/schema/TableColumn","typeorm/schema-builder/schema/TableForeignKey","typeorm/schema-builder/schema/TableIndex","typeorm/schema-builder/schema/TablePrimaryKey","typeorm/util/PromiseUtils"],function(e,t){"use strict";var n,r,i,o,a,s,u;t&&t.id;return{setters:[function(e){n=e},function(e){r=e},function(e){i=e},function(e){o=e},function(e){a=e},function(e){s=e}],execute:function(){u=function(){function e(e){this.connection=e}return e.prototype.build=function(){return __awaiter(this,void 0,void 0,function(){var e,t,n,r;return __generator(this,function(i){switch(i.label){case 0:return e=this,[4,this.connection.createQueryRunner("master")];case 1:return e.queryRunner=i.sent(),[4,this.createNewDatabases()];case 2:return i.sent(),[4,this.queryRunner.startTransaction()];case 3:i.sent(),i.label=4;case 4:return i.trys.push([4,10,15,17]),t=this,[4,this.loadTableSchemas()];case 5:return t.tables=i.sent(),[4,this.executeSchemaSyncOperationsInProperOrder()];case 6:return i.sent(),this.connection.queryResultCache?[4,this.connection.queryResultCache.synchronize(this.queryRunner)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[4,this.queryRunner.commitTransaction()];case 9:return i.sen Line: 88 -  ;r(a.rows||a.outBinds)},a={autoCommit:!this.isTransactionActive},[4,this.connect()];case 1:return(s=p.sent()).execute(e,t||{},a,o),[3,3];case 2:return u=p.sent(),i(u),[3,3];case 3:return[2]}})})})},e.prototype.stream=function(e,t,n,r){throw new Error("Stream is not supported by Oracle driver.")},e.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,o,a,s,u,c,l;return __generator(this,function(p){switch(p.label){case 0:return r=Object.keys(t),i=r.map(function(e){return'"'+e+'"'}).join(", "),o=r.map(function(e){return":"+e}).join(", "),a=r.map(function(e){return t[e]}),(s=this.connection.hasMetadata(e)?this.connection.getMetadata(e).generatedColumns:[]).length>0&&(n=s.find(function(e){return e.isPrimary&&e.isGenerated})),u=i.length>0?'INSERT INTO "'+e+'" ('+i+") VALUES ("+o+")":'INSERT INTO "'+e+'" DEFAULT VALUES',n?(c="declare lastId number; begin "+u+' returning "'+n.databaseName+'" into lastId; dbms_output.enable; dbms_output.put_line(lastId); dbms_output.get_line(:ln, :st); end;',[4,this.query(c,a.concat([{dir:this.driver.oracle.BIND_OUT,type:this.driver.oracle.STRING,maxSize:32767},{dir:this.driver.oracle.BIND_OUT,type:this.driver.oracle.NUMBER}]))]):[3,2];case 1:return l=p.sent(),[2,parseInt(l[0])];case 2:return[2,this.query(u,a)]}})})},e.prototype.update=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o,a,s,u;return __generator(this,function(c){switch(c.label){case 0:return r=this.parametrize(t).join(", "),i=this.parametrize(n).join(" AND "),o='UPDATE "'+e+'" SET '+r+" "+(i?" WHERE "+i:""),a=Object.keys(n).map(function(e){return n[e]}),s=Object.keys(t).map(function(e){return t[e]}),u=s.concat(a),[4,this.query(o,u)];case 1:return c.sent(),[2]}})})},e.prototype.delete=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o;return __generator(this,function(a){switch(a.label){case 0:return r="string"==typeof t?t:this.parametrize(t).join(" AND "),i=t instanceof Object?Object.keys(t).map(function(e){return t[e]}):n,o='DELETE FROM "'+e+'" WHERE '+r,[4,this.query(o,i)];case 1:return a.sent(),[2]}})})},e.p Line: 89 -  rtIntoClosureTable=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){var i,o;return __generator(this,function(a){switch(a.label){case 0:return i="",i=r?'INSERT INTO "'+e+'"("ancestor", "descendant", "level") SELECT "ancestor", '+t+', "level" + 1 FROM "'+e+'" WHERE "descendant" = '+n+" UNION ALL SELECT "+t+", "+t+", 1":'INSERT INTO "'+e+'" ("ancestor", "descendant") SELECT "ancestor", '+t+' FROM "'+e+'" WHERE "descendant" = '+n+" UNION ALL SELECT "+t+", "+t,[4,this.query(i)];case 1:return a.sent(),[4,this.query('SELECT MAX("level") as "level" FROM "'+e+'" WHERE "descendant" = '+n)];case 2:return o=a.sent(),[2,o&&o[0]&&o[0].level?parseInt(o[0].level)+1:1]}})})},e.prototype.getTable=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return[4,this.getTables([e])];case 1:return t=n.sent(),[2,t.length>0?t[0]:void 0]}})})},e.prototype.getTables=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,c,l,p,d,m,f,h;return __generator(this,function(y){switch(y.label){case 0:return e&&e.length?(t=e.map(function(e){return"'"+e+"'"}).join(", "),n="SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN ("+t+")",r="SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN ("+t+")",c="SELECT ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS, LISTAGG(cols.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY cols.COLUMN_NAME) AS COLUMN_NAMES\n                                FROM USER_INDEXES ind, USER_IND_COLUMNS cols \n                                WHERE ind.INDEX_NAME = cols.INDEX_NAME AND ind.TABLE_NAME IN ("+t+")\n                                GROUP BY ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS",l="SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN ("+t+") \nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position",[4,Promise.all( Line: 90 -  ),this.query(r),this.query(c),this.query(l)])]):[2,[]];case 1:return p=y.sent(),d=p[0],m=p[1],f=p[2],h=p[3],d.length?[2,d.map(function(e){var t=new o.Table(e.TABLE_NAME);return t.columns=m.filter(function(e){return e.TABLE_NAME===t.name}).map(function(e){var n=!!h.find(function(n){return n.TABLE_NAME===t.name&&"P"===n.CONSTRAINT_TYPE&&n.COLUMN_NAME===e.COLUMN_NAME}),r=e.DATA_TYPE.toLowerCase();"varchar2"===e.DATA_TYPE.toLowerCase()&&null!==e.DATA_LENGTH?r+="("+e.DATA_LENGTH+")":null!==e.DATA_PRECISION&&null!==e.DATA_SCALE?r+="("+e.DATA_PRECISION+","+e.DATA_SCALE+")":null!==e.DATA_SCALE?r+="(0,"+e.DATA_SCALE+")":null!==e.DATA_PRECISION&&(r+="("+e.DATA_PRECISION+")");var o=new i.TableColumn;return o.name=e.COLUMN_NAME,o.type=r,o.default=null!==e.COLUMN_DEFAULT&&void 0!==e.COLUMN_DEFAULT?e.COLUMN_DEFAULT:void 0,o.isNullable="N"!==e.NULLABLE,o.isPrimary=n,o.isGenerated="YES"===e.IDENTITY_COLUMN,o.comment="",o}),t.primaryKeys=h.filter(function(e){return e.TABLE_NAME===t.name&&"P"===e.CONSTRAINT_TYPE}).map(function(e){return new s.TablePrimaryKey(e.CONSTRAINT_NAME,e.COLUMN_NAME)}),t.foreignKeys=h.filter(function(e){return e.TABLE_NAME===t.name&&"R"===e.CONSTRAINT_TYPE}).map(function(e){return new a.TableForeignKey(e.CONSTRAINT_NAME,[],[],"","")}),t.indices=f.filter(function(e){return e.TABLE_NAME===t.name&&!t.foreignKeys.find(function(t){return t.name===e.INDEX_NAME})&&!t.primaryKeys.find(function(t){return t.name===e.INDEX_NAME})}).map(function(t){return new u.TableIndex(e.TABLE_NAME,t.INDEX_NAME,t.COLUMN_NAMES,!("UNIQUE"!==t.COLUMN_NAMES))}),t})]:[2,[]]}})})},e.prototype.hasDatabase=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return[2,Promise.resolve(!1)]})})},e.prototype.hasTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n;return __generator(this,function(r){switch(r.label){case 0:return t="SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '"+e+"'",[4,this.query(t)];case 1:return n=r.sent(),[2,!!n.length]}})})},e.prototype.createDatabase=function(e){return this.query("CREATE DATABASE IF NOT EXISTS "+e)} Line: 91 -  createSchema=function(e){return Promise.resolve([])},e.prototype.createTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i=this;return __generator(this,function(o){switch(o.label){case 0:return t=e.columns.map(function(e){return i.buildCreateColumnSql(e)}).join(", "),n='CREATE TABLE "'+e.name+'" ('+t,(r=e.columns.filter(function(e){return e.isPrimary})).length>0&&(n+=", PRIMARY KEY("+r.map(function(e){return'"'+e.name+'"'}).join(", ")+")"),n+=")",[4,this.query(n)];case 1:return o.sent(),[2]}})})},e.prototype.dropTable=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return t='DROP TABLE "'+e+'"',[4,this.query(t)];case 1:return n.sent(),[2]}})})},e.prototype.hasColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return n="SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '"+e+"' AND COLUMN_NAME = '"+t+"'",[4,this.query(n)];case 1:return r=i.sent(),[2,!!r.length]}})})},e.prototype.addColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){return n=e instanceof o.Table?e.name:e,r='ALTER TABLE "'+n+'" ADD '+this.buildCreateColumnSql(t),[2,this.query(r)]})})},e.prototype.addColumns=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.addColumn(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.renameColumn=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,a,s;return __generator(this,function(u){switch(u.label){case 0:return r=void 0,e instanceof o.Table?(r=e,[3,3]):[3,1];case 1:return[4,this.getTable(e)];case 2:r=u.sent(),u.label=3;case 3:if(!r)throw new Error("Table "+e+" was not found.");if(a=void 0,!(a=t instanceof i.TableColumn?t:r.columns.find(function(e){return e.name===t})))throw new Error('Column "'+t+'" was not found in the "'+e+'" table.');return s=void 0,n instanceof i.TableColu Line: 93 -  his.query('ALTER TABLE "'+e.name+'" DROP COLUMN "'+t.name+'"')]})})},e.prototype.dropColumns=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.dropColumn(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.updatePrimaryKeys=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return t=e.primaryKeys.map(function(e){return'"'+e.columnName+'"'}),e.primaryKeys.length>0&&e.primaryKeys[0].name?[4,this.query('ALTER TABLE "'+e.name+'" DROP CONSTRAINT "'+e.primaryKeys[0].name+'"')]:[3,2];case 1:n.sent(),n.label=2;case 2:return t.length>0?[4,this.query('ALTER TABLE "'+e.name+'" ADD PRIMARY KEY ('+t.join(", ")+")")]:[3,4];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.createForeignKey=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,a;return __generator(this,function(s){return n=e instanceof o.Table?e.name:e,r=t.columnNames.map(function(e){return'"'+e+'"'}).join(", "),i=t.referencedColumnNames.map(function(e){return'"'+e+'"'}).join(","),a='ALTER TABLE "'+n+'" ADD CONSTRAINT "'+t.name+'" FOREIGN KEY ('+r+') REFERENCES "'+t.referencedTableName+'"('+i+")",t.onDelete&&(a+=" ON DELETE "+t.onDelete),[2,this.query(a)]})})},e.prototype.createForeignKeys=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.createForeignKey(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.dropForeignKey=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){return n=e instanceof o.Table?e.name:e,r='ALTER TABLE "'+n+'" DROP CONSTRAINT "'+t.name+'"',[2,this.query(r)]})})},e.prototype.dropForeignKeys=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.dropForeignKey(e,t)}),[4,P Line: 94 -  ];case 1:return i.sent(),[2]}})})},e.prototype.createIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return n=t.columnNames.map(function(e){return'"'+e+'"'}).join(", "),r="CREATE "+(t.isUnique?"UNIQUE":"")+' INDEX "'+t.name+'" ON "'+(e instanceof o.Table?e.name:e)+'"('+n+")",[4,this.query(r)];case 1:return i.sent(),[2]}})})},e.prototype.dropIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return n=e instanceof o.Table?e.name:e,r='ALTER TABLE "'+n+'" DROP INDEX "'+t+'"',[4,this.query(r)];case 1:return i.sent(),[2]}})})},e.prototype.truncate=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return[4,this.query('TRUNCATE TABLE "'+e+'"')];case 1:return t.sent(),[2]}})})},e.prototype.clearDatabase=function(){return __awaiter(this,void 0,void 0,function(){var e,t,n,r,i,o,a=this;return __generator(this,function(s){switch(s.label){case 0:return[4,this.startTransaction()];case 1:s.sent(),s.label=2;case 2:return s.trys.push([2,8,,13]),e="SET FOREIGN_KEY_CHECKS = 0;",t="SELECT concat('DROP TABLE IF EXISTS \"', table_name, '\";') AS query FROM information_schema.tables WHERE table_schema = '"+this.dbName+"'",n="SET FOREIGN_KEY_CHECKS = 1;",[4,this.query(e)];case 3:return s.sent(),[4,this.query(t)];case 4:return r=s.sent(),[4,Promise.all(r.map(function(e){return a.query(e.query)}))];case 5:return s.sent(),[4,this.query(n)];case 6:return s.sent(),[4,this.commitTransaction()];case 7:return s.sent(),[3,13];case 8:i=s.sent(),s.label=9;case 9:return s.trys.push([9,11,,12]),[4,this.rollbackTransaction()];case 10:return s.sent(),[3,12];case 11:return o=s.sent(),[3,12];case 12:throw i;case 13:return[2]}})})},e.prototype.enableSqlMemory=function(){this.sqlMemoryMode=!0},e.prototype.disableSqlMemory=function(){this.sqlsInMemory=[],this.sqlMemoryMode=!1},e.prototype.getMemorySql=function(){return this.sqlsInMemory},Object.defineProperty(e.prototype,"dbName",{get:fun Line: 102 -  ,n,r){var i=this;if(this.isReleased)throw new c.QueryRunnerAlreadyReleasedError;return new Promise(function(o,a){return __awaiter(i,void 0,void 0,function(){var i,s,u;return __generator(this,function(c){switch(c.label){case 0:return c.trys.push([0,2,,3]),[4,this.connect()];case 1:return i=c.sent(),this.driver.connection.logger.logQuery(e,t,this),s=i.query(e,t),n&&s.on("end",n),r&&s.on("error",r),o(s),[3,3];case 2:return u=c.sent(),a(u),[3,3];case 3:return[2]}})})})},e.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,o,a,s,u,c;return __generator(this,function(p){switch(p.label){case 0:return n=Object.keys(t),r=n.map(function(e){return"`"+e+"`"}).join(", "),i=n.map(function(e){return"?"}).join(","),o=n.map(function(e){return t[e]}),a=this.connection.hasMetadata(e)?this.connection.getMetadata(e).generatedColumns:[],s="INSERT INTO `"+this.escapeTablePath(e)+"`("+r+") VALUES ("+i+")",[4,this.query(s,o)];case 1:return u=p.sent(),c=a.reduce(function(e,n){var r=n.isPrimary&&u.insertId?u.insertId:t[n.databaseName];return r?l.OrmUtils.mergeDeep(e,n.createValueMap(r)):e},{}),[2,{result:u,generatedMap:Object.keys(c).length>0?c:void 0}]}})})},e.prototype.update=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o,a,s,u;return __generator(this,function(c){switch(c.label){case 0:return r=this.parametrize(t).join(", "),i=this.parametrize(n).join(" AND "),o="UPDATE `"+this.escapeTablePath(e)+"` SET "+r+" "+(i?" WHERE "+i:""),a=Object.keys(n).map(function(e){return n[e]}),s=Object.keys(t).map(function(e){return t[e]}),u=s.concat(a),[4,this.query(o,u)];case 1:return c.sent(),[2]}})})},e.prototype.delete=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o;return __generator(this,function(a){switch(a.label){case 0:return r="string"==typeof t?t:this.parametrize(t).join(" AND "),i=t instanceof Object?Object.keys(t).map(function(e){return t[e]}):n,o="DELETE FROM `"+this.escapeTablePath(e)+"` WHERE "+r,[4,this.query(o,i)];case 1:return a.sent(),[2]}})})},e.prototype.insertIntoClosureTable=function(e,t,n,r){return __awaite Line: 103 -  void 0,function(){var i;return __generator(this,function(o){switch(o.label){case 0:return r?[4,this.query("INSERT INTO `"+this.escapeTablePath(e)+"`(`ancestor`, `descendant`, `level`) SELECT `ancestor`, "+t+", `level` + 1 FROM `"+this.escapeTablePath(e)+"` WHERE `descendant` = "+n+" UNION ALL SELECT "+t+", "+t+", 1")]:[3,2];case 1:return o.sent(),[3,4];case 2:return[4,this.query("INSERT INTO `"+this.escapeTablePath(e)+"`(`ancestor`, `descendant`) SELECT `ancestor`, "+t+" FROM `"+this.escapeTablePath(e)+"` WHERE `descendant` = "+n+" UNION ALL SELECT "+t+", "+t)];case 3:o.sent(),o.label=4;case 4:return r?[4,this.query("SELECT MAX(`level`) as `level` FROM `"+this.escapeTablePath(e)+"` WHERE `descendant` = "+n)]:[3,6];case 5:return i=o.sent(),[2,i&&i[0]&&i[0].level?parseInt(i[0].level)+1:1];case 6:return[2,-1]}})})},e.prototype.getTable=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return[4,this.getTables([e])];case 1:return t=n.sent(),[2,t.length>0?t[0]:void 0]}})})},e.prototype.getTables=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,c,l,p,d,m,f,h,y,g,v,b,E=this;return __generator(this,function(_){switch(_.label){case 0:if(this.sqlMemoryMode)throw new Error("Loading table is not supported in sql memory mode");return e&&e.length?(t=e.map(function(e){return-1===e.indexOf(".")?e:e.split(".")[1]}),n=e.filter(function(e){return-1!==e.indexOf(".")}).map(function(e){return e.split(".")[0]}),this.driver.database&&!n.find(function(e){return e===E.driver.database})&&n.push(this.driver.database),r=n.map(function(e){return"'"+e+"'"}).join(", "),c=t.map(function(e){return"'"+e+"'"}).join(", "),l="SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN ("+r+") AND TABLE_NAME IN ("+c+")",p="SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN ("+r+")",d="SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA IN ("+r+") AND INDEX_NAME != 'PRIMARY' ORDER BY SEQ_IN_INDEX",m="SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA IN ("+r+") AND REFERENCED_COLUM Line: 104 -  NULL",[4,Promise.all([this.query(l),this.query(p),this.query(d),this.query(m)])]):[2,[]];case 1:return f=_.sent(),h=f[0],y=f[1],g=f[2],v=f[3],h.length?(b="mariadb"===this.driver.options.type,[2,Promise.all(h.map(function(e){return __awaiter(E,void 0,void 0,function(){var t,n;return __generator(this,function(r){switch(r.label){case 0:return t=new o.Table(e.TABLE_NAME),t.database=e.TABLE_SCHEMA,[4,this.query("SHOW INDEX FROM `"+e.TABLE_SCHEMA+"`.`"+e.TABLE_NAME+"` WHERE Key_name = 'PRIMARY'")];case 1:return n=r.sent(),t.columns=y.filter(function(e){return e.TABLE_NAME===t.name}).map(function(e){var t=new i.TableColumn;t.name=e.COLUMN_NAME;var n=e.COLUMN_TYPE.toLowerCase(),r=n.indexOf("(");if(t.type=-1!==r?n.substring(0,r):n,null===e.COLUMN_DEFAULT||void 0===e.COLUMN_DEFAULT||b&&"NULL"===e.COLUMN_DEFAULT?t.default=void 0:t.default=e.COLUMN_DEFAULT,t.isNullable="YES"===e.IS_NULLABLE,t.isPrimary=-1!==e.COLUMN_KEY.indexOf("PRI"),t.isUnique=-1!==e.COLUMN_KEY.indexOf("UNI"),t.isGenerated=-1!==e.EXTRA.indexOf("auto_increment"),t.comment=e.COLUMN_COMMENT,t.precision=e.NUMERIC_PRECISION,t.scale=e.NUMERIC_SCALE,t.charset=e.CHARACTER_SET_NAME,t.collation=e.COLLATION_NAME,"int"===t.type||"tinyint"===t.type||"smallint"===t.type||"mediumint"===t.type||"bigint"===t.type||"year"===t.type){var o=n.substring(n.indexOf("(")+1,n.indexOf(")"));t.length=o?o.toString():""}else t.length=e.CHARACTER_MAXIMUM_LENGTH?e.CHARACTER_MAXIMUM_LENGTH.toString():"";if("enum"===t.type){var a=e.COLUMN_TYPE,s=a.substring(a.indexOf("(")+1,a.indexOf(")")).split(",");t.enum=s.map(function(e){return e.substring(1,e.length-1)})}return"datetime"!==t.type&&"time"!==t.type&&"timestamp"!==t.type||(t.precision=e.DATETIME_PRECISION),t}),t.primaryKeys=n.map(function(e){return new s.TablePrimaryKey(e.Key_name,e.Column_name)}),t.foreignKeys=v.filter(function(e){return e.TABLE_NAME===t.name}).map(function(e){return new a.TableForeignKey(e.CONSTRAINT_NAME,[],[],"","")}),t.indices=g.filter(function(e){return e.TABLE_NAME===t.name&&!t.foreignKeys.find(function(t){return t.name===e.INDEX_NAME})&&!t.primaryKeys.find(function(t){return  Line: 105 -  EX_NAME})}).map(function(e){return e.INDEX_NAME}).filter(function(e,t,n){return n.indexOf(e)===t}).map(function(n){var r=g.filter(function(e){return e.TABLE_NAME===t.name&&e.INDEX_NAME===n}),i=r.map(function(e){return e.COLUMN_NAME});if(1===r.length&&0===r[0].NON_UNIQUE){var o=t.columns.find(function(e){return e.name===r[0].INDEX_NAME&&e.name===r[0].COLUMN_NAME});if(o)return void(o.isUnique=!0)}return new u.TableIndex(e.TABLE_NAME,n,i,0===r[0].NON_UNIQUE)}).filter(function(e){return!!e}),[2,t]}})})}))]):[2,[]]}})})},e.prototype.hasDatabase=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return[4,this.query("SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '"+e+"'")];case 1:return t=n.sent(),[2,!!t.length]}})})},e.prototype.hasTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r;return __generator(this,function(i){switch(i.label){case 0:return t=this.parseTablePath(e),n="SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '"+t.database+"' AND TABLE_NAME = '"+t.tableName+"'",[4,this.query(n)];case 1:return r=i.sent(),[2,!!r.length]}})})},e.prototype.hasColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,o,a;return __generator(this,function(s){switch(s.label){case 0:return n=this.parseTablePath(e),r=t instanceof i.TableColumn?t.name:t,o="SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '"+n.database+"' AND TABLE_NAME = '"+n.tableName+"' AND COLUMN_NAME = '"+r+"'",[4,this.query(o)];case 1:return a=s.sent(),[2,!!a.length]}})})},e.prototype.createDatabase=function(e){return this.query("CREATE DATABASE IF NOT EXISTS "+e)},e.prototype.createSchema=function(e){return Promise.resolve([])},e.prototype.createTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i,o=this;return __generator(this,function(a){return t=e.columns.map(function(e){return o.buildCreateColumnSql(e,!1)}).join(", "),n="CREATE TABLE `"+this.escapeTablePath(e)+"` ("+t,(r=e.columns.filter(function(e){return e.isPrimary&&!e.isGenerated})).lengt Line: 108 -  umnNames.map(function(e){return"`"+e+"`"}).join(","),i="ALTER TABLE `"+this.escapeTablePath(e)+"` ADD CONSTRAINT `"+t.name+"` FOREIGN KEY ("+n+") REFERENCES `"+t.referencedTableName+"`("+r+")",t.onDelete&&(i+=" ON DELETE "+t.onDelete),o="ALTER TABLE `"+this.escapeTablePath(e)+"` DROP FOREIGN KEY `"+t.name+"`",[2,this.schemaQuery(i,o)]})})},e.prototype.createForeignKeys=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.createForeignKey(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.dropForeignKey=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,o;return __generator(this,function(a){return n="ALTER TABLE `"+this.escapeTablePath(e)+"` DROP FOREIGN KEY `"+t.name+"`",r=t.columnNames.map(function(e){return"`"+e+"`"}).join(", "),i=t.referencedColumnNames.map(function(e){return"`"+e+"`"}).join(","),o="ALTER TABLE `"+this.escapeTablePath(e)+"` ADD CONSTRAINT `"+t.name+"` FOREIGN KEY ("+r+") REFERENCES `"+t.referencedTableName+"`("+i+")",t.onDelete&&(o+=" ON DELETE "+t.onDelete),[2,this.schemaQuery(n,o)]})})},e.prototype.dropForeignKeys=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.dropForeignKey(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.createIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i;return __generator(this,function(o){switch(o.label){case 0:return n=t.columnNames.map(function(e){return"`"+e+"`"}).join(", "),r="CREATE "+(t.isUnique?"UNIQUE ":"")+"INDEX `"+t.name+"` ON `"+this.escapeTablePath(e)+"`("+n+")",i="ALTER TABLE `"+this.escapeTablePath(e)+"` DROP INDEX `"+t.name+"`",[4,this.schemaQuery(r,i)];case 1:return o.sent(),[2]}})})},e.prototype.dropIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,o;return __generator(this,function(a){switch(a.label){case 0:return n=t instanceof u.TableIndex?t.name:t,r="ALTER TABL Line: 109 -  peTablePath(e)+"` DROP INDEX `"+n+"`",t instanceof u.TableIndex?(i=t.columnNames.map(function(e){return"`"+e+"`"}).join(", "),o="CREATE "+(t.isUnique?"UNIQUE ":"")+"INDEX `"+t.name+"` ON `"+this.escapeTablePath(e)+"`("+i+")",[4,this.schemaQuery(r,o)]):[3,2];case 1:return a.sent(),[3,4];case 2:return[4,this.query(r)];case 3:a.sent(),a.label=4;case 4:return[2]}})})},e.prototype.truncate=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return[4,this.query("TRUNCATE TABLE `"+this.escapeTablePath(e)+"`")];case 1:return t.sent(),[2]}})})},e.prototype.clearDatabase=function(e,t){return __awaiter(this,void 0,void 0,function(){var e,n,r,i,o,a,s=this;return __generator(this,function(u){switch(u.label){case 0:return[4,this.startTransaction()];case 1:u.sent(),u.label=2;case 2:return u.trys.push([2,8,,13]),e="SET FOREIGN_KEY_CHECKS = 0;",n="SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`;') AS query FROM information_schema.tables WHERE table_schema = '"+t+"'",r="SET FOREIGN_KEY_CHECKS = 1;",[4,this.query(e)];case 3:return u.sent(),[4,this.query(n)];case 4:return i=u.sent(),[4,Promise.all(i.map(function(e){return s.query(e.query)}))];case 5:return u.sent(),[4,this.query(r)];case 6:return u.sent(),[4,this.commitTransaction()];case 7:return u.sent(),[3,13];case 8:o=u.sent(),u.label=9;case 9:return u.trys.push([9,11,,12]),[4,this.rollbackTransaction()];case 10:return u.sent(),[3,12];case 11:return a=u.sent(),[3,12];case 12:throw o;case 13:return[2]}})})},e.prototype.enableSqlMemory=function(){this.sqlMemoryMode=!0},e.prototype.disableSqlMemory=function(){this.sqlsInMemory=[],this.sqlMemoryMode=!1},e.prototype.getMemorySql=function(){return this.sqlsInMemory},e.prototype.schemaQuery=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){switch(n.label){case 0:return!0===this.sqlMemoryMode?(this.sqlsInMemory.push({up:e,down:t}),[2,Promise.resolve()]):[4,this.query(e)];case 1:return n.sent(),[2]}})})},e.prototype.parseTablePath=function(e){return e instanceof Line: 117 -  ),[3,3];case 3:return[2]}})})}),this.isTransactionActive&&this.queryResponsibilityChain.push(o),[2,o]}})})},e.prototype.stream=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){var i,o,a,s,u=this;return __generator(this,function(p){switch(p.label){case 0:if(this.isReleased)throw new c.QueryRunnerAlreadyReleasedError;return o=new Promise(function(e){return i=e}),this.queryResponsibilityChain.length?(a=this.queryResponsibilityChain.slice(),this.queryResponsibilityChain.push(o),[4,Promise.all(a)]):[3,2];case 1:p.sent(),p.label=2;case 2:return s=new Promise(function(a,c){return __awaiter(u,void 0,void 0,function(){var u,p,d=this;return __generator(this,function(m){switch(m.label){case 0:return this.driver.connection.logger.logQuery(e,t,this),[4,"slave"===this.mode?this.driver.obtainSlaveConnection():this.driver.obtainMasterConnection()];case 1:return u=m.sent(),p=new this.driver.mssql.Request(this.isTransactionActive?this.databaseConnection:u),p.stream=!0,t&&t.length&&t.forEach(function(e,t){e instanceof l.MssqlParameter?p.input(t,d.mssqlParameterToNativeParameter(e),e.value):p.input(t,e)}),p.query(e,function(n,r){var u=function(){-1!==l&&d.queryResponsibilityChain.splice(l,1),-1!==p&&d.queryResponsibilityChain.splice(p,1),i()},l=d.queryResponsibilityChain.indexOf(s),p=d.queryResponsibilityChain.indexOf(o);if(n)return d.driver.connection.logger.logQueryError(n,e,t,d),u(),c(n);a(r.recordset),u()}),n&&p.on("done",n),r&&p.on("error",r),a(p),[2]}})})}),this.isTransactionActive&&this.queryResponsibilityChain.push(s),[2,s]}})})},e.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,o,a,s,u,c,l,d,m;return __generator(this,function(f){switch(f.label){case 0:return n=Object.keys(t),r=n.map(function(e){return'"'+e+'"'}).join(", "),i=n.map(function(e,t){return"@"+t}).join(","),o=this.connection.hasMetadata(e)?this.connection.getMetadata(e).generatedColumns:[],a=o.map(function(e){return'INSERTED."'+e.databaseName+'"'}).join(", "),s=o.length>0?" OUTPUT "+a:"",u=r.length>0?"INSERT INTO "+this.escapeTablePath(e)+"("+r+") "+s+" VALUES ("+i+")":" Line: 118 -  this.escapeTablePath(e)+" "+s+" DEFAULT VALUES ",c=this.driver.parametrizeMap(e,t),l=Object.keys(c).map(function(e){return c[e]}),[4,this.query(u,l)];case 1:return d=f.sent(),m=o.reduce(function(e,t){var n=t.createValueMap(d[0][t.databaseName]);return p.OrmUtils.mergeDeep(e,n)},{}),[2,{result:d,generatedMap:Object.keys(m).length>0?m:void 0}]}})})},e.prototype.update=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o,a,s,u;return __generator(this,function(c){switch(c.label){case 0:return t=this.driver.parametrizeMap(e,t),n=this.driver.parametrizeMap(e,n),r=Object.keys(n).map(function(e){return n[e]}),i=Object.keys(t).map(function(e){return t[e]}),o=i.concat(r),a=this.parametrize(t).join(", "),s=this.parametrize(n,i.length).join(" AND "),u="UPDATE "+this.escapeTablePath(e)+" SET "+a+" "+(s?" WHERE "+s:""),[4,this.query(u,o)];case 1:return c.sent(),[2]}})})},e.prototype.delete=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o;return __generator(this,function(a){switch(a.label){case 0:return t="object"==typeof t?this.driver.parametrizeMap(e,t):t,r="string"==typeof t?t:this.parametrize(t).join(" AND "),i=t instanceof Object?Object.keys(t).map(function(e){return t[e]}):n,o="DELETE FROM "+this.escapeTablePath(e)+" WHERE "+r,[4,this.query(o,i)];case 1:return a.sent(),[2]}})})},e.prototype.insertIntoClosureTable=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){var i,o;return __generator(this,function(a){switch(a.label){case 0:return i="",i=r?"INSERT INTO "+this.escapeTablePath(e)+'("ancestor", "descendant", "level") SELECT "ancestor", '+t+', "level" + 1 FROM '+this.escapeTablePath(e)+' WHERE "descendant" = '+n+" UNION ALL SELECT "+t+", "+t+", 1":"INSERT INTO "+this.escapeTablePath(e)+'("ancestor", "descendant") SELECT "ancestor", '+t+" FROM "+this.escapeTablePath(e)+' WHERE "descendant" = '+n+" UNION ALL SELECT "+t+", "+t,[4,this.query(i)];case 1:return a.sent(),r?[4,this.query("SELECT MAX(level) as level FROM "+this.escapeTablePath(e)+" WHERE descendant = "+n)]:[3,3];case 2:return o=a.sent(),[2,o&&o[0]&&o[0].level?parseInt( Line: 119 -  1];case 3:return[2,-1]}})})},e.prototype.getTable=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return[4,this.getTables([e])];case 1:return t=n.sent(),[2,t.length>0?t[0]:void 0]}})})},e.prototype.getTables=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,c,l,p,d,m,f,h,y,g,v,b,E,_,T=this;return __generator(this,function(M){switch(M.label){case 0:return e&&e.length?(t=e.map(function(e){return 3===e.split(".").length?e.split(".")[2]:2===e.split(".").length?e.split(".")[1]:e}),n=[],e.filter(function(e){return-1!==e.indexOf(".")}).forEach(function(e){3===e.split(".").length?""!==e.split(".")[1]&&n.push(e.split(".")[1]):n.push(e.split(".")[0])}),n.push(this.driver.options.schema||"SCHEMA_NAME()"),r=e.filter(function(e){return 3===e.split(".").length}).map(function(e){return e.split(".")[0]}),this.driver.database&&!r.find(function(e){return e===T.driver.database})&&r.push(this.driver.database),c=n.map(function(e){return"SCHEMA_NAME()"===e?e:"'"+e+"'"}).join(", "),l=t.map(function(e){return"'"+e+"'"}).join(", "),p=r.map(function(e){return"SELECT * FROM "+e+".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN ("+l+") AND TABLE_SCHEMA IN ("+c+")"}).join(" UNION ALL "),d=r.map(function(e){return"SELECT * FROM "+e+".INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN ("+c+")"}).join(" UNION ALL "),m=r.map(function(e){return"SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM "+e+".INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages LEFT JOIN "+e+".INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME WHERE columnUsages.TABLE_SCHEMA IN ("+c+") AND tableConstraints.TABLE_SCHEMA IN ("+c+")"}).join(" UNION ALL "),f=r.map(function(e){return"SELECT COLUMN_NAME, TABLE_NAME FROM "+e+".INFORMATION_SCHEMA.COLUMNS WHERE COLUMNPROPERTY(object_id(TABLE_SCHEMA + '.' + TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1 AND TABLE_SCHEMA IN ("+c+")"}).join(" UNION ALL "),h=r.map(function(e){return"SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, Ind Line: 120 -  ex_id, ColumnId = ic.index_column_id, \n                    COLUMN_NAME = col.name, IS_UNIQUE = ind.is_unique, ind.*, ic.*, col.* \n                    FROM "+e+".sys.indexes ind \n                    INNER JOIN "+e+".sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id\n                    INNER JOIN "+e+".sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id \n                    INNER JOIN "+e+".sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 \n                    AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0"}).join(" UNION ALL "),[4,Promise.all([this.query(p),this.query(d),this.query(m),this.query(f),this.query(h)])]):[2,[]];case 1:return y=M.sent(),g=y[0],v=y[1],b=y[2],E=y[3],_=y[4],g.length?[2,Promise.all(g.map(function(e){return __awaiter(T,void 0,void 0,function(){var t;return __generator(this,function(n){return t=new o.Table(e.TABLE_NAME),t.database=e.TABLE_CATALOG,t.schema=e.TABLE_SCHEMA,t.columns=v.filter(function(e){return e.TABLE_NAME===t.name}).map(function(e){var n=!!b.find(function(n){return n.TABLE_NAME===t.name&&n.COLUMN_NAME===e.COLUMN_NAME&&"PRIMARY KEY"===n.CONSTRAINT_TYPE}),r=!!E.find(function(n){return n.TABLE_NAME===t.name&&n.COLUMN_NAME===e.COLUMN_NAME}),o=!!b.find(function(n){return n.TABLE_NAME===t.name&&n.COLUMN_NAME===e.COLUMN_NAME&&"UNIQUE"===n.CONSTRAINT_TYPE}),a=new i.TableColumn;return a.name=e.COLUMN_NAME,a.type=e.DATA_TYPE.toLowerCase(),a.length=e.CHARACTER_MAXIMUM_LENGTH?e.CHARACTER_MAXIMUM_LENGTH.toString():"","-1"===a.length&&(a.length="MAX"),a.precision=e.NUMERIC_PRECISION,a.scale=e.NUMERIC_SCALE,a.default=null!==e.COLUMN_DEFAULT&&void 0!==e.COLUMN_DEFAULT?e.COLUMN_DEFAULT:void 0,a.isNullable="YES"===e.IS_NULLABLE,a.isPrimary=n,a.isGenerated=r,"(newsequentialid())"===a.default&&(a.isGenerated=!0,a.default=void 0),a.isUnique=o,a.charset=e.CHARACTER_SET_NAME,a.collation=e.COLLATION_NAME,a.comment="","datetime2"!==a.type&&"time"!==a.type&&"datetimeoffset"!==a.type||(a.precision=e.DATETIME_PRECISION),a}),t.primaryKeys=b.filter(function(e){return e. Line: 121 -  .name&&"PRIMARY KEY"===e.CONSTRAINT_TYPE}).map(function(e){return new s.TablePrimaryKey(e.CONSTRAINT_NAME,e.COLUMN_NAME)}),t.foreignKeys=b.filter(function(e){return e.TABLE_NAME===t.name&&"FOREIGN KEY"===e.CONSTRAINT_TYPE}).map(function(e){return new a.TableForeignKey(e.CONSTRAINT_NAME,[],[],"","")}),t.indices=_.filter(function(e){return e.TABLE_NAME===t.name&&!t.foreignKeys.find(function(t){return t.name===e.INDEX_NAME})&&!t.primaryKeys.find(function(t){return t.name===e.INDEX_NAME})}).map(function(e){return e.INDEX_NAME}).filter(function(e,t,n){return n.indexOf(e)===t}).map(function(n){var r=_.filter(function(e){return e.TABLE_NAME===t.name&&e.INDEX_NAME===n}).map(function(e){return e.COLUMN_NAME}),i=!!_.find(function(e){return e.TABLE_NAME===t.name&&e.INDEX_NAME===n&&!0===e.IS_UNIQUE});return new u.TableIndex(e.TABLE_NAME,n,r,i)}),[2,t]})})}))]:[2,[]]}})})},e.prototype.hasDatabase=function(e){return __awaiter(this,void 0,void 0,function(){var t,n;return __generator(this,function(r){switch(r.label){case 0:return[4,this.query("SELECT DB_ID('"+e+"') as db_id")];case 1:return t=r.sent(),n=t[0].db_id,[2,!!n]}})})},e.prototype.hasTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r;return __generator(this,function(i){switch(i.label){case 0:return t=this.parseTablePath(e),n="SELECT * FROM "+t.database+".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '"+t.tableName+"' AND TABLE_SCHEMA = "+("SCHEMA_NAME()"===t.schema?t.schema:"'"+t.schema+"'"),[4,this.query(n)];case 1:return r=i.sent(),[2,!!r.length]}})})},e.prototype.createDatabase=function(e){return this.query("IF DB_ID('"+e+"') IS NULL CREATE DATABASE "+e)},e.prototype.createSchema=function(e){var t=this;return this.driver.options.schema&&e.push(this.driver.options.schema),m.PromiseUtils.runInSequence(e,function(e){return __awaiter(t,void 0,void 0,function(){var t,n,r,i,o;return __generator(this,function(a){switch(a.label){case 0:return-1!==e.indexOf(".")?[3,1]:(o="IF SCHEMA_ID('"+e+"') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA "+e+"' END",[2,this.query(o)]);case 1:return t=e.split(".")[0],n=e.split(". Line: 122 -  query("SELECT DB_NAME() AS db_name")];case 2:return r=a.sent(),i=r[0].db_name,[4,this.query("USE "+t)];case 3:return a.sent(),o="IF SCHEMA_ID('"+n+"') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA "+n+"' END",[4,this.query(o)];case 4:return a.sent(),[2,this.query("USE "+i)]}})})})},e.prototype.createTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i=this;return __generator(this,function(o){switch(o.label){case 0:return t=e.columns.map(function(t){return i.buildCreateColumnSql(e.name,t,!1,!0)}).join(", "),n="CREATE TABLE "+this.escapeTablePath(e)+" ("+t,n+=e.columns.filter(function(e){return e.isUnique}).map(function(t){var n=e.name+"_"+t.name,r=e.schema||i.driver.options.schema;return r&&(n=r+"_"+n),', CONSTRAINT "uk_'+n+'" UNIQUE ("'+t.name+'")'}).join(" "),(r=e.columns.filter(function(e){return e.isPrimary})).length>0&&(n+=", PRIMARY KEY("+r.map(function(e){return'"'+e.name+'"'}).join(", ")+")"),n+=")",[4,this.query(n)];case 1:return o.sent(),[2]}})})},e.prototype.dropTable=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return[4,this.query("DROP TABLE "+this.escapeTablePath(e))];case 1:return t.sent(),[2]}})})},e.prototype.hasColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i;return __generator(this,function(o){switch(o.label){case 0:return n=this.parseTablePath(e),r="SELECT * FROM "+n.database+".INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '"+n.tableName+"' AND COLUMN_NAME = '"+t+"' AND TABLE_SCHEMA = "+("SCHEMA_NAME()"===n.schema?n.schema:"'"+n.schema+"'"),[4,this.query(r)];case 1:return i=o.sent(),[2,!!i.length]}})})},e.prototype.addColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){return n=e instanceof o.Table?e.name:this.parseTablePath(e).tableName,r="ALTER TABLE "+this.escapeTablePath(e)+" ADD "+this.buildCreateColumnSql(n,t,!1,!0),[2,this.query(r)]})})},e.prototype.addColumns=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function( Line: 124 -  TABLE "+this.escapeTablePath(e)+' DROP CONSTRAINT "df_'+r.name+"_"+n.name+'"')];case 12:return u.sent(),[4,this.query("ALTER TABLE "+this.escapeTablePath(e)+' ADD CONSTRAINT "df_'+r.name+"_"+n.name+'" DEFAULT '+n.default+' FOR "'+n.name+'"')];case 13:return u.sent(),[3,16];case 14:return null===a.default||void 0===a.default?[3,16]:[4,this.query("ALTER TABLE "+this.escapeTablePath(e)+' DROP CONSTRAINT "df_'+r.name+"_"+n.name+'"')];case 15:u.sent(),u.label=16;case 16:return[2]}})})},e.prototype.changeColumns=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return __awaiter(r,void 0,void 0,function(){return __generator(this,function(n){return[2,this.changeColumn(e,t.oldColumn,t.newColumn)]})})}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.dropColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){switch(n.label){case 0:return t.default?[4,this.query("ALTER TABLE "+this.escapeTablePath(e)+' DROP CONSTRAINT "df_'+e.name+"_"+t.name+'"')]:[3,2];case 1:n.sent(),n.label=2;case 2:return[4,this.query("ALTER TABLE "+this.escapeTablePath(e)+' DROP COLUMN "'+t.name+'"')];case 3:return n.sent(),[2]}})})},e.prototype.dropColumns=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.dropColumn(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.updatePrimaryKeys=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i,o;return __generator(this,function(a){switch(a.label){case 0:return t=e.schema||"SCHEMA_NAME()",n=e.database||this.driver.database,r="SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM "+n+".INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\nLEFT JOIN "+n+".INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\nWHERE tableConstrai Line: 125 -  LOG = '"+n+"' AND columnUsages.TABLE_SCHEMA = '"+t+"' AND tableConstraints.TABLE_SCHEMA = '"+t+"'",[4,this.query(r)];case 1:return(i=a.sent()).length>0?[4,this.query("ALTER TABLE "+this.escapeTablePath(e)+' DROP CONSTRAINT "'+i[0].CONSTRAINT_NAME+'"')]:[3,3];case 2:a.sent(),a.label=3;case 3:return(o=e.primaryKeys.map(function(e){return'"'+e.columnName+'"'})).length>0?[4,this.query("ALTER TABLE "+this.escapeTablePath(e)+" ADD PRIMARY KEY ("+o.join(", ")+")")]:[3,5];case 4:a.sent(),a.label=5;case 5:return[2]}})})},e.prototype.createForeignKey=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i;return __generator(this,function(o){return n=t.columnNames.map(function(e){return'"'+e+'"'}).join(", "),r=t.referencedColumnNames.map(function(e){return'"'+e+'"'}).join(","),i="ALTER TABLE "+this.escapeTablePath(e)+' ADD CONSTRAINT "'+t.name+'" FOREIGN KEY ('+n+") REFERENCES "+this.escapeTablePath(t.referencedTablePath)+"("+r+")",t.onDelete&&(i+=" ON DELETE "+t.onDelete),[2,this.query(i)]})})},e.prototype.createForeignKeys=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.createForeignKey(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.dropForeignKey=function(e,t){return __awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){return n="ALTER TABLE "+this.escapeTablePath(e)+' DROP CONSTRAINT "'+t.name+'"',[2,this.query(n)]})})},e.prototype.dropForeignKeys=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.dropForeignKey(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.prototype.createIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:return n=t.columnNames.map(function(e){return'"'+e+'"'}).join(", "),r="CREATE "+(t.isUnique?"UNIQUE ":"")+'INDEX "'+t.name+'" ON '+this.escapeTablePath(e)+"("+n+")",[ Line: 126 -  )];case 1:return i.sent(),[2]}})})},e.prototype.dropIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){switch(r.label){case 0:return n='DROP INDEX "'+t+'" ON '+this.escapeTablePath(e),[4,this.query(n)];case 1:return r.sent(),[2]}})})},e.prototype.truncate=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return[4,this.query("TRUNCATE TABLE "+this.escapeTablePath(e))];case 1:return t.sent(),[2]}})})},e.prototype.clearDatabase=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,o,a,s,u=this;return __generator(this,function(c){switch(c.label){case 0:return[4,this.hasDatabase(t)];case 1:return(n=c.sent())?(e||(e=[]),e.push(this.driver.options.schema||"SCHEMA_NAME()"),r=e.map(function(e){return"SCHEMA_NAME()"===e?e:"'"+e+"'"}).join(", "),[4,this.startTransaction()]):[2,Promise.resolve()];case 2:c.sent(),c.label=3;case 3:return c.trys.push([3,8,,13]),i="SELECT * FROM "+t+".INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA IN ("+r+")",[4,this.query(i)];case 4:return o=c.sent(),[4,Promise.all(o.map(function(e){return __awaiter(u,void 0,void 0,function(){var n,r,i=this;return __generator(this,function(o){switch(o.label){case 0:return n="SELECT 'ALTER TABLE \""+t+"\".\"' + OBJECT_SCHEMA_NAME(fk.parent_object_id, DB_ID('"+t+"')) + '\".\"' + OBJECT_NAME(fk.parent_object_id, DB_ID('"+t+"')) + '\" DROP CONSTRAINT \"' + fk.name + '\"' as query FROM "+t+".sys.foreign_keys AS fk WHERE fk.referenced_object_id = object_id('\""+t+'"."'+e.TABLE_SCHEMA+'"."'+e.TABLE_NAME+"\"')",[4,this.query(n)];case 1:return r=o.sent(),[2,Promise.all(r.map(function(e){return e.query}).map(function(e){return i.query(e)}))]}})})}))];case 5:return c.sent(),[4,Promise.all(o.map(function(e){var t='DROP TABLE "'+e.TABLE_CATALOG+'"."'+e.TABLE_SCHEMA+'"."'+e.TABLE_NAME+'"';return u.query(t)}))];case 6:return c.sent(),[4,this.commitTransaction()];case 7:return c.sent(),[3,13];case 8:a=c.sent(),c.label=9;case 9:return c.trys.push([9,11,,12]),[4,this.rollba Line: 133 -  tream=function(e,t,n,r){var i=this,o=this.driver.loadStreamDependency();if(this.isReleased)throw new c.QueryRunnerAlreadyReleasedError;return new Promise(function(a,s){return __awaiter(i,void 0,void 0,function(){var i,u,c;return __generator(this,function(l){switch(l.label){case 0:return l.trys.push([0,2,,3]),[4,this.connect()];case 1:return i=l.sent(),this.driver.connection.logger.logQuery(e,t,this),u=i.query(new o(e,t)),n&&u.on("end",n),r&&u.on("error",r),a(u),[3,3];case 2:return c=l.sent(),s(c),[3,3];case 3:return[2]}})})})},e.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,o,a,s,u,c,l,d;return __generator(this,function(m){switch(m.label){case 0:return n=Object.keys(t),r=n.map(function(e){return'"'+e+'"'}).join(", "),i=n.map(function(e,t){return"$"+(t+1)}).join(","),o=this.connection.hasMetadata(e)?this.connection.getMetadata(e).generatedColumns:[],a=o.map(function(e){return'"'+e.databaseName+'"'}).join(", "),s=o.length>0?" RETURNING "+a:"",u=r.length>0?"INSERT INTO "+this.escapeTablePath(e)+"("+r+") VALUES ("+i+") "+s:"INSERT INTO "+this.escapeTablePath(e)+" DEFAULT VALUES "+s,c=n.map(function(e){return t[e]}),[4,this.query(u,c)];case 1:return l=m.sent(),d=o.reduce(function(e,t){var n=t.createValueMap(l[0][t.databaseName]);return p.OrmUtils.mergeDeep(e,n)},{}),[2,{result:l,generatedMap:Object.keys(d).length>0?d:void 0}]}})})},e.prototype.update=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o,a,s,u;return __generator(this,function(c){switch(c.label){case 0:return r=this.parametrize(t).join(", "),i=this.parametrize(n,Object.keys(t).length).join(" AND "),o="UPDATE "+this.escapeTablePath(e)+" SET "+r+(i?" WHERE "+i:""),a=Object.keys(t).map(function(e){return t[e]}),s=Object.keys(n).map(function(e){return n[e]}),u=a.concat(s),[4,this.query(o,u)];case 1:return c.sent(),[2]}})})},e.prototype.delete=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,o;return __generator(this,function(a){switch(a.label){case 0:return r="string"==typeof t?t:this.parametrize(t).join(" AND "),i=t instanceof Object?Obj Line: 134 -  p(function(e){return t[e]}):n,o="DELETE FROM "+this.escapeTablePath(e)+" WHERE "+r,[4,this.query(o,i)];case 1:return a.sent(),[2]}})})},e.prototype.insertIntoClosureTable=function(e,t,n,r){return __awaiter(this,void 0,void 0,function(){var i,o;return __generator(this,function(a){switch(a.label){case 0:return i="",i=r?"INSERT INTO "+this.escapeTablePath(e)+'("ancestor", "descendant", "level") SELECT "ancestor", '+t+', "level" + 1 FROM '+this.escapeTablePath(e)+' WHERE "descendant" = '+n+" UNION ALL SELECT "+t+", "+t+", 1":"INSERT INTO "+this.escapeTablePath(e)+'("ancestor", "descendant") SELECT "ancestor", '+t+" FROM "+this.escapeTablePath(e)+' WHERE "descendant" = '+n+" UNION ALL SELECT "+t+", "+t,[4,this.query(i)];case 1:return a.sent(),r?[4,this.query("SELECT MAX(level) as level FROM "+this.escapeTablePath(e)+" WHERE descendant = "+n)]:[3,3];case 2:return o=a.sent(),[2,o&&o[0]&&o[0].level?parseInt(o[0].level)+1:1];case 3:return[2,-1]}})})},e.prototype.getTable=function(e){return __awaiter(this,void 0,void 0,function(){var t;return __generator(this,function(n){switch(n.label){case 0:return[4,this.getTables([e])];case 1:return t=n.sent(),[2,t.length>0?t[0]:void 0]}})})},e.prototype.getTables=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,c,l,p,d,m,f,h,y,g,v,b,E,_,T,M,C,w,N=this;return __generator(this,function(R){switch(R.label){case 0:return e&&e.length?(t=e.map(function(e){return-1===e.indexOf(".")?e:e.split(".")[1]}),[4,this.query("SELECT * FROM current_schema()")]):[2,[]];case 1:return n=R.sent(),r=n[0].current_schema,(c=e.filter(function(e){return-1!==e.indexOf(".")}).map(function(e){return e.split(".")[0]})).push(this.driver.options.schema||r),l=t.map(function(e){return"'"+e+"'"}).join(", "),p=c.map(function(e){return"'"+e+"'"}).join(", "),d=e.map(function(e){var t=e.split("."),n=t[0],i=t[1];return i||(i=n,n=N.driver.options.schema||r),"table_schema = '"+n+"' AND table_name = '"+i+"'"}).join(" OR "),m="SELECT * FROM information_schema.tables WHERE "+d,f="SELECT * FROM information_schema.columns WHERE table_schema IN ("+p+")",h="SELECT t.relname AS  Line: 135 -  relname AS index_name, a.attname AS column_name, ix.indisunique AS is_unique, a.attnum, ix.indkey FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN ("+l+") AND t.relnamespace = ns.OID AND ns.nspname IN ("+p+") ORDER BY t.relname, i.relname",y="SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_schema IN ("+p+") AND constraint_type = 'FOREIGN KEY'",g="SELECT * FROM information_schema.table_constraints WHERE table_schema IN ("+p+") AND constraint_type = 'UNIQUE'",v="SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema IN ("+p+")",[4,Promise.all([this.query(m),this.query(f),this.query(h),this.query(y),this.query(g),this.query(v)])];case 2:return b=R.sent(),E=b[0],_=b[1],T=b[2],M=b[3],C=b[4],w=b[5],E.length?[2,E.map(function(e){var t=new o.Table(e.table_name);return t.database=e.table_catalog,t.schema=e.table_schema,t.columns=_.filter(function(e){return e.table_name===t.name}).map(function(e){var n=t.schema===r?e.table_name+"_"+e.column_name+"_seq":t.schema+"."+e.table_name+"_"+e.column_name+"_seq",o=!!e.column_default&&(e.column_default.replace(/"/gi,"")==="nextval('"+n+"'::regclass)"||/^uuid\_generate\_v\d\(\)/.test(e.column_default)),a=new i.TableColumn;if(a.name=e.column_name,a.type=e.data_type.toLowerCase(),a.length=e.character_maximum_length?e.character_maximum_length.toString():"",a.precision=e.numeric_precision,a.scale=e.numeric_scale,a.default=null!==e.column_default&&void 0!==e.column_default?e.column_default.replace(/::character varying/,""):void 0,a.isNullable="YES"===e.is_nullable,a.isGenerated=o,a.comment="",a.charset Line: 136 -  et_name,a.collation=e.collation_name,a.isUnique=!!C.find(function(t){return t.constraint_name==="uk_"+e.table_name+"_"+e.column_name}),"array"===a.type){a.isArray=!0;var s=e.udt_name.substring(1);a.type=N.connection.driver.normalizeType({type:s})}return"time without time zone"!==a.type&&"time with time zone"!==a.type&&"timestamp without time zone"!==a.type&&"timestamp with time zone"!==a.type||(a.precision=e.datetime_precision),a}),t.primaryKeys=w.filter(function(e){return e.table_name===t.name}).map(function(e){return new u.TablePrimaryKey(e.constraint_name,e.column_name)}),t.foreignKeys=M.filter(function(e){return e.table_name===t.name}).map(function(e){return new s.TableForeignKey(e.constraint_name,[],[],"","")}),t.indices=T.filter(function(e){return e.table_name===t.name&&!t.foreignKeys.find(function(t){return t.name===e.index_name})&&!t.primaryKeys.find(function(t){return t.name===e.index_name})&&!C.find(function(t){return t.constraint_name===e.index_name})}).map(function(e){return e.index_name}).filter(function(e,t,n){return n.indexOf(e)===t}).map(function(n){var r=T.filter(function(e){return e.table_name===t.name&&e.index_name===n}),i=r[0].indkey.split(" ").map(function(e){return parseInt(e)}).map(function(e){return r.find(function(t){return t.attnum===e}).column_name});return new a.TableIndex(e.table_name,n,i,r[0].is_unique)}),t})]:[2,[]]}})})},e.prototype.hasDatabase=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return[2,Promise.resolve(!1)]})})},e.prototype.hasTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r;return __generator(this,function(i){switch(i.label){case 0:return t=this.parseTablePath(e),n="SELECT * FROM information_schema.tables WHERE table_schema = "+t.schema+" AND table_name = "+t.tableName,[4,this.query(n)];case 1:return r=i.sent(),[2,!!r.length]}})})},e.prototype.createDatabase=function(e){return Promise.resolve([])},e.prototype.createSchema=function(e){return __awaiter(this,void 0,void 0,function(){var t=this;return __generator(this,function(n){return this.driver.options.schem Line: 137 -  .driver.options.schema),[2,Promise.all(e.map(function(e){return t.query('CREATE SCHEMA IF NOT EXISTS "'+e+'"')}))]})})},e.prototype.createTable=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i,o,a=this;return __generator(this,function(s){switch(s.label){case 0:return t=e.schema||this.driver.options.schema,n=e.columns.map(function(e){return a.buildCreateColumnSql(e,!1)}).join(", "),r="CREATE TABLE "+this.escapeTablePath(e)+" ("+n,r+=e.columns.filter(function(e){return e.isUnique}).map(function(n){return t?', CONSTRAINT "uk_'+t+"_"+e.name+"_"+n.name+'" UNIQUE ("'+n.name+'")':', CONSTRAINT "uk_'+e.name+"_"+n.name+'" UNIQUE ("'+n.name+'")'}).join(" "),(i=e.columns.filter(function(e){return e.isPrimary})).length>0&&(r+=", PRIMARY KEY("+i.map(function(e){return'"'+e.name+'"'}).join(", ")+")"),r+=")",o='DROP TABLE "'+e.name+'"',[4,this.schemaQuery(r,o)];case 1:return s.sent(),[2]}})})},e.prototype.dropTable=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return[4,this.query("DROP TABLE "+this.escapeTablePath(e))];case 1:return t.sent(),[2]}})})},e.prototype.hasColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i;return __generator(this,function(o){switch(o.label){case 0:return n=this.parseTablePath(e),r="SELECT * FROM information_schema.columns WHERE table_schema = "+n.schema+" AND table_name = '"+n.tableName+"' AND column_name = '"+t+"'",[4,this.query(r)];case 1:return i=o.sent(),[2,!!i.length]}})})},e.prototype.addColumn=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){return n="ALTER TABLE "+this.escapeTablePath(e)+" ADD "+this.buildCreateColumnSql(t,!1),r="ALTER TABLE "+this.escapeTablePath(e)+' DROP "'+t.name+'"',[2,this.schemaQuery(n,r)]})})},e.prototype.addColumns=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r=this;return __generator(this,function(i){switch(i.label){case 0:return n=t.map(function(t){return r.addColumn(e,t)}),[4,Promise.all(n)];case 1:return i.sent(),[2]}})})},e.protot Line: 141 -  function(o){switch(o.label){case 0:return n=t.columnNames.map(function(e){return'"'+e+'"'}).join(","),r="CREATE "+(t.isUnique?"UNIQUE ":"")+'INDEX "'+t.name+'" ON '+this.escapeTablePath(e)+"("+n+")",i="-- TODO: revert "+r,[4,this.schemaQuery(r,i)];case 1:return o.sent(),[2]}})})},e.prototype.dropIndex=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i;return __generator(this,function(o){switch(o.label){case 0:return n=this.extractSchema(e),r=n?'DROP INDEX "'+n+'"."'+t+'"':'DROP INDEX "'+t+'"',i="-- TODO: revert "+r,[4,this.schemaQuery(r,i)];case 1:return o.sent(),[2]}})})},e.prototype.truncate=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return[4,this.query("TRUNCATE TABLE "+this.escapeTablePath(e))];case 1:return t.sent(),[2]}})})},e.prototype.clearDatabase=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i,o,a=this;return __generator(this,function(s){switch(s.label){case 0:return e||(e=[]),e.push(this.driver.options.schema||"current_schema()"),t=e.map(function(e){return"current_schema()"===e?e:"'"+e+"'"}).join(", "),[4,this.startTransaction()];case 1:s.sent(),s.label=2;case 2:return s.trys.push([2,6,,11]),n="SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname IN ("+t+")",[4,this.query(n)];case 3:return r=s.sent(),[4,Promise.all(r.map(function(e){return a.query(e.query)}))];case 4:return s.sent(),[4,this.commitTransaction()];case 5:return s.sent(),[3,11];case 6:i=s.sent(),s.label=7;case 7:return s.trys.push([7,9,,10]),[4,this.rollbackTransaction()];case 8:return s.sent(),[3,10];case 9:return o=s.sent(),[3,10];case 10:throw i;case 11:return[2]}})})},e.prototype.enableSqlMemory=function(){this.sqlMemoryMode=!0},e.prototype.disableSqlMemory=function(){this.sqlsInMemory=[],this.sqlMemoryMode=!1},e.prototype.getMemorySql=function(){return this.sqlsInMemory},e.prototype.schemaQuery=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){switch(n.label){c Line: 142 -  ===this.sqlMemoryMode?(this.sqlsInMemory.push({up:e,down:t}),[2,Promise.resolve()]):[4,this.query(e)];case 1:return n.sent(),[2]}})})},e.prototype.extractSchema=function(e){return e instanceof o.Table?e.schema||this.driver.options.schema:-1===e.indexOf(".")?this.driver.options.schema:e.split(".")[0]},e.prototype.foreignKeySql=function(e,t){var n="ALTER TABLE "+this.escapeTablePath(e)+' ADD CONSTRAINT "'+t.name+'" FOREIGN KEY ("'+t.columnNames.join('", "')+'") REFERENCES '+this.escapeTablePath(t.referencedTablePath)+'("'+t.referencedColumnNames.join('", "')+'")';return t.onDelete&&(n+=" ON DELETE "+t.onDelete),{add:n,drop:"ALTER TABLE "+this.escapeTablePath(e)+' DROP CONSTRAINT "'+t.name+'"'}},e.prototype.escapeTablePath=function(e,t){if(e instanceof o.Table){var n=e.schema||this.driver.options.schema;e=n?n+"."+e.name:e.name}else e=-1===e.indexOf(".")&&this.driver.options.schema?this.driver.options.schema+"."+e:e;return e.split(".").map(function(e){return t?e:'"'+e+'"'}).join(".")},e.prototype.parseTablePath=function(e){return-1===e.indexOf(".")?{schema:this.driver.options.schema?"'"+this.driver.options.schema+"'":"current_schema()",tableName:"'"+e+"'"}:{schema:"'"+e.split(".")[0]+"'",tableName:"'"+e.split(".")[1]+"'"}},e.prototype.parametrize=function(e,t){return void 0===t&&(t=0),Object.keys(e).map(function(e,n){return'"'+e+'"=$'+(t+n+1)})},e.prototype.buildCreateColumnSql=function(e,t){var n='"'+e.name+'"';return!0===e.isGenerated&&"increment"===e.generationStrategy&&("integer"===e.type&&(n+=" SERIAL"),"smallint"===e.type&&(n+=" SMALLSERIAL"),"bigint"===e.type&&(n+=" BIGSERIAL")),e.isGenerated&&"uuid"!==e.type||(n+=" "+this.connection.driver.createFullType(e)),e.charset&&(n+=' CHARACTER SET "'+e.charset+'"'),e.collation&&(n+=' COLLATE "'+e.collation+'"'),!0!==e.isNullable&&(n+=" NOT NULL"),void 0!==e.default&&null!==e.default&&(n+=" DEFAULT "+e.default),e.isGenerated&&"uuid"===e.generationStrategy&&!e.default&&(n+=" DEFAULT uuid_generate_v4()"),n},e}(),e("PostgresQueryRunner",d)}}}),System.register("typeorm/driver/postgres/PostgresDriver",["typeorm/error/ConnectionIsNotSetE Line: 148 -  ar u=n?n+"."+o:o;i.push(u)}}),i},e.getPropertyPathValue=function(e,t){var n=t.split("."),r=function(e){var t=n.shift(),i=t?e[t]:e;return n.length?r(i):i};return r(e)},e}(),e("EntityMetadataUtils",n)}}}),System.register("typeorm/error/LimitOnUpdateNotSupportedError",[],function(e,t){"use strict";var n;t&&t.id;return{setters:[],execute:function(){n=function(e){function t(){var n=e.call(this,"Your database does not support LIMIT on UPDATE statements.")||this;return Object.setPrototypeOf(n,t.prototype),n.name="LimitOnUpdateNotSupportedError",n}return __extends(t,e),t}(Error),e("LimitOnUpdateNotSupportedError",n)}}}),System.register("typeorm/query-builder/UpdateQueryBuilder",["typeorm/query-builder/QueryBuilder","typeorm/driver/mysql/MysqlDriver","typeorm/driver/sqlserver/SqlServerDriver","typeorm/driver/postgres/PostgresDriver","typeorm/metadata/EntityMetadataUtils","typeorm/error/LimitOnUpdateNotSupportedError"],function(e,t){"use strict";var n,r,i,o,a,s,u;t&&t.id;return{setters:[function(e){n=e},function(e){r=e},function(e){i=e},function(e){o=e},function(e){a=e},function(e){s=e}],execute:function(){u=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.expressionMap.aliasNamePrefixingEnabled=!1,r}return __extends(t,e),t.prototype.getQuery=function(){var e=this.createUpdateExpression();return e+=this.createOrderByExpression(),(e+=this.createLimitExpression()).trim()},t.prototype.output=function(e){return this.returning(e)},t.prototype.set=function(e){return this.expressionMap.valuesSet=e,this},t.prototype.where=function(e,t){this.expressionMap.wheres=[];var n=this.computeWhereParameter(e);return n&&(this.expressionMap.wheres=[{type:"simple",condition:n}]),t&&this.setParameters(t),this},t.prototype.andWhere=function(e,t){return this.expressionMap.wheres.push({type:"and",condition:this.computeWhereParameter(e)}),t&&this.setParameters(t),this},t.prototype.orWhere=function(e,t){return this.expressionMap.wheres.push({type:"or",condition:this.computeWhereParameter(e)}),t&&this.setParameters(t),this},t.prototype.whereInIds=function(e){e=e instanceof Array?e:[e];var t=this. Line: 149 -  Expression(e),n=t[0],r=t[1];return this.where(n,r),this},t.prototype.andWhereInIds=function(e){e=e instanceof Array?e:[e];var t=this.createWhereIdsExpression(e),n=t[0],r=t[1];return this.andWhere(n,r),this},t.prototype.orWhereInIds=function(e){e=e instanceof Array?e:[e];var t=this.createWhereIdsExpression(e),n=t[0],r=t[1];return this.orWhere(n,r),this},t.prototype.orderBy=function(e,t,n){return void 0===t&&(t="ASC"),e?e instanceof Object?this.expressionMap.orderBys=e:this.expressionMap.orderBys=n?(r={},r[e]={order:t,nulls:n},r):(i={},i[e]=t,i):this.expressionMap.orderBys={},this;var r,i},t.prototype.addOrderBy=function(e,t,n){return void 0===t&&(t="ASC"),this.expressionMap.orderBys[e]=n?{order:t,nulls:n}:t,this},t.prototype.limit=function(e){return this.expressionMap.limit=e,this},t.prototype.returning=function(e){if(this.connection.driver instanceof i.SqlServerDriver||this.connection.driver instanceof o.PostgresDriver)return this.expressionMap.returning=e,this;throw new Error("OUTPUT or RETURNING clause only supported by MS SQLServer or PostgreSQL")},t.prototype.createUpdateExpression=function(){var e=this,t=this.getValueSet(),n=this.expressionMap.mainAlias.hasMetadata?this.expressionMap.mainAlias.metadata:void 0,r=[];n?a.EntityMetadataUtils.createPropertyPath(n,t).forEach(function(o){var a=n.findColumnWithPropertyPath(o);if(a){var s="_updated_"+a.databaseName,u=e.connection.driver.preparePersistentValue(a.getEntityValue(t),a);u instanceof Function?r.push(e.escape(a.databaseName)+" = "+u()):(e.connection.driver instanceof i.SqlServerDriver?e.setParameter(s,e.connection.driver.parametrizeValue(a,u)):e.setParameter(s,u),r.push(e.escape(a.databaseName)+" = :"+s))}}):Object.keys(t).map(function(n){var i=t[n];i instanceof Function?r.push(e.escape(n)+" = "+i()):(r.push(e.escape(n)+" = :"+n),e.setParameter(n,i))});var s=this.createWhereExpression();return""!==this.expressionMap.returning&&this.connection.driver instanceof o.PostgresDriver?"UPDATE "+this.getTableName(this.getMainTableName())+" SET "+r.join(", ")+s+" RETURNING "+this.expressionMap.returning:""!==this.expressionMap.re Line: 150 -  connection.driver instanceof i.SqlServerDriver?"UPDATE "+this.getTableName(this.getMainTableName())+" SET "+r.join(", ")+" OUTPUT "+this.expressionMap.returning+s:"UPDATE "+this.getTableName(this.getMainTableName())+" SET "+r.join(", ")+s},t.prototype.createOrderByExpression=function(){var e=this,t=this.expressionMap.allOrderBys;return Object.keys(t).length>0?" ORDER BY "+Object.keys(t).map(function(n){return"string"==typeof t[n]?e.replacePropertyNames(n)+" "+t[n]:e.replacePropertyNames(n)+" "+t[n].order+" "+t[n].nulls}).join(", "):""},t.prototype.createLimitExpression=function(){var e=this.expressionMap.limit;if(e){if(this.connection.driver instanceof r.MysqlDriver)return" LIMIT "+e;throw new s.LimitOnUpdateNotSupportedError}return""},t.prototype.getValueSet=function(){if(this.expressionMap.valuesSet instanceof Object)return this.expressionMap.valuesSet;throw new Error('Cannot perform update query because update values are not defined. Call "qb.set(...)" method to specify inserted values.')},t}(n.QueryBuilder),e("UpdateQueryBuilder",u)}}}),System.register("typeorm/query-builder/DeleteQueryBuilder",["typeorm/query-builder/QueryBuilder","typeorm/driver/sqlserver/SqlServerDriver","typeorm/driver/postgres/PostgresDriver"],function(e,t){"use strict";var n,r,i,o;t&&t.id;return{setters:[function(e){n=e},function(e){r=e},function(e){i=e}],execute:function(){o=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.expressionMap.aliasNamePrefixingEnabled=!1,r}return __extends(t,e),t.prototype.getQuery=function(){return this.createDeleteExpression().trim()},t.prototype.from=function(e,t){var n=this.createFromAlias(e,t);return this.expressionMap.setMainAlias(n),this},t.prototype.where=function(e,t){this.expressionMap.wheres=[];var n=this.computeWhereParameter(e);return n&&(this.expressionMap.wheres=[{type:"simple",condition:n}]),t&&this.setParameters(t),this},t.prototype.andWhere=function(e,t){return this.expressionMap.wheres.push({type:"and",condition:this.computeWhereParameter(e)}),t&&this.setParameters(t),this},t.prototype.orWhere=function(e,t){return this.expressionMap.wh Line: 151 -  e:"or",condition:this.computeWhereParameter(e)}),t&&this.setParameters(t),this},t.prototype.whereInIds=function(e){e=e instanceof Array?e:[e];var t=this.createWhereIdsExpression(e),n=t[0],r=t[1];return this.where(n,r),this},t.prototype.andWhereInIds=function(e){var t=this.createWhereIdsExpression(e),n=t[0],r=t[1];return this.andWhere(n,r),this},t.prototype.orWhereInIds=function(e){var t=this.createWhereIdsExpression(e),n=t[0],r=t[1];return this.orWhere(n,r),this},t.prototype.returning=function(e){if(this.connection.driver instanceof r.SqlServerDriver||this.connection.driver instanceof i.PostgresDriver)return this.expressionMap.returning=e,this;throw new Error("OUTPUT or RETURNING clause only supported by MS SQLServer or PostgreSQL")},t.prototype.output=function(e){return this.returning(e)},t.prototype.createDeleteExpression=function(){var e=this.createWhereExpression();return""!==this.expressionMap.returning&&this.connection.driver instanceof i.PostgresDriver?"DELETE FROM "+this.getTableName(this.getMainTableName())+e+" RETURNING "+this.expressionMap.returning:""!==this.expressionMap.returning&&this.connection.driver instanceof r.SqlServerDriver?"DELETE FROM "+this.getTableName(this.getMainTableName())+" OUTPUT "+this.expressionMap.returning+e:"DELETE FROM "+this.getTableName(this.getMainTableName())+e},t}(n.QueryBuilder),e("DeleteQueryBuilder",o)}}}),System.register("typeorm/query-builder/InsertQueryBuilder",["typeorm/query-builder/QueryBuilder","typeorm/driver/sqlserver/SqlServerDriver","typeorm/driver/postgres/PostgresDriver","typeorm/driver/sqlite-abstract/AbstractSqliteDriver"],function(e,t){"use strict";var n,r,i,o,a;t&&t.id;return{setters:[function(e){n=e},function(e){r=e},function(e){i=e},function(e){o=e}],execute:function(){a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.getQuery=function(){return this.createInsertExpression().trim()},t.prototype.output=function(e){return this.returning(e)},t.prototype.into=function(e,t){var n=this.createFromAlias(e);return this.expressionMap.setMainAlias(n),this.expressionM Line: 152 -  ns=t||[],this},t.prototype.values=function(e){return this.expressionMap.valuesSet=e,this},t.prototype.returning=function(e){if(this.connection.driver instanceof r.SqlServerDriver||this.connection.driver instanceof i.PostgresDriver)return this.expressionMap.returning=e,this;throw new Error("OUTPUT or RETURNING clause only supported by MS SQLServer or PostgreSQL")},t.prototype.onConflict=function(e){return this.expressionMap.onConflict=e,this},t.prototype.createInsertExpression=function(){var e,t,n=this,a=this.getValueSets();if(this.expressionMap.mainAlias.hasMetadata){var s=this.expressionMap.mainAlias.metadata.columns.filter(function(e){return n.expressionMap.insertColumns.length?n.expressionMap.insertColumns.indexOf(e.propertyPath):!e.isGenerated});t=s.map(function(e){return n.escape(e.databaseName)}).join(", "),e=a.map(function(e,t){return"("+s.map(function(i){var a="_inserted_"+t+"_"+i.databaseName,s=n.connection.driver.preparePersistentValue(i.getEntityValue(e),i);return s instanceof Function?s():void 0===s?n.connection.driver instanceof o.AbstractSqliteDriver?"NULL":"DEFAULT":(n.connection.driver instanceof r.SqlServerDriver?n.setParameter(a,n.connection.driver.parametrizeValue(i,s)):n.setParameter(a,s),":"+a)}).join(",")+")"}).join(", ")}else t=this.expressionMap.insertColumns.join(", "),e=a.map(function(e,t){return"("+Object.keys(e).map(function(r){var i="_inserted_"+t+"_"+r,a=e[r];return a instanceof Function?a():void 0===a?n.connection.driver instanceof o.AbstractSqliteDriver?"NULL":"DEFAULT":(n.setParameter(i,a),":"+i)}).join(",")+")"}).join(", ");return""!==this.expressionMap.returning&&this.connection.driver instanceof i.PostgresDriver?"INSERT INTO "+this.getTableName(this.getMainTableName())+(t?"("+t+")":"")+" VALUES "+e+(this.expressionMap.onConflict?" ON CONFLICT "+this.expressionMap.onConflict:"")+" RETURNING "+this.expressionMap.returning:""!==this.expressionMap.returning&&this.connection.driver instanceof r.SqlServerDriver?"INSERT INTO "+this.getTableName(this.getMainTableName())+"("+t+") OUTPUT "+this.expressionMap.returning+" VALUES "+e:"INSERT INTO "+this Line: 153 -  this.getMainTableName())+"("+t+") VALUES "+e+(this.expressionMap.onConflict?" ON CONFLICT "+this.expressionMap.onConflict:"")},t.prototype.getValueSets=function(){if(this.expressionMap.valuesSet instanceof Array&&this.expressionMap.valuesSet.length>0)return this.expressionMap.valuesSet;if(this.expressionMap.valuesSet instanceof Object)return[this.expressionMap.valuesSet];throw new Error('Cannot perform insert query because values are not defined. Call "qb.values(...)" method to specify inserted values.')},t}(n.QueryBuilder),e("InsertQueryBuilder",a)}}}),System.register("typeorm/query-builder/RelationUpdater",[],function(e,t){"use strict";var n;t&&t.id;return{setters:[],execute:function(){n=function(){function e(e,t){this.queryBuilder=e,this.expressionMap=t}return e.prototype.update=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i,o,a,s,u,c,l,p,d,m;return __generator(this,function(f){switch(f.label){case 0:return(t=this.expressionMap.relationMetadata).isManyToOne||t.isOneToOneOwner?(s=t.joinColumns.reduce(function(t,n){var r=e instanceof Object?n.referencedColumn.getEntityValue(e):e;return n.setEntityValue(t,r),t},{}),!this.expressionMap.of||this.expressionMap.of instanceof Array&&!this.expressionMap.of.length?[2]:[4,this.queryBuilder.createQueryBuilder().update(t.entityMetadata.target).set(s).whereInIds(this.expressionMap.of).execute()]):[3,2];case 1:return f.sent(),[3,8];case 2:return!t.isOneToOneNotOwner&&!t.isOneToMany||null!==e?[3,4]:(n={},t.inverseRelation.joinColumns.forEach(function(e){n[e.propertyName]=null}),c=this.expressionMap.of instanceof Array?this.expressionMap.of:[this.expressionMap.of],r={},i=[],c.forEach(function(e,n){t.inverseRelation.joinColumns.map(function(t,o){var a="joinColumn_"+n+"_"+o;r[a]=e instanceof Object?t.referencedColumn.getEntityValue(e):e,i.push(t.propertyPath+" = :"+a)})}),(o=i.map(function(e){return"("+e+")"}).join(" OR "))?[4,this.queryBuilder.createQueryBuilder().update(t.inverseEntityMetadata.target).set(n).where(o).setParameters(r).execute()]:[2]);case 3:return f.sent(),[3,8];case 4:if(!t.isOneToOneNotOwner&&!t.is Line: 159 -  __generator(this,function(t){switch(t.label){case 0:return[4,e.prototype.commitTransaction.call(this)];case 1:return t.sent(),[4,this.driver.autoSave()];case 2:return t.sent(),[2]}})})},t.prototype.query=function(e,t){var r=this;if(this.isReleased)throw new n.QueryRunnerAlreadyReleasedError;return new Promise(function(n,i){return __awaiter(r,void 0,void 0,function(){var r,o,a,s,u,c,l;return __generator(this,function(p){switch(p.label){case 0:return[4,this.connect()];case 1:r=p.sent(),this.driver.connection.logger.logQuery(e,t,this),o=+new Date;try{for((a=r.prepare(e)).bind(t),s=this.driver.connection.options.maxQueryExecutionTime,u=+new Date,c=u-o,s&&c>s&&this.driver.connection.logger.logQuerySlow(c,e,t,this),l=[];a.step();)l.push(a.getAsObject());a.free(),n(l)}catch(e){i(e)}return[2]}})})})},t.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,i,o,a,s,u,c=this;return __generator(this,function(l){return n=Object.keys(t),i=n.map(function(e){return'"'+e+'"'}).join(", "),o=n.map(function(e){return"?"}).join(","),a=this.connection.hasMetadata(e)?this.connection.getMetadata(e).generatedColumns:[],s=i.length>0?'INSERT INTO "'+e+'"('+i+") VALUES ("+o+")":'INSERT INTO "'+e+'" DEFAULT VALUES',u=n.map(function(e){return t[e]}),[2,new Promise(function(e,n){return __awaiter(c,void 0,void 0,function(){var i,o,c,l;return __generator(this,function(p){switch(p.label){case 0:return this.driver.connection.logger.logQuery(s,u,this),[4,this.connect()];case 1:i=p.sent(),p.label=2;case 2:return p.trys.push([2,5,,6]),(o=i.prepare(s)).bind(u),o.step(),c=a.reduce(function(e,n){var o=t[n.databaseName];return n.isPrimary&&"increment"===n.generationStrategy&&(o=i.exec("SELECT last_insert_rowid()")[0].values[0][0]),o?r.OrmUtils.mergeDeep(e,n.createValueMap(o)):e},{}),this.isTransactionActive?[3,4]:[4,this.driver.autoSave()];case 3:p.sent(),p.label=4;case 4:return e({result:void 0,generatedMap:Object.keys(c).length>0?c:void 0}),[3,6];case 5:return l=p.sent(),n(l),[3,6];case 6:return[2]}})})})]})})},t.prototype.update=function(t,n,r){return __awaiter(this,void 0,void 0,func Line: 165 -  abaseName)+"$2");var a="([ =(]|^.{0})"+r+n.propertyName+"([ =),]|.{0}$)";e=e.replace(new RegExp(a,"gm"),"$1"+i+t.escape(n.databaseName)+"$2")}),n.metadata.relations.forEach(function(n){if(n.joinColumns.concat(n.inverseJoinColumns).forEach(function(o){var a="([ =(]|^.{0})"+r+n.propertyPath+"\\."+o.referencedColumn.propertyPath+"([ =),]|.{0}$)";e=e.replace(new RegExp(a,"gm"),"$1"+i+t.escape(o.databaseName)+"$2")}),n.joinColumns.length>0){var o="([ =(]|^.{0})"+r+n.propertyPath+"([ =),]|.{0}$)";e=e.replace(new RegExp(o,"gm"),"$1"+i+t.escape(n.joinColumns[0].databaseName)+"$2")}})}}),e},e.prototype.createWhereExpression=function(){var e=this.createWhereExpressionString();if(this.expressionMap.mainAlias.hasMetadata){var t=this.expressionMap.mainAlias.metadata;if(t.discriminatorColumn&&t.parentEntityMetadata){var n=this.replacePropertyNames(this.expressionMap.mainAlias.name+"."+t.discriminatorColumn.databaseName)+" IN (:discriminatorColumnValues)";return" WHERE "+(e.length?"("+e+") AND":"")+" "+n}}return e.length?this.expressionMap.extraAppendedAndWhereCondition?" WHERE ("+e+") AND "+this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition):" WHERE "+e:this.expressionMap.extraAppendedAndWhereCondition?" WHERE "+this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition):""},e.prototype.createWhereExpressionString=function(){var e=this;return this.expressionMap.wheres.map(function(t,n){switch(t.type){case"and":return(n>0?"AND ":"")+e.replacePropertyNames(t.condition);case"or":return(n>0?"OR ":"")+e.replacePropertyNames(t.condition);default:return e.replacePropertyNames(t.condition)}}).join(" ")},e.prototype.createWhereIdsExpression=function(e){var t=this,n=this.expressionMap.mainAlias.metadata,r=this.expressionMap.aliasNamePrefixingEnabled?this.escape(this.expressionMap.mainAlias.name)+".":"",i={},o=e.map(function(e,o){e=e instanceof Object?e:n.createEntityIdMap(e);var a=[];return n.primaryColumns.forEach(function(n,s){a.push(r+t.escape(n.databaseName)+"=:id_"+o+"_"+s),i["id_"+o+"_"+s]=n.getEntityValue(e)}),n.parentIdColumns.forEach(function(n,s){a Line: 177 -  lder/relation-count/RelationCountMetadataToAttributeTransformer",["typeorm/query-builder/relation-count/RelationCountAttribute"],function(e,t){"use strict";var n,r;t&&t.id;return{setters:[function(e){n=e}],execute:function(){r=function(){function e(e){this.expressionMap=e}return e.prototype.transform=function(){var e=this;this.expressionMap.mainAlias&&this.expressionMap.mainAlias.metadata.relationCounts.forEach(function(t){var n=e.metadataToAttribute(e.expressionMap.mainAlias.name,t);e.expressionMap.relationCountAttributes.push(n)}),this.expressionMap.joinAttributes.forEach(function(t){t.metadata&&!t.metadata.isJunction&&t.metadata.relationCounts.forEach(function(n){var r=e.metadataToAttribute(t.alias.name,n);e.expressionMap.relationCountAttributes.push(r)})})},e.prototype.metadataToAttribute=function(e,t){return new n.RelationCountAttribute(this.expressionMap,{relationName:e+"."+t.relation.propertyName,mapToProperty:e+"."+t.propertyName,alias:t.alias,queryBuilderFactory:t.queryBuilderFactory})},e}(),e("RelationCountMetadataToAttributeTransformer",r)}}}),System.register("typeorm/error/LockNotSupportedOnGivenDriverError",[],function(e,t){"use strict";var n;t&&t.id;return{setters:[],execute:function(){n=function(e){function t(){var n=e.call(this)||this;return n.name="LockNotSupportedOnGivenDriverError",Object.setPrototypeOf(n,t.prototype),n.message="Locking not supported on given driver.",n}return __extends(t,e),t}(Error),e("LockNotSupportedOnGivenDriverError",n)}}}),System.register("typeorm/cache/QueryResultCacheOptions",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/error/OffsetWithoutLimitNotSupportedError",[],function(e,t){"use strict";var n;t&&t.id;return{setters:[],execute:function(){n=function(e){function t(n){var r=e.call(this,n+" does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).")||this;return Object.setPrototypeOf(r,t.prototype),r.name="OffsetWithoutLimitNotSupportedError",r} Line: 184 -  teAlias({type:"join",name:n,tablePath:!1===p?t:void 0,subQuery:!0===p?c:void 0})}},t.prototype.createSelectExpression=function(){var e=this;if(!this.expressionMap.mainAlias)throw new Error("Cannot build query because main alias is not set (call qb#from method)");var t=[],n=[];if(this.expressionMap.mainAlias.hasMetadata){var i=this.expressionMap.mainAlias.metadata;t.push.apply(t,this.buildEscapedEntityColumnSelects(this.expressionMap.mainAlias.name,i)),n.push.apply(n,this.findEntityColumnSelects(this.expressionMap.mainAlias.name,i))}if(this.expressionMap.joinAttributes.forEach(function(r){if(r.metadata)t.push.apply(t,e.buildEscapedEntityColumnSelects(r.alias.name,r.metadata)),n.push.apply(n,e.findEntityColumnSelects(r.alias.name,r.metadata));else if(e.expressionMap.selects.some(function(e){return e.selection===r.alias.name})){t.push({selection:e.escape(r.alias.name)+".*"});var i=e.expressionMap.selects.find(function(e){return e.selection===r.alias.name});n.push(i)}}),!this.expressionMap.ignoreParentTablesJoins&&this.expressionMap.mainAlias.hasMetadata&&(i=this.expressionMap.mainAlias.metadata).parentEntityMetadata&&"class-table"===i.parentEntityMetadata.inheritanceType&&i.parentIdColumns){var o="parentIdColumn_"+i.parentEntityMetadata.tableName;i.parentEntityMetadata.columns.forEach(function(n){t.push({selection:e.escape(o)+"."+e.escape(n.databaseName),aliasName:o+"_"+n.databaseName})})}this.expressionMap.selects.filter(function(e){return-1===n.indexOf(e)}).forEach(function(n){return t.push({selection:e.replacePropertyNames(n.selection),aliasName:n.aliasName})}),0===t.length&&t.push({selection:"*"});var a="";if(this.connection.driver instanceof r.SqlServerDriver)switch(this.expressionMap.lockMode){case"pessimistic_read":a=" WITH (HOLDLOCK, ROWLOCK)";break;case"pessimistic_write":a=" WITH (UPDLOCK, ROWLOCK)"}var s=this.expressionMap.aliases.filter(function(e){return"from"===e.type&&(e.tablePath||e.subQuery)}).map(function(t){return t.subQuery?t.subQuery+" "+e.escape(t.name):e.getTableName(t.tablePath)+" "+e.escape(t.name)}),u=t.map(function(t){return t.selection+(t.aliasName?"  Line: 185 -  t.aliasName):"")}).join(", ");return(this.expressionMap.limit||this.expressionMap.offset)&&this.connection.driver instanceof E.OracleDriver?"SELECT ROWNUM "+this.escape("RN")+","+u+" FROM "+s.join(", ")+a:"SELECT "+u+" FROM "+s.join(", ")+a},t.prototype.createJoinExpression=function(){var e=this,t=this.expressionMap.joinAttributes.map(function(t){var n=t.relation,r=t.tablePath,i=t.alias.name,o=t.condition?" AND ("+t.condition+")":"",a=t.parentAlias;if(!a||!n){var s=t.alias.subQuery?t.alias.subQuery:e.getTableName(r);return" "+t.direction+" JOIN "+s+" "+e.escape(i)+(t.condition?" ON "+e.replacePropertyNames(t.condition):"")}if(n.isManyToOne||n.isOneToOneOwner){u=n.joinColumns.map(function(e){return i+"."+e.referencedColumn.propertyPath+"="+a+"."+n.propertyPath+"."+e.referencedColumn.propertyPath}).join(" AND ");return" "+t.direction+" JOIN "+e.getTableName(r)+" "+e.escape(i)+" ON "+e.replacePropertyNames(u+o)}if(n.isOneToMany||n.isOneToOneNotOwner){var u=n.inverseRelation.joinColumns.map(function(e){return i+"."+n.inverseRelation.propertyPath+"."+e.referencedColumn.propertyPath+"="+a+"."+e.referencedColumn.propertyPath}).join(" AND ");return" "+t.direction+" JOIN "+e.getTableName(r)+" "+e.escape(i)+" ON "+e.replacePropertyNames(u+o)}var c=n.junctionEntityMetadata.tablePath,l=t.junctionAlias,p="",d="";return n.isOwning?(p=n.joinColumns.map(function(e){return l+"."+e.propertyPath+"="+a+"."+e.referencedColumn.propertyPath}).join(" AND "),d=n.inverseJoinColumns.map(function(e){return i+"."+e.referencedColumn.propertyPath+"="+l+"."+e.propertyPath}).join(" AND ")):(p=n.inverseRelation.inverseJoinColumns.map(function(e){return l+"."+e.propertyPath+"="+a+"."+e.referencedColumn.propertyPath}).join(" AND "),d=n.inverseRelation.joinColumns.map(function(e){return i+"."+e.referencedColumn.propertyPath+"="+l+"."+e.propertyPath}).join(" AND "))," "+t.direction+" JOIN "+e.getTableName(c)+" "+e.escape(l)+" ON "+e.replacePropertyNames(p)+" "+t.direction+" JOIN "+e.getTableName(r)+" "+e.escape(i)+" ON "+e.replacePropertyNames(d+o)});if(!this.expressionMap.ignoreParentTablesJoins&&this.expression Line: 186 -  hasMetadata){var n=this.expressionMap.mainAlias.metadata;if(n.parentEntityMetadata&&"class-table"===n.parentEntityMetadata.inheritanceType&&n.parentIdColumns){var r="parentIdColumn_"+n.parentEntityMetadata.tableName,i=n.parentIdColumns.map(function(t){return e.expressionMap.mainAlias.name+"."+t.propertyPath+" = "+e.escape(r)+"."+e.escape(t.referencedColumn.propertyPath)}).join(" AND "),o=" JOIN "+this.getTableName(n.parentEntityMetadata.tablePath)+" "+this.escape(r)+" ON "+this.replacePropertyNames(i);t.push(o)}}return t.join(" ")},t.prototype.createGroupByExpression=function(){return this.expressionMap.groupBys&&this.expressionMap.groupBys.length?" GROUP BY "+this.replacePropertyNames(this.expressionMap.groupBys.join(", ")):""},t.prototype.createOrderByExpression=function(){var e=this,t=this.expressionMap.allOrderBys;return Object.keys(t).length>0?" ORDER BY "+Object.keys(t).map(function(n){return"string"==typeof t[n]?e.replacePropertyNames(n)+" "+t[n]:e.replacePropertyNames(n)+" "+t[n].order+" "+t[n].nulls}).join(", "):""},t.prototype.createLimitOffsetOracleSpecificExpression=function(e){return(this.expressionMap.offset||this.expressionMap.limit)&&this.connection.driver instanceof E.OracleDriver&&(e="SELECT * FROM ("+e+") WHERE ",this.expressionMap.offset&&(e+=this.escape("RN")+" >= "+this.expressionMap.offset),this.expressionMap.limit&&(e+=(this.expressionMap.offset?" AND ":"")+this.escape("RN")+" <= "+((this.expressionMap.offset||0)+this.expressionMap.limit))),e},t.prototype.createLimitOffsetExpression=function(){if(this.connection.driver instanceof E.OracleDriver)return"";var e=this.expressionMap.offset,t=this.expressionMap.limit;if(e||t||0!==this.expressionMap.joinAttributes.length||(e=this.expressionMap.skip,t=this.expressionMap.take),this.connection.driver instanceof r.SqlServerDriver){if(t&&e)return" OFFSET "+e+" ROWS FETCH NEXT "+t+" ROWS ONLY";if(t)return" OFFSET 0 ROWS FETCH NEXT "+t+" ROWS ONLY";if(e)return" OFFSET "+e+" ROWS"}else if(this.connection.driver instanceof v.MysqlDriver){if(t&&e)return" LIMIT "+t+" OFFSET "+e;if(t)return" LIMIT "+t;if(e)throw new T.Of Line: 187 -  itNotSupportedError("MySQL")}else if(this.connection.driver instanceof _.AbstractSqliteDriver){if(t&&e)return" LIMIT "+t+" OFFSET "+e;if(t)return" LIMIT "+t;if(e)return" LIMIT -1 OFFSET "+e}else{if(t&&e)return" LIMIT "+t+" OFFSET "+e;if(t)return" LIMIT "+t;if(e)return" OFFSET "+e}return""},t.prototype.createLockExpression=function(){switch(this.expressionMap.lockMode){case"pessimistic_read":if(this.connection.driver instanceof v.MysqlDriver)return" LOCK IN SHARE MODE";if(this.connection.driver instanceof b.PostgresDriver)return" FOR SHARE";if(this.connection.driver instanceof r.SqlServerDriver)return"";throw new g.LockNotSupportedOnGivenDriverError;case"pessimistic_write":if(this.connection.driver instanceof v.MysqlDriver||this.connection.driver instanceof b.PostgresDriver)return" FOR UPDATE";if(this.connection.driver instanceof r.SqlServerDriver)return"";throw new g.LockNotSupportedOnGivenDriverError;default:return""}},t.prototype.createHavingExpression=function(){var e=this;if(!this.expressionMap.havings||!this.expressionMap.havings.length)return"";var t=this.expressionMap.havings.map(function(t,n){switch(t.type){case"and":return(n>0?"AND ":"")+e.replacePropertyNames(t.condition);case"or":return(n>0?"OR ":"")+e.replacePropertyNames(t.condition);default:return e.replacePropertyNames(t.condition)}}).join(" ");return t.length?" HAVING "+t:""},t.prototype.buildEscapedEntityColumnSelects=function(e,t){var n=this,r=this.expressionMap.selects.some(function(t){return t.selection===e}),i=[];r&&i.push.apply(i,t.columns.filter(function(e){return!0===e.isSelect})),i.push.apply(i,t.columns.filter(function(t){return n.expressionMap.selects.some(function(n){return n.selection===e+"."+t.propertyName})}));var o=this.expressionMap.queryEntity?t.primaryColumns.filter(function(e){return-1===i.indexOf(e)}):[];return i.concat(o).map(function(t){var i=n.expressionMap.selects.find(function(n){return n.selection===e+"."+t.propertyName});return{selection:n.escape(e)+"."+n.escape(t.databaseName),aliasName:i&&i.aliasName?i.aliasName:e+"_"+t.databaseName,virtual:i?!0===i.virtual:!r}})},t.prototype.find Line: 214 -  !0,[2]})})},t.prototype.commitTransaction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){if(this.isReleased)throw new o.QueryRunnerAlreadyReleasedError;if(!this.isTransactionActive)throw new r.TransactionNotStartedError;return this.isTransactionActive=!1,[2]})})},t.prototype.rollbackTransaction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){if(this.isReleased)throw new o.QueryRunnerAlreadyReleasedError;if(!this.isTransactionActive)throw new r.TransactionNotStartedError;return this.isTransactionActive=!1,[2]})})},t.prototype.query=function(e,t){var n=this;if(this.isReleased)throw new o.QueryRunnerAlreadyReleasedError;return new Promise(function(r,i){return __awaiter(n,void 0,void 0,function(){var n,o,a,u=this;return __generator(this,function(c){switch(c.label){case 0:return c.trys.push([0,2,,3]),[4,this.connect()];case 1:return n=c.sent(),this.driver.connection.logger.logQuery(e,t,this),o=+new Date,n.transaction(function(n){n.executeSql(e,t,function(n,i){var a=u.driver.connection.options.maxQueryExecutionTime,s=+new Date-o;a&&s>a&&u.driver.connection.logger.logQuerySlow(s,e,t,u);var c=Object.keys(i.rows).filter(function(e){return"length"!==e}).map(function(e){return i.rows[e]});r(c)},function(n,r){return u.driver.connection.logger.logQueryError(r,e,t,u),i(new s.QueryFailedError(e,t,r))})}),[3,3];case 2:return a=c.sent(),i(a),[3,3];case 3:return[2]}})})})},t.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,o,s,u,c=this;return __generator(this,function(l){return n=Object.keys(t),r=n.map(function(e){return'"'+e+'"'}).join(", "),i=n.map(function(e,t){return"$"+(t+1)}).join(","),o=this.connection.hasMetadata(e)?this.connection.getMetadata(e).generatedColumns:[],s=r.length>0?'INSERT INTO "'+e+'"('+r+") VALUES ("+i+")":'INSERT INTO "'+e+'" DEFAULT VALUES',u=n.map(function(e){return t[e]}),[2,new Promise(function(e,n){return __awaiter(c,void 0,void 0,function(){var r,i=this;return __generator(this,function(c){switch(c.label){case 0:return this.driver.con Line: 215 -  .logQuery(s,u,this),[4,this.connect()];case 1:return(r=c.sent()).transaction(function(r){r.executeSql(s,u,function(n,r){var i=o.reduce(function(e,n){var i=n.isPrimary&&"increment"===n.generationStrategy&&r.insertId?r.insertId:t[n.databaseName];return i?a.OrmUtils.mergeDeep(e,n.createValueMap(i)):e},{});e({result:void 0,generatedMap:Object.keys(i).length>0?i:void 0})},function(e,t){return i.driver.connection.logger.logQueryError(t,s,u,i),n(t)})}),[2]}})})})]})})},t.prototype.getTables=function(e){return __awaiter(this,void 0,void 0,function(){var t,n,r=this;return __generator(this,function(o){switch(o.label){case 0:return e&&e.length?(t=e.map(function(e){return"'"+e+"'"}).join(", "),[4,this.query("SELECT * FROM sqlite_master WHERE type = 'table' AND name IN ("+t+")")]):[2,[]];case 1:return(n=o.sent())&&n.length?[2,Promise.all(n.map(function(e){return __awaiter(r,void 0,void 0,function(){var t;return __generator(this,function(n){return t=new i.Table(e.name),[2,t]})})}))]:[2,[]]}})})},t.prototype.clearDatabase=function(){return __awaiter(this,void 0,void 0,function(){var e,t,n,r,i=this;return __generator(this,function(o){switch(o.label){case 0:return[4,this.startTransaction()];case 1:o.sent(),o.label=2;case 2:return o.trys.push([2,6,,11]),e="select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'",[4,this.query(e)];case 3:return t=o.sent(),[4,Promise.all(t.map(function(e){return i.query(e.query)}))];case 4:return o.sent(),[4,this.commitTransaction()];case 5:return o.sent(),[3,11];case 6:n=o.sent(),o.label=7;case 7:return o.trys.push([7,9,,10]),[4,this.rollbackTransaction()];case 8:return o.sent(),[3,10];case 9:return r=o.sent(),[3,10];case 10:throw n;case 11:return[2]}})})},t}(u.AbstractSqliteQueryRunner),e("WebsqlQueryRunner",c)}}}),System.register("typeorm/driver/websql/WebsqlDriver",["typeorm/driver/DriverUtils","typeorm/error/DriverOptionNotSetError","typeorm/driver/websql/WebsqlQueryRunner","typeorm/driver/sqlite-abstract/AbstractSqliteDriver"],function(e,t){"use strict";var n,r,i,o,a;t&&t.id;return{setters:[fun Line: 217 -  this.connect()];case 1:return r=u.sent(),this.driver.connection.logger.logQuery(e,t,this),a=+new Date,r.all(e,t,function(r,u){var c=s.driver.connection.options.maxQueryExecutionTime,l=+new Date-a;c&&l>c&&s.driver.connection.logger.logQuerySlow(l,e,t,s),r?(s.driver.connection.logger.logQueryError(r,e,t,s),o(new i.QueryFailedError(e,t,r))):n(u)}),[2]}})})})},t.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,i,o,a,s,u,c=this;return __generator(this,function(l){return n=Object.keys(t),i=n.map(function(e){return'"'+e+'"'}).join(", "),o=n.map(function(e,t){return"$"+(t+1)}).join(","),a=this.connection.hasMetadata(e)?this.connection.getMetadata(e).generatedColumns:[],s=i.length>0?'INSERT INTO "'+e+'"('+i+") VALUES ("+o+")":'INSERT INTO "'+e+'" DEFAULT VALUES',u=n.map(function(e){return t[e]}),[2,new Promise(function(e,n){return __awaiter(c,void 0,void 0,function(){var i,o;return __generator(this,function(c){switch(c.label){case 0:return this.driver.connection.logger.logQuery(s,u,this),i=this,[4,this.connect()];case 1:return(o=c.sent()).run(s,u,function(o){var c=this;if(o)i.driver.connection.logger.logQueryError(o,s,u,this),n(o);else{var l=a.reduce(function(e,n){var i=n.isPrimary&&"increment"===n.generationStrategy&&c.lastID?c.lastID:t[n.databaseName];return i?r.OrmUtils.mergeDeep(e,n.createValueMap(i)):e},{});e({result:void 0,generatedMap:Object.keys(l).length>0?l:void 0})}}),[2]}})})})]})})},t}(o.AbstractSqliteQueryRunner),e("SqliteQueryRunner",a)}}}),System.register("typeorm/driver/sqlite/SqliteDriver",["typeorm/error/DriverPackageNotInstalledError","typeorm/driver/sqlite/SqliteQueryRunner","typeorm/error/DriverOptionNotSetError","typeorm/platform/PlatformTools","typeorm/driver/sqlite-abstract/AbstractSqliteDriver"],function(e,t){"use strict";var n,r,i,o,a,s;t&&t.id;return{setters:[function(e){n=e},function(e){r=e},function(e){i=e},function(e){o=e},function(e){a=e}],execute:function(){s=function(e){function t(t){var n=e.call(this,t)||this;if(n.connection=t,n.options=t.options,n.database=n.options.database,!n.options.database)throw new i.DriverOp Line: 219 -  (){var r,a,s=this;return __generator(this,function(u){switch(u.label){case 0:return[4,this.connect()];case 1:return r=u.sent(),this.driver.connection.logger.logQuery(e,t,this),a=+new Date,r.executeSql(e,t,function(r){var i=s.driver.connection.options.maxQueryExecutionTime,o=+new Date-a;i&&o>i&&s.driver.connection.logger.logQuerySlow(o,e,t,s),0===r.rows.length&&n([]);for(var u=[],c=0;c<r.rows.length;c++)u.push(r.rows.item(c));n(u)},function(n){s.driver.connection.logger.logQueryError(n,e,t,s),o(new i.QueryFailedError(e,t,n))}),[2]}})})})},t.prototype.insert=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,i,o,a,s,u,c=this;return __generator(this,function(l){return n=Object.keys(t),i=n.map(function(e){return'"'+e+'"'}).join(", "),o=n.map(function(e){return"?"}).join(","),a=this.connection.hasMetadata(e)?this.connection.getMetadata(e).generatedColumns:[],s=i.length>0?'INSERT INTO "'+e+'"('+i+") VALUES ("+o+")":'INSERT INTO "'+e+'" DEFAULT VALUES',u=n.map(function(e){return t[e]}),[2,new Promise(function(e,n){return __awaiter(c,void 0,void 0,function(){var i,o,c=this;return __generator(this,function(l){switch(l.label){case 0:return this.driver.connection.logger.logQuery(s,u,this),i=this,[4,this.connect()];case 1:return(o=l.sent()).executeSql(s,u,function(n){var i=a.reduce(function(e,i){var o=i.isPrimary&&"increment"===i.generationStrategy&&n.insertId?n.insertId:t[i.databaseName];return o?r.OrmUtils.mergeDeep(e,i.createValueMap(o)):e},{});e({result:void 0,generatedMap:Object.keys(i).length>0?i:void 0})},function(e){i.driver.connection.logger.logQueryError(e,s,u,c),n(e)}),[2]}})})})]})})},t.prototype.parametrize=function(e,t){return void 0===t&&(t=0),Object.keys(e).map(function(e,t){return'"'+e+'"=?'})},t}(o.AbstractSqliteQueryRunner),e("CordovaQueryRunner",a)}}}),System.register("typeorm/driver/cordova/CordovaDriver",["typeorm/driver/sqlite-abstract/AbstractSqliteDriver","typeorm/driver/cordova/CordovaQueryRunner","typeorm/error/DriverOptionNotSetError","typeorm/error/DriverPackageNotInstalledError"],function(e,t){"use strict";var n,r,i,o,a;t&&t.id;return{setters Line: 235 -  ],u=a.concat(n.importClassesFromDirectories(s));return o.getMetadataArgsStorage().filterSubscribers(u).map(function(e){return i.getFromContainer(e.target)})},e.prototype.buildEntityMetadatas=function(e,t){var i=r.OrmUtils.splitClassesAndStrings(e||[]),u=i[0],c=i[1],l=u.concat(n.importClassesFromDirectories(c)),p=new a.EntityMetadataBuilder(this.connection,o.getMetadataArgsStorage()).build(l),d=r.OrmUtils.splitClassesAndStrings(t||[]),m=d[0],f=d[1],h=m.concat(n.importJsonsFromDirectories(f)),y=(new s.EntitySchemaTransformer).transform(h),g=new a.EntityMetadataBuilder(this.connection,y).build();return p.concat(g)},e}(),e("ConnectionMetadataBuilder",u)}}}),System.register("typeorm/logger/SimpleConsoleLogger",[],function(e,t){"use strict";var n;t&&t.id;return{setters:[],execute:function(){n=function(){function e(e){this.options=e}return e.prototype.logQuery=function(e,t,n){if("all"===this.options||!0===this.options||this.options instanceof Array&&-1!==this.options.indexOf("query")){var r=e+(t&&t.length?" -- PARAMETERS: "+this.stringifyParams(t):"");console.log("executing query: "+r)}},e.prototype.logQueryError=function(e,t,n,r){if("all"===this.options||!0===this.options||this.options instanceof Array&&-1!==this.options.indexOf("error")){var i=t+(n&&n.length?" -- PARAMETERS: "+this.stringifyParams(n):"");console.log("query failed: "+i),console.log("error:",e)}},e.prototype.logQuerySlow=function(e,t,n,r){var i=t+(n&&n.length?" -- PARAMETERS: "+this.stringifyParams(n):"");console.log("query is slow: "+i),console.log("execution time: "+e)},e.prototype.logSchemaBuild=function(e,t){("all"===this.options||this.options instanceof Array&&-1!==this.options.indexOf("schema"))&&console.log(e)},e.prototype.logMigration=function(e,t){console.log(e)},e.prototype.log=function(e,t,n){switch(e){case"log":("all"===this.options||this.options instanceof Array&&-1!==this.options.indexOf("log"))&&console.log(t);break;case"info":("all"===this.options||this.options instanceof Array&&-1!==this.options.indexOf("info"))&&console.info(t);break;case"warn":("all"===this.options||this.options instanceof Array&& Line: 236 -  ons.indexOf("warn"))&&console.warn(t)}},e.prototype.stringifyParams=function(e){try{return JSON.stringify(e)}catch(t){return e}},e}(),e("SimpleConsoleLogger",n)}}}),System.register("typeorm/logger/AdvancedConsoleLogger",["typeorm/platform/PlatformTools"],function(e,t){"use strict";var n,r;t&&t.id;return{setters:[function(e){n=e}],execute:function(){r=function(){function e(e){this.options=e}return e.prototype.logQuery=function(e,t,r){if("all"===this.options||!0===this.options||this.options instanceof Array&&-1!==this.options.indexOf("query")){var i=e+(t&&t.length?" -- PARAMETERS: "+this.stringifyParams(t):"");n.PlatformTools.logInfo("executing query:",n.PlatformTools.highlightSql(i))}},e.prototype.logQueryError=function(e,t,r,i){if("all"===this.options||!0===this.options||this.options instanceof Array&&-1!==this.options.indexOf("error")){var o=t+(r&&r.length?" -- PARAMETERS: "+this.stringifyParams(r):"");n.PlatformTools.logError("query failed:",n.PlatformTools.highlightSql(o)),n.PlatformTools.logError("error:",e)}},e.prototype.logQuerySlow=function(e,t,r,i){var o=t+(r&&r.length?" -- PARAMETERS: "+this.stringifyParams(r):"");n.PlatformTools.logWarn("query is slow:",n.PlatformTools.highlightSql(o)),n.PlatformTools.logWarn("execution time:",e)},e.prototype.logSchemaBuild=function(e,t){("all"===this.options||this.options instanceof Array&&-1!==this.options.indexOf("schema"))&&n.PlatformTools.log(e)},e.prototype.logMigration=function(e,t){n.PlatformTools.log(e)},e.prototype.log=function(e,t,r){switch(e){case"log":("all"===this.options||this.options instanceof Array&&-1!==this.options.indexOf("log"))&&console.log(t);break;case"info":("all"===this.options||this.options instanceof Array&&-1!==this.options.indexOf("info"))&&console.info(t);break;case"warn":("all"===this.options||this.options instanceof Array&&-1!==this.options.indexOf("warn"))&&console.warn(n.PlatformTools.warn(t))}},e.prototype.stringifyParams=function(e){try{return JSON.stringify(e)}catch(t){return e}},e}(),e("AdvancedConsoleLogger",r)}}}),System.register("typeorm/logger/FileLogger",["typeorm/platform/PlatformTools"] Line: 253 -  type",e,a):void 0;s&&(o=s)}if(t||(t={}),!t.type&&o&&(t=Object.assign({type:o},t)),!t.type)throw new n.ColumnTypeUndefinedError(e,a);if(t.nullable)throw new i.PrimaryColumnCannotBeNullableError(e,a);t=Object.assign({primary:!0},t);var u={target:e.constructor,propertyName:a,mode:"regular",options:t};r.getMetadataArgsStorage().columns.push(u)}});var n,r,i;return{setters:[function(e){n=e},function(e){r=e},function(e){i=e}],execute:function(){}}}),System.register("typeorm/decorator/columns/UpdateDateColumn",["typeorm/index"],function(e,t){"use strict";t&&t.id;e("UpdateDateColumn",function(e){return function(t,r){var i={target:t.constructor,propertyName:r,mode:"updateDate",options:e||{}};n.getMetadataArgsStorage().columns.push(i)}});var n;return{setters:[function(e){n=e}],execute:function(){}}}),System.register("typeorm/decorator/columns/VersionColumn",["typeorm/index"],function(e,t){"use strict";t&&t.id;e("VersionColumn",function(e){return function(t,r){e||(e={});var i={target:t.constructor,propertyName:r,mode:"version",options:e};n.getMetadataArgsStorage().columns.push(i)}});var n;return{setters:[function(e){n=e}],execute:function(){}}}),System.register("typeorm/decorator/columns/ObjectIdColumn",["typeorm/index"],function(e,t){"use strict";t&&t.id;e("ObjectIdColumn",function(e){return function(t,r){e||(e={}),e=Object.assign(e,{primary:!0,name:e.name?e.name:"_id"});var i={target:t.constructor,propertyName:r,mode:"objectId",options:e};n.getMetadataArgsStorage().columns.push(i)}});var n;return{setters:[function(e){n=e}],execute:function(){}}}),System.register("typeorm/decorator/listeners/AfterInsert",["typeorm/index","typeorm/metadata/types/EventListenerTypes"],function(e,t){"use strict";t&&t.id;e("AfterInsert",function(){return function(e,t){var i={target:e.constructor,propertyName:t,type:r.EventListenerTypes.AFTER_INSERT};n.getMetadataArgsStorage().entityListeners.push(i)}});var n,r;return{setters:[function(e){n=e},function(e){r=e}],execute:function(){}}}),System.register("typeorm/decorator/listeners/AfterLoad",["typeorm/index","typeorm/metadata/types/EventListenerTypes"],function Line: 254 -  ict";t&&t.id;e("AfterLoad",function(){return function(e,t){var i={target:e.constructor,propertyName:t,type:r.EventListenerTypes.AFTER_LOAD};n.getMetadataArgsStorage().entityListeners.push(i)}});var n,r;return{setters:[function(e){n=e},function(e){r=e}],execute:function(){}}}),System.register("typeorm/decorator/listeners/AfterRemove",["typeorm/index","typeorm/metadata/types/EventListenerTypes"],function(e,t){"use strict";t&&t.id;e("AfterRemove",function(){return function(e,t){var i={target:e.constructor,propertyName:t,type:r.EventListenerTypes.AFTER_REMOVE};n.getMetadataArgsStorage().entityListeners.push(i)}});var n,r;return{setters:[function(e){n=e},function(e){r=e}],execute:function(){}}}),System.register("typeorm/decorator/listeners/AfterUpdate",["typeorm/index","typeorm/metadata/types/EventListenerTypes"],function(e,t){"use strict";t&&t.id;e("AfterUpdate",function(){return function(e,t){var i={target:e.constructor,propertyName:t,type:r.EventListenerTypes.AFTER_UPDATE};n.getMetadataArgsStorage().entityListeners.push(i)}});var n,r;return{setters:[function(e){n=e},function(e){r=e}],execute:function(){}}}),System.register("typeorm/decorator/listeners/BeforeInsert",["typeorm/index","typeorm/metadata/types/EventListenerTypes"],function(e,t){"use strict";t&&t.id;e("BeforeInsert",function(){return function(e,t){var i={target:e.constructor,propertyName:t,type:r.EventListenerTypes.BEFORE_INSERT};n.getMetadataArgsStorage().entityListeners.push(i)}});var n,r;return{setters:[function(e){n=e},function(e){r=e}],execute:function(){}}}),System.register("typeorm/decorator/listeners/BeforeRemove",["typeorm/index","typeorm/metadata/types/EventListenerTypes"],function(e,t){"use strict";t&&t.id;e("BeforeRemove",function(){return function(e,t){var i={target:e.constructor,propertyName:t,type:r.EventListenerTypes.BEFORE_REMOVE};n.getMetadataArgsStorage().entityListeners.push(i)}});var n,r;return{setters:[function(e){n=e},function(e){r=e}],execute:function(){}}}),System.register("typeorm/decorator/listeners/BeforeUpdate",["typeorm/index","typeorm/metadata/types/EventListenerTypes"],function(e,t){"u Line: 255 -  t.id;e("BeforeUpdate",function(){return function(e,t){var i={target:e.constructor,propertyName:t,type:r.EventListenerTypes.BEFORE_UPDATE};n.getMetadataArgsStorage().entityListeners.push(i)}});var n,r;return{setters:[function(e){n=e},function(e){r=e}],execute:function(){}}}),System.register("typeorm/decorator/listeners/EventSubscriber",["typeorm/index"],function(e,t){"use strict";t&&t.id;e("EventSubscriber",function(){return function(e){var t={target:e};n.getMetadataArgsStorage().entitySubscribers.push(t)}});var n;return{setters:[function(e){n=e}],execute:function(){}}}),System.register("typeorm/decorator/options/IndexOptions",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/decorator/options/EntityOptions",[],function(e,t){"use strict";t&&t.id;return{setters:[],execute:function(){}}}),System.register("typeorm/decorator/relations/RelationCount",["typeorm/index"],function(e,t){"use strict";t&&t.id;e("RelationCount",function(e,t,r){return function(i,o){var a={target:i.constructor,propertyName:o,relation:e,alias:t,queryBuilderFactory:r};n.getMetadataArgsStorage().relationCounts.push(a)}});var n;return{setters:[function(e){n=e}],execute:function(){}}}),System.register("typeorm/decorator/relations/JoinColumn",["typeorm/index"],function(e,t){"use strict";t&&t.id;e("JoinColumn",function(e){return function(t,r){(e instanceof Array?e:[e||{}]).forEach(function(e){var i={target:t.constructor,propertyName:r,name:e.name,referencedColumnName:e.referencedColumnName};n.getMetadataArgsStorage().joinColumns.push(i)})}});var n;return{setters:[function(e){n=e}],execute:function(){}}}),System.register("typeorm/decorator/relations/JoinTable",["typeorm/index"],function(e,t){"use strict";t&&t.id;e("JoinTable",function(e){return function(t,r){e=e||{};var i={target:t.constructor,propertyName:r,name:e.name,joinColumns:e&&e.joinColumn?[e.joinColumn]:e.joinColumns,inverseJoinColumns:e&&e.inverseJoinColumn?[e.inverseJoinColumn]:e.inverseJoinColumns,schema:e&&e.schema?e.schema:void 0,database:e&&e.database?e.database:void 0};n.getMetadataArgsStorage().</Result>
</report_mosca>

<report_mosca>
 <Path>/src/migration/MigrationExecutor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -      function MigrationExecutor(connection, queryRunner) {

 Line: 52 -          this.queryRunner = queryRunner;

 Line: 64 -              var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, pendingMigrations, transactionStartedByUs, err_1, rollbackError_1;

 Line: 68 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 103 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 122 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 133 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 143 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 158 -              var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_2, rollbackError_2;

 Line: 162 -                          queryRunner = this.queryRunner || this.connection.createQueryRunner("master");

 Line: 188 -                          return [4 /*yield*/, queryRunner.startTransaction()];

 Line: 203 -                          return [4 /*yield*/, queryRunner.commitTransaction()];

 Line: 214 -                          return [4 /*yield*/, queryRunner.rollbackTransaction()];

 Line: 224 -                          return [4 /*yield*/, queryRunner.release()];

 Line: 245 -                      case 0: return [4 /*yield*/, queryRunner.hasTable("migrations")];

 Line: 249 -                          return [4 /*yield*/, queryRunner.createTable(new Table_1.Table("migrations", [

 Line: 322 -                          return [4 /*yield*/, queryRunner.insert("migrations", {

 Line: 329 -                      case 2: return [4 /*yield*/, queryRunner.insert("migrations", {

 Line: 350 -                          return [4 /*yield*/, queryRunner.delete("migrations", {

 Line: 357 -                      case 2: return [4 /*yield*/, queryRunner.delete("migrations", {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/cache/RedisQueryResultCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 39 -   * Caches query result into Redis database.

 Line: 99 -       * Caches given query result.

 Line: 103 -      RedisQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 132 -       * Stores given query result in the cache.

 Line: 134 -      RedisQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 177 -      RedisQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/cache/QueryResultCacheFactory.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -   * Caches query result into Redis database.

 Line: 18 -       * Creates a new query result cache based on connection options.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/cache/DbQueryResultCache.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -   * Caches query result into current database, into separate table called "query-result-cache".

 Line: 83 -                          queryRunner = this.getQueryRunner(queryRunner);

 Line: 85 -                          return [4 /*yield*/, queryRunner.hasTable("query-result-cache")];

 Line: 90 -                          return [4 /*yield*/, queryRunner.createTable(new Table_1.Table("query-result-cache", [

 Line: 136 -       * Caches given query result.

 Line: 140 -      DbQueryResultCache.prototype.getFromCache = function (options, queryRunner) {

 Line: 141 -          queryRunner = this.getQueryRunner(queryRunner);

 Line: 155 -                  .setParameters({ query: this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver ? new MssqlParameter_1.MssqlParameter(options.query, "nvarchar") : options.query })

 Line: 167 -       * Stores given query result in the cache.

 Line: 169 -      DbQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {

 Line: 175 -                          queryRunner = this.getQueryRunner(queryRunner);

 Line: 182 -                                  query: new MssqlParameter_1.MssqlParameter(options.query, "nvarchar"),

 Line: 187 -                          return [4 /*yield*/, queryRunner.update("query-result-cache", insertedValues, { identifier: insertedValues.identifier })];

 Line: 193 -                          return [4 /*yield*/, queryRunner.update("query-result-cache", insertedValues, { query: insertedValues.query })];

 Line: 198 -                      return [4 /*yield*/, queryRunner.insert("query-result-cache", insertedValues)];

 Line: 220 -      DbQueryResultCache.prototype.remove = function (identifiers, queryRunner) {

 Line: 239 -       * Gets a query runner to work with.

 Line: 243 -              return queryRunner;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/logger/DebugLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -       * Logs query and parameters used in it.

 Line: 21 -      DebugLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 30 -       * Logs query that failed.

 Line: 32 -      DebugLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 42 -       * Logs query that is slow.

 Line: 44 -      DebugLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 56 -      DebugLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 64 -      DebugLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 73 -      DebugLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/logger/AdvancedConsoleLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -       * Logs query and parameters used in it.

 Line: 20 -      AdvancedConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 22 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 23 -              PlatformTools_1.PlatformTools.logInfo("executing query:", PlatformTools_1.PlatformTools.highlightSql(sql));

 Line: 27 -       * Logs query that is failed.

 Line: 29 -      AdvancedConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 31 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 37 -       * Logs query that is slow.

 Line: 39 -      AdvancedConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 40 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 47 -      AdvancedConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 55 -      AdvancedConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 62 -      AdvancedConsoleLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/logger/SimpleConsoleLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -       * Logs query and parameters used in it.

 Line: 19 -      SimpleConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 21 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 22 -              console.log("executing query" + ": " + sql);

 Line: 26 -       * Logs query that is failed.

 Line: 28 -      SimpleConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 30 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 36 -       * Logs query that is slow.

 Line: 38 -      SimpleConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 39 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 46 -      SimpleConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 54 -      SimpleConsoleLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 61 -      SimpleConsoleLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/logger/FileLogger.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -       * Logs query and parameters used in it.

 Line: 20 -      FileLogger.prototype.logQuery = function (query, parameters, queryRunner) {

 Line: 22 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 27 -       * Logs query that is failed.

 Line: 29 -      FileLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {

 Line: 31 -              var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 39 -       * Logs query that is slow.

 Line: 41 -      FileLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {

 Line: 42 -          var sql = query + (parameters && parameters.length ? " -- PARAMETERS: " + this.stringifyParams(parameters) : "");

 Line: 48 -      FileLogger.prototype.logSchemaBuild = function (message, queryRunner) {

 Line: 56 -      FileLogger.prototype.logMigration = function (message, queryRunner) {

 Line: 63 -      FileLogger.prototype.log = function (level, message, queryRunner) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/metadata/types/EventListenerTypes.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 9 -      EventListenerTypes.BEFORE_INSERT = "before-insert";

 Line: 10 -      EventListenerTypes.AFTER_INSERT = "after-insert";

 Line: 11 -      EventListenerTypes.BEFORE_UPDATE = "before-update";

 Line: 12 -      EventListenerTypes.AFTER_UPDATE = "after-update";

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/metadata/ColumnMetadata.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 32 -           * Indicates if column is selected by query builder or not.

</Result>
</report_mosca>

