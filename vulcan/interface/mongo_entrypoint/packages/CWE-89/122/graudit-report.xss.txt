/src/lib/dialects/postgres/query-generator.js-15-  setSearchPath: function(searchPath) {
/src/lib/dialects/postgres/query-generator.js:16:    var query = 'SET search_path to <%= searchPath%>;';
/src/lib/dialects/postgres/query-generator.js-17-    return Utils._.template(query)({searchPath: searchPath});
##############################################
/src/lib/dialects/postgres/query-generator.js-20-  createSchema: function(schema) {
/src/lib/dialects/postgres/query-generator.js:21:    var query = 'CREATE SCHEMA <%= schema%>;';
/src/lib/dialects/postgres/query-generator.js-22-    return Utils._.template(query)({schema: schema});
##############################################
/src/lib/dialects/postgres/query-generator.js-25-  dropSchema: function(schema) {
/src/lib/dialects/postgres/query-generator.js:26:    var query = 'DROP SCHEMA IF EXISTS <%= schema%> CASCADE;';
/src/lib/dialects/postgres/query-generator.js-27-    return Utils._.template(query)({schema: schema});
##############################################
/src/lib/dialects/postgres/query-generator.js-47-      ( (databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0')) ? 'IF NOT EXISTS ' : '') +
/src/lib/dialects/postgres/query-generator.js:48:      '<%= table %> (<%= attributes%>)<%= comments %>'
/src/lib/dialects/postgres/query-generator.js-49-      , comments = ''
##############################################
/src/lib/dialects/postgres/query-generator.js-53-    if (options.comment && Utils._.isString(options.comment)) {
/src/lib/dialects/postgres/query-generator.js:54:      comments += '; COMMENT ON TABLE <%= table %> IS ' + this.escape(options.comment);
/src/lib/dialects/postgres/query-generator.js-55-    }
##############################################
/src/lib/dialects/postgres/query-generator.js-97-    options = options || {};
/src/lib/dialects/postgres/query-generator.js:98:    var query = 'DROP TABLE IF EXISTS <%= table %><%= cascade %>;';
/src/lib/dialects/postgres/query-generator.js-99-    return Utils._.template(query)({
##############################################
/src/lib/dialects/postgres/query-generator.js-120-      'LEFT JOIN information_schema.table_constraints tc ON c.table_name = tc.table_name AND cu.column_name = c.column_name AND tc.constraint_type = \'PRIMARY KEY\' ' +
/src/lib/dialects/postgres/query-generator.js:121:      ' WHERE c.table_name = <%= table %> AND c.table_schema = <%= schema %> ';
/src/lib/dialects/postgres/query-generator.js-122-
##############################################
/src/lib/dialects/postgres/query-generator.js-181-  addColumnQuery: function(table, key, dataType) {
/src/lib/dialects/postgres/query-generator.js:182:    var query = 'ALTER TABLE <%= table %> ADD COLUMN <%= attribute %>;'
/src/lib/dialects/postgres/query-generator.js-183-      , dbDataType = this.attributeToSQL(dataType, {context: 'addColumn'})
##############################################
/src/lib/dialects/postgres/query-generator.js-189-
/src/lib/dialects/postgres/query-generator.js:190:    attribute = Utils._.template('<%= key %> <%= definition %>')({
/src/lib/dialects/postgres/query-generator.js-191-      key: this.quoteIdentifier(key),
##############################################
/src/lib/dialects/postgres/query-generator.js-201-  removeColumnQuery: function(tableName, attributeName) {
/src/lib/dialects/postgres/query-generator.js:202:    var query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';
/src/lib/dialects/postgres/query-generator.js-203-    return Utils._.template(query)({
##############################################
/src/lib/dialects/postgres/query-generator.js-209-  changeColumnQuery: function(tableName, attributes) {
/src/lib/dialects/postgres/query-generator.js:210:    var query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;'
/src/lib/dialects/postgres/query-generator.js-211-      , sql = [];
##############################################
/src/lib/dialects/postgres/query-generator.js-279-  renameColumnQuery: function(tableName, attrBefore, attributes) {
/src/lib/dialects/postgres/query-generator.js:280:    var query = 'ALTER TABLE <%= tableName %> RENAME COLUMN <%= attributes %>;';
/src/lib/dialects/postgres/query-generator.js-281-    var attrString = [];
##############################################
/src/lib/dialects/postgres/query-generator.js-283-    for (var attributeName in attributes) {
/src/lib/dialects/postgres/query-generator.js:284:      attrString.push(Utils._.template('<%= before %> TO <%= after %>')({
/src/lib/dialects/postgres/query-generator.js-285-        before: this.quoteIdentifier(attrBefore),
##############################################
/src/lib/dialects/postgres/query-generator.js-300-
/src/lib/dialects/postgres/query-generator.js:301:    var query = 'CREATE OR REPLACE FUNCTION pg_temp.<%= fnName %>() RETURNS <%= returns %> AS $func$ BEGIN <%= body %> END; $func$ LANGUAGE <%= language %>; SELECT * FROM pg_temp.<%= fnName %>();';
/src/lib/dialects/postgres/query-generator.js-302-
##############################################
/src/lib/dialects/postgres/query-generator.js-313-
/src/lib/dialects/postgres/query-generator.js:314:    var body = '<%= main %> EXCEPTION WHEN <%= when %> THEN <%= then %>;';
/src/lib/dialects/postgres/query-generator.js-315-    body = Utils._.template(body)({
##############################################
/src/lib/dialects/postgres/query-generator.js-377-
/src/lib/dialects/postgres/query-generator.js:378:      query = 'DELETE FROM <%= table %> WHERE <%= primaryKeys %> IN (SELECT <%= primaryKeysSelection %> FROM <%= table %><%= where %><%= limit %>)';
/src/lib/dialects/postgres/query-generator.js-379-    } else {
/src/lib/dialects/postgres/query-generator.js:380:      query = 'DELETE FROM <%= table %><%= where %>';
/src/lib/dialects/postgres/query-generator.js-381-    }
##############################################
/src/lib/dialects/postgres/query-generator.js-393-      schemaJoin = ', pg_namespace s';
/src/lib/dialects/postgres/query-generator.js:394:      schemaWhere = Utils._.template(" AND s.oid = t.relnamespace AND s.nspname = '<%= schemaName %>'")({schemaName: tableName.schema});
/src/lib/dialects/postgres/query-generator.js-395-      tableName = tableName.tableName;
##############################################
/src/lib/dialects/postgres/query-generator.js-400-      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +
/src/lib/dialects/postgres/query-generator.js:401:      'AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a<%= schemaJoin%> ' +
/src/lib/dialects/postgres/query-generator.js-402-      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +
/src/lib/dialects/postgres/query-generator.js:403:      "t.relkind = 'r' and t.relname = '<%= tableName %>'<%= schemaWhere%> " +
/src/lib/dialects/postgres/query-generator.js-404-      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';
##############################################
/src/lib/dialects/postgres/query-generator.js-409-  removeIndexQuery: function(tableName, indexNameOrAttributes) {
/src/lib/dialects/postgres/query-generator.js:410:    var sql = 'DROP INDEX IF EXISTS <%= indexName %>'
/src/lib/dialects/postgres/query-generator.js-411-      , indexName = indexNameOrAttributes;
##############################################
/src/lib/dialects/postgres/query-generator.js-442-
/src/lib/dialects/postgres/query-generator.js:443:    var template = '<%= type %>'
/src/lib/dialects/postgres/query-generator.js-444-      , replacements = {};
##############################################
/src/lib/dialects/postgres/query-generator.js-470-    if (Utils.defaultValueSchemable(attribute.defaultValue)) {
/src/lib/dialects/postgres/query-generator.js:471:      template += ' DEFAULT <%= defaultValue %>';
/src/lib/dialects/postgres/query-generator.js-472-      replacements.defaultValue = this.escape(attribute.defaultValue, attribute);
##############################################
/src/lib/dialects/postgres/query-generator.js-484-      attribute = Utils.formatReferences(attribute);
/src/lib/dialects/postgres/query-generator.js:485:      template += ' REFERENCES <%= referencesTable %> (<%= referencesKey %>)';
/src/lib/dialects/postgres/query-generator.js-486-      replacements.referencesTable = this.quoteTable(attribute.references.model);
##############################################
/src/lib/dialects/postgres/query-generator.js-494-      if (attribute.onDelete) {
/src/lib/dialects/postgres/query-generator.js:495:        template += ' ON DELETE <%= onDeleteAction %>';
/src/lib/dialects/postgres/query-generator.js-496-        replacements.onDeleteAction = attribute.onDelete.toUpperCase();
##############################################
/src/lib/dialects/postgres/query-generator.js-499-      if (attribute.onUpdate) {
/src/lib/dialects/postgres/query-generator.js:500:        template += ' ON UPDATE <%= onUpdateAction %>';
/src/lib/dialects/postgres/query-generator.js-501-        replacements.onUpdateAction = attribute.onUpdate.toUpperCase();
##############################################
/src/lib/dialects/postgres/query-generator.js-504-      if (attribute.references.deferrable) {
/src/lib/dialects/postgres/query-generator.js:505:        template += ' <%= deferrable %>';
/src/lib/dialects/postgres/query-generator.js-506-        replacements.deferrable = attribute.references.deferrable.toString(this);
##############################################
/src/lib/dialects/postgres/query-generator.js-565-    var sql = [
/src/lib/dialects/postgres/query-generator.js:566:      'CREATE <%= constraintVal %>TRIGGER <%= triggerName %>'
/src/lib/dialects/postgres/query-generator.js:567:      , '<%= eventType %> <%= eventSpec %>'
/src/lib/dialects/postgres/query-generator.js:568:      , 'ON <%= tableName %>'
/src/lib/dialects/postgres/query-generator.js:569:      , '<%= optionsSpec %>'
/src/lib/dialects/postgres/query-generator.js:570:      , 'EXECUTE PROCEDURE <%= functionName %>(<%= paramList %>);'
/src/lib/dialects/postgres/query-generator.js-571-    ].join('\n\t');
##############################################
/src/lib/dialects/postgres/query-generator.js-585-  dropTrigger: function(tableName, triggerName) {
/src/lib/dialects/postgres/query-generator.js:586:    var sql = 'DROP TRIGGER <%= triggerName %> ON <%= tableName %> RESTRICT;';
/src/lib/dialects/postgres/query-generator.js-587-    return Utils._.template(sql)({
##############################################
/src/lib/dialects/postgres/query-generator.js-593-  renameTrigger: function(tableName, oldTriggerName, newTriggerName) {
/src/lib/dialects/postgres/query-generator.js:594:    var sql = 'ALTER TRIGGER <%= oldTriggerName %> ON <%= tableName %> RENAME TO <%= newTriggerName%>;';
/src/lib/dialects/postgres/query-generator.js-595-    return Utils._.template(sql)({
##############################################
/src/lib/dialects/postgres/query-generator.js-602-  createFunction: function(functionName, params, returnType, language, body, options) {
/src/lib/dialects/postgres/query-generator.js:603:    var sql = ['CREATE FUNCTION <%= functionName %>(<%= paramList %>)'
/src/lib/dialects/postgres/query-generator.js:604:      , 'RETURNS <%= returnType %> AS $func$'
/src/lib/dialects/postgres/query-generator.js-605-      , 'BEGIN'
/src/lib/dialects/postgres/query-generator.js:606:      , '\t<%= body %>'
/src/lib/dialects/postgres/query-generator.js-607-      , 'END;'
/src/lib/dialects/postgres/query-generator.js:608:      , "$func$ language '<%= language %>'<%= options %>;"
/src/lib/dialects/postgres/query-generator.js-609-    ].join('\n');
##############################################
/src/lib/dialects/postgres/query-generator.js-622-    // RESTRICT is (currently, as of 9.2) default but we'll be explicit
/src/lib/dialects/postgres/query-generator.js:623:    var sql = 'DROP FUNCTION <%= functionName %>(<%= paramList %>) RESTRICT;';
/src/lib/dialects/postgres/query-generator.js-624-    return Utils._.template(sql)({
##############################################
/src/lib/dialects/postgres/query-generator.js-630-  renameFunction: function(oldFunctionName, params, newFunctionName) {
/src/lib/dialects/postgres/query-generator.js:631:    var sql = 'ALTER FUNCTION <%= oldFunctionName %>(<%= paramList %>) RENAME TO <%= newFunctionName %>;';
/src/lib/dialects/postgres/query-generator.js-632-    return Utils._.template(sql)({
##############################################
/src/lib/dialects/postgres/query-generator.js-639-  databaseConnectionUri: function(config) {
/src/lib/dialects/postgres/query-generator.js:640:    var template = '<%= protocol %>://<%= user %>:<%= password %>@<%= host %><% if(port) { %>:<%= port %><% } %>/<%= database %><% if(ssl) { %>?ssl=<%= ssl %><% } %>';
/src/lib/dialects/postgres/query-generator.js-641-
##############################################
/src/lib/dialects/mssql/query-generator.js-49-  createTableQuery: function(tableName, attributes, options) {
/src/lib/dialects/mssql/query-generator.js:50:    var query = "IF OBJECT_ID('<%= table %>', 'U') IS NULL CREATE TABLE <%= table %> (<%= attributes %>)"
/src/lib/dialects/mssql/query-generator.js-51-      , primaryKeys = []
##############################################
/src/lib/dialects/mssql/query-generator.js-138-  renameTableQuery: function(before, after) {
/src/lib/dialects/mssql/query-generator.js:139:    var query = 'EXEC sp_rename <%= before %>, <%= after %>;';
/src/lib/dialects/mssql/query-generator.js-140-    return Utils._.template(query)({
##############################################
/src/lib/dialects/mssql/query-generator.js-150-  dropTableQuery: function(tableName) {
/src/lib/dialects/mssql/query-generator.js:151:    var query = "IF OBJECT_ID('<%= table %>', 'U') IS NOT NULL DROP TABLE <%= table %>";
/src/lib/dialects/mssql/query-generator.js-152-    var values = {
##############################################
/src/lib/dialects/mssql/query-generator.js-163-
/src/lib/dialects/mssql/query-generator.js:164:    var query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;'
/src/lib/dialects/mssql/query-generator.js:165:      , attribute = Utils._.template('<%= key %> <%= definition %>')({
/src/lib/dialects/mssql/query-generator.js-166-        key: this.quoteIdentifier(key),
##############################################
/src/lib/dialects/mssql/query-generator.js-178-  removeColumnQuery: function(tableName, attributeName) {
/src/lib/dialects/mssql/query-generator.js:179:    var query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';
/src/lib/dialects/mssql/query-generator.js-180-    return Utils._.template(query)({
##############################################
/src/lib/dialects/mssql/query-generator.js-186-  changeColumnQuery: function(tableName, attributes) {
/src/lib/dialects/mssql/query-generator.js:187:    var query = 'ALTER TABLE <%= tableName %> <%= query %>;';
/src/lib/dialects/mssql/query-generator.js-188-    var attrString = [], constraintString = [];
##############################################
/src/lib/dialects/mssql/query-generator.js-192-      if (definition.match(/REFERENCES/)) {
/src/lib/dialects/mssql/query-generator.js:193:        constraintString.push(Utils._.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>')({
/src/lib/dialects/mssql/query-generator.js-194-          fkName: this.quoteIdentifier(attributeName + '_foreign_idx'),
##############################################
/src/lib/dialects/mssql/query-generator.js-198-      } else {
/src/lib/dialects/mssql/query-generator.js:199:        attrString.push(Utils._.template('<%= attrName %> <%= definition %>')({
/src/lib/dialects/mssql/query-generator.js-200-          attrName: this.quoteIdentifier(attributeName),
##############################################
/src/lib/dialects/mssql/query-generator.js-221-  renameColumnQuery: function(tableName, attrBefore, attributes) {
/src/lib/dialects/mssql/query-generator.js:222:    var query = "EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';"
/src/lib/dialects/mssql/query-generator.js-223-      , newName = Object.keys(attributes)[0];
##############################################
/src/lib/dialects/mssql/query-generator.js-232-  bulkInsertQuery: function(tableName, attrValueHashes, options, attributes) {
/src/lib/dialects/mssql/query-generator.js:233:    var query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;'
/src/lib/dialects/mssql/query-generator.js:234:      , emptyQuery = 'INSERT INTO <%= table %><%= output %> DEFAULT VALUES'
/src/lib/dialects/mssql/query-generator.js-235-      , tuples = []
##############################################
/src/lib/dialects/mssql/query-generator.js-311-    var limit = ''
/src/lib/dialects/mssql/query-generator.js:312:      , query = 'DELETE<%= limit %> FROM <%= table %><%= where %>; ' +
/src/lib/dialects/mssql/query-generator.js-313-                'SELECT @@ROWCOUNT AS AFFECTEDROWS;';
##############################################
/src/lib/dialects/mssql/query-generator.js-336-  showIndexesQuery: function(tableName) {
/src/lib/dialects/mssql/query-generator.js:337:    var sql = "EXEC sys.sp_helpindex @objname = N'<%= tableName %>';";
/src/lib/dialects/mssql/query-generator.js-338-    return Utils._.template(sql)({
##############################################
/src/lib/dialects/mssql/query-generator.js-343-  removeIndexQuery: function(tableName, indexNameOrAttributes) {
/src/lib/dialects/mssql/query-generator.js:344:    var sql = 'DROP INDEX <%= indexName %> ON <%= tableName %>'
/src/lib/dialects/mssql/query-generator.js-345-      , indexName = indexNameOrAttributes;
##############################################
/src/lib/dialects/mssql/query-generator.js-555-  dropForeignKeyQuery: function(tableName, foreignKey) {
/src/lib/dialects/mssql/query-generator.js:556:    return Utils._.template('ALTER TABLE <%= table %> DROP <%= key %>')({
/src/lib/dialects/mssql/query-generator.js-557-      table: this.quoteTable(tableName),
##############################################
/src/lib/dialects/mssql/query-generator.js-563-    var sql = "SELECT name FROM SYS.DEFAULT_CONSTRAINTS " +
/src/lib/dialects/mssql/query-generator.js:564:      "WHERE PARENT_OBJECT_ID = OBJECT_ID('<%= table %>', 'U') " +
/src/lib/dialects/mssql/query-generator.js:565:      "AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('<%= column %>') " +
/src/lib/dialects/mssql/query-generator.js:566:      "AND object_id = OBJECT_ID('<%= table %>', 'U'));";
/src/lib/dialects/mssql/query-generator.js-567-    return Utils._.template(sql)({
##############################################
/src/lib/dialects/mssql/query-generator.js-573-  dropConstraintQuery: function (tableName, constraintName) {
/src/lib/dialects/mssql/query-generator.js:574:    var sql = 'ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;';
/src/lib/dialects/mssql/query-generator.js-575-    return Utils._.template(sql)({
##############################################
/src/lib/dialects/mysql/query-generator.js-28-
/src/lib/dialects/mysql/query-generator.js:29:    var query = 'CREATE TABLE IF NOT EXISTS <%= table %> (<%= attributes%>) ENGINE=<%= engine %><%= comment %><%= charset %><%= collation %><%= initialAutoIncrement %>'
/src/lib/dialects/mysql/query-generator.js-30-      , primaryKeys = []
##############################################
/src/lib/dialects/mysql/query-generator.js-100-  addColumnQuery: function(table, key, dataType) {
/src/lib/dialects/mysql/query-generator.js:101:    var query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;'
/src/lib/dialects/mysql/query-generator.js:102:      , attribute = Utils._.template('<%= key %> <%= definition %>')({
/src/lib/dialects/mysql/query-generator.js-103-        key: this.quoteIdentifier(key),
##############################################
/src/lib/dialects/mysql/query-generator.js-116-  removeColumnQuery: function(tableName, attributeName) {
/src/lib/dialects/mysql/query-generator.js:117:    var query = 'ALTER TABLE <%= tableName %> DROP <%= attributeName %>;';
/src/lib/dialects/mysql/query-generator.js-118-    return Utils._.template(query)({
##############################################
/src/lib/dialects/mysql/query-generator.js-124-  changeColumnQuery: function(tableName, attributes) {
/src/lib/dialects/mysql/query-generator.js:125:    var query = 'ALTER TABLE <%= tableName %> <%= query %>;';
/src/lib/dialects/mysql/query-generator.js-126-    var attrString = [], constraintString = [];
##############################################
/src/lib/dialects/mysql/query-generator.js-130-      if (definition.match(/REFERENCES/)) {
/src/lib/dialects/mysql/query-generator.js:131:        constraintString.push(Utils._.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>')({
/src/lib/dialects/mysql/query-generator.js-132-          fkName: this.quoteIdentifier(attributeName + '_foreign_idx'),
##############################################
/src/lib/dialects/mysql/query-generator.js-136-      } else {
/src/lib/dialects/mysql/query-generator.js:137:        attrString.push(Utils._.template('`<%= attrName %>` `<%= attrName %>` <%= definition %>')({
/src/lib/dialects/mysql/query-generator.js-138-          attrName: attributeName,
##############################################
/src/lib/dialects/mysql/query-generator.js-159-  renameColumnQuery: function(tableName, attrBefore, attributes) {
/src/lib/dialects/mysql/query-generator.js:160:    var query = 'ALTER TABLE <%= tableName %> CHANGE <%= attributes %>;';
/src/lib/dialects/mysql/query-generator.js-161-    var attrString = [];
##############################################
/src/lib/dialects/mysql/query-generator.js-165-
/src/lib/dialects/mysql/query-generator.js:166:      attrString.push(Utils._.template('`<%= before %>` `<%= after %>` <%= definition %>')({
/src/lib/dialects/mysql/query-generator.js-167-        before: attrBefore,
##############################################
/src/lib/dialects/mysql/query-generator.js-214-  showIndexesQuery: function(tableName, options) {
/src/lib/dialects/mysql/query-generator.js:215:    var sql = 'SHOW INDEX FROM <%= tableName %><%= options %>';
/src/lib/dialects/mysql/query-generator.js-216-    return Utils._.template(sql)({
##############################################
/src/lib/dialects/mysql/query-generator.js-222-  removeIndexQuery: function(tableName, indexNameOrAttributes) {
/src/lib/dialects/mysql/query-generator.js:223:    var sql = 'DROP INDEX <%= indexName %> ON <%= tableName %>'
/src/lib/dialects/mysql/query-generator.js-224-      , indexName = indexNameOrAttributes;
##############################################
/src/lib/dialects/mysql/query-generator.js-272-
/src/lib/dialects/mysql/query-generator.js:273:        template += Utils._.template(', ADD CONSTRAINT <%= fkName %> FOREIGN KEY (<%= attrName %>)')({
/src/lib/dialects/mysql/query-generator.js-274-          fkName: this.quoteIdentifier(attrName + '_foreign_idx'),
##############################################
/src/lib/dialects/abstract/query-generator.js-93-
/src/lib/dialects/abstract/query-generator.js:94:    var query = 'DROP TABLE IF EXISTS <%= table %>;';
/src/lib/dialects/abstract/query-generator.js-95-
##############################################
/src/lib/dialects/abstract/query-generator.js-107-  renameTableQuery: function(before, after) {
/src/lib/dialects/abstract/query-generator.js:108:    var query = 'ALTER TABLE <%= before %> RENAME TO <%= after %>;';
/src/lib/dialects/abstract/query-generator.js-109-    return Utils._.template(query)({
##############################################
/src/lib/dialects/abstract/query-generator.js-186-    var query
/src/lib/dialects/abstract/query-generator.js:187:      , valueQuery = '<%= tmpTable %>INSERT<%= ignore %> INTO <%= table %> (<%= attributes %>)<%= output %> VALUES (<%= values %>)'
/src/lib/dialects/abstract/query-generator.js:188:      , emptyQuery = '<%= tmpTable %>INSERT<%= ignore %> INTO <%= table %><%= output %>'
/src/lib/dialects/abstract/query-generator.js-189-      , outputFragment
##############################################
/src/lib/dialects/abstract/query-generator.js-226-        if (modelAttributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {
/src/lib/dialects/abstract/query-generator.js:227:            tmpTable = 'declare @tmp table (<%= columns %>); ';
/src/lib/dialects/abstract/query-generator.js-228-
##############################################
/src/lib/dialects/abstract/query-generator.js-263-        options.exception = 'WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;';
/src/lib/dialects/abstract/query-generator.js:264:        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response <%= table %>, OUT sequelize_caught_exception text) RETURNS RECORD AS ' + delimiter +
/src/lib/dialects/abstract/query-generator.js-265-          ' BEGIN ' + valueQuery + ' INTO response; EXCEPTION ' + options.exception + ' END ' + delimiter +
##############################################
/src/lib/dialects/abstract/query-generator.js-268-        options.exception = 'WHEN unique_violation THEN NULL;';
/src/lib/dialects/abstract/query-generator.js:269:        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc() RETURNS SETOF <%= table %> AS $body$ BEGIN RETURN QUERY ' + valueQuery + '; EXCEPTION ' + options.exception + ' END; $body$ LANGUAGE plpgsql; SELECT * FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();';
/src/lib/dialects/abstract/query-generator.js-270-      }
##############################################
/src/lib/dialects/abstract/query-generator.js-331-
/src/lib/dialects/abstract/query-generator.js:332:    var query = 'INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>) VALUES <%= tuples %><%= onDuplicateKeyUpdate %><%= returning %>;'
/src/lib/dialects/abstract/query-generator.js-333-      , tuples = []
##############################################
/src/lib/dialects/abstract/query-generator.js-409-
/src/lib/dialects/abstract/query-generator.js:410:    query = '<%= tmpTable %>UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';
/src/lib/dialects/abstract/query-generator.js-411-
##############################################
/src/lib/dialects/abstract/query-generator.js-422-        if (attributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {
/src/lib/dialects/abstract/query-generator.js:423:            tmpTable = 'declare @tmp table (<%= columns %>); ';
/src/lib/dialects/abstract/query-generator.js-424-
##############################################
/src/lib/dialects/abstract/query-generator.js-537-
/src/lib/dialects/abstract/query-generator.js:538:    query = 'UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';
/src/lib/dialects/abstract/query-generator.js-539-    if (this._dialect.supports.returnValues) {
##############################################
/src/lib/dialects/sqlite/query-generator.js-32-
/src/lib/dialects/sqlite/query-generator.js:33:    var query = 'CREATE TABLE IF NOT EXISTS <%= table %> (<%= attributes%>)'
/src/lib/dialects/sqlite/query-generator.js-34-      , primaryKeys = []
##############################################
/src/lib/dialects/sqlite/query-generator.js-91-  addColumnQuery: function(table, key, dataType) {
/src/lib/dialects/sqlite/query-generator.js:92:    var query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;'
/src/lib/dialects/sqlite/query-generator.js-93-      , attributes = {};
##############################################
/src/lib/dialects/sqlite/query-generator.js-98-    });
/src/lib/dialects/sqlite/query-generator.js:99:    var attribute = Utils._.template('<%= key %> <%= definition %>')({
/src/lib/dialects/sqlite/query-generator.js-100-        key: this.quoteIdentifier(key),
##############################################
/src/lib/dialects/sqlite/query-generator.js-129-
/src/lib/dialects/sqlite/query-generator.js:130:    var query  = 'UPDATE <%= table %> SET <%= values %> <%= where %>'
/src/lib/dialects/sqlite/query-generator.js-131-      , modelAttributeMap = {}
##############################################
/src/lib/dialects/sqlite/query-generator.js-159-
/src/lib/dialects/sqlite/query-generator.js:160:    var query = 'DELETE FROM <%= table %><%= where %>';
/src/lib/dialects/sqlite/query-generator.js-161-    var replacements = {
##############################################
/src/lib/dialects/sqlite/query-generator.js-180-      if (Utils._.isObject(dataType)) {
/src/lib/dialects/sqlite/query-generator.js:181:        var template     = '<%= type %>'
/src/lib/dialects/sqlite/query-generator.js-182-          , replacements = { type: dataType.type.toString() };
##############################################
/src/lib/dialects/sqlite/query-generator.js-191-          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP
/src/lib/dialects/sqlite/query-generator.js:192:          template += ' DEFAULT <%= defaultValue %>';
/src/lib/dialects/sqlite/query-generator.js-193-          replacements.defaultValue = this.escape(dataType.defaultValue, dataType);
##############################################
/src/lib/dialects/sqlite/query-generator.js-209-          dataType = Utils.formatReferences(dataType);
/src/lib/dialects/sqlite/query-generator.js:210:          template += ' REFERENCES <%= referencesTable %> (<%= referencesKey %>)';
/src/lib/dialects/sqlite/query-generator.js-211-          replacements.referencesTable = this.quoteTable(dataType.references.model);
##############################################
/src/lib/dialects/sqlite/query-generator.js-219-          if(dataType.onDelete) {
/src/lib/dialects/sqlite/query-generator.js:220:            template += ' ON DELETE <%= onDeleteAction %>';
/src/lib/dialects/sqlite/query-generator.js-221-            replacements.onDeleteAction = dataType.onDelete.toUpperCase();
##############################################
/src/lib/dialects/sqlite/query-generator.js-224-          if(dataType.onUpdate) {
/src/lib/dialects/sqlite/query-generator.js:225:            template += ' ON UPDATE <%= onUpdateAction %>';
/src/lib/dialects/sqlite/query-generator.js-226-            replacements.onUpdateAction = dataType.onUpdate.toUpperCase();
##############################################
/src/lib/dialects/sqlite/query-generator.js-255-  showIndexesQuery: function(tableName) {
/src/lib/dialects/sqlite/query-generator.js:256:    var sql = 'PRAGMA INDEX_LIST(<%= tableName %>)';
/src/lib/dialects/sqlite/query-generator.js-257-    return Utils._.template(sql)({ tableName: this.quoteTable(tableName) });
##############################################
/src/lib/dialects/sqlite/query-generator.js-260-  removeIndexQuery: function(tableName, indexNameOrAttributes) {
/src/lib/dialects/sqlite/query-generator.js:261:    var sql = 'DROP INDEX IF EXISTS <%= indexName %>'
/src/lib/dialects/sqlite/query-generator.js-262-      , indexName = indexNameOrAttributes;
##############################################
/src/lib/dialects/sqlite/query-generator.js-276-
/src/lib/dialects/sqlite/query-generator.js:277:    var sql = 'PRAGMA TABLE_INFO(<%= tableName %>);';
/src/lib/dialects/sqlite/query-generator.js-278-    return Utils._.template(sql)({tableName: this.quoteTable(this.addSchema(table))});
##############################################
/src/lib/dialects/sqlite/query-generator.js-297-      this.createTableQuery(backupTableName, attributes).replace('CREATE TABLE', 'CREATE TEMPORARY TABLE'),
/src/lib/dialects/sqlite/query-generator.js:298:      'INSERT INTO <%= backupTableName %> SELECT <%= attributeNames %> FROM <%= tableName %>;',
/src/lib/dialects/sqlite/query-generator.js:299:      'DROP TABLE <%= tableName %>;',
/src/lib/dialects/sqlite/query-generator.js-300-      this.createTableQuery(tableName, attributes),
/src/lib/dialects/sqlite/query-generator.js:301:      'INSERT INTO <%= tableName %> SELECT <%= attributeNames %> FROM <%= backupTableName %>;',
/src/lib/dialects/sqlite/query-generator.js:302:      'DROP TABLE <%= backupTableName %>;'
/src/lib/dialects/sqlite/query-generator.js-303-    ].join('');
##############################################
/src/lib/dialects/sqlite/query-generator.js-328-      this.createTableQuery(backupTableName, attributes).replace('CREATE TABLE', 'CREATE TEMPORARY TABLE'),
/src/lib/dialects/sqlite/query-generator.js:329:      'INSERT INTO <%= backupTableName %> SELECT <%= attributeNamesImport %> FROM <%= tableName %>;',
/src/lib/dialects/sqlite/query-generator.js:330:      'DROP TABLE <%= tableName %>;',
/src/lib/dialects/sqlite/query-generator.js-331-      this.createTableQuery(tableName, attributes),
/src/lib/dialects/sqlite/query-generator.js:332:      'INSERT INTO <%= tableName %> SELECT <%= attributeNamesExport %> FROM <%= backupTableName %>;',
/src/lib/dialects/sqlite/query-generator.js:333:      'DROP TABLE <%= backupTableName %>;'
/src/lib/dialects/sqlite/query-generator.js-334-    ].join('');
##############################################
/src/lib/dialects/sqlite/query-generator.js-391-  getForeignKeysQuery: function(tableName, schemaName) {
/src/lib/dialects/sqlite/query-generator.js:392:    var sql = 'PRAGMA foreign_key_list(<%= tableName %>)';
/src/lib/dialects/sqlite/query-generator.js-393-    return Utils._.template(sql)({ tableName: tableName });
