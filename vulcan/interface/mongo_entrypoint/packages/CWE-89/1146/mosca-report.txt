<report_mosca>
 <Path>/src/lib/errors/sequelize-scope-error.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -   * Scope Error. Thrown when the sequelize cannot query the specified scope.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/errors/query-error.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -   * Thrown when a query is passed invalid options (see message for details)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/errors/database/timeout-error.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -   * Thrown when a database query times out because of a deadlock

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/index-hints.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * An enum of index hints to be used in mysql for querying with index hints

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/postgres/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -      return "SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';";

 Line: 76 -          // Move comment to a separate query

 Line: 117 -      return "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';";

 Line: 123 -      return 'SELECT ' +

 Line: 129 -        '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", ' +

 Line: 130 -        '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" ' +

 Line: 131 -        'FROM information_schema.columns c ' +

 Line: 132 -        'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +

 Line: 134 -        'FROM information_schema.TABLE_CONSTRAINTS tc ' +

 Line: 142 -        `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;

 Line: 252 -      let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;

 Line: 255 -        query = this.pgEnum(table, key, dataType) + query;

 Line: 258 -      return query;

 Line: 268 -      const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;

 Line: 275 -          attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);

 Line: 279 -          attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);

 Line: 283 -          attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);

 Line: 287 -          attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);

 Line: 298 -          attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');

 Line: 303 -          attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');

 Line: 305 -          attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);

 Line: 331 -      return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;

 Line: 377 -        whereClause = ` WHERE ${whereClause}`;

 Line: 390 -        return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;

 Line: 392 -      return `DELETE FROM ${table}${whereClause}`;

 Line: 405 -      return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +

 Line: 407 -        `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +

 Line: 408 -        'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +

 Line: 416 -        'SELECT constraint_catalog AS "constraintCatalog",',

 Line: 426 -        `WHERE table_name='${tableName}';`

 Line: 528 -          sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;

 Line: 532 -          sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;

 Line: 719 -          'insert': 'INSERT',

 Line: 720 -          'update': 'UPDATE',

 Line: 721 -          'delete': 'DELETE',

 Line: 730 -        if (eventSpec === 'UPDATE') {

 Line: 762 -      return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +

 Line: 765 -        `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;

 Line: 851 -     * Generates an SQL query that returns all foreign keys of a table.

 Line: 854 -     * @returns {string}            The generated sql query.

 Line: 858 -      return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +

 Line: 859 -        `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;

 Line: 868 -      return 'SELECT ' +

 Line: 880 -        'FROM information_schema.table_constraints AS tc ' +

 Line: 888 -     * Generates an SQL query that returns all foreign keys details of a table.

 Line: 898 -      }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${

 Line: 907 -      }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${

 Line: 912 -     * Generates an SQL query that removes a foreign key from a table.

 Line: 916 -     * @returns {string}            The generated sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/postgres/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 45 -      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/postgres/connection-manager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 149 -        // node-postgres does not treat this as an error since no active query was ever emitted

 Line: 194 -        let query = '';

 Line: 200 -          query += 'SET standard_conforming_strings=on;';

 Line: 204 -          query += `SET client_min_messages TO ${this.sequelize.options.clientMinMessages};`;

 Line: 210 -            query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;

 Line: 212 -            query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;

 Line: 261 -        '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +

 Line: 263 -        '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +

 Line: 265 -        'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +

 Line: 267 -        '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +

 Line: 268 -        ' WHERE (pg_type.typtype IN(\'b\', \'e\'));'

 Line: 274 -        // the SELECT query result.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/postgres/query-interface.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 47 -          Object.assign({}, options, { plain: true, raw: true, type: QueryTypes.SELECT })

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/postgres/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -     * Rewrite query with parameters.

 Line: 57 -      const query = parameters && parameters.length

 Line: 63 -      return query.catch(err => {

 Line: 76 -            ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])

 Line: 77 -            : queryResult.rows;

 Line: 79 -            ? queryResult.reduce(

 Line: 83 -            : queryResult.rowCount;

 Line: 85 -          const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');

 Line: 86 -          const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');

 Line: 148 -              if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \((.+)\) REFERENCES (.+)\((.+)\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {

 Line: 155 -                  if (/(UPDATE|DELETE)/.test(defParts[i])) {

 Line: 226 -          if (QueryTypes.BULKUPDATE === this.options.type) {

 Line: 232 -          if (QueryTypes.BULKDELETE === this.options.type) {

 Line: 257 -            return [rows, queryResult];

 Line: 358 -      return /SELECT conname as constraint_name, pg_catalog\.pg_get_constraintdef\(r\.oid, true\) as condef FROM pg_catalog\.pg_constraint r WHERE r\.conrelid = \(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\) AND r\.contype = 'f' ORDER BY 1;/.test(this.sql);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mssql/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -        'IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',

 Line: 35 -        'IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',

 Line: 44 -        'IF NOT EXISTS (SELECT schema_name',

 Line: 45 -        'FROM information_schema.schemata',

 Line: 46 -        'WHERE schema_name =', wrapSingleQuote(schema), ')',

 Line: 59 -        'IF EXISTS (SELECT schema_name',

 Line: 60 -        'FROM information_schema.schemata',

 Line: 61 -        'WHERE schema_name =', quotedSchema, ')',

 Line: 67 -        'INSERT INTO @cascade ( ms_sql )',

 Line: 68 -        "SELECT CASE WHEN o.type IN ('F','PK')",

 Line: 71 -        'FROM sys.objects o',

 Line: 74 -        "WHERE o.type IN ('F', 'PK', 'U') AND s.name = ", quotedSchema,

 Line: 76 -        'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',

 Line: 81 -        'DELETE FROM @cascade WHERE id = @id;',

 Line: 82 -        'SELECT @id = NULL, @ms_sql = NULL;',

 Line: 83 -        'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',

 Line: 92 -        'SELECT "name" as "schema_name" FROM sys.schemas as s',

 Line: 93 -        'WHERE "s"."name" NOT IN (',

 Line: 104 -        "SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'"

 Line: 109 -      const query = (table, attrs) => `IF OBJECT_ID('${table}', 'U') IS NULL CREATE TABLE ${table} (${attrs})`,

 Line: 181 -        'SELECT',

 Line: 190 -        'FROM',

 Line: 194 -        'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',

 Line: 196 -        'FROM information_schema.TABLE_CONSTRAINTS tc ',

 Line: 209 -        'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)

 Line: 224 -      return 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES;';

 Line: 318 -        outputFragment = ' OUTPUT INSERTED.*';

 Line: 321 -      const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;

 Line: 356 -        allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);

 Line: 365 -          generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;

 Line: 376 -        const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;

 Line: 377 -        sql.query = sql.query.replace('UPDATE', updateArgs);

 Line: 423 -      //IDENTITY_INSERT Condition

 Line: 428 -           * IDENTITY_INSERT Column Cannot be updated, only inserted

 Line: 461 -        throw new Error('Primary Key or Unique key should be passed to upsert query');

 Line: 476 -      // Remove the IDENTITY_INSERT Column from update

 Line: 485 -      let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;

 Line: 486 -      query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;

 Line: 488 -        query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;

 Line: 490 -      return query;

 Line: 508 -        whereClause = ` WHERE ${whereClause}`;

 Line: 511 -      return `DELETE${limit} FROM ${table}${whereClause}; SELECT @@ROWCOUNT AS AFFECTEDROWS;`;

 Line: 544 -            + 'we will remove it but we recommend restructuring your query');

 Line: 598 -          template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;

 Line: 602 -          template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;

 Line: 677 -      return `${'SELECT ' +

 Line: 690 -        'FROM sys.foreign_key_columns FKC ' +

 Line: 699 -     * Generates an SQL query that returns all foreign keys details of a table.

 Line: 708 -      } WHERE TB.NAME =${wrapSingleQuote(tableName)}`;

 Line: 719 -      } WHERE TB.NAME =${wrapSingleQuote(tableName)

 Line: 732 -        'SELECT K.TABLE_NAME AS tableName,',

 Line: 735 -        'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',

 Line: 741 -        'WHERE C.CONSTRAINT_TYPE = \'PRIMARY KEY\'',

 Line: 753 -      return 'SELECT name FROM sys.default_constraints ' +

 Line: 754 -        `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U') ` +

 Line: 755 -        `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}') ` +

 Line: 797 -      let mainFragment = `SELECT ${attributes.join(', ')} FROM ${tables}`;

 Line: 817 -          const whereFragment = where ? ` WHERE ${where}` : '';

 Line: 823 -           * 1. The outermost query selects all items from the inner query block.

 Line: 825 -           *    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.

 Line: 826 -           * 2. The next query handles the LIMIT and OFFSET behavior by getting

 Line: 827 -           *    the TOP N rows of the query where the row number is > OFFSET

 Line: 828 -           * 3. The innermost query is the actual set we want information from

 Line: 830 -          const fragment = `SELECT TOP 100 PERCENT ${attributes.join(', ')} FROM ` +

 Line: 831 -                          `(SELECT ${topFragment}*` +

 Line: 832 -                            ` FROM (SELECT ROW_NUMBER() OVER (ORDER BY ${orders.mainQueryOrder.join(', ')}) as row_num, * ` +

 Line: 833 -                              ` FROM ${tables} AS ${tmpTable}${whereFragment})` +

 Line: 834 -                            ` AS ${tmpTable} WHERE row_num > ${offset})` +

 Line: 838 -        mainFragment = `SELECT ${topFragment}${attributes.join(', ')} FROM ${tables}`;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mssql/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -    'LIMIT ON UPDATE': true,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mssql/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 124 -     * High level function that handles the results of a query execution.

 Line: 126 -     * @param {Array} data - The result of the query execution.

 Line: 131 -     *  query.formatResults([

 Line: 147 -            // NOTE: super contrived. This just passes the newly added query-interface

 Line: 287 -        err.message.match(/The DELETE statement conflicted with the REFERENCE constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./) ||

 Line: 288 -        err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 63 -      return 'SELECT VERSION() as `version`';

 Line: 147 -      return `SHOW FULL COLUMNS FROM ${table};`;

 Line: 281 -      options.onDuplicate = 'UPDATE ';

 Line: 297 -      let query = `DELETE FROM ${this.quoteTable(tableName)}`;

 Line: 306 -        query += ` WHERE ${where}`;

 Line: 309 -      return query + limit;

 Line: 313 -      return `SHOW INDEX FROM ${this.quoteTable(tableName)}${(options || {}).database ? ` FROM \`${options.database}\`` : ''}`;

 Line: 321 -        'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',

 Line: 328 -        `WHERE table_name='${tableName}'`

 Line: 414 -          template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;

 Line: 418 -          template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;

 Line: 499 -     * Generates an SQL query that returns all foreign keys of a table.

 Line: 503 -     * @returns {string}            The generated sql query.

 Line: 508 -      return `SELECT ${foreignKeyFields} FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}' AND REFERENCED_TABLE_NAME IS NOT NULL;`;

 Line: 512 -     * Generates an SQL query that returns the foreign key constraint of a given column.

 Line: 516 -     * @returns {string}            The generated sql query.

 Line: 524 -      return `SELECT ${foreignKeyFields} FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE`

 Line: 525 -        + ` WHERE (REFERENCED_TABLE_NAME = ${quotedTableName}${table.schema

 Line: 533 -     * Generates an SQL query that removes a foreign key from a table.

 Line: 537 -     * @returns {string}            The generated sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -    'LIMIT ON UPDATE': true,

 Line: 28 -      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/connection-manager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 115 -            // return connection without executing SET time_zone query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/query-interface.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 69 -        let query;

 Line: 80 -          query = qi.QueryGenerator.dropForeignKeyQuery(tableName, constraintName);

 Line: 82 -          query = qi.QueryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -      //do we need benchmark for this query execution

 Line: 73 -     * High level function that handles the results of a query execution.

 Line: 77 -     *  query.formatResults([

 Line: 86 -     * @param {Array} data - The result of the query execution.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 109 -      let query;

 Line: 136 -          outputFragment = ' OUTPUT INSERTED.*';

 Line: 153 -                outputColumns += `INSERTED.${this.quoteIdentifier(attribute.field)}`;

 Line: 198 -              values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }));

 Line: 200 -              values.push(this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }, bindParam));

 Line: 215 -      valueQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable} (${replacements.attributes})${replacements.output} VALUES (${replacements.values})${replacements.onConflictDoNothing}${valueQuery}`;

 Line: 216 -      emptyQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable}${replacements.output}${replacements.onConflictDoNothing}${emptyQuery}`;

 Line: 228 -          } LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc()`;

 Line: 231 -          valueQuery = `CREATE OR REPLACE FUNCTION pg_temp.testfunc() RETURNS SETOF ${quotedTable} AS $body$ BEGIN RETURN QUERY ${valueQuery}; EXCEPTION ${options.exception} END; $body$ LANGUAGE plpgsql; SELECT * FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();`;

 Line: 240 -      query = `${replacements.attributes.length ? valueQuery : emptyQuery};`;

 Line: 242 -        query = `SET IDENTITY_INSERT ${quotedTable} ON; ${query} SET IDENTITY_INSERT ${quotedTable} OFF;`;

 Line: 246 -      const result = { query };

 Line: 295 -          return this.escape(fieldValueHash[key], fieldMappedAttributes[key], { context: 'INSERT' });

 Line: 302 -        if (this._dialect.supports.inserts.updateOnDuplicate == ' ON CONFLICT DO UPDATE SET') { // postgres

 Line: 306 -          onDuplicateKeyUpdate = ` ON CONFLICT (${conflictKeys.join(',')}) DO UPDATE SET ${updateKeys.join(',')}`;

 Line: 325 -      return `INSERT${ignoreDuplicates} INTO ${this.quoteTable(tableName)} (${attributes}) VALUES ${tuples.join(',')}${onDuplicateKeyUpdate}${onConflictDoNothing}${returning};`;

 Line: 329 -     * Returns an update query

 Line: 360 -      if (this._dialect.supports['LIMIT ON UPDATE'] && options.limit) {

 Line: 369 -          outputFragment = ' OUTPUT INSERTED.*';

 Line: 385 -                outputColumns += `INSERTED.${this.quoteIdentifier(attribute.field)}`;

 Line: 422 -          values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);

 Line: 424 -          values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);

 Line: 434 -      const query = `${tmpTable}UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')}${outputFragment} ${this.whereQuery(where, whereOptions)}${suffix}`.trim();

 Line: 436 -      const result = { query };

 Line: 444 -     * Returns an update query using arithmetic operator

 Line: 468 -          outputFragment = ' OUTPUT INSERTED.*';

 Line: 483 -      return `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')}${outputFragment} ${this.whereQuery(where)} ${returningFragment}`.trim();

 Line: 487 -      Returns an add index query.

 Line: 679 -            constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;

 Line: 682 -            constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;

 Line: 1054 -     * Generates an SQL query that extract JSON property of given path.

 Line: 1058 -     * @returns {string}                       The generated sql query

 Line: 1099 -      Returns a query for selecting elements in the table <tableName>.

 Line: 1133 -      let query;

 Line: 1210 -                duplicating: false, // The UNION'ed query may contain duplicates, but each sub-query cannot

 Line: 1227 -              // We need to make sure the order by attributes are available to the parent query

 Line: 1248 -            // Ordering is handled by the subqueries, so ordering the UNION'ed result is not needed

 Line: 1254 -          // Caching the base query and splicing the where part into it is consistently > twice

 Line: 1256 -          const baseQuery = `SELECT * FROM (${this.selectQuery(

 Line: 1288 -              this._dialect.supports['UNION ALL'] ? ' UNION ALL ' : ' UNION '

 Line: 1298 -      // Add WHERE to sub or main query

 Line: 1303 -            subQueryItems.push(` WHERE ${options.where}`);

 Line: 1305 -            mainQueryItems.push(` WHERE ${options.where}`);

 Line: 1306 -            // Walk the main query to update all selects

 Line: 1308 -              if (value.startsWith('SELECT')) {

 Line: 1316 -      // Add GROUP BY to sub or main query

 Line: 1326 -      // Add HAVING to sub or main query

 Line: 1338 -      // Add ORDER to sub or main query

 Line: 1349 -      // Add LIMIT, OFFSET to sub or main query

 Line: 1360 -        query = `SELECT ${attributes.main.join(', ')} FROM (${subQueryItems.join('')}) AS ${mainTable.as}${mainJoinQueries.join('')}${mainQueryItems.join('')}`;

 Line: 1362 -        query = mainQueryItems.join('');

 Line: 1370 -        if (this._dialect.supports.lockKey && (lock === 'KEY SHARE' || lock === 'NO KEY UPDATE')) {

 Line: 1371 -          query += ` FOR ${lock}`;

 Line: 1373 -          query += ` ${this._dialect.supports.forShare}`;

 Line: 1375 -          query += ' FOR UPDATE';

 Line: 1378 -          query += ` OF ${this.quoteTable(options.lock.of.name)}`;

 Line: 1381 -          query += ' SKIP LOCKED';

 Line: 1532 -          // if the child is a sub query we just give it to the

 Line: 1759 -     * For a given include a query is generated that contains all the way from the subQuery

 Line: 1774 -      let query;

 Line: 1797 -        query = this.selectQuery(topInclude.through.model.getTableName(), {

 Line: 1831 -        query = this.selectQuery(topInclude.model.getTableName(), {

 Line: 1853 -        query.replace(/;$/, ''),

 Line: 1923 -      let fragment = `SELECT ${attributes.join(', ')} FROM ${tables}`;

 Line: 1944 -     * @returns {string}         The generated sql query.

 Line: 2038 -      const query = this.whereItemsQuery(where, options);

 Line: 2039 -      if (query && query.length) {

 Line: 2040 -        return `WHERE ${query}`;

 Line: 2056 -        throw new Error('Support for `{where: \'raw query\'}` has been removed.');

 Line: 2078 -        throw new Error(`WHERE parameter "${key}" has invalid "undefined" value`);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/query-generator/helpers/quote.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 2 -   * These are basic block of query building

 Line: 7 -   * Defining these helpers in each query dialect will leave

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/query-generator/transaction.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -     * Returns a query that sets the transaction isolation level.

 Line: 10 -     * @returns {string}         The generated sql query.

 Line: 26 -     * Returns a query that starts a transaction.

 Line: 29 -     * @returns {string}         The generated sql query.

 Line: 48 -     * Returns a query that commits a transaction.

 Line: 51 -     * @returns {string}         The generated sql query.

 Line: 63 -     * Returns a query that rollbacks a transaction.

 Line: 66 -     * @returns {string}         The generated sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    'LIMIT ON UPDATE': false,

 Line: 11 -    'UNION': true,

 Line: 12 -    'UNION ALL': true,

 Line: 38 -      ignoreDuplicates: '', /* dialect specific words for INSERT IGNORE or DO NOTHING */

 Line: 39 -      updateOnDuplicate: false, /* whether dialect supports ON DUPLICATE KEY UPDATE */

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/connection-manager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 170 -          if (queryType === 'SELECT' && !useMaster) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -     * rewrite query with parameters

 Line: 31 -     *   query.formatBindParameters('select $1 as foo', ['fooval']);

 Line: 33 -     *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });

 Line: 109 -     * Execute the passed sql query.

 Line: 113 -     *     query.run('SELECT 1')

 Line: 135 -     * Get the attributes of an insert query, which contains the just inserted id.

 Line: 174 -      if (this.options.type === QueryTypes.INSERT) {

 Line: 178 -      // is insert query if sql contains insert into

 Line: 181 -      // is insert query if no results are passed or if the result has the inserted id

 Line: 184 -      // is insert query if no metadata are passed or if the metadata has the inserted id

 Line: 224 -      return this.options.type === QueryTypes.SELECT;

 Line: 228 -      return this.options.type === QueryTypes.BULKUPDATE;

 Line: 232 -      return this.options.type === QueryTypes.BULKDELETE;

 Line: 240 -      return this.options.type === QueryTypes.UPDATE;

 Line: 327 -     * @returns {Function} A function to call after the query was completed.

 Line: 349 -     * The function takes the result of the query execution and groups

 Line: 629 -              // If checkExisting is false it's because there's only 1:1 associations in this query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mariadb/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -      return `SELECT SCHEMA_NAME as schema_name FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA'${skip ? skip.reduce( (sql, schemaName) => sql +=  `,${this.escape(schemaName)}`, '') : ''});`;

 Line: 31 -      return 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA NOT IN (\'MYSQL\', \'INFORMATION_SCHEMA\', \'PERFORMANCE_SCHEMA\') AND TABLE_TYPE = \'BASE TABLE\'';

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mariadb/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -      'LIMIT ON UPDATE': true,

 Line: 30 -        updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mariadb/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 81 -     * High level function that handles the results of a query execution.

 Line: 85 -     *  query.formatResults([

 Line: 94 -     * @param {Array} data - The result of the query execution.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/sqlite/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -      return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";

 Line: 15 -      return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";

 Line: 19 -      return 'SELECT sqlite_version() as `version`';

 Line: 199 -      return 'SELECT name FROM `sqlite_master` WHERE type=\'table\' and name!=\'sqlite_sequence\';';

 Line: 212 -      const query = `${insert.query} ${update.query}`;

 Line: 214 -      return { query, bind };

 Line: 241 -          values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);

 Line: 243 -          values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);

 Line: 247 -      let query;

 Line: 251 -        query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;

 Line: 253 -        query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;

 Line: 256 -      return { query, bind };

 Line: 261 -        `DELETE FROM ${this.quoteTable(tableName)}`,

 Line: 262 -        options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), "'")};` : ''

 Line: 272 -        whereClause = `WHERE ${whereClause}`;

 Line: 276 -        whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;

 Line: 279 -      return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;

 Line: 328 -              sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;

 Line: 332 -              sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;

 Line: 351 -      let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;

 Line: 380 -      return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;

 Line: 403 -      }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`

 Line: 406 -        }INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`

 Line: 430 -      }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`

 Line: 458 -      }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`

 Line: 461 -        }INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`

 Line: 493 -     * Generates an SQL query that returns all foreign keys of a table.

 Line: 496 -     * @returns {string}            The generated sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/sqlite/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -    'UNION ALL': false,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/sqlite/query-interface.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 128 -            constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;

 Line: 129 -            constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;

 Line: 164 -    return qi.sequelize.query(describeCreateTableSql, Object.assign({}, options, { type: QueryTypes.SELECT, raw: true }))

 Line: 193 -    const query = qi.QueryGenerator.getForeignKeysQuery(tableName, database);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/sqlite/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 20 -     * rewrite query with parameters.

 Line: 201 -      if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].includes(this.options.type)) {

 Line: 239 -              const query = this;

 Line: 268 -            } else if (/FROM `(.*?)`/i.exec(this.sql)) {

 Line: 269 -              tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);

 Line: 307 -          updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);

 Line: 308 -          deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);

 Line: 447 -      if (this.isInsertQuery() || this.isUpdateQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().includes('CREATE TEMPORARY TABLE'.toLowerCase()) || this.options.type === QueryTypes.BULKDELETE) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/hooks.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 423 -   * A hook that is run before a find (select) query

 Line: 431 -   * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded

 Line: 439 -   * A hook that is run before a find (select) query, after all option parsing is complete

 Line: 447 -   * A hook that is run after a find (select) query

 Line: 455 -   * A hook that is run before a count query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/deferrable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -      return queryGenerator.setDeferredQuery(this.constraints);

 Line: 54 -      return queryGenerator.setImmediateQuery(this.constraints);

 Line: 80 -   * trigger a query once the transaction has been started and set the constraints

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/transaction.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -   * To run a query under a transaction, you should pass the transaction in the options object.

 Line: 118 -          acquireOptions.type = 'SELECT';

 Line: 287 -     * # The query will now return any rows that aren't locked by another transaction

 Line: 290 -     * @property UPDATE

 Line: 293 -     * @property NO_KEY_UPDATE Postgres 9.3+ only

 Line: 297 -        UPDATE: 'UPDATE',

 Line: 300 -        NO_KEY_UPDATE: 'NO KEY UPDATE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/query-interface.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 113 -        type: this.sequelize.QueryTypes.SELECT

 Line: 143 -     * queryInterface.createTable(

 Line: 187 -     * @param {Object} [options] create table and query options

 Line: 284 -     * @param {Object} [options] query options

 Line: 388 -      return this.sequelize.query(sql, Object.assign({}, options, { plain: false, raw: true, type: QueryTypes.SELECT }));

 Line: 410 -     * @param {boolean}   [options.raw=true] Run query in raw mode

 Line: 411 -     * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type

 Line: 472 -         * If no data is returned from the query, then the table name may be wrong.

 Line: 494 -     * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {

 Line: 569 -      const query = this.QueryGenerator.attributesToSQL(attributes, {

 Line: 573 -      const sql = this.QueryGenerator.changeColumnQuery(tableName, query);

 Line: 717 -      const queryOptions = Object.assign({}, options, {

 Line: 724 -          return SQLiteQueryInterface.getForeignKeyReferencesForTable(this, tableName, queryOptions);

 Line: 729 -          const query = this.QueryGenerator.getForeignKeyReferencesQuery(tableName, catalogName);

 Line: 730 -          return this.sequelize.query(query, queryOptions)

 Line: 737 -          const query = this.QueryGenerator.getForeignKeysQuery(tableName, catalogName);

 Line: 738 -          return this.sequelize.query(query, queryOptions);

 Line: 769 -     * queryInterface.addConstraint('Users', ['email'], {

 Line: 775 -     * queryInterface.addConstraint('Users', ['roles'], {

 Line: 783 -     * queryInterface.addConstraint('Users', ['roles'], {

 Line: 789 -     * queryInterface.addConstraint('Users', ['username'], {

 Line: 795 -     * queryInterface.addConstraint('Posts', ['username'], {

 Line: 881 -      options.type = QueryTypes.INSERT;

 Line: 898 -     * @param {Object} options      query options

 Line: 955 -              result.$action === 'INSERT',

 Line: 975 -     * queryInterface.bulkInsert('roles', [{

 Line: 994 -      options.type = QueryTypes.INSERT;

 Line: 1008 -      options.type = QueryTypes.UPDATE;

 Line: 1018 -     * queryInterface.bulkUpdate('roles', {

 Line: 1115 -      const options = Object.assign({}, optionsArg, { type: QueryTypes.SELECT, model });

 Line: 1128 -      options.type = QueryTypes.UPDATE;

 Line: 1139 -      options.type = QueryTypes.UPDATE;

 Line: 1150 -        type: QueryTypes.SELECT

 Line: 1222 -     * queryInterface.createFunction(

 Line: 1249 -     * @param {Object}  [options]     query options

 Line: 1269 -     * queryInterface.dropFunction(

 Line: 1279 -     * @param {Object} [options]    query options

 Line: 1297 -     * queryInterface.renameFunction(

 Line: 1309 -     * @param {Object} [options]        query options

 Line: 1323 -    // Helper methods useful for querying

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/table-hints.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * An enum of table hints to be used in mssql for querying with table hints

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/sequelize.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 150 -     * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 164 -     * @param {Object}   [options.retry] Set of flags that control when a query is automatically retried.

 Line: 165 -     * @param {Array}    [options.retry.match] Only retry a query if the error matches one of these strings.

 Line: 166 -     * @param {number}   [options.retry.max] How many times a failing query is automatically retried.  Set to 0 to disable retrying on SQL_BUSY error.

 Line: 232 -        query: {},

 Line: 488 -     * Execute a query on the DB, optionally bypassing all the Sequelize goodness.

 Line: 492 -     * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:

 Line: 495 -     * sequelize.query('SELECT...').then(([results, metadata]) => {

 Line: 496 -     *   // Raw query - use then plus array spread

 Line: 499 -     * sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(results => {

 Line: 500 -     *   // SELECT query - use then

 Line: 506 -     * @param {boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result

 Line: 507 -     * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under

 Line: 508 -     * @param {QueryTypes}      [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.

 Line: 509 -     * @param {boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified

 Line: 510 -     * @param {boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row

 Line: 513 -     * @param {boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.

 Line: 514 -     * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 517 -     * @param {Object}          [options.retry] Set of flags that control when a query is automatically retried.

 Line: 518 -     * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.

 Line: 519 -     * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.

 Line: 521 -     * @param {boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)

 Line: 523 -     * @param {Object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.

 Line: 530 -    query(sql, options) {

 Line: 554 -          options.type = QueryTypes.SELECT;

 Line: 618 -            const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);

 Line: 637 -          const query = new this.dialect.Query(connection, this, options);

 Line: 638 -          return this.runHooks('beforeQuery', options, query)

 Line: 640 -            .then(() => query.run(sql, bindParameters))

 Line: 641 -            .finally(() => this.runHooks('afterQuery', options, query))

 Line: 652 -     * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.

 Line: 656 -     * @param {Object}        [options] query options.

 Line: 657 -     * @param {Transaction}   [options.transaction] The transaction that the query should be executed under

 Line: 675 -      // Override some options, since this isn't a SELECT

 Line: 681 -      const query =

 Line: 709 -     * @param {Object} [options={}] query options

 Line: 724 -     * @param {Object} [options={}] query options

 Line: 740 -     * @param {Object} [options={}] query options

 Line: 755 -     * @param {Object} [options={}] query options

 Line: 874 -     * Test the connection by trying to authenticate. It runs `SELECT 1+1 AS result` query.

 Line: 876 -     * @param {Object} [options={}] query options

 Line: 884 -        type: QueryTypes.SELECT

 Line: 887 -      return this.query('SELECT 1+1 AS result', options).return();

 Line: 935 -     * Creates an object which represents a column in the DB, this allows referencing another column in your query. This is often useful in conjunction with `sequelize.fn`, since raw string arguments to fn will be escaped.

 Line: 978 -     * An AND query

 Line: 994 -     * An OR query

 Line: 1046 -     * Start a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction @see {@link Transaction}

 Line: 1048 -     * If you have [CLS](https://github.com/othiym23/node-continuation-local-storage) enabled, the transaction will automatically be passed to any query that runs within the callback

 Line: 1082 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1277 -   * Operators symbols to be used for querying data

 Line: 1288 -   * Available table hints to be used for querying data in mssql for table hints

 Line: 1294 -   * Available index hints to be used for querying data in mysql for index hints

 Line: 1313 -   * Available query types for use with `sequelize.query`

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/associations/base.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 54 -   * When fetching associated models, you can limit your query to only load some models. These queries are written in the same way as queries to `find`/`findAll`. To only get pictures in JPG, you can do:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/query-types.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * An enum of query types used by `sequelize.query`

 Line: 7 -   * @property SELECT

 Line: 8 -   * @property INSERT

 Line: 9 -   * @property UPDATE

 Line: 10 -   * @property BULKUPDATE

 Line: 11 -   * @property BULKDELETE

 Line: 12 -   * @property DELETE

 Line: 23 -    SELECT: 'SELECT',

 Line: 24 -    INSERT: 'INSERT',

 Line: 25 -    UPDATE: 'UPDATE',

 Line: 26 -    BULKUPDATE: 'BULKUPDATE',

 Line: 27 -    BULKDELETE: 'BULKDELETE',

 Line: 28 -    DELETE: 'DELETE',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/operators.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * Operator symbols to be used when querying data

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/model.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1380 -     * @param {Function} [options.logging=false]   A function that gets executed while running the query to log the sql.

 Line: 1381 -     * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1406 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1407 -     * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1509 -     * # As you have defined a default scope, every time you do Model.find, the default scope is appended to your query. Here's a couple of examples:

 Line: 1511 -     * Model.findAll() // WHERE username = 'dan'

 Line: 1512 -     * Model.findAll({ where: { age: { [Op.gt]: 12 } } }) // WHERE age > 12 AND username = 'dan'

 Line: 1516 -     * // WHERE email like 'dan@sequelize.com%' AND access_level >= 42

 Line: 1589 -     * # WHERE attr1 = 42 AND attr2 = 'cake'

 Line: 1611 -     * # WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5

 Line: 1631 -     * # WHERE `Model`.`name` = 'a project' AND (`Model`.`id` IN (1, 2, 3) OR (`Model`.`id` > 10 AND `Model`.`id` < 100));

 Line: 1637 -     * The promise is resolved with an array of Model instances if the query succeeds._

 Line: 1650 -     * @param  {boolean}                                                   [options.include[].or=false] Whether to bind the ON and WHERE clause together by OR instead of AND.

 Line: 1654 -     * @param  {boolean}                                                   [options.include[].separate] If true, runs a separate query to fetch the associated instances, only supported for hasMany associations

 Line: 1663 -     * @param  {Transaction}                                               [options.transaction] Transaction to run query under

 Line: 1664 -     * @param  {string|Object}                                             [options.lock] Lock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE. Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model locks with joins. See [transaction.LOCK for an example](transaction#lock)

 Line: 1666 -     * @param  {Function}                                                  [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1667 -     * @param  {boolean}                                                   [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1859 -     * @param  {Transaction}               [options.transaction] Transaction to run query under

 Line: 1893 -     * @param  {Transaction}  [options.transaction] Transaction to run query under

 Line: 1910 -        // Don't add limit if querying directly on the pk or a unique column

 Line: 1932 -     * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1933 -     * @param {boolean}         [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1936 -     * @param {Transaction}     [options.transaction] Transaction to run query under

 Line: 2010 -     * @param {Transaction}   [options.transaction] Transaction to run query under

 Line: 2011 -     * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 2012 -     * @param {boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2046 -     * Find all the rows matching your query, within a specified offset / limit, and get the total number of rows matching your query. This is very useful for paging

 Line: 2057 -     * # In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return the total number of rows that matched your query.

 Line: 2075 -     * {@link Model.findAll} for a specification of find and query options

 Line: 2195 -     * @param {Object}        [options] build and query options

 Line: 2204 -     * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 2205 -     * @param {boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2206 -     * @param {Transaction}   [options.transaction] Transaction to run query under

 Line: 2226 -     * Find a row that matches the query, or build (but don't save) the row if none is found.

 Line: 2232 -     * @param {Object}   [options.transaction] Transaction to run query under

 Line: 2263 -     * Find a row that matches the query, or build and save the row if none is found

 Line: 2276 -     * @param {Transaction} [options.transaction] Transaction to run query under

 Line: 2330 -            // If the query returned an empty result for the primary key, we know that this was actually a unique constraint violation

 Line: 2416 -     * * MySQL - Implemented as a single query `INSERT values ON DUPLICATE KEY UPDATE values`

 Line: 2417 -     * * PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN unique_constraint UPDATE

 Line: 2418 -     * * SQLite - Implemented as two queries `INSERT; UPDATE`. This means that the update is executed regardless of whether the row already existed or not

 Line: 2419 -     * * MSSQL - Implemented as a single query using `MERGE` and `WHEN (NOT) MATCHED THEN`

 Line: 2420 -     * **Note** that SQLite returns undefined for created, no matter if the row was created or updated. This is because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know whether the row was inserted or not.

 Line: 2428 -     * @param  {Transaction}  [options.transaction] Transaction to run query under

 Line: 2429 -     * @param  {Function}     [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 2430 -     * @param  {boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2509 -     * To obtain Instances for the newly created values, you will need to query for them again.

 Line: 2521 -     * @param  {Transaction}  [options.transaction]            Transaction to run query under

 Line: 2522 -     * @param  {Function}     [options.logging=false]          A function that gets executed while running the query to log the sql.

 Line: 2523 -     * @param  {boolean}      [options.benchmark=false]        Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2664 -            // Create all in one query

 Line: 2720 -                      // The query.js for these DBs is blind, it autoincrements the

 Line: 2849 -     * @param {Transaction}      [options.transaction] Transaction to run query under

 Line: 2851 -     * @param {boolean}          [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2871 -     * @param  {boolean}      [options.individualHooks=false] If set to true, destroy will SELECT all records matching the where parameter and will execute before / after destroy hooks on each row

 Line: 2874 -     * @param  {boolean}      [options.truncate=false]        If set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is truncated the where and limit options are ignored

 Line: 2877 -     * @param  {Transaction}  [options.transaction] Transaction to run query under

 Line: 2878 -     * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.

 Line: 2879 -     * @param  {boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2904 -      options.type = QueryTypes.BULKDELETE;

 Line: 2926 -        // Run delete query (or update if paranoid)

 Line: 2928 -          // Set query type appropriately when running soft delete

 Line: 2929 -          options.type = QueryTypes.BULKUPDATE;

 Line: 2964 -     * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.

 Line: 2965 -     * @param  {boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2966 -     * @param  {Transaction}  [options.transaction]           Transaction to run query under

 Line: 3000 -        // Run undelete query

 Line: 3033 -     * @param  {boolean}      [options.individualHooks=false] Run before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs. A select is needed, because the row data needs to be passed to the hooks

 Line: 3036 -     * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.

 Line: 3037 -     * @param  {boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 3038 -     * @param  {Transaction}  [options.transaction]           Transaction to run query under

 Line: 3060 -      options.type = QueryTypes.BULKUPDATE;

 Line: 3185 -              // Do not run original query but save each record individually

 Line: 3217 -        // Run query to update all rows

 Line: 3246 -     * Run a describe query on the table.

 Line: 3249 -     * @param {Object} [options] query options

 Line: 3301 -     * ``` SET column = column + X WHERE foo = 'bar' ``` query. To get the correct value after an increment into the Instance you should do a reload.

 Line: 3321 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 3322 -     * @param {Transaction} [options.transaction] Transaction to run query under

 Line: 3391 -     * ```sql SET column = column - X WHERE foo = 'bar'``` query. To get the correct value after a decrement into the Instance you should do a reload.

 Line: 3429 -     * Get an object representing the query for this instance, use with `options.where`

 Line: 3815 -     * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 3816 -     * @param {Transaction} [options.transaction] Transaction to run query under

 Line: 3968 -        let query = null;

 Line: 3973 -          query = 'insert';

 Line: 3980 -          query = 'update';

 Line: 4092 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 4183 -     * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 4184 -     * @param {Transaction} [options.transaction] Transaction to run query under

 Line: 4218 -        return this.constructor.QueryInterface.delete(this, this.constructor.getTableName(options), where, Object.assign({ type: QueryTypes.DELETE, limit: null }, options));

 Line: 4251 -     * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 4252 -     * @param {Transaction} [options.transaction] Transaction to run query under

 Line: 4289 -     * query. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a reload to get the new values.

 Line: 4307 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 4308 -     * @param {Transaction} [options.transaction] Transaction to run query under

 Line: 4330 -     * query. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a reload to get the new values.

 Line: 4347 -     * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 4348 -     * @param {Transaction} [options.transaction] Transaction to run query under

 Line: 4426 -     * @param {string}              [options.onUpdate='CASCADE'] Set `ON UPDATE`

 Line: 4452 -     * @param {string}              [options.onUpdate='CASCADE'] Sets `ON UPDATE`

 Line: 4481 -     * @param {string}          [options.onUpdate='CASCADE'] Sets 'ON UPDATE'

 Line: 4502 -     * @param {string}          [options.onUpdate='CASCADE'] Sets 'ON UPDATE'

</Result>
</report_mosca>

