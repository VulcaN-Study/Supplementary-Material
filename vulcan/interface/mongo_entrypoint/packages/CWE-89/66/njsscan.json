{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 1,
          "line": 5
        },
        "extra": {
          "line": "*.sublime-*",
          "message": "Lexical error: WIERD end of file in regexp"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 1,
          "line": 5
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 34,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) 2012 Felix Geisend\u00f6rfer (felix@debuggable.com) and contributors",
          "message": "Lexical error: unrecognised symbol, in token rule:\ufffd"
        },
        "path": "/src/License",
        "start": {
          "col": 33,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 11,
          "line": 2
        },
        "extra": {
          "line": "\tnode test/run.js",
          "message": "Syntax error"
        },
        "path": "/src/Makefile",
        "start": {
          "col": 7,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_sha1": {
      "files": [
        {
          "file_path": "/src/lib/protocol/Auth.js",
          "match_lines": [
            6,
            6
          ],
          "match_position": [
            14,
            38
          ],
          "match_string": "  var hash = Crypto.createHash('sha1');"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "SHA1 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_sqli_injection": {
      "files": [
        {
          "file_path": "/src/test/integration/connection/test-streaming-rows-quick-pause-resume.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-streaming-rows.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-timezones.js",
          "match_lines": [
            8,
            13
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '`(',\n\n  '`offset` varchar(10),',\n\n  '`dt` datetime',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-transaction-commit.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-procedure-with-single-select.js",
          "match_lines": [
            12,
            17
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE DEFINER=root@localhost PROCEDURE '+procedureName+'(IN '+fieldName+' INT)',\n\n  'BEGIN',\n\n  'SELECT '+fieldName+';',\n\n  'END'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-query-escaping.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`example` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-insert-results.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-load-data-infile.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-custom-typecast.js",
          "match_lines": [
            9,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '`(',\n\n  '`id` int(5),',\n\n  '`val` tinyint(1)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-destroy-while-streaming-rows.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-zerofill-results.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`num` int(5) UNSIGNED ZEROFILL,',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-multiple-statements-streaming.js",
          "match_lines": [
            5,
            17
          ],
          "match_position": [
            1,
            33
          ],
          "match_string": "var sql = [\n\n  'SELECT 1',\n\n  'USE ' + common.testDatabase,\n\n  'SELECT 2',\n\n  'invalid sql',\n\n  'SELECT 3',\n\n].join('; ');\n\n\n\nvar results = [];\n\nvar fields = [];\n\nvar hadErr   = false;\n\n\n\nvar query = connection.query(sql);"
        },
        {
          "file_path": "/src/test/integration/connection/test-multiple-statements-with-error.js",
          "match_lines": [
            5,
            20
          ],
          "match_position": [
            1,
            38
          ],
          "match_string": "var sql = [\n\n  'SELECT 1',\n\n  'invalid sql',\n\n  'SELECT 2',\n\n].join('; ');\n\n\n\nvar finishedQueryOne = false;\n\nconnection.query(sql, function(err, results, fields) {\n\n  assert.equal(finishedQueryOne, false);\n\n  finishedQueryOne = true;\n\n\n\n  assert.equal(err.code, 'ER_PARSE_ERROR');\n\n  assert.deepEqual(results, [[{1: 1}]]);\n\n\n\n  assert.equal(fields.length, 1);\n\n  assert.equal(fields[0][0].name, '1');"
        },
        {
          "file_path": "/src/test/integration/connection/test-multiple-statements.js",
          "match_lines": [
            5,
            17
          ],
          "match_position": [
            1,
            19
          ],
          "match_string": "var sql = [\n\n  'SELECT 1',\n\n  'USE ' + common.testDatabase,\n\n  'SELECT 2',\n\n].join('; ');\n\n\n\nvar results;\n\nvar fields;\n\nconnection.query(sql, function(err, _results, _fields) {\n\n  if (err) throw err;\n\n\n\n  results = _results;\n\n  fields = _fields;"
        },
        {
          "file_path": "/src/test/integration/connection/test-nested-tables-query.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-exception-safety.js",
          "match_lines": [
            46,
            46
          ],
          "match_position": [
            1,
            46
          ],
          "match_string": "connection.query('USE ' + common.testDatabase)"
        },
        {
          "file_path": "/src/test/integration/connection/test-bulk-insert.js",
          "match_lines": [
            9,
            15
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-change-user.js",
          "match_lines": [
            9,
            10
          ],
          "match_position": [
            1,
            59
          ],
          "match_string": "connection.query('CREATE DATABASE ' + common.testDatabase, function(err) {\n\n  if (err && err.code !== 'ER_DB_CREATE_EXISTS') throw err;"
        },
        {
          "file_path": "/src/test/integration/connection/test-connection-config-flags-affected-rows.js",
          "match_lines": [
            13,
            20
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TABLE `' + table + '` (',\n\n  '`a` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`b` int(11),',\n\n  '`c` int(11),',\n\n  'PRIMARY KEY (`a`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-transaction-rollback.js",
          "match_lines": [
            8,
            14
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`title` varchar(255),',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-type-cast-null-fields.js",
          "match_lines": [
            8,
            15
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,',\n\n  '`date` DATETIME NULL,',\n\n  '`number` INT NULL,',\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-type-casting.js",
          "match_lines": [
            69,
            77
          ],
          "match_position": [
            1,
            29
          ],
          "match_string": "var createTable = [\n\n  'CREATE TEMPORARY TABLE `' + table + '` (',\n\n  '`id` int(11) unsigned NOT NULL AUTO_INCREMENT,'\n\n  ].concat(schema).concat([\n\n  'PRIMARY KEY (`id`)',\n\n  ') ENGINE=InnoDB DEFAULT CHARSET=utf8'\n\n]).join('\\n');\n\n\n\nconnection.query(createTable);"
        },
        {
          "file_path": "/src/test/integration/connection/test-type-casting.js",
          "match_lines": [
            79,
            79
          ],
          "match_position": [
            1,
            70
          ],
          "match_string": "connection.query('INSERT INTO ' + table + ' SET' + inserts.join(',\\n'));"
        },
        {
          "file_path": "/src/test/integration/connection/test-procedure-with-multiple-selects.js",
          "match_lines": [
            14,
            20
          ],
          "match_position": [
            1,
            12
          ],
          "match_string": "connection.query([\n\n  'CREATE DEFINER=root@localhost PROCEDURE '+procedureName+'(IN '+fieldName0+' INT, IN '+fieldName1+' INT)',\n\n  'BEGIN',\n\n  'SELECT '+fieldName0+';',\n\n  'SELECT '+fieldName1+';',\n\n  'END'\n\n].join('\\n'));"
        },
        {
          "file_path": "/src/test/common.js",
          "match_lines": [
            19,
            47
          ],
          "match_position": [
            1,
            48
          ],
          "match_string": "common.testDatabase = process.env.MYSQL_DATABASE;\n\n\n\nvar Mysql = require('../');\n\n\n\ncommon.isTravis = function() {\n\n  return Boolean(process.env.CI);\n\n};\n\n\n\ncommon.createConnection = function(config) {\n\n  config = mergeTestConfig(config);\n\n  return Mysql.createConnection(config);\n\n};\n\n\n\ncommon.createPool = function(config) {\n\n  config = mergeTestConfig(config);\n\n  config.createConnection = common.createConnection;\n\n  return Mysql.createPool(config);\n\n};\n\n\n\ncommon.createFakeServer = function(options) {\n\n  return new FakeServer(_.extend({}, options));\n\n};\n\n\n\ncommon.useTestDb = function(connection) {\n\n  var query = connection.query('CREATE DATABASE ' + common.testDatabase, function(err) {\n\n    if (err && err.code !== 'ER_DB_CREATE_EXISTS') throw err;\n\n  });\n\n\n\n  connection.query('USE ' + common.testDatabase);"
        },
        {
          "file_path": "/src/test/common.js",
          "match_lines": [
            43,
            44
          ],
          "match_position": [
            15,
            61
          ],
          "match_string": "  var query = connection.query('CREATE DATABASE ' + common.testDatabase, function(err) {\n\n    if (err && err.code !== 'ER_DB_CREATE_EXISTS') throw err;"
        },
        {
          "file_path": "/src/test/common.js",
          "match_lines": [
            47,
            47
          ],
          "match_position": [
            3,
            48
          ],
          "match_string": "  connection.query('USE ' + common.testDatabase);"
        }
      ],
      "metadata": {
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "description": "Untrusted input concatinated with raw SQL query can result in SQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
