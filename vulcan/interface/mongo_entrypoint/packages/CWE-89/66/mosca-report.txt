<report_mosca>
 <Path>/src/lib/Connection.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 29 -      // query(options, cb)

 Line: 33 -      // query(sql, cb)

 Line: 38 -      // query(sql, values, cb)

 Line: 89 -    var query = Connection.createQuery(sql, values, cb);

 Line: 92 -      query.typeCast = this.config.typeCast;

 Line: 95 -    query.sql = this.format(query.sql, query.values || []);

 Line: 96 -    delete query.values;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/protocol/constants/server_status.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -  exports.SERVER_MORE_RESULTS_EXISTS      = 8;    /* Multi query - next query exists */

 Line: 16 -    read-only non-scrollable cursor for a query. This flag comes

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/protocol/constants/errors.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -  exports[1009] = 'ER_DB_DROP_DELETE';

 Line: 12 -  exports[1011] = 'ER_CANT_DELETE_FILE';

 Line: 58 -  exports[1057] = 'ER_WRONG_SUM_SELECT';

 Line: 93 -  exports[1092] = 'ER_INSERT_INFO';

 Line: 94 -  exports[1093] = 'ER_UPDATE_TABLE_USED';

 Line: 105 -  exports[1104] = 'ER_TOO_BIG_SELECT';

 Line: 135 -  exports[1134] = 'ER_UPDATE_INFO';

 Line: 155 -  exports[1154] = 'ER_NET_READ_ERROR_FROM_PIPE';

 Line: 166 -  exports[1165] = 'ER_DELAYED_INSERT_TABLE_LOCKED';

 Line: 176 -  exports[1175] = 'ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE';

 Line: 213 -  exports[1212] = 'ER_UNION_TABLES_IN_DIFFERENT_DIR';

 Line: 223 -  exports[1222] = 'ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT';

 Line: 224 -  exports[1223] = 'ER_CANT_UPDATE_WITH_READLOCK';

 Line: 250 -  exports[1249] = 'ER_SELECT_REDUCED';

 Line: 295 -  exports[1294] = 'ER_INVALID_ON_UPDATE';

 Line: 313 -  exports[1312] = 'ER_SP_BADSELECT';

 Line: 316 -  exports[1315] = 'ER_UPDATE_LOG_DEPRECATED_IGNORED';

 Line: 317 -  exports[1316] = 'ER_UPDATE_LOG_DEPRECATED_TRANSLATED';

 Line: 324 -  exports[1323] = 'ER_SP_BAD_CURSOR_SELECT';

 Line: 336 -  exports[1335] = 'ER_SP_SUBSELECT_NYI';

 Line: 349 -  exports[1348] = 'ER_NONUPDATEABLE_COLUMN';

 Line: 350 -  exports[1349] = 'ER_VIEW_SELECT_DERIVED';

 Line: 351 -  exports[1350] = 'ER_VIEW_SELECT_CLAUSE';

 Line: 352 -  exports[1351] = 'ER_VIEW_SELECT_VARIABLE';

 Line: 353 -  exports[1352] = 'ER_VIEW_SELECT_TMPTABLE';

 Line: 394 -  exports[1393] = 'ER_VIEW_MULTIUPDATE';

 Line: 395 -  exports[1394] = 'ER_VIEW_NO_INSERT_FIELD_LIST';

 Line: 396 -  exports[1395] = 'ER_VIEW_DELETE_MERGE_VIEW';

 Line: 410 -  exports[1409] = 'ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR';

 Line: 443 -  exports[1442] = 'ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG';

 Line: 444 -  exports[1443] = 'ER_VIEW_PREVENT_UPDATE';

 Line: 472 -  exports[1471] = 'ER_NON_INSERTABLE_TABLE';

 Line: 474 -  exports[1473] = 'ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT';

 Line: 549 -  exports[1548] = 'ER_CANNOT_LOAD_FROM_TABLE';

 Line: 550 -  exports[1549] = 'ER_EVENT_CANNOT_DELETE';

 Line: 559 -  exports[1558] = 'ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE';

 Line: 620 -  exports[1619] = 'WARN_PLUGIN_DELETE_BUILTIN';

 Line: 670 -  exports[1669] = 'ER_BINLOG_UNSAFE_INSERT_DELAYED';

 Line: 697 -  exports[1696] = 'ER_FAILED_READ_FROM_PAR_FILE';

 Line: 707 -  exports[1706] = 'ER_MULTI_UPDATE_KEY_CONFLICT';

 Line: 715 -  exports[1714] = 'ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT';

 Line: 716 -  exports[1715] = 'ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE';

 Line: 717 -  exports[1716] = 'ER_BINLOG_UNSAFE_REPLACE_SELECT';

 Line: 718 -  exports[1717] = 'ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT';

 Line: 719 -  exports[1718] = 'ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT';

 Line: 720 -  exports[1719] = 'ER_BINLOG_UNSAFE_UPDATE_IGNORE';

 Line: 723 -  exports[1722] = 'ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT';

 Line: 724 -  exports[1723] = 'ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC';
</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/protocol/constants/field_flags.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -  exports.ON_UPDATE_NOW_FLAG    = 8192; /* Field is set to NOW on UPDATE */

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/unit/test-ConnectionConfig.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -    'allows additional options via url query': function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-connection-config-flags-affected-rows.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -  connection.query('INSERT INTO `' + table + '` SET ?', {a: 1, b: 1, c: 1});

 Line: 23 -  connection.query('INSERT INTO `' + table + '` (a, b, c) VALUES (1, 2, 3) ON DUPLICATE KEY UPDATE c = 1', function(err, info) {

 Line: 28 -  connection.query('INSERT INTO `' + table + '` (a, b, c) VALUES (2, 3, 4) ON DUPLICATE KEY UPDATE c = 1', function(err, info) {

 Line: 33 -  connection.query('INSERT INTO `' + table + '` (a, b, c) VALUES (1, 2, 3) ON DUPLICATE KEY UPDATE c = 2', function(err, info) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-streaming-rows-quick-pause-resume.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 22 -    connection.query('INSERT INTO ' + table + ' SET ?', row);

 Line: 25 -  var query  = connection.query('SELECT * FROM ' + table);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-multiple-statements-with-error.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -    'SELECT 1',

 Line: 7 -    'SELECT 2',

 Line: 23 -  connection.query('SELECT 3', function(err, results) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-procedure-with-single-select.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 14 -    'SELECT '+fieldName+';',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-custom-typecast.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -  connection.query("INSERT INTO " + table + " VALUES (1, 0), (2, 1), (3, NULL)");

 Line: 19 -    sql: "SELECT * FROM " + table,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-fatal-auth-error-without-handlers.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -  connection.query('SELECT 1');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-server-unexpected-disconnect.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 10 -  var queryErr;

 Line: 16 -    connection.query('SELECT 1', function(err) {

 Line: 18 -      queryErr = err;

 Line: 34 -    assert.strictEqual(endErr, queryErr);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-bulk-insert.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -  connection.query('INSERT INTO ' + table + ' (title) VALUES ? ', [items], function(err, _result) {

 Line: 28 -    connection.query('SELECT title FROM '+table+';', [], function(err, _items) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-fatal-auth-error-going-to-all-callbacks.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -  connection.query('SELECT 1', function(err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-fatal-network-error-going-to-all-callbacks.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -  connection.query('SELECT 1', function(err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-destroy-while-streaming-rows.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 22 -    connection.query('INSERT INTO ' + table + ' SET ?', row);

 Line: 27 -  var query     = connection.query('SELECT * FROM ' + table);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-exception-safety.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -  connection.query('SELECT 1', function(err) {

 Line: 29 -  connection.query('SELECT 1')

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-query-after-destroy.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    connection.query('SELECT 1', function(_err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-multiple-statements-streaming.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -    'SELECT 1',

 Line: 7 -    'SELECT 2',

 Line: 9 -    'SELECT 3',

 Line: 16 -  var query = connection.query(sql);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-send-and-receive-large-packets.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -    connection.query('SHOW VARIABLES WHERE Variable_name = ?', ['max_allowed_packet'], function(err, rows) {

 Line: 23 -    // Our test generates a SQL query a few bytes larger than 16 MB, but lets

 Line: 53 -  var sql    = 'SELECT ? as bigField';

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-type-cast-null-fields.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -  connection.query('INSERT INTO ' + table + ' SET ?', {

 Line: 22 -  connection.query('SELECT * FROM ' + table, function(err, _results) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-query-after-end.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 13 -  connection.query('SELECT 1', function(_err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-timezones.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -  connection.query('DELETE FROM ' + table);

 Line: 40 -    connection.query('INSERT INTO ' + table + ' SET ?', { offset: offset, dt: dt });

 Line: 49 -      sql: 'SELECT * FROM ' + table + ' WHERE offset = \'' + offset + '\'',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-streaming-rows.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 45 -      setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-streaming-rows.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 22 -    connection.query('INSERT INTO ' + table + ' SET ?', row);

 Line: 26 -  var query  = connection.query('SELECT * FROM ' + table);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-transaction-rollback.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -    connection.query('INSERT INTO ' + table + ' SET ?', row);

 Line: 30 -  var query = connection.query('SELECT * FROM ' + table, function(err, _rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-transaction-commit.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -    connection.query('INSERT INTO ' + table + ' SET ?', row);

 Line: 30 -  var query = connection.query('SELECT * FROM ' + table, function(err, _rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-type-casting.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 78 -  connection.query('INSERT INTO ' + table + ' SET' + inserts.join(',\n'));

 Line: 81 -  connection.query('SELECT * FROM type_casting', function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-custom-query-format.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 6 -    if (!values) return query;

 Line: 7 -    return query.replace(/\:(\w+)/g, function (txt, key) {

 Line: 15 -  assert.equal(connection.format("SELECT :a1, :a2", { a1: 1, a2: 'two' }), "SELECT 1, 'two'");

 Line: 16 -  assert.equal(connection.format("SELECT :a1", []), "SELECT :a1");

 Line: 17 -  assert.equal(connection.format("SELECT :a1"), "SELECT :a1");

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-normal-query-error-without-callback.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -  var query = connection.query('INVALID SQL');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-query-after-end-without-callback.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -  connection.query('SELECT 1');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-drain-event.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -  connection.query("SELECT 1", function(err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-procedure-with-multiple-selects.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -    'SELECT '+fieldName0+';',

 Line: 17 -    'SELECT '+fieldName1+';',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-load-data-infile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 28 -  connection.query('SELECT * FROM ' + table, function(err, _rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-implicit-connect.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -  connection.query('SELECT 1', function(err, _rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-select-empty-string.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -  connection.query('SELECT ""', function(err, _rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-query-escaping.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -  connection.query('INSERT INTO ' + table + ' SET id = ?, example = ?', [1, 'array escape']);

 Line: 16 -  connection.query('INSERT INTO ' + table + ' SET ?', {

 Line: 22 -  connection.query('SELECT * FROM escape_test', function(err, _rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-type-cast-query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    sql      : "SELECT NOW() as date, POINT(1.2,-3.4) as point",

 Line: 13 -  var query = connection.query(options, function(err, _rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-select-1.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -  connection.query('SELECT 1', function(err, _rows, _fields) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-nested-tables-query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -  connection.query('INSERT INTO ' + table + ' SET ?', {title: 'test'});

 Line: 19 -    sql: 'SELECT * FROM ' + table

 Line: 23 -    sql: 'SELECT * FROM ' + table

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-insert-results.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -  connection.query('INSERT INTO ' + table + ' SET ?', {title: 'test'}, function(err, _result) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-zerofill-results.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 19 -    connection.query('INSERT INTO ' + table + ' SET ?', {

 Line: 26 -  connection.query('SELECT * FROM ' + table, function (err, _results) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-fatal-network-error-without-handlers.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -  connection.query('SELECT 1');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-multiple-statements.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -    'SELECT 1',

 Line: 7 -    'SELECT 2',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/integration/connection/test-fatal-query-error-without-callback.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 5 -  var query = connection.query('SELECT 1');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/test/common.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 42 -    var query = connection.query('CREATE DATABASE ' + common.testDatabase, function(err) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/benchmark/select-100k-blog-rows.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 22 -    client.query('SELECT * FROM posts', function(err, rows) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/benchmark/parse-100k-blog-rows.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 95 -    protocol.query({typeCast: false, sql: 'SELECT ...'});

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/benchmark/analyze.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 93 -  setInterval(report, 1000);

</Result>
</report_mosca>

