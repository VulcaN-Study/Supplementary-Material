<report_mosca>
 <Path>/src/lib/errors/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 21 -   * Scope Error. Thrown when the sequelize cannot query the specified scope.

 Line: 135 -   * Thrown when a database query times out because of a deadlock

 Line: 516 -   * Thrown when a query is passed invalid options (see message for details)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/postgres/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -      return "SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';";

 Line: 55 -          // Move comment to a separate query

 Line: 98 -      return "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';";

 Line: 105 -      return 'SELECT pk.constraint_type as "Constraint", c.column_name as "Field", ' +

 Line: 108 -                '(SELECT array_agg(e.enumlabel) ' +

 Line: 109 -                'FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid ' +

 Line: 110 -                'WHERE t.typname=c.udt_name) AS "special" ' +

 Line: 111 -              'FROM information_schema.columns c ' +

 Line: 112 -              'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +

 Line: 114 -                'FROM information_schema.TABLE_CONSTRAINTS tc ' +

 Line: 122 -        `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;

 Line: 193 -     * Generates an SQL query that extract JSON property of given path.

 Line: 197 -     * @returns {String}                       The generated sql query

 Line: 246 -      let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;

 Line: 249 -        query = this.pgEnum(table, key, dataType) + query;

 Line: 252 -      return query;

 Line: 262 -      const query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;';

 Line: 272 -            query: this.quoteIdentifier(attributeName) + ' SET NOT NULL'

 Line: 279 -            query: this.quoteIdentifier(attributeName) + ' DROP NOT NULL'

 Line: 286 -            query: this.quoteIdentifier(attributeName) + ' SET DEFAULT ' + definition.match(/DEFAULT ([^;]+)/)[1]

 Line: 293 -            query: this.quoteIdentifier(attributeName) + ' DROP DEFAULT'

 Line: 308 -            query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_unique_idx') + ' UNIQUE (' + this.quoteIdentifier(attributeName) + ')'

 Line: 316 -            query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_foreign_idx') + ' FOREIGN KEY (' + this.quoteIdentifier(attributeName) + ') ' + definition

 Line: 321 -            query: this.quoteIdentifier(attributeName) + ' TYPE ' + definition

 Line: 351 -      return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;

 Line: 381 -      let query;

 Line: 388 -        query = 'TRUNCATE ' + tableName;

 Line: 391 -          query += ' RESTART IDENTITY';

 Line: 395 -          query += ' CASCADE';

 Line: 398 -        return query;

 Line: 421 -        query = 'DELETE FROM <%= table %> WHERE <%= primaryKeys %> IN (SELECT <%= primaryKeysSelection %> FROM <%= table %><%= where %><%= limit %>)';

 Line: 423 -        query = 'DELETE FROM <%= table %><%= where %>';

 Line: 427 -        replacements.where = ' WHERE ' + replacements.where;

 Line: 443 -      return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +

 Line: 445 -        `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +

 Line: 446 -        'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +

 Line: 454 -        'SELECT constraint_catalog AS "constraintCatalog",',

 Line: 464 -        `WHERE table_name='${tableName}';`

 Line: 562 -          sql += ' ON DELETE ' + attribute.onDelete.toUpperCase();

 Line: 566 -          sql += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();

 Line: 730 -          'insert': 'INSERT',

 Line: 731 -          'update': 'UPDATE',

 Line: 732 -          'delete': 'DELETE',

 Line: 741 -        if (eventSpec === 'UPDATE') {

 Line: 773 -      return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +

 Line: 776 -        `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;

 Line: 876 -     * Generates an SQL query that returns all foreign keys of a table.

 Line: 879 -     * @return {String}            The generated sql query.

 Line: 883 -      return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +

 Line: 884 -        `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;

 Line: 892 -      return 'SELECT ' +

 Line: 904 -        'FROM information_schema.table_constraints AS tc ' +

 Line: 912 -     * Generates an SQL query that returns all foreign keys details of a table.

 Line: 921 -        `WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'` +

 Line: 930 -        `WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'` +

 Line: 935 -     * Generates an SQL query that removes a foreign key from a table.

 Line: 939 -     * @return {String}            The generated sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/postgres/connection-manager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 166 -        // If we didn't ever hear from the client.connect() callback the connection timeout, node-postgres does not treat this as an error since no active query was ever emitted

 Line: 181 -        let query = '';

 Line: 187 -          query += 'SET standard_conforming_strings=on;';

 Line: 193 -            query += 'SET client_min_messages TO warning; SET TIME ZONE \'' + this.sequelize.options.timezone + '\';';

 Line: 195 -            query += 'SET client_min_messages TO warning; SET TIME ZONE INTERVAL \'' + this.sequelize.options.timezone + '\' HOUR TO MINUTE;';

 Line: 237 -        "SELECT typname, typtype, oid, typarray FROM pg_type WHERE (typtype = 'b' AND typname IN ('hstore', 'geometry', 'geography')) OR (typtype = 'e')"

 Line: 243 -        // the SELECT query result.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/postgres/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -     * rewrite query with parameters

 Line: 62 -      const query = parameters && parameters.length

 Line: 66 -      //do we need benchmark for this query execution

 Line: 69 -      let queryBegin;

 Line: 71 -        queryBegin = Date.now();

 Line: 78 -      return query.catch(err => {

 Line: 91 -            this.sequelize.log('Executed (' + (this.client.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);

 Line: 94 -          return queryResult;

 Line: 98 -            ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])

 Line: 99 -            : queryResult.rows;

 Line: 101 -            ? queryResult.reduce(

 Line: 105 -            : queryResult.rowCount;

 Line: 107 -          const isTableNameQuery = sql.indexOf('SELECT table_name FROM information_schema.tables') === 0;

 Line: 108 -          const isRelNameQuery = sql.indexOf('SELECT relname FROM pg_class WHERE oid IN') === 0;

 Line: 169 -              if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \((.+)\) REFERENCES (.+)\((.+)\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {

 Line: 176 -                  if (/(UPDATE|DELETE)/.test(defParts[i])) {

 Line: 242 -          } else if (QueryTypes.BULKUPDATE === this.options.type) {

 Line: 247 -          } else if (QueryTypes.BULKDELETE === this.options.type) {

 Line: 269 -            return [rows, queryResult];

 Line: 367 -      return /SELECT conname as constraint_name, pg_catalog\.pg_get_constraintdef\(r\.oid, true\) as condef FROM pg_catalog\.pg_constraint r WHERE r\.conrelid = \(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\) AND r\.contype = 'f' ORDER BY 1;/.test(this.sql);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mssql/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -        'IF NOT EXISTS (SELECT schema_name',

 Line: 25 -        'FROM information_schema.schemata',

 Line: 26 -        'WHERE schema_name =', wrapSingleQuote(schema), ')',

 Line: 39 -        'IF EXISTS (SELECT schema_name',

 Line: 40 -        'FROM information_schema.schemata',

 Line: 41 -        'WHERE schema_name =', quotedSchema, ')',

 Line: 47 -        'INSERT INTO @cascade ( ms_sql )',

 Line: 48 -        "SELECT CASE WHEN o.type IN ('F','PK')",

 Line: 51 -        'FROM sys.objects o',

 Line: 54 -        "WHERE o.type IN ('F', 'PK', 'U') AND s.name = ", quotedSchema,

 Line: 56 -        'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',

 Line: 61 -        'DELETE FROM @cascade WHERE id = @id;',

 Line: 62 -        'SELECT @id = NULL, @ms_sql = NULL;',

 Line: 63 -        'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',

 Line: 72 -        'SELECT "name" as "schema_name" FROM sys.schemas as s',

 Line: 73 -        'WHERE "s"."name" NOT IN (',

 Line: 84 -        "SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'"

 Line: 89 -      const query = "IF OBJECT_ID('<%= table %>', 'U') IS NULL CREATE TABLE <%= table %> (<%= attributes %>)",

 Line: 153 -        'SELECT',

 Line: 161 -        'FROM',

 Line: 165 -        'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',

 Line: 167 -        'FROM information_schema.TABLE_CONSTRAINTS tc ',

 Line: 175 -        'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)

 Line: 186 -      const query = 'EXEC sp_rename <%= before %>, <%= after %>;';

 Line: 194 -      return 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES;';

 Line: 198 -      const query = "IF OBJECT_ID('<%= table %>', 'U') IS NOT NULL DROP TABLE <%= table %>";

 Line: 211 -      const query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;',

 Line: 226 -      const query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';

 Line: 234 -      const query = 'ALTER TABLE <%= tableName %> <%= query %>;';

 Line: 265 -        query: finalQuery

 Line: 270 -      const query = "EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';",

 Line: 283 -      const query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;',

 Line: 284 -        emptyQuery = 'INSERT INTO <%= table %><%= output %> DEFAULT VALUES',

 Line: 293 -        outputFragment = ' OUTPUT INSERTED.*';

 Line: 345 -            'SET IDENTITY_INSERT', this.quoteTable(tableName), 'ON;',

 Line: 347 -            'SET IDENTITY_INSERT', this.quoteTable(tableName), 'OFF;'

 Line: 359 -        const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;

 Line: 360 -        sql = sql.replace('UPDATE', updateArgs);

 Line: 406 -      //IDENTITY_INSERT Condition

 Line: 411 -           * IDENTITY_INSERT Column Cannot be updated, only inserted

 Line: 444 -        throw new Error('Primary Key or Unique key should be passed to upsert query');

 Line: 459 -      // Remove the IDENTITY_INSERT Column from update

 Line: 474 -      let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;

 Line: 475 -      query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;

 Line: 477 -        query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;

 Line: 479 -      return query;

 Line: 487 -        // Truncate does not allow LIMIT and WHERE

 Line: 493 -      const query = 'DELETE<%= limit %> FROM <%= table %><%= where %>; ' +

 Line: 494 -                  'SELECT @@ROWCOUNT AS AFFECTEDROWS;';

 Line: 511 -        replacements.where = ' WHERE ' + replacements.where;

 Line: 556 -            + 'we will remove it but we recommend restructuring your query');

 Line: 611 -          template += ' ON DELETE ' + attribute.onDelete.toUpperCase();

 Line: 615 -          template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();

 Line: 689 -      return 'SELECT ' +

 Line: 702 -        'FROM SYS.FOREIGN_KEY_COLUMNS FKC ' +

 Line: 711 -     * Generates an SQL query that returns all foreign keys details of a table.

 Line: 719 -        ' WHERE TB.NAME =' + wrapSingleQuote(tableName);

 Line: 730 -        ' WHERE TB.NAME =' + wrapSingleQuote(tableName) +

 Line: 743 -        'SELECT K.TABLE_NAME AS tableName,',

 Line: 746 -        'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',

 Line: 752 -        'WHERE C.CONSTRAINT_TYPE = \'PRIMARY KEY\'',

 Line: 766 -      const sql = 'SELECT name FROM SYS.DEFAULT_CONSTRAINTS ' +

 Line: 767 -        "WHERE PARENT_OBJECT_ID = OBJECT_ID('<%= table %>', 'U') " +

 Line: 768 -        "AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('<%= column %>') " +

 Line: 822 -      let mainFragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;

 Line: 842 -          const whereFragment = where ? ' WHERE ' + where : '';

 Line: 848 -           * 1. The outermost query selects all items from the inner query block.

 Line: 850 -           *    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.

 Line: 851 -           * 2. The next query handles the LIMIT and OFFSET behavior by getting

 Line: 852 -           *    the TOP N rows of the query where the row number is > OFFSET

 Line: 853 -           * 3. The innermost query is the actual set we want information from

 Line: 855 -          const fragment = 'SELECT TOP 100 PERCENT ' + attributes.join(', ') + ' FROM ' +

 Line: 856 -                          '(SELECT ' + topFragment + '*' +

 Line: 857 -                            ' FROM (SELECT ROW_NUMBER() OVER (ORDER BY ' + orders.mainQueryOrder.join(', ') + ') as row_num, * ' +

 Line: 858 -                              ' FROM ' + tables + ' AS ' + tmpTable + whereFragment + ')' +

 Line: 859 -                            ' AS ' + tmpTable + ' WHERE row_num > ' + offset + ')' +

 Line: 863 -          mainFragment = 'SELECT ' + topFragment + attributes.join(', ') + ' FROM ' + tables;

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mssql/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -    'LIMIT ON UPDATE': true,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mssql/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 49 -      //do we need benchmark for this query execution

 Line: 51 -      let queryBegin;

 Line: 53 -        queryBegin = Date.now();

 Line: 101 -              this.sequelize.log('Executed (' + (this.connection.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);

 Line: 159 -     * High level function that handles the results of a query execution.

 Line: 163 -     *  query.formatResults([

 Line: 172 -     * @param {Array} data - The result of the query execution.

 Line: 182 -            // NOTE: super contrived. This just passes the newly added query-interface

 Line: 296 -        err.message.match(/The DELETE statement conflicted with the REFERENCE constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./) ||

 Line: 297 -        err.message.match(/The INSERT statement conflicted with the FOREIGN KEY constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./) ||

 Line: 299 -        err.message.match(/The UPDATE statement conflicted with the FOREIGN KEY constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 26 -      return 'SELECT VERSION() as `version`';

 Line: 36 -      const query = 'CREATE TABLE IF NOT EXISTS <%= table %> (<%= attributes%>) ENGINE=<%= engine %><%= comment %><%= charset %><%= collation %><%= initialAutoIncrement %><%= rowFormat %>';

 Line: 235 -      options.onDuplicate = 'UPDATE ';

 Line: 250 -        // Truncate does not allow LIMIT and WHERE

 Line: 265 -      let query = 'DELETE FROM ' + table;

 Line: 266 -      if (where) query += ' WHERE ' + where;

 Line: 267 -      query += limit;

 Line: 269 -      return query;

 Line: 273 -      return 'SHOW INDEX FROM ' + this.quoteTable(tableName) + ((options || {}).database ? ' FROM `' + options.database + '`' : '');

 Line: 281 -        'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',

 Line: 288 -        `WHERE table_name='${tableName}'`

 Line: 368 -          template += ' ON DELETE ' + attribute.onDelete.toUpperCase();

 Line: 372 -          template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();

 Line: 463 -     * Generates an SQL query that extract JSON property of given path.

 Line: 467 -     * @returns {String}                       The generated sql query

 Line: 505 -     * Generates an SQL query that returns all foreign keys of a table.

 Line: 509 -     * @return {String}            The generated sql query.

 Line: 513 -      return 'SELECT ' + this._getForeignKeysQueryFields() + ' FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = \'' + tableName + /* jshint ignore: line */

 Line: 518 -     * Generates an SQL query that returns the foreign key constraint of a given column.

 Line: 522 -     * @return {String}            The generated sql query.

 Line: 529 -      return 'SELECT ' + this._getForeignKeysQueryFields()

 Line: 530 -        + ' FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE'

 Line: 531 -        + ' WHERE (REFERENCED_TABLE_NAME = ' + wrapSingleQuote(tableName)

 Line: 542 -     * Generates an SQL query that removes a foreign key from a table.

 Line: 546 -     * @return {String}            The generated sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 24 -    'LIMIT ON UPDATE': true,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/query-interface.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 61 -        let query;

 Line: 64 -            query = this.QueryGenerator.dropForeignKeyQuery(tableName, constraintName);

 Line: 66 -            query = this.QueryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/mysql/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -      //do we need benchmark for this query execution

 Line: 47 -      let queryBegin;

 Line: 49 -        queryBegin = Date.now();

 Line: 61 -            this.sequelize.log('Executed (' + (this.connection.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);

 Line: 91 -     * High level function that handles the results of a query execution.

 Line: 95 -     *  query.formatResults([

 Line: 104 -     * @param {Array} data - The result of the query execution.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 83 -      let query;

 Line: 84 -      let valueQuery = '<%= tmpTable %>INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>)<%= output %> VALUES (<%= values %>)<%= onConflictDoNothing %>';

 Line: 85 -      let emptyQuery = '<%= tmpTable %>INSERT<%= ignoreDuplicates %> INTO <%= table %><%= output %><%= onConflictDoNothing %>';

 Line: 110 -          outputFragment = ' OUTPUT INSERTED.*';

 Line: 128 -                outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);

 Line: 156 -            ' LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc()';

 Line: 159 -          valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc() RETURNS SETOF <%= table %> AS $body$ BEGIN RETURN QUERY ' + valueQuery + '; EXCEPTION ' + options.exception + ' END; $body$ LANGUAGE plpgsql; SELECT * FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();';

 Line: 188 -            values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }));

 Line: 203 -      query = (replacements.attributes.length ? valueQuery : emptyQuery) + ';';

 Line: 205 -        query = [

 Line: 206 -          'SET IDENTITY_INSERT', this.quoteTable(table), 'ON;',

 Line: 207 -          query,

 Line: 208 -          'SET IDENTITY_INSERT', this.quoteTable(table), 'OFF;'

 Line: 224 -      const query = 'INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>) VALUES <%= tuples %><%= onDuplicateKeyUpdate %><%= onConflictDoNothing %><%= returning %>;';

 Line: 253 -          return this.escape(fieldValueHash[key], fieldMappedAttributes[key], { context: 'INSERT' });

 Line: 260 -        onDuplicateKeyUpdate = ' ON DUPLICATE KEY UPDATE ' + options.updateOnDuplicate.map(attr => {

 Line: 280 -      Returns an update query.

 Line: 298 -      let query = '<%= tmpTable %>UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';

 Line: 303 -      if (this._dialect.supports['LIMIT ON UPDATE'] && options.limit) {

 Line: 305 -          query += ' LIMIT ' + this.escape(options.limit) + ' ';

 Line: 312 -          outputFragment = ' OUTPUT INSERTED.*';

 Line: 329 -                outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);

 Line: 341 -            query += selectFromTmp;

 Line: 346 -          query += ' RETURNING *';

 Line: 368 -        values.push(this.quoteIdentifier(key) + '=' + this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }));

 Line: 387 -      Returns an update query.

 Line: 405 -      let query = 'UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';

 Line: 411 -          query += ' RETURNING *';

 Line: 413 -          outputFragment = ' OUTPUT INSERTED.*';

 Line: 455 -      Returns an add index query.

 Line: 658 -            constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;

 Line: 661 -            constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;

 Line: 939 -      Returns a query for selecting elements in the table <tableName>.

 Line: 975 -      let query;

 Line: 1052 -                duplicating: false, // The UNION'ed query may contain duplicates, but each sub-query cannot

 Line: 1069 -              // We need to make sure the order by attributes are available to the parent query

 Line: 1090 -            // Ordering is handled by the subqueries, so ordering the UNION'ed result is not needed

 Line: 1096 -          // Caching the base query and splicing the where part into it is consistently > twice

 Line: 1098 -          const baseQuery = 'SELECT * FROM (' + this.selectQuery(

 Line: 1130 -              this._dialect.supports['UNION ALL'] ? ' UNION ALL ' : ' UNION '

 Line: 1140 -      // Add WHERE to sub or main query

 Line: 1145 -            subQueryItems.push(' WHERE ' + options.where);

 Line: 1147 -            mainQueryItems.push(' WHERE ' + options.where);

 Line: 1148 -            // Walk the main query to update all selects

 Line: 1150 -              if (value.match(/^SELECT/)) {

 Line: 1158 -      // Add GROUP BY to sub or main query

 Line: 1168 -      // Add HAVING to sub or main query

 Line: 1180 -      // Add ORDER to sub or main query

 Line: 1191 -      // Add LIMIT, OFFSET to sub or main query

 Line: 1202 -        query = `SELECT ${attributes.main.join(', ')} FROM (${subQueryItems.join('')}) AS ${mainTable.as}${mainJoinQueries.join('')}${mainQueryItems.join('')}`;

 Line: 1204 -        query = mainQueryItems.join('');

 Line: 1212 -        if (this._dialect.supports.lockKey && (lock === 'KEY SHARE' || lock === 'NO KEY UPDATE')) {

 Line: 1213 -          query += ' FOR ' + lock;

 Line: 1215 -          query += ' ' + this._dialect.supports.forShare;

 Line: 1217 -          query += ' FOR UPDATE';

 Line: 1220 -          query += ' OF ' + this.quoteTable(options.lock.of.name);

 Line: 1362 -          // if the child is a sub query we just give it to the

 Line: 1591 -     * For a given include a query is generated that contains all the way from the subQuery

 Line: 1606 -      let query;

 Line: 1629 -        query = this.selectQuery(topInclude.through.model.getTableName(), {

 Line: 1663 -        query = this.selectQuery(topInclude.model.getTableName(), {

 Line: 1685 -        query.replace(/\;$/, ''),

 Line: 1755 -      let fragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;

 Line: 1765 -     * Returns a query that starts a transaction.

 Line: 1769 -     * @return {String}          The generated sql query.

 Line: 1777 -      // no query when value is not explicitly set

 Line: 1786 -     * Returns a query that sets the transaction isolation level.

 Line: 1790 -     * @return {String}         The generated sql query.

 Line: 1806 -     * Returns a query that starts a transaction.

 Line: 1810 -     * @return {String}         The generated sql query.

 Line: 1823 -     * Returns a query that defers the constraints. Only works for postgres.

 Line: 1827 -     * @return {String}         The generated sql query.

 Line: 1837 -     * Returns a query that commits a transaction.

 Line: 1840 -     * @return {String}         The generated sql query.

 Line: 1852 -     * Returns a query that rollbacks a transaction.

 Line: 1856 -     * @return {String}         The generated sql query.

 Line: 1873 -     * @return {String}         The generated sql query.

 Line: 1967 -      const query = this.whereItemsQuery(where, options);

 Line: 1968 -      if (query && query.length) {

 Line: 1969 -        return 'WHERE '+query;

 Line: 1985 -        throw new Error('Support for `{where: \'raw query\'}` has been removed.');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -    'LIMIT ON UPDATE': false,

 Line: 11 -    'UNION': true,

 Line: 12 -    'UNION ALL': true,

 Line: 13 -    /* What is the dialect's keyword for INSERT IGNORE */

 Line: 32 -    /* The dialect's words for INSERT IGNORE */

 Line: 34 -    /* Does the dialect support ON DUPLICATE KEY UPDATE */

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/connection-manager.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 150 -        acquire: (priority, queryType, useMaster) => {

 Line: 152 -          if (queryType === 'SELECT' && !useMaster) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/abstract/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 11 -     * rewrite query with parameters

 Line: 15 -     *   query.formatBindParameters('select $1 as foo', ['fooval']);

 Line: 17 -     *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });

 Line: 91 -     * Execute the passed sql query.

 Line: 95 -     *     query.run('SELECT 1')

 Line: 97 -     * @param {String} sql - The SQL query which should be executed.

 Line: 118 -     * Get the attributes of an insert query, which contains the just inserted id.

 Line: 128 -     * Iterate over all known tables and search their names inside the sql query.

 Line: 131 -     * @param  {String} attribute An attribute of a SQL query. (?)

 Line: 182 -      if (this.options.type === QueryTypes.INSERT) {

 Line: 186 -      // is insert query if sql contains insert into

 Line: 189 -      // is insert query if no results are passed or if the result has the inserted id

 Line: 192 -      // is insert query if no metadata are passed or if the metadata has the inserted id

 Line: 232 -      return this.options.type === QueryTypes.SELECT;

 Line: 236 -      return this.options.type === QueryTypes.BULKUPDATE;

 Line: 240 -      return this.options.type === QueryTypes.BULKDELETE;

 Line: 248 -      return this.options.type === QueryTypes.UPDATE;

 Line: 330 -     * The function takes the result of the query execution and groups

 Line: 608 -              // If checkExisting is false it's because there's only 1:1 associations in this query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/sqlite/query-generator.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 15 -      return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";

 Line: 19 -      return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";

 Line: 23 -      return 'SELECT sqlite_version() as `version`';

 Line: 141 -     * Generates an SQL query that extract JSON property of given path.

 Line: 145 -     * @returns {String}                       The generated sql query

 Line: 219 -      return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";

 Line: 250 -        values.push(this.quoteIdentifier(key) + '=' + this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }));

 Line: 254 -        return `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, options)} LIMIT ${this.escape(options.limit)})`;

 Line: 256 -        return `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, options)}`;

 Line: 265 -        // Truncate does not allow LIMIT and WHERE

 Line: 266 -        return `DELETE FROM ${this.quoteTable(tableName)}`;

 Line: 275 -        whereClause = `WHERE ${whereClause}`;

 Line: 279 -        whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;

 Line: 282 -      return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;

 Line: 331 -              sql += ' ON DELETE ' + dataType.onDelete.toUpperCase();

 Line: 335 -              sql += ' ON UPDATE ' + dataType.onUpdate.toUpperCase();

 Line: 354 -      let sql =  `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;

 Line: 383 -      return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;

 Line: 406 -        + `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`

 Line: 409 -        + `INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`

 Line: 431 -        + `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`

 Line: 459 -        + `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`

 Line: 462 -        + `INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`

 Line: 504 -     * Generates an SQL query that returns all foreign keys of a table.

 Line: 507 -     * @return {String}            The generated sql query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/sqlite/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -    'UNION ALL': false,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/sqlite/query-interface.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 124 -            constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;

 Line: 125 -            constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;

 Line: 179 -    const query = this.QueryGenerator.getForeignKeysQuery(tableName, database);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/dialects/sqlite/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 33 -     * rewrite query with parameters

 Line: 87 -      //do we need benchmark for this query execution

 Line: 90 -      let queryBegin;

 Line: 92 -        queryBegin = Date.now();

 Line: 107 -                const query = this;

 Line: 113 -                    query.sequelize.log('Executed (' + (query.database.uuid || 'default') + '): ' + query.sql, Date.now() - queryBegin, query.options);

 Line: 117 -                    err.sql = query.sql;

 Line: 121 -                    let result = query.instance;

 Line: 125 -                      query.handleInsertQuery(results, metaData);

 Line: 130 -                          && query.model

 Line: 131 -                          && query.model.autoIncrementAttribute

 Line: 132 -                          && query.model.autoIncrementAttribute === query.model.primaryKeyAttribute

 Line: 133 -                          && query.model.rawAttributes[query.model.primaryKeyAttribute]

 Line: 147 -                      if (query.sql.indexOf('SELECT sql FROM sqlite_master WHERE tbl_name') !== -1) {

 Line: 150 -                          result = query.parseConstraintsFromSql(results[0].sql);

 Line: 158 -                        const prefixes = query._collectModels(query.options.include);

 Line: 170 -                              model = query.options.model;

 Line: 187 -                              ? query.applyParsers(tableTypes[name], value)

 Line: 193 -                      result = query.handleSelectQuery(results);

 Line: 197 -                      result = query.handleShowIndexesQuery(results);

 Line: 237 -                    } else if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].indexOf(query.options.type) !== -1) {

 Line: 245 -                    } else if (query.isUpdateQuery() || query.isInsertQuery()) {

 Line: 269 -            } else if (/FROM `(.*?)`/i.exec(this.sql)) {

 Line: 270 -              tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);

 Line: 310 -          updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);

 Line: 311 -          deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);

 Line: 451 -      } else if (this.isInsertQuery() || this.isUpdateQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().indexOf('CREATE TEMPORARY TABLE'.toLowerCase()) !== -1 || this.options.type === QueryTypes.BULKDELETE) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/hooks.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 435 -   * A hook that is run before a find (select) query

 Line: 443 -   * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded

 Line: 451 -   * A hook that is run before a find (select) query, after all option parsing is complete

 Line: 459 -   * A hook that is run after a find (select) query

 Line: 467 -   * A hook that is run before a count query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/deferrable.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 27 -   * trigger a query once the transaction has been started and set the constraints

 Line: 99 -    return queryGenerator.setDeferredQuery(this.constraints);

 Line: 112 -    return queryGenerator.setImmediateQuery(this.constraints);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/transaction.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -   * To run a query under a transaction, you should pass the transaction in the options object.

 Line: 122 -          acquireOptions.type = 'SELECT';

 Line: 298 -     * @property UPDATE

 Line: 301 -     * @property NO_KEY_UPDATE Postgres 9.3+ only

 Line: 305 -        UPDATE: 'UPDATE',

 Line: 308 -        NO_KEY_UPDATE: 'NO KEY UPDATE'

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/query-interface.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 79 -        type: this.sequelize.QueryTypes.SELECT

 Line: 109 -     * queryInterface.createTable(

 Line: 189 -              _.assign({}, options, { plain: true, raw: true, type: QueryTypes.SELECT })

 Line: 412 -      return this.sequelize.query(sql, _.assign({}, options, { plain: false, raw: true, type: QueryTypes.SELECT }));

 Line: 434 -     * @param {Boolean}   [options.raw=true] Run query in raw mode

 Line: 496 -        // If no data is returned from the query, then the table name may be wrong.

 Line: 579 -        const query = this.QueryGenerator.attributesToSQL(attributes);

 Line: 580 -        const sql = this.QueryGenerator.changeColumnQuery(tableName, query);

 Line: 726 -      const queryOptions = Object.assign({}, options, {

 Line: 733 -          return SQLiteQueryInterface.getForeignKeyReferencesForTable.call(this, tableName, queryOptions);

 Line: 738 -          const query = this.QueryGenerator.getForeignKeyReferencesQuery(tableName, catalogName);

 Line: 739 -          return this.sequelize.query(query, queryOptions)

 Line: 746 -          const query = this.QueryGenerator.getForeignKeysQuery(tableName, catalogName);

 Line: 747 -          return this.sequelize.query(query, queryOptions);

 Line: 779 -     * queryInterface.addConstraint('Users', ['email'], {

 Line: 787 -     * queryInterface.addConstraint('Users', ['roles'], {

 Line: 796 -     * queryInterface.addConstraint('Users', ['roles'], {

 Line: 804 -     * queryInterface.addConstraint('Users', ['username'], {

 Line: 812 -     * queryInterface.addConstraint('Posts', ['username'], {

 Line: 897 -      options.type = QueryTypes.INSERT;

 Line: 971 -              result.$action === 'INSERT',

 Line: 990 -     * queryInterface.bulkInsert('roles', [{

 Line: 1010 -      options.type = QueryTypes.INSERT;

 Line: 1024 -      options.type = QueryTypes.UPDATE;

 Line: 1100 -      options.type = QueryTypes.SELECT;

 Line: 1114 -      options.type = QueryTypes.UPDATE;

 Line: 1125 -      options.type = QueryTypes.UPDATE;

 Line: 1143 -        type: QueryTypes.SELECT

 Line: 1215 -     * queryInterface.createFunction(

 Line: 1255 -     * queryInterface.dropFunction(

 Line: 1285 -     * queryInterface.renameFunction(

 Line: 1313 -    // Helper methods useful for querying

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/table-hints.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * An enum of table hints to be used in mssql for querying with table hints

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/sequelize.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 80 -     * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 95 -     * @param {Object}   [options.retry] Set of flags that control when a query is automatically retried.

 Line: 96 -     * @param {Array}    [options.retry.match] Only retry a query if the error matches one of these strings.

 Line: 97 -     * @param {Integer}  [options.retry.max] How many times a failing query is automatically retried.  Set to 0 to disable retrying on SQL_BUSY error.

 Line: 155 -        query: {},

 Line: 407 -     * Execute a query on the DB, with the possibility to bypass all the sequelize goodness.

 Line: 411 -     * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:

 Line: 414 -     * sequelize.query('SELECT...').spread((results, metadata) => {

 Line: 415 -     *   // Raw query - use spread

 Line: 418 -     * sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(results => {

 Line: 419 -     *   // SELECT query - use then

 Line: 423 -     * @method query

 Line: 426 -     * @param {Boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result

 Line: 427 -     * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under

 Line: 428 -     * @param {QueryTypes}      [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.

 Line: 429 -     * @param {Boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified

 Line: 430 -     * @param {Boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row

 Line: 433 -     * @param {Boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.

 Line: 434 -     * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 437 -     * @param {Object}          [options.retry] Set of flags that control when a query is automatically retried.

 Line: 438 -     * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.

 Line: 439 -     * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.

 Line: 441 -     * @param {Boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)

 Line: 443 -     * @param {Object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.

 Line: 450 -    query(sql, options) {

 Line: 523 -            options.type = QueryTypes.SELECT;

 Line: 530 -          const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the \'sql\' property of this error)`);

 Line: 558 -        const query = new this.dialect.Query(connection, this, options);

 Line: 560 -        return query.run(sql, bindParameters)

 Line: 574 -     * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.

 Line: 580 -     * @param {Transaction}   options.transaction The transaction that the query should be executed under

 Line: 597 -      // Override some options, since this isn't a SELECT

 Line: 603 -      const query =

 Line: 785 -      return this.query('SELECT 1+1 AS result', _.assign({ raw: true, plain: true }, options)).return();

 Line: 838 -     * Creates an object which represents a column in the DB, this allows referencing another column in your query. This is often useful in conjunction with `sequelize.fn`, since raw string arguments to fn will be escaped.

 Line: 880 -     * An AND query

 Line: 894 -     * An OR query

 Line: 942 -     * Start a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction

 Line: 967 -     * If you have [CLS](https://github.com/othiym23/node-continuation-local-storage) enabled, the transaction will automatically be passed to any query that runs within the callback.

 Line: 983 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1197 -   * Available query types for use with `sequelize.query`

 Line: 1203 -   * Available table hints to be used for querying data in mssql for table hints

 Line: 1209 -   * Operators symbols to be used for querying data

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/associations/base.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 54 -   * When fetching associated models, you can limit your query to only load some models. These queries are written in the same way as queries to `find`/`findAll`. To only get pictures in JPG, you can do:

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/query-types.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * An enum of query types used by `sequelize.query`

 Line: 7 -   * @property SELECT

 Line: 8 -   * @property INSERT

 Line: 9 -   * @property UPDATE

 Line: 10 -   * @property BULKUPDATE

 Line: 11 -   * @property BULKDELETE

 Line: 12 -   * @property DELETE

 Line: 23 -    SELECT: 'SELECT',

 Line: 24 -    INSERT: 'INSERT',

 Line: 25 -    UPDATE: 'UPDATE',

 Line: 26 -    BULKUPDATE: 'BULKUPDATE',

 Line: 27 -    BULKDELETE: 'BULKDELETE',

 Line: 28 -    DELETE: 'DELETE',

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/operators.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -   * Operator symbols to be used when querying data

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/model.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1217 -     * @param {Function} [options.logging=false]   A function that gets executed while running the query to log the sql.

 Line: 1218 -     * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1242 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1243 -     * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1345 -     * Now, since you defined a default scope, every time you do Model.find, the default scope is appended to your query. Here's a couple of examples:

 Line: 1347 -     * Model.findAll() // WHERE username = 'dan'

 Line: 1348 -     * Model.findAll({ where: { age: { [Op.gt]: 12 } } }) // WHERE age > 12 AND username = 'dan'

 Line: 1354 -     * // WHERE email like 'dan@sequelize.com%' AND access_level >= 42

 Line: 1441 -     * WHERE attr1 = 42 AND attr2 = 'cake'

 Line: 1465 -     * WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5

 Line: 1488 -     * WHERE `Model`.`name` = 'a project' AND (`Model`.`id` IN (1, 2, 3) OR (`Model`.`id` > 10 AND `Model`.`id` < 100));

 Line: 1491 -     * The promise is resolved with an array of Model instances if the query succeeds.

 Line: 1504 -     * @param  {Boolean}                                                   [options.include[].or=false] Whether to bind the ON and WHERE clause together by OR instead of AND.

 Line: 1508 -     * @param  {Boolean}                                                   [options.include[].separate] If true, runs a separate query to fetch the associated instances, only supported for hasMany associations

 Line: 1516 -     * @param  {Transaction}                                               [options.transaction] Transaction to run query under

 Line: 1517 -     * @param  {String|Object}                                             [options.lock] Lock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE. Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model locks with joins. See [transaction.LOCK for an example](transaction#lock)

 Line: 1519 -     * @param  {Function}                                                  [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1520 -     * @param  {Boolean}                                                   [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1695 -     * @param  {Transaction}               [options.transaction] Transaction to run query under

 Line: 1726 -     * @param  {Transaction}               [options.transaction] Transaction to run query under

 Line: 1741 -        // Don't add limit if querying directly on the pk or a unique column

 Line: 1764 -     * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1765 -     * @param {Boolean}         [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1768 -     * @param {Transaction}     [options.transaction] Transaction to run query under

 Line: 1825 -     * @param {Transaction}   [options.transaction] Transaction to run query under

 Line: 1826 -     * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 1827 -     * @param {Boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 1859 -     * Find all the rows matching your query, within a specified offset / limit, and get the total number of rows matching your query. This is very useful for paging

 Line: 1870 -     * In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return the total number of rows that matched your query.

 Line: 1887 -     * @see {@link Model.findAll} for a specification of find and query options

 Line: 2004 -     * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 2005 -     * @param {Boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2006 -     * @param {Transaction}   [options.transaction] Transaction to run query under

 Line: 2026 -     * Find a row that matches the query, or build (but don't save) the row if none is found.

 Line: 2034 -     * @param {Object}   [options.transaction] Transaction to run query under

 Line: 2035 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 2036 -     * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2067 -     * Find a row that matches the query, or build and save the row if none is found

 Line: 2077 -     * @param {Transaction} [options.transaction] Transaction to run query under

 Line: 2122 -            // If the query returned an empty result for the primary key, we know that this was actually a unique constraint violation

 Line: 2203 -     * * MySQL - Implemented as a single query `INSERT values ON DUPLICATE KEY UPDATE values`

 Line: 2204 -     * * PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN unique_constraint UPDATE

 Line: 2205 -     * * SQLite - Implemented as two queries `INSERT; UPDATE`. This means that the update is executed regardless of whether the row already existed or not

 Line: 2206 -     * * MSSQL - Implemented as a single query using `MERGE` and `WHEN (NOT) MATCHED THEN`

 Line: 2207 -     * **Note** that SQLite returns undefined for created, no matter if the row was created or updated. This is because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know whether the row was inserted or not.

 Line: 2217 -     * @param  {Transaction}  [options.transaction] Transaction to run query under

 Line: 2218 -     * @param  {Function}     [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 2219 -     * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2295 -     * To obtain Instances for the newly created values, you will need to query for them again.

 Line: 2307 -     * @param  {Transaction}  [options.transaction] Transaction to run query under

 Line: 2308 -     * @param  {Function}     [options.logging=false]          A function that gets executed while running the query to log the sql.

 Line: 2309 -     * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2410 -          // Create all in one query

 Line: 2468 -     * @param {Transaction}      [options.transaction] Transaction to run query under

 Line: 2470 -     * @param {Boolean}          [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2489 -     * @param  {Boolean}      [options.individualHooks=false] If set to true, destroy will SELECT all records matching the where parameter and will execute before / after destroy hooks on each row

 Line: 2492 -     * @param  {Boolean}      [options.truncate=false]        If set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is truncated the where and limit options are ignored

 Line: 2495 -     * @param  {Transaction}  [options.transaction] Transaction to run query under

 Line: 2496 -     * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.

 Line: 2497 -     * @param  {Boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2521 -      options.type = QueryTypes.BULKDELETE;

 Line: 2543 -        // Run delete query (or update if paranoid)

 Line: 2545 -          // Set query type appropriately when running soft delete

 Line: 2546 -          options.type = QueryTypes.BULKUPDATE;

 Line: 2581 -     * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.

 Line: 2582 -     * @param  {Boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2583 -     * @param  {Transaction}  [options.transaction] Transaction to run query under

 Line: 2617 -        // Run undelete query

 Line: 2651 -     * @param  {Boolean}      [options.individualHooks=false] Run before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs. A select is needed, because the row data needs to be passed to the hooks

 Line: 2654 -     * @param  {Function}     [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 2655 -     * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).

 Line: 2656 -     * @param  {Transaction}  [options.transaction] Transaction to run query under

 Line: 2676 -      options.type = QueryTypes.BULKUPDATE;

 Line: 2795 -                // Do not run original query but save each record individually

 Line: 2820 -        // Run query to update all rows

 Line: 2849 -     * Run a describe query on the table. The result will be return to the listener as a hash of attributes and their types.

 Line: 2923 -     * ``` SET column = column + X WHERE foo = 'bar' ``` query. To get the correct value after an increment into the Instance you should do a reload.

 Line: 2944 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 3014 -     * ```sql SET column = column - X WHERE foo = 'bar'``` query. To get the correct value after a decrement into the Instance you should do a reload.

 Line: 3161 -     * Get an object representing the query for this instance, use with `options.where`

 Line: 3515 -     * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 3667 -        let query = null;

 Line: 3672 -          query = 'insert';

 Line: 3680 -          query = 'update';

 Line: 3779 -    * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 3864 -     * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 3909 -          return this.constructor.QueryInterface.delete(this, this.constructor.getTableName(options), where, _.assign({ type: QueryTypes.DELETE, limit: null }, options));

 Line: 3955 -     * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 3993 -     * query. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a reload to get the new values.

 Line: 4007 -    * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

 Line: 4030 -     * query. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a reload to get the new values.

 Line: 4044 -     * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.

</Result>
</report_mosca>

