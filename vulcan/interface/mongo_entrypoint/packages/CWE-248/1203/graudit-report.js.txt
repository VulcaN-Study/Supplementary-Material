/src/README.md-192-// Use connect method to connect to the server
/src/README.md:193:MongoClient.connect(url, function(err, client) {
/src/README.md-194-  assert.equal(null, err);
##############################################
/src/README.md-251-// Use connect method to connect to the server
/src/README.md:252:MongoClient.connect(url, function(err, client) {
/src/README.md-253-  assert.equal(null, err);
##############################################
/src/README.md-307-// Use connect method to connect to the server
/src/README.md:308:MongoClient.connect(url, function(err, client) {
/src/README.md-309-  assert.equal(null, err);
##############################################
/src/README.md-373-// Use connect method to connect to the server
/src/README.md:374:MongoClient.connect(url, function(err, client) {
/src/README.md-375-  assert.equal(null, err);
##############################################
/src/README.md-418-// Use connect method to connect to the server
/src/README.md:419:MongoClient.connect(url, function(err, client) {
/src/README.md-420-  assert.equal(null, err);
##############################################
/src/README.md-465-// Use connect method to connect to the server
/src/README.md:466:MongoClient.connect(url, function(err, client) {
/src/README.md-467-  assert.equal(null, err);
##############################################
/src/HISTORY.md-1497-* Emit authenticate event on db after authenticate method has finished on db instance (Issue #984)
/src/HISTORY.md:1498:* Allows creation of MongoClient and do new MongoClient().connect(..). Emits open event when connection correct allowing for apps to react on event.
/src/HISTORY.md-1499-
##############################################
/src/HISTORY.md-1957-* Eval function no accepts options including nolock (Issue #432)
/src/HISTORY.md:1958:    * eval(code, parameters, options, callback) (where options = {nolock:true})
/src/HISTORY.md-1959-
##############################################
/src/HISTORY.md-2206-* Removed multiple message concept from bson
/src/HISTORY.md:2207:* Changed db.open(db) to be db.open(err, db)
/src/HISTORY.md-2208-
##############################################
/src/lib/cursor.js-35- * // Connect using MongoClient
/src/lib/cursor.js:36: * MongoClient.connect(url, function(err, client) {
/src/lib/cursor.js-37- *   // Create a collection we want to drop later
##############################################
/src/lib/collection.js-77- * // Connect using MongoClient
/src/lib/collection.js:78: * MongoClient.connect(url, function(err, client) {
/src/lib/collection.js-79- *   // Create a collection we want to drop later
##############################################
/src/lib/utils.js-276-    sslCRL: 'crl',
/src/lib/utils.js:277:    sslValidate: 'rejectUnauthorized',
/src/lib/utils.js-278-    sslKey: 'key',
##############################################
/src/lib/topologies/mongos.js-341-    // Start connection
/src/lib/topologies/mongos.js:342:    self.s.coreTopology.connect(_options);
/src/lib/topologies/mongos.js-343-  }
##############################################
/src/lib/topologies/replset.js-380-    // Start connection
/src/lib/topologies/replset.js:381:    self.s.coreTopology.connect(_options);
/src/lib/topologies/replset.js-382-  }
##############################################
/src/lib/topologies/server.js-359-    // Start connection
/src/lib/topologies/server.js:360:    self.s.coreTopology.connect(_options);
/src/lib/topologies/server.js-361-  }
##############################################
/src/lib/operations/mongo_client_ops.js-312-  // Connect
/src/lib/operations/mongo_client_ops.js:313:  return url.connect(
/src/lib/operations/mongo_client_ops.js-314-    finalOptions,
##############################################
/src/lib/operations/mongo_client_ops.js-358-  // Connect to topology
/src/lib/operations/mongo_client_ops.js:359:  server.connect(options, (err, topology) => {
/src/lib/operations/mongo_client_ops.js-360-    if (err) {
##############################################
/src/lib/operations/mongo_client_ops.js-416-  // Open the connection
/src/lib/operations/mongo_client_ops.js:417:  topology.connect(options, (err, newTopology) => {
/src/lib/operations/mongo_client_ops.js-418-    if (err) {
##############################################
/src/lib/command_cursor.js-23- * // Connect using MongoClient
/src/lib/command_cursor.js:24: * MongoClient.connect(url, function(err, client) {
/src/lib/command_cursor.js-25- *   // Create a collection we want to drop later
##############################################
/src/lib/gridfs/grid_store.js-20- * // Connect using MongoClient
/src/lib/gridfs/grid_store.js:21: * MongoClient.connect(url, function(err, client) {
/src/lib/gridfs/grid_store.js-22- *   const db = client.db(dbName);
/src/lib/gridfs/grid_store.js-23- *   const gridStore = new GridStore(db, null, "w");
/src/lib/gridfs/grid_store.js:24: *   gridStore.open(function(err, gridStore) {
/src/lib/gridfs/grid_store.js-25- *     gridStore.write("hello world!", function(err, gridStore) {
##############################################
/src/lib/gridfs/grid_store.js-397-  if (typeof file === 'string') {
/src/lib/gridfs/grid_store.js:398:    fs.open(file, 'r', function(err, fd) {
/src/lib/gridfs/grid_store.js-399-      if (err) return callback(err);
/src/lib/gridfs/grid_store.js:400:      self.writeFile(fd, callback);
/src/lib/gridfs/grid_store.js-401-    });
##############################################
/src/lib/gridfs/grid_store.js-404-
/src/lib/gridfs/grid_store.js:405:  self.open(function(err, self) {
/src/lib/gridfs/grid_store.js-406-    if (err) return callback(err, self);
##############################################
/src/lib/gridfs/grid_store.js-1428-var readStatic = function(db, name, length, offset, options, callback) {
/src/lib/gridfs/grid_store.js:1429:  new GridStore(db, name, 'r', options).open(function(err, gridStore) {
/src/lib/gridfs/grid_store.js-1430-    if (err) return callback(err);
##############################################
/src/lib/gridfs/grid_store.js-1482-  var finalSeperator = separator == null ? '\n' : separator;
/src/lib/gridfs/grid_store.js:1483:  new GridStore(db, name, 'r', options).open(function(err, gridStore) {
/src/lib/gridfs/grid_store.js-1484-    if (err) return callback(err);
##############################################
/src/lib/gridfs/grid_store.js-1522-      ++tc;
/src/lib/gridfs/grid_store.js:1523:      GridStore.unlink(db, names[i], options, function() {
/src/lib/gridfs/grid_store.js-1524-        if (--tc === 0) {
##############################################
/src/lib/gridfs/grid_store.js-1529-  } else {
/src/lib/gridfs/grid_store.js:1530:    new GridStore(db, names, 'w', options).open(function(err, gridStore) {
/src/lib/gridfs/grid_store.js-1531-      if (err) return callback(err);
##############################################
/src/lib/gridfs/grid_store.js-1657-  if (!self.gs.isOpen) {
/src/lib/gridfs/grid_store.js:1658:    self.gs.open(function(err) {
/src/lib/gridfs/grid_store.js-1659-      if (err) return self.emit('error', err);
##############################################
/src/lib/gridfs/grid_store.js-1701-  if (!self.gs.isOpen) {
/src/lib/gridfs/grid_store.js:1702:    self.gs.open(function(err) {
/src/lib/gridfs/grid_store.js-1703-      self.totalBytesToRead = self.gs.length - self.gs.position;
##############################################
/src/lib/gridfs/grid_store.js-1727-  if (!self.gs.isOpen) {
/src/lib/gridfs/grid_store.js:1728:    self.gs.open(function() {
/src/lib/gridfs/grid_store.js-1729-      self.gs.isOpen = true;
##############################################
/src/lib/url_parser.js-14-  try {
/src/lib/url_parser.js:15:    result = parser.parse(url, true);
/src/lib/url_parser.js-16-  } catch (e) {
##############################################
/src/lib/url_parser.js-144-  // Url parser result
/src/lib/url_parser.js:145:  let result = parser.parse(url, true);
/src/lib/url_parser.js-146-  if ((result.hostname == null || result.hostname === '') && url.indexOf('.sock') === -1) {
##############################################
/src/lib/url_parser.js-213-  for (let i = 0; i < hosts.length; i++) {
/src/lib/url_parser.js:214:    let r = parser.parse(f('mongodb://%s', hosts[i].trim()));
/src/lib/url_parser.js-215-    if (r.path && r.path.indexOf('.sock') !== -1) continue;
##############################################
/src/lib/admin.js-26- * // Connect using MongoClient
/src/lib/admin.js:27: * MongoClient.connect(url, function(err, client) {
/src/lib/admin.js-28- *   // Use the admin database for the operation
##############################################
/src/lib/aggregation_cursor.js-22- * // Connect using MongoClient
/src/lib/aggregation_cursor.js:23: * MongoClient.connect(url, function(err, client) {
/src/lib/aggregation_cursor.js-24- *   // Create a collection we want to drop later
##############################################
/src/lib/mongo_client.js-28- * const mongoClient = new MongoClient(url);
/src/lib/mongo_client.js:29: * mongoClient.connect(function(err, client) {
/src/lib/mongo_client.js-30- *   const db = client.db(dbName);
##############################################
/src/lib/mongo_client.js-42- * // Connect using MongoClient
/src/lib/mongo_client.js:43: * MongoClient.connect(url, function(err, client) {
/src/lib/mongo_client.js-44- *   const db = client.db(dbName);
##############################################
/src/lib/mongo_client.js-371-  // Execute the connect method
/src/lib/mongo_client.js:372:  return mongoClient.connect(callback);
/src/lib/mongo_client.js-373-};
##############################################
/src/lib/db.js-53- * // Connect using MongoClient
/src/lib/db.js:54: * MongoClient.connect(url, function(err, client) {
/src/lib/db.js-55- *   // Select the database by name
##############################################
/src/lib/db.js-535-  // Get the cursor
/src/lib/db.js:536:  cursor = this.collection(CONSTANTS.SYSTEM_NAMESPACE_COLLECTION).find(filter, _options);
/src/lib/db.js-537-  // Do we have a readPreference, apply it
