{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# node_modules ignored by default",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/.eslintignore",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 11,
          "line": 2
        },
        "extra": {
          "line": "    \"env\": {",
          "message": "Syntax error"
        },
        "path": "/src/.eslintrc",
        "start": {
          "col": 10,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 22,
          "line": 3
        },
        "extra": {
          "line": "    \"fileExtensions\":   [ \".js\" ],",
          "message": "Syntax error"
        },
        "path": "/src/.jscsrc",
        "start": {
          "col": 21,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": ".coverage_data",
          "message": "Syntax error"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 19,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) 2011 Mark Cavage, All rights reserved.",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "eval_nodejs": {
      "files": [
        {
          "file_path": "/src/lib/clients/http_client.js",
          "match_lines": [
            127,
            139
          ],
          "match_position": [
            27,
            31
          ],
          "match_string": "        connectionTimer = setTimeout(function connectTimeout() {\n\n            connectionTimer = null;\n\n\n\n            if (req) {\n\n                req.abort();\n\n            }\n\n\n\n            var err = new ConnectTimeoutError(opts.connectTimeout);\n\n            dtrace._rstfy_probes['client-error'].fire(function () {\n\n                return ([id, err.toString()]);\n\n            });\n\n            cb(err, req);\n\n        }, opts.connectTimeout);"
        },
        {
          "file_path": "/src/lib/clients/http_client.js",
          "match_lines": [
            238,
            254
          ],
          "match_position": [
            32,
            39
          ],
          "match_string": "                requestTimer = setTimeout(function requestTimeout() {\n\n                    requestTimer = null;\n\n\n\n                    var err = new RequestTimeoutError(opts.requestTimeout);\n\n                    dtrace._rstfy_probes['client-error'].fire(function () {\n\n                        return ([id, err.toString()]);\n\n                    });\n\n\n\n                    cb(err, req);\n\n\n\n                    if (req) {\n\n                        req.abort();\n\n                        process.nextTick(function () {\n\n                            req.emit('result', err, null);\n\n                        });\n\n                    }\n\n                }, opts.requestTimeout);"
        }
      ],
      "metadata": {
        "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_md5": {
      "files": [
        {
          "file_path": "/src/lib/clients/string_client.js",
          "match_lines": [
            96,
            96
          ],
          "match_position": [
            24,
            47
          ],
          "match_string": "            var hash = crypto.createHash('md5');"
        },
        {
          "file_path": "/src/lib/clients/string_client.js",
          "match_lines": [
            172,
            172
          ],
          "match_position": [
            24,
            47
          ],
          "match_string": "                hash = crypto.createHash('md5');"
        },
        {
          "file_path": "/src/lib/plugins/body_reader.js",
          "match_lines": [
            86,
            86
          ],
          "match_position": [
            20,
            43
          ],
          "match_string": "            hash = crypto.createHash('md5');"
        },
        {
          "file_path": "/src/lib/plugins/full_response.js",
          "match_lines": [
            62,
            62
          ],
          "match_position": [
            16,
            39
          ],
          "match_string": "        hash = crypto.createHash('md5');"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "MD5 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_username": {
      "files": [
        {
          "file_path": "/src/lib/plugins/authorization.js",
          "match_lines": [
            108,
            108
          ],
          "match_position": [
            9,
            35
          ],
          "match_string": "        req.username = 'anonymous';"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/lib/clients/json_client.js",
          "match_lines": [
            78,
            78
          ],
          "match_position": [
            22,
            44
          ],
          "match_string": "                if (!/Error$/.test(err.name)) {"
        },
        {
          "file_path": "/src/lib/server.js",
          "match_lines": [
            321,
            321
          ],
          "match_position": [
            34,
            65
          ],
          "match_string": "        if (options.socketio && (/^\\/socket\\.io.*/).test(req.url)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
