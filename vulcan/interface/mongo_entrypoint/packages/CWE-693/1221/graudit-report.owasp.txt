/src/src/browser.js-13-* @example
/src/src/browser.js:14:* const {SaferEval} = require('safer-eval')
/src/src/browser.js-15-* const safer = new SaferEval()
##############################################
/src/src/browser.js-33-  * @param {String} code - a string containing javascript code
/src/src/browser.js:34:  * @return {Any} evaluated code
/src/src/browser.js-35-  */
##############################################
/src/src/browser.js-53-/**
/src/src/browser.js:54:* A safer approach for eval. (Browser)
/src/src/browser.js-55-*
##############################################
/src/src/browser.js-67-* @param {String} code - a string containing javascript code
/src/src/browser.js:68:* @param {Object} [context] - define globals, properties for evaluation context
/src/src/browser.js-69-* @param {Object} [opts] - options
/src/src/browser.js-70-* @param {Object} [opts.freeze=true] - freeze all native objects
/src/src/browser.js:71:* @return {Any} evaluated code
/src/src/browser.js-72-* @example
##############################################
/src/src/index.js-14-* @example
/src/src/index.js:15:* const {SaferEval} = require('safer-eval')
/src/src/index.js-16-* const safer = new SaferEval()
##############################################
/src/src/index.js-36-  * @param {String} code - a string containing javascript code
/src/src/index.js:37:  * @return {Any} evaluated code
/src/src/index.js-38-  */
##############################################
/src/src/index.js-52-/**
/src/src/index.js:53:* A safer approach for eval. (node)
/src/src/index.js-54-*
/src/src/index.js:55:* In node the `vm` module is used to sandbox the evaluation of `code`.
/src/src/index.js-56-*
##############################################
/src/src/index.js-63-* @param {String} code - a string containing javascript code
/src/src/index.js:64:* @param {Object} [context] - define globals, properties for evaluation context
/src/src/index.js:65:* @return {Any} evaluated code
/src/src/index.js-66-* @example
##############################################
/src/src/common.js-33-    // no evil...
/src/src/common.js:34:    eval: undefined,
/src/src/common.js-35-    Function: undefined
##############################################
/src/README.md:1:# safer-eval but harmful
/src/README.md-2-
/src/README.md:3:[![NPM version](https://badge.fury.io/js/safer-eval.svg)](https://www.npmjs.com/package/safer-eval/)
/src/README.md-4-
/src/README.md:5:> harmful as eval
/src/README.md-6-
/src/README.md:7:This approach has proven to be HARMFUL and does not suit as repacement for eval in node and browser. 
/src/README.md-8-Before using this module, **ask yourself if there are no better options** than using saferEval.
/src/README.md:9:It is potentially better than the bad old `eval()` but has harmful potential.
/src/README.md-10-Checkout the "harmful context" tests section.
/src/README.md-11-
/src/README.md:12:![harmful](https://raw.githubusercontent.com/commenthol/safer-eval/master/harmful.png)
/src/README.md-13-
##############################################
/src/README.md-28-
/src/README.md:29:In node the `vm` module is used to sandbox the evaluation of `code`.
/src/README.md-30-
##############################################
/src/README.md-49-```
/src/README.md:50:npm install --save safer-eval
/src/README.md-51-```
##############################################
/src/README.md-62-'use strict'
/src/README.md:63:const saferEval = require('safer-eval')
/src/README.md-64-
##############################################
/src/README.md-98-
/src/README.md:99:**context**: `Object`, define globals, properties for evaluation context
/src/README.md-100-
/src/README.md:101:**Returns**: `Any`, evaluated code
/src/README.md-102-
##############################################
/src/README.md-109-             //< running `saferEval`
/src/README.md:110:const saferEval = require('safer-eval')
/src/README.md-111-const code = `{d: new Date('1970-01-01'), b: new Buffer('data')}`
##############################################
/src/README.md-121-             //< running `saferEval`
/src/README.md:122:const saferEval = require('safer-eval')
/src/README.md-123-const code = `{d: new Date('1970-01-01'), b: function () { return navigator.userAgent }`
##############################################
/src/README.md-155-             //< running `saferEval`
/src/README.md:156:const { SaferEval } = require('safer-eval')
/src/README.md-157-const safer = new SaferEval()
##############################################
/src/package.json-1-{
/src/package.json:2:  "name": "safer-eval",
/src/package.json-3-  "version": "1.3.6",
/src/package.json:4:  "description": "harmful as eval",
/src/package.json-5-  "keywords": [
/src/package.json:6:    "eval",
/src/package.json-7-    "safe"
##############################################
/src/package.json-9-  "bugs": {
/src/package.json:10:    "url": "https://github.com/commenthol/safer-eval/issues"
/src/package.json-11-  },
##############################################
/src/package.json-13-    "type": "git",
/src/package.json:14:    "url": "https://github.com/commenthol/safer-eval.git"
/src/package.json-15-  },
##############################################
/src/lib/browser.js-19-* @example
/src/lib/browser.js:20:* const {SaferEval} = require('safer-eval')
/src/lib/browser.js-21-* const safer = new SaferEval()
##############################################
/src/lib/browser.js-44-  * @param {String} code - a string containing javascript code
/src/lib/browser.js:45:  * @return {Any} evaluated code
/src/lib/browser.js-46-  */
##############################################
/src/lib/browser.js-69-/**
/src/lib/browser.js:70:* A safer approach for eval. (Browser)
/src/lib/browser.js-71-*
##############################################
/src/lib/browser.js-83-* @param {String} code - a string containing javascript code
/src/lib/browser.js:84:* @param {Object} [context] - define globals, properties for evaluation context
/src/lib/browser.js-85-* @param {Object} [opts] - options
/src/lib/browser.js-86-* @param {Object} [opts.freeze=true] - freeze all native objects
/src/lib/browser.js:87:* @return {Any} evaluated code
/src/lib/browser.js-88-* @example
##############################################
/src/lib/index.js-21-* @example
/src/lib/index.js:22:* const {SaferEval} = require('safer-eval')
/src/lib/index.js-23-* const safer = new SaferEval()
##############################################
/src/lib/index.js-48-  * @param {String} code - a string containing javascript code
/src/lib/index.js:49:  * @return {Any} evaluated code
/src/lib/index.js-50-  */
##############################################
/src/lib/index.js-70-/**
/src/lib/index.js:71:* A safer approach for eval. (node)
/src/lib/index.js-72-*
/src/lib/index.js:73:* In node the `vm` module is used to sandbox the evaluation of `code`.
/src/lib/index.js-74-*
##############################################
/src/lib/index.js-81-* @param {String} code - a string containing javascript code
/src/lib/index.js:82:* @param {Object} [context] - define globals, properties for evaluation context
/src/lib/index.js:83:* @return {Any} evaluated code
/src/lib/index.js-84-* @example
##############################################
/src/lib/common.js-33-    // no evil...
/src/lib/common.js:34:    eval: undefined,
/src/lib/common.js-35-    Function: undefined
