/src/README.md-6-
/src/README.md:7:- [safe-eval](https://github.com/hacksparrow/safe-eval)
/src/README.md-8-
##############################################
/src/README.md-11-```bash
/src/README.md:12:npm i @zhaoyao91/eval-in-vm
/src/README.md-13-```
##############################################
/src/README.md-17-```
/src/README.md:18:const eval = require('@zhaoyao91/eval-in-vm')
/src/README.md-19-
/src/README.md:20:const result = eval('1 + 2') // 3
/src/README.md-21-
/src/README.md:22:const result = eval('a + 2', {a: 1}) // 3
/src/README.md-23-
/src/README.md:24:const result = eval('b + 2') // Error !!!
/src/README.md-25-```
##############################################
/src/package.json-1-{
/src/package.json:2:  "name": "@zhaoyao91/eval-in-vm",
/src/package.json-3-  "version": "0.0.0",
##############################################
/src/package.json-10-    "zhaoyao91",
/src/package.json:11:    "eval",
/src/package.json-12-    "vm"
/src/package.json-13-  ],
/src/package.json:14:  "repository": "github.com/zhaoyao91-npm/eval-in-vm",
/src/package.json-15-  "author": {
##############################################
/src/test/eval.js-2-
/src/test/eval.js:3:const eval = require("../index");
/src/test/eval.js-4-
/src/test/eval.js:5:tap.test("eval a math expression", async t => {
/src/test/eval.js-6-  const expression = "1 + 2";
/src/test/eval.js:7:  const result = eval(expression);
/src/test/eval.js-8-  t.equal(result, 3);
##############################################
/src/test/eval.js-10-
/src/test/eval.js:11:tap.test("eval a function", async t => {
/src/test/eval.js-12-  const expression = `
##############################################
/src/test/eval.js-16-  `;
/src/test/eval.js:17:  const fn = eval(expression);
/src/test/eval.js-18-  const result = fn(1, 2);
##############################################
/src/test/eval.js-21-
/src/test/eval.js:22:tap.test("eval with context", async t => {
/src/test/eval.js-23-  const context = {
##############################################
/src/test/eval.js-27-  const expression = "a + b + 3";
/src/test/eval.js:28:  const result = eval(expression, context);
/src/test/eval.js-29-  t.equal(result, 6);
##############################################
/src/test/eval.js-31-
/src/test/eval.js:32:tap.test("eval in sandbox", async t => {
/src/test/eval.js-33-  const a = 1;
/src/test/eval.js-34-  const expression = "a + 2";
/src/test/eval.js:35:  t.throw(() => eval(expression));
/src/test/eval.js-36-});
