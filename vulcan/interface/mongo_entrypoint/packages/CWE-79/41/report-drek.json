[
 {
  "id": 1,
  "file": "/src/index.html",
  "filetype": "html",
  "search": "<script",
  "match": "<html>\n<head>\n<script type=\"text/javascript\" src=\"validator-min.js\"></script>\n</head>\n<body>\n<script type=\"text/javascript\">\ntry {\n    check('ad>dfds@fsdfsd.com').isEmail();",
  "line": 3,
  "start": 1,
  "end": 9
 },
 {
  "id": 2,
  "file": "/src/index.html",
  "filetype": "html",
  "search": "<script",
  "match": "<html>\n<head>\n<script type=\"text/javascript\" src=\"validator-min.js\"></script>\n</head>\n<body>\n<script type=\"text/javascript\">\ntry {\n    check('ad>dfds@fsdfsd.com').isEmail();\n    check('foobar.com').isUrl();\n    check('foobar.com').isUrl();\n} catch (e) {",
  "line": 6,
  "start": 1,
  "end": 12
 },
 {
  "id": 3,
  "file": "/src/lib/xss.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "    });\n\n    //Sanitize naughty scripting elements Similar to above, only instead of looking for\n    //tags it looks for PHP and JavaScript commands that are disallowed.  Rather than removing the\n    //code, it simply converts the parenthesis to entities rendering the code un-executable.\n    //For example:    eval('some code')\n    //Becomes:        eval&#40;'some code'&#41;\n    str = str.replace(/(alert|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)\\((.*?)\\)/gi, '$1$2&#40;$3&#41;');\n\n    //This adds a bit of extra precaution in case something got through the above filters\n    for (var i in never_allowed_str) {",
  "line": 165,
  "start": 160,
  "end": 171
 },
 {
  "id": 4,
  "file": "/src/validator.js",
  "filetype": "js",
  "search": "\\seval\\s*\\(",
  "match": "        });\n\n        //Sanitize naughty scripting elements Similar to above, only instead of looking for\n        //tags it looks for PHP and JavaScript commands that are disallowed.  Rather than removing the\n        //code, it simply converts the parenthesis to entities rendering the code un-executable.\n        //For example:    eval('some code')\n        //Becomes:        eval&#40;'some code'&#41;\n        str = str.replace(/(alert|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)\\((.*?)\\)/gi, '$1$2&#40;$3&#41;');\n\n        //This adds a bit of extra precaution in case something got through the above filters\n        for (var i in never_allowed_str) {",
  "line": 477,
  "start": 472,
  "end": 483
 }
]
