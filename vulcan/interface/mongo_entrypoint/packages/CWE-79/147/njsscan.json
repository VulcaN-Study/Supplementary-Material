{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 13,
          "line": 2
        },
        "extra": {
          "line": "  \"latedef\": \"nofunc\",",
          "message": "Syntax error"
        },
        "path": "/src/.jshintrc",
        "start": {
          "col": 12,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 19,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) 2012-2015, James Long",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 25,
          "line": 5
        },
        "extra": {
          "line": "$ROOT/bundle.js nunjucks.js",
          "message": "Syntax error"
        },
        "path": "/src/bin/bundle",
        "start": {
          "col": 17,
          "line": 5
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "generic_header_injection": {
      "files": [
        {
          "file_path": "/src/browser/nunjucks.js",
          "match_lines": [
            1898,
            1899
          ],
          "match_position": [
            10,
            34
          ],
          "match_string": "\t        var symbol = node.symbol.value;\n\n\t        frame.set(symbol, symbol);"
        },
        {
          "file_path": "/src/browser/nunjucks.js",
          "match_lines": [
            2063,
            2063
          ],
          "match_position": [
            22,
            64
          ],
          "match_string": "\t                    frame.set(node.name.children[u].value, tid);"
        },
        {
          "file_path": "/src/browser/nunjucks.js",
          "match_lines": [
            2102,
            2102
          ],
          "match_position": [
            14,
            42
          ],
          "match_string": "\t            frame.set(node.name.value, v);"
        },
        {
          "file_path": "/src/browser/nunjucks.js",
          "match_lines": [
            2163,
            2166
          ],
          "match_position": [
            14,
            30
          ],
          "match_string": "\t            var id = node.name.value;\n\n\t            this.emitLine('runtime.' + asyncMethod + '(' + arr + ', 1, function(' + id + ', ' + i + ', ' + len + ',next) {');\n\n\t            this.emitLine('frame.set(\"' + id + '\", ' + id + ');');\n\n\t            frame.set(id, id);"
        },
        {
          "file_path": "/src/browser/nunjucks.js",
          "match_lines": [
            2293,
            2294
          ],
          "match_position": [
            10,
            32
          ],
          "match_string": "\t        var name = node.name.value;\n\n\t        frame.set(name, funcId);"
        },
        {
          "file_path": "/src/browser/nunjucks.js",
          "match_lines": [
            2316,
            2328
          ],
          "match_position": [
            10,
            30
          ],
          "match_string": "\t        var target = node.target.value;\n\n\n\n\t        this.emit('env.getTemplate(');\n\n\t        this._compileExpression(node.template, frame);\n\n\t        this.emitLine(', false, '+this._templateName()+', false, ' + this.makeCallback(id));\n\n\t        this.addScopeLevel();\n\n\n\n\t        this.emitLine(id + '.getExported(' +\n\n\t            (node.withContext ? 'context.getVariables(), frame, ' : '') +\n\n\t            this.makeCallback(id));\n\n\t        this.addScopeLevel();\n\n\n\n\t        frame.set(target, id);"
        },
        {
          "file_path": "/src/browser/nunjucks.js",
          "match_lines": [
            2409,
            2418
          ],
          "match_position": [
            10,
            26
          ],
          "match_string": "\t        var id = node.symbol.value;\n\n\n\n\t        this.emitLine('context.getSuper(env, ' +\n\n\t                      '\"' + name + '\", ' +\n\n\t                      'b_' + name + ', ' +\n\n\t                      'frame, runtime, '+\n\n\t                      this.makeCallback(id));\n\n\t        this.emitLine(id + ' = runtime.markSafe(' + id + ');');\n\n\t        this.addScopeLevel();\n\n\t        frame.set(id, id);"
        },
        {
          "file_path": "/src/src/compiler.js",
          "match_lines": [
            483,
            484
          ],
          "match_position": [
            9,
            33
          ],
          "match_string": "        var symbol = node.symbol.value;\n\n        frame.set(symbol, symbol);"
        },
        {
          "file_path": "/src/src/compiler.js",
          "match_lines": [
            648,
            648
          ],
          "match_position": [
            21,
            63
          ],
          "match_string": "                    frame.set(node.name.children[u].value, tid);"
        },
        {
          "file_path": "/src/src/compiler.js",
          "match_lines": [
            687,
            687
          ],
          "match_position": [
            13,
            41
          ],
          "match_string": "            frame.set(node.name.value, v);"
        },
        {
          "file_path": "/src/src/compiler.js",
          "match_lines": [
            748,
            751
          ],
          "match_position": [
            13,
            29
          ],
          "match_string": "            var id = node.name.value;\n\n            this.emitLine('runtime.' + asyncMethod + '(' + arr + ', 1, function(' + id + ', ' + i + ', ' + len + ',next) {');\n\n            this.emitLine('frame.set(\"' + id + '\", ' + id + ');');\n\n            frame.set(id, id);"
        },
        {
          "file_path": "/src/src/compiler.js",
          "match_lines": [
            878,
            879
          ],
          "match_position": [
            9,
            31
          ],
          "match_string": "        var name = node.name.value;\n\n        frame.set(name, funcId);"
        },
        {
          "file_path": "/src/src/compiler.js",
          "match_lines": [
            901,
            913
          ],
          "match_position": [
            9,
            29
          ],
          "match_string": "        var target = node.target.value;\n\n\n\n        this.emit('env.getTemplate(');\n\n        this._compileExpression(node.template, frame);\n\n        this.emitLine(', false, '+this._templateName()+', false, ' + this.makeCallback(id));\n\n        this.addScopeLevel();\n\n\n\n        this.emitLine(id + '.getExported(' +\n\n            (node.withContext ? 'context.getVariables(), frame, ' : '') +\n\n            this.makeCallback(id));\n\n        this.addScopeLevel();\n\n\n\n        frame.set(target, id);"
        },
        {
          "file_path": "/src/src/compiler.js",
          "match_lines": [
            994,
            1003
          ],
          "match_position": [
            9,
            25
          ],
          "match_string": "        var id = node.symbol.value;\n\n\n\n        this.emitLine('context.getSuper(env, ' +\n\n                      '\"' + name + '\", ' +\n\n                      'b_' + name + ', ' +\n\n                      'frame, runtime, '+\n\n                      this.makeCallback(id));\n\n        this.emitLine(id + ' = runtime.markSafe(' + id + ');');\n\n        this.addScopeLevel();\n\n        frame.set(id, id);"
        }
      ],
      "metadata": {
        "cwe": "CWE-644: Improper Neutralization of HTTP Headers for Scripting Syntax",
        "description": "Untrusted user input in response header will result in HTTP Header Injection or Response Splitting Attacks.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/browser/nunjucks-slim.js",
          "match_lines": [
            1641,
            1641
          ],
          "match_position": [
            32,
            43
          ],
          "match_string": "\t        return arr[Math.floor(Math.random() * arr.length)];"
        },
        {
          "file_path": "/src/browser/nunjucks.js",
          "match_lines": [
            5559,
            5559
          ],
          "match_position": [
            32,
            43
          ],
          "match_string": "\t        return arr[Math.floor(Math.random() * arr.length)];"
        },
        {
          "file_path": "/src/src/filters.js",
          "match_lines": [
            226,
            226
          ],
          "match_position": [
            31,
            42
          ],
          "match_string": "        return arr[Math.floor(Math.random() * arr.length)];"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
