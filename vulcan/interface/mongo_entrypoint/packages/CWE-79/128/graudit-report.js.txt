/src/server/data_adapter/rest_adapter.js-90-      try {
/src/server/data_adapter/rest_adapter.js:91:        body = JSON.parse(body);
/src/server/data_adapter/rest_adapter.js-92-      } catch (e) {
##############################################
/src/README.md-177-};
/src/README.md:178:rendr.createServer(config);
/src/README.md-179-
##############################################
/src/README.md-279-```js
/src/README.md:280:rendr.createServer(config);
/src/README.md-281-rendr.configure(function(expressApp) {
##############################################
/src/shared/store/model_store.js-23-    // Make sure we have a fully parsed model before we store the attributes
/src/shared/store/model_store.js:24:    model.parse(model.attributes);
/src/shared/store/model_store.js-25-
##############################################
/src/shared/syncer.js-45-        try {
/src/shared/syncer.js:46:          body = JSON.parse(body);
/src/shared/syncer.js-47-        } catch (e) {}
##############################################
/src/shared/syncer.js-71-   * if queryStr is initially an empty string, leading '&' will still get parsed correctly by qs.parse below.
/src/shared/syncer.js:72:   * e.g.  qs.parse('&baz=quux') => { baz: 'quux' }
/src/shared/syncer.js-73-   */
##############################################
/src/shared/syncer.js-77-    path: urlParts[0],
/src/shared/syncer.js:78:    query: qs.parse(queryStr),
/src/shared/syncer.js-79-    headers: options.headers || {},
##############################################
/src/shared/base/router.js-171-        // in AMD environment realAction is the string containing path to the controller
/src/shared/base/router.js:172:        // which will be loaded async (might be preloaded)
/src/shared/base/router.js-173-        // Only used in AMD environment
##############################################
/src/shared/base/view.js-473-      try {
/src/shared/base/view.js:474:        parsed = JSON.parse(parsed);
/src/shared/base/view.js-475-      } catch (err) {}
