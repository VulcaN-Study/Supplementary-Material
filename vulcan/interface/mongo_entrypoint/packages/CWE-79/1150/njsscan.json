{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 17,
          "line": 2
        },
        "extra": {
          "line": "  \"projectName\": \"status-board\",",
          "message": "Syntax error"
        },
        "path": "/src/.all-contributorsrc",
        "start": {
          "col": 16,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 14,
          "line": 2
        },
        "extra": {
          "line": "  \"branches\": [",
          "message": "Syntax error"
        },
        "path": "/src/.realeaserc",
        "start": {
          "col": 13,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/.snyk",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 12,
          "line": 1
        },
        "extra": {
          "line": "MIT License",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            244,
            244
          ],
          "match_position": [
            34,
            45
          ],
          "match_string": "\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            2346,
            2346
          ],
          "match_position": [
            61,
            72
          ],
          "match_string": "\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            10533,
            10533
          ],
          "match_position": [
            29,
            40
          ],
          "match_string": "    return min + Math.floor(Math.random() * (max - min + 1));"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            806,
            806
          ],
          "match_position": [
            39,
            63
          ],
          "match_string": "\t\tif ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            829,
            829
          ],
          "match_position": [
            18,
            41
          ],
          "match_string": "\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            2500,
            2500
          ],
          "match_position": [
            7,
            47
          ],
          "match_string": "\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            2536,
            2536
          ],
          "match_position": [
            3,
            26
          ],
          "match_string": "\t\trsibling.test( selector ) && testContext( context.parentNode ) || context"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            2894,
            2894
          ],
          "match_position": [
            10,
            39
          ],
          "match_string": "\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            3015,
            3015
          ],
          "match_position": [
            9,
            32
          ],
          "match_string": "\t\t\tif ( rparentsprev.test( name ) ) {"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            3728,
            3744
          ],
          "match_position": [
            3,
            20
          ],
          "match_string": "\t\tdata = elem.getAttribute( name );\n\n\n\n\t\tif ( typeof data === \"string\" ) {\n\n\t\t\ttry {\n\n\t\t\t\tdata = data === \"true\" ? true :\n\n\t\t\t\t\tdata === \"false\" ? false :\n\n\t\t\t\t\tdata === \"null\" ? null :\n\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\n\t\t\t\t\t+data + \"\" === data ? +data :\n\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\n\n\t\t\t\t\tdata;\n\n\t\t\t} catch( e ) {}\n\n\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\n\t\t\tdata_user.set( elem, key, data );\n\n\t\t} else {\n\n\t\t\tdata = undefined;"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            5028,
            5028
          ],
          "match_position": [
            31,
            60
          ],
          "match_string": "\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            6102,
            6102
          ],
          "match_position": [
            8,
            28
          ],
          "match_string": "\tif ( !rmargin.test( prefix ) ) {"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            8424,
            8424
          ],
          "match_position": [
            24,
            45
          ],
          "match_string": "\t\t\tif ( traditional || rbracket.test( prefix ) ) {"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            8724,
            8724
          ],
          "match_position": [
            37,
            55
          ],
          "match_string": "\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            8726,
            8726
          ],
          "match_position": [
            107,
            126
          ],
          "match_string": "\t\t\ttypeof s.data === \"string\" && !( s.contentType || \"\" ).indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test( s.data ) && \"data\""
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            8741,
            8741
          ],
          "match_position": [
            15,
            33
          ],
          "match_string": "\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            11664,
            11664
          ],
          "match_position": [
            52,
            91
          ],
          "match_string": "                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            11666,
            11666
          ],
          "match_position": [
            58,
            98
          ],
          "match_string": "                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            11668,
            11668
          ],
          "match_position": [
            39,
            74
          ],
          "match_string": "                } else if (!strict && this._monthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            11878,
            11878
          ],
          "match_position": [
            26,
            59
          ],
          "match_string": "        while (i >= 0 && localFormattingTokens.test(format)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    },
    "regex_injection_dos": {
      "files": [
        {
          "file_path": "/src/assets/build/vendor.js",
          "match_lines": [
            11978,
            11978
          ],
          "match_position": [
            13,
            85
          ],
          "match_string": "            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\\\', '')), 'i'));"
        }
      ],
      "metadata": {
        "cwe": "CWE-400: Uncontrolled Resource Consumption",
        "description": "User controlled data in RegExp() can make the application vulnerable to layer 7 DoS.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
