<report_mosca>
 <Path>/src/lib/job-initialiser.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 32 -                          setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/job-dependencies/easyRequest/dependency.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 3 -  function queryRequest(options, callback) {

 Line: 21 -              queryRequest(options, (err, body, response) => {

 Line: 35 -          HTML: queryRequest,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/job-dependencies/postgreSQL/dependency.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -          query: (connectionString, query, params, callback) => {

 Line: 16 -                              throw Error(`Error executing postgreSQL query: ${queryError}`);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/job-dependencies/experimentalConfluence/dependency.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 31 -          getPageByCQL(baseUrl, auth, query, cb) {

 Line: 34 -                      cql: query,

 Line: 46 -                      return cb(null, new Error(`No page matching query ${query}`));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/Scheduler.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 78 -          setTimeout(() => {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/assets/build/vendor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 3440 -  			setTimeout( jQuery.ready );

 Line: 6321 -  	setTimeout(function() {

 Line: 6876 -  		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );

 Line: 6900 -  		var timeout = setTimeout( next, time );

 Line: 8153 -  				timeoutTimer = setTimeout(function() {

 Line: 9972 -      return setTimeout(function(){

 Line: 10012 -          timeout = setTimeout(later, remaining);

 Line: 10029 -          timeout = setTimeout(later, wait - last);

 Line: 10044 -        if (!timeout) timeout = setTimeout(later, wait);

 Line: 14187 -          return setTimeout(function(){ return func.apply(null, args); }, wait);

 Line: 14200 -            timeout = setTimeout(later, wait);

 Line: 14215 -            if (!timeout) timeout = setTimeout(later, wait);

 Line: 17983 -      , useCssAnimations /* Whether to use CSS animations or setTimeout */

 Line: 18103 -      fps: 20,              // Frames per second when using setTimeout()

 Line: 18146 -          // No CSS animation support, use setTimeout() instead

 Line: 18162 -            self.timeout = self.el && setTimeout(anim, ~~(1000/fps))

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/assets/build/vendor.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8446 -  // key/values into a query string

 Line: 14181 -       * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR

 Line: 14245 -          ignore_dragging: ['INPUT', 'TEXTAREA', 'SELECT', 'BUTTON'], // or function

 Line: 14287 -      *      'SELECT', 'BUTTON']`. If a function is used return true to ignore dragging.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/assets/javascripts/application.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 109 -            eval('widgetJS = ' + js);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/assets/bower_components/rickshaw/rickshaw.min.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 18 -  lement.classList.remove("disabled");self.legend.lines.forEach(function(l){if(line.series===l.series){}else{l.series.disable();l.element.classList.add("disabled")}})}else{self.legend.lines.forEach(function(l){l.series.enable();l.element.classList.remove("disabled")})}self.graph.update()}};if(this.legend){var $=jQuery;if(typeof $!="undefined"&&$(this.legend.list).sortable){$(this.legend.list).sortable({start:function(event,ui){ui.item.bind("no.onclick",function(event){event.preventDefault()})},stop:function(event,ui){setTimeout(function(){ui.item.unbind("no.onclick")},250)}})}this.legend.lines.forEach(function(l){self.addAnchor(l)})}this._addBehavior=function(){this.graph.series.forEach(function(s){s.disable=function(){if(self.graph.series.length<=1){throw"only one series left"}s.disabled=true};s.enable=function(){s.disabled=false}})};this._addBehavior();this.updateBehaviour=function(){this._addBehavior()}};Rickshaw.namespace("Rickshaw.Graph.HoverDetail");Rickshaw.Graph.HoverDetail=Rickshaw.Class.create({initialize:function(args){var graph=this.graph=args.graph;this.xFormatter=args.xFormatter||function(x){return new Date(x*1e3).toUTCString()};this.yFormatter=args.yFormatter||function(y){return y===null?y:y.toFixed(2)};var element=this.element=document.createElement("div");element.className="detail";this.visible=true;graph.element.appendChild(element);this.lastEvent=null;this._addListeners();this.onShow=args.onShow;this.onHide=args.onHide;this.onRender=args.onRender;this.formatter=args.formatter||this.formatter},formatter:function(series,x,y,formattedX,formattedY,d){return series.name+":&nbsp;"+formattedY},update:function(e){e=e||this.lastEvent;if(!e)return;this.lastEvent=e;if(!e.target.nodeName.match(/^(path|svg|rect|circle)$/))return;var graph=this.graph;var eventX=e.offsetX||e.layerX;var eventY=e.offsetY||e.layerY;var j=0;var points=[];var nearestPoint;this.graph.series.active().forEach(function(series){var data=this.graph.stackedData[j++];if(!data.length)return;var domainX=graph.x.invert(eventX);var domainIndexScale=d3.scale.linear().domain([data[0].x,data.slice(-1)[0].x]).ra</Result>
</report_mosca>

<report_mosca>
 <Path>/src/assets/bower_components/rickshaw/vendor/d3.v2.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 612 -          d3_timer_timeout = setTimeout(d3_timer_step, delay);

 Line: 4098 -      setTimeout(callback, 17);

</Result>
</report_mosca>

