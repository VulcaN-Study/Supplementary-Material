{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 8,
          "line": 1
        },
        "extra": {
          "line": "The MIT License (MIT)",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            10174,
            10174
          ],
          "match_position": [
            21,
            32
          ],
          "match_string": "  return Math.floor(Math.random() * (max - min)) + min;"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_timing_attack": {
      "files": [
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            2087,
            2094
          ],
          "match_position": [
            15,
            29
          ],
          "match_string": "              if (token !== false) {\n\n                return token;\n\n              } else if (this._backtrack) {\n\n                match = false;\n\n                continue; // rule action called reject() implying a rule MISmatch.\n\n              } else {\n\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                return false;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            2105,
            2106
          ],
          "match_position": [
            11,
            25
          ],
          "match_string": "          if (token !== false) {\n\n            return token;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            7578,
            7585
          ],
          "match_position": [
            15,
            29
          ],
          "match_string": "              if (token !== false) {\n\n                return token;\n\n              } else if (this._backtrack) {\n\n                match = false;\n\n                continue; // rule action called reject() implying a rule MISmatch.\n\n              } else {\n\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                return false;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            7596,
            7597
          ],
          "match_position": [
            11,
            25
          ],
          "match_string": "          if (token !== false) {\n\n            return token;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            9857,
            9864
          ],
          "match_position": [
            15,
            29
          ],
          "match_string": "              if (token !== false) {\n\n                return token;\n\n              } else if (this._backtrack) {\n\n                match = false;\n\n                continue; // rule action called reject() implying a rule MISmatch.\n\n              } else {\n\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                return false;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            9875,
            9876
          ],
          "match_position": [
            11,
            25
          ],
          "match_string": "          if (token !== false) {\n\n            return token;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            11487,
            11494
          ],
          "match_position": [
            15,
            29
          ],
          "match_string": "              if (token !== false) {\n\n                return token;\n\n              } else if (this._backtrack) {\n\n                match = false;\n\n                continue; // rule action called reject() implying a rule MISmatch.\n\n              } else {\n\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                return false;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            11505,
            11506
          ],
          "match_position": [
            11,
            25
          ],
          "match_string": "          if (token !== false) {\n\n            return token;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            12422,
            12429
          ],
          "match_position": [
            15,
            29
          ],
          "match_string": "              if (token !== false) {\n\n                return token;\n\n              } else if (this._backtrack) {\n\n                match = false;\n\n                continue; // rule action called reject() implying a rule MISmatch.\n\n              } else {\n\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                return false;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            12440,
            12441
          ],
          "match_position": [
            11,
            25
          ],
          "match_string": "          if (token !== false) {\n\n            return token;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            13754,
            13761
          ],
          "match_position": [
            15,
            29
          ],
          "match_string": "              if (token !== false) {\n\n                return token;\n\n              } else if (this._backtrack) {\n\n                match = false;\n\n                continue; // rule action called reject() implying a rule MISmatch.\n\n              } else {\n\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n                return false;"
        },
        {
          "file_path": "/src/dist/mermaid.core.js",
          "match_lines": [
            13772,
            13773
          ],
          "match_position": [
            11,
            25
          ],
          "match_string": "          if (token !== false) {\n\n            return token;"
        }
      ],
      "metadata": {
        "cwe": "CWE-208: Observable Timing Discrepancy",
        "description": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
