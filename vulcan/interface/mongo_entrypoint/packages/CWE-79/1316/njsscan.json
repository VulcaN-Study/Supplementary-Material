{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 19,
          "line": 1
        },
        "extra": {
          "line": "Copyright (C) 2011-2017 by Yehuda Katz",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "layer7_object_dos": {
      "files": [
        {
          "file_path": "/src/dist/amd/handlebars/compiler/compiler.js",
          "match_lines": [
            121,
            122
          ],
          "match_position": [
            7,
            35
          ],
          "match_string": "      var body = program.body,\n\n          bodyLength = body.length;"
        },
        {
          "file_path": "/src/dist/amd/handlebars/compiler/compiler.js",
          "match_lines": [
            123,
            124
          ],
          "match_position": [
            7,
            27
          ],
          "match_string": "      for (var i = 0; i < bodyLength; i++) {\n\n        this.accept(body[i]);"
        },
        {
          "file_path": "/src/dist/amd/handlebars/compiler/printer.js",
          "match_lines": [
            43,
            44
          ],
          "match_position": [
            7,
            51
          ],
          "match_string": "      for (i = 0, l = program.blockParams.length; i < l; i++) {\n\n        blockParams += ' ' + program.blockParams[i];"
        },
        {
          "file_path": "/src/dist/amd/handlebars/compiler/printer.js",
          "match_lines": [
            50,
            51
          ],
          "match_position": [
            5,
            32
          ],
          "match_string": "    for (i = 0, l = body.length; i < l; i++) {\n\n      out += this.accept(body[i]);"
        },
        {
          "file_path": "/src/dist/amd/handlebars/compiler/whitespace-control.js",
          "match_lines": [
            24,
            66
          ],
          "match_position": [
            5,
            59
          ],
          "match_string": "    for (var i = 0, l = body.length; i < l; i++) {\n\n      var current = body[i],\n\n          strip = this.accept(current);\n\n\n\n      if (!strip) {\n\n        continue;\n\n      }\n\n\n\n      var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n\n          _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n\n          openStandalone = strip.openStandalone && _isPrevWhitespace,\n\n          closeStandalone = strip.closeStandalone && _isNextWhitespace,\n\n          inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n\n\n      if (strip.close) {\n\n        omitRight(body, i, true);\n\n      }\n\n      if (strip.open) {\n\n        omitLeft(body, i, true);\n\n      }\n\n\n\n      if (doStandalone && inlineStandalone) {\n\n        omitRight(body, i);\n\n\n\n        if (omitLeft(body, i)) {\n\n          // If we are on a standalone node, save the indent info for partials\n\n          if (current.type === 'PartialStatement') {\n\n            // Pull out the whitespace from the final line\n\n            current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n\n          }\n\n        }\n\n      }\n\n      if (doStandalone && openStandalone) {\n\n        omitRight((current.program || current.inverse).body);\n\n\n\n        // Strip out the previous content node if it's whitespace only\n\n        omitLeft(body, i);\n\n      }\n\n      if (doStandalone && closeStandalone) {\n\n        // Always strip the next node\n\n        omitRight(body, i);\n\n\n\n        omitLeft((current.inverse || current.program).body);"
        },
        {
          "file_path": "/src/dist/handlebars.amd.js",
          "match_lines": [
            2051,
            2093
          ],
          "match_position": [
            5,
            59
          ],
          "match_string": "    for (var i = 0, l = body.length; i < l; i++) {\n\n      var current = body[i],\n\n          strip = this.accept(current);\n\n\n\n      if (!strip) {\n\n        continue;\n\n      }\n\n\n\n      var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n\n          _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n\n          openStandalone = strip.openStandalone && _isPrevWhitespace,\n\n          closeStandalone = strip.closeStandalone && _isNextWhitespace,\n\n          inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n\n\n      if (strip.close) {\n\n        omitRight(body, i, true);\n\n      }\n\n      if (strip.open) {\n\n        omitLeft(body, i, true);\n\n      }\n\n\n\n      if (doStandalone && inlineStandalone) {\n\n        omitRight(body, i);\n\n\n\n        if (omitLeft(body, i)) {\n\n          // If we are on a standalone node, save the indent info for partials\n\n          if (current.type === 'PartialStatement') {\n\n            // Pull out the whitespace from the final line\n\n            current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n\n          }\n\n        }\n\n      }\n\n      if (doStandalone && openStandalone) {\n\n        omitRight((current.program || current.inverse).body);\n\n\n\n        // Strip out the previous content node if it's whitespace only\n\n        omitLeft(body, i);\n\n      }\n\n      if (doStandalone && closeStandalone) {\n\n        // Always strip the next node\n\n        omitRight(body, i);\n\n\n\n        omitLeft((current.inverse || current.program).body);"
        },
        {
          "file_path": "/src/dist/handlebars.amd.js",
          "match_lines": [
            2643,
            2644
          ],
          "match_position": [
            7,
            35
          ],
          "match_string": "      var body = program.body,\n\n          bodyLength = body.length;"
        },
        {
          "file_path": "/src/dist/handlebars.amd.js",
          "match_lines": [
            2645,
            2646
          ],
          "match_position": [
            7,
            27
          ],
          "match_string": "      for (var i = 0; i < bodyLength; i++) {\n\n        this.accept(body[i]);"
        },
        {
          "file_path": "/src/dist/handlebars.js",
          "match_lines": [
            2471,
            2513
          ],
          "match_position": [
            4,
            58
          ],
          "match_string": "\t  for (var i = 0, l = body.length; i < l; i++) {\n\n\t    var current = body[i],\n\n\t        strip = this.accept(current);\n\n\n\n\t    if (!strip) {\n\n\t      continue;\n\n\t    }\n\n\n\n\t    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n\n\t        _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n\n\t        openStandalone = strip.openStandalone && _isPrevWhitespace,\n\n\t        closeStandalone = strip.closeStandalone && _isNextWhitespace,\n\n\t        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n\n\n\t    if (strip.close) {\n\n\t      omitRight(body, i, true);\n\n\t    }\n\n\t    if (strip.open) {\n\n\t      omitLeft(body, i, true);\n\n\t    }\n\n\n\n\t    if (doStandalone && inlineStandalone) {\n\n\t      omitRight(body, i);\n\n\n\n\t      if (omitLeft(body, i)) {\n\n\t        // If we are on a standalone node, save the indent info for partials\n\n\t        if (current.type === 'PartialStatement') {\n\n\t          // Pull out the whitespace from the final line\n\n\t          current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n\n\t        }\n\n\t      }\n\n\t    }\n\n\t    if (doStandalone && openStandalone) {\n\n\t      omitRight((current.program || current.inverse).body);\n\n\n\n\t      // Strip out the previous content node if it's whitespace only\n\n\t      omitLeft(body, i);\n\n\t    }\n\n\t    if (doStandalone && closeStandalone) {\n\n\t      // Always strip the next node\n\n\t      omitRight(body, i);\n\n\n\n\t      omitLeft((current.inverse || current.program).body);"
        },
        {
          "file_path": "/src/dist/handlebars.js",
          "match_lines": [
            3169,
            3170
          ],
          "match_position": [
            6,
            34
          ],
          "match_string": "\t    var body = program.body,\n\n\t        bodyLength = body.length;"
        },
        {
          "file_path": "/src/dist/handlebars.js",
          "match_lines": [
            3171,
            3172
          ],
          "match_position": [
            6,
            26
          ],
          "match_string": "\t    for (var i = 0; i < bodyLength; i++) {\n\n\t      this.accept(body[i]);"
        }
      ],
      "metadata": {
        "cwe": "CWE-400: Uncontrolled Resource Consumption",
        "description": "Layer7 Denial of Service. Looping over user controlled objects can result in DoS.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "ERROR"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/dist/amd/handlebars/compiler/helpers.js",
          "match_lines": [
            144,
            144
          ],
          "match_position": [
            21,
            45
          ],
          "match_string": "    var decorator = /\\*/.test(openBlock.open);"
        },
        {
          "file_path": "/src/dist/cjs/handlebars/compiler/helpers.js",
          "match_lines": [
            145,
            145
          ],
          "match_position": [
            19,
            43
          ],
          "match_string": "  var decorator = /\\*/.test(openBlock.open);"
        },
        {
          "file_path": "/src/dist/handlebars.amd.js",
          "match_lines": [
            2391,
            2391
          ],
          "match_position": [
            21,
            45
          ],
          "match_string": "    var decorator = /\\*/.test(openBlock.open);"
        },
        {
          "file_path": "/src/dist/handlebars.js",
          "match_lines": [
            2957,
            2957
          ],
          "match_position": [
            20,
            44
          ],
          "match_string": "\t  var decorator = /\\*/.test(openBlock.open);"
        },
        {
          "file_path": "/src/lib/handlebars/compiler/helpers.js",
          "match_lines": [
            126,
            126
          ],
          "match_position": [
            20,
            44
          ],
          "match_string": "  let decorator = (/\\*/.test(openBlock.open));"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
