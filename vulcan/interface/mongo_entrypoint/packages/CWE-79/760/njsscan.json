{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 8,
          "line": 1
        },
        "extra": {
          "line": "meteor@1.0.3",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/.versions",
        "start": {
          "col": 7,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "eval_nodejs": {
      "files": [
        {
          "file_path": "/src/index.js",
          "match_lines": [
            38,
            1192
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, _module.exports.settings, parameters)\n\n          : $.extend({}, _module.exports.settings),\n\n\n\n        className        = settings.className,\n\n        metadata         = settings.metadata,\n\n        regExp           = settings.regExp,\n\n        fields           = settings.fields,\n\n        selector         = settings.selector,\n\n        error            = settings.error,\n\n        namespace        = settings.namespace,\n\n\n\n        eventNamespace   = '.' + namespace,\n\n        moduleNamespace  = namespace + '-module',\n\n\n\n        $module          = $(this),\n\n        $prompt          = $module.find(selector.prompt),\n\n        $searchButton    = $module.find(selector.searchButton),\n\n        $results         = $module.find(selector.results),\n\n        $result          = $module.find(selector.result),\n\n        $category        = $module.find(selector.category),\n\n\n\n        element          = this,\n\n        instance         = $module.data(moduleNamespace),\n\n\n\n        disabledBubbled  = false,\n\n        resultsDismissed = false,\n\n\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing module');\n\n          module.get.settings();\n\n          module.determine.searchFields();\n\n          module.bind.events();\n\n          module.set.type();\n\n          module.create.results();\n\n          module.instantiate();\n\n        },\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n        destroy: function() {\n\n          module.verbose('Destroying instance');\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n        },\n\n\n\n        refresh: function() {\n\n          module.debug('Refreshing selector cache');\n\n          $prompt         = $module.find(selector.prompt);\n\n          $searchButton   = $module.find(selector.searchButton);\n\n          $category       = $module.find(selector.category);\n\n          $results        = $module.find(selector.results);\n\n          $result         = $module.find(selector.result);\n\n        },\n\n\n\n        refreshResults: function() {\n\n          $results = $module.find(selector.results);\n\n          $result  = $module.find(selector.result);\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.verbose('Binding events to search');\n\n            if(settings.automatic) {\n\n              $module\n\n                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)\n\n              ;\n\n              $prompt\n\n                .attr('autocomplete', 'off')\n\n              ;\n\n            }\n\n            $module\n\n              // prompt\n\n              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)\n\n              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)\n\n              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)\n\n              // search button\n\n              .on('click'     + eventNamespace, selector.searchButton, module.query)\n\n              // results\n\n              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)\n\n              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)\n\n              .on('click'     + eventNamespace, selector.result,  module.event.result.click)\n\n            ;\n\n          }\n\n        },\n\n\n\n        determine: {\n\n          searchFields: function() {\n\n            // this makes sure $.extend does not add specified search fields to default fields\n\n            // this is the only setting which should not extend defaults\n\n            if(parameters && parameters.searchFields !== undefined) {\n\n              settings.searchFields = parameters.searchFields;\n\n            }\n\n          }\n\n        },\n\n\n\n        event: {\n\n          input: function() {\n\n            if(settings.searchDelay) {\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.is.focused()) {\n\n                  module.query();\n\n                }\n\n              }, settings.searchDelay);\n\n            }\n\n            else {\n\n              module.query();\n\n            }\n\n          },\n\n          focus: function() {\n\n            module.set.focus();\n\n            if(settings.searchOnFocus && module.has.minimumCharacters() ) {\n\n              module.query(function() {\n\n                if(module.can.show() ) {\n\n                  module.showResults();\n\n                }\n\n              });\n\n            }\n\n          },\n\n          blur: function(event) {\n\n            var\n\n              pageLostFocus = (document.activeElement === this),\n\n              callback      = function() {\n\n                module.cancel.query();\n\n                module.remove.focus();\n\n                module.timer = setTimeout(module.hideResults, settings.hideDelay);\n\n              }\n\n            ;\n\n            if(pageLostFocus) {\n\n              return;\n\n            }\n\n            resultsDismissed = false;\n\n            if(module.resultsClicked) {\n\n              module.debug('Determining if user action caused search to close');\n\n              $module\n\n                .one('click.close' + eventNamespace, selector.results, function(event) {\n\n                  if(module.is.inMessage(event) || disabledBubbled) {\n\n                    $prompt.focus();\n\n                    return;\n\n                  }\n\n                  disabledBubbled = false;\n\n                  if( !module.is.animating() && !module.is.hidden()) {\n\n                    callback();\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Input blurred without user action, closing results');\n\n              callback();\n\n            }\n\n          },\n\n          result: {\n\n            mousedown: function() {\n\n              module.resultsClicked = true;\n\n            },\n\n            mouseup: function() {\n\n              module.resultsClicked = false;\n\n            },\n\n            click: function(event) {\n\n              module.debug('Search result selected');\n\n              var\n\n                $result = $(this),\n\n                $title  = $result.find(selector.title).eq(0),\n\n                $link   = $result.is('a[href]')\n\n                  ? $result\n\n                  : $result.find('a[href]').eq(0),\n\n                href    = $link.attr('href')   || false,\n\n                target  = $link.attr('target') || false,\n\n                title   = $title.html(),\n\n                // title is used for result lookup\n\n                value   = ($title.length > 0)\n\n                  ? $title.text()\n\n                  : false,\n\n                results = module.get.results(),\n\n                result  = $result.data(metadata.result) || module.get.result(value, results),\n\n                returnedValue\n\n              ;\n\n              if( $.isFunction(settings.onSelect) ) {\n\n                if(settings.onSelect.call(element, result, results) === false) {\n\n                  module.debug('Custom onSelect callback cancelled default select action');\n\n                  disabledBubbled = true;\n\n                  return;\n\n                }\n\n              }\n\n              module.hideResults();\n\n              if(value) {\n\n                module.set.value(value);\n\n              }\n\n              if(href) {\n\n                module.verbose('Opening search link found in result', $link);\n\n                if(target == '_blank' || event.ctrlKey) {\n\n                  window.open(href);\n\n                }\n\n                else {\n\n                  window.location.href = (href);\n\n                }\n\n              }\n\n            }\n\n          }\n\n        },\n\n        handleKeyboard: function(event) {\n\n          var\n\n            // force selector refresh\n\n            $result         = $module.find(selector.result),\n\n            $category       = $module.find(selector.category),\n\n            $activeResult   = $result.filter('.' + className.active),\n\n            currentIndex    = $result.index( $activeResult ),\n\n            resultSize      = $result.length,\n\n            hasActiveResult = $activeResult.length > 0,\n\n\n\n            keyCode         = event.which,\n\n            keys            = {\n\n              backspace : 8,\n\n              enter     : 13,\n\n              escape    : 27,\n\n              upArrow   : 38,\n\n              downArrow : 40\n\n            },\n\n            newIndex\n\n          ;\n\n          // search shortcuts\n\n          if(keyCode == keys.escape) {\n\n            module.verbose('Escape key pressed, blurring search field');\n\n            module.hideResults();\n\n            resultsDismissed = true;\n\n          }\n\n          if( module.is.visible() ) {\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, selecting active result');\n\n              if( $result.filter('.' + className.active).length > 0 ) {\n\n                module.event.result.click.call($result.filter('.' + className.active), event);\n\n                event.preventDefault();\n\n                return false;\n\n              }\n\n            }\n\n            else if(keyCode == keys.upArrow && hasActiveResult) {\n\n              module.verbose('Up key pressed, changing active result');\n\n              newIndex = (currentIndex - 1 < 0)\n\n                ? currentIndex\n\n                : currentIndex - 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n            else if(keyCode == keys.downArrow) {\n\n              module.verbose('Down key pressed, changing active result');\n\n              newIndex = (currentIndex + 1 >= resultSize)\n\n                ? currentIndex\n\n                : currentIndex + 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n          }\n\n          else {\n\n            // query shortcuts\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, executing query');\n\n              module.query();\n\n              module.set.buttonPressed();\n\n              $prompt.one('keyup', module.remove.buttonFocus);\n\n            }\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          api: function(searchTerm, callback) {\n\n            var\n\n              apiSettings = {\n\n                debug             : settings.debug,\n\n                on                : false,\n\n                cache             : settings.cache,\n\n                action            : 'search',\n\n                urlData           : {\n\n                  query : searchTerm\n\n                },\n\n                onSuccess         : function(response) {\n\n                  module.parse.response.call(element, response, searchTerm);\n\n                  callback();\n\n                },\n\n                onFailure         : function() {\n\n                  module.displayMessage(error.serverError);\n\n                  callback();\n\n                },\n\n                onAbort : function(response) {\n\n                },\n\n                onError           : module.error\n\n              },\n\n              searchHTML\n\n            ;\n\n            $.extend(true, apiSettings, settings.apiSettings);\n\n            module.verbose('Setting up API request', apiSettings);\n\n            $module.api(apiSettings);\n\n          }\n\n        },\n\n\n\n        can: {\n\n          useAPI: function() {\n\n            return $.fn.api !== undefined;\n\n          },\n\n          show: function() {\n\n            return module.is.focused() && !module.is.visible() && !module.is.empty();\n\n          },\n\n          transition: function() {\n\n            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');\n\n          }\n\n        },\n\n\n\n        is: {\n\n          animating: function() {\n\n            return $results.hasClass(className.animating);\n\n          },\n\n          hidden: function() {\n\n            return $results.hasClass(className.hidden);\n\n          },\n\n          inMessage: function(event) {\n\n            if(!event.target) {\n\n              return;\n\n            }\n\n            var\n\n              $target = $(event.target),\n\n              isInDOM = $.contains(document.documentElement, event.target)\n\n            ;\n\n            return (isInDOM && $target.closest(selector.message).length > 0);\n\n          },\n\n          empty: function() {\n\n            return ($results.html() === '');\n\n          },\n\n          visible: function() {\n\n            return ($results.filter(':visible').length > 0);\n\n          },\n\n          focused: function() {\n\n            return ($prompt.filter(':focus').length > 0);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          settings: function() {\n\n            if($.isPlainObject(parameters) && parameters.searchFullText) {\n\n              settings.fullTextSearch = parameters.searchFullText;\n\n              module.error(settings.error.oldSearchSyntax, element);\n\n            }\n\n          },\n\n          inputEvent: function() {\n\n            var\n\n              prompt = $prompt[0],\n\n              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)\n\n                ? 'input'\n\n                : (prompt !== undefined && prompt.onpropertychange !== undefined)\n\n                  ? 'propertychange'\n\n                  : 'keyup'\n\n            ;\n\n            return inputEvent;\n\n          },\n\n          value: function() {\n\n            return $prompt.val();\n\n          },\n\n          results: function() {\n\n            var\n\n              results = $module.data(metadata.results)\n\n            ;\n\n            return results;\n\n          },\n\n          result: function(value, results) {\n\n            var\n\n              lookupFields = ['title', 'id'],\n\n              result       = false\n\n            ;\n\n            value = (value !== undefined)\n\n              ? value\n\n              : module.get.value()\n\n            ;\n\n            results = (results !== undefined)\n\n              ? results\n\n              : module.get.results()\n\n            ;\n\n            if(settings.type === 'category') {\n\n              module.debug('Finding result that matches', value);\n\n              $.each(results, function(index, category) {\n\n                if($.isArray(category.results)) {\n\n                  result = module.search.object(value, category.results, lookupFields)[0];\n\n                  // don't continue searching if a result is found\n\n                  if(result) {\n\n                    return false;\n\n                  }\n\n                }\n\n              });\n\n            }\n\n            else {\n\n              module.debug('Finding result in results object', value);\n\n              result = module.search.object(value, results, lookupFields)[0];\n\n            }\n\n            return result || false;\n\n          },\n\n        },\n\n\n\n        select: {\n\n          firstResult: function() {\n\n            module.verbose('Selecting first result');\n\n            $result.first().addClass(className.active);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          focus: function() {\n\n            $module.addClass(className.focus);\n\n          },\n\n          loading: function() {\n\n            $module.addClass(className.loading);\n\n          },\n\n          value: function(value) {\n\n            module.verbose('Setting search input value', value);\n\n            $prompt\n\n              .val(value)\n\n            ;\n\n          },\n\n          type: function(type) {\n\n            type = type || settings.type;\n\n            if(settings.type == 'category') {\n\n              $module.addClass(settings.type);\n\n            }\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.addClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          loading: function() {\n\n            $module.removeClass(className.loading);\n\n          },\n\n          focus: function() {\n\n            $module.removeClass(className.focus);\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.removeClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        query: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          var\n\n            searchTerm = module.get.value(),\n\n            cache = module.read.cache(searchTerm)\n\n          ;\n\n          callback = callback || function() {};\n\n          if( module.has.minimumCharacters() )  {\n\n            if(cache) {\n\n              module.debug('Reading result from cache', searchTerm);\n\n              module.save.results(cache.results);\n\n              module.addResults(cache.html);\n\n              module.inject.id(cache.results);\n\n              callback();\n\n            }\n\n            else {\n\n              module.debug('Querying for', searchTerm);\n\n              if($.isPlainObject(settings.source) || $.isArray(settings.source)) {\n\n                module.search.local(searchTerm);\n\n                callback();\n\n              }\n\n              else if( module.can.useAPI() ) {\n\n                module.search.remote(searchTerm, callback);\n\n              }\n\n              else {\n\n                module.error(error.source);\n\n                callback();\n\n              }\n\n            }\n\n            settings.onSearchQuery.call(element, searchTerm);\n\n          }\n\n          else {\n\n            module.hideResults();\n\n          }\n\n        },\n\n\n\n        search: {\n\n          local: function(searchTerm) {\n\n            var\n\n              results = module.search.object(searchTerm, settings.content),\n\n              searchHTML\n\n            ;\n\n            module.set.loading();\n\n            module.save.results(results);\n\n            module.debug('Returned full local search results', results);\n\n            if(settings.maxResults > 0) {\n\n              module.debug('Using specified max results', results);\n\n              results = results.slice(0, settings.maxResults);\n\n            }\n\n            if(settings.type == 'category') {\n\n              results = module.create.categoryResults(results);\n\n            }\n\n            searchHTML = module.generateResults({\n\n              results: results\n\n            });\n\n            module.remove.loading();\n\n            module.addResults(searchHTML);\n\n            module.inject.id(results);\n\n            module.write.cache(searchTerm, {\n\n              html    : searchHTML,\n\n              results : results\n\n            });\n\n          },\n\n          remote: function(searchTerm, callback) {\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if($module.api('is loading')) {\n\n              $module.api('abort');\n\n            }\n\n            module.setup.api(searchTerm, callback);\n\n            $module\n\n              .api('query')\n\n            ;\n\n          },\n\n          object: function(searchTerm, source, searchFields) {\n\n            var\n\n              results      = [],\n\n              exactResults = [],\n\n              fuzzyResults = [],\n\n              searchExp    = searchTerm.toString().replace(regExp.escape, '\\\\$&'),\n\n              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),\n\n\n\n              // avoid duplicates when pushing results\n\n              addResult = function(array, result) {\n\n                var\n\n                  notResult      = ($.inArray(result, results) == -1),\n\n                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1),\n\n                  notExactResults = ($.inArray(result, exactResults) == -1)\n\n                ;\n\n                if(notResult && notFuzzyResult && notExactResults) {\n\n                  array.push(result);\n\n                }\n\n              }\n\n            ;\n\n            source = source || settings.source;\n\n            searchFields = (searchFields !== undefined)\n\n              ? searchFields\n\n              : settings.searchFields\n\n            ;\n\n\n\n            // search fields should be array to loop correctly\n\n            if(!$.isArray(searchFields)) {\n\n              searchFields = [searchFields];\n\n            }\n\n\n\n            // exit conditions if no source\n\n            if(source === undefined || source === false) {\n\n              module.error(error.source);\n\n              return [];\n\n            }\n\n            // iterate through search fields looking for matches\n\n            $.each(searchFields, function(index, field) {\n\n              $.each(source, function(label, content) {\n\n                var\n\n                  fieldExists = (typeof content[field] == 'string')\n\n                ;\n\n                if(fieldExists) {\n\n                  if( content[field].search(matchRegExp) !== -1) {\n\n                    // content starts with value (first in results)\n\n                    addResult(results, content);\n\n                  }\n\n                  else if(settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(exactResults, content);\n\n                  }\n\n                  else if(settings.fullTextSearch == true && module.fuzzySearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(fuzzyResults, content);\n\n                  }\n\n                }\n\n              });\n\n            });\n\n            $.merge(exactResults, fuzzyResults)\n\n            $.merge(results, exactResults);\n\n            return results;\n\n          }\n\n        },\n\n        exactSearch: function (query, term) {\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(term.indexOf(query) > -1) {\n\n             return true;\n\n          }\n\n          return false;\n\n        },\n\n        fuzzySearch: function(query, term) {\n\n          var\n\n            termLength  = term.length,\n\n            queryLength = query.length\n\n          ;\n\n          if(typeof query !== 'string') {\n\n            return false;\n\n          }\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(queryLength > termLength) {\n\n            return false;\n\n          }\n\n          if(queryLength === termLength) {\n\n            return (query === term);\n\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n\n            var\n\n              queryCharacter = query.charCodeAt(characterIndex)\n\n            ;\n\n            while(nextCharacterIndex < termLength) {\n\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n\n                continue search;\n\n              }\n\n            }\n\n            return false;\n\n          }\n\n          return true;\n\n        },\n\n\n\n        parse: {\n\n          response: function(response, searchTerm) {\n\n            var\n\n              searchHTML = module.generateResults(response)\n\n            ;\n\n            module.verbose('Parsing server response', response);\n\n            if(response !== undefined) {\n\n              if(searchTerm !== undefined && response[fields.results] !== undefined) {\n\n                module.addResults(searchHTML);\n\n                module.inject.id(response[fields.results]);\n\n                module.write.cache(searchTerm, {\n\n                  html    : searchHTML,\n\n                  results : response[fields.results]\n\n                });\n\n                module.save.results(response[fields.results]);\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        cancel: {\n\n          query: function() {\n\n            if( module.can.useAPI() ) {\n\n              $module.api('abort');\n\n            }\n\n          }\n\n        },\n\n\n\n        has: {\n\n          minimumCharacters: function() {\n\n            var\n\n              searchTerm    = module.get.value(),\n\n              numCharacters = searchTerm.length\n\n            ;\n\n            return (numCharacters >= settings.minCharacters);\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              return false;\n\n            }\n\n            var\n\n              html = $results.html()\n\n            ;\n\n            return html != '';\n\n          }\n\n        },\n\n\n\n        clear: {\n\n          cache: function(value) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(!value) {\n\n              module.debug('Clearing cache', value);\n\n              $module.removeData(metadata.cache);\n\n            }\n\n            else if(value && cache && cache[value]) {\n\n              module.debug('Removing value from cache', value);\n\n              delete cache[value];\n\n              $module.data(metadata.cache, cache);\n\n            }\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cache: function(name) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Checking cache for generated html for query', name);\n\n              return (typeof cache == 'object') && (cache[name] !== undefined)\n\n                ? cache[name]\n\n                : false\n\n              ;\n\n            }\n\n            return false;\n\n          }\n\n        },\n\n\n\n        create: {\n\n          categoryResults: function(results) {\n\n            var\n\n              categoryResults = {}\n\n            ;\n\n            $.each(results, function(index, result) {\n\n              if(!result.category) {\n\n                return;\n\n              }\n\n              if(categoryResults[result.category] === undefined) {\n\n                module.verbose('Creating new category of results', result.category);\n\n                categoryResults[result.category] = {\n\n                  name    : result.category,\n\n                  results : [result]\n\n                }\n\n              }\n\n              else {\n\n                categoryResults[result.category].results.push(result);\n\n              }\n\n            });\n\n            return categoryResults;\n\n          },\n\n          id: function(resultIndex, categoryIndex) {\n\n            var\n\n              resultID      = (resultIndex + 1), // not zero indexed\n\n              categoryID    = (categoryIndex + 1),\n\n              firstCharCode,\n\n              letterID,\n\n              id\n\n            ;\n\n            if(categoryIndex !== undefined) {\n\n              // start char code for \"A\"\n\n              letterID = String.fromCharCode(97 + categoryIndex);\n\n              id          = letterID + resultID;\n\n              module.verbose('Creating category result id', id);\n\n            }\n\n            else {\n\n              id = resultID;\n\n              module.verbose('Creating result id', id);\n\n            }\n\n            return id;\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              $results = $('<div />')\n\n                .addClass(className.results)\n\n                .appendTo($module)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        inject: {\n\n          result: function(result, resultIndex, categoryIndex) {\n\n            module.verbose('Injecting result into results');\n\n            var\n\n              $selectedResult = (categoryIndex !== undefined)\n\n                ? $results\n\n                    .children().eq(categoryIndex)\n\n                      .children(selector.results)\n\n                        .first()\n\n                        .children(selector.result)\n\n                          .eq(resultIndex)\n\n                : $results\n\n                    .children(selector.result).eq(resultIndex)\n\n            ;\n\n            module.verbose('Injecting results metadata', $selectedResult);\n\n            $selectedResult\n\n              .data(metadata.result, result)\n\n            ;\n\n          },\n\n          id: function(results) {\n\n            module.debug('Injecting unique ids into results');\n\n            var\n\n              // since results may be object, we must use counters\n\n              categoryIndex = 0,\n\n              resultIndex   = 0\n\n            ;\n\n            if(settings.type === 'category') {\n\n              // iterate through each category result\n\n              $.each(results, function(index, category) {\n\n                resultIndex = 0;\n\n                $.each(category.results, function(index, value) {\n\n                  var\n\n                    result = category.results[index]\n\n                  ;\n\n                  if(result.id === undefined) {\n\n                    result.id = module.create.id(resultIndex, categoryIndex);\n\n                  }\n\n                  module.inject.result(result, resultIndex, categoryIndex);\n\n                  resultIndex++;\n\n                });\n\n                categoryIndex++;\n\n              });\n\n            }\n\n            else {\n\n              // top level\n\n              $.each(results, function(index, value) {\n\n                var\n\n                  result = results[index]\n\n                ;\n\n                if(result.id === undefined) {\n\n                  result.id = module.create.id(resultIndex);\n\n                }\n\n                module.inject.result(result, resultIndex);\n\n                resultIndex++;\n\n              });\n\n            }\n\n            return results;\n\n          }\n\n        },\n\n\n\n        save: {\n\n          results: function(results) {\n\n            module.verbose('Saving current search results to metadata', results);\n\n            $module.data(metadata.results, results);\n\n          }\n\n        },\n\n\n\n        write: {\n\n          cache: function(name, value) {\n\n            var\n\n              cache = ($module.data(metadata.cache) !== undefined)\n\n                ? $module.data(metadata.cache)\n\n                : {}\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Writing generated html to cache', name, value);\n\n              cache[name] = value;\n\n              $module\n\n                .data(metadata.cache, cache)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        addResults: function(html) {\n\n          if( $.isFunction(settings.onResultsAdd) ) {\n\n            if( settings.onResultsAdd.call($results, html) === false ) {\n\n              module.debug('onResultsAdd callback cancelled default action');\n\n              return false;\n\n            }\n\n          }\n\n          if(html) {\n\n            $results\n\n              .html(html)\n\n            ;\n\n            module.refreshResults();\n\n            if(settings.selectFirstResult) {\n\n              module.select.firstResult();\n\n            }\n\n            module.showResults();\n\n          }\n\n          else {\n\n            module.hideResults(function() {\n\n              $results.empty();\n\n            });\n\n          }\n\n        },\n\n\n\n        showResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if(resultsDismissed) {\n\n            return;\n\n          }\n\n          if(!module.is.visible() && module.has.results()) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Showing results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' in',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Showing results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeIn(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsOpen.call($results);\n\n          }\n\n        },\n\n        hideResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if( module.is.visible() ) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Hiding results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' out',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Hiding results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeOut(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsClose.call($results);\n\n          }\n\n        },\n\n\n\n        generateResults: function(response) {\n\n          module.debug('Generating html from response', response);\n\n          var\n\n            template       = settings.templates[settings.type],\n\n            isProperObject = ($.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results])),\n\n            isProperArray  = ($.isArray(response[fields.results]) && response[fields.results].length > 0),\n\n            html           = ''\n\n          ;\n\n          if(isProperObject || isProperArray ) {\n\n            if(settings.maxResults > 0) {\n\n              if(isProperObject) {\n\n                if(settings.type == 'standard') {\n\n                  module.error(error.maxResults);\n\n                }\n\n              }\n\n              else {\n\n                response[fields.results] = response[fields.results].slice(0, settings.maxResults);\n\n              }\n\n            }\n\n            if($.isFunction(template)) {\n\n              html = template(response, fields);\n\n            }\n\n            else {\n\n              module.error(error.noTemplate, false);\n\n            }\n\n          }\n\n          else if(settings.showNoResults) {\n\n            html = module.displayMessage(error.noResults, 'empty');\n\n          }\n\n          settings.onResults.call(element, response);\n\n          return html;\n\n        },\n\n\n\n        displayMessage: function(text, type) {\n\n          type = type || 'standard';\n\n          module.debug('Displaying message', text, type);\n\n          module.addResults( settings.templates.message(text, type) );\n\n          return settings.templates.message(text, type);\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            settings[name] = value;\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if($allModules.length > 1) {\n\n              title += ' ' + '(' + $allModules.length + ')';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        },
        {
          "file_path": "/src/search.js",
          "match_lines": [
            37,
            1191
          ],
          "match_position": [
            7,
            8
          ],
          "match_string": "      var\n\n        settings          = ( $.isPlainObject(parameters) )\n\n          ? $.extend(true, {}, $.fn.search.settings, parameters)\n\n          : $.extend({}, $.fn.search.settings),\n\n\n\n        className        = settings.className,\n\n        metadata         = settings.metadata,\n\n        regExp           = settings.regExp,\n\n        fields           = settings.fields,\n\n        selector         = settings.selector,\n\n        error            = settings.error,\n\n        namespace        = settings.namespace,\n\n\n\n        eventNamespace   = '.' + namespace,\n\n        moduleNamespace  = namespace + '-module',\n\n\n\n        $module          = $(this),\n\n        $prompt          = $module.find(selector.prompt),\n\n        $searchButton    = $module.find(selector.searchButton),\n\n        $results         = $module.find(selector.results),\n\n        $result          = $module.find(selector.result),\n\n        $category        = $module.find(selector.category),\n\n\n\n        element          = this,\n\n        instance         = $module.data(moduleNamespace),\n\n\n\n        disabledBubbled  = false,\n\n        resultsDismissed = false,\n\n\n\n        module\n\n      ;\n\n\n\n      module = {\n\n\n\n        initialize: function() {\n\n          module.verbose('Initializing module');\n\n          module.get.settings();\n\n          module.determine.searchFields();\n\n          module.bind.events();\n\n          module.set.type();\n\n          module.create.results();\n\n          module.instantiate();\n\n        },\n\n        instantiate: function() {\n\n          module.verbose('Storing instance of module', module);\n\n          instance = module;\n\n          $module\n\n            .data(moduleNamespace, module)\n\n          ;\n\n        },\n\n        destroy: function() {\n\n          module.verbose('Destroying instance');\n\n          $module\n\n            .off(eventNamespace)\n\n            .removeData(moduleNamespace)\n\n          ;\n\n        },\n\n\n\n        refresh: function() {\n\n          module.debug('Refreshing selector cache');\n\n          $prompt         = $module.find(selector.prompt);\n\n          $searchButton   = $module.find(selector.searchButton);\n\n          $category       = $module.find(selector.category);\n\n          $results        = $module.find(selector.results);\n\n          $result         = $module.find(selector.result);\n\n        },\n\n\n\n        refreshResults: function() {\n\n          $results = $module.find(selector.results);\n\n          $result  = $module.find(selector.result);\n\n        },\n\n\n\n        bind: {\n\n          events: function() {\n\n            module.verbose('Binding events to search');\n\n            if(settings.automatic) {\n\n              $module\n\n                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)\n\n              ;\n\n              $prompt\n\n                .attr('autocomplete', 'off')\n\n              ;\n\n            }\n\n            $module\n\n              // prompt\n\n              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)\n\n              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)\n\n              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)\n\n              // search button\n\n              .on('click'     + eventNamespace, selector.searchButton, module.query)\n\n              // results\n\n              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)\n\n              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)\n\n              .on('click'     + eventNamespace, selector.result,  module.event.result.click)\n\n            ;\n\n          }\n\n        },\n\n\n\n        determine: {\n\n          searchFields: function() {\n\n            // this makes sure $.extend does not add specified search fields to default fields\n\n            // this is the only setting which should not extend defaults\n\n            if(parameters && parameters.searchFields !== undefined) {\n\n              settings.searchFields = parameters.searchFields;\n\n            }\n\n          }\n\n        },\n\n\n\n        event: {\n\n          input: function() {\n\n            if(settings.searchDelay) {\n\n              clearTimeout(module.timer);\n\n              module.timer = setTimeout(function() {\n\n                if(module.is.focused()) {\n\n                  module.query();\n\n                }\n\n              }, settings.searchDelay);\n\n            }\n\n            else {\n\n              module.query();\n\n            }\n\n          },\n\n          focus: function() {\n\n            module.set.focus();\n\n            if(settings.searchOnFocus && module.has.minimumCharacters() ) {\n\n              module.query(function() {\n\n                if(module.can.show() ) {\n\n                  module.showResults();\n\n                }\n\n              });\n\n            }\n\n          },\n\n          blur: function(event) {\n\n            var\n\n              pageLostFocus = (document.activeElement === this),\n\n              callback      = function() {\n\n                module.cancel.query();\n\n                module.remove.focus();\n\n                module.timer = setTimeout(module.hideResults, settings.hideDelay);\n\n              }\n\n            ;\n\n            if(pageLostFocus) {\n\n              return;\n\n            }\n\n            resultsDismissed = false;\n\n            if(module.resultsClicked) {\n\n              module.debug('Determining if user action caused search to close');\n\n              $module\n\n                .one('click.close' + eventNamespace, selector.results, function(event) {\n\n                  if(module.is.inMessage(event) || disabledBubbled) {\n\n                    $prompt.focus();\n\n                    return;\n\n                  }\n\n                  disabledBubbled = false;\n\n                  if( !module.is.animating() && !module.is.hidden()) {\n\n                    callback();\n\n                  }\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Input blurred without user action, closing results');\n\n              callback();\n\n            }\n\n          },\n\n          result: {\n\n            mousedown: function() {\n\n              module.resultsClicked = true;\n\n            },\n\n            mouseup: function() {\n\n              module.resultsClicked = false;\n\n            },\n\n            click: function(event) {\n\n              module.debug('Search result selected');\n\n              var\n\n                $result = $(this),\n\n                $title  = $result.find(selector.title).eq(0),\n\n                $link   = $result.is('a[href]')\n\n                  ? $result\n\n                  : $result.find('a[href]').eq(0),\n\n                href    = $link.attr('href')   || false,\n\n                target  = $link.attr('target') || false,\n\n                title   = $title.html(),\n\n                // title is used for result lookup\n\n                value   = ($title.length > 0)\n\n                  ? $title.text()\n\n                  : false,\n\n                results = module.get.results(),\n\n                result  = $result.data(metadata.result) || module.get.result(value, results),\n\n                returnedValue\n\n              ;\n\n              if( $.isFunction(settings.onSelect) ) {\n\n                if(settings.onSelect.call(element, result, results) === false) {\n\n                  module.debug('Custom onSelect callback cancelled default select action');\n\n                  disabledBubbled = true;\n\n                  return;\n\n                }\n\n              }\n\n              module.hideResults();\n\n              if(value) {\n\n                module.set.value(value);\n\n              }\n\n              if(href) {\n\n                module.verbose('Opening search link found in result', $link);\n\n                if(target == '_blank' || event.ctrlKey) {\n\n                  window.open(href);\n\n                }\n\n                else {\n\n                  window.location.href = (href);\n\n                }\n\n              }\n\n            }\n\n          }\n\n        },\n\n        handleKeyboard: function(event) {\n\n          var\n\n            // force selector refresh\n\n            $result         = $module.find(selector.result),\n\n            $category       = $module.find(selector.category),\n\n            $activeResult   = $result.filter('.' + className.active),\n\n            currentIndex    = $result.index( $activeResult ),\n\n            resultSize      = $result.length,\n\n            hasActiveResult = $activeResult.length > 0,\n\n\n\n            keyCode         = event.which,\n\n            keys            = {\n\n              backspace : 8,\n\n              enter     : 13,\n\n              escape    : 27,\n\n              upArrow   : 38,\n\n              downArrow : 40\n\n            },\n\n            newIndex\n\n          ;\n\n          // search shortcuts\n\n          if(keyCode == keys.escape) {\n\n            module.verbose('Escape key pressed, blurring search field');\n\n            module.hideResults();\n\n            resultsDismissed = true;\n\n          }\n\n          if( module.is.visible() ) {\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, selecting active result');\n\n              if( $result.filter('.' + className.active).length > 0 ) {\n\n                module.event.result.click.call($result.filter('.' + className.active), event);\n\n                event.preventDefault();\n\n                return false;\n\n              }\n\n            }\n\n            else if(keyCode == keys.upArrow && hasActiveResult) {\n\n              module.verbose('Up key pressed, changing active result');\n\n              newIndex = (currentIndex - 1 < 0)\n\n                ? currentIndex\n\n                : currentIndex - 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n            else if(keyCode == keys.downArrow) {\n\n              module.verbose('Down key pressed, changing active result');\n\n              newIndex = (currentIndex + 1 >= resultSize)\n\n                ? currentIndex\n\n                : currentIndex + 1\n\n              ;\n\n              $category\n\n                .removeClass(className.active)\n\n              ;\n\n              $result\n\n                .removeClass(className.active)\n\n                .eq(newIndex)\n\n                  .addClass(className.active)\n\n                  .closest($category)\n\n                    .addClass(className.active)\n\n              ;\n\n              event.preventDefault();\n\n            }\n\n          }\n\n          else {\n\n            // query shortcuts\n\n            if(keyCode == keys.enter) {\n\n              module.verbose('Enter key pressed, executing query');\n\n              module.query();\n\n              module.set.buttonPressed();\n\n              $prompt.one('keyup', module.remove.buttonFocus);\n\n            }\n\n          }\n\n        },\n\n\n\n        setup: {\n\n          api: function(searchTerm, callback) {\n\n            var\n\n              apiSettings = {\n\n                debug             : settings.debug,\n\n                on                : false,\n\n                cache             : settings.cache,\n\n                action            : 'search',\n\n                urlData           : {\n\n                  query : searchTerm\n\n                },\n\n                onSuccess         : function(response) {\n\n                  module.parse.response.call(element, response, searchTerm);\n\n                  callback();\n\n                },\n\n                onFailure         : function() {\n\n                  module.displayMessage(error.serverError);\n\n                  callback();\n\n                },\n\n                onAbort : function(response) {\n\n                },\n\n                onError           : module.error\n\n              },\n\n              searchHTML\n\n            ;\n\n            $.extend(true, apiSettings, settings.apiSettings);\n\n            module.verbose('Setting up API request', apiSettings);\n\n            $module.api(apiSettings);\n\n          }\n\n        },\n\n\n\n        can: {\n\n          useAPI: function() {\n\n            return $.fn.api !== undefined;\n\n          },\n\n          show: function() {\n\n            return module.is.focused() && !module.is.visible() && !module.is.empty();\n\n          },\n\n          transition: function() {\n\n            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');\n\n          }\n\n        },\n\n\n\n        is: {\n\n          animating: function() {\n\n            return $results.hasClass(className.animating);\n\n          },\n\n          hidden: function() {\n\n            return $results.hasClass(className.hidden);\n\n          },\n\n          inMessage: function(event) {\n\n            if(!event.target) {\n\n              return;\n\n            }\n\n            var\n\n              $target = $(event.target),\n\n              isInDOM = $.contains(document.documentElement, event.target)\n\n            ;\n\n            return (isInDOM && $target.closest(selector.message).length > 0);\n\n          },\n\n          empty: function() {\n\n            return ($results.html() === '');\n\n          },\n\n          visible: function() {\n\n            return ($results.filter(':visible').length > 0);\n\n          },\n\n          focused: function() {\n\n            return ($prompt.filter(':focus').length > 0);\n\n          }\n\n        },\n\n\n\n        get: {\n\n          settings: function() {\n\n            if($.isPlainObject(parameters) && parameters.searchFullText) {\n\n              settings.fullTextSearch = parameters.searchFullText;\n\n              module.error(settings.error.oldSearchSyntax, element);\n\n            }\n\n          },\n\n          inputEvent: function() {\n\n            var\n\n              prompt = $prompt[0],\n\n              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)\n\n                ? 'input'\n\n                : (prompt !== undefined && prompt.onpropertychange !== undefined)\n\n                  ? 'propertychange'\n\n                  : 'keyup'\n\n            ;\n\n            return inputEvent;\n\n          },\n\n          value: function() {\n\n            return $prompt.val();\n\n          },\n\n          results: function() {\n\n            var\n\n              results = $module.data(metadata.results)\n\n            ;\n\n            return results;\n\n          },\n\n          result: function(value, results) {\n\n            var\n\n              lookupFields = ['title', 'id'],\n\n              result       = false\n\n            ;\n\n            value = (value !== undefined)\n\n              ? value\n\n              : module.get.value()\n\n            ;\n\n            results = (results !== undefined)\n\n              ? results\n\n              : module.get.results()\n\n            ;\n\n            if(settings.type === 'category') {\n\n              module.debug('Finding result that matches', value);\n\n              $.each(results, function(index, category) {\n\n                if($.isArray(category.results)) {\n\n                  result = module.search.object(value, category.results, lookupFields)[0];\n\n                  // don't continue searching if a result is found\n\n                  if(result) {\n\n                    return false;\n\n                  }\n\n                }\n\n              });\n\n            }\n\n            else {\n\n              module.debug('Finding result in results object', value);\n\n              result = module.search.object(value, results, lookupFields)[0];\n\n            }\n\n            return result || false;\n\n          },\n\n        },\n\n\n\n        select: {\n\n          firstResult: function() {\n\n            module.verbose('Selecting first result');\n\n            $result.first().addClass(className.active);\n\n          }\n\n        },\n\n\n\n        set: {\n\n          focus: function() {\n\n            $module.addClass(className.focus);\n\n          },\n\n          loading: function() {\n\n            $module.addClass(className.loading);\n\n          },\n\n          value: function(value) {\n\n            module.verbose('Setting search input value', value);\n\n            $prompt\n\n              .val(value)\n\n            ;\n\n          },\n\n          type: function(type) {\n\n            type = type || settings.type;\n\n            if(settings.type == 'category') {\n\n              $module.addClass(settings.type);\n\n            }\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.addClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        remove: {\n\n          loading: function() {\n\n            $module.removeClass(className.loading);\n\n          },\n\n          focus: function() {\n\n            $module.removeClass(className.focus);\n\n          },\n\n          buttonPressed: function() {\n\n            $searchButton.removeClass(className.pressed);\n\n          }\n\n        },\n\n\n\n        query: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          var\n\n            searchTerm = module.get.value(),\n\n            cache = module.read.cache(searchTerm)\n\n          ;\n\n          callback = callback || function() {};\n\n          if( module.has.minimumCharacters() )  {\n\n            if(cache) {\n\n              module.debug('Reading result from cache', searchTerm);\n\n              module.save.results(cache.results);\n\n              module.addResults(cache.html);\n\n              module.inject.id(cache.results);\n\n              callback();\n\n            }\n\n            else {\n\n              module.debug('Querying for', searchTerm);\n\n              if($.isPlainObject(settings.source) || $.isArray(settings.source)) {\n\n                module.search.local(searchTerm);\n\n                callback();\n\n              }\n\n              else if( module.can.useAPI() ) {\n\n                module.search.remote(searchTerm, callback);\n\n              }\n\n              else {\n\n                module.error(error.source);\n\n                callback();\n\n              }\n\n            }\n\n            settings.onSearchQuery.call(element, searchTerm);\n\n          }\n\n          else {\n\n            module.hideResults();\n\n          }\n\n        },\n\n\n\n        search: {\n\n          local: function(searchTerm) {\n\n            var\n\n              results = module.search.object(searchTerm, settings.content),\n\n              searchHTML\n\n            ;\n\n            module.set.loading();\n\n            module.save.results(results);\n\n            module.debug('Returned full local search results', results);\n\n            if(settings.maxResults > 0) {\n\n              module.debug('Using specified max results', results);\n\n              results = results.slice(0, settings.maxResults);\n\n            }\n\n            if(settings.type == 'category') {\n\n              results = module.create.categoryResults(results);\n\n            }\n\n            searchHTML = module.generateResults({\n\n              results: results\n\n            });\n\n            module.remove.loading();\n\n            module.addResults(searchHTML);\n\n            module.inject.id(results);\n\n            module.write.cache(searchTerm, {\n\n              html    : searchHTML,\n\n              results : results\n\n            });\n\n          },\n\n          remote: function(searchTerm, callback) {\n\n            callback = $.isFunction(callback)\n\n              ? callback\n\n              : function(){}\n\n            ;\n\n            if($module.api('is loading')) {\n\n              $module.api('abort');\n\n            }\n\n            module.setup.api(searchTerm, callback);\n\n            $module\n\n              .api('query')\n\n            ;\n\n          },\n\n          object: function(searchTerm, source, searchFields) {\n\n            var\n\n              results      = [],\n\n              exactResults = [],\n\n              fuzzyResults = [],\n\n              searchExp    = searchTerm.toString().replace(regExp.escape, '\\\\$&'),\n\n              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),\n\n\n\n              // avoid duplicates when pushing results\n\n              addResult = function(array, result) {\n\n                var\n\n                  notResult      = ($.inArray(result, results) == -1),\n\n                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1),\n\n                  notExactResults = ($.inArray(result, exactResults) == -1)\n\n                ;\n\n                if(notResult && notFuzzyResult && notExactResults) {\n\n                  array.push(result);\n\n                }\n\n              }\n\n            ;\n\n            source = source || settings.source;\n\n            searchFields = (searchFields !== undefined)\n\n              ? searchFields\n\n              : settings.searchFields\n\n            ;\n\n\n\n            // search fields should be array to loop correctly\n\n            if(!$.isArray(searchFields)) {\n\n              searchFields = [searchFields];\n\n            }\n\n\n\n            // exit conditions if no source\n\n            if(source === undefined || source === false) {\n\n              module.error(error.source);\n\n              return [];\n\n            }\n\n            // iterate through search fields looking for matches\n\n            $.each(searchFields, function(index, field) {\n\n              $.each(source, function(label, content) {\n\n                var\n\n                  fieldExists = (typeof content[field] == 'string')\n\n                ;\n\n                if(fieldExists) {\n\n                  if( content[field].search(matchRegExp) !== -1) {\n\n                    // content starts with value (first in results)\n\n                    addResult(results, content);\n\n                  }\n\n                  else if(settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(exactResults, content);\n\n                  }\n\n                  else if(settings.fullTextSearch == true && module.fuzzySearch(searchTerm, content[field]) ) {\n\n                    // content fuzzy matches (last in results)\n\n                    addResult(fuzzyResults, content);\n\n                  }\n\n                }\n\n              });\n\n            });\n\n            $.merge(exactResults, fuzzyResults)\n\n            $.merge(results, exactResults);\n\n            return results;\n\n          }\n\n        },\n\n        exactSearch: function (query, term) {\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(term.indexOf(query) > -1) {\n\n             return true;\n\n          }\n\n          return false;\n\n        },\n\n        fuzzySearch: function(query, term) {\n\n          var\n\n            termLength  = term.length,\n\n            queryLength = query.length\n\n          ;\n\n          if(typeof query !== 'string') {\n\n            return false;\n\n          }\n\n          query = query.toLowerCase();\n\n          term  = term.toLowerCase();\n\n          if(queryLength > termLength) {\n\n            return false;\n\n          }\n\n          if(queryLength === termLength) {\n\n            return (query === term);\n\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n\n            var\n\n              queryCharacter = query.charCodeAt(characterIndex)\n\n            ;\n\n            while(nextCharacterIndex < termLength) {\n\n              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n\n                continue search;\n\n              }\n\n            }\n\n            return false;\n\n          }\n\n          return true;\n\n        },\n\n\n\n        parse: {\n\n          response: function(response, searchTerm) {\n\n            var\n\n              searchHTML = module.generateResults(response)\n\n            ;\n\n            module.verbose('Parsing server response', response);\n\n            if(response !== undefined) {\n\n              if(searchTerm !== undefined && response[fields.results] !== undefined) {\n\n                module.addResults(searchHTML);\n\n                module.inject.id(response[fields.results]);\n\n                module.write.cache(searchTerm, {\n\n                  html    : searchHTML,\n\n                  results : response[fields.results]\n\n                });\n\n                module.save.results(response[fields.results]);\n\n              }\n\n            }\n\n          }\n\n        },\n\n\n\n        cancel: {\n\n          query: function() {\n\n            if( module.can.useAPI() ) {\n\n              $module.api('abort');\n\n            }\n\n          }\n\n        },\n\n\n\n        has: {\n\n          minimumCharacters: function() {\n\n            var\n\n              searchTerm    = module.get.value(),\n\n              numCharacters = searchTerm.length\n\n            ;\n\n            return (numCharacters >= settings.minCharacters);\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              return false;\n\n            }\n\n            var\n\n              html = $results.html()\n\n            ;\n\n            return html != '';\n\n          }\n\n        },\n\n\n\n        clear: {\n\n          cache: function(value) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(!value) {\n\n              module.debug('Clearing cache', value);\n\n              $module.removeData(metadata.cache);\n\n            }\n\n            else if(value && cache && cache[value]) {\n\n              module.debug('Removing value from cache', value);\n\n              delete cache[value];\n\n              $module.data(metadata.cache, cache);\n\n            }\n\n          }\n\n        },\n\n\n\n        read: {\n\n          cache: function(name) {\n\n            var\n\n              cache = $module.data(metadata.cache)\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Checking cache for generated html for query', name);\n\n              return (typeof cache == 'object') && (cache[name] !== undefined)\n\n                ? cache[name]\n\n                : false\n\n              ;\n\n            }\n\n            return false;\n\n          }\n\n        },\n\n\n\n        create: {\n\n          categoryResults: function(results) {\n\n            var\n\n              categoryResults = {}\n\n            ;\n\n            $.each(results, function(index, result) {\n\n              if(!result.category) {\n\n                return;\n\n              }\n\n              if(categoryResults[result.category] === undefined) {\n\n                module.verbose('Creating new category of results', result.category);\n\n                categoryResults[result.category] = {\n\n                  name    : result.category,\n\n                  results : [result]\n\n                }\n\n              }\n\n              else {\n\n                categoryResults[result.category].results.push(result);\n\n              }\n\n            });\n\n            return categoryResults;\n\n          },\n\n          id: function(resultIndex, categoryIndex) {\n\n            var\n\n              resultID      = (resultIndex + 1), // not zero indexed\n\n              categoryID    = (categoryIndex + 1),\n\n              firstCharCode,\n\n              letterID,\n\n              id\n\n            ;\n\n            if(categoryIndex !== undefined) {\n\n              // start char code for \"A\"\n\n              letterID = String.fromCharCode(97 + categoryIndex);\n\n              id          = letterID + resultID;\n\n              module.verbose('Creating category result id', id);\n\n            }\n\n            else {\n\n              id = resultID;\n\n              module.verbose('Creating result id', id);\n\n            }\n\n            return id;\n\n          },\n\n          results: function() {\n\n            if($results.length === 0) {\n\n              $results = $('<div />')\n\n                .addClass(className.results)\n\n                .appendTo($module)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        inject: {\n\n          result: function(result, resultIndex, categoryIndex) {\n\n            module.verbose('Injecting result into results');\n\n            var\n\n              $selectedResult = (categoryIndex !== undefined)\n\n                ? $results\n\n                    .children().eq(categoryIndex)\n\n                      .children(selector.results)\n\n                        .first()\n\n                        .children(selector.result)\n\n                          .eq(resultIndex)\n\n                : $results\n\n                    .children(selector.result).eq(resultIndex)\n\n            ;\n\n            module.verbose('Injecting results metadata', $selectedResult);\n\n            $selectedResult\n\n              .data(metadata.result, result)\n\n            ;\n\n          },\n\n          id: function(results) {\n\n            module.debug('Injecting unique ids into results');\n\n            var\n\n              // since results may be object, we must use counters\n\n              categoryIndex = 0,\n\n              resultIndex   = 0\n\n            ;\n\n            if(settings.type === 'category') {\n\n              // iterate through each category result\n\n              $.each(results, function(index, category) {\n\n                resultIndex = 0;\n\n                $.each(category.results, function(index, value) {\n\n                  var\n\n                    result = category.results[index]\n\n                  ;\n\n                  if(result.id === undefined) {\n\n                    result.id = module.create.id(resultIndex, categoryIndex);\n\n                  }\n\n                  module.inject.result(result, resultIndex, categoryIndex);\n\n                  resultIndex++;\n\n                });\n\n                categoryIndex++;\n\n              });\n\n            }\n\n            else {\n\n              // top level\n\n              $.each(results, function(index, value) {\n\n                var\n\n                  result = results[index]\n\n                ;\n\n                if(result.id === undefined) {\n\n                  result.id = module.create.id(resultIndex);\n\n                }\n\n                module.inject.result(result, resultIndex);\n\n                resultIndex++;\n\n              });\n\n            }\n\n            return results;\n\n          }\n\n        },\n\n\n\n        save: {\n\n          results: function(results) {\n\n            module.verbose('Saving current search results to metadata', results);\n\n            $module.data(metadata.results, results);\n\n          }\n\n        },\n\n\n\n        write: {\n\n          cache: function(name, value) {\n\n            var\n\n              cache = ($module.data(metadata.cache) !== undefined)\n\n                ? $module.data(metadata.cache)\n\n                : {}\n\n            ;\n\n            if(settings.cache) {\n\n              module.verbose('Writing generated html to cache', name, value);\n\n              cache[name] = value;\n\n              $module\n\n                .data(metadata.cache, cache)\n\n              ;\n\n            }\n\n          }\n\n        },\n\n\n\n        addResults: function(html) {\n\n          if( $.isFunction(settings.onResultsAdd) ) {\n\n            if( settings.onResultsAdd.call($results, html) === false ) {\n\n              module.debug('onResultsAdd callback cancelled default action');\n\n              return false;\n\n            }\n\n          }\n\n          if(html) {\n\n            $results\n\n              .html(html)\n\n            ;\n\n            module.refreshResults();\n\n            if(settings.selectFirstResult) {\n\n              module.select.firstResult();\n\n            }\n\n            module.showResults();\n\n          }\n\n          else {\n\n            module.hideResults(function() {\n\n              $results.empty();\n\n            });\n\n          }\n\n        },\n\n\n\n        showResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if(resultsDismissed) {\n\n            return;\n\n          }\n\n          if(!module.is.visible() && module.has.results()) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Showing results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' in',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Showing results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeIn(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsOpen.call($results);\n\n          }\n\n        },\n\n        hideResults: function(callback) {\n\n          callback = $.isFunction(callback)\n\n            ? callback\n\n            : function(){}\n\n          ;\n\n          if( module.is.visible() ) {\n\n            if( module.can.transition() ) {\n\n              module.debug('Hiding results with css animations');\n\n              $results\n\n                .transition({\n\n                  animation  : settings.transition + ' out',\n\n                  debug      : settings.debug,\n\n                  verbose    : settings.verbose,\n\n                  duration   : settings.duration,\n\n                  onComplete : function() {\n\n                    callback();\n\n                  },\n\n                  queue      : true\n\n                })\n\n              ;\n\n            }\n\n            else {\n\n              module.debug('Hiding results with javascript');\n\n              $results\n\n                .stop()\n\n                .fadeOut(settings.duration, settings.easing)\n\n              ;\n\n            }\n\n            settings.onResultsClose.call($results);\n\n          }\n\n        },\n\n\n\n        generateResults: function(response) {\n\n          module.debug('Generating html from response', response);\n\n          var\n\n            template       = settings.templates[settings.type],\n\n            isProperObject = ($.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results])),\n\n            isProperArray  = ($.isArray(response[fields.results]) && response[fields.results].length > 0),\n\n            html           = ''\n\n          ;\n\n          if(isProperObject || isProperArray ) {\n\n            if(settings.maxResults > 0) {\n\n              if(isProperObject) {\n\n                if(settings.type == 'standard') {\n\n                  module.error(error.maxResults);\n\n                }\n\n              }\n\n              else {\n\n                response[fields.results] = response[fields.results].slice(0, settings.maxResults);\n\n              }\n\n            }\n\n            if($.isFunction(template)) {\n\n              html = template(response, fields);\n\n            }\n\n            else {\n\n              module.error(error.noTemplate, false);\n\n            }\n\n          }\n\n          else if(settings.showNoResults) {\n\n            html = module.displayMessage(error.noResults, 'empty');\n\n          }\n\n          settings.onResults.call(element, response);\n\n          return html;\n\n        },\n\n\n\n        displayMessage: function(text, type) {\n\n          type = type || 'standard';\n\n          module.debug('Displaying message', text, type);\n\n          module.addResults( settings.templates.message(text, type) );\n\n          return settings.templates.message(text, type);\n\n        },\n\n\n\n        setting: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, settings, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            settings[name] = value;\n\n          }\n\n          else {\n\n            return settings[name];\n\n          }\n\n        },\n\n        internal: function(name, value) {\n\n          if( $.isPlainObject(name) ) {\n\n            $.extend(true, module, name);\n\n          }\n\n          else if(value !== undefined) {\n\n            module[name] = value;\n\n          }\n\n          else {\n\n            return module[name];\n\n          }\n\n        },\n\n        debug: function() {\n\n          if(!settings.silent && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.debug.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        verbose: function() {\n\n          if(!settings.silent && settings.verbose && settings.debug) {\n\n            if(settings.performance) {\n\n              module.performance.log(arguments);\n\n            }\n\n            else {\n\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n\n              module.verbose.apply(console, arguments);\n\n            }\n\n          }\n\n        },\n\n        error: function() {\n\n          if(!settings.silent) {\n\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n\n            module.error.apply(console, arguments);\n\n          }\n\n        },\n\n        performance: {\n\n          log: function(message) {\n\n            var\n\n              currentTime,\n\n              executionTime,\n\n              previousTime\n\n            ;\n\n            if(settings.performance) {\n\n              currentTime   = new Date().getTime();\n\n              previousTime  = time || currentTime;\n\n              executionTime = currentTime - previousTime;\n\n              time          = currentTime;\n\n              performance.push({\n\n                'Name'           : message[0],\n\n                'Arguments'      : [].slice.call(message, 1) || '',\n\n                'Element'        : element,\n\n                'Execution Time' : executionTime\n\n              });\n\n            }\n\n            clearTimeout(module.performance.timer);\n\n            module.performance.timer = setTimeout(module.performance.display, 500);\n\n          },\n\n          display: function() {\n\n            var\n\n              title = settings.name + ':',\n\n              totalTime = 0\n\n            ;\n\n            time = false;\n\n            clearTimeout(module.performance.timer);\n\n            $.each(performance, function(index, data) {\n\n              totalTime += data['Execution Time'];\n\n            });\n\n            title += ' ' + totalTime + 'ms';\n\n            if(moduleSelector) {\n\n              title += ' \\'' + moduleSelector + '\\'';\n\n            }\n\n            if($allModules.length > 1) {\n\n              title += ' ' + '(' + $allModules.length + ')';\n\n            }\n\n            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n\n              console.groupCollapsed(title);\n\n              if(console.table) {\n\n                console.table(performance);\n\n              }\n\n              else {\n\n                $.each(performance, function(index, data) {\n\n                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');\n\n                });\n\n              }\n\n              console.groupEnd();\n\n            }\n\n            performance = [];\n\n          }\n\n        },\n\n        invoke: function(query, passedArguments, context) {\n\n          var\n\n            object = instance,\n\n            maxDepth,\n\n            found,\n\n            response\n\n          ;\n\n          passedArguments = passedArguments || queryArguments;\n\n          context         = element         || context;\n\n          if(typeof query == 'string' && object !== undefined) {\n\n            query    = query.split(/[\\. ]/);\n\n            maxDepth = query.length - 1;\n\n            $.each(query, function(depth, value) {\n\n              var camelCaseValue = (depth != maxDepth)\n\n                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)\n\n                : query\n\n              ;\n\n              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {\n\n                object = object[camelCaseValue];\n\n              }\n\n              else if( object[camelCaseValue] !== undefined ) {\n\n                found = object[camelCaseValue];\n\n                return false;\n\n              }\n\n              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {\n\n                object = object[value];\n\n              }\n\n              else if( object[value] !== undefined ) {\n\n                found = object[value];\n\n                return false;\n\n              }\n\n              else {\n\n                return false;\n\n              }\n\n            });\n\n          }\n\n          if( $.isFunction( found ) ) {\n\n            response = found.apply(context, passedArguments);\n\n          }\n\n          else if(found !== undefined) {\n\n            response = found;\n\n          }\n\n          if($.isArray(returnedValue)) {\n\n            returnedValue.push(response);\n\n          }\n\n          else if(returnedValue !== undefined) {\n\n            returnedValue = [returnedValue, response];\n\n          }\n\n          else if(response !== undefined) {\n\n            returnedValue = response;\n\n          }\n\n          return found;\n\n        }\n\n      };"
        }
      ],
      "metadata": {
        "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
