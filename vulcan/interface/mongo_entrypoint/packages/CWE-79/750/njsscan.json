{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 17,
          "line": 6
        },
        "extra": {
          "line": "    brace-style: [2, \"stroustrup\"]",
          "message": "Syntax error"
        },
        "path": "/src/.eslintrc",
        "start": {
          "col": 16,
          "line": 6
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 32,
          "line": 5
        },
        "extra": {
          "line": "Claudio Cicali <claudio.cicali@gmail.com>",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/AUTHORS",
        "start": {
          "col": 31,
          "line": 5
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 51,
          "line": 3
        },
        "extra": {
          "line": "Copyright (c) 2012 Claudio Cicali <claudio.cicali@gmail.com>",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 50,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 10,
          "line": 2
        },
        "extra": {
          "line": "claudioc:$2y$05$Xz2BkAnzei/5LYCnqpB/i.tli5HI4XjBM8MqlQKZTLtgtrF0cobP6",
          "message": "Syntax error"
        },
        "path": "/src/stop",
        "start": {
          "col": 9,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "express_open_redirect": {
      "files": [
        {
          "file_path": "/src/routes/auth.js",
          "match_lines": [
            223,
            225
          ],
          "match_position": [
            5,
            21
          ],
          "match_string": "    var dst = req.session.destination || proxyPath + '/'\n\n    delete req.session.destination\n\n    res.redirect(dst)"
        },
        {
          "file_path": "/src/routes/pages.js",
          "match_lines": [
            138,
            205
          ],
          "match_position": [
            3,
            8
          ],
          "match_string": "  page = new models.Page(req.params.page)\n\n\n\n  req.check('pageTitle', 'The page title cannot be empty').notEmpty()\n\n  req.check('content', 'The page content cannot be empty').notEmpty()\n\n\n\n  errors = req.validationErrors()\n\n\n\n  if (errors) {\n\n    fixErrors()\n\n    return\n\n  }\n\n\n\n  // Highly unluckly (someone deleted the page we were editing)\n\n  if (!page.exists()) {\n\n    req.session.notice = 'The page does not exist anymore.'\n\n    res.redirect(proxyPath + '/')\n\n    return\n\n  }\n\n\n\n  req.sanitize('pageTitle').trim()\n\n  req.sanitize('content').trim()\n\n  req.sanitize('message').trim()\n\n\n\n  page.author = req.user.asGitAuthor\n\n\n\n  // Test if the user changed the name of the page and try to rename the file\n\n  // If the title is from filename, we cannot overwrite an existing filename\n\n  // If the title is from content, we never rename a file and the problem does not exist\n\n  if (app.locals.config.get('pages').title.fromFilename &&\n\n      page.name.toLowerCase() !== req.body.pageTitle.toLowerCase()) {\n\n    page.renameTo(req.body.pageTitle)\n\n          .then(savePage)\n\n          .catch(function (ex) {\n\n            errors = [{\n\n              param: 'pageTitle',\n\n              msg: 'A page with this name already exists.',\n\n              value: ''\n\n            }]\n\n            fixErrors()\n\n          })\n\n  } else {\n\n    savePage()\n\n  }\n\n\n\n  function savePage () {\n\n    page.title = req.body.pageTitle\n\n    page.content = req.body.content\n\n    page.save(req.body.message).then(function () {\n\n      page.unlock()\n\n\n\n      if (page.name === '_footer') {\n\n        components.expire('footer')\n\n      }\n\n\n\n      if (page.name === '_sidebar') {\n\n        components.expire('sidebar')\n\n      }\n\n\n\n      req.session.notice = 'The page has been updated. <a href=\"' + page.urlForEdit() + '\">Edit it again?</a>'\n\n      res.redirect(page.urlForShow())\n\n    }).catch(function (err) {\n\n      res.locals.title = '500 - Internal server error'\n\n      res.statusCode = 500\n\n      console.log(err)\n\n      res.render('500.pug', {\n\n        message: 'Sorry, something went wrong and I cannot recover. If you think this might be a bug in Jingo, please file a detailed report about what you were doing here: https://github.com/claudioc/jingo/issues . Thank you!',\n\n        error: err\n\n      })"
        },
        {
          "file_path": "/src/routes/pages.js",
          "match_lines": [
            138,
            219
          ],
          "match_position": [
            3,
            42
          ],
          "match_string": "  page = new models.Page(req.params.page)\n\n\n\n  req.check('pageTitle', 'The page title cannot be empty').notEmpty()\n\n  req.check('content', 'The page content cannot be empty').notEmpty()\n\n\n\n  errors = req.validationErrors()\n\n\n\n  if (errors) {\n\n    fixErrors()\n\n    return\n\n  }\n\n\n\n  // Highly unluckly (someone deleted the page we were editing)\n\n  if (!page.exists()) {\n\n    req.session.notice = 'The page does not exist anymore.'\n\n    res.redirect(proxyPath + '/')\n\n    return\n\n  }\n\n\n\n  req.sanitize('pageTitle').trim()\n\n  req.sanitize('content').trim()\n\n  req.sanitize('message').trim()\n\n\n\n  page.author = req.user.asGitAuthor\n\n\n\n  // Test if the user changed the name of the page and try to rename the file\n\n  // If the title is from filename, we cannot overwrite an existing filename\n\n  // If the title is from content, we never rename a file and the problem does not exist\n\n  if (app.locals.config.get('pages').title.fromFilename &&\n\n      page.name.toLowerCase() !== req.body.pageTitle.toLowerCase()) {\n\n    page.renameTo(req.body.pageTitle)\n\n          .then(savePage)\n\n          .catch(function (ex) {\n\n            errors = [{\n\n              param: 'pageTitle',\n\n              msg: 'A page with this name already exists.',\n\n              value: ''\n\n            }]\n\n            fixErrors()\n\n          })\n\n  } else {\n\n    savePage()\n\n  }\n\n\n\n  function savePage () {\n\n    page.title = req.body.pageTitle\n\n    page.content = req.body.content\n\n    page.save(req.body.message).then(function () {\n\n      page.unlock()\n\n\n\n      if (page.name === '_footer') {\n\n        components.expire('footer')\n\n      }\n\n\n\n      if (page.name === '_sidebar') {\n\n        components.expire('sidebar')\n\n      }\n\n\n\n      req.session.notice = 'The page has been updated. <a href=\"' + page.urlForEdit() + '\">Edit it again?</a>'\n\n      res.redirect(page.urlForShow())\n\n    }).catch(function (err) {\n\n      res.locals.title = '500 - Internal server error'\n\n      res.statusCode = 500\n\n      console.log(err)\n\n      res.render('500.pug', {\n\n        message: 'Sorry, something went wrong and I cannot recover. If you think this might be a bug in Jingo, please file a detailed report about what you were doing here: https://github.com/claudioc/jingo/issues . Thank you!',\n\n        error: err\n\n      })\n\n    })\n\n  }\n\n\n\n  function fixErrors () {\n\n    req.session.errors = errors\n\n    // If the req.body is too big, the cookie session-store will crash,\n\n    // logging out the user. For this reason we use the sessionStorage\n\n    // on the client to save the body when submitting\n\n    //    req.session.formData = req.body;\n\n    req.session.formData = {\n\n      pageTitle: req.body.pageTitle,\n\n      message: req.body.message\n\n    }\n\n    res.redirect(page.urlForEditWithError())"
        },
        {
          "file_path": "/src/routes/pages.js",
          "match_lines": [
            261,
            273
          ],
          "match_position": [
            3,
            13
          ],
          "match_string": "  var page = new models.Page(req.params.page, req.params.version)\n\n\n\n  page.author = req.user.asGitAuthor\n\n\n\n  page.fetch().then(function () {\n\n    if (!page.error) {\n\n      page.revert()\n\n      res.redirect(page.urlFor('history'))\n\n    } else {\n\n      res.locals.title = '500 \u2013 Internal Server Error'\n\n      res.statusCode = 500\n\n      res.render('500.pug')\n\n      return"
        },
        {
          "file_path": "/src/routes/wiki.js",
          "match_lines": [
            72,
            108
          ],
          "match_position": [
            3,
            17
          ],
          "match_string": "  var page = new models.Page(req.params.page, req.params.version)\n\n\n\n  page.fetch().then(function () {\n\n    if (!page.error) {\n\n      res.locals.canEdit = true\n\n      if (page.revision !== 'HEAD' && page.revision !== page.hashes[0]) {\n\n        res.locals.warning = \"You're not reading the latest revision of this page, which is \" + \"<a href='\" + page.urlForShow() + \"'>here</a>.\"\n\n        res.locals.canEdit = false\n\n      }\n\n\n\n      res.locals.notice = req.session.notice\n\n      delete req.session.notice\n\n\n\n      res.render('show', {\n\n        page: page,\n\n        title: app.locals.config.get('application').title + ' \u2013 ' + page.title,\n\n        content: renderer.render('# ' + page.title + '\\n' + page.content)\n\n      })\n\n    } else {\n\n      if (req.user) {\n\n        // Try sorting out redirect loops with case insentive fs\n\n        // Path 'xxxxx.md' exists on disk, but not in 'HEAD'.\n\n        if (/but not in 'HEAD'/.test(page.error)) {\n\n          page.setNames(page.name.slice(0, 1).toUpperCase() + page.name.slice(1))\n\n        }\n\n        res.redirect(page.urlFor('new'))\n\n      } else {\n\n        // Special case for the index page, anonymous user and an empty docbase\n\n        if (page.isIndex()) {\n\n          res.render('welcome', {\n\n            title: 'Welcome to ' + app.locals.config.get('application').title\n\n          })\n\n        } else {\n\n          res.locals.title = '404 - Not found'\n\n          res.statusCode = 404\n\n          res.render('404.pug')\n\n          return"
        }
      ],
      "metadata": {
        "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
        "description": "Untrusted user input in redirect() can result in Open Redirect vulnerability.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_sha1": {
      "files": [
        {
          "file_path": "/src/lib/renderer.js",
          "match_lines": [
            79,
            80
          ],
          "match_position": [
            12,
            27
          ],
          "match_string": "      id = cryptoz\n\n        .createHash(\"sha1\")"
        },
        {
          "file_path": "/src/lib/tools.js",
          "match_lines": [
            35,
            35
          ],
          "match_position": [
            18,
            43
          ],
          "match_string": "    var shasum = cryptoz.createHash('sha1')"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "SHA1 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/lib/app.js",
          "match_lines": [
            173,
            173
          ],
          "match_position": [
            9,
            33
          ],
          "match_string": "    if (/^\\/auth\\//.test(req.url) ||"
        },
        {
          "file_path": "/src/lib/app.js",
          "match_lines": [
            174,
            174
          ],
          "match_position": [
            9,
            33
          ],
          "match_string": "        /^\\/misc\\//.test(req.url) ||"
        },
        {
          "file_path": "/src/lib/app.js",
          "match_lines": [
            175,
            175
          ],
          "match_position": [
            10,
            33
          ],
          "match_string": "        (/^\\/login/.test(req.url) && !config.get('authorization').anonRead)"
        },
        {
          "file_path": "/src/lib/wikistatic.js",
          "match_lines": [
            38,
            38
          ],
          "match_position": [
            14,
            33
          ],
          "match_string": "      return regexp.test(req.url)"
        },
        {
          "file_path": "/src/public/js/app.js",
          "match_lines": [
            111,
            111
          ],
          "match_position": [
            11,
            61
          ],
          "match_string": "      if (/^\\/pages\\/.*\\/edit/.test(window.location.pathname) ||"
        },
        {
          "file_path": "/src/public/js/app.js",
          "match_lines": [
            112,
            112
          ],
          "match_position": [
            11,
            56
          ],
          "match_string": "          /^\\/pages\\/new/.test(window.location.pathname)) {"
        },
        {
          "file_path": "/src/public/js/app.js",
          "match_lines": [
            130,
            130
          ],
          "match_position": [
            11,
            52
          ],
          "match_string": "      if (/^\\/wiki\\//.test(window.location.pathname)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    },
    "yaml_deserialize": {
      "files": [
        {
          "file_path": "/src/lib/config.js",
          "match_lines": [
            11,
            11
          ],
          "match_position": [
            18,
            62
          ],
          "match_string": "      this.setup(yaml.load(fs.readFileSync(filename).toString()));"
        }
      ],
      "metadata": {
        "cwe": "CWE-502: Deserialization of Untrusted Data",
        "description": "User controlled data in 'yaml.load()' function can result in Remote Code Injection.",
        "owasp": "A8: Insecure Deserialization",
        "severity": "ERROR"
      }
    }
  },
  "templates": {
    "pug_jade_template": {
      "files": [
        {
          "file_path": "/src/views/mixins/links.pug",
          "match_position": [
            78,
            85
          ],
          "match_string": "!{text}"
        },
        {
          "file_path": "/src/views/mixins/form.pug",
          "match_position": [
            2594,
            2603
          ],
          "match_string": "!{notice}"
        },
        {
          "file_path": "/src/views/mixins/form.pug",
          "match_position": [
            2445,
            2455
          ],
          "match_string": "!{warning}"
        },
        {
          "file_path": "/src/views/layout.pug",
          "match_position": [
            2228,
            2238
          ],
          "match_string": "!{_footer}"
        },
        {
          "file_path": "/src/views/layout.pug",
          "match_position": [
            1998,
            2009
          ],
          "match_string": "!{_sidebar}"
        },
        {
          "file_path": "/src/views/layout.pug",
          "match_position": [
            2498,
            2508
          ],
          "match_string": "!{_script}"
        },
        {
          "file_path": "/src/views/layout.pug",
          "match_position": [
            738,
            747
          ],
          "match_string": "!{_style}"
        }
      ],
      "metadata": {
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "The Pug.js/Jade.js template has an unescaped variable. Untrusted user input passed to this variable results in Cross Site Scripting (XSS).",
        "id": "pug_jade_template",
        "input_case": "exact",
        "owasp": "A1: Injection",
        "pattern": "!{.+}",
        "severity": "ERROR",
        "type": "Regex"
      }
    }
  }
}
