/src/README.md:1:# @nuxt/devalue
/src/README.md-2-
##############################################
/src/README.md-8-
/src/README.md:9:> Forked from [devalue](https://github.com/Rich-Harris/devalue) to log errors on non-serializable properties rather than throwing `Error`.
/src/README.md-10-
##############################################
/src/README.md-20-
/src/README.md:21:Try it out on [runkit.com](https://npm.runkit.com/@nuxt/devalue).
/src/README.md-22-
##############################################
/src/README.md-38-```js
/src/README.md:39:import devalue from '@nuxt/devalue';
/src/README.md-40-
##############################################
/src/README.md-43-
/src/README.md:44:devalue(obj); // '{a:1,b:2,c:3}'
/src/README.md-45-
/src/README.md-46-obj.self = obj;
/src/README.md:47:devalue(obj); // '(function(a){a.a=1;a.b=2;a.c=3;a.self=a;return a}({}))'
/src/README.md-48-```
/src/README.md-49-
/src/README.md:50:If `devalue` encounters a function or a non-POJO, it will throw an error.
/src/README.md-51-
##############################################
/src/README.md-77-
/src/README.md:78:Using `devalue`, we're protected against that attack:
/src/README.md-79-
##############################################
/src/README.md-82-<script>
/src/README.md:83:  var preloaded = ${devalue(state)};
/src/README.md-84-</script>`;
##############################################
/src/README.md-92-
/src/README.md:93:This, along with the fact that `devalue` bails on functions and non-POJOs, stops attackers from executing arbitrary code. Strings generated by `devalue` can be safely deserialized with `eval` or `new Function`:
/src/README.md-94-
/src/README.md-95-```js
/src/README.md:96:const value = (0,eval)('(' + str + ')');
/src/README.md-97-```
##############################################
/src/README.md-101-
/src/README.md:102:While `devalue` prevents the XSS vulnerability shown above, meaning you can use it to send data from server to client, **you should not send user data from client to server** using the same method. Since it has to be evaluated, an attacker that successfully submitted data that bypassed `devalue` would have access to your system.
/src/README.md-103-
/src/README.md:104:When using `eval`, ensure that you call it *indirectly* so that the evaluated code doesn't have access to the surrounding scope:
/src/README.md-105-
##############################################
/src/README.md-108-  const sensitiveData = 'Setec Astronomy';
/src/README.md:109:  eval('sendToEvilServer(sensitiveData)'); // pwned :(
/src/README.md:110:  (0,eval)('sendToEvilServer(sensitiveData)'); // nice try, evildoer!
/src/README.md-111-}
##############################################
/src/README.md-113-
/src/README.md:114:Using `new Function(code)` is akin to using indirect eval.
/src/README.md-115-
##############################################
/src/README.md-129-<!-- Refs -->
/src/README.md:130:[npm-version-src]: https://flat.badgen.net/npm/v/@nuxtjs/devalue/latest
/src/README.md:131:[npm-version-href]: https://npmjs.com/package/@nuxtjs/devalue
/src/README.md-132-
/src/README.md:133:[npm-downloads-src]: https://flat.badgen.net/npm/dm/@nuxtjs/devalue
/src/README.md:134:[npm-downloads-href]: https://npmjs.com/package/@nuxtjs/devalue
/src/README.md-135-
/src/README.md:136:[circleci-src]: https://flat.badgen.net/circleci/github/nuxt/devalue
/src/README.md:137:[circleci-href]: https://circleci.com/gh/nuxt/devalue
/src/README.md-138-
/src/README.md:139:[package-phobia-src]: https://flat.badgen.net/packagephobia/install/@nuxtjs/devalue
/src/README.md:140:[package-phobia-href]: https://packagephobia.now.sh/result?p=@nuxtjs/devalue
/src/README.md-141-
/src/README.md:142:[bundle-phobia-src]: https://flat.badgen.net/bundlephobia/minzip/@nuxtjs/devalue
/src/README.md:143:[bundle-phobia-href]: https://bundlephobia.com/result?p=@nuxtjs/devalue
##############################################
/src/types/index.d.ts:1:export default function devalue(value: any, level?: string): string;
##############################################
/src/package.json-1-{
/src/package.json:2:  "name": "@nuxt/devalue",
/src/package.json-3-  "description": "Gets the job done when JSON.stringify can't",
/src/package.json-4-  "version": "1.2.2",
/src/package.json:5:  "repository": "nuxt-community/devalue",
/src/package.json:6:  "main": "dist/devalue.cjs.js",
/src/package.json:7:  "module": "dist/devalue.esm.js",
/src/package.json:8:  "browser": "dist/devalue.js",
/src/package.json-9-  "types": "types/index.d.ts",
##############################################
/src/CHANGELOG.md:1:# devalue changelog
/src/CHANGELOG.md-2-
##############################################
/src/CHANGELOG.md-4-
/src/CHANGELOG.md:5:* Escape lone surrogates ([#13](https://github.com/Rich-Harris/devalue/issues/13))
/src/CHANGELOG.md-6-
##############################################
/src/CHANGELOG.md-8-
/src/CHANGELOG.md:9:* Smaller output ([#10](https://github.com/Rich-Harris/devalue/pull/10))
/src/CHANGELOG.md-10-
##############################################
/src/CHANGELOG.md-12-
/src/CHANGELOG.md:13:* Detect POJOs cross-realm ([#7](https://github.com/Rich-Harris/devalue/pull/7))
/src/CHANGELOG.md:14:* Error on symbolic keys ([#7](https://github.com/Rich-Harris/devalue/pull/7))
/src/CHANGELOG.md-15-
##############################################
/src/CHANGELOG.md-21-
/src/CHANGELOG.md:22:* XSS mitigation ([#1](https://github.com/Rich-Harris/devalue/issues/1))
/src/CHANGELOG.md-23-
##############################################
/src/dist/devalue.esm.js-21-var logLimit = parseInt(process.env.NUXT_ENV_DEVALUE_LOG_LIMIT) || 99;
/src/dist/devalue.esm.js:22:function devalue(value, level) {
/src/dist/devalue.esm.js-23-    if (level === void 0) { level = defaultLogLevel; }
##############################################
/src/dist/devalue.esm.js-245-
/src/dist/devalue.esm.js:246:export default devalue;
##############################################
/src/dist/devalue.cjs.js-23-var logLimit = parseInt(process.env.NUXT_ENV_DEVALUE_LOG_LIMIT) || 99;
/src/dist/devalue.cjs.js:24:function devalue(value, level) {
/src/dist/devalue.cjs.js-25-    if (level === void 0) { level = defaultLogLevel; }
##############################################
/src/dist/devalue.cjs.js-247-
/src/dist/devalue.cjs.js:248:module.exports = devalue;
##############################################
/src/dist/devalue.js-3-	typeof define === 'function' && define.amd ? define(factory) :
/src/dist/devalue.js:4:	(global = global || self, global.devalue = factory());
/src/dist/devalue.js-5-}(this, function () { 'use strict';
##############################################
/src/dist/devalue.js-27-	var logLimit = parseInt(process.env.NUXT_ENV_DEVALUE_LOG_LIMIT) || 99;
/src/dist/devalue.js:28:	function devalue(value, level) {
/src/dist/devalue.js-29-	    if (level === void 0) { level = defaultLogLevel; }
##############################################
/src/dist/devalue.js-251-
/src/dist/devalue.js:252:	return devalue;
/src/dist/devalue.js-253-
##############################################
/src/dist/devalue.umd.js-3-	typeof define === 'function' && define.amd ? define(factory) :
/src/dist/devalue.umd.js:4:	(global.devalue = factory());
/src/dist/devalue.umd.js-5-}(this, (function () { 'use strict';
##############################################
/src/dist/devalue.umd.js-12-var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join('\0');
/src/dist/devalue.umd.js:13:function devalue(value, level) {
/src/dist/devalue.umd.js-14-    if (level === void 0) { level = 'warn'; }
##############################################
/src/dist/devalue.umd.js-194-
/src/dist/devalue.umd.js:195:return devalue;
/src/dist/devalue.umd.js-196-
