/src/bundles/ngx-md.umd.js.map:1:{"version":3,"file":"ngx-md.umd.js.map","sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(\n    private _http: HttpClient,\n    private _domSanitizer: DomSanitizer\n  ) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, {responseType: 'text'})\n    .pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    }, options);\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> ');\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n\n","\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\n\n@Component({\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }`\n    ]\n})\nexport class NgxMdComponent implements  AfterViewInit {\n    private _path: string;\n    private _data: string;\n    private _md: any;\n    private _ext: string;\n    changeLog: string[] = [];\n\n    constructor(\n        private _mdService: NgxMdService,\n        private _el: ElementRef,\n        @Inject(PLATFORM_ID) private platformId: string\n    ) { }\n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    /**\n     * Boolean indicating if the markdown content should be sanitized to avoid script injections\n     */\n    @Input() public sanitizeHtml = true;\n\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n        this._el.nativeElement.innerHTML = this._mdService.compile(data, this.sanitizeHtml);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if (this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md, this.sanitizeHtml);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path)\n            .subscribe(data => {\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md), this.sanitizeHtml);\n                this.highlightContent(false);\n            },\n            err => this.handleError);\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                // If the first non-blank chars are an opening/closing code block, toggle the flag\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"],"names":["Renderer","map","catchError","setOptions","SecurityContext","parse","throwError","Injectable","HttpClient","DomSanitizer","isPlatformBrowser","Prism.highlightAll","Component","ElementRef","Inject","PLATFORM_ID","Input","NgModule","HttpClientModule"],"mappings":";;;;;;;;;;AAAA;QAYE,sBACU,OACA;YADA,UAAK,GAAL,KAAK;YACL,kBAAa,GAAb,aAAa;6BAHE,IAAIA,eAAQ,EAAE;YAKrC,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;SAC3B;;;;;;QAGD,iCAAU;;;;YAAV,UAAW,IAAY;gBAAvB,iBAMC;gBALC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,EAAC,YAAY,EAAE,MAAM,EAAC,CAAC;qBAClD,IAAI,CACHC,aAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAA,CAAC,EACjCC,oBAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;aACH;8BAEU,kCAAQ;;;;gBACjB,OAAO,IAAI,CAAC,SAAS,CAAC;;;;;;;;;QAIjB,kCAAW;;;;sBAAC,GAAQ;gBACzB,OAAO,GAAG,IAAI,EAAE,CAAC;;;;;;QAGZ,uCAAgB;;;;sBAAC,OAAY;gBAClC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;oBACtB,GAAG,EAAE,IAAI;oBACT,MAAM,EAAE,IAAI;oBACZ,MAAM,EAAE,KAAK;oBACb,QAAQ,EAAE,KAAK;oBACf,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,IAAI;oBAChB,WAAW,EAAE,KAAK;iBACnB,EAAE,OAAO,CAAC,CAAC;gBACZ,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;gBAClCC,iBAAU,CAAC,OAAO,CAAC,CAAC;;;;;;;QAIf,8BAAO;;;;;sBAAC,IAAY,EAAE,QAAe;gBAAf,yBAAA;oBAAA,eAAe;;gBAC1C,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAChC,QAAQ,GAAGC,kBAAe,CAAC,IAAI,GAAGA,kBAAe,CAAC,IAAI,EACtDC,YAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CACnB,CAAC;;;;;;QAII,kCAAW;;;;sBAAC,KAAU;;gBAC5B,IAAI,MAAM,CAAS;gBACnB,IAAI,KAAK,YAAY,KAAK,EAAE;;oBAC1B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;;oBAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAC/C,MAAM,GAAM,KAAK,CAAC,MAAM,YAAM,KAAK,CAAC,UAAU,IAAI,EAAE,UAAI,GAAK,CAAC;iBAC/D;qBAAM;oBACL,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;iBAC3D;gBACD,OAAOC,eAAU,CAAC,MAAM,CAAC,CAAC;;;;;QAIpB,qCAAc;;;;gBACpB,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAS,IAAY;oBAC7C,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;wBAChC,IAAI,GAAG,IAAI;6BACV,OAAO,CAAC,cAAc,EAAE,uDAAuD,CAAC;6BAChF,OAAO,CAAC,cAAc,EAAE,+DAA+D,CAAC,CAAC;wBAC1F,OAAO,+BAA+B,GAAG,IAAI,GAAG,OAAO,CAAC;qBACzD;yBAAM;wBACL,OAAO,MAAM,GAAG,IAAI,GAAG,OAAO,CAAC;qBAChC;iBACF,CAAC;;;oBA7ELC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBARQC,aAAU;wBAIVC,eAAY;;;;2BALrB;;;;;;;ACCA;QAwBI,wBACY,YACA,KACqB,UAAkB;YAFvC,eAAU,GAAV,UAAU;YACV,QAAG,GAAH,GAAG;YACkB,eAAU,GAAV,UAAU,CAAQ;6BAL7B,EAAE;;;;gCA4BO,IAAI;SAtB9B;QAEL,sBACI,gCAAI;;;;gBADR,UACS,KAAa;gBACpB,IAAI,KAAK,EAAE;oBACT,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,IAAI,CAAC,YAAY,EAAE,CAAC;iBACrB;aACF;;;WAAA;QAED,sBACI,gCAAI;;;;gBADR,UACS,KAAa;gBACpB,IAAI,KAAK,EAAE;oBACT,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBAC1B;aACF;;;WAAA;;;;;;QAUD,qCAAY;;;;YAAZ,UAAa,IAAY;gBACvB,IAAI,IAAI,EAAE;oBACR,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;iBACrF;qBAAM;oBACL,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,GAAG,EAAE,CAAC;iBACvC;gBACD,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;aAC9B;;;;;;;;QAKD,wCAAe;;;;YAAf;gBACE,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,IAAI,CAAC,YAAY,EAAE,CAAC;iBACrB;qBAAM,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;oBACtB,IAAI,CAAC,UAAU,EAAE,CAAC;iBACnB;aACF;;;;QAED,mCAAU;;;YAAV;gBACE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;gBACtE,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBACxF,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;aAC9B;;;;;;;;QAKD,qCAAY;;;;YAAZ;gBAAA,iBASC;gBARG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAClE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;qBACjC,SAAS,CAAC,UAAA,IAAI;oBACX,KAAI,CAAC,GAAG,GAAG,KAAI,CAAC,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG,KAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC;oBACjF,KAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,GAAG,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAI,CAAC,OAAO,CAAC,KAAI,CAAC,GAAG,CAAC,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;oBACtG,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;iBAChC,EACD,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,WAAW,GAAA,CAAC,CAAC;aAChC;;;;;;QAKO,oCAAW;;;;;sBAAC,KAAU;gBAC1B,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;gBAC1C,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;;;;;;;;;;QAMjD,gCAAO;;;;;YAAP,UAAQ,GAAW;gBAAnB,iBAeA;gBAdG,IAAI,CAAC,GAAG,EAAE;oBACN,OAAO,EAAE,CAAC;iBACb;gBACD,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;;oBAClC,IAAI,aAAW,GAAG,KAAK,CAAC;oBACxB,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,IAAY;;wBAEpC,IAAI,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE;4BAC/C,aAAW,GAAG,CAAC,aAAW,CAAC;yBAC9B;wBACD,OAAO,aAAW,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;qBAC3C,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACjB;gBACD,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aACnC;;;;;;QAKO,iCAAQ;;;;;sBAAC,IAAY;gBACzB,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;;;;;;;QAMlC,yCAAgB;;;;;sBAAC,KAAc;gBACrC,IAAIC,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;oBACtCC,kBAAkB,CAAC,KAAK,CAAC,CAAC;iBAC3B;;;oBAlINC,YAAS,SAAC;wBACP,QAAQ,EAAE,oCAAoC;wBAC9C,QAAQ,EAAE,2BAA2B;iCAEjC,kQAKE;qBAET;;;;;wBAfQ,YAAY;wBADDC,aAAU;qDA2BrBC,SAAM,SAACC,cAAW;;;;2BAGtBC,QAAK;2BAQLA,QAAK;mCAYLA,QAAK;;6BAnDV;;;;;;IA4IA,oBAAoB,IAAY;;QAC5B,IAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC/C,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;QACrB,OAAO,GAAG,CAAC,KAAK,CAAC;KACpB;;;;;;AChJD;;;;oBAECT,aAAU;;0BAFX;;;;;;;ACAA;;;;;;QAagB,mBAAO;;;;gBACnB,OAAO;oBACL,QAAQ,EAAE,WAAW;oBACrB,SAAS,EAAE,CAAC,WAAW,CAAC;iBACzB,CAAC;;;oBAXLU,WAAQ,SAAC;wBACR,OAAO,EAAE,CAACC,mBAAgB,CAAC;wBAC3B,YAAY,EAAE,CAAC,cAAc,CAAC;wBAC9B,SAAS,EAAE,CAAC,YAAY,CAAC;wBACzB,OAAO,EAAE,CAAC,cAAc,CAAC;qBAC1B;;0BAXD;;;;;;;;;;;;;;;;;;;;;;;;;;"}
##############################################
/src/bundles/ngx-md.umd.min.js.map:1:{"version":3,"sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"names":["NgxMdService","_http","_domSanitizer","this","Renderer","extendRenderer","setMarkedOptions","prototype","getContent","path","_this","get","responseType","pipe","map","res","extractData","catchError","handleError","_renderer","options","Object","assign","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","renderer","setOptions","compile","data","SecurityContext","HTML","NONE","parse","trim","error","errMsg","fetch","body","json","err","JSON","stringify","status","statusText","message","toString","throwError","listitem","text","test","replace","Injectable","args","providedIn","HttpClient","DomSanitizer","NgxMdComponent","_mdService","_el","platformId","defineProperty","value","_path","onPathChange","_data","onDataChange","nativeElement","innerHTML","sanitizeHtml","highlightContent","ngAfterViewInit","processRaw","_md","prepare","decodeHtml","html","txt","document","createElement","_ext","split","splice","join","subscribe","console","Promise","reject","raw","isCodeBlock_1","line","trimLeft","substring","async","isPlatformBrowser","Prism.highlightAll","Component","selector","template","ElementRef","Inject","PLATFORM_ID","Input","NgxMdConfig","NgxMdModule","forRoot","ngModule","providers","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(\n    private _http: HttpClient,\n    private _domSanitizer: DomSanitizer\n  ) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, {responseType: 'text'})\n    .pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    }, options);\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> ');\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n\n","\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\n\n@Component({\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }`\n    ]\n})\nexport class NgxMdComponent implements  AfterViewInit {\n    private _path: string;\n    private _data: string;\n    private _md: any;\n    private _ext: string;\n    changeLog: string[] = [];\n\n    constructor(\n        private _mdService: NgxMdService,\n        private _el: ElementRef,\n        @Inject(PLATFORM_ID) private platformId: string\n    ) { }\n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    /**\n     * Boolean indicating if the markdown content should be sanitized to avoid script injections\n     */\n    @Input() public sanitizeHtml = true;\n\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n        this._el.nativeElement.innerHTML = this._mdService.compile(data, this.sanitizeHtml);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if (this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md, this.sanitizeHtml);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path)\n            .subscribe(data => {\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md), this.sanitizeHtml);\n                this.highlightContent(false);\n            },\n            err => this.handleError);\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                // If the first non-blank chars are an opening/closing code block, toggle the flag\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"]}
##############################################
/src/bundles/ngx-md.umd.min.js:1:!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common/http"),require("rxjs"),require("rxjs/operators"),require("marked"),require("@angular/platform-browser"),require("@angular/common"),require("prismjs")):"function"==typeof define&&define.amd?define("ngx-md",["exports","@angular/core","@angular/common/http","rxjs","rxjs/operators","marked","@angular/platform-browser","@angular/common","prismjs"],e):e(t["ngx-md"]={},t.ng.core,t.ng.common.http,t.rxjs,t.rxjs.operators,t.marked,t.ng.platformBrowser,t.ng.common,t.Prism)}(this,function(t,r,e,o,n,i,s,a,p){"use strict";var c=function(){function t(t,e){this._http=t,this._domSanitizer=e,this._renderer=new i.Renderer,this.extendRenderer(),this.setMarkedOptions({})}return t.prototype.getContent=function(t){var e=this;return this._http.get(t,{responseType:"text"}).pipe(n.map(function(t){return e.extractData(t)}),n.catchError(this.handleError))},Object.defineProperty(t.prototype,"renderer",{get:function(){return this._renderer},enumerable:!0,configurable:!0}),t.prototype.extractData=function(t){return t||""},t.prototype.setMarkedOptions=function(t){(t=Object.assign({gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,smartLists:!0,smartypants:!1},t)).renderer=this._renderer,i.setOptions(t)},t.prototype.compile=function(t,e){return void 0===e&&(e=!0),this._domSanitizer.sanitize(e?r.SecurityContext.HTML:r.SecurityContext.NONE,i.parse(t).trim())},t.prototype.handleError=function(t){var e;if(t instanceof fetch){var r=t.json()||"",n=r.error||JSON.stringify(r);e=t.status+" - "+(t.statusText||"")+" "+n}else e=t.message?t.message:t.toString();return o.throwError(e)},t.prototype.extendRenderer=function(){this._renderer.listitem=function(t){return/^\s*\[[x ]\]\s*/.test(t)?'<li style="list-style: none">'+(t=t.replace(/^\s*\[ \]\s*/,'<input type="checkbox" class="md-checkbox" disabled> ').replace(/^\s*\[x\]\s*/,'<input type="checkbox" class="md-checkbox" checked disabled> '))+"</li>":"<li>"+t+"</li>"}},t.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:e.HttpClient},{type:s.DomSanitizer}]},t.ngInjectableDef=r.defineInjectable({factory:function(){return new t(r.inject(e.HttpClient),r.inject(s.DomSanitizer))},token:t,providedIn:"root"}),t}(),u=function(){function t(t,e,r){this._mdService=t,this._el=e,this.platformId=r,this.changeLog=[],this.sanitizeHtml=!0}return Object.defineProperty(t.prototype,"path",{set:function(t){t&&(this._path=t,this.onPathChange())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"data",{set:function(t){t&&(this._data=t,this.onDataChange(t))},enumerable:!0,configurable:!0}),t.prototype.onDataChange=function(t){this._el.nativeElement.innerHTML=t?this._mdService.compile(t,this.sanitizeHtml):"",this.highlightContent(!1)},t.prototype.ngAfterViewInit=function(){this._path?this.onPathChange():this._data||this.processRaw()},t.prototype.processRaw=function(){this._md=this.prepare(function r(t){var e=document.createElement("textarea");return e.innerHTML=t,e.value}(this._el.nativeElement.innerHTML)),this._el.nativeElement.innerHTML=this._mdService.compile(this._md,this.sanitizeHtml),this.highlightContent(!1)},t.prototype.onPathChange=function(){var e=this;this._ext=this._path&&this._path.split(".").splice(-1).join(),this._mdService.getContent(this._path).subscribe(function(t){e._md="md"!==e._ext?"```"+e._ext+"\n"+t+"\n```":t,e._el.nativeElement.innerHTML=e._mdService.compile(e.prepare(e._md),e.sanitizeHtml),e.highlightContent(!1)},function(t){return e.handleError})},t.prototype.handleError=function(t){return console.error("An error occurred",t),Promise.reject(t.message||t)},t.prototype.prepare=function(t){var e=this;if(!t)return"";if("md"!==this._ext&&this.path)return t.replace(/\"/g,"'");var r=!1;return t.split("\n").map(function(t){return"```"===e.trimLeft(t).substring(0,3)&&(r=!r),r?t:t.trim()}).join("\n")},t.prototype.trimLeft=function(t){return t.replace(/^\s+|\s+$/g,"")},t.prototype.highlightContent=function(t){a.isPlatformBrowser(this.platformId)&&p.highlightAll(t)},t.decorators=[{type:r.Component,args:[{selector:"markdown,[Markdown],ngx-md,[NgxMd]",template:"<ng-content></ng-content>",styles:[".token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }"]}]}],t.ctorParameters=function(){return[{type:c},{type:r.ElementRef},{type:String,decorators:[{type:r.Inject,args:[r.PLATFORM_ID]}]}]},t.propDecorators={path:[{type:r.Input}],data:[{type:r.Input}],sanitizeHtml:[{type:r.Input}]},t}();var h=function(){function t(){}return t.decorators=[{type:r.Injectable}],t}(),l=function(){function t(){}return t.forRoot=function(){return{ngModule:t,providers:[h]}},t.decorators=[{type:r.NgModule,args:[{imports:[e.HttpClientModule],declarations:[u],providers:[c],exports:[u]}]}],t}();t.NgxMdService=c,t.NgxMdComponent=u,t.NgxMdModule=l,t.ɵa=h,Object.defineProperty(t,"__esModule",{value:!0})});
/src/bundles/ngx-md.umd.min.js-2-//# sourceMappingURL=ngx-md.umd.min.js.map
##############################################
/src/bundles/ngx-md.umd.js-358-        /** @type {?} */
/src/bundles/ngx-md.umd.js:359:        var txt = document.createElement('textarea');
/src/bundles/ngx-md.umd.js-360-        txt.innerHTML = html;
##############################################
/src/esm5/lib/ngx-md.component.js-239-    /** @type {?} */
/src/esm5/lib/ngx-md.component.js:240:    var txt = document.createElement('textarea');
/src/esm5/lib/ngx-md.component.js-241-    txt.innerHTML = html;
##############################################
/src/esm2015/lib/ngx-md.component.js-192-    /** @type {?} */
/src/esm2015/lib/ngx-md.component.js:193:    const txt = document.createElement('textarea');
/src/esm2015/lib/ngx-md.component.js-194-    txt.innerHTML = html;
##############################################
/src/fesm5/ngx-md.js-358-    /** @type {?} */
/src/fesm5/ngx-md.js:359:    var txt = document.createElement('textarea');
/src/fesm5/ngx-md.js-360-    txt.innerHTML = html;
##############################################
/src/fesm5/ngx-md.js.map:1:{"version":3,"file":"ngx-md.js.map","sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(\n    private _http: HttpClient,\n    private _domSanitizer: DomSanitizer\n  ) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, {responseType: 'text'})\n    .pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    }, options);\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> ');\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n\n","\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\n\n@Component({\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }`\n    ]\n})\nexport class NgxMdComponent implements  AfterViewInit {\n    private _path: string;\n    private _data: string;\n    private _md: any;\n    private _ext: string;\n    changeLog: string[] = [];\n\n    constructor(\n        private _mdService: NgxMdService,\n        private _el: ElementRef,\n        @Inject(PLATFORM_ID) private platformId: string\n    ) { }\n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    /**\n     * Boolean indicating if the markdown content should be sanitized to avoid script injections\n     */\n    @Input() public sanitizeHtml = true;\n\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n        this._el.nativeElement.innerHTML = this._mdService.compile(data, this.sanitizeHtml);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if (this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md, this.sanitizeHtml);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path)\n            .subscribe(data => {\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md), this.sanitizeHtml);\n                this.highlightContent(false);\n            },\n            err => this.handleError);\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                // If the first non-blank chars are an opening/closing code block, toggle the flag\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"],"names":["Prism.highlightAll"],"mappings":"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"}
##############################################
/src/fesm2015/ngx-md.js-284-    /** @type {?} */
/src/fesm2015/ngx-md.js:285:    const txt = document.createElement('textarea');
/src/fesm2015/ngx-md.js-286-    txt.innerHTML = html;
##############################################
/src/fesm2015/ngx-md.js.map:1:{"version":3,"file":"ngx-md.js.map","sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(\n    private _http: HttpClient,\n    private _domSanitizer: DomSanitizer\n  ) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, {responseType: 'text'})\n    .pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    }, options);\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> ');\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n\n","\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\n\n@Component({\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }`\n    ]\n})\nexport class NgxMdComponent implements  AfterViewInit {\n    private _path: string;\n    private _data: string;\n    private _md: any;\n    private _ext: string;\n    changeLog: string[] = [];\n\n    constructor(\n        private _mdService: NgxMdService,\n        private _el: ElementRef,\n        @Inject(PLATFORM_ID) private platformId: string\n    ) { }\n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    /**\n     * Boolean indicating if the markdown content should be sanitized to avoid script injections\n     */\n    @Input() public sanitizeHtml = true;\n\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n        this._el.nativeElement.innerHTML = this._mdService.compile(data, this.sanitizeHtml);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if (this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md, this.sanitizeHtml);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path)\n            .subscribe(data => {\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md), this.sanitizeHtml);\n                this.highlightContent(false);\n            },\n            err => this.handleError);\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                // If the first non-blank chars are an opening/closing code block, toggle the flag\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"],"names":["Prism.highlightAll"],"mappings":"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"}
