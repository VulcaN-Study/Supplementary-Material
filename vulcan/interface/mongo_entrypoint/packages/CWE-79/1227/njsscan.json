{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 83,
          "line": 118
        },
        "extra": {
          "line": "        gl.drawArrays(gl[drawMode.toUpperCase()], from / components, (to - from) / components);",
          "message": "Syntax error"
        },
        "path": "/src/es-modules/modules/boost/wgl-vbuffer.js",
        "start": {
          "col": 56,
          "line": 118
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 91,
          "line": 739
        },
        "extra": {
          "line": "                gl.drawArrays(gl[drawMode.toUpperCase()], from / components, (to - from) / components);",
          "message": "Syntax error"
        },
        "path": "/src/modules/boost.src.js",
        "start": {
          "col": 64,
          "line": 739
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "eval_nodejs": {
      "files": [
        {
          "file_path": "/src/modules/sonification.js",
          "match_lines": [
            17,
            18
          ],
          "match_position": [
            417,
            222
          ],
          "match_string": "!this.oscillatorStarted)a.preparePlay(),setTimeout(function(){a.play(c)},10);else{a.playCallbackTimers.length&&a.clearPlayCallbackTimers();a.cancelGainRamp();a.stopOscillatorTimeout&&(clearTimeout(a.stopOscillatorTimeout),delete a.stopOscillatorTimeout);a.stopTimeout&&(clearTimeout(a.stopTimeout),delete a.stopTimeout,a.stopCallback&&(a._play=a.play,a.play=function(){},a.stopCallback(\"cancelled\"),a.play=a._play));var b=f<e.sonification.fadeOutDuration+20;a.stopCallback=c.onEnd;var d=function(){delete a.stopTimeout;\n\na.stop(b)};f?(a.stopTimeout=setTimeout(d,b?f:f-e.sonification.fadeOutDuration),h(c.frequency,\"setFrequency\",{minFrequency:c.minFrequency,maxFrequency:c.maxFrequency}),h(g(c.volume,1),\"setGain\",4),h(g(c.pan,0),\"setPan\")):d()}};d.prototype.mute=function(){this.setGain(.0001,.8*e.sonification.fadeOutDuration)};d.prototype.stop=function(c,a,f){var h=this,b=function(){h.stopOscillatorTimeout&&delete h.stopOscillatorTimeout;try{h.oscillator.stop()}catch(t){}h.oscillator.disconnect(h.gainNode);h.initOscillator(h.options.oscillator);"
        },
        {
          "file_path": "/src/modules/sonification.js",
          "match_lines": [
            18,
            18
          ],
          "match_position": [
            29,
            78
          ],
          "match_string": "a.stop(b)};f?(a.stopTimeout=setTimeout(d,b?f:f-e.sonification.fadeOutDuration),h(c.frequency,\"setFrequency\",{minFrequency:c.minFrequency,maxFrequency:c.maxFrequency}),h(g(c.volume,1),\"setGain\",4),h(g(c.pan,0),\"setPan\")):d()}};d.prototype.mute=function(){this.setGain(.0001,.8*e.sonification.fadeOutDuration)};d.prototype.stop=function(c,a,f){var h=this,b=function(){h.stopOscillatorTimeout&&delete h.stopOscillatorTimeout;try{h.oscillator.stop()}catch(t){}h.oscillator.disconnect(h.gainNode);h.initOscillator(h.options.oscillator);"
        },
        {
          "file_path": "/src/modules/sonification.js",
          "match_lines": [
            19,
            19
          ],
          "match_position": [
            199,
            246
          ],
          "match_string": "a&&a(f);h.stopCallback&&h.stopCallback(f)};h.playCallbackTimers.length&&h.clearPlayCallbackTimers();h.stopTimeout&&clearTimeout(h.stopTimeout);c?(h.setGain(0),b()):(h.mute(),h.stopOscillatorTimeout=setTimeout(b,e.sonification.fadeOutDuration+100))};return d});n(b,\"modules/sonification/musicalFrequencies.js\",[],function(){return[16.351597831287414,17.323914436054505,18.354047994837977,19.445436482630058,20.601722307054366,21.826764464562746,23.12465141947715,24.499714748859326,25.956543598746574,27.5,"
        },
        {
          "file_path": "/src/modules/sonification.js",
          "match_lines": [
            52,
            52
          ],
          "match_position": [
            158,
            216
          ],
          "match_string": "a?\"resetCursor\":\"resetCursorEnd\"]()}),e.playPaths(a)):(g.emitSignal(\"playOnEnd\",h),g.emitSignal(\"masterOnEnd\",h)))})};c.forEach(function(a){a&&(a.timeline=e,setTimeout(function(){m(a)},b.sonification.fadeOutDuration))})};g.prototype.pause=function(a){var b=this;Object.keys(b.pathsPlaying).forEach(function(c){b.pathsPlaying[c]&&b.pathsPlaying[c].pause(a)});b.pathsPlaying={}};g.prototype.resetCursor=function(){this.paths.forEach(function(a){k(a).forEach(function(a){a.resetCursor()})});this.cursor=0};"
        },
        {
          "file_path": "/src/modules/sonification.src.js",
          "match_lines": [
            465,
            486
          ],
          "match_position": [
            13,
            23
          ],
          "match_string": "            var immediate = duration < H.sonification.fadeOutDuration + 20;\n\n            // Stop the instrument after the duration of the note\n\n            instrument.stopCallback = options.onEnd;\n\n            var onStop = function () {\n\n                    delete instrument.stopTimeout;\n\n                instrument.stop(immediate);\n\n            };\n\n            if (duration) {\n\n                instrument.stopTimeout = setTimeout(onStop, immediate ? duration :\n\n                    duration - H.sonification.fadeOutDuration);\n\n                // Play the note\n\n                setOrStartTimer(options.frequency, 'setFrequency', {\n\n                    minFrequency: options.minFrequency,\n\n                    maxFrequency: options.maxFrequency\n\n                });\n\n                // Set the volume and panning\n\n                setOrStartTimer(pick(options.volume, 1), 'setGain', 4); // Slight ramp\n\n                setOrStartTimer(pick(options.pan, 0), 'setPan');\n\n            }\n\n            else {\n\n                // No note duration, so just stop immediately\n\n                onStop();"
        },
        {
          "file_path": "/src/modules/sonification.src.js",
          "match_lines": [
            473,
            474
          ],
          "match_position": [
            42,
            62
          ],
          "match_string": "                instrument.stopTimeout = setTimeout(onStop, immediate ? duration :\n\n                    duration - H.sonification.fadeOutDuration);"
        },
        {
          "file_path": "/src/modules/sonification.src.js",
          "match_lines": [
            556,
            556
          ],
          "match_position": [
            21,
            75
          ],
          "match_string": "                    setTimeout(reset, H.sonification.fadeOutDuration + 100);"
        },
        {
          "file_path": "/src/modules/sonification.src.js",
          "match_lines": [
            2856,
            2858
          ],
          "match_position": [
            21,
            54
          ],
          "match_string": "                    setTimeout(function () {\n\n                        playPath(path);\n\n                    }, H.sonification.fadeOutDuration);"
        }
      ],
      "metadata": {
        "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
        "description": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/highcharts.src.js",
          "match_lines": [
            2682,
            2682
          ],
          "match_position": [
            37,
            48
          ],
          "match_string": "                var uniqueKeyHash = Math.random().toString(36).substring(2, 9),"
        },
        {
          "file_path": "/src/highmaps.src.js",
          "match_lines": [
            2682,
            2682
          ],
          "match_position": [
            37,
            48
          ],
          "match_string": "                var uniqueKeyHash = Math.random().toString(36).substring(2, 9),"
        },
        {
          "file_path": "/src/es-modules/modules/marker-clusters.src.js",
          "match_lines": [
            444,
            444
          ],
          "match_position": [
            12,
            23
          ],
          "match_string": "    return Math.random().toString(36).substring(2, 7) + '-' + stateIdCounter++;"
        },
        {
          "file_path": "/src/modules/wordcloud.js",
          "match_lines": [
            24,
            24
          ],
          "match_position": [
            60,
            71
          ],
          "match_string": "b){var c=b.field;b=b.rotation;return{x:Math.round(c.width*(Math.random()+.5)/2)-c.width/2,y:Math.round(c.height*(Math.random()+.5)/2)-c.height/2,rotation:q(b.orientations,a.index,b.from,b.to)}},center:function(a,b){b=b.rotation;return{x:0,y:0,rotation:q(b.orientations,a.index,b.from,b.to)}}},pointArrayMap:[\"weight\"],spirals:{archimedean:function(a,b){var c=b.field;b=!1;c=c.width*c.width+c.height*c.height;var d=.8*a;1E4>=a&&(b={x:d*Math.cos(d),y:d*Math.sin(d)},Math.min(Math.abs(b.x),Math.abs(b.y))<"
        },
        {
          "file_path": "/src/modules/wordcloud.js",
          "match_lines": [
            24,
            24
          ],
          "match_position": [
            114,
            125
          ],
          "match_string": "b){var c=b.field;b=b.rotation;return{x:Math.round(c.width*(Math.random()+.5)/2)-c.width/2,y:Math.round(c.height*(Math.random()+.5)/2)-c.height/2,rotation:q(b.orientations,a.index,b.from,b.to)}},center:function(a,b){b=b.rotation;return{x:0,y:0,rotation:q(b.orientations,a.index,b.from,b.to)}}},pointArrayMap:[\"weight\"],spirals:{archimedean:function(a,b){var c=b.field;b=!1;c=c.width*c.width+c.height*c.height;var d=.8*a;1E4>=a&&(b={x:d*Math.cos(d),y:d*Math.sin(d)},Math.min(Math.abs(b.x),Math.abs(b.y))<"
        },
        {
          "file_path": "/src/modules/wordcloud.src.js",
          "match_lines": [
            657,
            657
          ],
          "match_position": [
            40,
            51
          ],
          "match_string": "            return Math.round((size * (Math.random() + 0.5)) / 2);"
        },
        {
          "file_path": "/src/lib/jspdf.src.js",
          "match_lines": [
            691,
            691
          ],
          "match_position": [
            18,
            29
          ],
          "match_string": "        var id = Math.random().toString(35);"
        },
        {
          "file_path": "/src/lib/jspdf.src.js",
          "match_lines": [
            972,
            972
          ],
          "match_position": [
            55,
            66
          ],
          "match_string": "          return \"ABCDEF0123456789\".charAt(Math.floor(Math.random() * 16));"
        },
        {
          "file_path": "/src/es-modules/parts/Utilities.js",
          "match_lines": [
            2447,
            2447
          ],
          "match_position": [
            25,
            36
          ],
          "match_string": "    var uniqueKeyHash = Math.random().toString(36).substring(2, 9), idCounter = 0;"
        },
        {
          "file_path": "/src/highcharts-3d.js",
          "match_lines": [
            26,
            26
          ],
          "match_position": [
            390,
            401
          ],
          "match_string": "return this};[\"opacity\",\"translateX\",\"translateY\",\"visibility\"].forEach(function(a){f[a+\"Setter\"]=function(a,b){f[b]=a;[\"out\",\"inn\",\"side1\",\"side2\",\"top\"].forEach(function(d){f[d].attr(b,a)})}});f.attr=function(b){var d;\"object\"===typeof b&&(d=h(b))&&(g(f.attribs,d),f.setPaths(f.attribs));return a.prototype.attr.apply(f,arguments)};f.animate=function(b,d,k){var l=this.attribs,u=\"data-\"+Math.random().toString(26).substring(2,9);delete b.center;delete b.z;delete b.alpha;delete b.beta;var v=x(w(d,this.renderer.globalAnimation));"
        },
        {
          "file_path": "/src/highcharts-3d.src.js",
          "match_lines": [
            988,
            988
          ],
          "match_position": [
            44,
            55
          ],
          "match_string": "                    randomProp = 'data-' + Math.random().toString(26).substring(2, 9);"
        },
        {
          "file_path": "/src/highcharts-gantt.src.js",
          "match_lines": [
            2682,
            2682
          ],
          "match_position": [
            37,
            48
          ],
          "match_string": "                var uniqueKeyHash = Math.random().toString(36).substring(2, 9),"
        },
        {
          "file_path": "/src/es-modules/parts-3d/SVGRenderer.js",
          "match_lines": [
            640,
            640
          ],
          "match_position": [
            71,
            82
          ],
          "match_string": "        var ca, from = this.attribs, to, anim, randomProp = 'data-' + Math.random().toString(26).substring(2, 9);"
        },
        {
          "file_path": "/src/modules/marker-clusters.js",
          "match_lines": [
            33,
            33
          ],
          "match_position": [
            51,
            62
          ],
          "match_string": "!1;for(l in a)if(a[l].length>=t){var p=a[l];var q=Math.random().toString(36).substring(2,7)+\"-\"+X++;var u=p.length;if(b.zones)for(g=0;g<b.zones.length;g++)if(u>=b.zones[g].from&&u<=b.zones[g].to){var e=b.zones[g];e.zoneIndex=g;var n=b.zones[g].marker;var r=b.zones[g].className}var v=H(p);\"grid\"!==b.layoutAlgorithm.type||b.allowOverlap?v={x:v.x,y:v.y}:(g=this.options.marker||{},v=this.preventClusterCollisions({x:v.x,y:v.y,key:l,groupedData:a,gridSize:this.getScaledGridSize(b.layoutAlgorithm),defaultRadius:g.radius||"
        },
        {
          "file_path": "/src/modules/marker-clusters.js",
          "match_lines": [
            35,
            35
          ],
          "match_position": [
            55,
            66
          ],
          "match_string": "m++;n=null}else for(g=0;g<a[l].length;g++)p=a[l][g],q=Math.random().toString(36).substring(2,7)+\"-\"+X++,u=((this.options||{}).data||[])[p.dataIndex],d.push(p.x),f.push(p.y),p.parentStateId=q,k.push({x:p.x,y:p.y,id:l,stateId:q,index:m,data:a[l]}),q=u&&\"object\"===typeof u&&!U(u)?N(u,{x:p.x,y:p.y}):{userOptions:u,x:p.x,y:p.y},h.push({options:q}),m++;return{clusters:c,noise:k,groupedXData:d,groupedYData:f,groupMap:h}};w.prototype.destroyClusteredData=function(){(this.markerClusterSeriesData||[]).forEach(function(a){a&&"
        },
        {
          "file_path": "/src/modules/marker-clusters.src.js",
          "match_lines": [
            505,
            505
          ],
          "match_position": [
            20,
            31
          ],
          "match_string": "            return Math.random().toString(36).substring(2, 7) + '-' + stateIdCounter++;"
        },
        {
          "file_path": "/src/highstock.src.js",
          "match_lines": [
            2682,
            2682
          ],
          "match_position": [
            37,
            48
          ],
          "match_string": "                var uniqueKeyHash = Math.random().toString(36).substring(2, 9),"
        },
        {
          "file_path": "/src/es-modules/modules/wordcloud.src.js",
          "match_lines": [
            207,
            207
          ],
          "match_position": [
            32,
            43
          ],
          "match_string": "    return Math.round((size * (Math.random() + 0.5)) / 2);"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/highcharts.src.js",
          "match_lines": [
            1419,
            1419
          ],
          "match_position": [
            25,
            41
          ],
          "match_string": "                return (/%$/).test(value) ?"
        },
        {
          "file_path": "/src/highcharts.src.js",
          "match_lines": [
            4269,
            4269
          ],
          "match_position": [
            21,
            47
          ],
          "match_string": "                if (/(NaN| {2}|^$)/.test(value)) {"
        },
        {
          "file_path": "/src/highcharts.src.js",
          "match_lines": [
            7159,
            7159
          ],
          "match_position": [
            31,
            53
          ],
          "match_string": "                    isImage = imageRegex.test(symbol),"
        },
        {
          "file_path": "/src/highcharts.src.js",
          "match_lines": [
            7598,
            7598
          ],
          "match_position": [
            42,
            60
          ],
          "match_string": "                if ((this.styledMode || !/px/.test(fontSize)) &&"
        },
        {
          "file_path": "/src/highcharts.src.js",
          "match_lines": [
            7611,
            7611
          ],
          "match_position": [
            21,
            39
          ],
          "match_string": "                if (/px/.test(fontSize)) {"
        },
        {
          "file_path": "/src/highcharts.src.js",
          "match_lines": [
            8304,
            8740
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        var isFirefox = H.isFirefox,\n\n            isMS = H.isMS,\n\n            isWebKit = H.isWebKit,\n\n            SVGElement = H.SVGElement,\n\n            SVGRenderer = H.SVGRenderer,\n\n            win = H.win;\n\n        /* eslint-disable valid-jsdoc */\n\n        // Extend SvgElement for useHTML option.\n\n        extend(SVGElement.prototype, /** @lends SVGElement.prototype */ {\n\n            /**\n\n             * Apply CSS to HTML elements. This is used in text within SVG rendering and\n\n             * by the VML renderer\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlCss\n\n             *\n\n             * @param {Highcharts.CSSObject} styles\n\n             *\n\n             * @return {Highcharts.SVGElement}\n\n             */\n\n            htmlCss: function (styles) {\n\n                var wrapper = this,\n\n                    element = wrapper.element, \n\n                    // When setting or unsetting the width style, we need to update\n\n                    // transform (#8809)\n\n                    isSettingWidth = (element.tagName === 'SPAN' &&\n\n                        styles &&\n\n                        'width' in styles),\n\n                    textWidth = pick(isSettingWidth && styles.width,\n\n                    void 0),\n\n                    doTransform;\n\n                if (isSettingWidth) {\n\n                    delete styles.width;\n\n                    wrapper.textWidth = textWidth;\n\n                    doTransform = true;\n\n                }\n\n                if (styles && styles.textOverflow === 'ellipsis') {\n\n                    styles.whiteSpace = 'nowrap';\n\n                    styles.overflow = 'hidden';\n\n                }\n\n                wrapper.styles = extend(wrapper.styles, styles);\n\n                css(wrapper.element, styles);\n\n                // Now that all styles are applied, to the transform\n\n                if (doTransform) {\n\n                    wrapper.htmlUpdateTransform();\n\n                }\n\n                return wrapper;\n\n            },\n\n            /**\n\n             * VML and useHTML method for calculating the bounding box based on offsets.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlGetBBox\n\n             *\n\n             * @param {boolean} refresh\n\n             *        Whether to force a fresh value from the DOM or to use the cached\n\n             *        value.\n\n             *\n\n             * @return {Highcharts.BBoxObject}\n\n             *         A hash containing values for x, y, width and height.\n\n             */\n\n            htmlGetBBox: function () {\n\n                var wrapper = this,\n\n                    element = wrapper.element;\n\n                return {\n\n                    x: element.offsetLeft,\n\n                    y: element.offsetTop,\n\n                    width: element.offsetWidth,\n\n                    height: element.offsetHeight\n\n                };\n\n            },\n\n            /**\n\n             * VML override private method to update elements based on internal\n\n             * properties based on SVG transform.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlUpdateTransform\n\n             * @return {void}\n\n             */\n\n            htmlUpdateTransform: function () {\n\n                // aligning non added elements is expensive\n\n                if (!this.added) {\n\n                    this.alignOnAdd = true;\n\n                    return;\n\n                }\n\n                var wrapper = this,\n\n                    renderer = wrapper.renderer,\n\n                    elem = wrapper.element,\n\n                    translateX = wrapper.translateX || 0,\n\n                    translateY = wrapper.translateY || 0,\n\n                    x = wrapper.x || 0,\n\n                    y = wrapper.y || 0,\n\n                    align = wrapper.textAlign || 'left',\n\n                    alignCorrection = {\n\n                        left: 0,\n\n                    center: 0.5,\n\n                    right: 1\n\n                    }[align],\n\n                    styles = wrapper.styles,\n\n                    whiteSpace = styles && styles.whiteSpace;\n\n                /**\n\n                 * @private\n\n                 * @return {number}\n\n                 */\n\n                function getTextPxLength() {\n\n                    // Reset multiline/ellipsis in order to read width (#4928,\n\n                    // #5417)\n\n                    css(elem, {\n\n                        width: '',\n\n                        whiteSpace: whiteSpace || 'nowrap'\n\n                    });\n\n                    return elem.offsetWidth;\n\n                }\n\n                // apply translate\n\n                css(elem, {\n\n                    marginLeft: translateX,\n\n                    marginTop: translateY\n\n                });\n\n                if (!renderer.styledMode && wrapper.shadows) { // used in labels/tooltip\n\n                    wrapper.shadows.forEach(function (shadow) {\n\n                        css(shadow, {\n\n                            marginLeft: translateX + 1,\n\n                            marginTop: translateY + 1\n\n                        });\n\n                    });\n\n                }\n\n                // apply inversion\n\n                if (wrapper.inverted) { // wrapper is a group\n\n                    [].forEach.call(elem.childNodes, function (child) {\n\n                        renderer.invertChild(child, elem);\n\n                    });\n\n                }\n\n                if (elem.tagName === 'SPAN') {\n\n                    var rotation = wrapper.rotation, baseline, textWidth = wrapper.textWidth && pInt(wrapper.textWidth), currentTextTransform = [\n\n                            rotation,\n\n                            align,\n\n                            elem.innerHTML,\n\n                            wrapper.textWidth,\n\n                            wrapper.textAlign\n\n                        ].join(',');\n\n                    // Update textWidth. Use the memoized textPxLength if possible, to\n\n                    // avoid the getTextPxLength function using elem.offsetWidth.\n\n                    // Calling offsetWidth affects rendering time as it forces layout\n\n                    // (#7656).\n\n                    if (textWidth !== wrapper.oldTextWidth &&\n\n                        ((textWidth > wrapper.oldTextWidth) ||\n\n                            (wrapper.textPxLength || getTextPxLength()) > textWidth) && (\n\n                    // Only set the width if the text is able to word-wrap, or\n\n                    // text-overflow is ellipsis (#9537)\n\n                    /[ \\-]/.test(elem.textContent || elem.innerText) ||\n\n                        elem.style.textOverflow === 'ellipsis')) { // #983, #1254\n\n                        css(elem, {\n\n                            width: textWidth + 'px',\n\n                            display: 'block',\n\n                            whiteSpace: whiteSpace || 'normal' // #3331\n\n                        });\n\n                        wrapper.oldTextWidth = textWidth;\n\n                        wrapper.hasBoxWidthChanged = true; // #8159\n\n                    }\n\n                    else {\n\n                        wrapper.hasBoxWidthChanged = false; // #8159\n\n                    }\n\n                    // Do the calculations and DOM access only if properties changed\n\n                    if (currentTextTransform !== wrapper.cTT) {\n\n                        baseline = renderer.fontMetrics(elem.style.fontSize, elem).b;\n\n                        // Renderer specific handling of span rotation, but only if we\n\n                        // have something to update.\n\n                        if (defined(rotation) &&\n\n                            ((rotation !== (wrapper.oldRotation || 0)) ||\n\n                                (align !== wrapper.oldAlign))) {\n\n                            wrapper.setSpanRotation(rotation, alignCorrection, baseline);\n\n                        }\n\n                        wrapper.getSpanCorrection(\n\n                        // Avoid elem.offsetWidth if we can, it affects rendering\n\n                        // time heavily (#7656)\n\n                        ((!defined(rotation) && wrapper.textPxLength) || // #7920\n\n                            elem.offsetWidth), baseline, alignCorrection, rotation, align);\n\n                    }\n\n                    // apply position with correction\n\n                    css(elem, {\n\n                        left: (x + (wrapper.xCorr || 0)) + 'px',\n\n                        top: (y + (wrapper.yCorr || 0)) + 'px'\n\n                    });\n\n                    // record current text transform\n\n                    wrapper.cTT = currentTextTransform;\n\n                    wrapper.oldRotation = rotation;\n\n                    wrapper.oldAlign = align;\n\n                }\n\n            },\n\n            /**\n\n             * Set the rotation of an individual HTML span.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#setSpanRotation\n\n             * @param {number} rotation\n\n             * @param {number} alignCorrection\n\n             * @param {number} baseline\n\n             * @return {void}\n\n             */\n\n            setSpanRotation: function (rotation, alignCorrection, baseline) {\n\n                var rotationStyle = {},\n\n                    cssTransformKey = this.renderer.getTransformKey();\n\n                rotationStyle[cssTransformKey] = rotationStyle.transform =\n\n                    'rotate(' + rotation + 'deg)';\n\n                rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] =\n\n                    rotationStyle.transformOrigin =\n\n                        (alignCorrection * 100) + '% ' + baseline + 'px';\n\n                css(this.element, rotationStyle);\n\n            },\n\n            /**\n\n             * Get the correction in X and Y positioning as the element is rotated.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#getSpanCorrection\n\n             * @param {number} width\n\n             * @param {number} baseline\n\n             * @param {number} alignCorrection\n\n             * @return {void}\n\n             */\n\n            getSpanCorrection: function (width, baseline, alignCorrection) {\n\n                this.xCorr = -width * alignCorrection;\n\n                this.yCorr = -baseline;\n\n            }\n\n        });\n\n        // Extend SvgRenderer for useHTML option.\n\n        extend(SVGRenderer.prototype, /** @lends SVGRenderer.prototype */ {\n\n            /**\n\n             * @private\n\n             * @function Highcharts.SVGRenderer#getTransformKey\n\n             *\n\n             * @return {string}\n\n             */\n\n            getTransformKey: function () {\n\n                return isMS && !/Edge/.test(win.navigator.userAgent) ?\n\n                    '-ms-transform' :\n\n                    isWebKit ?\n\n                        '-webkit-transform' :\n\n                        isFirefox ?\n\n                            'MozTransform' :\n\n                            win.opera ?\n\n                                '-o-transform' :\n\n                                '';\n\n            },\n\n            /**\n\n             * Create HTML text node. This is used by the VML renderer as well as the\n\n             * SVG renderer through the useHTML option.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGRenderer#html\n\n             *\n\n             * @param {string} str\n\n             *        The text of (subset) HTML to draw.\n\n             *\n\n             * @param {number} x\n\n             *        The x position of the text's lower left corner.\n\n             *\n\n             * @param {number} y\n\n             *        The y position of the text's lower left corner.\n\n             *\n\n             * @return {Highcharts.HTMLDOMElement}\n\n             */\n\n            html: function (str, x, y) {\n\n                var wrapper = this.createElement('span'), element = wrapper.element, renderer = wrapper.renderer, isSVG = renderer.isSVG, addSetters = function (gWrapper, style) {\n\n                        // These properties are set as attributes on the SVG group, and\n\n                        // as identical CSS properties on the div. (#3542)\n\n                        ['opacity', 'visibility'].forEach(function (prop) {\n\n                            gWrapper[prop + 'Setter'] = function (value, key, elem) {\n\n                                var styleObject = gWrapper.div ?\n\n                                    gWrapper.div.style :\n\n                                    style;\n\n                            SVGElement.prototype[prop + 'Setter']\n\n                                .call(this, value, key, elem);\n\n                            if (styleObject) {\n\n                                styleObject[key] = value;\n\n                            }\n\n                        };\n\n                    });\n\n                    gWrapper.addedSetters = true;\n\n                };\n\n                // Text setter\n\n                wrapper.textSetter = function (value) {\n\n                    if (value !== element.innerHTML) {\n\n                        delete this.bBox;\n\n                        delete this.oldTextWidth;\n\n                    }\n\n                    this.textStr = value;\n\n                    element.innerHTML = pick(value, '');\n\n                    wrapper.doTransform = true;\n\n                };\n\n                // Add setters for the element itself (#4938)\n\n                if (isSVG) { // #4938, only for HTML within SVG\n\n                    addSetters(wrapper, wrapper.element.style);\n\n                }\n\n                // Various setters which rely on update transform\n\n                wrapper.xSetter =\n\n                    wrapper.ySetter =\n\n                        wrapper.alignSetter =\n\n                            wrapper.rotationSetter =\n\n                                function (value, key) {\n\n                                    if (key === 'align') {\n\n                                        // Do not overwrite the SVGElement.align method. Same as VML.\n\n                                        key = 'textAlign';\n\n                                    }\n\n                                    wrapper[key] = value;\n\n                                    wrapper.doTransform = true;\n\n                                };\n\n                // Runs at the end of .attr()\n\n                wrapper.afterSetters = function () {\n\n                    // Update transform. Do this outside the loop to prevent redundant\n\n                    // updating for batch setting of attributes.\n\n                    if (this.doTransform) {\n\n                        this.htmlUpdateTransform();\n\n                        this.doTransform = false;\n\n                    }\n\n                };\n\n                // Set the default attributes\n\n                wrapper\n\n                    .attr({\n\n                    text: str,\n\n                    x: Math.round(x),\n\n                    y: Math.round(y)\n\n                })\n\n                    .css({\n\n                    position: 'absolute'\n\n                });\n\n                if (!renderer.styledMode) {\n\n                    wrapper.css({\n\n                        fontFamily: this.style.fontFamily,\n\n                        fontSize: this.style.fontSize\n\n                    });\n\n                }\n\n                // Keep the whiteSpace style outside the wrapper.styles collection\n\n                element.style.whiteSpace = 'nowrap';\n\n                // Use the HTML specific .css method\n\n                wrapper.css = wrapper.htmlCss;\n\n                // This is specific for HTML within SVG\n\n                if (isSVG) {\n\n                    wrapper.add = function (svgGroupWrapper) {\n\n                        var htmlGroup,\n\n                            container = renderer.box.parentNode,\n\n                            parentGroup,\n\n                            parents = [];\n\n                        this.parentGroup = svgGroupWrapper;\n\n                        // Create a mock group to hold the HTML elements\n\n                        if (svgGroupWrapper) {\n\n                            htmlGroup = svgGroupWrapper.div;\n\n                            if (!htmlGroup) {\n\n                                // Read the parent chain into an array and read from top\n\n                                // down\n\n                                parentGroup = svgGroupWrapper;\n\n                                while (parentGroup) {\n\n                                    parents.push(parentGroup);\n\n                                    // Move up to the next parent group\n\n                                    parentGroup = parentGroup.parentGroup;\n\n                                }\n\n                                // Ensure dynamically updating position when any parent\n\n                                // is translated\n\n                                parents.reverse().forEach(function (parentGroup) {\n\n                                    var htmlGroupStyle,\n\n                                        cls = attr(parentGroup.element, 'class');\n\n                                    /**\n\n                                     * Common translate setter for X and Y on the HTML\n\n                                     * group. Reverted the fix for #6957 du to\n\n                                     * positioning problems and offline export (#7254,\n\n                                     * #7280, #7529)\n\n                                     * @private\n\n                                     * @param {*} value\n\n                                     * @param {string} key\n\n                                     * @return {void}\n\n                                     */\n\n                                    function translateSetter(value, key) {\n\n                                        parentGroup[key] = value;\n\n                                        if (key === 'translateX') {\n\n                                            htmlGroupStyle.left = value + 'px';\n\n                                        }\n\n                                        else {\n\n                                            htmlGroupStyle.top = value + 'px';\n\n                                        }\n\n                                        parentGroup.doTransform = true;\n\n                                    }\n\n                                    // Create a HTML div and append it to the parent div\n\n                                    // to emulate the SVG group structure\n\n                                    htmlGroup =\n\n                                        parentGroup.div =\n\n                                            parentGroup.div || createElement('div', cls ? { className: cls } : void 0, {\n\n                                                position: 'absolute',\n\n                                                left: (parentGroup.translateX || 0) + 'px',\n\n                                                top: (parentGroup.translateY || 0) + 'px',\n\n                                                display: parentGroup.display,\n\n                                                opacity: parentGroup.opacity,\n\n                                                pointerEvents: (parentGroup.styles &&\n\n                                                    parentGroup.styles.pointerEvents) // #5595\n\n                                                // the top group is appended to container\n\n                                            }, htmlGroup || container);\n\n                                    // Shortcut\n\n                                    htmlGroupStyle = htmlGroup.style;\n\n                                    // Set listeners to update the HTML div's position\n\n                                    // whenever the SVG group position is changed.\n\n                                    extend(parentGroup, {\n\n                                        // (#7287) Pass htmlGroup to use\n\n                                        // the related group\n\n                                        classSetter: (function (htmlGroup) {\n\n                                            return function (value) {\n\n                                                this.element.setAttribute('class', value);\n\n                                                htmlGroup.className = value;\n\n                                            };\n\n                                        }(htmlGroup)),\n\n                                        on: function () {\n\n                                            if (parents[0].div) { // #6418\n\n                                                wrapper.on.apply({ element: parents[0].div }, arguments);\n\n                                            }\n\n                                            return parentGroup;\n\n                                        },\n\n                                        translateXSetter: translateSetter,\n\n                                        translateYSetter: translateSetter\n\n                                    });\n\n                                    if (!parentGroup.addedSetters) {\n\n                                        addSetters(parentGroup);\n\n                                    }\n\n                                });\n\n                            }\n\n                        }\n\n                        else {\n\n                            htmlGroup = container;\n\n                        }\n\n                        htmlGroup.appendChild(element);\n\n                        // Shared with VML:\n\n                        wrapper.added = true;\n\n                        if (wrapper.alignOnAdd) {\n\n                            wrapper.htmlUpdateTransform();\n\n                        }\n\n                        return wrapper;\n\n                    };\n\n                }\n\n                return wrapper;\n\n            }\n\n        });"
        },
        {
          "file_path": "/src/highmaps.src.js",
          "match_lines": [
            1419,
            1419
          ],
          "match_position": [
            25,
            41
          ],
          "match_string": "                return (/%$/).test(value) ?"
        },
        {
          "file_path": "/src/highmaps.src.js",
          "match_lines": [
            4269,
            4269
          ],
          "match_position": [
            21,
            47
          ],
          "match_string": "                if (/(NaN| {2}|^$)/.test(value)) {"
        },
        {
          "file_path": "/src/highmaps.src.js",
          "match_lines": [
            7159,
            7159
          ],
          "match_position": [
            31,
            53
          ],
          "match_string": "                    isImage = imageRegex.test(symbol),"
        },
        {
          "file_path": "/src/highmaps.src.js",
          "match_lines": [
            7598,
            7598
          ],
          "match_position": [
            42,
            60
          ],
          "match_string": "                if ((this.styledMode || !/px/.test(fontSize)) &&"
        },
        {
          "file_path": "/src/highmaps.src.js",
          "match_lines": [
            7611,
            7611
          ],
          "match_position": [
            21,
            39
          ],
          "match_string": "                if (/px/.test(fontSize)) {"
        },
        {
          "file_path": "/src/highmaps.src.js",
          "match_lines": [
            8304,
            8740
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        var isFirefox = H.isFirefox,\n\n            isMS = H.isMS,\n\n            isWebKit = H.isWebKit,\n\n            SVGElement = H.SVGElement,\n\n            SVGRenderer = H.SVGRenderer,\n\n            win = H.win;\n\n        /* eslint-disable valid-jsdoc */\n\n        // Extend SvgElement for useHTML option.\n\n        extend(SVGElement.prototype, /** @lends SVGElement.prototype */ {\n\n            /**\n\n             * Apply CSS to HTML elements. This is used in text within SVG rendering and\n\n             * by the VML renderer\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlCss\n\n             *\n\n             * @param {Highcharts.CSSObject} styles\n\n             *\n\n             * @return {Highcharts.SVGElement}\n\n             */\n\n            htmlCss: function (styles) {\n\n                var wrapper = this,\n\n                    element = wrapper.element, \n\n                    // When setting or unsetting the width style, we need to update\n\n                    // transform (#8809)\n\n                    isSettingWidth = (element.tagName === 'SPAN' &&\n\n                        styles &&\n\n                        'width' in styles),\n\n                    textWidth = pick(isSettingWidth && styles.width,\n\n                    void 0),\n\n                    doTransform;\n\n                if (isSettingWidth) {\n\n                    delete styles.width;\n\n                    wrapper.textWidth = textWidth;\n\n                    doTransform = true;\n\n                }\n\n                if (styles && styles.textOverflow === 'ellipsis') {\n\n                    styles.whiteSpace = 'nowrap';\n\n                    styles.overflow = 'hidden';\n\n                }\n\n                wrapper.styles = extend(wrapper.styles, styles);\n\n                css(wrapper.element, styles);\n\n                // Now that all styles are applied, to the transform\n\n                if (doTransform) {\n\n                    wrapper.htmlUpdateTransform();\n\n                }\n\n                return wrapper;\n\n            },\n\n            /**\n\n             * VML and useHTML method for calculating the bounding box based on offsets.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlGetBBox\n\n             *\n\n             * @param {boolean} refresh\n\n             *        Whether to force a fresh value from the DOM or to use the cached\n\n             *        value.\n\n             *\n\n             * @return {Highcharts.BBoxObject}\n\n             *         A hash containing values for x, y, width and height.\n\n             */\n\n            htmlGetBBox: function () {\n\n                var wrapper = this,\n\n                    element = wrapper.element;\n\n                return {\n\n                    x: element.offsetLeft,\n\n                    y: element.offsetTop,\n\n                    width: element.offsetWidth,\n\n                    height: element.offsetHeight\n\n                };\n\n            },\n\n            /**\n\n             * VML override private method to update elements based on internal\n\n             * properties based on SVG transform.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlUpdateTransform\n\n             * @return {void}\n\n             */\n\n            htmlUpdateTransform: function () {\n\n                // aligning non added elements is expensive\n\n                if (!this.added) {\n\n                    this.alignOnAdd = true;\n\n                    return;\n\n                }\n\n                var wrapper = this,\n\n                    renderer = wrapper.renderer,\n\n                    elem = wrapper.element,\n\n                    translateX = wrapper.translateX || 0,\n\n                    translateY = wrapper.translateY || 0,\n\n                    x = wrapper.x || 0,\n\n                    y = wrapper.y || 0,\n\n                    align = wrapper.textAlign || 'left',\n\n                    alignCorrection = {\n\n                        left: 0,\n\n                    center: 0.5,\n\n                    right: 1\n\n                    }[align],\n\n                    styles = wrapper.styles,\n\n                    whiteSpace = styles && styles.whiteSpace;\n\n                /**\n\n                 * @private\n\n                 * @return {number}\n\n                 */\n\n                function getTextPxLength() {\n\n                    // Reset multiline/ellipsis in order to read width (#4928,\n\n                    // #5417)\n\n                    css(elem, {\n\n                        width: '',\n\n                        whiteSpace: whiteSpace || 'nowrap'\n\n                    });\n\n                    return elem.offsetWidth;\n\n                }\n\n                // apply translate\n\n                css(elem, {\n\n                    marginLeft: translateX,\n\n                    marginTop: translateY\n\n                });\n\n                if (!renderer.styledMode && wrapper.shadows) { // used in labels/tooltip\n\n                    wrapper.shadows.forEach(function (shadow) {\n\n                        css(shadow, {\n\n                            marginLeft: translateX + 1,\n\n                            marginTop: translateY + 1\n\n                        });\n\n                    });\n\n                }\n\n                // apply inversion\n\n                if (wrapper.inverted) { // wrapper is a group\n\n                    [].forEach.call(elem.childNodes, function (child) {\n\n                        renderer.invertChild(child, elem);\n\n                    });\n\n                }\n\n                if (elem.tagName === 'SPAN') {\n\n                    var rotation = wrapper.rotation, baseline, textWidth = wrapper.textWidth && pInt(wrapper.textWidth), currentTextTransform = [\n\n                            rotation,\n\n                            align,\n\n                            elem.innerHTML,\n\n                            wrapper.textWidth,\n\n                            wrapper.textAlign\n\n                        ].join(',');\n\n                    // Update textWidth. Use the memoized textPxLength if possible, to\n\n                    // avoid the getTextPxLength function using elem.offsetWidth.\n\n                    // Calling offsetWidth affects rendering time as it forces layout\n\n                    // (#7656).\n\n                    if (textWidth !== wrapper.oldTextWidth &&\n\n                        ((textWidth > wrapper.oldTextWidth) ||\n\n                            (wrapper.textPxLength || getTextPxLength()) > textWidth) && (\n\n                    // Only set the width if the text is able to word-wrap, or\n\n                    // text-overflow is ellipsis (#9537)\n\n                    /[ \\-]/.test(elem.textContent || elem.innerText) ||\n\n                        elem.style.textOverflow === 'ellipsis')) { // #983, #1254\n\n                        css(elem, {\n\n                            width: textWidth + 'px',\n\n                            display: 'block',\n\n                            whiteSpace: whiteSpace || 'normal' // #3331\n\n                        });\n\n                        wrapper.oldTextWidth = textWidth;\n\n                        wrapper.hasBoxWidthChanged = true; // #8159\n\n                    }\n\n                    else {\n\n                        wrapper.hasBoxWidthChanged = false; // #8159\n\n                    }\n\n                    // Do the calculations and DOM access only if properties changed\n\n                    if (currentTextTransform !== wrapper.cTT) {\n\n                        baseline = renderer.fontMetrics(elem.style.fontSize, elem).b;\n\n                        // Renderer specific handling of span rotation, but only if we\n\n                        // have something to update.\n\n                        if (defined(rotation) &&\n\n                            ((rotation !== (wrapper.oldRotation || 0)) ||\n\n                                (align !== wrapper.oldAlign))) {\n\n                            wrapper.setSpanRotation(rotation, alignCorrection, baseline);\n\n                        }\n\n                        wrapper.getSpanCorrection(\n\n                        // Avoid elem.offsetWidth if we can, it affects rendering\n\n                        // time heavily (#7656)\n\n                        ((!defined(rotation) && wrapper.textPxLength) || // #7920\n\n                            elem.offsetWidth), baseline, alignCorrection, rotation, align);\n\n                    }\n\n                    // apply position with correction\n\n                    css(elem, {\n\n                        left: (x + (wrapper.xCorr || 0)) + 'px',\n\n                        top: (y + (wrapper.yCorr || 0)) + 'px'\n\n                    });\n\n                    // record current text transform\n\n                    wrapper.cTT = currentTextTransform;\n\n                    wrapper.oldRotation = rotation;\n\n                    wrapper.oldAlign = align;\n\n                }\n\n            },\n\n            /**\n\n             * Set the rotation of an individual HTML span.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#setSpanRotation\n\n             * @param {number} rotation\n\n             * @param {number} alignCorrection\n\n             * @param {number} baseline\n\n             * @return {void}\n\n             */\n\n            setSpanRotation: function (rotation, alignCorrection, baseline) {\n\n                var rotationStyle = {},\n\n                    cssTransformKey = this.renderer.getTransformKey();\n\n                rotationStyle[cssTransformKey] = rotationStyle.transform =\n\n                    'rotate(' + rotation + 'deg)';\n\n                rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] =\n\n                    rotationStyle.transformOrigin =\n\n                        (alignCorrection * 100) + '% ' + baseline + 'px';\n\n                css(this.element, rotationStyle);\n\n            },\n\n            /**\n\n             * Get the correction in X and Y positioning as the element is rotated.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#getSpanCorrection\n\n             * @param {number} width\n\n             * @param {number} baseline\n\n             * @param {number} alignCorrection\n\n             * @return {void}\n\n             */\n\n            getSpanCorrection: function (width, baseline, alignCorrection) {\n\n                this.xCorr = -width * alignCorrection;\n\n                this.yCorr = -baseline;\n\n            }\n\n        });\n\n        // Extend SvgRenderer for useHTML option.\n\n        extend(SVGRenderer.prototype, /** @lends SVGRenderer.prototype */ {\n\n            /**\n\n             * @private\n\n             * @function Highcharts.SVGRenderer#getTransformKey\n\n             *\n\n             * @return {string}\n\n             */\n\n            getTransformKey: function () {\n\n                return isMS && !/Edge/.test(win.navigator.userAgent) ?\n\n                    '-ms-transform' :\n\n                    isWebKit ?\n\n                        '-webkit-transform' :\n\n                        isFirefox ?\n\n                            'MozTransform' :\n\n                            win.opera ?\n\n                                '-o-transform' :\n\n                                '';\n\n            },\n\n            /**\n\n             * Create HTML text node. This is used by the VML renderer as well as the\n\n             * SVG renderer through the useHTML option.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGRenderer#html\n\n             *\n\n             * @param {string} str\n\n             *        The text of (subset) HTML to draw.\n\n             *\n\n             * @param {number} x\n\n             *        The x position of the text's lower left corner.\n\n             *\n\n             * @param {number} y\n\n             *        The y position of the text's lower left corner.\n\n             *\n\n             * @return {Highcharts.HTMLDOMElement}\n\n             */\n\n            html: function (str, x, y) {\n\n                var wrapper = this.createElement('span'), element = wrapper.element, renderer = wrapper.renderer, isSVG = renderer.isSVG, addSetters = function (gWrapper, style) {\n\n                        // These properties are set as attributes on the SVG group, and\n\n                        // as identical CSS properties on the div. (#3542)\n\n                        ['opacity', 'visibility'].forEach(function (prop) {\n\n                            gWrapper[prop + 'Setter'] = function (value, key, elem) {\n\n                                var styleObject = gWrapper.div ?\n\n                                    gWrapper.div.style :\n\n                                    style;\n\n                            SVGElement.prototype[prop + 'Setter']\n\n                                .call(this, value, key, elem);\n\n                            if (styleObject) {\n\n                                styleObject[key] = value;\n\n                            }\n\n                        };\n\n                    });\n\n                    gWrapper.addedSetters = true;\n\n                };\n\n                // Text setter\n\n                wrapper.textSetter = function (value) {\n\n                    if (value !== element.innerHTML) {\n\n                        delete this.bBox;\n\n                        delete this.oldTextWidth;\n\n                    }\n\n                    this.textStr = value;\n\n                    element.innerHTML = pick(value, '');\n\n                    wrapper.doTransform = true;\n\n                };\n\n                // Add setters for the element itself (#4938)\n\n                if (isSVG) { // #4938, only for HTML within SVG\n\n                    addSetters(wrapper, wrapper.element.style);\n\n                }\n\n                // Various setters which rely on update transform\n\n                wrapper.xSetter =\n\n                    wrapper.ySetter =\n\n                        wrapper.alignSetter =\n\n                            wrapper.rotationSetter =\n\n                                function (value, key) {\n\n                                    if (key === 'align') {\n\n                                        // Do not overwrite the SVGElement.align method. Same as VML.\n\n                                        key = 'textAlign';\n\n                                    }\n\n                                    wrapper[key] = value;\n\n                                    wrapper.doTransform = true;\n\n                                };\n\n                // Runs at the end of .attr()\n\n                wrapper.afterSetters = function () {\n\n                    // Update transform. Do this outside the loop to prevent redundant\n\n                    // updating for batch setting of attributes.\n\n                    if (this.doTransform) {\n\n                        this.htmlUpdateTransform();\n\n                        this.doTransform = false;\n\n                    }\n\n                };\n\n                // Set the default attributes\n\n                wrapper\n\n                    .attr({\n\n                    text: str,\n\n                    x: Math.round(x),\n\n                    y: Math.round(y)\n\n                })\n\n                    .css({\n\n                    position: 'absolute'\n\n                });\n\n                if (!renderer.styledMode) {\n\n                    wrapper.css({\n\n                        fontFamily: this.style.fontFamily,\n\n                        fontSize: this.style.fontSize\n\n                    });\n\n                }\n\n                // Keep the whiteSpace style outside the wrapper.styles collection\n\n                element.style.whiteSpace = 'nowrap';\n\n                // Use the HTML specific .css method\n\n                wrapper.css = wrapper.htmlCss;\n\n                // This is specific for HTML within SVG\n\n                if (isSVG) {\n\n                    wrapper.add = function (svgGroupWrapper) {\n\n                        var htmlGroup,\n\n                            container = renderer.box.parentNode,\n\n                            parentGroup,\n\n                            parents = [];\n\n                        this.parentGroup = svgGroupWrapper;\n\n                        // Create a mock group to hold the HTML elements\n\n                        if (svgGroupWrapper) {\n\n                            htmlGroup = svgGroupWrapper.div;\n\n                            if (!htmlGroup) {\n\n                                // Read the parent chain into an array and read from top\n\n                                // down\n\n                                parentGroup = svgGroupWrapper;\n\n                                while (parentGroup) {\n\n                                    parents.push(parentGroup);\n\n                                    // Move up to the next parent group\n\n                                    parentGroup = parentGroup.parentGroup;\n\n                                }\n\n                                // Ensure dynamically updating position when any parent\n\n                                // is translated\n\n                                parents.reverse().forEach(function (parentGroup) {\n\n                                    var htmlGroupStyle,\n\n                                        cls = attr(parentGroup.element, 'class');\n\n                                    /**\n\n                                     * Common translate setter for X and Y on the HTML\n\n                                     * group. Reverted the fix for #6957 du to\n\n                                     * positioning problems and offline export (#7254,\n\n                                     * #7280, #7529)\n\n                                     * @private\n\n                                     * @param {*} value\n\n                                     * @param {string} key\n\n                                     * @return {void}\n\n                                     */\n\n                                    function translateSetter(value, key) {\n\n                                        parentGroup[key] = value;\n\n                                        if (key === 'translateX') {\n\n                                            htmlGroupStyle.left = value + 'px';\n\n                                        }\n\n                                        else {\n\n                                            htmlGroupStyle.top = value + 'px';\n\n                                        }\n\n                                        parentGroup.doTransform = true;\n\n                                    }\n\n                                    // Create a HTML div and append it to the parent div\n\n                                    // to emulate the SVG group structure\n\n                                    htmlGroup =\n\n                                        parentGroup.div =\n\n                                            parentGroup.div || createElement('div', cls ? { className: cls } : void 0, {\n\n                                                position: 'absolute',\n\n                                                left: (parentGroup.translateX || 0) + 'px',\n\n                                                top: (parentGroup.translateY || 0) + 'px',\n\n                                                display: parentGroup.display,\n\n                                                opacity: parentGroup.opacity,\n\n                                                pointerEvents: (parentGroup.styles &&\n\n                                                    parentGroup.styles.pointerEvents) // #5595\n\n                                                // the top group is appended to container\n\n                                            }, htmlGroup || container);\n\n                                    // Shortcut\n\n                                    htmlGroupStyle = htmlGroup.style;\n\n                                    // Set listeners to update the HTML div's position\n\n                                    // whenever the SVG group position is changed.\n\n                                    extend(parentGroup, {\n\n                                        // (#7287) Pass htmlGroup to use\n\n                                        // the related group\n\n                                        classSetter: (function (htmlGroup) {\n\n                                            return function (value) {\n\n                                                this.element.setAttribute('class', value);\n\n                                                htmlGroup.className = value;\n\n                                            };\n\n                                        }(htmlGroup)),\n\n                                        on: function () {\n\n                                            if (parents[0].div) { // #6418\n\n                                                wrapper.on.apply({ element: parents[0].div }, arguments);\n\n                                            }\n\n                                            return parentGroup;\n\n                                        },\n\n                                        translateXSetter: translateSetter,\n\n                                        translateYSetter: translateSetter\n\n                                    });\n\n                                    if (!parentGroup.addedSetters) {\n\n                                        addSetters(parentGroup);\n\n                                    }\n\n                                });\n\n                            }\n\n                        }\n\n                        else {\n\n                            htmlGroup = container;\n\n                        }\n\n                        htmlGroup.appendChild(element);\n\n                        // Shared with VML:\n\n                        wrapper.added = true;\n\n                        if (wrapper.alignOnAdd) {\n\n                            wrapper.htmlUpdateTransform();\n\n                        }\n\n                        return wrapper;\n\n                    };\n\n                }\n\n                return wrapper;\n\n            }\n\n        });"
        },
        {
          "file_path": "/src/es-modules/modules/data.src.js",
          "match_lines": [
            1422,
            1422
          ],
          "match_position": [
            27,
            48
          ],
          "match_string": "            if (inside && /^[0-9\\s]+$/.test(str)) {"
        },
        {
          "file_path": "/src/modules/oldie.js",
          "match_lines": [
            31,
            31
          ],
          "match_position": [
            24,
            32
          ],
          "match_string": "l;l=w}else l=k}else if(e.test(a)&&\"IMG\"!==b.tagName){var J=n(a);d[c+\"-opacitySetter\"](J.get(\"a\"),c,b);l=J.get(\"rgb\")}else l=b.getElementsByTagName(c),l.length&&(l[0].opacity=1,l[0].type=\"solid\"),l=a;return l},prepVML:function(a){var b=this.isIE8;a=a.join(\"\");b?(a=a.replace(\"/>\",' xmlns=\"urn:schemas-microsoft-com:vml\" />'),a=-1===a.indexOf('style=\"')?a.replace(\"/>\",' style=\"display:inline-block;behavior:url(#default#VML);\" />'):a.replace('style=\"','style=\"display:inline-block;behavior:url(#default#VML);')):"
        },
        {
          "file_path": "/src/modules/oldie.src.js",
          "match_lines": [
            1040,
            1040
          ],
          "match_position": [
            30,
            56
          ],
          "match_string": "                    else if (regexRgba.test(colorOption) && elem.tagName !== 'IMG') {"
        },
        {
          "file_path": "/src/modules/data.src.js",
          "match_lines": [
            1659,
            1659
          ],
          "match_position": [
            35,
            56
          ],
          "match_string": "                    if (inside && /^[0-9\\s]+$/.test(str)) {"
        },
        {
          "file_path": "/src/modules/data.js",
          "match_lines": [
            29,
            29
          ],
          "match_position": [
            182,
            201
          ],
          "match_string": "(a[c]=null)});g&&g.series?g.update({data:{columns:d}}):(b.columns=d,b.dataFound())}));return!1};f.prototype.trim=function(a,b){\"string\"===typeof a&&(a=a.replace(/^\\s+|\\s+$/g,\"\"),b&&/^[0-9\\s]+$/.test(a)&&(a=a.replace(/\\s/g,\"\")),this.decimalRegex&&(a=a.replace(this.decimalRegex,\"$1.$2\")));return a};f.prototype.parseTypes=function(){for(var a=this.columns,b=a.length;b--;)this.parseColumn(a[b],b)};f.prototype.parseColumn=function(a,b){var e=this.rawColumns,d=this.columns,g=a.length,c=this.firstRowAsNames,"
        },
        {
          "file_path": "/src/lib/svg2pdf.js",
          "match_lines": [
            30,
            30
          ],
          "match_position": [
            13835,
            14263
          ],
          "match_string": "!function(t){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=t();else if(\"function\"==typeof define&&define.amd)define([],t);else{(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).svg2pdf=t()}}(function(){return function n(s,o,h){function c(e,t){if(!o[e]){if(!s[e]){var r=\"function\"==typeof require&&require;if(!t&&r)return r(e,!0);if(u)return u(e,!0);var a=new Error(\"Cannot find module '\"+e+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var i=o[e]={exports:{}};s[e][0].call(i.exports,function(t){return c(s[e][1][t]||t)},i,i.exports,n,s,o,h)}return o[e].exports}for(var u=\"function\"==typeof require&&require,t=0;t<h.length;t++)c(h[t]);return c}({1:[function(t,e,r){\"use strict\";e.exports=t(\"./lib/svgpath\")},{\"./lib/svgpath\":6}],2:[function(t,e,r){\"use strict\";var C=2*Math.PI;function I(t,e,r,a){var i=t*a-e*r<0?-1:1,n=(t*r+e*a)/(Math.sqrt(t*t+e*e)*Math.sqrt(t*t+e*e));return 1<n&&(n=1),n<-1&&(n=-1),i*Math.acos(n)}e.exports=function(t,e,r,a,i,n,s,o,h){var c=Math.sin(h*C/360),u=Math.cos(h*C/360),l=u*(t-r)/2+c*(e-a)/2,f=-c*(t-r)/2+u*(e-a)/2;if(0===l&&0===f)return[];if(0===s||0===o)return[];s=Math.abs(s),o=Math.abs(o);var d=l*l/(s*s)+f*f/(o*o);1<d&&(s*=Math.sqrt(d),o*=Math.sqrt(d));var p,g,x,b,m,v,y,k=function(t,e,r,a,i,n,s,o,h,c){var u=c*(t-r)/2+h*(e-a)/2,l=-h*(t-r)/2+c*(e-a)/2,f=s*s,d=o*o,p=u*u,g=l*l,x=f*d-f*g-d*p;x<0&&(x=0),x/=f*g+d*p;var b=(x=Math.sqrt(x)*(i===n?-1:1))*s/o*l,m=x*-o/s*u,v=c*b-h*m+(t+r)/2,y=h*b+c*m+(e+a)/2,k=(u-b)/s,w=(l-m)/o,M=(-u-b)/s,A=(-l-m)/o,S=I(1,0,k,w),F=I(k,w,M,A);return 0===n&&0<F&&(F-=C),1===n&&F<0&&(F+=C),[v,y,S,F]}(t,e,r,a,i,n,s,o,c,u),w=[],M=k[2],A=k[3],S=Math.max(Math.ceil(Math.abs(A)/(C/4)),1);A/=S;for(var F=0;F<S;F++)w.push((p=M,g=A,void 0,x=4/3*Math.tan(g/4),b=Math.cos(p),m=Math.sin(p),v=Math.cos(p+g),y=Math.sin(p+g),[b,m,b-m*x,m+b*x,v+y*x,y-v*x,v,y])),M+=A;return w.map(function(t){for(var e=0;e<t.length;e+=2){var r=t[e+0],a=t[e+1],i=u*(r*=s)-c*(a*=o),n=c*r+u*a;t[e+0]=i+k[0],t[e+1]=n+k[1]}return t})}},{}],3:[function(t,e,r){\"use strict\";var l=1e-10,f=Math.PI/180;function a(t,e,r){if(!(this instanceof a))return new a(t,e,r);this.rx=t,this.ry=e,this.ax=r}a.prototype.transform=function(t){var e=Math.cos(this.ax*f),r=Math.sin(this.ax*f),a=[this.rx*(t[0]*e+t[2]*r),this.rx*(t[1]*e+t[3]*r),this.ry*(-t[0]*r+t[2]*e),this.ry*(-t[1]*r+t[3]*e)],i=a[0]*a[0]+a[2]*a[2],n=a[1]*a[1]+a[3]*a[3],s=((a[0]-a[3])*(a[0]-a[3])+(a[2]+a[1])*(a[2]+a[1]))*((a[0]+a[3])*(a[0]+a[3])+(a[2]-a[1])*(a[2]-a[1])),o=(i+n)/2;if(s<l*o)return this.rx=this.ry=Math.sqrt(o),this.ax=0,this;var h=a[0]*a[1]+a[2]*a[3],c=o+(s=Math.sqrt(s))/2,u=o-s/2;return this.ax=Math.abs(h)<l&&Math.abs(c-n)<l?90:180*Math.atan(Math.abs(h)>Math.abs(c-n)?(c-i)/h:h/(c-n))/Math.PI,0<=this.ax?(this.rx=Math.sqrt(c),this.ry=Math.sqrt(u)):(this.ax+=90,this.rx=Math.sqrt(u),this.ry=Math.sqrt(c)),this},a.prototype.isDegenerate=function(){return this.rx<l*this.ry||this.ry<l*this.rx},e.exports=a},{}],4:[function(t,e,r){\"use strict\";function a(){if(!(this instanceof a))return new a;this.queue=[],this.cache=null}a.prototype.matrix=function(t){return 1===t[0]&&0===t[1]&&0===t[2]&&1===t[3]&&0===t[4]&&0===t[5]||(this.cache=null,this.queue.push(t)),this},a.prototype.translate=function(t,e){return 0===t&&0===e||(this.cache=null,this.queue.push([1,0,0,1,t,e])),this},a.prototype.scale=function(t,e){return 1===t&&1===e||(this.cache=null,this.queue.push([t,0,0,e,0,0])),this},a.prototype.rotate=function(t,e,r){var a,i,n;return 0!==t&&(this.translate(e,r),a=t*Math.PI/180,i=Math.cos(a),n=Math.sin(a),this.queue.push([i,n,-n,i,0,0]),this.cache=null,this.translate(-e,-r)),this},a.prototype.skewX=function(t){return 0!==t&&(this.cache=null,this.queue.push([1,0,Math.tan(t*Math.PI/180),1,0,0])),this},a.prototype.skewY=function(t){return 0!==t&&(this.cache=null,this.queue.push([1,Math.tan(t*Math.PI/180),0,1,0,0])),this},a.prototype.toArray=function(){if(this.cache)return this.cache;if(!this.queue.length)return this.cache=[1,0,0,1,0,0],this.cache;if(this.cache=this.queue[0],1===this.queue.length)return this.cache;for(var t=1;t<this.queue.length;t++)this.cache=(e=this.cache,r=this.queue[t],[e[0]*r[0]+e[2]*r[1],e[1]*r[0]+e[3]*r[1],e[0]*r[2]+e[2]*r[3],e[1]*r[2]+e[3]*r[3],e[0]*r[4]+e[2]*r[5]+e[4],e[1]*r[4]+e[3]*r[5]+e[5]]);var e,r;return this.cache},a.prototype.calc=function(t,e,r){var a;return this.queue.length?(this.cache||(this.cache=this.toArray()),[t*(a=this.cache)[0]+e*a[2]+(r?0:a[4]),t*a[1]+e*a[3]+(r?0:a[5])]):[t,e]},e.exports=a},{}],5:[function(t,e,r){\"use strict\";var s={a:7,c:6,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,z:0},a=[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279];function c(t){return 48<=t&&t<=57}function i(t){this.index=0,this.path=t,this.max=t.length,this.result=[],this.param=0,this.err=\"\",this.segmentStart=0,this.data=[]}function o(t){for(;t.index<t.max&&(10===(e=t.path.charCodeAt(t.index))||13===e||8232===e||8233===e||32===e||9===e||11===e||12===e||160===e||5760<=e&&0<=a.indexOf(e));)t.index++;var e}function h(t){var e,r=t.index,a=r,i=t.max,n=!1,s=!1,o=!1,h=!1;if(i<=a)t.err=\"SvgPath: missed param (at pos \"+a+\")\";else if(43!==(e=t.path.charCodeAt(a))&&45!==e||(e=++a<i?t.path.charCodeAt(a):0),c(e)||46===e){if(46!==e){if(n=48===e,e=++a<i?t.path.charCodeAt(a):0,n&&a<i&&e&&c(e))return void(t.err=\"SvgPath: numbers started with `0` such as `09` are ilegal (at pos \"+r+\")\");for(;a<i&&c(t.path.charCodeAt(a));)a++,s=!0;e=a<i?t.path.charCodeAt(a):0}if(46===e){for(h=!0,a++;c(t.path.charCodeAt(a));)a++,o=!0;e=a<i?t.path.charCodeAt(a):0}if(101===e||69===e){if(h&&!s&&!o)return void(t.err=\"SvgPath: invalid float exponent (at pos \"+a+\")\");if(43!==(e=++a<i?t.path.charCodeAt(a):0)&&45!==e||a++,!(a<i&&c(t.path.charCodeAt(a))))return void(t.err=\"SvgPath: invalid float exponent (at pos \"+a+\")\");for(;a<i&&c(t.path.charCodeAt(a));)a++}t.index=a,t.param=parseFloat(t.path.slice(r,a))+0}else t.err=\"SvgPath: param should start with 0..9 or `.` (at pos \"+a+\")\"}function u(t){var e,r;r=(e=t.path[t.segmentStart]).toLowerCase();var a=t.data;if(\"m\"===r&&2<a.length&&(t.result.push([e,a[0],a[1]]),a=a.slice(2),r=\"l\",e=\"m\"===e?\"l\":\"L\"),\"r\"===r)t.result.push([e].concat(a));else for(;a.length>=s[r]&&(t.result.push([e].concat(a.splice(0,s[r]))),s[r]););}function n(t){var e,r,a,i=t.max;if(t.segmentStart=t.index,function(t){switch(32|t){case 109:case 122:case 108:case 104:case 118:case 99:case 115:case 113:case 116:case 97:case 114:return!0}return!1}(t.path.charCodeAt(t.index)))if(r=s[t.path[t.index].toLowerCase()],t.index++,o(t),t.data=[],r){for(e=!1;;){for(a=r;0<a;a--){if(h(t),t.err.length)return;t.data.push(t.param),o(t),e=!1,t.index<i&&44===t.path.charCodeAt(t.index)&&(t.index++,o(t),e=!0)}if(!e){if(t.index>=t.max)break;if(!(48<=(n=t.path.charCodeAt(t.index))&&n<=57||43===n||45===n||46===n))break}}var n;u(t)}else u(t);else t.err=\"SvgPath: bad command \"+t.path[t.index]+\" (at pos \"+t.index+\")\"}e.exports=function(t){var e=new i(t),r=e.max;for(o(e);e.index<r&&!e.err.length;)n(e);return e.err.length?e.result=[]:e.result.length&&(\"mM\".indexOf(e.result[0][0])<0?(e.err=\"SvgPath: string should start with `M` or `m`\",e.result=[]):e.result[0][0]=\"M\"),{err:e.err,segments:e.result}}},{}],6:[function(t,e,r){\"use strict\";var a=t(\"./path_parse\"),i=t(\"./transform_parse\"),n=t(\"./matrix\"),c=t(\"./a2c\"),d=t(\"./ellipse\");function s(t){if(!(this instanceof s))return new s(t);var e=a(t);this.segments=e.segments,this.err=e.err,this.__stack=[]}s.prototype.__matrix=function(u){var l,f=this;u.queue.length&&this.iterate(function(t,e,r,a){var i,n,s,o;switch(t[0]){case\"v\":n=0===(i=u.calc(0,t[1],!0))[0]?[\"v\",i[1]]:[\"l\",i[0],i[1]];break;case\"V\":n=(i=u.calc(r,t[1],!1))[0]===u.calc(r,a,!1)[0]?[\"V\",i[1]]:[\"L\",i[0],i[1]];break;case\"h\":n=0===(i=u.calc(t[1],0,!0))[1]?[\"h\",i[0]]:[\"l\",i[0],i[1]];break;case\"H\":n=(i=u.calc(t[1],a,!1))[1]===u.calc(r,a,!1)[1]?[\"H\",i[0]]:[\"L\",i[0],i[1]];break;case\"a\":case\"A\":var h=u.toArray(),c=d(t[1],t[2],t[3]).transform(h);if(h[0]*h[3]-h[1]*h[2]<0&&(t[5]=t[5]?\"0\":\"1\"),i=u.calc(t[6],t[7],\"a\"===t[0]),\"A\"===t[0]&&t[6]===r&&t[7]===a||\"a\"===t[0]&&0===t[6]&&0===t[7]){n=[\"a\"===t[0]?\"l\":\"L\",i[0],i[1]];break}n=c.isDegenerate()?[\"a\"===t[0]?\"l\":\"L\",i[0],i[1]]:[t[0],c.rx,c.ry,c.ax,t[4],t[5],i[0],i[1]];break;case\"m\":o=0<e,n=[\"m\",(i=u.calc(t[1],t[2],o))[0],i[1]];break;default:for(n=[s=t[0]],o=s.toLowerCase()===s,l=1;l<t.length;l+=2)i=u.calc(t[l],t[l+1],o),n.push(i[0],i[1])}f.segments[e]=n},!0)},s.prototype.__evaluateStack=function(){var t,e;if(this.__stack.length){if(1===this.__stack.length)return this.__matrix(this.__stack[0]),void(this.__stack=[]);for(t=n(),e=this.__stack.length;0<=--e;)t.matrix(this.__stack[e].toArray());this.__matrix(t),this.__stack=[]}},s.prototype.toString=function(){var t,e,r=[];this.__evaluateStack();for(var a=0;a<this.segments.length;a++)e=this.segments[a][0],t=0<a&&\"m\"!==e&&\"M\"!==e&&e===this.segments[a-1][0],r=r.concat(t?this.segments[a].slice(1):this.segments[a]);return r.join(\" \").replace(/ ?([achlmqrstvz]) ?/gi,\"$1\").replace(/ \\-/g,\"-\").replace(/zm/g,\"z m\")},s.prototype.translate=function(t,e){return this.__stack.push(n().translate(t,e||0)),this},s.prototype.scale=function(t,e){return this.__stack.push(n().scale(t,e||0===e?e:t)),this},s.prototype.rotate=function(t,e,r){return this.__stack.push(n().rotate(t,e||0,r||0)),this},s.prototype.skewX=function(t){return this.__stack.push(n().skewX(t)),this},s.prototype.skewY=function(t){return this.__stack.push(n().skewY(t)),this},s.prototype.matrix=function(t){return this.__stack.push(n().matrix(t)),this},s.prototype.transform=function(t){return t.trim()&&this.__stack.push(i(t)),this},s.prototype.round=function(a){var e,i=0,n=0,s=0,o=0;return a=a||0,this.__evaluateStack(),this.segments.forEach(function(r){var t=r[0].toLowerCase()===r[0];switch(r[0]){case\"H\":case\"h\":return t&&(r[1]+=s),s=r[1]-r[1].toFixed(a),void(r[1]=+r[1].toFixed(a));case\"V\":case\"v\":return t&&(r[1]+=o),o=r[1]-r[1].toFixed(a),void(r[1]=+r[1].toFixed(a));case\"Z\":case\"z\":return s=i,void(o=n);case\"M\":case\"m\":return t&&(r[1]+=s,r[2]+=o),s=r[1]-r[1].toFixed(a),o=r[2]-r[2].toFixed(a),i=s,n=o,r[1]=+r[1].toFixed(a),void(r[2]=+r[2].toFixed(a));case\"A\":case\"a\":return t&&(r[6]+=s,r[7]+=o),s=r[6]-r[6].toFixed(a),o=r[7]-r[7].toFixed(a),r[1]=+r[1].toFixed(a),r[2]=+r[2].toFixed(a),r[3]=+r[3].toFixed(a+2),r[6]=+r[6].toFixed(a),void(r[7]=+r[7].toFixed(a));default:return e=r.length,t&&(r[e-2]+=s,r[e-1]+=o),s=r[e-2]-r[e-2].toFixed(a),o=r[e-1]-r[e-1].toFixed(a),void r.forEach(function(t,e){e&&(r[e]=+r[e].toFixed(a))})}}),this},s.prototype.iterate=function(i,t){var e,r,a,n=this.segments,s={},o=!1,h=0,c=0,u=0,l=0;if(t||this.__evaluateStack(),n.forEach(function(t,e){var r=i(t,e,h,c);Array.isArray(r)&&(s[e]=r,o=!0);var a=t[0]===t[0].toLowerCase();switch(t[0]){case\"m\":case\"M\":return h=t[1]+(a?h:0),c=t[2]+(a?c:0),u=h,void(l=c);case\"h\":case\"H\":return void(h=t[1]+(a?h:0));case\"v\":case\"V\":return void(c=t[1]+(a?c:0));case\"z\":case\"Z\":return h=u,void(c=l);default:h=t[t.length-2]+(a?h:0),c=t[t.length-1]+(a?c:0)}}),!o)return this;for(a=[],e=0;e<n.length;e++)if(void 0!==s[e])for(r=0;r<s[e].length;r++)a.push(s[e][r]);else a.push(n[e]);return this.segments=a,this},s.prototype.abs=function(){return this.iterate(function(t,e,r,a){var i,n=t[0],s=n.toUpperCase();if(n!==s)switch(t[0]=s,n){case\"v\":return void(t[1]+=a);case\"a\":return t[6]+=r,void(t[7]+=a);default:for(i=1;i<t.length;i++)t[i]+=i%2?r:a}},!0),this},s.prototype.rel=function(){return this.iterate(function(t,e,r,a){var i,n=t[0],s=n.toLowerCase();if(n!==s&&(0!==e||\"M\"!==n))switch(t[0]=s,n){case\"V\":return void(t[1]-=a);case\"A\":return t[6]-=r,void(t[7]-=a);default:for(i=1;i<t.length;i++)t[i]-=i%2?r:a}},!0),this},s.prototype.unarc=function(){return this.iterate(function(t,e,r,a){var i,n,s,o=[],h=t[0];return\"A\"!==h&&\"a\"!==h?null:(\"a\"===h?(n=r+t[6],s=a+t[7]):(n=t[6],s=t[7]),0===(i=c(r,a,n,s,t[4],t[5],t[1],t[2],t[3])).length?[[\"a\"===t[0]?\"l\":\"L\",t[6],t[7]]]:(i.forEach(function(t){o.push([\"C\",t[2],t[3],t[4],t[5],t[6],t[7]])}),o))}),this},s.prototype.unshort=function(){var o,h,c,u,l,f=this.segments;return this.iterate(function(t,e,r,a){var i,n=t[0],s=n.toUpperCase();e&&(\"T\"===s?(i=\"t\"===n,\"Q\"===(c=f[e-1])[0]?(o=c[1]-r,h=c[2]-a):\"q\"===c[0]?(o=c[1]-c[3],h=c[2]-c[4]):h=o=0,u=-o,l=-h,i||(u+=r,l+=a),f[e]=[i?\"q\":\"Q\",u,l,t[1],t[2]]):\"S\"===s&&(i=\"s\"===n,\"C\"===(c=f[e-1])[0]?(o=c[3]-r,h=c[4]-a):\"c\"===c[0]?(o=c[3]-c[5],h=c[4]-c[6]):h=o=0,u=-o,l=-h,i||(u+=r,l+=a),f[e]=[i?\"c\":\"C\",u,l,t[1],t[2],t[3],t[4]]))}),this},e.exports=s},{\"./a2c\":2,\"./ellipse\":3,\"./matrix\":4,\"./path_parse\":5,\"./transform_parse\":7}],7:[function(t,e,r){\"use strict\";var i=t(\"./matrix\"),n={matrix:!0,scale:!0,rotate:!0,translate:!0,skewX:!0,skewY:!0},s=/\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*/,o=/[\\s,]+/;e.exports=function(t){var e,r,a=new i;return t.split(s).forEach(function(t){if(t.length)if(void 0===n[t])switch(r=t.split(o).map(function(t){return+t||0}),e){case\"matrix\":return void(6===r.length&&a.matrix(r));case\"scale\":return void(1===r.length?a.scale(r[0],r[0]):2===r.length&&a.scale(r[0],r[1]));case\"rotate\":return void(1===r.length?a.rotate(r[0],0,0):3===r.length&&a.rotate(r[0],r[1],r[2]));case\"translate\":return void(1===r.length?a.translate(r[0],0):2===r.length&&a.translate(r[0],r[1]));case\"skewX\":return void(1===r.length&&a.skewX(r[0]));case\"skewY\":return void(1===r.length&&a.skewY(r[0]))}else e=t}),a}},{\"./matrix\":4}],8:[function(t,e,r){\"use strict\";var d={}.hasOwnProperty,p=/[ -,\\.\\/;-@\\[-\\^`\\{-~]/,g=/[ -,\\.\\/;-@\\[\\]\\^`\\{-~]/,x=/(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g,a=function t(e,r){\"single\"!=(r=function(t,e){if(!t)return e;var r={};for(var a in e)r[a]=d.call(t,a)?t[a]:e[a];return r}(r,t.options)).quotes&&\"double\"!=r.quotes&&(r.quotes=\"single\");for(var a=\"double\"==r.quotes?'\"':\"'\",i=r.isIdentifier,n=e.charAt(0),s=\"\",o=0,h=e.length;o<h;){var c=e.charAt(o++),u=c.charCodeAt(),l=void 0;if(u<32||126<u){if(55296<=u&&u<=56319&&o<h){var f=e.charCodeAt(o++);56320==(64512&f)?u=((1023&u)<<10)+(1023&f)+65536:o--}l=\"\\\\\"+u.toString(16).toUpperCase()+\" \"}else l=r.escapeEverything?p.test(c)?\"\\\\\"+c:\"\\\\\"+u.toString(16).toUpperCase()+\" \":/[\\t\\n\\f\\r\\x0B:]/.test(c)?i||\":\"!=c?\"\\\\\"+u.toString(16).toUpperCase()+\" \":c:\"\\\\\"==c||!i&&('\"'==c&&a==c||\"'\"==c&&a==c)||i&&g.test(c)?\"\\\\\"+c:c;s+=l}return i&&(/^_/.test(s)?s=\"\\\\_\"+s.slice(1):/^-[-\\d]/.test(s)?s=\"\\\\-\"+s.slice(1):/\\d/.test(n)&&(s=\"\\\\3\"+n+\" \"+s.slice(1))),s=s.replace(x,function(t,e,r){return e&&e.length%2?t:(e||\"\")+r}),!i&&r.wrap?a+s+a:s};a.options={escapeEverything:!1,isIdentifier:!1,quotes:\"single\",wrap:!1},a.version=\"1.0.1\",e.exports=a},{}],9:[function(t,e,r){var h=/[a-z0-9_-]/i,c=/[\\s\\t]/,o=/[^a-z0-9_-]/i;e.exports={parse:function(t){for(var e,r,a=!0,i=0,n=\"\",s=0,o=[];;){if(r=t[s],0===i){if(!r&&a)break;if(!r&&!a)throw new Error(\"Parse error\");if('\"'===r||\"'\"===r)e=r,a=!(i=1);else if(c.test(r));else{if(!h.test(r))throw new Error(\"Parse error\");a=!(i=3),s--}}else if(1===i){if(!r)throw new Error(\"Parse Error\");\"\\\\\"===r?i=2:r===e?(o.push(n),n=\"\",i=4):n+=r}else if(2===i){if(r!==e&&\"\\\\\"!==r)throw new Error(\"Parse error\");n+=r,i=1}else if(3===i){if(!r){o.push(n);break}if(h.test(r))n+=r;else if(\",\"===r)o.push(n),n=\"\",i=0;else{if(!c.test(r))throw new Error(\"Parse error\");o.push(n),n=\"\",i=4}}else if(4===i){if(!r)break;if(\",\"===r)i=0;else if(!c.test(r))throw new Error(\"Parse error\")}s++}return o},stringify:function(t,e){var r=e&&e.quote||'\"';if('\"'!==r&&\"'\"!==r)throw new Error(\"Quote must be `'` or `\\\"`\");for(var a=new RegExp(r,\"g\"),i=[],n=0;n<t.length;++n){var s=t[n];o.test(s)&&(s=r+(s=s.replace(/\\\\/g,\"\\\\\\\\\").replace(a,\"\\\\\"+r))+r),i.push(s)}return i.join(\", \")}}},{}],10:[function(t,e,r){"
        },
        {
          "file_path": "/src/lib/jspdf.src.js",
          "match_lines": [
            10226,
            10227
          ],
          "match_position": [
            9,
            28
          ],
          "match_string": "        var rx = /data:image\\/(\\w+).*/i;\n\n        var m = rx.exec(img);"
        },
        {
          "file_path": "/src/es-modules/parts/Utilities.js",
          "match_lines": [
            1259,
            1259
          ],
          "match_position": [
            13,
            29
          ],
          "match_string": "    return (/%$/).test(value) ?"
        },
        {
          "file_path": "/src/es-modules/modules/oldie.src.js",
          "match_lines": [
            942,
            942
          ],
          "match_position": [
            22,
            48
          ],
          "match_string": "            else if (regexRgba.test(colorOption) && elem.tagName !== 'IMG') {"
        },
        {
          "file_path": "/src/es-modules/modules/funnel.src.js",
          "match_lines": [
            163,
            163
          ],
          "match_position": [
            21,
            38
          ],
          "match_string": "            return (/%$/).test(length) ?"
        },
        {
          "file_path": "/src/highcharts-gantt.src.js",
          "match_lines": [
            1419,
            1419
          ],
          "match_position": [
            25,
            41
          ],
          "match_string": "                return (/%$/).test(value) ?"
        },
        {
          "file_path": "/src/highcharts-gantt.src.js",
          "match_lines": [
            4269,
            4269
          ],
          "match_position": [
            21,
            47
          ],
          "match_string": "                if (/(NaN| {2}|^$)/.test(value)) {"
        },
        {
          "file_path": "/src/highcharts-gantt.src.js",
          "match_lines": [
            7159,
            7159
          ],
          "match_position": [
            31,
            53
          ],
          "match_string": "                    isImage = imageRegex.test(symbol),"
        },
        {
          "file_path": "/src/highcharts-gantt.src.js",
          "match_lines": [
            7598,
            7598
          ],
          "match_position": [
            42,
            60
          ],
          "match_string": "                if ((this.styledMode || !/px/.test(fontSize)) &&"
        },
        {
          "file_path": "/src/highcharts-gantt.src.js",
          "match_lines": [
            7611,
            7611
          ],
          "match_position": [
            21,
            39
          ],
          "match_string": "                if (/px/.test(fontSize)) {"
        },
        {
          "file_path": "/src/highcharts-gantt.src.js",
          "match_lines": [
            8304,
            8740
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        var isFirefox = H.isFirefox,\n\n            isMS = H.isMS,\n\n            isWebKit = H.isWebKit,\n\n            SVGElement = H.SVGElement,\n\n            SVGRenderer = H.SVGRenderer,\n\n            win = H.win;\n\n        /* eslint-disable valid-jsdoc */\n\n        // Extend SvgElement for useHTML option.\n\n        extend(SVGElement.prototype, /** @lends SVGElement.prototype */ {\n\n            /**\n\n             * Apply CSS to HTML elements. This is used in text within SVG rendering and\n\n             * by the VML renderer\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlCss\n\n             *\n\n             * @param {Highcharts.CSSObject} styles\n\n             *\n\n             * @return {Highcharts.SVGElement}\n\n             */\n\n            htmlCss: function (styles) {\n\n                var wrapper = this,\n\n                    element = wrapper.element, \n\n                    // When setting or unsetting the width style, we need to update\n\n                    // transform (#8809)\n\n                    isSettingWidth = (element.tagName === 'SPAN' &&\n\n                        styles &&\n\n                        'width' in styles),\n\n                    textWidth = pick(isSettingWidth && styles.width,\n\n                    void 0),\n\n                    doTransform;\n\n                if (isSettingWidth) {\n\n                    delete styles.width;\n\n                    wrapper.textWidth = textWidth;\n\n                    doTransform = true;\n\n                }\n\n                if (styles && styles.textOverflow === 'ellipsis') {\n\n                    styles.whiteSpace = 'nowrap';\n\n                    styles.overflow = 'hidden';\n\n                }\n\n                wrapper.styles = extend(wrapper.styles, styles);\n\n                css(wrapper.element, styles);\n\n                // Now that all styles are applied, to the transform\n\n                if (doTransform) {\n\n                    wrapper.htmlUpdateTransform();\n\n                }\n\n                return wrapper;\n\n            },\n\n            /**\n\n             * VML and useHTML method for calculating the bounding box based on offsets.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlGetBBox\n\n             *\n\n             * @param {boolean} refresh\n\n             *        Whether to force a fresh value from the DOM or to use the cached\n\n             *        value.\n\n             *\n\n             * @return {Highcharts.BBoxObject}\n\n             *         A hash containing values for x, y, width and height.\n\n             */\n\n            htmlGetBBox: function () {\n\n                var wrapper = this,\n\n                    element = wrapper.element;\n\n                return {\n\n                    x: element.offsetLeft,\n\n                    y: element.offsetTop,\n\n                    width: element.offsetWidth,\n\n                    height: element.offsetHeight\n\n                };\n\n            },\n\n            /**\n\n             * VML override private method to update elements based on internal\n\n             * properties based on SVG transform.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlUpdateTransform\n\n             * @return {void}\n\n             */\n\n            htmlUpdateTransform: function () {\n\n                // aligning non added elements is expensive\n\n                if (!this.added) {\n\n                    this.alignOnAdd = true;\n\n                    return;\n\n                }\n\n                var wrapper = this,\n\n                    renderer = wrapper.renderer,\n\n                    elem = wrapper.element,\n\n                    translateX = wrapper.translateX || 0,\n\n                    translateY = wrapper.translateY || 0,\n\n                    x = wrapper.x || 0,\n\n                    y = wrapper.y || 0,\n\n                    align = wrapper.textAlign || 'left',\n\n                    alignCorrection = {\n\n                        left: 0,\n\n                    center: 0.5,\n\n                    right: 1\n\n                    }[align],\n\n                    styles = wrapper.styles,\n\n                    whiteSpace = styles && styles.whiteSpace;\n\n                /**\n\n                 * @private\n\n                 * @return {number}\n\n                 */\n\n                function getTextPxLength() {\n\n                    // Reset multiline/ellipsis in order to read width (#4928,\n\n                    // #5417)\n\n                    css(elem, {\n\n                        width: '',\n\n                        whiteSpace: whiteSpace || 'nowrap'\n\n                    });\n\n                    return elem.offsetWidth;\n\n                }\n\n                // apply translate\n\n                css(elem, {\n\n                    marginLeft: translateX,\n\n                    marginTop: translateY\n\n                });\n\n                if (!renderer.styledMode && wrapper.shadows) { // used in labels/tooltip\n\n                    wrapper.shadows.forEach(function (shadow) {\n\n                        css(shadow, {\n\n                            marginLeft: translateX + 1,\n\n                            marginTop: translateY + 1\n\n                        });\n\n                    });\n\n                }\n\n                // apply inversion\n\n                if (wrapper.inverted) { // wrapper is a group\n\n                    [].forEach.call(elem.childNodes, function (child) {\n\n                        renderer.invertChild(child, elem);\n\n                    });\n\n                }\n\n                if (elem.tagName === 'SPAN') {\n\n                    var rotation = wrapper.rotation, baseline, textWidth = wrapper.textWidth && pInt(wrapper.textWidth), currentTextTransform = [\n\n                            rotation,\n\n                            align,\n\n                            elem.innerHTML,\n\n                            wrapper.textWidth,\n\n                            wrapper.textAlign\n\n                        ].join(',');\n\n                    // Update textWidth. Use the memoized textPxLength if possible, to\n\n                    // avoid the getTextPxLength function using elem.offsetWidth.\n\n                    // Calling offsetWidth affects rendering time as it forces layout\n\n                    // (#7656).\n\n                    if (textWidth !== wrapper.oldTextWidth &&\n\n                        ((textWidth > wrapper.oldTextWidth) ||\n\n                            (wrapper.textPxLength || getTextPxLength()) > textWidth) && (\n\n                    // Only set the width if the text is able to word-wrap, or\n\n                    // text-overflow is ellipsis (#9537)\n\n                    /[ \\-]/.test(elem.textContent || elem.innerText) ||\n\n                        elem.style.textOverflow === 'ellipsis')) { // #983, #1254\n\n                        css(elem, {\n\n                            width: textWidth + 'px',\n\n                            display: 'block',\n\n                            whiteSpace: whiteSpace || 'normal' // #3331\n\n                        });\n\n                        wrapper.oldTextWidth = textWidth;\n\n                        wrapper.hasBoxWidthChanged = true; // #8159\n\n                    }\n\n                    else {\n\n                        wrapper.hasBoxWidthChanged = false; // #8159\n\n                    }\n\n                    // Do the calculations and DOM access only if properties changed\n\n                    if (currentTextTransform !== wrapper.cTT) {\n\n                        baseline = renderer.fontMetrics(elem.style.fontSize, elem).b;\n\n                        // Renderer specific handling of span rotation, but only if we\n\n                        // have something to update.\n\n                        if (defined(rotation) &&\n\n                            ((rotation !== (wrapper.oldRotation || 0)) ||\n\n                                (align !== wrapper.oldAlign))) {\n\n                            wrapper.setSpanRotation(rotation, alignCorrection, baseline);\n\n                        }\n\n                        wrapper.getSpanCorrection(\n\n                        // Avoid elem.offsetWidth if we can, it affects rendering\n\n                        // time heavily (#7656)\n\n                        ((!defined(rotation) && wrapper.textPxLength) || // #7920\n\n                            elem.offsetWidth), baseline, alignCorrection, rotation, align);\n\n                    }\n\n                    // apply position with correction\n\n                    css(elem, {\n\n                        left: (x + (wrapper.xCorr || 0)) + 'px',\n\n                        top: (y + (wrapper.yCorr || 0)) + 'px'\n\n                    });\n\n                    // record current text transform\n\n                    wrapper.cTT = currentTextTransform;\n\n                    wrapper.oldRotation = rotation;\n\n                    wrapper.oldAlign = align;\n\n                }\n\n            },\n\n            /**\n\n             * Set the rotation of an individual HTML span.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#setSpanRotation\n\n             * @param {number} rotation\n\n             * @param {number} alignCorrection\n\n             * @param {number} baseline\n\n             * @return {void}\n\n             */\n\n            setSpanRotation: function (rotation, alignCorrection, baseline) {\n\n                var rotationStyle = {},\n\n                    cssTransformKey = this.renderer.getTransformKey();\n\n                rotationStyle[cssTransformKey] = rotationStyle.transform =\n\n                    'rotate(' + rotation + 'deg)';\n\n                rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] =\n\n                    rotationStyle.transformOrigin =\n\n                        (alignCorrection * 100) + '% ' + baseline + 'px';\n\n                css(this.element, rotationStyle);\n\n            },\n\n            /**\n\n             * Get the correction in X and Y positioning as the element is rotated.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#getSpanCorrection\n\n             * @param {number} width\n\n             * @param {number} baseline\n\n             * @param {number} alignCorrection\n\n             * @return {void}\n\n             */\n\n            getSpanCorrection: function (width, baseline, alignCorrection) {\n\n                this.xCorr = -width * alignCorrection;\n\n                this.yCorr = -baseline;\n\n            }\n\n        });\n\n        // Extend SvgRenderer for useHTML option.\n\n        extend(SVGRenderer.prototype, /** @lends SVGRenderer.prototype */ {\n\n            /**\n\n             * @private\n\n             * @function Highcharts.SVGRenderer#getTransformKey\n\n             *\n\n             * @return {string}\n\n             */\n\n            getTransformKey: function () {\n\n                return isMS && !/Edge/.test(win.navigator.userAgent) ?\n\n                    '-ms-transform' :\n\n                    isWebKit ?\n\n                        '-webkit-transform' :\n\n                        isFirefox ?\n\n                            'MozTransform' :\n\n                            win.opera ?\n\n                                '-o-transform' :\n\n                                '';\n\n            },\n\n            /**\n\n             * Create HTML text node. This is used by the VML renderer as well as the\n\n             * SVG renderer through the useHTML option.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGRenderer#html\n\n             *\n\n             * @param {string} str\n\n             *        The text of (subset) HTML to draw.\n\n             *\n\n             * @param {number} x\n\n             *        The x position of the text's lower left corner.\n\n             *\n\n             * @param {number} y\n\n             *        The y position of the text's lower left corner.\n\n             *\n\n             * @return {Highcharts.HTMLDOMElement}\n\n             */\n\n            html: function (str, x, y) {\n\n                var wrapper = this.createElement('span'), element = wrapper.element, renderer = wrapper.renderer, isSVG = renderer.isSVG, addSetters = function (gWrapper, style) {\n\n                        // These properties are set as attributes on the SVG group, and\n\n                        // as identical CSS properties on the div. (#3542)\n\n                        ['opacity', 'visibility'].forEach(function (prop) {\n\n                            gWrapper[prop + 'Setter'] = function (value, key, elem) {\n\n                                var styleObject = gWrapper.div ?\n\n                                    gWrapper.div.style :\n\n                                    style;\n\n                            SVGElement.prototype[prop + 'Setter']\n\n                                .call(this, value, key, elem);\n\n                            if (styleObject) {\n\n                                styleObject[key] = value;\n\n                            }\n\n                        };\n\n                    });\n\n                    gWrapper.addedSetters = true;\n\n                };\n\n                // Text setter\n\n                wrapper.textSetter = function (value) {\n\n                    if (value !== element.innerHTML) {\n\n                        delete this.bBox;\n\n                        delete this.oldTextWidth;\n\n                    }\n\n                    this.textStr = value;\n\n                    element.innerHTML = pick(value, '');\n\n                    wrapper.doTransform = true;\n\n                };\n\n                // Add setters for the element itself (#4938)\n\n                if (isSVG) { // #4938, only for HTML within SVG\n\n                    addSetters(wrapper, wrapper.element.style);\n\n                }\n\n                // Various setters which rely on update transform\n\n                wrapper.xSetter =\n\n                    wrapper.ySetter =\n\n                        wrapper.alignSetter =\n\n                            wrapper.rotationSetter =\n\n                                function (value, key) {\n\n                                    if (key === 'align') {\n\n                                        // Do not overwrite the SVGElement.align method. Same as VML.\n\n                                        key = 'textAlign';\n\n                                    }\n\n                                    wrapper[key] = value;\n\n                                    wrapper.doTransform = true;\n\n                                };\n\n                // Runs at the end of .attr()\n\n                wrapper.afterSetters = function () {\n\n                    // Update transform. Do this outside the loop to prevent redundant\n\n                    // updating for batch setting of attributes.\n\n                    if (this.doTransform) {\n\n                        this.htmlUpdateTransform();\n\n                        this.doTransform = false;\n\n                    }\n\n                };\n\n                // Set the default attributes\n\n                wrapper\n\n                    .attr({\n\n                    text: str,\n\n                    x: Math.round(x),\n\n                    y: Math.round(y)\n\n                })\n\n                    .css({\n\n                    position: 'absolute'\n\n                });\n\n                if (!renderer.styledMode) {\n\n                    wrapper.css({\n\n                        fontFamily: this.style.fontFamily,\n\n                        fontSize: this.style.fontSize\n\n                    });\n\n                }\n\n                // Keep the whiteSpace style outside the wrapper.styles collection\n\n                element.style.whiteSpace = 'nowrap';\n\n                // Use the HTML specific .css method\n\n                wrapper.css = wrapper.htmlCss;\n\n                // This is specific for HTML within SVG\n\n                if (isSVG) {\n\n                    wrapper.add = function (svgGroupWrapper) {\n\n                        var htmlGroup,\n\n                            container = renderer.box.parentNode,\n\n                            parentGroup,\n\n                            parents = [];\n\n                        this.parentGroup = svgGroupWrapper;\n\n                        // Create a mock group to hold the HTML elements\n\n                        if (svgGroupWrapper) {\n\n                            htmlGroup = svgGroupWrapper.div;\n\n                            if (!htmlGroup) {\n\n                                // Read the parent chain into an array and read from top\n\n                                // down\n\n                                parentGroup = svgGroupWrapper;\n\n                                while (parentGroup) {\n\n                                    parents.push(parentGroup);\n\n                                    // Move up to the next parent group\n\n                                    parentGroup = parentGroup.parentGroup;\n\n                                }\n\n                                // Ensure dynamically updating position when any parent\n\n                                // is translated\n\n                                parents.reverse().forEach(function (parentGroup) {\n\n                                    var htmlGroupStyle,\n\n                                        cls = attr(parentGroup.element, 'class');\n\n                                    /**\n\n                                     * Common translate setter for X and Y on the HTML\n\n                                     * group. Reverted the fix for #6957 du to\n\n                                     * positioning problems and offline export (#7254,\n\n                                     * #7280, #7529)\n\n                                     * @private\n\n                                     * @param {*} value\n\n                                     * @param {string} key\n\n                                     * @return {void}\n\n                                     */\n\n                                    function translateSetter(value, key) {\n\n                                        parentGroup[key] = value;\n\n                                        if (key === 'translateX') {\n\n                                            htmlGroupStyle.left = value + 'px';\n\n                                        }\n\n                                        else {\n\n                                            htmlGroupStyle.top = value + 'px';\n\n                                        }\n\n                                        parentGroup.doTransform = true;\n\n                                    }\n\n                                    // Create a HTML div and append it to the parent div\n\n                                    // to emulate the SVG group structure\n\n                                    htmlGroup =\n\n                                        parentGroup.div =\n\n                                            parentGroup.div || createElement('div', cls ? { className: cls } : void 0, {\n\n                                                position: 'absolute',\n\n                                                left: (parentGroup.translateX || 0) + 'px',\n\n                                                top: (parentGroup.translateY || 0) + 'px',\n\n                                                display: parentGroup.display,\n\n                                                opacity: parentGroup.opacity,\n\n                                                pointerEvents: (parentGroup.styles &&\n\n                                                    parentGroup.styles.pointerEvents) // #5595\n\n                                                // the top group is appended to container\n\n                                            }, htmlGroup || container);\n\n                                    // Shortcut\n\n                                    htmlGroupStyle = htmlGroup.style;\n\n                                    // Set listeners to update the HTML div's position\n\n                                    // whenever the SVG group position is changed.\n\n                                    extend(parentGroup, {\n\n                                        // (#7287) Pass htmlGroup to use\n\n                                        // the related group\n\n                                        classSetter: (function (htmlGroup) {\n\n                                            return function (value) {\n\n                                                this.element.setAttribute('class', value);\n\n                                                htmlGroup.className = value;\n\n                                            };\n\n                                        }(htmlGroup)),\n\n                                        on: function () {\n\n                                            if (parents[0].div) { // #6418\n\n                                                wrapper.on.apply({ element: parents[0].div }, arguments);\n\n                                            }\n\n                                            return parentGroup;\n\n                                        },\n\n                                        translateXSetter: translateSetter,\n\n                                        translateYSetter: translateSetter\n\n                                    });\n\n                                    if (!parentGroup.addedSetters) {\n\n                                        addSetters(parentGroup);\n\n                                    }\n\n                                });\n\n                            }\n\n                        }\n\n                        else {\n\n                            htmlGroup = container;\n\n                        }\n\n                        htmlGroup.appendChild(element);\n\n                        // Shared with VML:\n\n                        wrapper.added = true;\n\n                        if (wrapper.alignOnAdd) {\n\n                            wrapper.htmlUpdateTransform();\n\n                        }\n\n                        return wrapper;\n\n                    };\n\n                }\n\n                return wrapper;\n\n            }\n\n        });"
        },
        {
          "file_path": "/src/es-modules/parts/SVGElement.js",
          "match_lines": [
            983,
            983
          ],
          "match_position": [
            13,
            39
          ],
          "match_string": "        if (/(NaN| {2}|^$)/.test(value)) {"
        },
        {
          "file_path": "/src/modules/funnel.js",
          "match_lines": [
            11,
            11
          ],
          "match_position": [
            346,
            357
          ],
          "match_string": "b.seriesTypes,K=b.fireEvent,G=b.addEvent,I=b.noop;l(\"funnel\",\"pie\",{animation:!1,center:[\"50%\",\"50%\"],width:\"90%\",neckWidth:\"30%\",height:\"100%\",neckHeight:\"25%\",reversed:!1,size:!0,dataLabels:{connectorWidth:1,verticalAlign:\"middle\"},states:{select:{color:\"#cccccc\",borderColor:\"#000000\"}}},{animate:I,translate:function(){function a(b,a){return/%$/.test(b)?a*parseInt(b,10)/100:parseInt(b,10)}var b=0,d=this,g=d.chart,f=d.options,k=f.reversed,c=f.ignoreHiddenPoint,v=g.plotWidth;g=g.plotHeight;var e="
        },
        {
          "file_path": "/src/modules/funnel.src.js",
          "match_lines": [
            227,
            227
          ],
          "match_position": [
            29,
            46
          ],
          "match_string": "                    return (/%$/).test(length) ?"
        },
        {
          "file_path": "/src/highstock.src.js",
          "match_lines": [
            1419,
            1419
          ],
          "match_position": [
            25,
            41
          ],
          "match_string": "                return (/%$/).test(value) ?"
        },
        {
          "file_path": "/src/highstock.src.js",
          "match_lines": [
            4269,
            4269
          ],
          "match_position": [
            21,
            47
          ],
          "match_string": "                if (/(NaN| {2}|^$)/.test(value)) {"
        },
        {
          "file_path": "/src/highstock.src.js",
          "match_lines": [
            7159,
            7159
          ],
          "match_position": [
            31,
            53
          ],
          "match_string": "                    isImage = imageRegex.test(symbol),"
        },
        {
          "file_path": "/src/highstock.src.js",
          "match_lines": [
            7598,
            7598
          ],
          "match_position": [
            42,
            60
          ],
          "match_string": "                if ((this.styledMode || !/px/.test(fontSize)) &&"
        },
        {
          "file_path": "/src/highstock.src.js",
          "match_lines": [
            7611,
            7611
          ],
          "match_position": [
            21,
            39
          ],
          "match_string": "                if (/px/.test(fontSize)) {"
        },
        {
          "file_path": "/src/highstock.src.js",
          "match_lines": [
            8304,
            8740
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        var isFirefox = H.isFirefox,\n\n            isMS = H.isMS,\n\n            isWebKit = H.isWebKit,\n\n            SVGElement = H.SVGElement,\n\n            SVGRenderer = H.SVGRenderer,\n\n            win = H.win;\n\n        /* eslint-disable valid-jsdoc */\n\n        // Extend SvgElement for useHTML option.\n\n        extend(SVGElement.prototype, /** @lends SVGElement.prototype */ {\n\n            /**\n\n             * Apply CSS to HTML elements. This is used in text within SVG rendering and\n\n             * by the VML renderer\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlCss\n\n             *\n\n             * @param {Highcharts.CSSObject} styles\n\n             *\n\n             * @return {Highcharts.SVGElement}\n\n             */\n\n            htmlCss: function (styles) {\n\n                var wrapper = this,\n\n                    element = wrapper.element, \n\n                    // When setting or unsetting the width style, we need to update\n\n                    // transform (#8809)\n\n                    isSettingWidth = (element.tagName === 'SPAN' &&\n\n                        styles &&\n\n                        'width' in styles),\n\n                    textWidth = pick(isSettingWidth && styles.width,\n\n                    void 0),\n\n                    doTransform;\n\n                if (isSettingWidth) {\n\n                    delete styles.width;\n\n                    wrapper.textWidth = textWidth;\n\n                    doTransform = true;\n\n                }\n\n                if (styles && styles.textOverflow === 'ellipsis') {\n\n                    styles.whiteSpace = 'nowrap';\n\n                    styles.overflow = 'hidden';\n\n                }\n\n                wrapper.styles = extend(wrapper.styles, styles);\n\n                css(wrapper.element, styles);\n\n                // Now that all styles are applied, to the transform\n\n                if (doTransform) {\n\n                    wrapper.htmlUpdateTransform();\n\n                }\n\n                return wrapper;\n\n            },\n\n            /**\n\n             * VML and useHTML method for calculating the bounding box based on offsets.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlGetBBox\n\n             *\n\n             * @param {boolean} refresh\n\n             *        Whether to force a fresh value from the DOM or to use the cached\n\n             *        value.\n\n             *\n\n             * @return {Highcharts.BBoxObject}\n\n             *         A hash containing values for x, y, width and height.\n\n             */\n\n            htmlGetBBox: function () {\n\n                var wrapper = this,\n\n                    element = wrapper.element;\n\n                return {\n\n                    x: element.offsetLeft,\n\n                    y: element.offsetTop,\n\n                    width: element.offsetWidth,\n\n                    height: element.offsetHeight\n\n                };\n\n            },\n\n            /**\n\n             * VML override private method to update elements based on internal\n\n             * properties based on SVG transform.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#htmlUpdateTransform\n\n             * @return {void}\n\n             */\n\n            htmlUpdateTransform: function () {\n\n                // aligning non added elements is expensive\n\n                if (!this.added) {\n\n                    this.alignOnAdd = true;\n\n                    return;\n\n                }\n\n                var wrapper = this,\n\n                    renderer = wrapper.renderer,\n\n                    elem = wrapper.element,\n\n                    translateX = wrapper.translateX || 0,\n\n                    translateY = wrapper.translateY || 0,\n\n                    x = wrapper.x || 0,\n\n                    y = wrapper.y || 0,\n\n                    align = wrapper.textAlign || 'left',\n\n                    alignCorrection = {\n\n                        left: 0,\n\n                    center: 0.5,\n\n                    right: 1\n\n                    }[align],\n\n                    styles = wrapper.styles,\n\n                    whiteSpace = styles && styles.whiteSpace;\n\n                /**\n\n                 * @private\n\n                 * @return {number}\n\n                 */\n\n                function getTextPxLength() {\n\n                    // Reset multiline/ellipsis in order to read width (#4928,\n\n                    // #5417)\n\n                    css(elem, {\n\n                        width: '',\n\n                        whiteSpace: whiteSpace || 'nowrap'\n\n                    });\n\n                    return elem.offsetWidth;\n\n                }\n\n                // apply translate\n\n                css(elem, {\n\n                    marginLeft: translateX,\n\n                    marginTop: translateY\n\n                });\n\n                if (!renderer.styledMode && wrapper.shadows) { // used in labels/tooltip\n\n                    wrapper.shadows.forEach(function (shadow) {\n\n                        css(shadow, {\n\n                            marginLeft: translateX + 1,\n\n                            marginTop: translateY + 1\n\n                        });\n\n                    });\n\n                }\n\n                // apply inversion\n\n                if (wrapper.inverted) { // wrapper is a group\n\n                    [].forEach.call(elem.childNodes, function (child) {\n\n                        renderer.invertChild(child, elem);\n\n                    });\n\n                }\n\n                if (elem.tagName === 'SPAN') {\n\n                    var rotation = wrapper.rotation, baseline, textWidth = wrapper.textWidth && pInt(wrapper.textWidth), currentTextTransform = [\n\n                            rotation,\n\n                            align,\n\n                            elem.innerHTML,\n\n                            wrapper.textWidth,\n\n                            wrapper.textAlign\n\n                        ].join(',');\n\n                    // Update textWidth. Use the memoized textPxLength if possible, to\n\n                    // avoid the getTextPxLength function using elem.offsetWidth.\n\n                    // Calling offsetWidth affects rendering time as it forces layout\n\n                    // (#7656).\n\n                    if (textWidth !== wrapper.oldTextWidth &&\n\n                        ((textWidth > wrapper.oldTextWidth) ||\n\n                            (wrapper.textPxLength || getTextPxLength()) > textWidth) && (\n\n                    // Only set the width if the text is able to word-wrap, or\n\n                    // text-overflow is ellipsis (#9537)\n\n                    /[ \\-]/.test(elem.textContent || elem.innerText) ||\n\n                        elem.style.textOverflow === 'ellipsis')) { // #983, #1254\n\n                        css(elem, {\n\n                            width: textWidth + 'px',\n\n                            display: 'block',\n\n                            whiteSpace: whiteSpace || 'normal' // #3331\n\n                        });\n\n                        wrapper.oldTextWidth = textWidth;\n\n                        wrapper.hasBoxWidthChanged = true; // #8159\n\n                    }\n\n                    else {\n\n                        wrapper.hasBoxWidthChanged = false; // #8159\n\n                    }\n\n                    // Do the calculations and DOM access only if properties changed\n\n                    if (currentTextTransform !== wrapper.cTT) {\n\n                        baseline = renderer.fontMetrics(elem.style.fontSize, elem).b;\n\n                        // Renderer specific handling of span rotation, but only if we\n\n                        // have something to update.\n\n                        if (defined(rotation) &&\n\n                            ((rotation !== (wrapper.oldRotation || 0)) ||\n\n                                (align !== wrapper.oldAlign))) {\n\n                            wrapper.setSpanRotation(rotation, alignCorrection, baseline);\n\n                        }\n\n                        wrapper.getSpanCorrection(\n\n                        // Avoid elem.offsetWidth if we can, it affects rendering\n\n                        // time heavily (#7656)\n\n                        ((!defined(rotation) && wrapper.textPxLength) || // #7920\n\n                            elem.offsetWidth), baseline, alignCorrection, rotation, align);\n\n                    }\n\n                    // apply position with correction\n\n                    css(elem, {\n\n                        left: (x + (wrapper.xCorr || 0)) + 'px',\n\n                        top: (y + (wrapper.yCorr || 0)) + 'px'\n\n                    });\n\n                    // record current text transform\n\n                    wrapper.cTT = currentTextTransform;\n\n                    wrapper.oldRotation = rotation;\n\n                    wrapper.oldAlign = align;\n\n                }\n\n            },\n\n            /**\n\n             * Set the rotation of an individual HTML span.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#setSpanRotation\n\n             * @param {number} rotation\n\n             * @param {number} alignCorrection\n\n             * @param {number} baseline\n\n             * @return {void}\n\n             */\n\n            setSpanRotation: function (rotation, alignCorrection, baseline) {\n\n                var rotationStyle = {},\n\n                    cssTransformKey = this.renderer.getTransformKey();\n\n                rotationStyle[cssTransformKey] = rotationStyle.transform =\n\n                    'rotate(' + rotation + 'deg)';\n\n                rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] =\n\n                    rotationStyle.transformOrigin =\n\n                        (alignCorrection * 100) + '% ' + baseline + 'px';\n\n                css(this.element, rotationStyle);\n\n            },\n\n            /**\n\n             * Get the correction in X and Y positioning as the element is rotated.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGElement#getSpanCorrection\n\n             * @param {number} width\n\n             * @param {number} baseline\n\n             * @param {number} alignCorrection\n\n             * @return {void}\n\n             */\n\n            getSpanCorrection: function (width, baseline, alignCorrection) {\n\n                this.xCorr = -width * alignCorrection;\n\n                this.yCorr = -baseline;\n\n            }\n\n        });\n\n        // Extend SvgRenderer for useHTML option.\n\n        extend(SVGRenderer.prototype, /** @lends SVGRenderer.prototype */ {\n\n            /**\n\n             * @private\n\n             * @function Highcharts.SVGRenderer#getTransformKey\n\n             *\n\n             * @return {string}\n\n             */\n\n            getTransformKey: function () {\n\n                return isMS && !/Edge/.test(win.navigator.userAgent) ?\n\n                    '-ms-transform' :\n\n                    isWebKit ?\n\n                        '-webkit-transform' :\n\n                        isFirefox ?\n\n                            'MozTransform' :\n\n                            win.opera ?\n\n                                '-o-transform' :\n\n                                '';\n\n            },\n\n            /**\n\n             * Create HTML text node. This is used by the VML renderer as well as the\n\n             * SVG renderer through the useHTML option.\n\n             *\n\n             * @private\n\n             * @function Highcharts.SVGRenderer#html\n\n             *\n\n             * @param {string} str\n\n             *        The text of (subset) HTML to draw.\n\n             *\n\n             * @param {number} x\n\n             *        The x position of the text's lower left corner.\n\n             *\n\n             * @param {number} y\n\n             *        The y position of the text's lower left corner.\n\n             *\n\n             * @return {Highcharts.HTMLDOMElement}\n\n             */\n\n            html: function (str, x, y) {\n\n                var wrapper = this.createElement('span'), element = wrapper.element, renderer = wrapper.renderer, isSVG = renderer.isSVG, addSetters = function (gWrapper, style) {\n\n                        // These properties are set as attributes on the SVG group, and\n\n                        // as identical CSS properties on the div. (#3542)\n\n                        ['opacity', 'visibility'].forEach(function (prop) {\n\n                            gWrapper[prop + 'Setter'] = function (value, key, elem) {\n\n                                var styleObject = gWrapper.div ?\n\n                                    gWrapper.div.style :\n\n                                    style;\n\n                            SVGElement.prototype[prop + 'Setter']\n\n                                .call(this, value, key, elem);\n\n                            if (styleObject) {\n\n                                styleObject[key] = value;\n\n                            }\n\n                        };\n\n                    });\n\n                    gWrapper.addedSetters = true;\n\n                };\n\n                // Text setter\n\n                wrapper.textSetter = function (value) {\n\n                    if (value !== element.innerHTML) {\n\n                        delete this.bBox;\n\n                        delete this.oldTextWidth;\n\n                    }\n\n                    this.textStr = value;\n\n                    element.innerHTML = pick(value, '');\n\n                    wrapper.doTransform = true;\n\n                };\n\n                // Add setters for the element itself (#4938)\n\n                if (isSVG) { // #4938, only for HTML within SVG\n\n                    addSetters(wrapper, wrapper.element.style);\n\n                }\n\n                // Various setters which rely on update transform\n\n                wrapper.xSetter =\n\n                    wrapper.ySetter =\n\n                        wrapper.alignSetter =\n\n                            wrapper.rotationSetter =\n\n                                function (value, key) {\n\n                                    if (key === 'align') {\n\n                                        // Do not overwrite the SVGElement.align method. Same as VML.\n\n                                        key = 'textAlign';\n\n                                    }\n\n                                    wrapper[key] = value;\n\n                                    wrapper.doTransform = true;\n\n                                };\n\n                // Runs at the end of .attr()\n\n                wrapper.afterSetters = function () {\n\n                    // Update transform. Do this outside the loop to prevent redundant\n\n                    // updating for batch setting of attributes.\n\n                    if (this.doTransform) {\n\n                        this.htmlUpdateTransform();\n\n                        this.doTransform = false;\n\n                    }\n\n                };\n\n                // Set the default attributes\n\n                wrapper\n\n                    .attr({\n\n                    text: str,\n\n                    x: Math.round(x),\n\n                    y: Math.round(y)\n\n                })\n\n                    .css({\n\n                    position: 'absolute'\n\n                });\n\n                if (!renderer.styledMode) {\n\n                    wrapper.css({\n\n                        fontFamily: this.style.fontFamily,\n\n                        fontSize: this.style.fontSize\n\n                    });\n\n                }\n\n                // Keep the whiteSpace style outside the wrapper.styles collection\n\n                element.style.whiteSpace = 'nowrap';\n\n                // Use the HTML specific .css method\n\n                wrapper.css = wrapper.htmlCss;\n\n                // This is specific for HTML within SVG\n\n                if (isSVG) {\n\n                    wrapper.add = function (svgGroupWrapper) {\n\n                        var htmlGroup,\n\n                            container = renderer.box.parentNode,\n\n                            parentGroup,\n\n                            parents = [];\n\n                        this.parentGroup = svgGroupWrapper;\n\n                        // Create a mock group to hold the HTML elements\n\n                        if (svgGroupWrapper) {\n\n                            htmlGroup = svgGroupWrapper.div;\n\n                            if (!htmlGroup) {\n\n                                // Read the parent chain into an array and read from top\n\n                                // down\n\n                                parentGroup = svgGroupWrapper;\n\n                                while (parentGroup) {\n\n                                    parents.push(parentGroup);\n\n                                    // Move up to the next parent group\n\n                                    parentGroup = parentGroup.parentGroup;\n\n                                }\n\n                                // Ensure dynamically updating position when any parent\n\n                                // is translated\n\n                                parents.reverse().forEach(function (parentGroup) {\n\n                                    var htmlGroupStyle,\n\n                                        cls = attr(parentGroup.element, 'class');\n\n                                    /**\n\n                                     * Common translate setter for X and Y on the HTML\n\n                                     * group. Reverted the fix for #6957 du to\n\n                                     * positioning problems and offline export (#7254,\n\n                                     * #7280, #7529)\n\n                                     * @private\n\n                                     * @param {*} value\n\n                                     * @param {string} key\n\n                                     * @return {void}\n\n                                     */\n\n                                    function translateSetter(value, key) {\n\n                                        parentGroup[key] = value;\n\n                                        if (key === 'translateX') {\n\n                                            htmlGroupStyle.left = value + 'px';\n\n                                        }\n\n                                        else {\n\n                                            htmlGroupStyle.top = value + 'px';\n\n                                        }\n\n                                        parentGroup.doTransform = true;\n\n                                    }\n\n                                    // Create a HTML div and append it to the parent div\n\n                                    // to emulate the SVG group structure\n\n                                    htmlGroup =\n\n                                        parentGroup.div =\n\n                                            parentGroup.div || createElement('div', cls ? { className: cls } : void 0, {\n\n                                                position: 'absolute',\n\n                                                left: (parentGroup.translateX || 0) + 'px',\n\n                                                top: (parentGroup.translateY || 0) + 'px',\n\n                                                display: parentGroup.display,\n\n                                                opacity: parentGroup.opacity,\n\n                                                pointerEvents: (parentGroup.styles &&\n\n                                                    parentGroup.styles.pointerEvents) // #5595\n\n                                                // the top group is appended to container\n\n                                            }, htmlGroup || container);\n\n                                    // Shortcut\n\n                                    htmlGroupStyle = htmlGroup.style;\n\n                                    // Set listeners to update the HTML div's position\n\n                                    // whenever the SVG group position is changed.\n\n                                    extend(parentGroup, {\n\n                                        // (#7287) Pass htmlGroup to use\n\n                                        // the related group\n\n                                        classSetter: (function (htmlGroup) {\n\n                                            return function (value) {\n\n                                                this.element.setAttribute('class', value);\n\n                                                htmlGroup.className = value;\n\n                                            };\n\n                                        }(htmlGroup)),\n\n                                        on: function () {\n\n                                            if (parents[0].div) { // #6418\n\n                                                wrapper.on.apply({ element: parents[0].div }, arguments);\n\n                                            }\n\n                                            return parentGroup;\n\n                                        },\n\n                                        translateXSetter: translateSetter,\n\n                                        translateYSetter: translateSetter\n\n                                    });\n\n                                    if (!parentGroup.addedSetters) {\n\n                                        addSetters(parentGroup);\n\n                                    }\n\n                                });\n\n                            }\n\n                        }\n\n                        else {\n\n                            htmlGroup = container;\n\n                        }\n\n                        htmlGroup.appendChild(element);\n\n                        // Shared with VML:\n\n                        wrapper.added = true;\n\n                        if (wrapper.alignOnAdd) {\n\n                            wrapper.htmlUpdateTransform();\n\n                        }\n\n                        return wrapper;\n\n                    };\n\n                }\n\n                return wrapper;\n\n            }\n\n        });"
        },
        {
          "file_path": "/src/es-modules/parts/SvgRenderer.js",
          "match_lines": [
            1702,
            1702
          ],
          "match_position": [
            71,
            93
          ],
          "match_string": "        var ren = this, obj, imageRegex = /^url\\((.*?)\\)$/, isImage = imageRegex.test(symbol), sym = (!isImage && (this.symbols[symbol] ? symbol : 'circle')),"
        },
        {
          "file_path": "/src/es-modules/parts/SvgRenderer.js",
          "match_lines": [
            2110,
            2110
          ],
          "match_position": [
            34,
            52
          ],
          "match_string": "        if ((this.styledMode || !/px/.test(fontSize)) &&"
        },
        {
          "file_path": "/src/es-modules/parts/SvgRenderer.js",
          "match_lines": [
            2123,
            2123
          ],
          "match_position": [
            13,
            31
          ],
          "match_string": "        if (/px/.test(fontSize)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
