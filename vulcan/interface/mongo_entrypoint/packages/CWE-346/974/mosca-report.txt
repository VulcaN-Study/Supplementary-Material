<report_mosca>
 <Path>/src/src/otr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 2119 -        setTimeout(send, first ? 0 : self.send_interval)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/otr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 909 -      // query message

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-notification.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 87 -                  } else if ($message.attr('type') === 'groupchat') {

 Line: 132 -                  if ($message.attr('type') === 'headline' || from_jid.indexOf('@') === -1) {

 Line: 137 -                      if ($message.attr('type') === 'groupchat') {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-notification.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 154 -                  setTimeout(n.close.bind(n), 5000);

 Line: 184 -                  setTimeout(n.close.bind(n), 5000);

 Line: 193 -                  setTimeout(n.close.bind(n), 5000);

 Line: 203 -                      setTimeout(n.close.bind(n), 5000);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-chatview.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 372 -                          this.clear_status_timeout = window.setTimeout(this.clearStatusNotification.bind(this), 30000);

 Line: 551 -                          this.chat_state_timeout = window.setTimeout(

 Line: 554 -                          this.chat_state_timeout = window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-bookmarks.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 237 -                          // not set to null. So we query the XMPP server.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-muc.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 1667 -                      if ($error.attr('type') === 'auth') {

 Line: 1675 -                      } else if ($error.attr('type') === 'modify') {

 Line: 1679 -                      } else if ($error.attr('type') === 'cancel') {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-muc.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1594 -                      // By using querySelector above, we assume here there is

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-core.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 363 -              converse.everySecondTrigger = window.setInterval(converse.onEverySecond, 1000);

 Line: 426 -                      window.setTimeout(_.partial(converse.reconnect, condition), 3000);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-core.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 886 -                   * sessionStorage cache, and if that's empty, then by querying

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/utils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 350 -              if ($field.attr('type') === 'list-single' || $field.attr('type') === 'list-multi') {

 Line: 373 -              } else if ($field.attr('type') === 'fixed') {

 Line: 375 -              } else if ($field.attr('type') === 'jid-multi') {

 Line: 382 -              } else if ($field.attr('type') === 'boolean') {

 Line: 390 -              } else if ($field.attr('type') && $field.attr('var') === 'username') {

 Line: 408 -                  if ($field.attr('var') === 'ocr') { // Captcha

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/utils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 323 -          contains: function (attr, query) {

 Line: 427 -      utils.contains.not = function (attr, query) {

 Line: 429 -              return !(utils.contains(attr, query)(item));

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-mam.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 147 -                  /* Do a MAM (XEP-0313) query for archived messages.

 Line: 151 -                   *    (Function) callback - A function to call whenever we receive query-relevant stanza.

 Line: 155 -                   * Strophe.RSM to enable easy querying between results pages.

 Line: 176 -                  var queryid = converse.connection.getUniqueId();

 Line: 180 -                          throw new Error('You need to specify a "with" value containing the chat room JID, when querying groupchat messages.');

 Line: 215 -                          if ($fin.length && $fin.attr('queryid') === queryid) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-rosterview.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 379 -                              window.setTimeout(

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-rosterview.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 344 -                      query = query.toLowerCase();

 Line: 786 -                      /* Filter the group's contacts based on the query "q".

 Line: 787 -                       * The query is matched against the contact's full name.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-register.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 456 -                              if ($field.attr('xmlns') === 'jabber:x:oob') {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-register.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 189 -                       *    (XMLElement) elem - The query stanza.

 Line: 492 -                          query = stanza.getElementsByTagName("query");

 Line: 494 -                          query = query[0];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-otr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 170 -                      window.setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/src/converse-otr.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 226 -                      // query message from our contact. Otherwise, it is us who will

 Line: 227 -                      // send the query message to them.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/spec/mam.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -             it("can be used to query for all archived messages", mock.initConverse(function (converse) {

 Line: 34 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 36 -                      "<iq type='set' xmlns='jabber:client' id='"+IQ_id+"'><query xmlns='urn:xmpp:mam:0' queryid='"+queryid+"'/></iq>");

 Line: 39 -             it("can be used to query for all messages to/from a particular JID", mock.initConverse(function (converse) {

 Line: 50 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 53 -                          "<query xmlns='urn:xmpp:mam:0' queryid='"+queryid+"'>"+

 Line: 67 -             it("can be used to query for all messages in a certain timespan", mock.initConverse(function (converse) {

 Line: 84 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 87 -                          "<query xmlns='urn:xmpp:mam:0' queryid='"+queryid+"'>"+

 Line: 113 -             it("can be used to query for all messages after a certain time", mock.initConverse(function (converse) {

 Line: 125 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 128 -                          "<query xmlns='urn:xmpp:mam:0' queryid='"+queryid+"'>"+

 Line: 142 -             it("can be used to query for a limited set of results", mock.initConverse(function (converse) {

 Line: 154 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 157 -                          "<query xmlns='urn:xmpp:mam:0' queryid='"+queryid+"'>"+

 Line: 190 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 193 -                          "<query xmlns='urn:xmpp:mam:0' queryid='"+queryid+"'>"+

 Line: 222 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 225 -                          "<query xmlns='urn:xmpp:mam:0' queryid='"+queryid+"'>"+

 Line: 240 -             it("accepts a Strophe.RSM object for the query options", mock.initConverse(function (converse) {

 Line: 259 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 262 -                          "<query xmlns='urn:xmpp:mam:0' queryid='"+queryid+"'>"+

 Line: 295 -                  var queryid = $(sent_stanza.toString()).find('query').attr('queryid');

 Line: 302 -                   *   <result xmlns='urn:xmpp:mam:0' queryid='f27' id='28482-98726-73623'>

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 24441 -              if ($field.attr('type') === 'list-single' || $field.attr('type') === 'list-multi') {

 Line: 24464 -              } else if ($field.attr('type') === 'fixed') {

 Line: 24466 -              } else if ($field.attr('type') === 'jid-multi') {

 Line: 24473 -              } else if ($field.attr('type') === 'boolean') {

 Line: 24481 -              } else if ($field.attr('type') && $field.attr('var') === 'username') {

 Line: 24499 -                  if ($field.attr('var') === 'ocr') { // Captcha

 Line: 37132 -                      if ($error.attr('type') === 'auth') {

 Line: 37140 -                      } else if ($error.attr('type') === 'modify') {

 Line: 37144 -                      } else if ($error.attr('type') === 'cancel') {

 Line: 47829 -                              if ($field.attr('xmlns') === 'jabber:x:oob') {

 Line: 48189 -                  } else if ($message.attr('type') === 'groupchat') {

 Line: 48234 -                  if ($message.attr('type') === 'headline' || from_jid.indexOf('@') === -1) {

 Line: 48239 -                      if ($message.attr('type') === 'groupchat') {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 6 -  /*global setTimeout: false */

 Line: 390 -              setTimeout(function () {

 Line: 4004 -  			window.setTimeout( jQuery.ready );

 Line: 6914 -  	window.setTimeout( function() {

 Line: 7496 -  		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );

 Line: 7522 -  		var timeout = window.setTimeout( next, time );

 Line: 9113 -  				timeoutTimer = window.setTimeout( function() {

 Line: 9624 -  							window.setTimeout( function() {

 Line: 11050 -      return setTimeout(function(){

 Line: 11090 -          timeout = setTimeout(later, remaining);

 Line: 11107 -          timeout = setTimeout(later, wait - last);

 Line: 11122 -        if (!timeout) timeout = setTimeout(later, wait);

 Line: 18123 -  /*global define, document, window, setTimeout, clearTimeout, ActiveXObject, DOMParser */

 Line: 19752 -      // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 19753 -      this._idleTimeout = setTimeout(function() {

 Line: 20347 -          // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 20348 -          this._idleTimeout = setTimeout(function() {

 Line: 21353 -              // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 21354 -              this._idleTimeout = setTimeout(function() {

 Line: 21765 -  /* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */

 Line: 22526 -                  setTimeout(function() {

 Line: 22527 -                      // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 22641 -          // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 22642 -          this._conn._idleTimeout = setTimeout(function() {

 Line: 26436 -    // * Use `setTimeout` to batch rapid-fire updates into a single request.

 Line: 26783 -          this._checkUrlInterval = setInterval(this.checkUrl, this.interval);

 Line: 27703 -              converse.everySecondTrigger = window.setInterval(converse.onEverySecond, 1000);

 Line: 27766 -                      window.setTimeout(_.partial(converse.reconnect, condition), 3000);

 Line: 31379 -                          this.clear_status_timeout = window.setTimeout(this.clearStatusNotification.bind(this), 30000);

 Line: 31558 -                          this.chat_state_timeout = window.setTimeout(

 Line: 31561 -                          this.chat_state_timeout = window.setTimeout(

 Line: 32596 -                              window.setTimeout(

 Line: 34360 -                  setTimeout(fn, 0);

 Line: 34374 -                      timeout = setTimeout(later, wait);

 Line: 34399 -                          timeout = setTimeout(later, remaining);

 Line: 34572 -                      setTimeout(function() {

 Line: 46228 -        setTimeout(send, first ? 0 : self.send_interval)

 Line: 46945 -                      window.setTimeout(function () {

 Line: 48256 -                  setTimeout(n.close.bind(n), 5000);

 Line: 48286 -                  setTimeout(n.close.bind(n), 5000);

 Line: 48295 -                  setTimeout(n.close.bind(n), 5000);

 Line: 48305 -                      setTimeout(n.close.bind(n), 5000);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1251 -  			// Take advantage of querySelectorAll

 Line: 9427 -  // key/values into a query string

 Line: 24414 -          contains: function (attr, query) {

 Line: 24518 -      utils.contains.not = function (attr, query) {

 Line: 24520 -              return !(utils.contains(attr, query)(item));

 Line: 24937 -       * Info query

 Line: 24955 -       * Items query

 Line: 24975 -      _buildIQResult: function(stanza, query_attrs)

 Line: 24985 -          return iqresult.c('query', query_attrs);

 Line: 25023 -          var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};

 Line: 25028 -              query_attrs.node = node;

 Line: 25043 -          var iqresult = this._buildIQResult(stanza, query_attrs);

 Line: 25119 -    // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and

 Line: 26440 -    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests

 Line: 26477 -      if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {

 Line: 26511 -      'delete': 'DELETE',

 Line: 28226 -                   * sessionStorage cache, and if that's empty, then by querying

 Line: 32561 -                      query = query.toLowerCase();

 Line: 33003 -                      /* Filter the group's contacts based on the query "q".

 Line: 33004 -                       * The query is matched against the contact's full name.

 Line: 34751 -                  this.query = query;

 Line: 34877 -                          query: query,

 Line: 34889 -                          pattern: query

 Line: 34903 -                          query: query,

 Line: 34909 -                          query: query,

 Line: 34919 -                  this.query = query;

 Line: 34923 -                      if (!that.canceled && query === that.query) {

 Line: 35233 -                  var query = this.input.getQuery();

 Line: 35234 -                  this.dropdown.isEmpty && query.length >= this.minLength ? this.dropdown.update(query) : this.dropdown.moveCursorUp();

 Line: 35238 -                  var query = this.input.getQuery();

 Line: 35239 -                  this.dropdown.isEmpty && query.length >= this.minLength ? this.dropdown.update(query) : this.dropdown.moveCursorDown();

 Line: 35248 -              _onQueryChanged: function onQueryChanged(e, query) {

 Line: 35250 -                  query.length >= this.minLength ? this.dropdown.update(query) : this.dropdown.empty();

 Line: 35267 -                  var datum, val, query, escapedQuery, frontMatchRegEx, match;

 Line: 35271 -                      query = Input.normalizeQuery(val);

 Line: 35281 -                  var hint, query, isCursorAtEnd, datum;

 Line: 35283 -                  query = this.input.getQuery();

 Line: 35285 -                  if (hint && query !== hint && isCursorAtEnd) {

 Line: 35428 -                      var typeahead, query;

 Line: 35430 -                          query = typeahead.getVal();

 Line: 35432 -                      return query;

 Line: 37059 -                      // By using querySelector above, we assume here there is

 Line: 38262 -                          // not set to null. So we query the XMPP server.

 Line: 38714 -                  /* Do a MAM (XEP-0313) query for archived messages.

 Line: 38718 -                   *    (Function) callback - A function to call whenever we receive query-relevant stanza.

 Line: 38722 -                   * Strophe.RSM to enable easy querying between results pages.

 Line: 38743 -                  var queryid = converse.connection.getUniqueId();

 Line: 38747 -                          throw new Error('You need to specify a "with" value containing the chat room JID, when querying groupchat messages.');

 Line: 38782 -                          if ($fin.length && $fin.attr('queryid') === queryid) {

 Line: 45018 -      // query message

 Line: 47001 -                      // query message from our contact. Otherwise, it is us who will

 Line: 47002 -                      // send the query message to them.

 Line: 47562 -                       *    (XMLElement) elem - The query stanza.

 Line: 47865 -                          query = stanza.getElementsByTagName("query");

 Line: 47867 -                          query = query[0];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse-mobile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 24441 -              if ($field.attr('type') === 'list-single' || $field.attr('type') === 'list-multi') {

 Line: 24464 -              } else if ($field.attr('type') === 'fixed') {

 Line: 24466 -              } else if ($field.attr('type') === 'jid-multi') {

 Line: 24473 -              } else if ($field.attr('type') === 'boolean') {

 Line: 24481 -              } else if ($field.attr('type') && $field.attr('var') === 'username') {

 Line: 24499 -                  if ($field.attr('var') === 'ocr') { // Captcha

 Line: 37132 -                      if ($error.attr('type') === 'auth') {

 Line: 37140 -                      } else if ($error.attr('type') === 'modify') {

 Line: 37144 -                      } else if ($error.attr('type') === 'cancel') {

 Line: 47829 -                              if ($field.attr('xmlns') === 'jabber:x:oob') {

 Line: 48189 -                  } else if ($message.attr('type') === 'groupchat') {

 Line: 48234 -                  if ($message.attr('type') === 'headline' || from_jid.indexOf('@') === -1) {

 Line: 48239 -                      if ($message.attr('type') === 'groupchat') {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse-mobile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 6 -  /*global setTimeout: false */

 Line: 390 -              setTimeout(function () {

 Line: 4004 -  			window.setTimeout( jQuery.ready );

 Line: 6914 -  	window.setTimeout( function() {

 Line: 7496 -  		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );

 Line: 7522 -  		var timeout = window.setTimeout( next, time );

 Line: 9113 -  				timeoutTimer = window.setTimeout( function() {

 Line: 9624 -  							window.setTimeout( function() {

 Line: 11050 -      return setTimeout(function(){

 Line: 11090 -          timeout = setTimeout(later, remaining);

 Line: 11107 -          timeout = setTimeout(later, wait - last);

 Line: 11122 -        if (!timeout) timeout = setTimeout(later, wait);

 Line: 18123 -  /*global define, document, window, setTimeout, clearTimeout, ActiveXObject, DOMParser */

 Line: 19752 -      // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 19753 -      this._idleTimeout = setTimeout(function() {

 Line: 20347 -          // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 20348 -          this._idleTimeout = setTimeout(function() {

 Line: 21353 -              // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 21354 -              this._idleTimeout = setTimeout(function() {

 Line: 21765 -  /* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */

 Line: 22526 -                  setTimeout(function() {

 Line: 22527 -                      // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 22641 -          // XXX: setTimeout should be called only with function expressions (23974bc1)

 Line: 22642 -          this._conn._idleTimeout = setTimeout(function() {

 Line: 26436 -    // * Use `setTimeout` to batch rapid-fire updates into a single request.

 Line: 26783 -          this._checkUrlInterval = setInterval(this.checkUrl, this.interval);

 Line: 27703 -              converse.everySecondTrigger = window.setInterval(converse.onEverySecond, 1000);

 Line: 27766 -                      window.setTimeout(_.partial(converse.reconnect, condition), 3000);

 Line: 31379 -                          this.clear_status_timeout = window.setTimeout(this.clearStatusNotification.bind(this), 30000);

 Line: 31558 -                          this.chat_state_timeout = window.setTimeout(

 Line: 31561 -                          this.chat_state_timeout = window.setTimeout(

 Line: 32596 -                              window.setTimeout(

 Line: 34360 -                  setTimeout(fn, 0);

 Line: 34374 -                      timeout = setTimeout(later, wait);

 Line: 34399 -                          timeout = setTimeout(later, remaining);

 Line: 34572 -                      setTimeout(function() {

 Line: 46228 -        setTimeout(send, first ? 0 : self.send_interval)

 Line: 46945 -                      window.setTimeout(function () {

 Line: 48256 -                  setTimeout(n.close.bind(n), 5000);

 Line: 48286 -                  setTimeout(n.close.bind(n), 5000);

 Line: 48295 -                  setTimeout(n.close.bind(n), 5000);

 Line: 48305 -                      setTimeout(n.close.bind(n), 5000);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse-mobile.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1251 -  			// Take advantage of querySelectorAll

 Line: 9427 -  // key/values into a query string

 Line: 24414 -          contains: function (attr, query) {

 Line: 24518 -      utils.contains.not = function (attr, query) {

 Line: 24520 -              return !(utils.contains(attr, query)(item));

 Line: 24937 -       * Info query

 Line: 24955 -       * Items query

 Line: 24975 -      _buildIQResult: function(stanza, query_attrs)

 Line: 24985 -          return iqresult.c('query', query_attrs);

 Line: 25023 -          var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};

 Line: 25028 -              query_attrs.node = node;

 Line: 25043 -          var iqresult = this._buildIQResult(stanza, query_attrs);

 Line: 25119 -    // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and

 Line: 26440 -    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests

 Line: 26477 -      if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {

 Line: 26511 -      'delete': 'DELETE',

 Line: 28226 -                   * sessionStorage cache, and if that's empty, then by querying

 Line: 32561 -                      query = query.toLowerCase();

 Line: 33003 -                      /* Filter the group's contacts based on the query "q".

 Line: 33004 -                       * The query is matched against the contact's full name.

 Line: 34751 -                  this.query = query;

 Line: 34877 -                          query: query,

 Line: 34889 -                          pattern: query

 Line: 34903 -                          query: query,

 Line: 34909 -                          query: query,

 Line: 34919 -                  this.query = query;

 Line: 34923 -                      if (!that.canceled && query === that.query) {

 Line: 35233 -                  var query = this.input.getQuery();

 Line: 35234 -                  this.dropdown.isEmpty && query.length >= this.minLength ? this.dropdown.update(query) : this.dropdown.moveCursorUp();

 Line: 35238 -                  var query = this.input.getQuery();

 Line: 35239 -                  this.dropdown.isEmpty && query.length >= this.minLength ? this.dropdown.update(query) : this.dropdown.moveCursorDown();

 Line: 35248 -              _onQueryChanged: function onQueryChanged(e, query) {

 Line: 35250 -                  query.length >= this.minLength ? this.dropdown.update(query) : this.dropdown.empty();

 Line: 35267 -                  var datum, val, query, escapedQuery, frontMatchRegEx, match;

 Line: 35271 -                      query = Input.normalizeQuery(val);

 Line: 35281 -                  var hint, query, isCursorAtEnd, datum;

 Line: 35283 -                  query = this.input.getQuery();

 Line: 35285 -                  if (hint && query !== hint && isCursorAtEnd) {

 Line: 35428 -                      var typeahead, query;

 Line: 35430 -                          query = typeahead.getVal();

 Line: 35432 -                      return query;

 Line: 37059 -                      // By using querySelector above, we assume here there is

 Line: 38262 -                          // not set to null. So we query the XMPP server.

 Line: 38714 -                  /* Do a MAM (XEP-0313) query for archived messages.

 Line: 38718 -                   *    (Function) callback - A function to call whenever we receive query-relevant stanza.

 Line: 38722 -                   * Strophe.RSM to enable easy querying between results pages.

 Line: 38743 -                  var queryid = converse.connection.getUniqueId();

 Line: 38747 -                          throw new Error('You need to specify a "with" value containing the chat room JID, when querying groupchat messages.');

 Line: 38782 -                          if ($fin.length && $fin.attr('queryid') === queryid) {

 Line: 45018 -      // query message

 Line: 47001 -                      // query message from our contact. Otherwise, it is us who will

 Line: 47002 -                      // send the query message to them.

 Line: 47562 -                       *    (XMLElement) elem - The query stanza.

 Line: 47865 -                          query = stanza.getElementsByTagName("query");

 Line: 47867 -                          query = query[0];

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse-no-dependencies.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Logic fail</Title>
 <Description>Possible logic bug that could lead to security bugs. Assigning a static string to a variable in an if condition is not normal and is likely a mistake.</Description>
 <Level> Low</Level>
 <Reference> https://en.wikipedia.org/wiki/Logic_error</Reference>
 <Match> if\s?\(\s?\$.*\s?(?<!\!)=\s?('|").*('|")\s?\)</Match>
 <Result> Line: 1451 -              if ($field.attr('type') === 'list-single' || $field.attr('type') === 'list-multi') {

 Line: 1474 -              } else if ($field.attr('type') === 'fixed') {

 Line: 1476 -              } else if ($field.attr('type') === 'jid-multi') {

 Line: 1483 -              } else if ($field.attr('type') === 'boolean') {

 Line: 1491 -              } else if ($field.attr('type') && $field.attr('var') === 'username') {

 Line: 1509 -                  if ($field.attr('var') === 'ocr') { // Captcha

 Line: 10109 -                      if ($error.attr('type') === 'auth') {

 Line: 10117 -                      } else if ($error.attr('type') === 'modify') {

 Line: 10121 -                      } else if ($error.attr('type') === 'cancel') {

 Line: 13058 -                              if ($field.attr('xmlns') === 'jabber:x:oob') {

 Line: 13326 -                  } else if ($message.attr('type') === 'groupchat') {

 Line: 13371 -                  if ($message.attr('type') === 'headline' || from_jid.indexOf('@') === -1) {

 Line: 13376 -                      if ($message.attr('type') === 'groupchat') {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse-no-dependencies.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 6 -  /*global setTimeout: false */

 Line: 390 -              setTimeout(function () {

 Line: 2168 -              converse.everySecondTrigger = window.setInterval(converse.onEverySecond, 1000);

 Line: 2231 -                      window.setTimeout(_.partial(converse.reconnect, condition), 3000);

 Line: 5552 -                          this.clear_status_timeout = window.setTimeout(this.clearStatusNotification.bind(this), 30000);

 Line: 5731 -                          this.chat_state_timeout = window.setTimeout(

 Line: 5734 -                          this.chat_state_timeout = window.setTimeout(

 Line: 6769 -                              window.setTimeout(

 Line: 12174 -                      window.setTimeout(function () {

 Line: 13393 -                  setTimeout(n.close.bind(n), 5000);

 Line: 13423 -                  setTimeout(n.close.bind(n), 5000);

 Line: 13432 -                  setTimeout(n.close.bind(n), 5000);

 Line: 13442 -                      setTimeout(n.close.bind(n), 5000);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/dist/converse-no-dependencies.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 1424 -          contains: function (attr, query) {

 Line: 1528 -      utils.contains.not = function (attr, query) {

 Line: 1530 -              return !(utils.contains(attr, query)(item));

 Line: 2691 -                   * sessionStorage cache, and if that's empty, then by querying

 Line: 6734 -                      query = query.toLowerCase();

 Line: 7176 -                      /* Filter the group's contacts based on the query "q".

 Line: 7177 -                       * The query is matched against the contact's full name.

 Line: 10036 -                      // By using querySelector above, we assume here there is

 Line: 11239 -                          // not set to null. So we query the XMPP server.

 Line: 11610 -                  /* Do a MAM (XEP-0313) query for archived messages.

 Line: 11614 -                   *    (Function) callback - A function to call whenever we receive query-relevant stanza.

 Line: 11618 -                   * Strophe.RSM to enable easy querying between results pages.

 Line: 11639 -                  var queryid = converse.connection.getUniqueId();

 Line: 11643 -                          throw new Error('You need to specify a "with" value containing the chat room JID, when querying groupchat messages.');

 Line: 11678 -                          if ($fin.length && $fin.attr('queryid') === queryid) {

 Line: 12230 -                      // query message from our contact. Otherwise, it is us who will

 Line: 12231 -                      // send the query message to them.

 Line: 12791 -                       *    (XMLElement) elem - The query stanza.

 Line: 13094 -                          query = stanza.getElementsByTagName("query");

 Line: 13096 -                          query = query[0];

</Result>
</report_mosca>

