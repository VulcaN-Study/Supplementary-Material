/src/runtime/server.mjs-770-			try {
/src/runtime/server.mjs:771:				return JSON.parse(buffer.toString());
/src/runtime/server.mjs-772-			} catch (err) {
##############################################
/src/runtime/server.mjs-2141-	const get_build_info = dev
/src/runtime/server.mjs:2142:		? () => JSON.parse(fs.readFileSync(path.join(build_dir, 'build.json'), 'utf-8'))
/src/runtime/server.mjs:2143:		: (assets => () => assets)(JSON.parse(fs.readFileSync(path.join(build_dir, 'build.json'), 'utf-8')));
/src/runtime/server.mjs-2144-
##############################################
/src/runtime/server.mjs-2247-							{},
/src/runtime/server.mjs:2248:							cookie.parse(req.headers.cookie || ''),
/src/runtime/server.mjs:2249:							cookie.parse(opts.headers.cookie || '')
/src/runtime/server.mjs-2250-						);
##############################################
/src/sapper-dev-client.js-28-	source.onmessage = function(event) {
/src/sapper-dev-client.js:29:		const data = JSON.parse(event.data);
/src/sapper-dev-client.js-30-		if (!data) return; // just a heartbeat
##############################################
/src/dist/export.js-279-			try {
/src/dist/export.js:280:				return JSON.parse(buffer.toString());
/src/dist/export.js-281-			} catch (err) {
##############################################
/src/dist/export.js-1709-function resolve(from, to) {
/src/dist/export.js:1710:	return Url.parse(Url.resolve(from, to));
/src/dist/export.js-1711-}
##############################################
/src/dist/export.js-1846-				// parse link rel=preload headers and embed them in the HTML
/src/dist/export.js:1847:				let link = httpLinkHeader.parse(r.headers.get('Link') || '');
/src/dist/export.js-1848-				link.refs.forEach((ref) => {
##############################################
/src/dist/core.js-356-			const json = Buffer.from(raw_map.slice(inline_sourcemap_header.length), 'base64').toString();
/src/dist/core.js:357:			map = JSON.parse(json);
/src/dist/core.js-358-		}
##############################################
/src/dist/cli.js-295-
/src/dist/cli.js:296:		let [flag, alias] = utils.parse(str);
/src/dist/cli.js-297-		if (alias && alias.length > 1) [flag, alias]=[alias, flag];
##############################################
/src/dist/cli.js-682-
/src/dist/cli.js:683:prog.parse(process.argv, { unknown: (arg) => `Unknown option: ${arg}` });
/src/dist/cli.js-684-
##############################################
/src/dist/dev.js-442-
/src/dist/dev.js:443:		this._ = http.createServer((req, res) => {
/src/dist/dev.js-444-			if (req.url !== '/__sapper__') return;
##############################################
/src/dist/chunk.js-13-    return new Promise(function (fulfil) {
/src/dist/chunk.js:14:        var server = net.createServer();
/src/dist/chunk.js-15-        server.unref();
##############################################
/src/dist/chunk.js-19-        server.listen({ port: port }, function () {
/src/dist/chunk.js:20:            var server2 = net.createServer();
/src/dist/chunk.js-21-            server2.unref();
##############################################
/src/dist/chunk.js-43-        return new Promise(function (fulfil) {
/src/dist/chunk.js:44:            var server = net.createServer();
/src/dist/chunk.js-45-            server.unref();
##############################################
/src/dist/chunk.js-81-function get_port(port, cb) {
/src/dist/chunk.js:82:    var server = net.createServer();
/src/dist/chunk.js-83-    server.unref();
