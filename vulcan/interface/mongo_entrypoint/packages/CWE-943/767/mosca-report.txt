<report_mosca>
 <Path>/src/lib/mongodb.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 843 -    var query = {};

 Line: 845 -      return query;

 Line: 856 -        query['$' + k] = cond;

 Line: 857 -        delete query[k];

 Line: 882 -          query[k] = {$gte: cond[0], $lte: cond[1]};

 Line: 885 -          query[k] = {

 Line: 893 -          query[k] = {

 Line: 901 -            query[k] = {$regex: cond};

 Line: 903 -            query[k] = {$regex: new RegExp(cond, options)};

 Line: 907 -            query[k] = {$not: cond};

 Line: 909 -            query[k] = {$not: new RegExp(cond, options)};

 Line: 912 -          query[k] = {$ne: cond};

 Line: 917 -          query[k] = {$regex: cond};

 Line: 919 -          query[k] = {};

 Line: 920 -          query[k]['$' + spec] = cond;

 Line: 926 -          query[k] = {$type: 10};

 Line: 931 -          query[k] = cond;

 Line: 935 -    return query;

 Line: 1018 -      var queryValue = {

 Line: 1029 -          queryValue.near['$' + p] = convertToMeters(near[p], unit);

 Line: 1036 -        // if mongoKey is an Array, set the $near query at the right depth, following the Array

 Line: 1038 -          property = query.where;

 Line: 1054 -          property[near.mongoKey[i - 1]] = queryValue;

 Line: 1057 -          property = query.where[near.mongoKey] = queryValue;

 Line: 1202 -    var query = {};

 Line: 1204 -      query = self.buildWhere(model, filter.where);

 Line: 1214 -      this.execute(model, 'find', query, findOpts, processResponse);

 Line: 1216 -      this.execute(model, 'find', query, processResponse);

 Line: 1224 -      // don't apply sorting if dealing with a geo query

 Line: 1815 -    var query = {};

 Line: 1823 -      query = self.buildWhere(model, filter.where);

 Line: 1829 -      query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/leak-detection/leak-detector.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 20 -      var interval = setInterval(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/leak-detection/mongodb.test.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 33 -      var interval = setInterval(function() {

</Result>
</report_mosca>

