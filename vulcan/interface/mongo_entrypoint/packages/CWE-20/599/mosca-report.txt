<report_mosca>
 <Path>/src/examples/aggregate/aggregate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 62 -      // run an aggregate query that will get all of the people who like a given

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/geospatial/geospatial.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 77 -          // we can also just query straight off of the model. For more

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/querybuilder/querybuilder.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 50 -      // when querying data, instead of providing a callback, you can instead

 Line: 51 -      // leave that off and get a query object returned

 Line: 52 -      var query = Person.find({ age : { $lt : 1000 }});

 Line: 55 -      query.sort('birthday');

 Line: 56 -      query.select('name');

 Line: 61 -      query.where('age').gt(21);

 Line: 63 -      // finally, when ready to execute the query, call the exec() function

 Line: 64 -      query.exec(function(err, results) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/promises/promise.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 52 -        // create a promise (get one from the query builder)

 Line: 70 -          // just getting the stuff for the next query

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/globalschemas/gs_example.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 30 -        setTimeout(function() { cleanup(); }, 2000);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/examples/mapreduce/mapreduce.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 77 -      // o.query = { age : { $lt : 1000 }}; // the query object

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schema.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 84 -      queryHooks: IS_QUERY_HOOK

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/promise.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 265 -   *     setTimeout(function () {

 Line: 275 -   *     setTimeout(function () {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/promise.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -   *     var query = Candy.find({ bar: true });

 Line: 13 -   *     var promise = query.exec();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/ES6Promise.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 7 -   *     var query = Candy.find({ bar: true });

 Line: 8 -   *     var promise = query.exec();

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/document.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 30 -   * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data

 Line: 157 -    // determine if this doc is a result of a query with

 Line: 387 -   * Sends an update command with this document `_id` as the query selector.

 Line: 683 -      // when a path is not selected in a query, its initial

 Line: 966 -   * Checks if `path` was selected in the source query which initialized this document.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/browserDocument.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 17 -   * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/types/array.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 92 -        // instance as specified in the original query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/aggregate.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 101 -   * Mongoose query [selection syntax](#query_Query-select) is also supported.

 Line: 224 -   *       query: { type: "public" },

 Line: 335 -    // TODO refactor to reuse the query builder logic

 Line: 359 -   * Sets the readPreference option for the aggregation query.

 Line: 366 -   * @param {Array} [tags] optional tags for this query

 Line: 424 -   * Sets the allowDiskUse option for the aggregation query (ignored for < 2.6.0)

 Line: 431 -   * @param {Array} [tags] optional tags for this query

 Line: 442 -   * Sets the cursor option option for the aggregation query (ignored for < 2.6.0).

 Line: 589 -      // aggregation query optimizations not to be disturbed by this feature.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schematype.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 514 -      // no validation when this path wasn't selected in the query.

 Line: 620 -   * Set to `true` if this path should always be included in the results, `false` if it should be excluded by default. This setting can be overridden at the query level.

 Line: 781 -          && utils.isObject(value)    // might have deselected _id in population query

 Line: 825 -   * Cast the given value with the given optional query operator.

 Line: 827 -   * @param {String} [$conditional] query operator, like `$eq` or `$in`

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -  var querystring = require('querystring');

 Line: 97 -   * Checks if ?replicaSet query parameter is specified in URI

 Line: 113 -    var queryStringStart = uri.indexOf('?');

 Line: 117 -        var obj = querystring.parse(uri.substr(queryStringStart + 1));

 Line: 688 -   * The [mquery](https://github.com/aheckmann/mquery) query builder Mongoose uses.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/error/divergentArray.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 16 -            + 'populated using skip, limit, query conditions, or exclusion of '

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schema/embedded.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 71 -   * Casts contents for query

 Line: 73 -   * @param {string} [$conditional] optional query operator (like `$eq` or `$in`)

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schema/buffer.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 90 -      // the population query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schema/documentarray.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 235 -   * Scopes paths selected in a query to this array.

 Line: 239 -   * @param {Object|undefined} fields - the root fields selected in the query

 Line: 240 -   * @param {Boolean|undefined} init - if we are being created part of a query result

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schema/objectid.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 103 -      // the population query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schema/number.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 194 -      // the population query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/schema/string.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 405 -      // the population query.

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/query.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 23 -   *     var query = new Query();

 Line: 24 -   *     query.setOptions({ lean : true });

 Line: 25 -   *     query.collection(model.collection);

 Line: 26 -   *     query.where('age').gte(21).exec(callback);

 Line: 115 -   * Converts this query to a customized, reusable query constructor with all arguments and options retained.

 Line: 119 -   *     // Create a query for adventure movies and read from the primary

 Line: 122 -   *     var query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');

 Line: 125 -   *     var Adventure = query.toConstructor();

 Line: 128 -   *     // default query parameters and options set.

 Line: 131 -   *     // further narrow down our query results while still using the previous settings

 Line: 187 -   * Specifies a javascript function or expression to pass to MongoDBs query system.

 Line: 191 -   *     query.$where('this.comments.length === 10 || this.name.length === 5')

 Line: 195 -   *     query.$where(function () {

 Line: 224 -   *     // passing query conditions is permitted

 Line: 265 -   *     query.or([{ color: 'red' }, { status: 'emergency' }])

 Line: 280 -   *     query.nor([{ color: 'green' }, { status: 'ok' }])

 Line: 295 -   *     query.and([{ color: 'green' }, { status: 'ok' }])

 Line: 306 -   * Specifies a $gt query condition.

 Line: 326 -   * Specifies a $gte query condition.

 Line: 339 -   * Specifies a $lt query condition.

 Line: 352 -   * Specifies a $lte query condition.

 Line: 365 -   * Specifies a $ne query condition.

 Line: 378 -   * Specifies an $in query condition.

 Line: 391 -   * Specifies an $nin query condition.

 Line: 404 -   * Specifies an $all query condition.

 Line: 417 -   * Specifies a $size query condition.

 Line: 439 -   * Specifies a $regex query condition.

 Line: 452 -   * Specifies a $maxDistance query condition.

 Line: 504 -   *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})

 Line: 506 -   *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})

 Line: 508 -   *     query.elemMatch('comment', function (elem) {

 Line: 513 -   *     query.where('comment').elemMatch(function (elem) {

 Line: 532 -   *     query.where(path).within().box()

 Line: 533 -   *     query.where(path).within().circle()

 Line: 534 -   *     query.where(path).within().geometry()

 Line: 536 -   *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });

 Line: 537 -   *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });

 Line: 538 -   *     query.where('loc').within({ polygon: [[],[],[],[]] });

 Line: 540 -   *     query.where('loc').within([], [], []) // polygon

 Line: 541 -   *     query.where('loc').within([], []) // box

 Line: 542 -   *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry

 Line: 570 -   *     query.slice('comments', 5)

 Line: 571 -   *     query.slice('comments', -5)

 Line: 572 -   *     query.slice('comments', [10, 5])

 Line: 573 -   *     query.where('comments').slice(5)

 Line: 574 -   *     query.where('comments').slice([-10, 5])

 Line: 587 -   * Specifies the maximum number of documents the query will return.

 Line: 591 -   *     query.limit(20)

 Line: 608 -   *     query.skip(100).limit(20)

 Line: 626 -   *     query.maxScan(100)

 Line: 644 -   *     query.batchSize(100)

 Line: 662 -   *     query.comment('login query')

 Line: 676 -   * Specifies this query as a `snapshot` query.

 Line: 680 -   *     query.snapshot() // true

 Line: 681 -   *     query.snapshot(true)

 Line: 682 -   *     query.snapshot(false)

 Line: 696 -   * Sets query hints.

 Line: 700 -   *     query.hint({ indexA: 1, indexB: -1})

 Line: 715 -   * Specifies which document fields to include or exclude (also known as the query "projection")

 Line: 722 -   *     query.select('a b');

 Line: 725 -   *     query.select('-c -d');

 Line: 729 -   *     query.select({ a: 1, b: 1 });

 Line: 730 -   *     query.select({ c: 0, d: 0 });

 Line: 733 -   *     query.select('+path')

 Line: 756 -   *     query.slaveOk() // true

 Line: 757 -   *     query.slaveOk(true)

 Line: 758 -   *     query.slaveOk(false)

 Line: 815 -   * @param {Array} [tags] optional tags for this query

 Line: 842 -   * Sets query options.

 Line: 859 -   * _* denotes a query helper method is also available_

 Line: 860 -   * _** query helper method to set `readPreference` is `read()`_

 Line: 887 -   * Returns the current query conditions as a JSON object.

 Line: 891 -   *     var query = new Query();

 Line: 892 -   *     query.find({ a: 1 }).where('b').gt(2);

 Line: 893 -   *     query.getQuery(); // { a: 1, b: { $gt: 2 } }

 Line: 895 -   * @return {Object} current query conditions

 Line: 908 -   *     var query = new Query();

 Line: 909 -   *     query.update({}, { $set: { a: 5 } });

 Line: 910 -   *     query.getUpdate(); // { $set: { a: 5 } }

 Line: 921 -   * Returns fields selection for this query.

 Line: 957 -   * Returns default options for this query.

 Line: 1062 -   * When no `callback` is passed, the query is not executed. When the query is executed, the result will be an array of documents.

 Line: 1066 -   *     query.find({ name: 'Los Pollos Hermanos' }).find(callback)

 Line: 1095 -    // if we don't have a callback, then just return the query object

 Line: 1182 -   * Declares the query a findOne operation. When executed, the first found document is passed to the callback.

 Line: 1184 -   * Passing a `callback` executes the query. The result of the query is a single document.

 Line: 1188 -   *     var query  = Kitten.where({ color: 'white' });

 Line: 1189 -   *     query.findOne(function (err, kitten) {

 Line: 1281 -   * Specifying this query as a `count` query.

 Line: 1283 -   * Passing a `callback` executes the query.

 Line: 1289 -   *     query.count({ color: 'black' }).count(callback)

 Line: 1291 -   *     query.count({ color: 'black' }, callback)

 Line: 1293 -   *     query.where('color', 'black').count(function (err, count) {

 Line: 1328 -   * Passing a `callback` executes the query.

 Line: 1390 -   *     query.sort({ field: 'asc', test: -1 });

 Line: 1393 -   *     query.sort('field -test');

 Line: 1432 -   * Declare and/or execute this query as a remove() operation.

 Line: 1443 -   *     var query = Model.find().remove({ name: 'Anne Murray' })

 Line: 1446 -   *     query.remove({ name: 'Anne Murray' }, callback)

 Line: 1447 -   *     query.remove({ name: 'Anne Murray' }).remove(callback)

 Line: 1450 -   *     query.exec()

 Line: 1453 -   *     query.remove(conds, fn); // executes

 Line: 1454 -   *     query.remove(conds)

 Line: 1455 -   *     query.remove(fn) // executes

 Line: 1456 -   *     query.remove()

 Line: 1521 -    var schema = query.model.schema;

 Line: 1524 -      query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;

 Line: 1531 -   * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.

 Line: 1548 -   *     query.findOneAndUpdate(conditions, update, options, callback) // executes

 Line: 1549 -   *     query.findOneAndUpdate(conditions, update, options)  // returns Query

 Line: 1550 -   *     query.findOneAndUpdate(conditions, update, callback) // executes

 Line: 1551 -   *     query.findOneAndUpdate(conditions, update)           // returns Query

 Line: 1552 -   *     query.findOneAndUpdate(update, callback)             // returns Query

 Line: 1553 -   *     query.findOneAndUpdate(update)                       // returns Query

 Line: 1554 -   *     query.findOneAndUpdate(callback)                     // executes

 Line: 1555 -   *     query.findOneAndUpdate()                             // returns Query

 Line: 1920 -   * Declare and/or execute this query as an update() operation.

 Line: 2053 -    // validate the selector part of the query

 Line: 2065 -    // validate the update part of the query

 Line: 2106 -   * Executes the query

 Line: 2110 -   *     var promise = query.exec();

 Line: 2111 -   *     var promise = query.exec('update');

 Line: 2113 -   *     query.exec(callback);

 Line: 2114 -   *     query.exec('find', callback);

 Line: 2153 -   * Executes the query returning a `Promise` which will be

 Line: 2264 -        // if we are just using overwrite, cast the query and then we will

 Line: 2285 -   * @param {Object} obj - part of a query

 Line: 2452 -      return query.cast(query.model);

 Line: 2465 -      return query._castUpdate(query._update, overwrite);

 Line: 2494 -   * Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.

 Line: 2497 -   * @param {Object|String} [select] Field selection for the population query

 Line: 2499 -   * @param {Object} [match] Conditions for the population query

 Line: 2500 -   * @param {Object} [options] Options for the population query (sort, etc)

 Line: 2524 -   * Casts this query to the schema of `model`

 Line: 2528 -   * If `obj` is present, it is cast instead of this query.

 Line: 2545 -   *     query.select({ ids: { $elemMatch: { $in: [hexString] }})

 Line: 2597 -   * Applies schematype selected options to this query.

 Line: 2602 -    // determine if query is selecting or excluding fields

 Line: 2753 -   *     query.tailable() // true

 Line: 2754 -   *     query.tailable(true)

 Line: 2755 -   *     query.tailable(false)

 Line: 2793 -   * Declares an intersects query for `geometry()`.

 Line: 2797 -   *     query.where('path').intersects().geometry({

 Line: 2802 -   *     query.where('path').intersects({

 Line: 2830 -   *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })

 Line: 2834 -   *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })

 Line: 2838 -   *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })

 Line: 2841 -   *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })

 Line: 2870 -   *     query.where('loc').near({ center: [10, 10] });

 Line: 2871 -   *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });

 Line: 2872 -   *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });

 Line: 2873 -   *     query.near('loc', { center: [10, 10], maxDistance: 5 });

 Line: 2952 -   *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });

 Line: 2958 -   *     query.where('loc').near({ center: [10, 10], spherical: true });

 Line: 2978 -   *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])

 Line: 2979 -   *     query.polygon('loc', [10,20], [13, 25], [7,15])

 Line: 2999 -   *     query.where('loc').within().box(lowerLeft, upperRight)

 Line: 3000 -   *     query.box({ ll : lowerLeft, ur : upperRight })

 Line: 3033 -   *     query.where('loc').within().circle(area)

 Line: 3035 -   *     query.circle('loc', area);

 Line: 3039 -   *     query.where('loc').within().circle(area)

 Line: 3041 -   *     query.circle('loc', area);

 Line: 3078 -   *     query.where('loc').within().centerSphere(area);

 Line: 3111 -   * Executes this query and returns a promise

 Line: 3122 -   *     query.selectedInclusively() // false

 Line: 3123 -   *     query.select('name')

 Line: 3124 -   *     query.selectedInclusively() // true

 Line: 3135 -   *     query.selectedExclusively() // false

 Line: 3136 -   *     query.select('-name')

 Line: 3137 -   *     query.selectedExclusively() // true

 Line: 3138 -   *     query.selectedInclusively() // false

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/querystream.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 43 -   * @param {Query} query

 Line: 55 -    this.query = query;

 Line: 105 -   * Initializes the query.

 Line: 113 -    var query = this.query,

 Line: 114 -        model = query.model,

 Line: 115 -        options = query._optionsForExec(model),

 Line: 119 -      query.cast(model);

 Line: 125 -    options.fields = query._castFields(self._fields);

 Line: 330 -   * Pipes this query stream into another stream. This method is inherited from NodeJS Streams.

 Line: 334 -   *     query.stream().pipe(writeStream [, options])

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/queryhelpers.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 8 -   * Prepare a set of path options for query population.

 Line: 10 -   * @param {Query} query

 Line: 25 -   * Prepare a set of path options for query population. This is the MongooseQuery

 Line: 28 -   * @param {Query} query

 Line: 69 -   * Set each path query option to lean

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/services/updateValidators.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 12 -   * @param {Query} query

 Line: 59 -        var condition = query._conditions[path];

 Line: 130 -              options && options.context === 'query' ? query : null,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/model.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 122 -        setTimeout(function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/lib/model.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 25 -  var VERSION_WHERE = 1,

 Line: 27 -      VERSION_ALL = VERSION_WHERE | VERSION_INC;

 Line: 378 -      self.$__.version = VERSION_WHERE;

 Line: 451 -   * Produces a special query document of the modified properties used in updates.

 Line: 592 -    if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) {

 Line: 624 -   * Returns a query object which applies shardkeys if they exist.

 Line: 1048 -   *     var query = Comment.remove({ _id: id });

 Line: 1049 -   *     query.exec();

 Line: 1095 -   *     // executing a query explicitly

 Line: 1096 -   *     var query = MyModel.find({ name: /john/i }, null, { skip: 10 })

 Line: 1097 -   *     query.exec(function (err, docs) {});

 Line: 1099 -   *     // using the promise returned from executing a query

 Line: 1100 -   *     var query = MyModel.find({ name: /john/i }, null, { skip: 10 });

 Line: 1101 -   *     var promise = query.exec();

 Line: 1175 -   * @param {Object|String|Number} id value of `_id` to query by

 Line: 1285 -   * Passing a `callback` immediately executes the query.

 Line: 1296 -   *     var query = Link.distinct('url');

 Line: 1297 -   *     query.exec(callback);

 Line: 1351 -   * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find({ $where: javascript })`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.

 Line: 1371 -   * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed else a Query object is returned.

 Line: 1394 -   *     var query = { name: 'borne' };

 Line: 1477 -   * callback. The query executes immediately if `callback` is passed else a

 Line: 1531 -   * @param {Object|Number|String} id value of `_id` to query by

 Line: 1659 -   * @param {Object|Number|String} id value of `_id` to query by

 Line: 1836 -   *     var query = { name: 'borne' };

 Line: 1912 -   * - `query` {Object} query filter object.

 Line: 1930 -   * If `options.out` is set to `replace`, `merge`, or `reduce`, a Model instance is returned that can be used for further querying. Queries run against this model are all executed with the `lean` option; meaning only the js object is returned and no Mongoose magic is applied (getters, setters, etc).

 Line: 2030 -   * @param {Function} [callback] optional callback for the query

 Line: 2272 -   * - match: optional query conditions to match

 Line: 2274 -   * - options: optional query options like sort, limit, etc

 Line: 2370 -    // each path has its own query options and must be executed separately

 Line: 2482 -      // the query result.

 Line: 2516 -        // no need to include undefined values in our query

 Line: 2535 -        // override the exclusion from the query so we can use the _id

 Line: 2611 -          modelNames = [modelNameFromQuery];  // query options

 Line: 2717 -   * Assigns documents returned from a population query back

 Line: 2723 -    // with the documents found by query

 Line: 2755 -   * 2) Remove _ids when specified by users query.

 Line: 2758 -   * _ids are left in the query even when user excludes them so

 Line: 2799 -   * Remove _id from `subdoc` if user specified "lean" query option

 Line: 2814 -   * by a populate query.

 Line: 2839 -   * Assign `vals` returned by mongo query to the `rawIds`

 Line: 2841 -   * query sort order if specified by user.

</Result>
</report_mosca>

