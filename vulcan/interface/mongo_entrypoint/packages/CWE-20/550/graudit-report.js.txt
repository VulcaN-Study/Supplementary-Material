/src/README.md-186-
/src/README.md:187:const server = http.createServer(app);
/src/README.md-188-const wss = new WebSocket.Server({ server });
##############################################
/src/README.md-190-wss.on('connection', function connection(ws, req) {
/src/README.md:191:  const location = url.parse(req.url, true);
/src/README.md-192-  // You might use location.query.access_token to authenticate or share sessions
##############################################
/src/lib/WebSocketServer.js-66-    if (options.port != null) {
/src/lib/WebSocketServer.js:67:      this._server = http.createServer((req, res) => {
/src/lib/WebSocketServer.js-68-        const body = http.STATUS_CODES[426];
##############################################
/src/lib/WebSocketServer.js-133-  shouldHandle (req) {
/src/lib/WebSocketServer.js:134:    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {
/src/lib/WebSocketServer.js-135-      return false;
##############################################
/src/lib/WebSocketServer.js-229-
/src/lib/WebSocketServer.js:230:    const offer = Extensions.parse(req.headers['sec-websocket-extensions']);
/src/lib/WebSocketServer.js-231-    var extensions;
##############################################
/src/lib/WebSocket.js-471- * @param {Function} options.checkServerIdentity A function to validate the server hostname
/src/lib/WebSocket.js:472: * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate
/src/lib/WebSocket.js-473- * @param {String} options.passphrase The passphrase for the private key or pfx
##############################################
/src/lib/WebSocket.js-498-    checkServerIdentity: null,
/src/lib/WebSocket.js:499:    rejectUnauthorized: null,
/src/lib/WebSocket.js-500-    passphrase: null,
##############################################
/src/lib/WebSocket.js-519-
/src/lib/WebSocket.js:520:  const serverUrl = url.parse(address);
/src/lib/WebSocket.js-521-  const isUnixSocket = serverUrl.protocol === 'ws+unix:';
##############################################
/src/lib/WebSocket.js-598-  if (
/src/lib/WebSocket.js:599:    options.rejectUnauthorized != null ||
/src/lib/WebSocket.js-600-    options.checkServerIdentity ||
##############################################
/src/lib/WebSocket.js-618-    }
/src/lib/WebSocket.js:619:    if (options.rejectUnauthorized != null) {
/src/lib/WebSocket.js:620:      requestOptions.rejectUnauthorized = options.rejectUnauthorized;
/src/lib/WebSocket.js-621-    }
##############################################
/src/lib/WebSocket.js-694-
/src/lib/WebSocket.js:695:    const serverExtensions = Extensions.parse(res.headers['sec-websocket-extensions']);
/src/lib/WebSocket.js-696-
