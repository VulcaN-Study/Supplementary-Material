/src/lib/handlebars/compiler/ast.js-1-let AST = {
/src/lib/handlebars/compiler/ast.js:2:  // Public API used to evaluate derived attributes regarding AST nodes
/src/lib/handlebars/compiler/ast.js-3-  helpers: {
##############################################
/src/lib/handlebars/compiler/compiler.js-12-// function in a context. This is necessary for mustache compatibility, which
/src/lib/handlebars/compiler/compiler.js:13:// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/lib/handlebars/compiler/compiler.js-14-// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/lib/handlebars/compiler/compiler.js-139-      // now that the simple mustache is resolved, we need to
/src/lib/handlebars/compiler/compiler.js:140:      // evaluate it by executing `blockHelperMissing`
/src/lib/handlebars/compiler/compiler.js-141-      this.opcode('pushProgram', program);
##############################################
/src/lib/handlebars/compiler/compiler.js-148-      // now that the simple mustache is resolved, we need to
/src/lib/handlebars/compiler/compiler.js:149:      // evaluate it by executing `blockHelperMissing`
/src/lib/handlebars/compiler/compiler.js-150-      this.opcode('pushProgram', program);
##############################################
/src/lib/handlebars/compiler/compiler.js-411-      if (val.type === 'SubExpression') {
/src/lib/handlebars/compiler/compiler.js:412:        // SubExpressions get evaluated and passed in
/src/lib/handlebars/compiler/compiler.js-413-        // in string params mode.
##############################################
/src/lib/handlebars/compiler/javascript-compiler.js-429-      // The depthed query is expected to handle the undefined logic for the root level that
/src/lib/handlebars/compiler/javascript-compiler.js:430:      // is implemented below, so we evaluate that directly in compat mode
/src/lib/handlebars/compiler/javascript-compiler.js-431-      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/lib/handlebars/compiler/javascript-compiler.js-1035-
/src/lib/handlebars/compiler/javascript-compiler.js:1036:    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/lib/handlebars/compiler/javascript-compiler.js-1037-    // so we need to pop them off the stack in reverse order
##############################################
/src/dist/handlebars.js-1550-	var AST = {
/src/dist/handlebars.js:1551:	  // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/handlebars.js-1552-	  helpers: {
##############################################
/src/dist/handlebars.js-2996-	// function in a context. This is necessary for mustache compatibility, which
/src/dist/handlebars.js:2997:	// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/handlebars.js-2998-	// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/handlebars.js-3124-	      // now that the simple mustache is resolved, we need to
/src/dist/handlebars.js:3125:	      // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.js-3126-	      this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.js-3133-	      // now that the simple mustache is resolved, we need to
/src/dist/handlebars.js:3134:	      // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.js-3135-	      this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.js-3393-	      if (val.type === 'SubExpression') {
/src/dist/handlebars.js:3394:	        // SubExpressions get evaluated and passed in
/src/dist/handlebars.js-3395-	        // in string params mode.
##############################################
/src/dist/handlebars.js-3987-	      // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/handlebars.js:3988:	      // is implemented below, so we evaluate that directly in compat mode
/src/dist/handlebars.js-3989-	      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/handlebars.js-4586-
/src/dist/handlebars.js:4587:	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/handlebars.js-4588-	    // so we need to pop them off the stack in reverse order
##############################################
/src/dist/amd/handlebars/compiler/ast.js-4-  var AST = {
/src/dist/amd/handlebars/compiler/ast.js:5:    // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/amd/handlebars/compiler/ast.js-6-    helpers: {
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-23-  // function in a context. This is necessary for mustache compatibility, which
/src/dist/amd/handlebars/compiler/compiler.js:24:  // requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/amd/handlebars/compiler/compiler.js-25-  // and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-151-        // now that the simple mustache is resolved, we need to
/src/dist/amd/handlebars/compiler/compiler.js:152:        // evaluate it by executing `blockHelperMissing`
/src/dist/amd/handlebars/compiler/compiler.js-153-        this.opcode('pushProgram', program);
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-160-        // now that the simple mustache is resolved, we need to
/src/dist/amd/handlebars/compiler/compiler.js:161:        // evaluate it by executing `blockHelperMissing`
/src/dist/amd/handlebars/compiler/compiler.js-162-        this.opcode('pushProgram', program);
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-420-        if (val.type === 'SubExpression') {
/src/dist/amd/handlebars/compiler/compiler.js:421:          // SubExpressions get evaluated and passed in
/src/dist/amd/handlebars/compiler/compiler.js-422-          // in string params mode.
##############################################
/src/dist/amd/handlebars/compiler/javascript-compiler.js-435-        // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/amd/handlebars/compiler/javascript-compiler.js:436:        // is implemented below, so we evaluate that directly in compat mode
/src/dist/amd/handlebars/compiler/javascript-compiler.js-437-        this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/amd/handlebars/compiler/javascript-compiler.js-1034-
/src/dist/amd/handlebars/compiler/javascript-compiler.js:1035:      // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/amd/handlebars/compiler/javascript-compiler.js-1036-      // so we need to pop them off the stack in reverse order
##############################################
/src/dist/cjs/handlebars/compiler/ast.js-4-var AST = {
/src/dist/cjs/handlebars/compiler/ast.js:5:  // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/cjs/handlebars/compiler/ast.js-6-  helpers: {
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-28-// function in a context. This is necessary for mustache compatibility, which
/src/dist/cjs/handlebars/compiler/compiler.js:29:// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/cjs/handlebars/compiler/compiler.js-30-// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-156-      // now that the simple mustache is resolved, we need to
/src/dist/cjs/handlebars/compiler/compiler.js:157:      // evaluate it by executing `blockHelperMissing`
/src/dist/cjs/handlebars/compiler/compiler.js-158-      this.opcode('pushProgram', program);
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-165-      // now that the simple mustache is resolved, we need to
/src/dist/cjs/handlebars/compiler/compiler.js:166:      // evaluate it by executing `blockHelperMissing`
/src/dist/cjs/handlebars/compiler/compiler.js-167-      this.opcode('pushProgram', program);
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-425-      if (val.type === 'SubExpression') {
/src/dist/cjs/handlebars/compiler/compiler.js:426:        // SubExpressions get evaluated and passed in
/src/dist/cjs/handlebars/compiler/compiler.js-427-        // in string params mode.
##############################################
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-443-      // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/cjs/handlebars/compiler/javascript-compiler.js:444:      // is implemented below, so we evaluate that directly in compat mode
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-445-      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-1042-
/src/dist/cjs/handlebars/compiler/javascript-compiler.js:1043:    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-1044-    // so we need to pop them off the stack in reverse order
##############################################
/src/dist/handlebars.amd.js-1060-  var AST = {
/src/dist/handlebars.amd.js:1061:    // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/handlebars.amd.js-1062-    helpers: {
##############################################
/src/dist/handlebars.amd.js-2474-  // function in a context. This is necessary for mustache compatibility, which
/src/dist/handlebars.amd.js:2475:  // requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/handlebars.amd.js-2476-  // and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/handlebars.amd.js-2602-        // now that the simple mustache is resolved, we need to
/src/dist/handlebars.amd.js:2603:        // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.amd.js-2604-        this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.amd.js-2611-        // now that the simple mustache is resolved, we need to
/src/dist/handlebars.amd.js:2612:        // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.amd.js-2613-        this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.amd.js-2871-        if (val.type === 'SubExpression') {
/src/dist/handlebars.amd.js:2872:          // SubExpressions get evaluated and passed in
/src/dist/handlebars.amd.js-2873-          // in string params mode.
##############################################
/src/dist/handlebars.amd.js-3620-        // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/handlebars.amd.js:3621:        // is implemented below, so we evaluate that directly in compat mode
/src/dist/handlebars.amd.js-3622-        this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/handlebars.amd.js-4219-
/src/dist/handlebars.amd.js:4220:      // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/handlebars.amd.js-4221-      // so we need to pop them off the stack in reverse order
##############################################
/src/release-notes.md-413-- Expose escapeExpression on the root object - 980c38c
/src/release-notes.md:414:- Remove nested function eval in blockHelperMissing - 6f22ec1
/src/release-notes.md-415-- Fix compiler program de-duping - 9e3f824
##############################################
/src/release-notes.md-657-- Optimize generated output by inlining statements where possible
/src/release-notes.md:658:- Check compiler version when evaluating templates
/src/release-notes.md-659-- Package browser dist in npm package
