/src/lib/handlebars/compiler/ast.js-1-let AST = {
/src/lib/handlebars/compiler/ast.js:2:  // Public API used to evaluate derived attributes regarding AST nodes
/src/lib/handlebars/compiler/ast.js-3-  helpers: {
##############################################
/src/lib/handlebars/compiler/compiler.js-12-// function in a context. This is necessary for mustache compatibility, which
/src/lib/handlebars/compiler/compiler.js:13:// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/lib/handlebars/compiler/compiler.js-14-// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/lib/handlebars/compiler/compiler.js-139-      // now that the simple mustache is resolved, we need to
/src/lib/handlebars/compiler/compiler.js:140:      // evaluate it by executing `blockHelperMissing`
/src/lib/handlebars/compiler/compiler.js-141-      this.opcode('pushProgram', program);
##############################################
/src/lib/handlebars/compiler/compiler.js-148-      // now that the simple mustache is resolved, we need to
/src/lib/handlebars/compiler/compiler.js:149:      // evaluate it by executing `blockHelperMissing`
/src/lib/handlebars/compiler/compiler.js-150-      this.opcode('pushProgram', program);
##############################################
/src/lib/handlebars/compiler/compiler.js-411-      if (val.type === 'SubExpression') {
/src/lib/handlebars/compiler/compiler.js:412:        // SubExpressions get evaluated and passed in
/src/lib/handlebars/compiler/compiler.js-413-        // in string params mode.
##############################################
/src/lib/handlebars/compiler/javascript-compiler.js-434-      // The depthed query is expected to handle the undefined logic for the root level that
/src/lib/handlebars/compiler/javascript-compiler.js:435:      // is implemented below, so we evaluate that directly in compat mode
/src/lib/handlebars/compiler/javascript-compiler.js-436-      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/lib/handlebars/compiler/javascript-compiler.js-1054-
/src/lib/handlebars/compiler/javascript-compiler.js:1055:    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/lib/handlebars/compiler/javascript-compiler.js-1056-    // so we need to pop them off the stack in reverse order
##############################################
/src/dist/handlebars.js-1616-	var AST = {
/src/dist/handlebars.js:1617:	  // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/handlebars.js-1618-	  helpers: {
##############################################
/src/dist/handlebars.js-3071-	// function in a context. This is necessary for mustache compatibility, which
/src/dist/handlebars.js:3072:	// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/handlebars.js-3073-	// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/handlebars.js-3199-	      // now that the simple mustache is resolved, we need to
/src/dist/handlebars.js:3200:	      // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.js-3201-	      this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.js-3208-	      // now that the simple mustache is resolved, we need to
/src/dist/handlebars.js:3209:	      // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.js-3210-	      this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.js-3468-	      if (val.type === 'SubExpression') {
/src/dist/handlebars.js:3469:	        // SubExpressions get evaluated and passed in
/src/dist/handlebars.js-3470-	        // in string params mode.
##############################################
/src/dist/handlebars.js-4067-	      // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/handlebars.js:4068:	      // is implemented below, so we evaluate that directly in compat mode
/src/dist/handlebars.js-4069-	      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/handlebars.js-4681-
/src/dist/handlebars.js:4682:	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/handlebars.js-4683-	    // so we need to pop them off the stack in reverse order
##############################################
/src/dist/amd/handlebars/compiler/ast.js-4-  var AST = {
/src/dist/amd/handlebars/compiler/ast.js:5:    // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/amd/handlebars/compiler/ast.js-6-    helpers: {
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-23-  // function in a context. This is necessary for mustache compatibility, which
/src/dist/amd/handlebars/compiler/compiler.js:24:  // requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/amd/handlebars/compiler/compiler.js-25-  // and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-151-        // now that the simple mustache is resolved, we need to
/src/dist/amd/handlebars/compiler/compiler.js:152:        // evaluate it by executing `blockHelperMissing`
/src/dist/amd/handlebars/compiler/compiler.js-153-        this.opcode('pushProgram', program);
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-160-        // now that the simple mustache is resolved, we need to
/src/dist/amd/handlebars/compiler/compiler.js:161:        // evaluate it by executing `blockHelperMissing`
/src/dist/amd/handlebars/compiler/compiler.js-162-        this.opcode('pushProgram', program);
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-420-        if (val.type === 'SubExpression') {
/src/dist/amd/handlebars/compiler/compiler.js:421:          // SubExpressions get evaluated and passed in
/src/dist/amd/handlebars/compiler/compiler.js-422-          // in string params mode.
##############################################
/src/dist/amd/handlebars/compiler/javascript-compiler.js-440-        // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/amd/handlebars/compiler/javascript-compiler.js:441:        // is implemented below, so we evaluate that directly in compat mode
/src/dist/amd/handlebars/compiler/javascript-compiler.js-442-        this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/amd/handlebars/compiler/javascript-compiler.js-1054-
/src/dist/amd/handlebars/compiler/javascript-compiler.js:1055:      // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/amd/handlebars/compiler/javascript-compiler.js-1056-      // so we need to pop them off the stack in reverse order
##############################################
/src/dist/cjs/handlebars/compiler/ast.js-4-var AST = {
/src/dist/cjs/handlebars/compiler/ast.js:5:  // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/cjs/handlebars/compiler/ast.js-6-  helpers: {
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-28-// function in a context. This is necessary for mustache compatibility, which
/src/dist/cjs/handlebars/compiler/compiler.js:29:// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/cjs/handlebars/compiler/compiler.js-30-// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-156-      // now that the simple mustache is resolved, we need to
/src/dist/cjs/handlebars/compiler/compiler.js:157:      // evaluate it by executing `blockHelperMissing`
/src/dist/cjs/handlebars/compiler/compiler.js-158-      this.opcode('pushProgram', program);
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-165-      // now that the simple mustache is resolved, we need to
/src/dist/cjs/handlebars/compiler/compiler.js:166:      // evaluate it by executing `blockHelperMissing`
/src/dist/cjs/handlebars/compiler/compiler.js-167-      this.opcode('pushProgram', program);
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-425-      if (val.type === 'SubExpression') {
/src/dist/cjs/handlebars/compiler/compiler.js:426:        // SubExpressions get evaluated and passed in
/src/dist/cjs/handlebars/compiler/compiler.js-427-        // in string params mode.
##############################################
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-448-      // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/cjs/handlebars/compiler/javascript-compiler.js:449:      // is implemented below, so we evaluate that directly in compat mode
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-450-      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-1062-
/src/dist/cjs/handlebars/compiler/javascript-compiler.js:1063:    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-1064-    // so we need to pop them off the stack in reverse order
##############################################
/src/dist/handlebars.amd.js-1122-  var AST = {
/src/dist/handlebars.amd.js:1123:    // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/handlebars.amd.js-1124-    helpers: {
##############################################
/src/dist/handlebars.amd.js-2545-  // function in a context. This is necessary for mustache compatibility, which
/src/dist/handlebars.amd.js:2546:  // requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/handlebars.amd.js-2547-  // and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/handlebars.amd.js-2673-        // now that the simple mustache is resolved, we need to
/src/dist/handlebars.amd.js:2674:        // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.amd.js-2675-        this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.amd.js-2682-        // now that the simple mustache is resolved, we need to
/src/dist/handlebars.amd.js:2683:        // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.amd.js-2684-        this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.amd.js-2942-        if (val.type === 'SubExpression') {
/src/dist/handlebars.amd.js:2943:          // SubExpressions get evaluated and passed in
/src/dist/handlebars.amd.js-2944-          // in string params mode.
##############################################
/src/dist/handlebars.amd.js-3696-        // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/handlebars.amd.js:3697:        // is implemented below, so we evaluate that directly in compat mode
/src/dist/handlebars.amd.js-3698-        this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/handlebars.amd.js-4310-
/src/dist/handlebars.amd.js:4311:      // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/handlebars.amd.js-4312-      // so we need to pop them off the stack in reverse order
##############################################
/src/release-notes.md-565-- Expose escapeExpression on the root object - 980c38c
/src/release-notes.md:566:- Remove nested function eval in blockHelperMissing - 6f22ec1
/src/release-notes.md-567-- Fix compiler program de-duping - 9e3f824
##############################################
/src/release-notes.md-809-- Optimize generated output by inlining statements where possible
/src/release-notes.md:810:- Check compiler version when evaluating templates
/src/release-notes.md-811-- Package browser dist in npm package
