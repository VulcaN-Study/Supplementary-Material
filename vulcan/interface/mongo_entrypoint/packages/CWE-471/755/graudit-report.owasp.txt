/src/FAQ.md-16-
/src/FAQ.md:17:  When not using the precompiler, Handlebars generates a dynamic function for each template which can cause issues with pages that have enabled Content Policy. It's recommended that templates are precompiled or the `unsafe-eval` policy is enabled for sites that must generate dynamic templates at runtime.
/src/FAQ.md-18-
##############################################
/src/integration-testing/webpack-babel-test/package-lock.json-3508-            "babel-plugin-dead-code-elimination": "^1.0.2",
/src/integration-testing/webpack-babel-test/package-lock.json:3509:            "babel-plugin-eval": "^1.0.1",
/src/integration-testing/webpack-babel-test/package-lock.json-3510-            "babel-plugin-inline-environment-variables": "^1.0.1",
##############################################
/src/integration-testing/webpack-babel-test/package-lock.json-3588-        },
/src/integration-testing/webpack-babel-test/package-lock.json:3589:        "babel-plugin-eval": {
/src/integration-testing/webpack-babel-test/package-lock.json-3590-          "version": "1.0.1",
/src/integration-testing/webpack-babel-test/package-lock.json:3591:          "resolved": "https://registry.npmjs.org/babel-plugin-eval/-/babel-plugin-eval-1.0.1.tgz",
/src/integration-testing/webpack-babel-test/package-lock.json-3592-          "integrity": "sha1-ovrtJc5r5preS/7CY/cBaRlZUNo="
##############################################
/src/integration-testing/webpack-babel-test/dist/handlebars-inline-precompile-test.js-567-try {
/src/integration-testing/webpack-babel-test/dist/handlebars-inline-precompile-test.js:568:	// This works if eval is allowed (see CSP)
/src/integration-testing/webpack-babel-test/dist/handlebars-inline-precompile-test.js-569-	g = g || new Function("return this")();
##############################################
/src/integration-testing/webpack-test/package-lock.json-2806-            "babel-plugin-dead-code-elimination": "^1.0.2",
/src/integration-testing/webpack-test/package-lock.json:2807:            "babel-plugin-eval": "^1.0.1",
/src/integration-testing/webpack-test/package-lock.json-2808-            "babel-plugin-inline-environment-variables": "^1.0.1",
##############################################
/src/integration-testing/webpack-test/package-lock.json-2886-        },
/src/integration-testing/webpack-test/package-lock.json:2887:        "babel-plugin-eval": {
/src/integration-testing/webpack-test/package-lock.json-2888-          "version": "1.0.1",
/src/integration-testing/webpack-test/package-lock.json:2889:          "resolved": "https://registry.npmjs.org/babel-plugin-eval/-/babel-plugin-eval-1.0.1.tgz",
/src/integration-testing/webpack-test/package-lock.json-2890-          "integrity": "sha1-ovrtJc5r5preS/7CY/cBaRlZUNo="
##############################################
/src/integration-testing/multi-nodejs-test/package-lock.json-633-            "babel-plugin-dead-code-elimination": "^1.0.2",
/src/integration-testing/multi-nodejs-test/package-lock.json:634:            "babel-plugin-eval": "^1.0.1",
/src/integration-testing/multi-nodejs-test/package-lock.json-635-            "babel-plugin-inline-environment-variables": "^1.0.1",
##############################################
/src/integration-testing/multi-nodejs-test/package-lock.json-709-        },
/src/integration-testing/multi-nodejs-test/package-lock.json:710:        "babel-plugin-eval": {
/src/integration-testing/multi-nodejs-test/package-lock.json-711-          "version": "1.0.1",
##############################################
/src/.idea/workspace.xml-983-    <state x="310" y="78" width="739" height="628" key="#com.intellij.ide.util.frameworkSupport.AddFrameworkSupportDialog/0.25.1366.743@0.25.1366.743" timestamp="1576703548613" />
/src/.idea/workspace.xml:984:    <state x="2122" y="245" width="966" height="592" key="#xdebugger.evaluate" timestamp="1577975366756">
/src/.idea/workspace.xml-985-      <screen x="1280" y="0" width="1920" height="1080" />
/src/.idea/workspace.xml-986-    </state>
/src/.idea/workspace.xml:987:    <state x="2122" y="245" width="966" height="592" key="#xdebugger.evaluate/0.25.1280.999/1280.0.1920.1080@1280.0.1920.1080" timestamp="1577975366756" />
/src/.idea/workspace.xml-988-    <state x="379" y="25" width="812" height="999" key="CommitChangelistDialog2" timestamp="1582414813715">
##############################################
/src/README.markdown-64-
/src/README.markdown:65:You can register helpers that Handlebars will use when evaluating your
/src/README.markdown-66-template. Here's an example, which assumes that your objects have a URL
##############################################
/src/lib/handlebars/compiler/ast.js-127-
/src/lib/handlebars/compiler/ast.js:128:  // Public API used to evaluate derived attributes regarding AST nodes
/src/lib/handlebars/compiler/ast.js-129-  helpers: {
##############################################
/src/lib/handlebars/compiler/compiler.js-10-// function in a context. This is necessary for mustache compatibility, which
/src/lib/handlebars/compiler/compiler.js:11:// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/lib/handlebars/compiler/compiler.js-12-// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/lib/handlebars/compiler/compiler.js-131-      // now that the simple mustache is resolved, we need to
/src/lib/handlebars/compiler/compiler.js:132:      // evaluate it by executing `blockHelperMissing`
/src/lib/handlebars/compiler/compiler.js-133-      this.opcode('pushProgram', program);
##############################################
/src/lib/handlebars/compiler/compiler.js-140-      // now that the simple mustache is resolved, we need to
/src/lib/handlebars/compiler/compiler.js:141:      // evaluate it by executing `blockHelperMissing`
/src/lib/handlebars/compiler/compiler.js-142-      this.opcode('pushProgram', program);
##############################################
/src/lib/handlebars/compiler/compiler.js-374-      if (val.type === 'SubExpression') {
/src/lib/handlebars/compiler/compiler.js:375:        // SubExpressions get evaluated and passed in
/src/lib/handlebars/compiler/compiler.js-376-        // in string params mode.
##############################################
/src/lib/handlebars/compiler/javascript-compiler.js-405-      // The depthed query is expected to handle the undefined logic for the root level that
/src/lib/handlebars/compiler/javascript-compiler.js:406:      // is implemented below, so we evaluate that directly in compat mode
/src/lib/handlebars/compiler/javascript-compiler.js-407-      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/lib/handlebars/compiler/javascript-compiler.js-979-
/src/lib/handlebars/compiler/javascript-compiler.js:980:    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/lib/handlebars/compiler/javascript-compiler.js-981-    // so we need to pop them off the stack in reverse order
##############################################
/src/docs/compiler-api.md-238-  - `name` is the current path component
/src/docs/compiler-api.md:239:  - `type` is the type of name being evaluated. May be one of `context`, `data`, `helper`, or `partial`.
/src/docs/compiler-api.md-240-
##############################################
/src/docs/compiler-api.md-253-    - `location` is the location of the source in the source map.
/src/docs/compiler-api.md:254:    - `explicit` is a flag signaling that the emit operation must occur, vs. the lazy evaled options otherwise.
/src/docs/compiler-api.md-255-
##############################################
/src/dist/handlebars.js-1164-
/src/dist/handlebars.js:1165:	  // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/handlebars.js-1166-	  helpers: {
##############################################
/src/dist/handlebars.js-2441-	// function in a context. This is necessary for mustache compatibility, which
/src/dist/handlebars.js:2442:	// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/handlebars.js-2443-	// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/handlebars.js-2563-	      // now that the simple mustache is resolved, we need to
/src/dist/handlebars.js:2564:	      // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.js-2565-	      this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.js-2572-	      // now that the simple mustache is resolved, we need to
/src/dist/handlebars.js:2573:	      // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.js-2574-	      this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.js-2804-	      if (val.type === 'SubExpression') {
/src/dist/handlebars.js:2805:	        // SubExpressions get evaluated and passed in
/src/dist/handlebars.js-2806-	        // in string params mode.
##############################################
/src/dist/handlebars.js-3363-	      // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/handlebars.js:3364:	      // is implemented below, so we evaluate that directly in compat mode
/src/dist/handlebars.js-3365-	      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/handlebars.js-3936-
/src/dist/handlebars.js:3937:	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/handlebars.js-3938-	    // so we need to pop them off the stack in reverse order
##############################################
/src/dist/amd/handlebars/compiler/ast.js-127-
/src/dist/amd/handlebars/compiler/ast.js:128:    // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/amd/handlebars/compiler/ast.js-129-    helpers: {
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-20-  // function in a context. This is necessary for mustache compatibility, which
/src/dist/amd/handlebars/compiler/compiler.js:21:  // requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/amd/handlebars/compiler/compiler.js-22-  // and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-142-        // now that the simple mustache is resolved, we need to
/src/dist/amd/handlebars/compiler/compiler.js:143:        // evaluate it by executing `blockHelperMissing`
/src/dist/amd/handlebars/compiler/compiler.js-144-        this.opcode('pushProgram', program);
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-151-        // now that the simple mustache is resolved, we need to
/src/dist/amd/handlebars/compiler/compiler.js:152:        // evaluate it by executing `blockHelperMissing`
/src/dist/amd/handlebars/compiler/compiler.js-153-        this.opcode('pushProgram', program);
##############################################
/src/dist/amd/handlebars/compiler/compiler.js-383-        if (val.type === 'SubExpression') {
/src/dist/amd/handlebars/compiler/compiler.js:384:          // SubExpressions get evaluated and passed in
/src/dist/amd/handlebars/compiler/compiler.js-385-          // in string params mode.
##############################################
/src/dist/amd/handlebars/compiler/javascript-compiler.js-406-        // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/amd/handlebars/compiler/javascript-compiler.js:407:        // is implemented below, so we evaluate that directly in compat mode
/src/dist/amd/handlebars/compiler/javascript-compiler.js-408-        this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/amd/handlebars/compiler/javascript-compiler.js-979-
/src/dist/amd/handlebars/compiler/javascript-compiler.js:980:      // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/amd/handlebars/compiler/javascript-compiler.js-981-      // so we need to pop them off the stack in reverse order
##############################################
/src/dist/cjs/handlebars/compiler/ast.js-127-
/src/dist/cjs/handlebars/compiler/ast.js:128:  // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/cjs/handlebars/compiler/ast.js-129-  helpers: {
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-25-// function in a context. This is necessary for mustache compatibility, which
/src/dist/cjs/handlebars/compiler/compiler.js:26:// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/cjs/handlebars/compiler/compiler.js-27-// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-147-      // now that the simple mustache is resolved, we need to
/src/dist/cjs/handlebars/compiler/compiler.js:148:      // evaluate it by executing `blockHelperMissing`
/src/dist/cjs/handlebars/compiler/compiler.js-149-      this.opcode('pushProgram', program);
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-156-      // now that the simple mustache is resolved, we need to
/src/dist/cjs/handlebars/compiler/compiler.js:157:      // evaluate it by executing `blockHelperMissing`
/src/dist/cjs/handlebars/compiler/compiler.js-158-      this.opcode('pushProgram', program);
##############################################
/src/dist/cjs/handlebars/compiler/compiler.js-388-      if (val.type === 'SubExpression') {
/src/dist/cjs/handlebars/compiler/compiler.js:389:        // SubExpressions get evaluated and passed in
/src/dist/cjs/handlebars/compiler/compiler.js-390-        // in string params mode.
##############################################
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-415-      // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/cjs/handlebars/compiler/javascript-compiler.js:416:      // is implemented below, so we evaluate that directly in compat mode
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-417-      this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-988-
/src/dist/cjs/handlebars/compiler/javascript-compiler.js:989:    // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/cjs/handlebars/compiler/javascript-compiler.js-990-    // so we need to pop them off the stack in reverse order
##############################################
/src/dist/handlebars.amd.js-901-
/src/dist/handlebars.amd.js:902:    // Public API used to evaluate derived attributes regarding AST nodes
/src/dist/handlebars.amd.js-903-    helpers: {
##############################################
/src/dist/handlebars.amd.js-2129-  // function in a context. This is necessary for mustache compatibility, which
/src/dist/handlebars.amd.js:2130:  // requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/handlebars.amd.js-2131-  // and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/handlebars.amd.js-2251-        // now that the simple mustache is resolved, we need to
/src/dist/handlebars.amd.js:2252:        // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.amd.js-2253-        this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.amd.js-2260-        // now that the simple mustache is resolved, we need to
/src/dist/handlebars.amd.js:2261:        // evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.amd.js-2262-        this.opcode('pushProgram', program);
##############################################
/src/dist/handlebars.amd.js-2492-        if (val.type === 'SubExpression') {
/src/dist/handlebars.amd.js:2493:          // SubExpressions get evaluated and passed in
/src/dist/handlebars.amd.js-2494-          // in string params mode.
##############################################
/src/dist/handlebars.amd.js-3200-        // The depthed query is expected to handle the undefined logic for the root level that
/src/dist/handlebars.amd.js:3201:        // is implemented below, so we evaluate that directly in compat mode
/src/dist/handlebars.amd.js-3202-        this.push(this.depthedLookup(parts[i++]));
##############################################
/src/dist/handlebars.amd.js-3773-
/src/dist/handlebars.amd.js:3774:      // The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/handlebars.amd.js-3775-      // so we need to pop them off the stack in reverse order
##############################################
/src/dist/handlebars.min.js-153-function(a,b){"use strict";b.__esModule=!0;var c={Program:function(a,b,c,d){this.loc=d,this.type="Program",this.body=a,this.blockParams=b,this.strip=c},MustacheStatement:function(a,b,c,d,e,f){this.loc=f,this.type="MustacheStatement",this.path=a,this.params=b||[],this.hash=c,this.escaped=d,this.strip=e},BlockStatement:function(a,b,c,d,e,f,g,h,i){this.loc=i,this.type="BlockStatement",this.path=a,this.params=b||[],this.hash=c,this.program=d,this.inverse=e,this.openStrip=f,this.inverseStrip=g,this.closeStrip=h},PartialStatement:function(a,b,c,d,e){this.loc=e,this.type="PartialStatement",this.name=a,this.params=b||[],this.hash=c,this.indent="",this.strip=d},ContentStatement:function(a,b){this.loc=b,this.type="ContentStatement",this.original=this.value=a},CommentStatement:function(a,b,c){this.loc=c,this.type="CommentStatement",this.value=a,this.strip=b},SubExpression:function(a,b,c,d){this.loc=d,this.type="SubExpression",this.path=a,this.params=b||[],this.hash=c},PathExpression:function(a,b,c,d,e){this.loc=e,this.type="PathExpression",this.data=a,this.original=d,this.parts=c,this.depth=b},StringLiteral:function(a,b){this.loc=b,this.type="StringLiteral",this.original=this.value=a},NumberLiteral:function(a,b){this.loc=b,this.type="NumberLiteral",this.original=this.value=Number(a)},BooleanLiteral:function(a,b){this.loc=b,this.type="BooleanLiteral",this.original=this.value="true"===a},UndefinedLiteral:function(a){this.loc=a,this.type="UndefinedLiteral",this.original=this.value=void 0},NullLiteral:function(a){this.loc=a,this.type="NullLiteral",this.original=this.value=null},Hash:function(a,b){this.loc=b,this.type="Hash",this.pairs=a},HashPair:function(a,b,c){this.loc=c,this.type="HashPair",this.key=a,this.value=b},
/src/dist/handlebars.min.js:154:// Public API used to evaluate derived attributes regarding AST nodes
/src/dist/handlebars.min.js-155-helpers:{
##############################################
/src/dist/handlebars.min.js-248-// function in a context. This is necessary for mustache compatibility, which
/src/dist/handlebars.min.js:249:// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/handlebars.min.js-250-// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/handlebars.min.js-259-// now that the simple mustache is resolved, we need to
/src/dist/handlebars.min.js:260:// evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.min.js-261-this.opcode("pushProgram",b),this.opcode("pushProgram",c),this.opcode("emptyHash"),this.opcode("blockValue",a.path.original)):(this.ambiguousSexpr(a,b,c),
/src/dist/handlebars.min.js-262-// now that the simple mustache is resolved, we need to
/src/dist/handlebars.min.js:263:// evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.min.js-264-this.opcode("pushProgram",b),this.opcode("pushProgram",c),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},PartialStatement:function(a){this.usePartial=!0;var b=a.params;if(b.length>1)throw new k["default"]("Unsupported number of partial arguments: "+b.length,a);b.length||b.push({type:"PathExpression",parts:[],depth:0});var c=a.name.original,d="SubExpression"===a.name.type;d&&this.accept(a.name),this.setupFullMustacheParams(a,void 0,void 0,!0);var e=a.indent||"";this.options.preventIndent&&e&&(this.opcode("appendContent",e),e=""),this.opcode("invokePartial",d,c,e),this.opcode("append")},MustacheStatement:function(a){this.SubExpression(a),// eslint-disable-line new-cap
##############################################
/src/dist/handlebars.min.js-272-if(e&&!d){var f=a.path.parts[0],g=this.options;g.knownHelpers[f]?d=!0:g.knownHelpersOnly&&(e=!1)}return d?"helper":e?"ambiguous":"simple"},pushParams:function(a){for(var b=0,c=a.length;b<c;b++)this.pushParam(a[b])},pushParam:function(a){var b=null!=a.value?a.value:a.original||"";if(this.stringParams)b.replace&&(b=b.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),a.depth&&this.addDepth(a.depth),this.opcode("getContext",a.depth||0),this.opcode("pushStringParam",b,a.type),"SubExpression"===a.type&&
/src/dist/handlebars.min.js:273:// SubExpressions get evaluated and passed in
/src/dist/handlebars.min.js-274-// in string params mode.
##############################################
/src/dist/handlebars.min.js-368-// The depthed query is expected to handle the undefined logic for the root level that
/src/dist/handlebars.min.js:369:// is implemented below, so we evaluate that directly in compat mode
/src/dist/handlebars.min.js-370-this.push(this.depthedLookup(a[d++])),this.resolvePath("context",a,d,b)},
##############################################
/src/dist/handlebars.min.js-501-(j||i)&&(d.fn=j||"this.noop",d.inverse=i||"this.noop");for(
/src/dist/handlebars.min.js:502:// The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/handlebars.min.js-503-// so we need to pop them off the stack in reverse order
##############################################
/src/dist/handlebars.amd.min.js-88-var k=i(d),l=i(e),m=i(h),n=j();n.create=j,m["default"](n),n["default"]=n,b.exports=n}),define("handlebars/compiler/ast",["exports","module"],function(a,b){"use strict";var c={Program:function(a,b,c,d){this.loc=d,this.type="Program",this.body=a,this.blockParams=b,this.strip=c},MustacheStatement:function(a,b,c,d,e,f){this.loc=f,this.type="MustacheStatement",this.path=a,this.params=b||[],this.hash=c,this.escaped=d,this.strip=e},BlockStatement:function(a,b,c,d,e,f,g,h,i){this.loc=i,this.type="BlockStatement",this.path=a,this.params=b||[],this.hash=c,this.program=d,this.inverse=e,this.openStrip=f,this.inverseStrip=g,this.closeStrip=h},PartialStatement:function(a,b,c,d,e){this.loc=e,this.type="PartialStatement",this.name=a,this.params=b||[],this.hash=c,this.indent="",this.strip=d},ContentStatement:function(a,b){this.loc=b,this.type="ContentStatement",this.original=this.value=a},CommentStatement:function(a,b,c){this.loc=c,this.type="CommentStatement",this.value=a,this.strip=b},SubExpression:function(a,b,c,d){this.loc=d,this.type="SubExpression",this.path=a,this.params=b||[],this.hash=c},PathExpression:function(a,b,c,d,e){this.loc=e,this.type="PathExpression",this.data=a,this.original=d,this.parts=c,this.depth=b},StringLiteral:function(a,b){this.loc=b,this.type="StringLiteral",this.original=this.value=a},NumberLiteral:function(a,b){this.loc=b,this.type="NumberLiteral",this.original=this.value=Number(a)},BooleanLiteral:function(a,b){this.loc=b,this.type="BooleanLiteral",this.original=this.value="true"===a},UndefinedLiteral:function(a){this.loc=a,this.type="UndefinedLiteral",this.original=this.value=void 0},NullLiteral:function(a){this.loc=a,this.type="NullLiteral",this.original=this.value=null},Hash:function(a,b){this.loc=b,this.type="Hash",this.pairs=a},HashPair:function(a,b,c){this.loc=c,this.type="HashPair",this.key=a,this.value=b},
/src/dist/handlebars.amd.min.js:89:// Public API used to evaluate derived attributes regarding AST nodes
/src/dist/handlebars.amd.min.js-90-helpers:{
##############################################
/src/dist/handlebars.amd.min.js-171-// function in a context. This is necessary for mustache compatibility, which
/src/dist/handlebars.amd.min.js:172:// requires that context functions in blocks are evaluated by blockHelperMissing,
/src/dist/handlebars.amd.min.js-173-// and then proceed as if the resulting value was provided to blockHelperMissing.
##############################################
/src/dist/handlebars.amd.min.js-182-// now that the simple mustache is resolved, we need to
/src/dist/handlebars.amd.min.js:183:// evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.amd.min.js-184-this.opcode("pushProgram",b),this.opcode("pushProgram",c),this.opcode("emptyHash"),this.opcode("blockValue",a.path.original)):(this.ambiguousSexpr(a,b,c),
/src/dist/handlebars.amd.min.js-185-// now that the simple mustache is resolved, we need to
/src/dist/handlebars.amd.min.js:186:// evaluate it by executing `blockHelperMissing`
/src/dist/handlebars.amd.min.js-187-this.opcode("pushProgram",b),this.opcode("pushProgram",c),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},PartialStatement:function(a){this.usePartial=!0;var b=a.params;if(b.length>1)throw new k["default"]("Unsupported number of partial arguments: "+b.length,a);b.length||b.push({type:"PathExpression",parts:[],depth:0});var c=a.name.original,d="SubExpression"===a.name.type;d&&this.accept(a.name),this.setupFullMustacheParams(a,void 0,void 0,!0);var e=a.indent||"";this.options.preventIndent&&e&&(this.opcode("appendContent",e),e=""),this.opcode("invokePartial",d,c,e),this.opcode("append")},MustacheStatement:function(a){this.SubExpression(a),// eslint-disable-line new-cap
##############################################
/src/dist/handlebars.amd.min.js-195-if(e&&!d){var f=a.path.parts[0],g=this.options;g.knownHelpers[f]?d=!0:g.knownHelpersOnly&&(e=!1)}return d?"helper":e?"ambiguous":"simple"},pushParams:function(a){for(var b=0,c=a.length;b<c;b++)this.pushParam(a[b])},pushParam:function(a){var b=null!=a.value?a.value:a.original||"";if(this.stringParams)b.replace&&(b=b.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),a.depth&&this.addDepth(a.depth),this.opcode("getContext",a.depth||0),this.opcode("pushStringParam",b,a.type),"SubExpression"===a.type&&
/src/dist/handlebars.amd.min.js:196:// SubExpressions get evaluated and passed in
/src/dist/handlebars.amd.min.js-197-// in string params mode.
##############################################
/src/dist/handlebars.amd.min.js-297-// The depthed query is expected to handle the undefined logic for the root level that
/src/dist/handlebars.amd.min.js:298:// is implemented below, so we evaluate that directly in compat mode
/src/dist/handlebars.amd.min.js-299-this.push(this.depthedLookup(a[d++])),this.resolvePath("context",a,d,b)},
##############################################
/src/dist/handlebars.amd.min.js-430-(j||i)&&(d.fn=j||"this.noop",d.inverse=i||"this.noop");for(
/src/dist/handlebars.amd.min.js:431:// The parameters go on to the stack in order (making sure that they are evaluated in order)
/src/dist/handlebars.amd.min.js-432-// so we need to pop them off the stack in reverse order
##############################################
/src/release-notes.md-13-  have been added to the list of "dangerous properties". If a property
/src/release-notes.md:14:  by that name is found and not an own-property of its parent, it will silently evaluate to undefined.
/src/release-notes.md-15-  This is done in both the compiled template and the "lookup"-helper. This will prevent
##############################################
/src/release-notes.md-39-- fix package.json of components/handlebars.js repo - 7cf753b
/src/release-notes.md:40:- Fix Travis by updating git tag retrieval - 7c3944015d30a4348ae66ec1736b752cd864d5c1
/src/release-notes.md-41-- Use istanbul/lib/cli.js instead of node_modules/.bin/istanbul - 7820b207e123babd0bda0b4871790f2ea6b36b01
##############################################
/src/release-notes.md-211-- Expose escapeExpression on the root object - 980c38c
/src/release-notes.md:212:- Remove nested function eval in blockHelperMissing - 6f22ec1
/src/release-notes.md-213-- Fix compiler program de-duping - 9e3f824
##############################################
/src/release-notes.md-455-- Optimize generated output by inlining statements where possible
/src/release-notes.md:456:- Check compiler version when evaluating templates
/src/release-notes.md-457-- Package browser dist in npm package
