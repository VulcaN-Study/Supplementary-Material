/src/src/__tests__/logger.test.ts-68-    const writable = new PassThrough();
/src/src/__tests__/logger.test.ts:69:    writable.on("data", data => sink(JSON.parse(data.toString())));
/src/src/__tests__/logger.test.ts-70-
##############################################
/src/src/__tests__/errors.test.ts-119-      const [formattedError] = formatApolloErrors([error]);
/src/src/__tests__/errors.test.ts:120:      expect(JSON.parse(JSON.stringify(formattedError)).message).toBe('Hello');
/src/src/__tests__/errors.test.ts-121-    });
##############################################
/src/src/runHttpQuery.ts-375-    try {
/src/src/runHttpQuery.ts:376:      extensions = JSON.parse(extensions);
/src/src/runHttpQuery.ts-377-    } catch (error) {
##############################################
/src/src/runHttpQuery.ts-406-      // broken clients that ship variables in a string for no good reason.
/src/src/runHttpQuery.ts:407:      variables = JSON.parse(variables);
/src/src/runHttpQuery.ts-408-    } catch (error) {
##############################################
/src/dist/runHttpQuery.js-210-        try {
/src/dist/runHttpQuery.js:211:            extensions = JSON.parse(extensions);
/src/dist/runHttpQuery.js-212-        }
##############################################
/src/dist/runHttpQuery.js-233-        try {
/src/dist/runHttpQuery.js:234:            variables = JSON.parse(variables);
/src/dist/runHttpQuery.js-235-        }
##############################################
/src/dist/requestPipeline.js-207-            try {
/src/dist/requestPipeline.js:208:                return graphql_1.parse(query, parseOptions);
/src/dist/requestPipeline.js-209-            }
##############################################
/src/dist/utils/schemaHash.js-13-    const introspectionQuery = utilities_1.getIntrospectionQuery();
/src/dist/utils/schemaHash.js:14:    const documentAST = language_1.parse(introspectionQuery);
/src/dist/utils/schemaHash.js-15-    const result = execution_1.execute(schema, documentAST);
