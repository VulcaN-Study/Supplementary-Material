{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 27,
          "line": 1
        },
        "extra": {
          "line": "Alex K. Wolfe <alexkwolfe@gmail.com>",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/.mailmap",
        "start": {
          "col": 26,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 1,
          "line": 30
        },
        "extra": {
          "line": "/test/tap/builtin-config",
          "message": "Lexical error: end of file in comment"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 1,
          "line": 30
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 17,
          "line": 2
        },
        "extra": {
          "line": "  \"ecmaVersion\": 6,",
          "message": "Syntax error"
        },
        "path": "/src/.tern-project",
        "start": {
          "col": 16,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# Authors sorted by whether or not they're me",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/AUTHORS",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 57,
          "line": 264
        },
        "extra": {
          "line": "resolve it with the package owner, please email support@npmjs.com and explain",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 56,
          "line": 264
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 3
        },
        "extra": {
          "line": "# set configurations that will be \"sticky\" on this system,",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/configure",
        "start": {
          "col": 1,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# vim: set softtabstop=2 shiftwidth=2:",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/Makefile",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 5,
          "line": 2
        },
        "extra": {
          "line": "if [ \"x$npm_config_node_gyp\" = \"x\" ]; then",
          "message": "Syntax error"
        },
        "path": "/src/bin/node-gyp-bin/node-gyp",
        "start": {
          "col": 4,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 46,
          "line": 2
        },
        "extra": {
          "line": "(set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/bin/npm",
        "start": {
          "col": 45,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 28,
          "line": 3
        },
        "extra": {
          "line": ";[\"util\",\"assert\"].forEach(function (thing) {",
          "message": "Lexical error: look_close_paren"
        },
        "path": "/src/test/common.js",
        "start": {
          "col": 27,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 11,
          "line": 2
        },
        "extra": {
          "line": "echo \"foo\"",
          "message": "Syntax error"
        },
        "path": "/src/test/disabled/change-bin-1/bin/foo",
        "start": {
          "col": 6,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 11,
          "line": 2
        },
        "extra": {
          "line": "echo \"foo\"",
          "message": "Syntax error"
        },
        "path": "/src/test/disabled/change-bin-2/bin/bar",
        "start": {
          "col": 6,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "generic_os_command_exec": {
      "files": [
        {
          "file_path": "/src/test/run.js",
          "match_lines": [
            83,
            104
          ],
          "match_position": [
            3,
            37
          ],
          "match_string": "  cmd = cmd.replace(/^npm /, npmReplace + \" \")\n\n  cmd = cmd.replace(/^node /, nodeReplace + \" \")\n\n\n\n  console.error(\"$$$$$$ cd %s; PATH=%s %s\", cwd, env.PATH, cmd)\n\n\n\n  child_process.exec(cmd, {cwd: cwd, env: env}, function (er, stdout, stderr) {\n\n    console.error(\"$$$$$$ after command\", cmd, cwd)\n\n    if (stdout) {\n\n      console.error(prefix(stdout, \" 1> \"))\n\n    }\n\n    if (stderr) {\n\n      console.error(prefix(stderr, \" 2> \"))\n\n    }\n\n\n\n    execCount ++\n\n    if (!shouldFail && !er || shouldFail && er) {\n\n      // stdout = (\"\"+stdout).trim()\n\n      console.log(\"ok \" + execCount + \" \" + cmdShow)\n\n      return cb()\n\n    } else {\n\n      console.log(\"not ok \" + execCount + \" \" + cmdShow)\n\n      cb(new Error(\"failed \"+cmdShow))"
        },
        {
          "file_path": "/src/test/run.js",
          "match_lines": [
            84,
            104
          ],
          "match_position": [
            3,
            37
          ],
          "match_string": "  cmd = cmd.replace(/^node /, nodeReplace + \" \")\n\n\n\n  console.error(\"$$$$$$ cd %s; PATH=%s %s\", cwd, env.PATH, cmd)\n\n\n\n  child_process.exec(cmd, {cwd: cwd, env: env}, function (er, stdout, stderr) {\n\n    console.error(\"$$$$$$ after command\", cmd, cwd)\n\n    if (stdout) {\n\n      console.error(prefix(stdout, \" 1> \"))\n\n    }\n\n    if (stderr) {\n\n      console.error(prefix(stderr, \" 2> \"))\n\n    }\n\n\n\n    execCount ++\n\n    if (!shouldFail && !er || shouldFail && er) {\n\n      // stdout = (\"\"+stdout).trim()\n\n      console.log(\"ok \" + execCount + \" \" + cmdShow)\n\n      return cb()\n\n    } else {\n\n      console.log(\"not ok \" + execCount + \" \" + cmdShow)\n\n      cb(new Error(\"failed \"+cmdShow))"
        }
      ],
      "metadata": {
        "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "description": "User controlled data in 'child_process.exec()' can result in Remote OS Command Execution.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/lib/xmas.js",
          "match_lines": [
            28,
            28
          ],
          "match_position": [
            29,
            40
          ],
          "match_string": "      \"\\033[\"+oc[Math.floor(Math.random()*oc.length)]+\"m\"+"
        },
        {
          "file_path": "/src/lib/xmas.js",
          "match_lines": [
            29,
            29
          ],
          "match_position": [
            20,
            31
          ],
          "match_string": "      o[Math.floor(Math.random() * o.length)]"
        },
        {
          "file_path": "/src/lib/cache/add-remote-git.js",
          "match_lines": [
            302,
            302
          ],
          "match_position": [
            24,
            50
          ],
          "match_string": "        'git-cache-' + crypto.pseudoRandomBytes(6).toString('hex'),"
        },
        {
          "file_path": "/src/lib/substack.js",
          "match_lines": [
            15,
            15
          ],
          "match_position": [
            22,
            33
          ],
          "match_string": "  var i = Math.floor(Math.random() * isms.length)"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_sha1": {
      "files": [
        {
          "file_path": "/src/lib/cache/add-remote-git.js",
          "match_lines": [
            119,
            119
          ],
          "match_position": [
            5,
            29
          ],
          "match_string": "    crypto.createHash('sha1').update(combinedURL).digest('hex').slice(0, 8)"
        },
        {
          "file_path": "/src/test/tap/locker.js",
          "match_lines": [
            37,
            37
          ],
          "match_position": [
            13,
            37
          ],
          "match_string": "      , h = crypto.createHash(\"sha1\").update(p).digest(\"hex\")"
        },
        {
          "file_path": "/src/test/tap/locker.js",
          "match_lines": [
            67,
            67
          ],
          "match_position": [
            13,
            37
          ],
          "match_string": "      , h = crypto.createHash(\"sha1\").update(p).digest(\"hex\")"
        },
        {
          "file_path": "/src/lib/utils/locker.js",
          "match_lines": [
            16,
            16
          ],
          "match_position": [
            11,
            35
          ],
          "match_string": "    , h = crypto.createHash(\"sha1\").update(p).digest(\"hex\")"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "SHA1 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_username": {
      "files": [
        {
          "file_path": "/src/test/tap/team.js",
          "match_lines": [
            66,
            66
          ],
          "match_position": [
            3,
            20
          ],
          "match_string": "  var user = 'zkat'"
        },
        {
          "file_path": "/src/test/tap/team.js",
          "match_lines": [
            83,
            83
          ],
          "match_position": [
            3,
            20
          ],
          "match_string": "  var user = 'zkat'"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/lib/cache/add-remote-git.js",
          "match_lines": [
            435,
            435
          ],
          "match_position": [
            8,
            27
          ],
          "match_string": "  if (!/^git[+:]/.test(uri)) {"
        },
        {
          "file_path": "/src/test/tap/config-malformed.js",
          "match_lines": [
            9,
            9
          ],
          "match_position": [
            17,
            71
          ],
          "match_string": "    if (!(er && /Failed parsing JSON config key email/.test(er.message))) {"
        },
        {
          "file_path": "/src/lib/install.js",
          "match_lines": [
            35,
            35
          ],
          "match_position": [
            7,
            43
          ],
          "match_string": "  if (/^https?:\\/\\//.test(opts.partialWord)) {"
        },
        {
          "file_path": "/src/lib/install.js",
          "match_lines": [
            40,
            40
          ],
          "match_position": [
            7,
            33
          ],
          "match_string": "  if (/\\//.test(opts.partialWord)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    },
    "regex_injection_dos": {
      "files": [
        {
          "file_path": "/src/lib/cache/add-named.js",
          "match_lines": [
            23,
            25
          ],
          "match_position": [
            7,
            20
          ],
          "match_string": "      err.message = err.message.replace(\n\n        new RegExp(': ' + err.pkgid.replace(/(\\W)/g, '\\\\$1') + '$'),\n\n        ': ' + name"
        }
      ],
      "metadata": {
        "cwe": "CWE-400: Uncontrolled Resource Consumption",
        "description": "User controlled data in RegExp() can make the application vulnerable to layer 7 DoS.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
