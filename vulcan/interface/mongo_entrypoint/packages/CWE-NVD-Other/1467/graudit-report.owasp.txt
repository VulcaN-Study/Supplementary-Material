/src/src/browser/InAppBrowserProxy.js-34-        try {
/src/src/browser/InAppBrowserProxy.js:35:            callback({ type: 'loaderror', url: this.contentWindow.location.href }, {keepCallback: true}); // eslint-disable-line standard/no-callback-literal
/src/src/browser/InAppBrowserProxy.js-36-        } catch (err) {
##############################################
/src/src/browser/InAppBrowserProxy.js-43-        try {
/src/src/browser/InAppBrowserProxy.js:44:            callback({ type: 'loadstart', url: this.contentWindow.location.href }, {keepCallback: true}); // eslint-disable-line standard/no-callback-literal
/src/src/browser/InAppBrowserProxy.js-45-        } catch (err) {
##############################################
/src/src/browser/InAppBrowserProxy.js-52-        try {
/src/src/browser/InAppBrowserProxy.js:53:            callback({ type: 'loadstop', url: this.contentWindow.location.href }, {keepCallback: true}); // eslint-disable-line standard/no-callback-literal
/src/src/browser/InAppBrowserProxy.js-54-        } catch (err) {
##############################################
/src/src/browser/InAppBrowserProxy.js-89-        if (target === '_self' || !target) {
/src/src/browser/InAppBrowserProxy.js:90:            window.location = strUrl;
/src/src/browser/InAppBrowserProxy.js-91-        } else if (target === '_system') {
/src/src/browser/InAppBrowserProxy.js:92:            modulemapper.getOriginalSymbol(window, 'window.open').call(window, strUrl, '_blank');
/src/src/browser/InAppBrowserProxy.js-93-        } else {
##############################################
/src/src/browser/InAppBrowserProxy.js-95-            if (!browserWrap) {
/src/src/browser/InAppBrowserProxy.js:96:                browserWrap = document.createElement('div');
/src/src/browser/InAppBrowserProxy.js-97-                browserWrap.style.position = 'absolute';
##############################################
/src/src/browser/InAppBrowserProxy.js-112-
/src/src/browser/InAppBrowserProxy.js:113:                document.body.appendChild(browserWrap);
/src/src/browser/InAppBrowserProxy.js-114-            }
##############################################
/src/src/browser/InAppBrowserProxy.js-119-
/src/src/browser/InAppBrowserProxy.js:120:            popup = document.createElement('iframe');
/src/src/browser/InAppBrowserProxy.js-121-            popup.style.borderWidth = '0px';
##############################################
/src/src/browser/InAppBrowserProxy.js-129-
/src/src/browser/InAppBrowserProxy.js:130:                navigationButtonsDiv = document.createElement('div');
/src/src/browser/InAppBrowserProxy.js-131-                navigationButtonsDiv.style.height = '60px';
##############################################
/src/src/browser/InAppBrowserProxy.js-137-
/src/src/browser/InAppBrowserProxy.js:138:                navigationButtonsDivInner = document.createElement('div');
/src/src/browser/InAppBrowserProxy.js-139-                navigationButtonsDivInner.style.paddingTop = '10px';
##############################################
/src/src/browser/InAppBrowserProxy.js-148-
/src/src/browser/InAppBrowserProxy.js:149:                backButton = document.createElement('button');
/src/src/browser/InAppBrowserProxy.js-150-                backButton.style.width = '40px';
##############################################
/src/src/browser/InAppBrowserProxy.js-158-
/src/src/browser/InAppBrowserProxy.js:159:                forwardButton = document.createElement('button');
/src/src/browser/InAppBrowserProxy.js-160-                forwardButton.style.marginLeft = '20px';
##############################################
/src/src/browser/InAppBrowserProxy.js-169-
/src/src/browser/InAppBrowserProxy.js:170:                closeButton = document.createElement('button');
/src/src/browser/InAppBrowserProxy.js-171-                closeButton.style.marginLeft = '20px';
##############################################
/src/src/browser/InAppBrowserProxy.js-209-            try {
/src/src/browser/InAppBrowserProxy.js:210:                popup.contentWindow.eval(code);
/src/src/browser/InAppBrowserProxy.js-211-                if (hasCallback) {
##############################################
/src/src/ios/CDVInAppBrowser.m-332-    if ((command.callbackId != nil) && ![command.callbackId isEqualToString:@"INVALID"]) {
/src/src/ios/CDVInAppBrowser.m:333:        jsWrapper = [NSString stringWithFormat:@"_cdvIframeBridge.src='gap-iab://%@/'+encodeURIComponent(JSON.stringify([eval(%%@)]));", command.callbackId];
/src/src/ios/CDVInAppBrowser.m-334-    }
##############################################
/src/src/ios/CDVInAppBrowser.m-958-    // More info at https://issues.apache.org/jira/browse/CB-2225
/src/src/ios/CDVInAppBrowser.m:959:    BOOL isPDF = [@"true" isEqualToString :[theWebView stringByEvaluatingJavaScriptFromString:@"document.body==null"]];
/src/src/ios/CDVInAppBrowser.m-960-    if (isPDF) {
##############################################
/src/src/windows/InAppBrowserProxy.js-106-                // Reset body overflow style to initial value
/src/src/windows/InAppBrowserProxy.js:107:                document.body.style.msOverflowStyle = bodyOverflowStyle;
/src/src/windows/InAppBrowserProxy.js-108-                browserWrap = null;
##############################################
/src/src/windows/InAppBrowserProxy.js-140-            } else if (target === '_self' || !target) {
/src/src/windows/InAppBrowserProxy.js:141:                window.location = strUrl;
/src/src/windows/InAppBrowserProxy.js-142-            } else {
##############################################
/src/src/windows/InAppBrowserProxy.js-144-                if (!browserWrap) {
/src/src/windows/InAppBrowserProxy.js:145:                    var browserWrapStyle = document.createElement('link');
/src/src/windows/InAppBrowserProxy.js-146-                    browserWrapStyle.rel = 'stylesheet';
##############################################
/src/src/windows/InAppBrowserProxy.js-151-
/src/src/windows/InAppBrowserProxy.js:152:                    browserWrap = document.createElement('div');
/src/src/windows/InAppBrowserProxy.js-153-                    browserWrap.className = 'inAppBrowserWrap';
##############################################
/src/src/windows/InAppBrowserProxy.js-159-                    // Save body overflow style to be able to reset it back later
/src/src/windows/InAppBrowserProxy.js:160:                    bodyOverflowStyle = document.body.style.msOverflowStyle;
/src/src/windows/InAppBrowserProxy.js-161-
##############################################
/src/src/windows/InAppBrowserProxy.js-167-
/src/src/windows/InAppBrowserProxy.js:168:                    document.body.appendChild(browserWrap);
/src/src/windows/InAppBrowserProxy.js-169-                    // Hide scrollbars for the whole body while inappbrowser's window is open
/src/src/windows/InAppBrowserProxy.js:170:                    document.body.style.msOverflowStyle = 'none';
/src/src/windows/InAppBrowserProxy.js-171-                }
##############################################
/src/src/windows/InAppBrowserProxy.js-176-
/src/src/windows/InAppBrowserProxy.js:177:                popup = document.createElement(isWebViewAvailable ? 'x-ms-webview' : 'iframe');
/src/src/windows/InAppBrowserProxy.js-178-                if (popup instanceof HTMLIFrameElement) { // eslint-disable-line no-undef
##############################################
/src/src/windows/InAppBrowserProxy.js-226-
/src/src/windows/InAppBrowserProxy.js:227:                    navigationButtonsDiv = document.createElement('div');
/src/src/windows/InAppBrowserProxy.js-228-                    navigationButtonsDiv.className = 'inappbrowser-app-bar';
##############################################
/src/src/windows/InAppBrowserProxy.js-232-
/src/src/windows/InAppBrowserProxy.js:233:                    navigationButtonsDivInner = document.createElement('div');
/src/src/windows/InAppBrowserProxy.js-234-                    navigationButtonsDivInner.className = 'inappbrowser-app-bar-inner';
##############################################
/src/src/windows/InAppBrowserProxy.js-238-
/src/src/windows/InAppBrowserProxy.js:239:                    backButton = document.createElement('div');
/src/src/windows/InAppBrowserProxy.js-240-                    backButton.innerText = 'back';
##############################################
/src/src/windows/InAppBrowserProxy.js-245-
/src/src/windows/InAppBrowserProxy.js:246:                    forwardButton = document.createElement('div');
/src/src/windows/InAppBrowserProxy.js-247-                    forwardButton.innerText = 'forward';
##############################################
/src/src/windows/InAppBrowserProxy.js-252-
/src/src/windows/InAppBrowserProxy.js:253:                    closeButton = document.createElement('div');
/src/src/windows/InAppBrowserProxy.js-254-                    closeButton.innerText = 'close';
##############################################
/src/src/windows/InAppBrowserProxy.js-290-            if (isWebViewAvailable && browserWrap && popup) {
/src/src/windows/InAppBrowserProxy.js:291:                var op = popup.invokeScriptAsync('eval', code);
/src/src/windows/InAppBrowserProxy.js-292-                op.oncomplete = function (e) {
##############################################
/src/src/windows/InAppBrowserProxy.js-318-                    Windows.Storage.FileIO.readTextAsync(file).done(function (code) {
/src/src/windows/InAppBrowserProxy.js:319:                        var op = popup.invokeScriptAsync('eval', code);
/src/src/windows/InAppBrowserProxy.js-320-                        op.oncomplete = function (e) {
##############################################
/src/src/windows/InAppBrowserProxy.js-369-    var escapedCode = JSON.stringify(cssCode);
/src/src/windows/InAppBrowserProxy.js:370:    var evalWrapper = '(function(d){var c=d.createElement(\'style\');c.innerHTML=%s;d.head.appendChild(c);})(document)'
/src/src/windows/InAppBrowserProxy.js-371-        .replace('%s', escapedCode);
/src/src/windows/InAppBrowserProxy.js-372-
/src/src/windows/InAppBrowserProxy.js:373:    var op = webView.invokeScriptAsync('eval', evalWrapper);
/src/src/windows/InAppBrowserProxy.js-374-    op.oncomplete = function () {
##############################################
/src/src/android/InAppBrowser.java-246-            if (args.getBoolean(1)) {
/src/src/android/InAppBrowser.java:247:                jsWrapper = String.format("(function(){prompt(JSON.stringify([eval(%%s)]), 'gap-iab://%s')})()", callbackContext.getCallbackId());
/src/src/android/InAppBrowser.java-248-            }
##############################################
/src/src/android/InAppBrowser.java-378-                    } else {
/src/src/android/InAppBrowser.java:379:                        inAppWebView.evaluateJavascript(finalScriptToInject, null);
/src/src/android/InAppBrowser.java-380-                    }
##############################################
/src/RELEASENOTES.md-199-* Fixing contribute link.
/src/RELEASENOTES.md:200:* [CB-9760](https://issues.apache.org/jira/browse/CB-9760) InAppBrowser: fallback to default window.open behavior on Ripple
/src/RELEASENOTES.md-201-* Close #114
##############################################
/src/RELEASENOTES.md-237-* [CB-8444](https://issues.apache.org/jira/browse/CB-8444) Add a clobber for `cordova.InAppBrowser.open` (close #80)
/src/RELEASENOTES.md:238:* [CB-8444](https://issues.apache.org/jira/browse/CB-8444) Don't clobber `window.open` - Add new symbol/clobber to access open function (`cordova.InAppBrowser.open`) - Change existing tests to use new symbol (i.e. don't rely on plugin clobber of `window.open`) - Add tests to use `window.open` via manual replace with new symbol - Update docs to deprecate plugin clobber of `window.open`
/src/RELEASENOTES.md-239-* [CB-8429](https://issues.apache.org/jira/browse/CB-8429) Incremented plugin version.
##############################################
/src/RELEASENOTES.md-358-* Add missing import for previous commit
/src/RELEASENOTES.md:359:* [CB-5756](https://issues.apache.org/jira/browse/CB-5756) Android: Use WebView.evaluateJavascript for script injection on Android 4.4+
/src/RELEASENOTES.md-360-* Didn't test on ICS or lower, getDrawable isn't supported until Jellybean
##############################################
/src/RELEASENOTES.md-366-* [CB-5756](https://issues.apache.org/jira/browse/CB-5756) Add missing import
/src/RELEASENOTES.md:367:* [CB-5756](https://issues.apache.org/jira/browse/CB-5756) Android: Use WebView.evaluateJavascript for script injection on Android 4.4+
/src/RELEASENOTES.md-368-* Delete stale test/ directory
##############################################
/src/RELEASENOTES.md-509-* Fixing contribute link.
/src/RELEASENOTES.md:510:* [CB-9760](https://issues.apache.org/jira/browse/CB-9760) InAppBrowser: fallback to default `window.open` behavior on **Ripple**
/src/RELEASENOTES.md-511-* [CB-9378](https://issues.apache.org/jira/browse/CB-9378) Fix InAppBrowser not taking whole screen on **Windows**
##############################################
/src/RELEASENOTES.md-541-* [CB-8444](https://issues.apache.org/jira/browse/CB-8444) Add a clobber for `cordova.InAppBrowser.open` (close #80)
/src/RELEASENOTES.md:542:* [CB-8444](https://issues.apache.org/jira/browse/CB-8444) Don't clobber `window.open` - Add new symbol/clobber to access open function (`cordova.InAppBrowser.open`) - Change existing tests to use new symbol (i.e. don't rely on plugin clobber of `window.open`) - Add tests to use `window.open` via manual replace with new symbol - Update docs to deprecate plugin clobber of `window.open`
/src/RELEASENOTES.md-543-
##############################################
/src/RELEASENOTES.md-634-### 0.3.1 (Feb 05, 2014)
/src/RELEASENOTES.md:635:* [CB-5756](https://issues.apache.org/jira/browse/CB-5756): Android: Use WebView.evaluateJavascript for script injection on Android 4.4+
/src/RELEASENOTES.md-636-* Didn't test on ICS or lower, getDrawable isn't supported until Jellybean
##############################################
/src/RELEASENOTES.md-638-* Adding drawables to the inAppBrowser.  This doesn't look quite right, but it's a HUGE improvement over the previous settings
/src/RELEASENOTES.md:639:* [CB-5756](https://issues.apache.org/jira/browse/CB-5756): Android: Use WebView.evaluateJavascript for script injection on Android 4.4+
/src/RELEASENOTES.md-640-* Remove alive from InAppBrowser.js since it didn't catch the case where the browser is closed by the user.
##############################################
/src/README.md-38-The `cordova.InAppBrowser.open()` function is defined to be a drop-in replacement
/src/README.md:39:for the `window.open()` function.  Existing `window.open()` calls can use the
/src/README.md:40:InAppBrowser window, by replacing window.open:
/src/README.md-41-
/src/README.md:42:    window.open = cordova.InAppBrowser.open;
/src/README.md-43-
##############################################
/src/README.md-52-
/src/README.md:53:For backwards compatibility, this plugin also hooks `window.open`.
/src/README.md:54:However, the plugin-installed hook of `window.open` can have unintended side
/src/README.md-55-effects (especially if this plugin is included only as a dependency of another
/src/README.md:56:plugin).  The hook of `window.open` will be removed in a future major release.
/src/README.md-57-Until the hook is removed from the plugin, apps can manually restore the default
##############################################
/src/README.md-59-
/src/README.md:60:    delete window.open // Reverts the call back to its prototype's default
/src/README.md-61-
/src/README.md:62:Although `window.open` is in the global scope, InAppBrowser is not available until after the `deviceready` event.
/src/README.md-63-
##############################################
/src/README.md-65-    function onDeviceReady() {
/src/README.md:66:        console.log("window.open works well");
/src/README.md-67-    }
##############################################
/src/README.md-77-If you want all page loads in your app to go through the InAppBrowser, you can
/src/README.md:78:simply hook `window.open` during initialization.  For example:
/src/README.md-79-
##############################################
/src/README.md-81-    function onDeviceReady() {
/src/README.md:82:        window.open = cordova.InAppBrowser.open;
/src/README.md-83-    }
##############################################
/src/README.md-425-      the return value of the last statement, or the last expression
/src/README.md:426:      evaluated.
/src/README.md-427-
##############################################
/src/plugin.xml-39-            <clobbers target="cordova.InAppBrowser.open" />
/src/plugin.xml:40:            <clobbers target="window.open" />
/src/plugin.xml-41-        </js-module>
##############################################
/src/plugin.xml-73-            <clobbers target="cordova.InAppBrowser.open" />
/src/plugin.xml:74:            <clobbers target="window.open" />
/src/plugin.xml-75-        </js-module>
##############################################
/src/plugin.xml-91-            <clobbers target="cordova.InAppBrowser.open" />
/src/plugin.xml:92:            <clobbers target="window.open" />
/src/plugin.xml-93-        </js-module>
##############################################
/src/plugin.xml-107-            <clobbers target="cordova.InAppBrowser.open" />
/src/plugin.xml:108:            <clobbers target="window.open" />
/src/plugin.xml-109-        </js-module>
##############################################
/src/plugin.xml-119-            <clobbers target="cordova.InAppBrowser.open" />
/src/plugin.xml:120:            <clobbers target="window.open" />
/src/plugin.xml-121-        </js-module>
##############################################
/src/types/index.d.ts-48-/**
/src/types/index.d.ts:49: * The object returned from a call to window.open.
/src/types/index.d.ts-50- * NOTE: The InAppBrowser window behaves like a standard web browser, and can't access Cordova APIs.
##############################################
/src/types/index.d.ts-184-     *                  For multi-line scripts, this is the return value of the last statement,
/src/types/index.d.ts:185:     *                  or the last expression evaluated.
/src/types/index.d.ts-186-     */
##############################################
/src/types/index.d.ts-194-     *                  For multi-line scripts, this is the return value of the last statement,
/src/types/index.d.ts:195:     *                  or the last expression evaluated.
/src/types/index.d.ts-196-     */
##############################################
/src/tests/resources/inject.html-41-      updateUserAgent();
/src/tests/resources/inject.html:42:      window.setInterval(updateUserAgent, 1500);
/src/tests/resources/inject.html-43-  </script>
##############################################
/src/tests/resources/local.html-43-        You have successfully loaded a local URL:
/src/tests/resources/local.html:44:        <script>document.write(location.href)</script>
/src/tests/resources/local.html-45-    </div>
##############################################
/src/tests/resources/local.html-64-      updateUserAgent();
/src/tests/resources/local.html:65:      window.setInterval(updateUserAgent, 1500);
/src/tests/resources/local.html-66-  </script>
##############################################
/src/tests/tests.js-27-
/src/tests/tests.js:28:window.alert = window.alert || navigator.notification.alert;
/src/tests/tests.js-29-if (isWindows && navigator && navigator.notification && navigator.notification.alert) {
/src/tests/tests.js:30:    // window.alert is defined but not functional on UWP
/src/tests/tests.js:31:    window.alert = navigator.notification.alert;
/src/tests/tests.js-32-}
##############################################
/src/tests/tests.js-182-        if (useWindowOpen) {
/src/tests/tests.js:183:            console.log('Use window.open() for url');
/src/tests/tests.js:184:            iab = window.open(url, target, params, callbacks);
/src/tests/tests.js-185-        } else {
##############################################
/src/tests/tests.js-234-    function doHookOpen (url, target, params, numExpectedRedirects) {
/src/tests/tests.js:235:        var originalFunc = window.open;
/src/tests/tests.js-236-        var wasClobbered = window.hasOwnProperty('open');
/src/tests/tests.js:237:        window.open = cordova.InAppBrowser.open;
/src/tests/tests.js-238-
##############################################
/src/tests/tests.js-242-            if (wasClobbered) {
/src/tests/tests.js:243:                window.open = originalFunc;
/src/tests/tests.js-244-            } else {
/src/tests/tests.js-245-                console.log('just delete, to restore open from prototype');
/src/tests/tests.js:246:                delete window.open;
/src/tests/tests.js-247-            }
##############################################
/src/tests/tests.js-339-        '<p/> <div id="openLocalHook"></div>' +
/src/tests/tests.js:340:        'Expected result: opens successfully in CordovaWebView (using hook of window.open()).' +
/src/tests/tests.js-341-        '<p/> <div id="openLocalSelf"></div>' +
##############################################
/src/tests/tests.js-359-        '<p/> <div id="openWhiteListedHook"></div>' +
/src/tests/tests.js:360:        'Expected result: open successfully in CordovaWebView to cordova.apache.org (using hook of window.open())' +
/src/tests/tests.js-361-        '<p/> <div id="openWhiteListedSelf"></div>' +
##############################################
/src/tests/tests.js-375-        '<p/> <div id="openNonWhiteListedHook"></div>' +
/src/tests/tests.js:376:        'Expected result: open successfully in InAppBrowser to apple.com (using hook of window.open()).' +
/src/tests/tests.js-377-        '<p/> <div id="openNonWhiteListedSelf"></div>' +
##############################################
/src/tests/tests.js-496-    }, 'openLocal');
/src/tests/tests.js:497:    createActionButton('target=Default (window.open)', function () {
/src/tests/tests.js-498-        doHookOpen(localhtml);
##############################################
/src/tests/tests.js-525-    }, 'openWhiteListed');
/src/tests/tests.js:526:    createActionButton('* target=Default (window.open)', function () {
/src/tests/tests.js-527-        doHookOpen('http://cordova.apache.org');
##############################################
/src/tests/tests.js-548-    }, 'openNonWhiteListed');
/src/tests/tests.js:549:    createActionButton('target=Default (window.open)', function () {
/src/tests/tests.js-550-        doHookOpen('http://www.apple.com');
##############################################
/src/CONTRIBUTING.md-48-```
/src/CONTRIBUTING.md:49:<meta http-equiv="Content-Security-Policy" content="default-src 'self' data: gap: https://ssl.gstatic.com http://cordova.apache.org http://google.co.uk https://google.co.uk 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *">
/src/CONTRIBUTING.md-50-```
##############################################
/src/doc/it/README.md-28-
/src/doc/it/README.md:29:Il `cordova.InAppBrowser.open()` funzione è definita per essere un rimpiazzo per la funzione `window.open`. Esistenti chiamate `Window` possono utilizzare la finestra di InAppBrowser, sostituendo window.open():
/src/doc/it/README.md-30-
/src/doc/it/README.md:31:    window.open = cordova.InAppBrowser.open;
/src/doc/it/README.md-32-    
##############################################
/src/doc/it/README.md-37-
/src/doc/it/README.md:38:Per indietro la compatibilità, questo plugin ganci anche `window.open`. Tuttavia, il plugin installato gancio di `window.open` può avere effetti collaterali indesiderati (soprattutto se questo plugin è incluso solo come dipendenza di un altro plugin). Il gancio di `window. open` verrà rimosso in una futura release principale. Fino a quando il gancio è rimosso dal plugin, apps può ripristinare manualmente il comportamento predefinito:
/src/doc/it/README.md-39-
/src/doc/it/README.md:40:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/it/README.md-41-    
/src/doc/it/README.md-42-
/src/doc/it/README.md:43:Sebbene `window.open` sia in ambito globale, InAppBrowser non è disponibile fino a dopo l'evento `deviceready`.
/src/doc/it/README.md-44-
##############################################
/src/doc/it/README.md-46-    function onDeviceReady() {
/src/doc/it/README.md:47:        console.log("window.open works well");
/src/doc/it/README.md-48-    }
##############################################
/src/doc/it/README.md-55-
/src/doc/it/README.md:56:Se si desidera che tutti i carichi di pagina nell'app di passare attraverso il InAppBrowser, si può semplicemente collegare `window.open` durante l'inizializzazione. Per esempio:
/src/doc/it/README.md-57-
##############################################
/src/doc/it/README.md-59-    function onDeviceReady() {
/src/doc/it/README.md:60:        window.open = cordova.InAppBrowser.open;
/src/doc/it/README.md-61-    }
##############################################
/src/doc/it/index.md-26-
/src/doc/it/index.md:27:Il `cordova.InAppBrowser.open()` funzione è definita per essere un rimpiazzo per la funzione `window.open`. Esistenti chiamate `Window` possono utilizzare la finestra di InAppBrowser, sostituendo window.open():
/src/doc/it/index.md-28-
/src/doc/it/index.md:29:    window.open = cordova.InAppBrowser.open;
/src/doc/it/index.md-30-    
##############################################
/src/doc/it/index.md-35-
/src/doc/it/index.md:36:Per indietro la compatibilità, questo plugin ganci anche `window.open`. Tuttavia, il plugin installato gancio di `window.open` può avere effetti collaterali indesiderati (soprattutto se questo plugin è incluso solo come dipendenza di un altro plugin). Il gancio di `window. open` verrà rimosso in una futura release principale. Fino a quando il gancio è rimosso dal plugin, apps può ripristinare manualmente il comportamento predefinito:
/src/doc/it/index.md-37-
/src/doc/it/index.md:38:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/it/index.md-39-    
/src/doc/it/index.md-40-
/src/doc/it/index.md:41:Sebbene `window.open` sia in ambito globale, InAppBrowser non è disponibile fino a dopo l'evento `deviceready`.
/src/doc/it/index.md-42-
##############################################
/src/doc/it/index.md-44-    function onDeviceReady() {
/src/doc/it/index.md:45:        console.log("window.open works well");
/src/doc/it/index.md-46-    }
##############################################
/src/doc/it/index.md-53-
/src/doc/it/index.md:54:Se si desidera che tutti i carichi di pagina nell'app di passare attraverso il InAppBrowser, si può semplicemente collegare `window.open` durante l'inizializzazione. Per esempio:
/src/doc/it/index.md-55-
##############################################
/src/doc/it/index.md-57-    function onDeviceReady() {
/src/doc/it/index.md:58:        window.open = cordova.InAppBrowser.open;
/src/doc/it/index.md-59-    }
##############################################
/src/doc/fr/README.md-28-
/src/doc/fr/README.md:29:Le `cordova.InAppBrowser.open()` fonction est définie pour être un remplacement rapide de la fonction `window.open()`. Les appels existants `window.open()` peuvent utiliser la fenêtre de InAppBrowser, en remplaçant window.open :
/src/doc/fr/README.md-30-
/src/doc/fr/README.md:31:    window.open = cordova.InAppBrowser.open;
/src/doc/fr/README.md-32-    
##############################################
/src/doc/fr/README.md-37-
/src/doc/fr/README.md:38:Pour vers l'arrière la compatibilité, ce plugin crochets également `window.open`. Cependant, le plugin installé crochet de `window.open` peut avoir des effets secondaires involontaires (surtout si ce plugin est inclus uniquement comme une dépendance d'un autre plugin). Le crochet de `window.open` sera supprimé dans une future version majeure. Jusqu'à ce que le crochet est supprimé de la plugin, apps peuvent restaurer manuellement le comportement par défaut :
/src/doc/fr/README.md-39-
/src/doc/fr/README.md:40:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/fr/README.md-41-    
/src/doc/fr/README.md-42-
/src/doc/fr/README.md:43:Bien que `window.open` est dans la portée globale, InAppBrowser n'est pas disponible jusqu'à ce qu'après l'événement `deviceready`.
/src/doc/fr/README.md-44-
##############################################
/src/doc/fr/README.md-46-    function onDeviceReady() {
/src/doc/fr/README.md:47:        console.log("window.open works well");
/src/doc/fr/README.md-48-    }
##############################################
/src/doc/fr/README.md-55-
/src/doc/fr/README.md:56:Si vous souhaitez que toutes les charges de la page dans votre application de passer par le InAppBrowser, vous pouvez simplement accrocher `window.open` pendant l'initialisation. Par exemple :
/src/doc/fr/README.md-57-
##############################################
/src/doc/fr/README.md-59-    function onDeviceReady() {
/src/doc/fr/README.md:60:        window.open = cordova.InAppBrowser.open;
/src/doc/fr/README.md-61-    }
##############################################
/src/doc/fr/index.md-26-
/src/doc/fr/index.md:27:Le `cordova.InAppBrowser.open()` fonction est définie pour être un remplacement rapide de la fonction `window.open()`. Les appels existants `window.open()` peuvent utiliser la fenêtre de InAppBrowser, en remplaçant window.open :
/src/doc/fr/index.md-28-
/src/doc/fr/index.md:29:    window.open = cordova.InAppBrowser.open;
/src/doc/fr/index.md-30-    
##############################################
/src/doc/fr/index.md-35-
/src/doc/fr/index.md:36:Pour vers l'arrière la compatibilité, ce plugin crochets également `window.open`. Cependant, le plugin installé crochet de `window.open` peut avoir des effets secondaires involontaires (surtout si ce plugin est inclus uniquement comme une dépendance d'un autre plugin). Le crochet de `window.open` sera supprimé dans une future version majeure. Jusqu'à ce que le crochet est supprimé de la plugin, apps peuvent restaurer manuellement le comportement par défaut :
/src/doc/fr/index.md-37-
/src/doc/fr/index.md:38:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/fr/index.md-39-    
/src/doc/fr/index.md-40-
/src/doc/fr/index.md:41:Bien que `window.open` est dans la portée globale, InAppBrowser n'est pas disponible jusqu'à ce qu'après l'événement `deviceready`.
/src/doc/fr/index.md-42-
##############################################
/src/doc/fr/index.md-44-    function onDeviceReady() {
/src/doc/fr/index.md:45:        console.log("window.open works well");
/src/doc/fr/index.md-46-    }
##############################################
/src/doc/fr/index.md-53-
/src/doc/fr/index.md:54:Si vous souhaitez que toutes les charges de la page dans votre application de passer par le InAppBrowser, vous pouvez simplement accrocher `window.open` pendant l'initialisation. Par exemple :
/src/doc/fr/index.md-55-
##############################################
/src/doc/fr/index.md-57-    function onDeviceReady() {
/src/doc/fr/index.md:58:        window.open = cordova.InAppBrowser.open;
/src/doc/fr/index.md-59-    }
##############################################
/src/doc/de/README.md-28-
/src/doc/de/README.md:29:Die `cordova.InAppBrowser.open()` Funktion ist definiert als Ersatz für die `window.open()` Funktion. InAppBrowser Fenster, können vorhandene `window.open()` Aufrufe durch window.open ersetzen:
/src/doc/de/README.md-30-
/src/doc/de/README.md:31:    window.open = cordova.InAppBrowser.open;
/src/doc/de/README.md-32-    
##############################################
/src/doc/de/README.md-37-
/src/doc/de/README.md:38:Für rückwärts Kompatibilität, dieses Plugin auch `window.open` Haken. Jedoch kann der Plugin installiert Haken der `window.open` haben unbeabsichtigte Nebenwirkungen (vor allem, wenn dieses Plugin nur als eine Abhängigkeit von einem anderen Plugin enthalten ist). Der Haken der `window.open` wird in einer zukünftigen Version entfernt. Bis der Haken aus dem Plugin entfernt wird, können die Vorgabe von apps manuell wiederherstellen:
/src/doc/de/README.md-39-
/src/doc/de/README.md:40:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/de/README.md-41-    
/src/doc/de/README.md-42-
/src/doc/de/README.md:43:`window.open` im globalen Gültigkeitsbereich ist zwar InAppBrowser nicht verfügbar bis nach dem `deviceready`-Ereignis.
/src/doc/de/README.md-44-
##############################################
/src/doc/de/README.md-46-    function onDeviceReady() {
/src/doc/de/README.md:47:        console.log("window.open works well");
/src/doc/de/README.md-48-    }
##############################################
/src/doc/de/README.md-55-
/src/doc/de/README.md:56:Wenn Sie alle Seite Lasten in Ihrer Anwendung durch die InAppBrowser gehen möchten, können Sie einfach `window.open` während der Initialisierung Haken. Zum Beispiel:
/src/doc/de/README.md-57-
##############################################
/src/doc/de/README.md-59-    function onDeviceReady() {
/src/doc/de/README.md:60:        window.open = cordova.InAppBrowser.open;
/src/doc/de/README.md-61-    }
##############################################
/src/doc/de/index.md-26-
/src/doc/de/index.md:27:Die `cordova.InAppBrowser.open()` Funktion ist definiert als Ersatz für die `window.open()` Funktion. InAppBrowser Fenster, können vorhandene `window.open()` Aufrufe durch window.open ersetzen:
/src/doc/de/index.md-28-
/src/doc/de/index.md:29:    window.open = cordova.InAppBrowser.open;
/src/doc/de/index.md-30-    
##############################################
/src/doc/de/index.md-35-
/src/doc/de/index.md:36:Für rückwärts Kompatibilität, dieses Plugin auch `window.open` Haken. Jedoch kann der Plugin installiert Haken der `window.open` haben unbeabsichtigte Nebenwirkungen (vor allem, wenn dieses Plugin nur als eine Abhängigkeit von einem anderen Plugin enthalten ist). Der Haken der `window.open` wird in einer zukünftigen Version entfernt. Bis der Haken aus dem Plugin entfernt wird, können die Vorgabe von apps manuell wiederherstellen:
/src/doc/de/index.md-37-
/src/doc/de/index.md:38:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/de/index.md-39-    
/src/doc/de/index.md-40-
/src/doc/de/index.md:41:`window.open` im globalen Gültigkeitsbereich ist zwar InAppBrowser nicht verfügbar bis nach dem `deviceready`-Ereignis.
/src/doc/de/index.md-42-
##############################################
/src/doc/de/index.md-44-    function onDeviceReady() {
/src/doc/de/index.md:45:        console.log("window.open works well");
/src/doc/de/index.md-46-    }
##############################################
/src/doc/de/index.md-53-
/src/doc/de/index.md:54:Wenn Sie alle Seite Lasten in Ihrer Anwendung durch die InAppBrowser gehen möchten, können Sie einfach `window.open` während der Initialisierung Haken. Zum Beispiel:
/src/doc/de/index.md-55-
##############################################
/src/doc/de/index.md-57-    function onDeviceReady() {
/src/doc/de/index.md:58:        window.open = cordova.InAppBrowser.open;
/src/doc/de/index.md-59-    }
##############################################
/src/doc/es/README.md-28-
/src/doc/es/README.md:29:El `cordova.InAppBrowser.open()` función se define como un reemplazo de sobreponer para la función `window.Open ()`. Llamadas existentes `window.Open ()` pueden utilizar la ventana InAppBrowser, mediante la sustitución de window.open:
/src/doc/es/README.md-30-
/src/doc/es/README.md:31:    window.open = cordova.InAppBrowser.open;
/src/doc/es/README.md-32-    
##############################################
/src/doc/es/README.md-37-
/src/doc/es/README.md:38:Para atrás compatibilidad, este plugin también ganchos `window.open`. Sin embargo, el gancho de `window.open` plugin instalado puede tener efectos secundarios no deseados (especialmente si este plugin está incluido únicamente como una dependencia de otro plugin). El gancho de `window.open` se quitará en una versión futura de principal. Hasta que el gancho se ha extraído el plugin, aplicaciones pueden restaurar manualmente el comportamiento por defecto:
/src/doc/es/README.md-39-
/src/doc/es/README.md:40:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/es/README.md-41-    
/src/doc/es/README.md-42-
/src/doc/es/README.md:43:Aunque `window.open` es en el ámbito global, InAppBrowser no está disponible hasta después del evento `deviceready`.
/src/doc/es/README.md-44-
##############################################
/src/doc/es/README.md-46-    function onDeviceReady() {
/src/doc/es/README.md:47:        console.log("window.open works well");
/src/doc/es/README.md-48-    }
##############################################
/src/doc/es/README.md-55-
/src/doc/es/README.md:56:Si quieres todas las cargas de página en su aplicación para ir a través de la InAppBrowser, simplemente puedes conectar `window.open` durante la inicialización. Por ejemplo:
/src/doc/es/README.md-57-
##############################################
/src/doc/es/README.md-59-    function onDeviceReady() {
/src/doc/es/README.md:60:        window.open = cordova.InAppBrowser.open;
/src/doc/es/README.md-61-    }
##############################################
/src/doc/es/README.md-333-    
/src/doc/es/README.md:334:      * Si el script inyectado es del tipo de `code`, la devolución de llamada se ejecuta con un solo parámetro, que es el valor devuelto del guión, envuelto en una `Array`. Para scripts multilíneas, este es el valor devuelto de la última declaración, o la última expresión evaluada.
/src/doc/es/README.md-335-
##############################################
/src/doc/es/index.md-26-
/src/doc/es/index.md:27:El `cordova.InAppBrowser.open()` función se define como un reemplazo de sobreponer para la función `window.Open ()`. Llamadas existentes `window.Open ()` pueden utilizar la ventana InAppBrowser, mediante la sustitución de window.open:
/src/doc/es/index.md-28-
/src/doc/es/index.md:29:    window.open = cordova.InAppBrowser.open;
/src/doc/es/index.md-30-    
##############################################
/src/doc/es/index.md-35-
/src/doc/es/index.md:36:Para atrás compatibilidad, este plugin también ganchos `window.open`. Sin embargo, el gancho de `window.open` plugin instalado puede tener efectos secundarios no deseados (especialmente si este plugin está incluido únicamente como una dependencia de otro plugin). El gancho de `window.open` se quitará en una versión futura de principal. Hasta que el gancho se ha extraído el plugin, aplicaciones pueden restaurar manualmente el comportamiento por defecto:
/src/doc/es/index.md-37-
/src/doc/es/index.md:38:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/es/index.md-39-    
/src/doc/es/index.md-40-
/src/doc/es/index.md:41:Aunque `window.open` es en el ámbito global, InAppBrowser no está disponible hasta después del evento `deviceready`.
/src/doc/es/index.md-42-
##############################################
/src/doc/es/index.md-44-    function onDeviceReady() {
/src/doc/es/index.md:45:        console.log("window.open works well");
/src/doc/es/index.md-46-    }
##############################################
/src/doc/es/index.md-53-
/src/doc/es/index.md:54:Si quieres todas las cargas de página en su aplicación para ir a través de la InAppBrowser, simplemente puedes conectar `window.open` durante la inicialización. Por ejemplo:
/src/doc/es/index.md-55-
##############################################
/src/doc/es/index.md-57-    function onDeviceReady() {
/src/doc/es/index.md:58:        window.open = cordova.InAppBrowser.open;
/src/doc/es/index.md-59-    }
##############################################
/src/doc/es/index.md-312-    
/src/doc/es/index.md:313:    *   Si el script inyectado es del tipo de `code`, la devolución de llamada se ejecuta con un solo parámetro, que es el valor devuelto del guión, envuelto en una `Array`. Para scripts multilíneas, este es el valor devuelto de la última declaración, o la última expresión evaluada.
/src/doc/es/index.md-314-
##############################################
/src/doc/zh/README.md-28-
/src/doc/zh/README.md:29:`cordova.InAppBrowser.open()` 函數被定義為一個臨時替代 `window.open ()` 函數。 現有 `window.open ()` 調用，可以通過替換 window.open 使用 InAppBrowser 視窗：
/src/doc/zh/README.md-30-
/src/doc/zh/README.md:31:    window.open = cordova.InAppBrowser.open;
/src/doc/zh/README.md-32-    
##############################################
/src/doc/zh/README.md-37-
/src/doc/zh/README.md:38:為向後相容性，此外掛程式還鉤 `window.open`。 然而，`window.open` 外掛程式安裝鉤子可以有副作用 （尤其是如果這個外掛程式是只列為另一個外掛程式的依賴項）。 在未來的主要發行版本中，將刪除 `window.open` 鉤。 一直至從該外掛程式鉤子後，應用程式可以手動還原預設行為：
/src/doc/zh/README.md-39-
/src/doc/zh/README.md:40:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/zh/README.md-41-    
/src/doc/zh/README.md-42-
/src/doc/zh/README.md:43:雖然 `window.open` 在全球範圍內，InAppBrowser 不可用直到 `deviceready` 事件之後。
/src/doc/zh/README.md-44-
##############################################
/src/doc/zh/README.md-46-    function onDeviceReady() {
/src/doc/zh/README.md:47:        console.log("window.open works well");
/src/doc/zh/README.md-48-    }
##############################################
/src/doc/zh/README.md-55-
/src/doc/zh/README.md:56:如果您希望所有頁面載入中您的應用程式要通過 InAppBrowser，你可以簡單地在初始化過程中鉤 `window.open`。舉個例子：
/src/doc/zh/README.md-57-
##############################################
/src/doc/zh/README.md-59-    function onDeviceReady() {
/src/doc/zh/README.md:60:        window.open = cordova.InAppBrowser.open;
/src/doc/zh/README.md-61-    }
##############################################
/src/doc/zh/index.md-26-
/src/doc/zh/index.md:27:`cordova.InAppBrowser.open()` 函數被定義為一個臨時替代 `window.open ()` 函數。 現有 `window.open ()` 調用，可以通過替換 window.open 使用 InAppBrowser 視窗：
/src/doc/zh/index.md-28-
/src/doc/zh/index.md:29:    window.open = cordova.InAppBrowser.open;
/src/doc/zh/index.md-30-    
##############################################
/src/doc/zh/index.md-35-
/src/doc/zh/index.md:36:為向後相容性，此外掛程式還鉤 `window.open`。 然而，`window.open` 外掛程式安裝鉤子可以有副作用 （尤其是如果這個外掛程式是只列為另一個外掛程式的依賴項）。 在未來的主要發行版本中，將刪除 `window.open` 鉤。 一直至從該外掛程式鉤子後，應用程式可以手動還原預設行為：
/src/doc/zh/index.md-37-
/src/doc/zh/index.md:38:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/zh/index.md-39-    
/src/doc/zh/index.md-40-
/src/doc/zh/index.md:41:雖然 `window.open` 在全球範圍內，InAppBrowser 不可用直到 `deviceready` 事件之後。
/src/doc/zh/index.md-42-
##############################################
/src/doc/zh/index.md-44-    function onDeviceReady() {
/src/doc/zh/index.md:45:        console.log("window.open works well");
/src/doc/zh/index.md-46-    }
##############################################
/src/doc/zh/index.md-53-
/src/doc/zh/index.md:54:如果您希望所有頁面載入中您的應用程式要通過 InAppBrowser，你可以簡單地在初始化過程中鉤 `window.open`。舉個例子：
/src/doc/zh/index.md-55-
##############################################
/src/doc/zh/index.md-57-    function onDeviceReady() {
/src/doc/zh/index.md:58:        window.open = cordova.InAppBrowser.open;
/src/doc/zh/index.md-59-    }
##############################################
/src/doc/ru/index.md-21-
/src/doc/ru/index.md:22:Этот плагин обеспечивает представление веб-браузера, что показывает при вызове`window.open()`.
/src/doc/ru/index.md-23-
/src/doc/ru/index.md:24:    var ref = window.open('http://apache.org', '_blank', 'location=yes');
/src/doc/ru/index.md-25-    
##############################################
/src/doc/ru/index.md-33-
/src/doc/ru/index.md:34:## window.open
/src/doc/ru/index.md-35-
##############################################
/src/doc/ru/index.md-37-
/src/doc/ru/index.md:38:    var ref = window.open(url, target, options);
/src/doc/ru/index.md-39-    
##############################################
/src/doc/ru/index.md-99-
/src/doc/ru/index.md:100:    var ref = window.open('http://apache.org', '_blank', 'location=yes');
/src/doc/ru/index.md:101:    var ref2 = window.open(encodeURI('http://ja.m.wikipedia.org/wiki/ハングル'), '_blank', 'location=yes');
/src/doc/ru/index.md-102-    
##############################################
/src/doc/ru/index.md-135-
/src/doc/ru/index.md:136:Объект, возвращаемый из вызова`window.open`.
/src/doc/ru/index.md-137-
##############################################
/src/doc/ru/index.md-184-
/src/doc/ru/index.md:185:    var ref = window.open('http://apache.org', '_blank', 'location=yes');
/src/doc/ru/index.md-186-    ref.addEventListener('loadstart', function(event) { alert(event.url); });
##############################################
/src/doc/ru/index.md-216-
/src/doc/ru/index.md:217:    var ref = window.open('http://apache.org', '_blank', 'location=yes');
/src/doc/ru/index.md-218-    var myCallback = function(event) { alert(event.url); }
##############################################
/src/doc/ru/index.md-242-
/src/doc/ru/index.md:243:    var ref = window.open('http://apache.org', '_blank', 'location=yes');
/src/doc/ru/index.md-244-    ref.close();
##############################################
/src/doc/ru/index.md-264-
/src/doc/ru/index.md:265:    var ref = window.open('http://apache.org', '_blank', 'hidden=yes');
/src/doc/ru/index.md-266-    // some time later...
##############################################
/src/doc/ru/index.md-296-
/src/doc/ru/index.md:297:    var ref = window.open('http://apache.org', '_blank', 'location=yes');
/src/doc/ru/index.md-298-    ref.addEventListener('loadstop', function() {
##############################################
/src/doc/ru/index.md-326-
/src/doc/ru/index.md:327:    var ref = window.open('http://apache.org', '_blank', 'location=yes');
/src/doc/ru/index.md-328-    ref.addEventListener('loadstop', function() {
##############################################
/src/doc/ja/README.md-28-
/src/doc/ja/README.md:29:`コルドバ。InAppBrowser.open()` `window.open()` 関数との交換を定義する関数。 既存の `window.open()` 呼び出しは、window.open を置き換えることによって InAppBrowser ウィンドウを使用できます。
/src/doc/ja/README.md-30-
/src/doc/ja/README.md:31:    window.open = cordova.InAppBrowser.open;
/src/doc/ja/README.md-32-    
##############################################
/src/doc/ja/README.md-37-
/src/doc/ja/README.md:38:後方互換性、このプラグインは、また `window.open` をフックのため。 ただし、`window.open` のプラグイン インストール フックを持つことができます意図しない副作用 （特に場合は、このプラグインは別のプラグインの依存関係としてのみ含まれています)。 `window.open` のフックは、将来のメジャー リリースで削除されます。 プラグインから、フックが削除されるまでアプリはデフォルトの動作を手動で復元できます。
/src/doc/ja/README.md-39-
/src/doc/ja/README.md:40:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/ja/README.md-41-    
/src/doc/ja/README.md-42-
/src/doc/ja/README.md:43:`window.open` はグローバル スコープでは、InAppBrowser は、`deviceready` イベントの後まで利用できません。
/src/doc/ja/README.md-44-
##############################################
/src/doc/ja/README.md-46-    function onDeviceReady() {
/src/doc/ja/README.md:47:        console.log("window.open works well");
/src/doc/ja/README.md-48-    }
##############################################
/src/doc/ja/README.md-55-
/src/doc/ja/README.md:56:InAppBrowser を通過するアプリですべてのページの読み込みをする場合は初期化中に `window.open` を単にフックできます。たとえば。
/src/doc/ja/README.md-57-
##############################################
/src/doc/ja/README.md-59-    function onDeviceReady() {
/src/doc/ja/README.md:60:        window.open = cordova.InAppBrowser.open;
/src/doc/ja/README.md-61-    }
##############################################
/src/doc/ja/index.md-26-
/src/doc/ja/index.md:27:`コルドバ。InAppBrowser.open()` `window.open()` 関数との交換を定義する関数。 既存の `window.open()` 呼び出しは、window.open を置き換えることによって InAppBrowser ウィンドウを使用できます。
/src/doc/ja/index.md-28-
/src/doc/ja/index.md:29:    window.open = cordova.InAppBrowser.open;
/src/doc/ja/index.md-30-    
##############################################
/src/doc/ja/index.md-35-
/src/doc/ja/index.md:36:後方互換性、このプラグインは、また `window.open` をフックのため。 ただし、`window.open` のプラグイン インストール フックを持つことができます意図しない副作用 （特に場合は、このプラグインは別のプラグインの依存関係としてのみ含まれています)。 `window.open` のフックは、将来のメジャー リリースで削除されます。 プラグインから、フックが削除されるまでアプリはデフォルトの動作を手動で復元できます。
/src/doc/ja/index.md-37-
/src/doc/ja/index.md:38:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/ja/index.md-39-    
/src/doc/ja/index.md-40-
/src/doc/ja/index.md:41:`window.open` はグローバル スコープでは、InAppBrowser は、`deviceready` イベントの後まで利用できません。
/src/doc/ja/index.md-42-
##############################################
/src/doc/ja/index.md-44-    function onDeviceReady() {
/src/doc/ja/index.md:45:        console.log("window.open works well");
/src/doc/ja/index.md-46-    }
##############################################
/src/doc/ja/index.md-53-
/src/doc/ja/index.md:54:InAppBrowser を通過するアプリですべてのページの読み込みをする場合は初期化中に `window.open` を単にフックできます。たとえば。
/src/doc/ja/index.md-55-
##############################################
/src/doc/ja/index.md-57-    function onDeviceReady() {
/src/doc/ja/index.md:58:        window.open = cordova.InAppBrowser.open;
/src/doc/ja/index.md-59-    }
##############################################
/src/doc/ko/README.md-28-
/src/doc/ko/README.md:29:`코르도바입니다.InAppBrowser.open()` 함수 `window.open ()` 함수에 대 한 대체품 정의 됩니다. 기존의 `window.open ()` 호출 window.open을 대체 하 여 InAppBrowser 윈도우를 사용할 수 있습니다.
/src/doc/ko/README.md-30-
/src/doc/ko/README.md:31:    window.open = cordova.InAppBrowser.open;
/src/doc/ko/README.md-32-    
##############################################
/src/doc/ko/README.md-37-
/src/doc/ko/README.md:38:대 한 뒤 호환성,이 플러그인도 `window.open` 후크. 그러나, `window.open`의 플러그인 설치 후크를 가질 수 있습니다 의도 하지 않은 부작용 (특히 경우이 플러그인이 다른 플러그인 종속성 으로만 포함). `window.open` 후크 주요 릴리스에서 제거 됩니다. 후크 플러그인에서 제거 될 때까지 애플 리 케이 션 수 있습니다 수동으로 기본 동작을 복원 하 게 됩니다.
/src/doc/ko/README.md-39-
/src/doc/ko/README.md:40:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/ko/README.md-41-    
/src/doc/ko/README.md-42-
/src/doc/ko/README.md:43:`window.open` 전역 범위에 있지만 InAppBrowser 제공 되지 않습니다 때까지 `deviceready` 이벤트 후.
/src/doc/ko/README.md-44-
##############################################
/src/doc/ko/README.md-46-    function onDeviceReady() {
/src/doc/ko/README.md:47:        console.log("window.open works well");
/src/doc/ko/README.md-48-    }
##############################################
/src/doc/ko/README.md-55-
/src/doc/ko/README.md:56:InAppBrowser를 통해가 서 당신의 애플 리 케이 션에서 모든 페이지를 로드 하려는 경우 초기화 하는 동안 `window.open` 간단 하 게 연결할 수 있습니다. 예를 들어:
/src/doc/ko/README.md-57-
##############################################
/src/doc/ko/README.md-59-    function onDeviceReady() {
/src/doc/ko/README.md:60:        window.open = cordova.InAppBrowser.open;
/src/doc/ko/README.md-61-    }
##############################################
/src/doc/ko/index.md-26-
/src/doc/ko/index.md:27:`코르도바입니다.InAppBrowser.open()` 함수 `window.open ()` 함수에 대 한 대체품 정의 됩니다. 기존의 `window.open ()` 호출 window.open을 대체 하 여 InAppBrowser 윈도우를 사용할 수 있습니다.
/src/doc/ko/index.md-28-
/src/doc/ko/index.md:29:    window.open = cordova.InAppBrowser.open;
/src/doc/ko/index.md-30-    
##############################################
/src/doc/ko/index.md-35-
/src/doc/ko/index.md:36:대 한 뒤 호환성,이 플러그인도 `window.open` 후크. 그러나, `window.open`의 플러그인 설치 후크를 가질 수 있습니다 의도 하지 않은 부작용 (특히 경우이 플러그인이 다른 플러그인 종속성 으로만 포함). `window.open` 후크 주요 릴리스에서 제거 됩니다. 후크 플러그인에서 제거 될 때까지 애플 리 케이 션 수 있습니다 수동으로 기본 동작을 복원 하 게 됩니다.
/src/doc/ko/index.md-37-
/src/doc/ko/index.md:38:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/ko/index.md-39-    
/src/doc/ko/index.md-40-
/src/doc/ko/index.md:41:`window.open` 전역 범위에 있지만 InAppBrowser 제공 되지 않습니다 때까지 `deviceready` 이벤트 후.
/src/doc/ko/index.md-42-
##############################################
/src/doc/ko/index.md-44-    function onDeviceReady() {
/src/doc/ko/index.md:45:        console.log("window.open works well");
/src/doc/ko/index.md-46-    }
##############################################
/src/doc/ko/index.md-53-
/src/doc/ko/index.md:54:InAppBrowser를 통해가 서 당신의 애플 리 케이 션에서 모든 페이지를 로드 하려는 경우 초기화 하는 동안 `window.open` 간단 하 게 연결할 수 있습니다. 예를 들어:
/src/doc/ko/index.md-55-
##############################################
/src/doc/ko/index.md-57-    function onDeviceReady() {
/src/doc/ko/index.md:58:        window.open = cordova.InAppBrowser.open;
/src/doc/ko/index.md-59-    }
##############################################
/src/doc/pl/README.md-28-
/src/doc/pl/README.md:29:`cordova.InAppBrowser.open()` funkcja jest definiowana jako zamiennik dla funkcji `window.open()`. Istniejące wywołania `window.open()` służy okno InAppBrowser, zastępując window.open:
/src/doc/pl/README.md-30-
/src/doc/pl/README.md:31:    window.open = cordova.InAppBrowser.open;
/src/doc/pl/README.md-32-    
##############################################
/src/doc/pl/README.md-37-
/src/doc/pl/README.md:38:Do tyłu zgodności, ten plugin również haki `window.open`. Jednak może mieć zainstalowane wtyczki haka `window.open` niezamierzone skutki uboczne (zwłaszcza, jeśli ten plugin jest włączone tylko jako część innej wtyczki). Hak `window.open` zostaną usunięte w przyszłej wersji głównych. Dopóki hak jest usuwany z wtyczki, aplikacje można ręcznie przywrócić domyślne zachowanie:
/src/doc/pl/README.md-39-
/src/doc/pl/README.md:40:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/pl/README.md-41-    
/src/doc/pl/README.md-42-
/src/doc/pl/README.md:43:Chociaż `window.open` w globalnym zasięgu, InAppBrowser nie jest dostępne dopiero po zdarzeniu `deviceready`.
/src/doc/pl/README.md-44-
##############################################
/src/doc/pl/README.md-46-    function onDeviceReady() {
/src/doc/pl/README.md:47:        console.log("window.open works well");
/src/doc/pl/README.md-48-    }
##############################################
/src/doc/pl/README.md-55-
/src/doc/pl/README.md:56:Jeśli chcesz wszystko stronica ładunki w swojej aplikacji, aby przejść przez InAppBrowser, można po prostu podłączyć `window.open` podczas inicjowania. Na przykład:
/src/doc/pl/README.md-57-
##############################################
/src/doc/pl/README.md-59-    function onDeviceReady() {
/src/doc/pl/README.md:60:        window.open = cordova.InAppBrowser.open;
/src/doc/pl/README.md-61-    }
##############################################
/src/doc/pl/index.md-26-
/src/doc/pl/index.md:27:`cordova.InAppBrowser.open()` funkcja jest definiowana jako zamiennik dla funkcji `window.open()`. Istniejące wywołania `window.open()` służy okno InAppBrowser, zastępując window.open:
/src/doc/pl/index.md-28-
/src/doc/pl/index.md:29:    window.open = cordova.InAppBrowser.open;
/src/doc/pl/index.md-30-    
##############################################
/src/doc/pl/index.md-35-
/src/doc/pl/index.md:36:Do tyłu zgodności, ten plugin również haki `window.open`. Jednak może mieć zainstalowane wtyczki haka `window.open` niezamierzone skutki uboczne (zwłaszcza, jeśli ten plugin jest włączone tylko jako część innej wtyczki). Hak `window.open` zostaną usunięte w przyszłej wersji głównych. Dopóki hak jest usuwany z wtyczki, aplikacje można ręcznie przywrócić domyślne zachowanie:
/src/doc/pl/index.md-37-
/src/doc/pl/index.md:38:    delete window.open // Reverts the call back to it's prototype's default
/src/doc/pl/index.md-39-    
/src/doc/pl/index.md-40-
/src/doc/pl/index.md:41:Chociaż `window.open` w globalnym zasięgu, InAppBrowser nie jest dostępne dopiero po zdarzeniu `deviceready`.
/src/doc/pl/index.md-42-
##############################################
/src/doc/pl/index.md-44-    function onDeviceReady() {
/src/doc/pl/index.md:45:        console.log("window.open works well");
/src/doc/pl/index.md-46-    }
##############################################
/src/doc/pl/index.md-53-
/src/doc/pl/index.md:54:Jeśli chcesz wszystko stronica ładunki w swojej aplikacji, aby przejść przez InAppBrowser, można po prostu podłączyć `window.open` podczas inicjowania. Na przykład:
/src/doc/pl/index.md-55-
##############################################
/src/doc/pl/index.md-57-    function onDeviceReady() {
/src/doc/pl/index.md:58:        window.open = cordova.InAppBrowser.open;
/src/doc/pl/index.md-59-    }
##############################################
/src/www/inappbrowser.js-24-    if (window.parent && !!window.parent.ripple) { // https://gist.github.com/triceam/4658021
/src/www/inappbrowser.js:25:        module.exports = window.open.bind(window); // fallback to default window.open behaviour
/src/www/inappbrowser.js-26-        return;
