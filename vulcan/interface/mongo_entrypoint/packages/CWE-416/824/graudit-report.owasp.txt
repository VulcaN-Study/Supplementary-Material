/src/README.md-21-* Create an up-to-date, automated testing environment. Run your tests directly in the latest version of Chrome using the latest JavaScript and browser features.
/src/README.md:22:* Capture a [timeline trace](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference) of your site to help diagnose performance issues.
/src/README.md-23-* Test Chrome Extensions.
##############################################
/src/README.md-114-
/src/README.md:115:**Example** - evaluate script in the context of the page
/src/README.md-116-
##############################################
/src/README.md-127-  // Get the "viewport" of the page, as reported by the page.
/src/README.md:128:  const dimensions = await page.evaluate(() => {
/src/README.md-129-    return {
##############################################
/src/README.md-147-
/src/README.md:148:See [`Page.evaluate()`](https://github.com/GoogleChrome/puppeteer/blob/v1.12.2/docs/api.md#pageevaluatepagefunction-args) for more information on `evaluate` and related methods like `evaluateOnNewDocument` and `exposeFunction`.
/src/README.md-149-
##############################################
/src/README.md-208-3. Capture console output - You can listen for the `console` event.
/src/README.md:209:   This is also handy when debugging code in `page.evaluate()`:
/src/README.md-210-
##############################################
/src/README.md-212-
/src/README.md:213:        await page.evaluate(() => console.log(`url is ${location.href}`));
/src/README.md-214-
##############################################
/src/README.md-228-
/src/README.md:229:  - Add an evaluate statement with `debugger` inside / add  `debugger` to an existing evaluate statement:
/src/README.md-230-
/src/README.md:231:    `await page.evaluate(() => {debugger;});`
/src/README.md-232-
/src/README.md:233:     The test will now stop executing in the above evaluate statement, and chromium will stop in debug mode.
/src/README.md-234-
##############################################
/src/README.md-336-- **Trusted events**: events generated by users interacting with the page, e.g. using a mouse or keyboard.
/src/README.md:337:- **Untrusted event**: events generated by Web APIs, e.g. `document.createEvent` or `element.click()` methods.
/src/README.md-338-
##############################################
/src/README.md-342-
/src/README.md:343:For automation purposes it’s important to generate trusted events. **All input events generated with Puppeteer are trusted and fire proper accompanying events.** If, for some reason, one needs an untrusted event, it’s always possible to hop into a page context with `page.evaluate` and generate a fake event:
/src/README.md-344-
/src/README.md-345-```js
/src/README.md:346:await page.evaluate(() => {
/src/README.md-347-  document.querySelector('button[type=submit]').click();
##############################################
/src/node6/lib/JSHandle.js-79-})(function*(){
/src/node6/lib/JSHandle.js:80:    const objectHandle = (yield this._context.evaluateHandle((object, propertyName) => {
/src/node6/lib/JSHandle.js-81-      const result = {__proto__: null};
##############################################
/src/node6/lib/JSHandle.js-318-})(function*(){
/src/node6/lib/JSHandle.js:319:    const error = (yield this.executionContext().evaluate(/* async */(element, pageJavascriptEnabled) => {return (fn => {
/src/node6/lib/JSHandle.js-320-  const gen = fn.call(this);
##############################################
/src/node6/lib/JSHandle.js-605-})(function*(){
/src/node6/lib/JSHandle.js:606:    (yield this.executionContext().evaluate(element => element.focus(), this));
/src/node6/lib/JSHandle.js-607-  });}
##############################################
/src/node6/lib/JSHandle.js-871-})(function*(){
/src/node6/lib/JSHandle.js:872:    const handle = (yield this.executionContext().evaluateHandle(
/src/node6/lib/JSHandle.js-873-        (element, selector) => element.querySelector(selector),
##############################################
/src/node6/lib/JSHandle.js-913-})(function*(){
/src/node6/lib/JSHandle.js:914:    const arrayHandle = (yield this.executionContext().evaluateHandle(
/src/node6/lib/JSHandle.js-915-        (element, selector) => element.querySelectorAll(selector),
##############################################
/src/node6/lib/JSHandle.js-934-   */
/src/node6/lib/JSHandle.js:935:  /* async */ $eval(selector, pageFunction, ...args) {return (fn => {
/src/node6/lib/JSHandle.js-936-  const gen = fn.call(this);
##############################################
/src/node6/lib/JSHandle.js-964-      throw new Error(`Error: failed to find element matching selector "${selector}"`);
/src/node6/lib/JSHandle.js:965:    const result = (yield this.executionContext().evaluate(pageFunction, elementHandle, ...args));
/src/node6/lib/JSHandle.js-966-    (yield elementHandle.dispose());
##############################################
/src/node6/lib/JSHandle.js-975-   */
/src/node6/lib/JSHandle.js:976:  /* async */ $$eval(selector, pageFunction, ...args) {return (fn => {
/src/node6/lib/JSHandle.js-977-  const gen = fn.call(this);
##############################################
/src/node6/lib/JSHandle.js-1002-})(function*(){
/src/node6/lib/JSHandle.js:1003:    const arrayHandle = (yield this.executionContext().evaluateHandle(
/src/node6/lib/JSHandle.js-1004-        (element, selector) => Array.from(element.querySelectorAll(selector)),
##############################################
/src/node6/lib/JSHandle.js-1007-
/src/node6/lib/JSHandle.js:1008:    const result = (yield this.executionContext().evaluate(pageFunction, arrayHandle, ...args));
/src/node6/lib/JSHandle.js-1009-    (yield arrayHandle.dispose());
##############################################
/src/node6/lib/JSHandle.js-1043-})(function*(){
/src/node6/lib/JSHandle.js:1044:    const arrayHandle = (yield this.executionContext().evaluateHandle(
/src/node6/lib/JSHandle.js-1045-        (element, expression) => {
/src/node6/lib/JSHandle.js-1046-          const document = element.ownerDocument || element;
/src/node6/lib/JSHandle.js:1047:          const iterator = document.evaluate(expression, element, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);
/src/node6/lib/JSHandle.js-1048-          const array = [];
##############################################
/src/node6/lib/JSHandle.js-1070-  isIntersectingViewport() {
/src/node6/lib/JSHandle.js:1071:    return this.executionContext().evaluate(/* async */ element => {return (fn => {
/src/node6/lib/JSHandle.js-1072-  const gen = fn.call(this);
##############################################
/src/node6/lib/ExecutionContext.js-19-
/src/node6/lib/ExecutionContext.js:20:const EVALUATION_SCRIPT_URL = '__puppeteer_evaluation_script__';
/src/node6/lib/ExecutionContext.js-21-const SOURCE_URL_REGEX = /^[\040\t]*\/\/[@#] sourceURL=\s*(\S*?)\s*$/m;
##############################################
/src/node6/lib/ExecutionContext.js-46-   */
/src/node6/lib/ExecutionContext.js:47:  /* async */ evaluate(pageFunction, ...args) {return (fn => {
/src/node6/lib/ExecutionContext.js-48-  const gen = fn.call(this);
##############################################
/src/node6/lib/ExecutionContext.js-73-})(function*(){
/src/node6/lib/ExecutionContext.js:74:    const handle = (yield this.evaluateHandle(pageFunction, ...args));
/src/node6/lib/ExecutionContext.js-75-    const result = (yield handle.jsonValue().catch(error => {
##############################################
/src/node6/lib/ExecutionContext.js-90-   */
/src/node6/lib/ExecutionContext.js:91:  /* async */ evaluateHandle(pageFunction, ...args) {return (fn => {
/src/node6/lib/ExecutionContext.js-92-  const gen = fn.call(this);
##############################################
/src/node6/lib/ExecutionContext.js-123-      const expressionWithSourceUrl = SOURCE_URL_REGEX.test(expression) ? expression : expression + '\n' + suffix;
/src/node6/lib/ExecutionContext.js:124:      const {exceptionDetails, result: remoteObject} = (yield this._client.send('Runtime.evaluate', {
/src/node6/lib/ExecutionContext.js-125-        expression: expressionWithSourceUrl,
##############################################
/src/node6/lib/ExecutionContext.js-192-        if (objectHandle._context !== this)
/src/node6/lib/ExecutionContext.js:193:          throw new Error('JSHandles can be evaluated only in the context they were created!');
/src/node6/lib/ExecutionContext.js-194-        if (objectHandle._disposed)
##############################################
/src/node6/lib/ExecutionContext.js-206-     * @param {!Error} error
/src/node6/lib/ExecutionContext.js:207:     * @return {!Protocol.Runtime.evaluateReturnValue}
/src/node6/lib/ExecutionContext.js-208-     */
##############################################
/src/node6/lib/DOMWorld.js-83-    if (this._detached)
/src/node6/lib/DOMWorld.js:84:      throw new Error(`Execution Context is not available in detached frame "${this._frame.url()}" (are you trying to evaluate?)`);
/src/node6/lib/DOMWorld.js-85-    return this._contextPromise;
##############################################
/src/node6/lib/DOMWorld.js-92-   */
/src/node6/lib/DOMWorld.js:93:  /* async */ evaluateHandle(pageFunction, ...args) {return (fn => {
/src/node6/lib/DOMWorld.js-94-  const gen = fn.call(this);
##############################################
/src/node6/lib/DOMWorld.js-120-    const context = (yield this.executionContext());
/src/node6/lib/DOMWorld.js:121:    return context.evaluateHandle(pageFunction, ...args);
/src/node6/lib/DOMWorld.js-122-  });}
##############################################
/src/node6/lib/DOMWorld.js-128-   */
/src/node6/lib/DOMWorld.js:129:  /* async */ evaluate(pageFunction, ...args) {return (fn => {
/src/node6/lib/DOMWorld.js-130-  const gen = fn.call(this);
##############################################
/src/node6/lib/DOMWorld.js-156-    const context = (yield this.executionContext());
/src/node6/lib/DOMWorld.js:157:    return context.evaluate(pageFunction, ...args);
/src/node6/lib/DOMWorld.js-158-  });}
##############################################
/src/node6/lib/DOMWorld.js-254-})(function*(){
/src/node6/lib/DOMWorld.js:255:      const document = (yield context.evaluateHandle('document'));
/src/node6/lib/DOMWorld.js-256-      return document.asElement();
##############################################
/src/node6/lib/DOMWorld.js-302-   */
/src/node6/lib/DOMWorld.js:303:  /* async */ $eval(selector, pageFunction, ...args) {return (fn => {
/src/node6/lib/DOMWorld.js-304-  const gen = fn.call(this);
##############################################
/src/node6/lib/DOMWorld.js-330-    const document = (yield this._document());
/src/node6/lib/DOMWorld.js:331:    return document.$eval(selector, pageFunction, ...args);
/src/node6/lib/DOMWorld.js-332-  });}
##############################################
/src/node6/lib/DOMWorld.js-339-   */
/src/node6/lib/DOMWorld.js:340:  /* async */ $$eval(selector, pageFunction, ...args) {return (fn => {
/src/node6/lib/DOMWorld.js-341-  const gen = fn.call(this);
##############################################
/src/node6/lib/DOMWorld.js-367-    const document = (yield this._document());
/src/node6/lib/DOMWorld.js:368:    const value = (yield document.$$eval(selector, pageFunction, ...args));
/src/node6/lib/DOMWorld.js-369-    return value;
##############################################
/src/node6/lib/DOMWorld.js-437-})(function*(){
/src/node6/lib/DOMWorld.js:438:    return (yield this.evaluate(() => {
/src/node6/lib/DOMWorld.js-439-      let retVal = '';
##############################################
/src/node6/lib/DOMWorld.js-482-    } = options;
/src/node6/lib/DOMWorld.js:483:    // We rely upon the fact that document.open() will reset frame lifecycle with "init"
/src/node6/lib/DOMWorld.js-484-    // lifecycle event. @see https://crrev.com/608658
/src/node6/lib/DOMWorld.js:485:    (yield this.evaluate(html => {
/src/node6/lib/DOMWorld.js:486:      document.open();
/src/node6/lib/DOMWorld.js:487:      document.write(html);
/src/node6/lib/DOMWorld.js:488:      document.close();
/src/node6/lib/DOMWorld.js-489-    }, html));
##############################################
/src/node6/lib/DOMWorld.js-539-        const context = (yield this.executionContext());
/src/node6/lib/DOMWorld.js:540:        return ((yield context.evaluateHandle(addScriptUrl, url, type))).asElement();
/src/node6/lib/DOMWorld.js-541-      } catch (error) {
##############################################
/src/node6/lib/DOMWorld.js-549-      const context = (yield this.executionContext());
/src/node6/lib/DOMWorld.js:550:      return ((yield context.evaluateHandle(addScriptContent, contents, type))).asElement();
/src/node6/lib/DOMWorld.js-551-    }
##############################################
/src/node6/lib/DOMWorld.js-554-      const context = (yield this.executionContext());
/src/node6/lib/DOMWorld.js:555:      return ((yield context.evaluateHandle(addScriptContent, content, type))).asElement();
/src/node6/lib/DOMWorld.js-556-    }
##############################################
/src/node6/lib/DOMWorld.js-591-})(function*(){
/src/node6/lib/DOMWorld.js:592:      const script = document.createElement('script');
/src/node6/lib/DOMWorld.js-593-      script.src = url;
##############################################
/src/node6/lib/DOMWorld.js-610-    function addScriptContent(content, type = 'text/javascript') {
/src/node6/lib/DOMWorld.js:611:      const script = document.createElement('script');
/src/node6/lib/DOMWorld.js-612-      script.type = type;
##############################################
/src/node6/lib/DOMWorld.js-661-        const context = (yield this.executionContext());
/src/node6/lib/DOMWorld.js:662:        return ((yield context.evaluateHandle(addStyleUrl, url))).asElement();
/src/node6/lib/DOMWorld.js-663-      } catch (error) {
##############################################
/src/node6/lib/DOMWorld.js-671-      const context = (yield this.executionContext());
/src/node6/lib/DOMWorld.js:672:      return ((yield context.evaluateHandle(addStyleContent, contents))).asElement();
/src/node6/lib/DOMWorld.js-673-    }
##############################################
/src/node6/lib/DOMWorld.js-676-      const context = (yield this.executionContext());
/src/node6/lib/DOMWorld.js:677:      return ((yield context.evaluateHandle(addStyleContent, content))).asElement();
/src/node6/lib/DOMWorld.js-678-    }
##############################################
/src/node6/lib/DOMWorld.js-712-})(function*(){
/src/node6/lib/DOMWorld.js:713:      const link = document.createElement('link');
/src/node6/lib/DOMWorld.js-714-      link.rel = 'stylesheet';
##############################################
/src/node6/lib/DOMWorld.js-755-})(function*(){
/src/node6/lib/DOMWorld.js:756:      const style = document.createElement('style');
/src/node6/lib/DOMWorld.js-757-      style.type = 'text/css';
/src/node6/lib/DOMWorld.js:758:      style.appendChild(document.createTextNode(content));
/src/node6/lib/DOMWorld.js-759-      const promise = new Promise((res, rej) => {
##############################################
/src/node6/lib/DOMWorld.js-885-      assert(helper.isString(value), 'Values must be strings. Found value "' + value + '" of type "' + (typeof value) + '"');
/src/node6/lib/DOMWorld.js:886:    return this.$eval(selector, (element, values) => {
/src/node6/lib/DOMWorld.js-887-      if (element.nodeName.toLowerCase() !== 'select')
##############################################
/src/node6/lib/DOMWorld.js-1037-})(function*(){
/src/node6/lib/DOMWorld.js:1038:    return this.evaluate(() => document.title);
/src/node6/lib/DOMWorld.js-1039-  });}
##############################################
/src/node6/lib/DOMWorld.js-1097-      const node = isXPath
/src/node6/lib/DOMWorld.js:1098:        ? document.evaluate(selectorOrXPath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue
/src/node6/lib/DOMWorld.js-1099-        : document.querySelector(selectorOrXPath);
##############################################
/src/node6/lib/DOMWorld.js-1198-    try {
/src/node6/lib/DOMWorld.js:1199:      success = (yield ((yield this._domWorld.executionContext())).evaluateHandle(waitForPredicatePageFunction, this._predicateBody, this._polling, this._timeout, ...this._args));
/src/node6/lib/DOMWorld.js-1200-    } catch (e) {
##############################################
/src/node6/lib/DOMWorld.js-1210-    // Ignore timeouts in pageScript - we track timeouts ourselves.
/src/node6/lib/DOMWorld.js:1211:    // If the frame's execution context has already changed, `frame.evaluate` will
/src/node6/lib/DOMWorld.js-1212-    // throw an error - ignore this predicate run altogether.
/src/node6/lib/DOMWorld.js:1213:    if (!error && (yield this._domWorld.evaluate(s => !s, success).catch(e => true))) {
/src/node6/lib/DOMWorld.js-1214-      (yield success.dispose());
##############################################
/src/node6/lib/DOMWorld.js-1222-
/src/node6/lib/DOMWorld.js:1223:    // We could have tried to evaluate in a context which was already
/src/node6/lib/DOMWorld.js-1224-    // destroyed.
##############################################
/src/node6/lib/Page.js-411-   */
/src/node6/lib/Page.js:412:  /* async */ evaluateHandle(pageFunction, ...args) {return (fn => {
/src/node6/lib/Page.js-413-  const gen = fn.call(this);
##############################################
/src/node6/lib/Page.js-439-    const context = (yield this.mainFrame().executionContext());
/src/node6/lib/Page.js:440:    return context.evaluateHandle(pageFunction, ...args);
/src/node6/lib/Page.js-441-  });}
##############################################
/src/node6/lib/Page.js-483-   */
/src/node6/lib/Page.js:484:  /* async */ $eval(selector, pageFunction, ...args) {return (fn => {
/src/node6/lib/Page.js-485-  const gen = fn.call(this);
##############################################
/src/node6/lib/Page.js-510-})(function*(){
/src/node6/lib/Page.js:511:    return this.mainFrame().$eval(selector, pageFunction, ...args);
/src/node6/lib/Page.js-512-  });}
##############################################
/src/node6/lib/Page.js-519-   */
/src/node6/lib/Page.js:520:  /* async */ $$eval(selector, pageFunction, ...args) {return (fn => {
/src/node6/lib/Page.js-521-  const gen = fn.call(this);
##############################################
/src/node6/lib/Page.js-546-})(function*(){
/src/node6/lib/Page.js:547:    return this.mainFrame().$$eval(selector, pageFunction, ...args);
/src/node6/lib/Page.js-548-  });}
##############################################
/src/node6/lib/Page.js-846-
/src/node6/lib/Page.js:847:    const expression = helper.evaluationString(addPageBinding, name);
/src/node6/lib/Page.js-848-    (yield this._client.send('Runtime.addBinding', {name: name}));
/src/node6/lib/Page.js-849-    (yield this._client.send('Page.addScriptToEvaluateOnNewDocument', {source: expression}));
/src/node6/lib/Page.js:850:    (yield Promise.all(this.frames().map(frame => frame.evaluate(expression).catch(debugError))));
/src/node6/lib/Page.js-851-
##############################################
/src/node6/lib/Page.js-1146-      const result = (yield this._pageBindings.get(name)(...args));
/src/node6/lib/Page.js:1147:      expression = helper.evaluationString(deliverResult, name, seq, result);
/src/node6/lib/Page.js-1148-    } catch (error) {
/src/node6/lib/Page.js-1149-      if (error instanceof Error)
/src/node6/lib/Page.js:1150:        expression = helper.evaluationString(deliverError, name, seq, error.message, error.stack);
/src/node6/lib/Page.js-1151-      else
/src/node6/lib/Page.js:1152:        expression = helper.evaluationString(deliverErrorValue, name, seq, error);
/src/node6/lib/Page.js-1153-    }
/src/node6/lib/Page.js:1154:    this._client.send('Runtime.evaluate', { expression, contextId: event.executionContextId }).catch(debugError);
/src/node6/lib/Page.js-1155-
##############################################
/src/node6/lib/Page.js-1827-   */
/src/node6/lib/Page.js:1828:  /* async */ evaluate(pageFunction, ...args) {return (fn => {
/src/node6/lib/Page.js-1829-  const gen = fn.call(this);
##############################################
/src/node6/lib/Page.js-1854-})(function*(){
/src/node6/lib/Page.js:1855:    return this._frameManager.mainFrame().evaluate(pageFunction, ...args);
/src/node6/lib/Page.js-1856-  });}
##############################################
/src/node6/lib/Page.js-1861-   */
/src/node6/lib/Page.js:1862:  /* async */ evaluateOnNewDocument(pageFunction, ...args) {return (fn => {
/src/node6/lib/Page.js-1863-  const gen = fn.call(this);
##############################################
/src/node6/lib/Page.js-1888-})(function*(){
/src/node6/lib/Page.js:1889:    const source = helper.evaluationString(pageFunction, ...args);
/src/node6/lib/Page.js-1890-    (yield this._client.send('Page.addScriptToEvaluateOnNewDocument', { source }));
##############################################
/src/node6/lib/FrameManager.js-589-   */
/src/node6/lib/FrameManager.js:590:  /* async */ evaluateHandle(pageFunction, ...args) {return (fn => {
/src/node6/lib/FrameManager.js-591-  const gen = fn.call(this);
##############################################
/src/node6/lib/FrameManager.js-616-})(function*(){
/src/node6/lib/FrameManager.js:617:    return this._mainWorld.evaluateHandle(pageFunction, ...args);
/src/node6/lib/FrameManager.js-618-  });}
##############################################
/src/node6/lib/FrameManager.js-624-   */
/src/node6/lib/FrameManager.js:625:  /* async */ evaluate(pageFunction, ...args) {return (fn => {
/src/node6/lib/FrameManager.js-626-  const gen = fn.call(this);
##############################################
/src/node6/lib/FrameManager.js-651-})(function*(){
/src/node6/lib/FrameManager.js:652:    return this._mainWorld.evaluate(pageFunction, ...args);
/src/node6/lib/FrameManager.js-653-  });}
##############################################
/src/node6/lib/FrameManager.js-728-   */
/src/node6/lib/FrameManager.js:729:  /* async */ $eval(selector, pageFunction, ...args) {return (fn => {
/src/node6/lib/FrameManager.js-730-  const gen = fn.call(this);
##############################################
/src/node6/lib/FrameManager.js-755-})(function*(){
/src/node6/lib/FrameManager.js:756:    return this._mainWorld.$eval(selector, pageFunction, ...args);
/src/node6/lib/FrameManager.js-757-  });}
##############################################
/src/node6/lib/FrameManager.js-764-   */
/src/node6/lib/FrameManager.js:765:  /* async */ $$eval(selector, pageFunction, ...args) {return (fn => {
/src/node6/lib/FrameManager.js-766-  const gen = fn.call(this);
##############################################
/src/node6/lib/FrameManager.js-791-})(function*(){
/src/node6/lib/FrameManager.js:792:    return this._mainWorld.$$eval(selector, pageFunction, ...args);
/src/node6/lib/FrameManager.js-793-  });}
##############################################
/src/node6/lib/helper.js-25-   */
/src/node6/lib/helper.js:26:  static evaluationString(fun, ...args) {
/src/node6/lib/helper.js-27-    if (Helper.isString(fun)) {
/src/node6/lib/helper.js:28:      assert(args.length === 0, 'Cannot evaluate a string with arguments');
/src/node6/lib/helper.js-29-      return /** @type {string} */ (fun);
##############################################
/src/node6/lib/Input.js-544-    // @see https://crbug.com/613219
/src/node6/lib/Input.js:545:    (yield this._client.send('Runtime.evaluate', {
/src/node6/lib/Input.js-546-      expression: 'new Promise(x => requestAnimationFrame(() => requestAnimationFrame(x)))',
##############################################
/src/node6/lib/Worker.js-117-   */
/src/node6/lib/Worker.js:118:  /* async */ evaluate(pageFunction, ...args) {return (fn => {
/src/node6/lib/Worker.js-119-  const gen = fn.call(this);
##############################################
/src/node6/lib/Worker.js-144-})(function*(){
/src/node6/lib/Worker.js:145:    return ((yield this._executionContextPromise)).evaluate(pageFunction, ...args);
/src/node6/lib/Worker.js-146-  });}
##############################################
/src/node6/lib/Worker.js-152-   */
/src/node6/lib/Worker.js:153:  /* async */ evaluateHandle(pageFunction, ...args) {return (fn => {
/src/node6/lib/Worker.js-154-  const gen = fn.call(this);
##############################################
/src/node6/lib/Worker.js-179-})(function*(){
/src/node6/lib/Worker.js:180:    return ((yield this._executionContextPromise)).evaluateHandle(pageFunction, ...args);
/src/node6/lib/Worker.js-181-  });}
##############################################
/src/lib/JSHandle.js-53-  async getProperty(propertyName) {
/src/lib/JSHandle.js:54:    const objectHandle = await this._context.evaluateHandle((object, propertyName) => {
/src/lib/JSHandle.js-55-      const result = {__proto__: null};
##############################################
/src/lib/JSHandle.js-162-  async _scrollIntoViewIfNeeded() {
/src/lib/JSHandle.js:163:    const error = await this.executionContext().evaluate(async(element, pageJavascriptEnabled) => {
/src/lib/JSHandle.js-164-      if (!element.isConnected)
##############################################
/src/lib/JSHandle.js-267-  async focus() {
/src/lib/JSHandle.js:268:    await this.executionContext().evaluate(element => element.focus(), this);
/src/lib/JSHandle.js-269-  }
##############################################
/src/lib/JSHandle.js-377-  async $(selector) {
/src/lib/JSHandle.js:378:    const handle = await this.executionContext().evaluateHandle(
/src/lib/JSHandle.js-379-        (element, selector) => element.querySelector(selector),
##############################################
/src/lib/JSHandle.js-393-  async $$(selector) {
/src/lib/JSHandle.js:394:    const arrayHandle = await this.executionContext().evaluateHandle(
/src/lib/JSHandle.js-395-        (element, selector) => element.querySelectorAll(selector),
##############################################
/src/lib/JSHandle.js-414-   */
/src/lib/JSHandle.js:415:  async $eval(selector, pageFunction, ...args) {
/src/lib/JSHandle.js-416-    const elementHandle = await this.$(selector);
##############################################
/src/lib/JSHandle.js-418-      throw new Error(`Error: failed to find element matching selector "${selector}"`);
/src/lib/JSHandle.js:419:    const result = await this.executionContext().evaluate(pageFunction, elementHandle, ...args);
/src/lib/JSHandle.js-420-    await elementHandle.dispose();
##############################################
/src/lib/JSHandle.js-429-   */
/src/lib/JSHandle.js:430:  async $$eval(selector, pageFunction, ...args) {
/src/lib/JSHandle.js:431:    const arrayHandle = await this.executionContext().evaluateHandle(
/src/lib/JSHandle.js-432-        (element, selector) => Array.from(element.querySelectorAll(selector)),
##############################################
/src/lib/JSHandle.js-435-
/src/lib/JSHandle.js:436:    const result = await this.executionContext().evaluate(pageFunction, arrayHandle, ...args);
/src/lib/JSHandle.js-437-    await arrayHandle.dispose();
##############################################
/src/lib/JSHandle.js-445-  async $x(expression) {
/src/lib/JSHandle.js:446:    const arrayHandle = await this.executionContext().evaluateHandle(
/src/lib/JSHandle.js-447-        (element, expression) => {
/src/lib/JSHandle.js-448-          const document = element.ownerDocument || element;
/src/lib/JSHandle.js:449:          const iterator = document.evaluate(expression, element, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);
/src/lib/JSHandle.js-450-          const array = [];
##############################################
/src/lib/JSHandle.js-472-  isIntersectingViewport() {
/src/lib/JSHandle.js:473:    return this.executionContext().evaluate(async element => {
/src/lib/JSHandle.js-474-      const visibleRatio = await new Promise(resolve => {
##############################################
/src/lib/ExecutionContext.js-19-
/src/lib/ExecutionContext.js:20:const EVALUATION_SCRIPT_URL = '__puppeteer_evaluation_script__';
/src/lib/ExecutionContext.js-21-const SOURCE_URL_REGEX = /^[\040\t]*\/\/[@#] sourceURL=\s*(\S*?)\s*$/m;
##############################################
/src/lib/ExecutionContext.js-46-   */
/src/lib/ExecutionContext.js:47:  async evaluate(pageFunction, ...args) {
/src/lib/ExecutionContext.js:48:    const handle = await this.evaluateHandle(pageFunction, ...args);
/src/lib/ExecutionContext.js-49-    const result = await handle.jsonValue().catch(error => {
##############################################
/src/lib/ExecutionContext.js-64-   */
/src/lib/ExecutionContext.js:65:  async evaluateHandle(pageFunction, ...args) {
/src/lib/ExecutionContext.js-66-    const suffix = `//# sourceURL=${EVALUATION_SCRIPT_URL}`;
##############################################
/src/lib/ExecutionContext.js-71-      const expressionWithSourceUrl = SOURCE_URL_REGEX.test(expression) ? expression : expression + '\n' + suffix;
/src/lib/ExecutionContext.js:72:      const {exceptionDetails, result: remoteObject} = await this._client.send('Runtime.evaluate', {
/src/lib/ExecutionContext.js-73-        expression: expressionWithSourceUrl,
##############################################
/src/lib/ExecutionContext.js-140-        if (objectHandle._context !== this)
/src/lib/ExecutionContext.js:141:          throw new Error('JSHandles can be evaluated only in the context they were created!');
/src/lib/ExecutionContext.js-142-        if (objectHandle._disposed)
##############################################
/src/lib/ExecutionContext.js-154-     * @param {!Error} error
/src/lib/ExecutionContext.js:155:     * @return {!Protocol.Runtime.evaluateReturnValue}
/src/lib/ExecutionContext.js-156-     */
##############################################
/src/lib/DOMWorld.js-83-    if (this._detached)
/src/lib/DOMWorld.js:84:      throw new Error(`Execution Context is not available in detached frame "${this._frame.url()}" (are you trying to evaluate?)`);
/src/lib/DOMWorld.js-85-    return this._contextPromise;
##############################################
/src/lib/DOMWorld.js-92-   */
/src/lib/DOMWorld.js:93:  async evaluateHandle(pageFunction, ...args) {
/src/lib/DOMWorld.js-94-    const context = await this.executionContext();
/src/lib/DOMWorld.js:95:    return context.evaluateHandle(pageFunction, ...args);
/src/lib/DOMWorld.js-96-  }
##############################################
/src/lib/DOMWorld.js-102-   */
/src/lib/DOMWorld.js:103:  async evaluate(pageFunction, ...args) {
/src/lib/DOMWorld.js-104-    const context = await this.executionContext();
/src/lib/DOMWorld.js:105:    return context.evaluate(pageFunction, ...args);
/src/lib/DOMWorld.js-106-  }
##############################################
/src/lib/DOMWorld.js-124-    this._documentPromise = this.executionContext().then(async context => {
/src/lib/DOMWorld.js:125:      const document = await context.evaluateHandle('document');
/src/lib/DOMWorld.js-126-      return document.asElement();
##############################################
/src/lib/DOMWorld.js-146-   */
/src/lib/DOMWorld.js:147:  async $eval(selector, pageFunction, ...args) {
/src/lib/DOMWorld.js-148-    const document = await this._document();
/src/lib/DOMWorld.js:149:    return document.$eval(selector, pageFunction, ...args);
/src/lib/DOMWorld.js-150-  }
##############################################
/src/lib/DOMWorld.js-157-   */
/src/lib/DOMWorld.js:158:  async $$eval(selector, pageFunction, ...args) {
/src/lib/DOMWorld.js-159-    const document = await this._document();
/src/lib/DOMWorld.js:160:    const value = await document.$$eval(selector, pageFunction, ...args);
/src/lib/DOMWorld.js-161-    return value;
##############################################
/src/lib/DOMWorld.js-177-  async content() {
/src/lib/DOMWorld.js:178:    return await this.evaluate(() => {
/src/lib/DOMWorld.js-179-      let retVal = '';
##############################################
/src/lib/DOMWorld.js-196-    } = options;
/src/lib/DOMWorld.js:197:    // We rely upon the fact that document.open() will reset frame lifecycle with "init"
/src/lib/DOMWorld.js-198-    // lifecycle event. @see https://crrev.com/608658
/src/lib/DOMWorld.js:199:    await this.evaluate(html => {
/src/lib/DOMWorld.js:200:      document.open();
/src/lib/DOMWorld.js:201:      document.write(html);
/src/lib/DOMWorld.js:202:      document.close();
/src/lib/DOMWorld.js-203-    }, html);
##############################################
/src/lib/DOMWorld.js-227-        const context = await this.executionContext();
/src/lib/DOMWorld.js:228:        return (await context.evaluateHandle(addScriptUrl, url, type)).asElement();
/src/lib/DOMWorld.js-229-      } catch (error) {
##############################################
/src/lib/DOMWorld.js-237-      const context = await this.executionContext();
/src/lib/DOMWorld.js:238:      return (await context.evaluateHandle(addScriptContent, contents, type)).asElement();
/src/lib/DOMWorld.js-239-    }
##############################################
/src/lib/DOMWorld.js-242-      const context = await this.executionContext();
/src/lib/DOMWorld.js:243:      return (await context.evaluateHandle(addScriptContent, content, type)).asElement();
/src/lib/DOMWorld.js-244-    }
##############################################
/src/lib/DOMWorld.js-253-    async function addScriptUrl(url, type) {
/src/lib/DOMWorld.js:254:      const script = document.createElement('script');
/src/lib/DOMWorld.js-255-      script.src = url;
##############################################
/src/lib/DOMWorld.js-272-    function addScriptContent(content, type = 'text/javascript') {
/src/lib/DOMWorld.js:273:      const script = document.createElement('script');
/src/lib/DOMWorld.js-274-      script.type = type;
##############################################
/src/lib/DOMWorld.js-297-        const context = await this.executionContext();
/src/lib/DOMWorld.js:298:        return (await context.evaluateHandle(addStyleUrl, url)).asElement();
/src/lib/DOMWorld.js-299-      } catch (error) {
##############################################
/src/lib/DOMWorld.js-307-      const context = await this.executionContext();
/src/lib/DOMWorld.js:308:      return (await context.evaluateHandle(addStyleContent, contents)).asElement();
/src/lib/DOMWorld.js-309-    }
##############################################
/src/lib/DOMWorld.js-312-      const context = await this.executionContext();
/src/lib/DOMWorld.js:313:      return (await context.evaluateHandle(addStyleContent, content)).asElement();
/src/lib/DOMWorld.js-314-    }
##############################################
/src/lib/DOMWorld.js-322-    async function addStyleUrl(url) {
/src/lib/DOMWorld.js:323:      const link = document.createElement('link');
/src/lib/DOMWorld.js-324-      link.rel = 'stylesheet';
##############################################
/src/lib/DOMWorld.js-339-    async function addStyleContent(content) {
/src/lib/DOMWorld.js:340:      const style = document.createElement('style');
/src/lib/DOMWorld.js-341-      style.type = 'text/css';
/src/lib/DOMWorld.js:342:      style.appendChild(document.createTextNode(content));
/src/lib/DOMWorld.js-343-      const promise = new Promise((res, rej) => {
##############################################
/src/lib/DOMWorld.js-391-      assert(helper.isString(value), 'Values must be strings. Found value "' + value + '" of type "' + (typeof value) + '"');
/src/lib/DOMWorld.js:392:    return this.$eval(selector, (element, values) => {
/src/lib/DOMWorld.js-393-      if (element.nodeName.toLowerCase() !== 'select')
##############################################
/src/lib/DOMWorld.js-465-  async title() {
/src/lib/DOMWorld.js:466:    return this.evaluate(() => document.title);
/src/lib/DOMWorld.js-467-  }
##############################################
/src/lib/DOMWorld.js-499-      const node = isXPath
/src/lib/DOMWorld.js:500:        ? document.evaluate(selectorOrXPath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue
/src/lib/DOMWorld.js-501-        : document.querySelector(selectorOrXPath);
##############################################
/src/lib/DOMWorld.js-574-    try {
/src/lib/DOMWorld.js:575:      success = await (await this._domWorld.executionContext()).evaluateHandle(waitForPredicatePageFunction, this._predicateBody, this._polling, this._timeout, ...this._args);
/src/lib/DOMWorld.js-576-    } catch (e) {
##############################################
/src/lib/DOMWorld.js-586-    // Ignore timeouts in pageScript - we track timeouts ourselves.
/src/lib/DOMWorld.js:587:    // If the frame's execution context has already changed, `frame.evaluate` will
/src/lib/DOMWorld.js-588-    // throw an error - ignore this predicate run altogether.
/src/lib/DOMWorld.js:589:    if (!error && await this._domWorld.evaluate(s => !s, success).catch(e => true)) {
/src/lib/DOMWorld.js-590-      await success.dispose();
##############################################
/src/lib/DOMWorld.js-598-
/src/lib/DOMWorld.js:599:    // We could have tried to evaluate in a context which was already
/src/lib/DOMWorld.js-600-    // destroyed.
##############################################
/src/lib/Page.js-307-   */
/src/lib/Page.js:308:  async evaluateHandle(pageFunction, ...args) {
/src/lib/Page.js-309-    const context = await this.mainFrame().executionContext();
/src/lib/Page.js:310:    return context.evaluateHandle(pageFunction, ...args);
/src/lib/Page.js-311-  }
##############################################
/src/lib/Page.js-327-   */
/src/lib/Page.js:328:  async $eval(selector, pageFunction, ...args) {
/src/lib/Page.js:329:    return this.mainFrame().$eval(selector, pageFunction, ...args);
/src/lib/Page.js-330-  }
##############################################
/src/lib/Page.js-337-   */
/src/lib/Page.js:338:  async $$eval(selector, pageFunction, ...args) {
/src/lib/Page.js:339:    return this.mainFrame().$$eval(selector, pageFunction, ...args);
/src/lib/Page.js-340-  }
##############################################
/src/lib/Page.js-430-
/src/lib/Page.js:431:    const expression = helper.evaluationString(addPageBinding, name);
/src/lib/Page.js-432-    await this._client.send('Runtime.addBinding', {name: name});
/src/lib/Page.js-433-    await this._client.send('Page.addScriptToEvaluateOnNewDocument', {source: expression});
/src/lib/Page.js:434:    await Promise.all(this.frames().map(frame => frame.evaluate(expression).catch(debugError)));
/src/lib/Page.js-435-
##############################################
/src/lib/Page.js-548-      const result = await this._pageBindings.get(name)(...args);
/src/lib/Page.js:549:      expression = helper.evaluationString(deliverResult, name, seq, result);
/src/lib/Page.js-550-    } catch (error) {
/src/lib/Page.js-551-      if (error instanceof Error)
/src/lib/Page.js:552:        expression = helper.evaluationString(deliverError, name, seq, error.message, error.stack);
/src/lib/Page.js-553-      else
/src/lib/Page.js:554:        expression = helper.evaluationString(deliverErrorValue, name, seq, error);
/src/lib/Page.js-555-    }
/src/lib/Page.js:556:    this._client.send('Runtime.evaluate', { expression, contextId: event.executionContextId }).catch(debugError);
/src/lib/Page.js-557-
##############################################
/src/lib/Page.js-813-   */
/src/lib/Page.js:814:  async evaluate(pageFunction, ...args) {
/src/lib/Page.js:815:    return this._frameManager.mainFrame().evaluate(pageFunction, ...args);
/src/lib/Page.js-816-  }
##############################################
/src/lib/Page.js-821-   */
/src/lib/Page.js:822:  async evaluateOnNewDocument(pageFunction, ...args) {
/src/lib/Page.js:823:    const source = helper.evaluationString(pageFunction, ...args);
/src/lib/Page.js-824-    await this._client.send('Page.addScriptToEvaluateOnNewDocument', { source });
##############################################
/src/lib/FrameManager.js-407-   */
/src/lib/FrameManager.js:408:  async evaluateHandle(pageFunction, ...args) {
/src/lib/FrameManager.js:409:    return this._mainWorld.evaluateHandle(pageFunction, ...args);
/src/lib/FrameManager.js-410-  }
##############################################
/src/lib/FrameManager.js-416-   */
/src/lib/FrameManager.js:417:  async evaluate(pageFunction, ...args) {
/src/lib/FrameManager.js:418:    return this._mainWorld.evaluate(pageFunction, ...args);
/src/lib/FrameManager.js-419-  }
##############################################
/src/lib/FrameManager.js-442-   */
/src/lib/FrameManager.js:443:  async $eval(selector, pageFunction, ...args) {
/src/lib/FrameManager.js:444:    return this._mainWorld.$eval(selector, pageFunction, ...args);
/src/lib/FrameManager.js-445-  }
##############################################
/src/lib/FrameManager.js-452-   */
/src/lib/FrameManager.js:453:  async $$eval(selector, pageFunction, ...args) {
/src/lib/FrameManager.js:454:    return this._mainWorld.$$eval(selector, pageFunction, ...args);
/src/lib/FrameManager.js-455-  }
##############################################
/src/lib/helper.js-25-   */
/src/lib/helper.js:26:  static evaluationString(fun, ...args) {
/src/lib/helper.js-27-    if (Helper.isString(fun)) {
/src/lib/helper.js:28:      assert(args.length === 0, 'Cannot evaluate a string with arguments');
/src/lib/helper.js-29-      return /** @type {string} */ (fun);
##############################################
/src/lib/Input.js-284-    // @see https://crbug.com/613219
/src/lib/Input.js:285:    await this._client.send('Runtime.evaluate', {
/src/lib/Input.js-286-      expression: 'new Promise(x => requestAnimationFrame(() => requestAnimationFrame(x)))',
##############################################
/src/lib/Worker.js-65-   */
/src/lib/Worker.js:66:  async evaluate(pageFunction, ...args) {
/src/lib/Worker.js:67:    return (await this._executionContextPromise).evaluate(pageFunction, ...args);
/src/lib/Worker.js-68-  }
##############################################
/src/lib/Worker.js-74-   */
/src/lib/Worker.js:75:  async evaluateHandle(pageFunction, ...args) {
/src/lib/Worker.js:76:    return (await this._executionContextPromise).evaluateHandle(pageFunction, ...args);
/src/lib/Worker.js-77-  }
