/src/lib/server/controllers/connect.js-10-module.exports = function connect(req, res) {
/src/lib/server/controllers/connect.js:11:    const secret = req.companion.options.secret;
/src/lib/server/controllers/connect.js-12-    let state = oAuthState.generateState(secret);
##############################################
/src/lib/server/provider/index.js-94-            grantConfig[authProvider].key = providerOptions[authProvider].key;
/src/lib/server/provider/index.js:95:            grantConfig[authProvider].secret = providerOptions[authProvider].secret;
/src/lib/server/provider/index.js-96-            const { provider, name } = authNameToProvider(authProvider, companionOptions);
##############################################
/src/lib/standalone/helper.js-49-            s3: {
/src/lib/standalone/helper.js:50:                key: process.env.COMPANION_AWS_KEY,
/src/lib/standalone/helper.js-51-                secret: getSecret('COMPANION_AWS_SECRET'),
##############################################
/src/lib/standalone/helper.js-88- */
/src/lib/standalone/helper.js:89:const getSecret = (baseEnvVar) => {
/src/lib/standalone/helper.js-90-    return `${baseEnvVar}_FILE` in process.env
##############################################
/src/lib/standalone/helper.js-98- */
/src/lib/standalone/helper.js:99:const generateSecret = () => {
/src/lib/standalone/helper.js-100-    logger.warn('auto-generating server secret because none was specified', 'startup.secret');
