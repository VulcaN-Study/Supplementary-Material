/src/src/CompletionTriggers/Callback.ts-27-    const cbName = this.callbackName || 'htmlPdfCb';
/src/src/CompletionTriggers/Callback.ts:28:    return Runtime.evaluate({
/src/src/CompletionTriggers/Callback.ts-29-      awaitPromise: true,
##############################################
/src/src/CompletionTriggers/Element.ts-25-    const {Runtime} = client;
/src/src/CompletionTriggers/Element.ts:26:    return Runtime.evaluate({
/src/src/CompletionTriggers/Element.ts-27-      awaitPromise: true,
##############################################
/src/src/CompletionTriggers/Element.ts-36-            });
/src/src/CompletionTriggers/Element.ts:37:          }).observe(document.body, { childList: true });
/src/src/CompletionTriggers/Element.ts-38-          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});
##############################################
/src/src/CompletionTriggers/Variable.ts-27-    const varName = this.variableName || 'htmlPdfDone';
/src/src/CompletionTriggers/Variable.ts:28:    return Runtime.evaluate({
/src/src/CompletionTriggers/Variable.ts-29-      awaitPromise: true,
##############################################
/src/src/CompletionTriggers/Event.ts-28-    const selector = this.cssSelector ? `querySelector('${this.cssSelector}')` : 'body';
/src/src/CompletionTriggers/Event.ts:29:    return Runtime.evaluate({
/src/src/CompletionTriggers/Event.ts-30-      awaitPromise: true,
##############################################
/src/src/typings/chrome/Page/PrintToPDFOptions.ts-112-   * - `title` document title
/src/src/typings/chrome/Page/PrintToPDFOptions.ts:113:   * - `url` document location
/src/src/typings/chrome/Page/PrintToPDFOptions.ts-114-   * - `pageNumber` current page number
##############################################
/src/README.md-160-* `title` - document title
/src/README.md:161:* `url` - document location
/src/README.md-162-* `pageNumber` - current page number
##############################################
/src/lib/src/CompletionTriggers/Element.js-34-            const { Runtime } = client;
/src/lib/src/CompletionTriggers/Element.js:35:            return Runtime.evaluate({
/src/lib/src/CompletionTriggers/Element.js-36-                awaitPromise: true,
##############################################
/src/lib/src/CompletionTriggers/Element.js-45-            });
/src/lib/src/CompletionTriggers/Element.js:46:          }).observe(document.body, { childList: true });
/src/lib/src/CompletionTriggers/Element.js-47-          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});
##############################################
/src/lib/src/CompletionTriggers/Variable.d.ts.map:1:{"version":3,"sources":["src/CompletionTriggers/Variable.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;;;;;GAMG;AACH,qBAAa,QAAS,SAAQ,iBAAiB;IASjC,SAAS,CAAC,YAAY,CAAC,EAAE,MAAM;IAP3C;;;;;;OAMG;gBACmB,YAAY,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM;IAIhD,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;CAe7C","file":"Variable.d.ts","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for a variable to be true.\n *\n * @export\n * @class Variable\n * @extends {CompletionTrigger}\n */\nexport class Variable extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Variable CompletionTrigger.\n   * @param {string} [variableName] the variable to listen on.\n   *  Defaults to htmlPdfDone.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Variable\n   */\n  constructor(protected variableName?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const varName = this.variableName || 'htmlPdfDone';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          Object.defineProperty(window, '${varName}', {\n            set: (val) => { if (val === true) resolve(); }\n          });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}
##############################################
/src/lib/src/CompletionTriggers/Variable.js.map:1:{"version":3,"sources":["src/CompletionTriggers/Variable.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;AAEb,2DAAwD;AAExD;;;;;;GAMG;AACH,MAAa,QAAS,SAAQ,qCAAiB;IAE7C;;;;;;OAMG;IACH,YAAsB,YAAqB,EAAE,OAAgB;QAC3D,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,iBAAY,GAAZ,YAAY,CAAS;IAE3C,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,IAAI,aAAa,CAAC;YACnD,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;2CAEyB,OAAO;;;qCAGb,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CAEF;AA5BD,4BA4BC","file":"Variable.js","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for a variable to be true.\n *\n * @export\n * @class Variable\n * @extends {CompletionTrigger}\n */\nexport class Variable extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Variable CompletionTrigger.\n   * @param {string} [variableName] the variable to listen on.\n   *  Defaults to htmlPdfDone.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Variable\n   */\n  constructor(protected variableName?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const varName = this.variableName || 'htmlPdfDone';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          Object.defineProperty(window, '${varName}', {\n            set: (val) => { if (val === true) resolve(); }\n          });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}
##############################################
/src/lib/src/CompletionTriggers/Event.js.map:1:{"version":3,"sources":["src/CompletionTriggers/Event.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;AAEb,2DAAwD;AAExD;;;;;;GAMG;AACH,MAAa,KAAM,SAAQ,qCAAiB;IAE1C;;;;;;;OAOG;IACH,YAAsB,KAAa,EAAY,WAAoB,EAAE,OAAgB;QACnF,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,UAAK,GAAL,KAAK,CAAQ;QAAY,gBAAW,GAAX,WAAW,CAAS;IAEnE,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,kBAAkB,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;YACpF,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;qBAEG,QAAQ,sBAAsB,IAAI,CAAC,KAAK;qCACxB,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CAEF;AA3BD,sBA2BC","file":"Event.js","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for an Event to fire.\n *\n * @export\n * @class Event\n * @extends {CompletionTrigger}\n */\nexport class Event extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Event CompletionTrigger.\n   * @param {string} event the name of the event to listen for.\n   * @param {string} [cssSelector] the CSS selector of the element to listen on.\n   *  Defaults to body.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Event\n   */\n  constructor(protected event: string, protected cssSelector?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const selector = this.cssSelector ? `querySelector('${this.cssSelector}')` : 'body';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          document.${selector}.addEventListener('${this.event}', resolve, { once: true });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}
##############################################
/src/lib/src/CompletionTriggers/Event.js-38-            const selector = this.cssSelector ? `querySelector('${this.cssSelector}')` : 'body';
/src/lib/src/CompletionTriggers/Event.js:39:            return Runtime.evaluate({
/src/lib/src/CompletionTriggers/Event.js-40-                awaitPromise: true,
##############################################
/src/lib/src/CompletionTriggers/Element.js.map:1:{"version":3,"sources":["src/CompletionTriggers/Element.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;AAEb,2DAAwD;AAExD;;;;;;GAMG;AACH,MAAa,OAAQ,SAAQ,qCAAiB;IAE5C;;;;;OAKG;IACH,YAAsB,WAAmB,EAAE,OAAgB;QACzD,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,gBAAW,GAAX,WAAW,CAAQ;IAEzC,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;;;0EAIwD,IAAI,CAAC,WAAW;;;;;;qCAMrD,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CAEF;AA/BD,0BA+BC","file":"Element.js","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for a DOM element to appear.\n *\n * @export\n * @class Element\n * @extends {CompletionTrigger}\n */\nexport class Element extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Element CompletionTrigger.\n   * @param {string} cssSelector the element to listen for.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Element\n   */\n  constructor(protected cssSelector: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          new MutationObserver((mutations, observer) => {\n            mutations.forEach((mutation) => {\n              if ([...mutation.addedNodes].find((node) => node.matches('${this.cssSelector}'))) {\n                observer.disconnect();\n                resolve();\n              }\n            });\n          }).observe(document.body, { childList: true });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}
##############################################
/src/lib/src/CompletionTriggers/Variable.js-36-            const varName = this.variableName || 'htmlPdfDone';
/src/lib/src/CompletionTriggers/Variable.js:37:            return Runtime.evaluate({
/src/lib/src/CompletionTriggers/Variable.js-38-                awaitPromise: true,
##############################################
/src/lib/src/CompletionTriggers/Element.d.ts.map:1:{"version":3,"sources":["src/CompletionTriggers/Element.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;;;;;GAMG;AACH,qBAAa,OAAQ,SAAQ,iBAAiB;IAQhC,SAAS,CAAC,WAAW,EAAE,MAAM;IANzC;;;;;OAKG;gBACmB,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM;IAI9C,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;CAmB7C","file":"Element.d.ts","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for a DOM element to appear.\n *\n * @export\n * @class Element\n * @extends {CompletionTrigger}\n */\nexport class Element extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Element CompletionTrigger.\n   * @param {string} cssSelector the element to listen for.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Element\n   */\n  constructor(protected cssSelector: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          new MutationObserver((mutations, observer) => {\n            mutations.forEach((mutation) => {\n              if ([...mutation.addedNodes].find((node) => node.matches('${this.cssSelector}'))) {\n                observer.disconnect();\n                resolve();\n              }\n            });\n          }).observe(document.body, { childList: true });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}
##############################################
/src/lib/src/CompletionTriggers/Callback.js-36-            const cbName = this.callbackName || 'htmlPdfCb';
/src/lib/src/CompletionTriggers/Callback.js:37:            return Runtime.evaluate({
/src/lib/src/CompletionTriggers/Callback.js-38-                awaitPromise: true,
##############################################
/src/lib/src/CompletionTriggers/Callback.js.map:1:{"version":3,"sources":["src/CompletionTriggers/Callback.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;AAEb,2DAAwD;AAExD;;;;;;GAMG;AACH,MAAa,QAAS,SAAQ,qCAAiB;IAE7C;;;;;;OAMG;IACH,YAAsB,YAAqB,EAAE,OAAgB;QAC3D,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,iBAAY,GAAZ,YAAY,CAAS;IAE3C,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,IAAI,WAAW,CAAC;YAChD,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;YAEN,MAAM;qCACmB,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CAEF;AA1BD,4BA0BC","file":"Callback.js","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for a callback to be called.\n *\n * @export\n * @class Callback\n * @extends {CompletionTrigger}\n */\nexport class Callback extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Callback CompletionTrigger.\n   * @param {string} [callbackName] the name of the callback to listen for.\n   *  Defaults to htmlPdfCb.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Callback\n   */\n  constructor(protected callbackName?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const cbName = this.callbackName || 'htmlPdfCb';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          ${cbName} = resolve;\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}
##############################################
/src/lib/src/CompletionTriggers/Event.d.ts.map:1:{"version":3,"sources":["src/CompletionTriggers/Event.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;;;;;GAMG;AACH,qBAAa,KAAM,SAAQ,iBAAiB;IAU9B,SAAS,CAAC,KAAK,EAAE,MAAM;IAAE,SAAS,CAAC,WAAW,CAAC,EAAE,MAAM;IARnE;;;;;;;OAOG;gBACmB,KAAK,EAAE,MAAM,EAAY,WAAW,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM;IAIxE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;CAa7C","file":"Event.d.ts","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for an Event to fire.\n *\n * @export\n * @class Event\n * @extends {CompletionTrigger}\n */\nexport class Event extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Event CompletionTrigger.\n   * @param {string} event the name of the event to listen for.\n   * @param {string} [cssSelector] the CSS selector of the element to listen on.\n   *  Defaults to body.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Event\n   */\n  constructor(protected event: string, protected cssSelector?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const selector = this.cssSelector ? `querySelector('${this.cssSelector}')` : 'body';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          document.${selector}.addEventListener('${this.event}', resolve, { once: true });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}
##############################################
/src/lib/src/CompletionTriggers/Callback.d.ts.map:1:{"version":3,"sources":["src/CompletionTriggers/Callback.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;;;;;GAMG;AACH,qBAAa,QAAS,SAAQ,iBAAiB;IASjC,SAAS,CAAC,YAAY,CAAC,EAAE,MAAM;IAP3C;;;;;;OAMG;gBACmB,YAAY,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM;IAIhD,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;CAa7C","file":"Callback.d.ts","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for a callback to be called.\n *\n * @export\n * @class Callback\n * @extends {CompletionTrigger}\n */\nexport class Callback extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Callback CompletionTrigger.\n   * @param {string} [callbackName] the name of the callback to listen for.\n   *  Defaults to htmlPdfCb.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Callback\n   */\n  constructor(protected callbackName?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const cbName = this.callbackName || 'htmlPdfCb';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          ${cbName} = resolve;\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}
##############################################
/src/lib/src/typings/chrome/Page/PrintToPDFOptions.d.ts.map:1:{"version":3,"sources":["src/typings/chrome/Page/PrintToPDFOptions.ts"],"names":[],"mappings":"AAEA;;;;;GAKG;AACH,MAAM,CAAC,OAAO,WAAW,iBAAiB;IACxC;;;;;OAKG;IACH,SAAS,CAAC,EAAE,OAAO,CAAC;IAEpB;;;;;OAKG;IACH,mBAAmB,CAAC,EAAE,OAAO,CAAC;IAE9B;;;;;OAKG;IACH,eAAe,CAAC,EAAE,OAAO,CAAC;IAE1B;;;;;OAKG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC;IAEf;;;;;OAKG;IACH,UAAU,CAAC,EAAE,MAAM,CAAC;IAEpB;;;;;OAKG;IACH,WAAW,CAAC,EAAE,MAAM,CAAC;IAErB;;;;;OAKG;IACH,SAAS,CAAC,EAAE,MAAM,CAAC;IAEnB;;;;;OAKG;IACH,YAAY,CAAC,EAAE,MAAM,CAAC;IAEtB;;;;;OAKG;IACH,UAAU,CAAC,EAAE,MAAM,CAAC;IAEpB;;;;;OAKG;IACH,WAAW,CAAC,EAAE,MAAM,CAAC;IAErB;;;;;;OAMG;IACH,UAAU,CAAC,EAAE,MAAM,CAAC;IAEpB;;;;;;OAMG;IACH,uBAAuB,CAAC,EAAE,OAAO,CAAC;IAElC;;;;;;;;;;;;;OAaG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;IAExB;;;;;OAKG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;IAExB;;;;;;OAMG;IACH,iBAAiB,CAAC,EAAE,OAAO,CAAC;CAC7B","file":"PrintToPDFOptions.d.ts","sourcesContent":["'use strict';\n\n/**\n * Chrome Page.printToPDF options.\n *\n * @export\n * @interface PrintToPDFOptions\n */\nexport default interface PrintToPDFOptions {\n  /**\n   * Paper orientation. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  landscape?: boolean;\n\n  /**\n   * Display header and footer. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  displayHeaderFooter?: boolean;\n\n  /**\n   * Print background graphics. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  printBackground?: boolean;\n\n  /**\n   * Scale of the webpage rendering. Defaults to 1.\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  scale?: number;\n\n  /**\n   * Paper width in inches. Defaults to 8.5 inches.\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  paperWidth?: number;\n\n  /**\n   * Paper height in inches. Defaults to 11 inches.\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  paperHeight?: number;\n\n  /**\n   * Top margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  marginTop?: number;\n\n  /**\n   * Bottom margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  marginBottom?: number;\n\n  /**\n   * Left margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  marginLeft?: number;\n\n  /**\n   * Right margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  marginRight?: number;\n\n  /**\n   * Paper ranges to print, e.g., '1-5, 8, 11-13'.\n   * Defaults to the empty string, which means print all pages.\n   *\n   * @type {string}\n   * @memberof PrintToPDFOptions\n   */\n  pageRanges?: string;\n\n  /**\n   * Whether to silently ignore invalid but successfully parsed\n   * page ranges, such as '3-2'. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  ignoreInvalidPageRanges?: boolean;\n\n  /**\n   * HTML template for the print header.\n   * Should be valid HTML markup with following classes used to inject printing values into them:\n   * - `date` formatted print date\n   * - `title` document title\n   * - `url` document location\n   * - `pageNumber` current page number\n   * - `totalPages` total pages in the document\n   *\n   * For example, `<span class=\"title\"></span>` would generate a span containing the title.\n   *\n   * @type {string}\n   * @memberof PrintToPDFOptions\n   */\n  headerTemplate?: string;\n\n  /**\n   * HTML template for the print footer. Should use the same format as the `headerTemplate`.\n   *\n   * @type {string}\n   * @memberof PrintToPDFOptions\n   */\n  footerTemplate?: string;\n\n  /**\n   * Whether or not to prefer page size as defined by css.\n   * Defaults to false, in which case the content will be scaled to fit the paper size.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  preferCSSPageSize?: boolean;\n}\n"],"sourceRoot":"../../../../.."}
##############################################
/src/lib/src/typings/chrome/Page/PrintToPDFOptions.js.map:1:{"version":3,"sources":["src/typings/chrome/Page/PrintToPDFOptions.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC","file":"PrintToPDFOptions.js","sourcesContent":["'use strict';\n\n/**\n * Chrome Page.printToPDF options.\n *\n * @export\n * @interface PrintToPDFOptions\n */\nexport default interface PrintToPDFOptions {\n  /**\n   * Paper orientation. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  landscape?: boolean;\n\n  /**\n   * Display header and footer. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  displayHeaderFooter?: boolean;\n\n  /**\n   * Print background graphics. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  printBackground?: boolean;\n\n  /**\n   * Scale of the webpage rendering. Defaults to 1.\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  scale?: number;\n\n  /**\n   * Paper width in inches. Defaults to 8.5 inches.\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  paperWidth?: number;\n\n  /**\n   * Paper height in inches. Defaults to 11 inches.\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  paperHeight?: number;\n\n  /**\n   * Top margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  marginTop?: number;\n\n  /**\n   * Bottom margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  marginBottom?: number;\n\n  /**\n   * Left margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  marginLeft?: number;\n\n  /**\n   * Right margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof PrintToPDFOptions\n   */\n  marginRight?: number;\n\n  /**\n   * Paper ranges to print, e.g., '1-5, 8, 11-13'.\n   * Defaults to the empty string, which means print all pages.\n   *\n   * @type {string}\n   * @memberof PrintToPDFOptions\n   */\n  pageRanges?: string;\n\n  /**\n   * Whether to silently ignore invalid but successfully parsed\n   * page ranges, such as '3-2'. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  ignoreInvalidPageRanges?: boolean;\n\n  /**\n   * HTML template for the print header.\n   * Should be valid HTML markup with following classes used to inject printing values into them:\n   * - `date` formatted print date\n   * - `title` document title\n   * - `url` document location\n   * - `pageNumber` current page number\n   * - `totalPages` total pages in the document\n   *\n   * For example, `<span class=\"title\"></span>` would generate a span containing the title.\n   *\n   * @type {string}\n   * @memberof PrintToPDFOptions\n   */\n  headerTemplate?: string;\n\n  /**\n   * HTML template for the print footer. Should use the same format as the `headerTemplate`.\n   *\n   * @type {string}\n   * @memberof PrintToPDFOptions\n   */\n  footerTemplate?: string;\n\n  /**\n   * Whether or not to prefer page size as defined by css.\n   * Defaults to false, in which case the content will be scaled to fit the paper size.\n   *\n   * @type {boolean}\n   * @memberof PrintToPDFOptions\n   */\n  preferCSSPageSize?: boolean;\n}\n"],"sourceRoot":"../../../../.."}
##############################################
/src/lib/src/typings/chrome/Page/PrintToPDFOptions.d.ts-98-     * - `title` document title
/src/lib/src/typings/chrome/Page/PrintToPDFOptions.d.ts:99:     * - `url` document location
/src/lib/src/typings/chrome/Page/PrintToPDFOptions.d.ts-100-     * - `pageNumber` current page number
