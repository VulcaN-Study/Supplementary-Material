{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 20,
          "line": 2
        },
        "extra": {
          "line": "  \"asi\"           : true,",
          "message": "Syntax error"
        },
        "path": "/src/.jshintrc",
        "start": {
          "col": 19,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# see: https://github.com/github/gitignore/blob/master/Node.gitignore",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 19,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) 2015, ideaQ <>",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "hardcoded_jwt_secret": {
      "files": [
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            2,
            40
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// var cookie_options = {\n\n//   ttl: 365 * 30 * 7 * 24 * 60 * 60 * 1000, // in the distant future ...\n\n//   encoding: 'none',    // we already used JWT to encode\n\n//   isSecure: true,      // warm & fuzzy feelings\n\n//   isHttpOnly: true,    // prevent client alteration\n\n//   clearInvalid: false, // remove invalid cookies\n\n//   strictHeader: true   // don't allow violations of RFC 6265\n\n// }\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            2,
            54
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// var cookie_options = {\n\n//   ttl: 365 * 30 * 7 * 24 * 60 * 60 * 1000, // in the distant future ...\n\n//   encoding: 'none',    // we already used JWT to encode\n\n//   isSecure: true,      // warm & fuzzy feelings\n\n//   isHttpOnly: true,    // prevent client alteration\n\n//   clearInvalid: false, // remove invalid cookies\n\n//   strictHeader: true   // don't allow violations of RFC 6265\n\n// }\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            2,
            72
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// var cookie_options = {\n\n//   ttl: 365 * 30 * 7 * 24 * 60 * 60 * 1000, // in the distant future ...\n\n//   encoding: 'none',    // we already used JWT to encode\n\n//   isSecure: true,      // warm & fuzzy feelings\n\n//   isHttpOnly: true,    // prevent client alteration\n\n//   clearInvalid: false, // remove invalid cookies\n\n//   strictHeader: true   // don't allow violations of RFC 6265\n\n// }\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!)\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            2,
            94
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// var cookie_options = {\n\n//   ttl: 365 * 30 * 7 * 24 * 60 * 60 * 1000, // in the distant future ...\n\n//   encoding: 'none',    // we already used JWT to encode\n\n//   isSecure: true,      // warm & fuzzy feelings\n\n//   isHttpOnly: true,    // prevent client alteration\n\n//   clearInvalid: false, // remove invalid cookies\n\n//   strictHeader: true   // don't allow violations of RFC 6265\n\n// }\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!)\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: \"token=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            2,
            113
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// var cookie_options = {\n\n//   ttl: 365 * 30 * 7 * 24 * 60 * 60 * 1000, // in the distant future ...\n\n//   encoding: 'none',    // we already used JWT to encode\n\n//   isSecure: true,      // warm & fuzzy feelings\n\n//   isHttpOnly: true,    // prevent client alteration\n\n//   clearInvalid: false, // remove invalid cookies\n\n//   strictHeader: true   // don't allow violations of RFC 6265\n\n// }\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!)\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: \"token=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            2,
            147
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// var cookie_options = {\n\n//   ttl: 365 * 30 * 7 * 24 * 60 * 60 * 1000, // in the distant future ...\n\n//   encoding: 'none',    // we already used JWT to encode\n\n//   isSecure: true,      // warm & fuzzy feelings\n\n//   isHttpOnly: true,    // prevent client alteration\n\n//   clearInvalid: false, // remove invalid cookies\n\n//   strictHeader: true   // don't allow violations of RFC 6265\n\n// }\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!)\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: \"token=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token)\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// Supply a VALID Token in Cookie A-N-D valid GA in Cookie!!\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token)\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      cookie: \"token=\" + token + '; ' + GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Valid Cookie Token Succeeds (Ignores GA)\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            2,
            26
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// var cookie_options = {\n\n//   ttl: 365 * 30 * 7 * 24 * 60 * 60 * 1000, // in the distant future ...\n\n//   encoding: 'none',    // we already used JWT to encode\n\n//   isSecure: true,      // warm & fuzzy feelings\n\n//   isHttpOnly: true,    // prevent client alteration\n\n//   clearInvalid: false, // remove invalid cookies\n\n//   strictHeader: true   // don't allow violations of RFC 6265\n\n// }\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            2,
            130
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// var cookie_options = {\n\n//   ttl: 365 * 30 * 7 * 24 * 60 * 60 * 1000, // in the distant future ...\n\n//   encoding: 'none',    // we already used JWT to encode\n\n//   isSecure: true,      // warm & fuzzy feelings\n\n//   isHttpOnly: true,    // prevent client alteration\n\n//   clearInvalid: false, // remove invalid cookies\n\n//   strictHeader: true   // don't allow violations of RFC 6265\n\n// }\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!)\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"token=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: \"token=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token)\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"Bearer \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            33
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            47
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            65
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            87
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            106
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            140
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// Supply a VALID Token in Cookie A-N-D valid GA in Cookie!!\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      cookie: \"customCookieKey=\" + token + '; ' + GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Valid Cookie Token Succeeds (Ignores GA)\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            187
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// Supply a VALID Token in Cookie A-N-D valid GA in Cookie!!\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      cookie: \"customCookieKey=\" + token + '; ' + GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Valid Cookie Token Succeeds (Ignores GA)\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID URL Token) - custom parameters\", function(t) {\n\n  var token = \"?customUrlKey=my.invalid.token\";\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  token = \"?customUrlKey=\" + token;\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"URL Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"URL Token is well formed but is allowed=false so should be denied - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  token = \"?customUrlKey=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"User is Denied\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            202
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// Supply a VALID Token in Cookie A-N-D valid GA in Cookie!!\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      cookie: \"customCookieKey=\" + token + '; ' + GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Valid Cookie Token Succeeds (Ignores GA)\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID URL Token) - custom parameters\", function(t) {\n\n  var token = \"?customUrlKey=my.invalid.token\";\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  token = \"?customUrlKey=\" + token;\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"URL Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"URL Token is well formed but is allowed=false so should be denied - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  token = \"?customUrlKey=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"User is Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token) - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  token = \"?customUrlKey=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            229
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// Supply a VALID Token in Cookie A-N-D valid GA in Cookie!!\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      cookie: \"customCookieKey=\" + token + '; ' + GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Valid Cookie Token Succeeds (Ignores GA)\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID URL Token) - custom parameters\", function(t) {\n\n  var token = \"?customUrlKey=my.invalid.token\";\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  token = \"?customUrlKey=\" + token;\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"URL Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"URL Token is well formed but is allowed=false so should be denied - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  token = \"?customUrlKey=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"User is Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token) - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  token = \"?customUrlKey=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content using inVALID header tokenType - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { Authorization: \"InvalidAuthScheme \" + token }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token and header tokenType) - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { Authorization: \"MyAuthScheme \" + token }\n\n  };\n\n\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            19
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            123
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            171
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// Supply a VALID Token in Cookie A-N-D valid GA in Cookie!!\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      cookie: \"customCookieKey=\" + token + '; ' + GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Valid Cookie Token Succeeds (Ignores GA)\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID URL Token) - custom parameters\", function(t) {\n\n  var token = \"?customUrlKey=my.invalid.token\";\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  token = \"?customUrlKey=\" + token;\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"URL Token signed with incorrect key fails\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            2,
            215
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\nvar server = require('./custom-parameters-server.js');\n\nvar cookie_options = '; Max-Age=31536000;'; //' Expires=Mon, 18 Jul 2016 05:29:45 GMT; Secure; HttpOnly';\n\n\n\n// Those tests are the same as cookie-test and url-token-test but with custom parameters in cookie or URL\n\n\n\ntest(\"Attempt to access restricted content using inVALID Cookie Token - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  console.log(options);\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content with VALID Token but malformed Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 400, \"Valid Token but inVALID COOKIE should fial!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with VALID Token Cookie (With Options!) - custom parameters\", function(t) {\n\n  var token  = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { cookie: \"customCookieKey=\" + token + cookie_options }\n\n  };\n\n  // console.log(' - - - - - - - - - - - - - - - OPTIONS:')\n\n  // console.log(options);\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"VALID COOKIE Token (With Options!) should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n/** Regressions Tests for https://github.com/dwyl/hapi-auth-jwt2/issues/65 **/\n\n\n\n// supply valid Token Auth Header but invalid Cookie\n\n// should succeed because Auth Header is first\n\ntest(\"Authorization Header should take precedence over any cookie - custom parameters\", function(t) {\n\n  var token    = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: \"customCookieKey=malformed.token\" + cookie_options\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(' - - - - - - - - - - - - - - - response:')\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Ignores cookie when Auth Header is set\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// valid google analytics cookie but invalid auth header token\n\n// see: https://github.com/dwyl/hapi-auth-jwt2/issues/65#issuecomment-124791842\n\ntest(\"Valid Google Analytics cookie should be ignored - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Ignores Google Analytics Cookie\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'invalid');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      authorization: \"MyAuthScheme \" + token,\n\n      cookie: GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Ignores GA but Invalid Auth Header still rejected\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// Supply a VALID Token in Cookie A-N-D valid GA in Cookie!!\n\ntest(\"Valid Google Analytics cookie should be ignored (BAD Header Token) - custom parameters\", function(t) {\n\n  var GA = \"gwcm=%7B%22expires%22%3Anull%2C%22clabel%22%3A%22SbNVCILRtFcQwcrE6gM%22%2C%22backoff%22%3A1437241242%7D; _ga=GA1.2.1363734468.1432273334\";\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: {\n\n      cookie: \"customCookieKey=\" + token + '; ' + GA\n\n    }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Valid Cookie Token Succeeds (Ignores GA)\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID URL Token) - custom parameters\", function(t) {\n\n  var token = \"?customUrlKey=my.invalid.token\";\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  token = \"?customUrlKey=\" + token;\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"URL Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"URL Token is well formed but is allowed=false so should be denied - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  token = \"?customUrlKey=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"User is Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token) - custom parameters\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  token = \"?customUrlKey=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content using inVALID header tokenType - custom parameters\", function(t) {\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { Authorization: \"InvalidAuthScheme \" + token }\n\n  };\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/dynamic-key-test.js",
          "match_lines": [
            2,
            21
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\n\n\nvar server = require('./dynamic-key-server'); // test server which in turn loads our module\n\n\n\ntest(\"Access restricted content with a valid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'michaelscott');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.equal(response.result.data.additional, 'something extra here if needed', 'extraInfo should be passed through');\n\n\n\n    t.end();"
        },
        {
          "file_path": "/src/test/dynamic-key-test.js",
          "match_lines": [
            2,
            39
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\n\n\nvar server = require('./dynamic-key-server'); // test server which in turn loads our module\n\n\n\ntest(\"Access restricted content with a valid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'michaelscott');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.equal(response.result.data.additional, 'something extra here if needed', 'extraInfo should be passed through');\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with an invalid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'dwightschrute');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail!\");\n\n\n\n    t.end();"
        },
        {
          "file_path": "/src/test/dynamic-key-test.js",
          "match_lines": [
            2,
            57
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\n\n\nvar server = require('./dynamic-key-server'); // test server which in turn loads our module\n\n\n\ntest(\"Access restricted content with a valid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'michaelscott');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.equal(response.result.data.additional, 'something extra here if needed', 'extraInfo should be passed through');\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with an invalid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'dwightschrute');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with a valid token and tenant but user is not allowed\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\", \"tenant\": \"wernhamHogg\" }, 'davidbrent');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Not allowed user should fail!\");\n\n\n\n    t.end();"
        },
        {
          "file_path": "/src/test/dynamic-key-test.js",
          "match_lines": [
            2,
            75
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\n\n\nvar server = require('./dynamic-key-server'); // test server which in turn loads our module\n\n\n\ntest(\"Access restricted content with a valid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'michaelscott');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.equal(response.result.data.additional, 'something extra here if needed', 'extraInfo should be passed through');\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with an invalid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'dwightschrute');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with a valid token and tenant but user is not allowed\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\", \"tenant\": \"wernhamHogg\" }, 'davidbrent');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Not allowed user should fail!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content without tenant specified in token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'michaelscott');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 400, \"No tenant specified should fail!\");\n\n\n\n    t.end();"
        },
        {
          "file_path": "/src/test/dynamic-key-test.js",
          "match_lines": [
            2,
            93
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\n\n\nvar server = require('./dynamic-key-server'); // test server which in turn loads our module\n\n\n\ntest(\"Access restricted content with a valid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'michaelscott');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.equal(response.result.data.additional, 'something extra here if needed', 'extraInfo should be passed through');\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with an invalid token and tenant\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"dunderMifflin\" }, 'dwightschrute');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with a valid token and tenant but user is not allowed\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\", \"tenant\": \"wernhamHogg\" }, 'davidbrent');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Not allowed user should fail!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content without tenant specified in token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'michaelscott');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 400, \"No tenant specified should fail!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content with non-existent tenant specified\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\", \"tenant\": \"princeFamilyPaper\" }, 'michaelscott');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"No tentant found should fail!\");\n\n\n\n    t.end();"
        },
        {
          "file_path": "/src/test/scopes-test.js",
          "match_lines": [
            2,
            21
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret'; // set by ENV Variable\n\nvar server = require('./scopes-server'); // test server which in turn loads our module\n\n\n\n\n\ntest(\"Access restricted content using scopes (with VALID Token and VALID scope)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado-with-scope\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n\n\n    t.end();"
        },
        {
          "file_path": "/src/test/scopes-test.js",
          "match_lines": [
            2,
            38
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret'; // set by ENV Variable\n\nvar server = require('./scopes-server'); // test server which in turn loads our module\n\n\n\n\n\ntest(\"Access restricted content using scopes (with VALID Token and VALID scope)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado-with-scope\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content using scopes (with VALID Token and INVALID scope)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado-with-scope\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us simulate an http request\n\n  server.inject(options, function(response) {\n\n    console.log(\" - - - - RESPONSE: \");\n\n    console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            83
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            121
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            136
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            153
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            233
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with Well-formed but invalid Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token should Error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// see: https://github.com/ideaq/hapi-auth-jwt2/issues/28\n\ntest(\"Request with undefined auth header should 401\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token fails (as expected)!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should require authentication header\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No token header should fail in auth 'required' mode\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            281
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with Well-formed but invalid Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token should Error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// see: https://github.com/ideaq/hapi-auth-jwt2/issues/28\n\ntest(\"Request with undefined auth header should 401\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token fails (as expected)!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should require authentication header\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No token header should fail in auth 'required' mode\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should pass when no auth header specified\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\"\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"No auth header should pass in optional mode!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            328
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with Well-formed but invalid Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token should Error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// see: https://github.com/ideaq/hapi-auth-jwt2/issues/28\n\ntest(\"Request with undefined auth header should 401\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token fails (as expected)!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should require authentication header\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No token header should fail in auth 'required' mode\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should pass when no auth header specified\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\"\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"No auth header should pass in optional mode!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'try' should pass when no auth header specified\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/try\"\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"No auth header should pass in 'try' mode!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'try' should pass with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/try\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Invalid token should pass in 'try' mode\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'try' should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/try\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            100
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            170
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with Well-formed but invalid Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token should Error!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            216
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with Well-formed but invalid Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token should Error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// see: https://github.com/ideaq/hapi-auth-jwt2/issues/28\n\ntest(\"Request with undefined auth header should 401\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token fails (as expected)!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should require authentication header\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No token header should fail in auth 'required' mode\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            263
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with Well-formed but invalid Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token should Error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// see: https://github.com/ideaq/hapi-auth-jwt2/issues/28\n\ntest(\"Request with undefined auth header should 401\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token fails (as expected)!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should require authentication header\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No token header should fail in auth 'required' mode\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should pass when no auth header specified\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\"\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"No auth header should pass in optional mode!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            2,
            311
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server'); // test server which in turn loads our module\n\n\n\ntest(\"Warm Up the Engine\", function(t) {\n\n  var options = {\n\n    method: \"GET\",\n\n    url: \"/\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"Welcome to Timer Land\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID Token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer fails.validation\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Malformed JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer my.invalid.token\" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(response.result);\n\n    // console.log(' '); // blank line\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    // t.equal(JSON.parse(response.result).msg, 'Invalid Token', \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using a token with missing characters in body\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  // delete some characters in body\n\n  var tokenData = token.split('.');\n\n  var header = tokenData[0],\n\n      body = tokenData[1],\n\n      signature = tokenData[2];\n\n  token = header + '.' + body.substring(0, body.length - 1) + '.' + signature;\n\n  /*console.log(\" - - - - - - token  - - - - -\");\n\n  console.log(token);*/\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an expired token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret, { expiresInSeconds: 1 });\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token  }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  setTimeout(function () {\n\n    server.inject(options, function(response) {\n\n      t.equal(response.statusCode, 401, \"Expired token should be invalid\");\n\n      t.equal(response.result.message, 'Token expired', 'Message should be \"Token expired\"');\n\n      t.end();\n\n    });\n\n  }, 1000);\n\n});\n\n\n\ntest(\"Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with Well-formed but invalid Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token should Error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\n// see: https://github.com/ideaq/hapi-auth-jwt2/issues/28\n\ntest(\"Request with undefined auth header should 401\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\",\n\n    headers: { authorization: \"Bearer \" }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"InVALID Token fails (as expected)!\");\n\n\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should require authentication header\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No token header should fail in auth 'required' mode\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'required' should should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/required\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should pass when no auth header specified\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\"\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"No auth header should pass in optional mode!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should fail with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 401, \"Invalid token should error!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'optional' should pass with valid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/optional\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Valid token should succeed!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'try' should pass when no auth header specified\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/try\"\n\n  };\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"No auth header should pass in 'try' mode!\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Auth mode 'try' should pass with invalid token\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'badsecret');\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/try\",\n\n    headers: { authorization: \"Bearer \" + token }\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    // console.log(\" - - - - RESPONSE: \")\n\n    // console.log(response.result);\n\n    t.equal(response.statusCode, 200, \"Invalid token should pass in 'try' mode\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/url-token-test.js",
          "match_lines": [
            2,
            61
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server.js');\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token supplied > fails (as expected)\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID URL Token)\", function(t) {\n\n  var token = \"?token=my.invalid.token\";\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  token = \"?token=\" + token;\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"URL Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"URL Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  token = \"?token=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"User is Denied\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/url-token-test.js",
          "match_lines": [
            2,
            76
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server.js');\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token supplied > fails (as expected)\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID URL Token)\", function(t) {\n\n  var token = \"?token=my.invalid.token\";\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  token = \"?token=\" + token;\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"URL Token signed with incorrect key fails\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"URL Token is well formed but is allowed=false so should be denied\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  // var token = jwt.sign({ \"id\": 1 ,\"name\":\"Old Greg\" }, 'incorrectSecret');\n\n  var token = JWT.sign({ id: 321, \"name\": \"Old Gregg\" }, secret);\n\n  token = \"?token=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"User is Denied\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Access restricted content (with VALID Token)\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, secret);\n\n  token = \"?token=\" + token;\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 200, \"VALID Token should succeed!\");\n\n    t.end();"
        },
        {
          "file_path": "/src/test/url-token-test.js",
          "match_lines": [
            2,
            45
          ],
          "match_position": [
            1,
            10
          ],
          "match_string": "var JWT    = require('jsonwebtoken');\n\nvar secret = 'NeverShareYourSecret';\n\n\n\nvar server = require('./server.js');\n\n\n\ntest(\"Attempt to access restricted content (without auth token)\", function(t) {\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\"\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"No Token supplied > fails (as expected)\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Attempt to access restricted content (with an INVALID URL Token)\", function(t) {\n\n  var token = \"?token=my.invalid.token\";\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"INVALID Token should fail\");\n\n    t.end();\n\n  });\n\n});\n\n\n\ntest(\"Try using an incorrect secret to sign the JWT\", function(t) {\n\n  // use the token as the 'authorization' header in requests\n\n  var token = JWT.sign({ id: 123, \"name\": \"Charlie\" }, 'incorrectSecret');\n\n  token = \"?token=\" + token;\n\n  // console.log(\" - - - - - - token  - - - - -\")\n\n  // console.log(token);\n\n  var options = {\n\n    method: \"POST\",\n\n    url: \"/privado\" + token\n\n  };\n\n  // server.inject lets us similate an http request\n\n  server.inject(options, function(response) {\n\n    t.equal(response.statusCode, 401, \"URL Token signed with incorrect key fails\");\n\n    t.end();"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "Hardcoded JWT secret was found",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "node_secret": {
      "files": [
        {
          "file_path": "/src/test/cookies-test.js",
          "match_lines": [
            3,
            3
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret';"
        },
        {
          "file_path": "/src/test/custom-parameters-server.js",
          "match_lines": [
            2,
            2
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret';"
        },
        {
          "file_path": "/src/test/custom-parameters-test.js",
          "match_lines": [
            3,
            3
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret';"
        },
        {
          "file_path": "/src/test/scopes-server.js",
          "match_lines": [
            2,
            2
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret';"
        },
        {
          "file_path": "/src/test/scopes-test.js",
          "match_lines": [
            3,
            3
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret'; // set by ENV Variable"
        },
        {
          "file_path": "/src/test/server.js",
          "match_lines": [
            2,
            2
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret';"
        },
        {
          "file_path": "/src/test/test.js",
          "match_lines": [
            3,
            3
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret';"
        },
        {
          "file_path": "/src/test/url-token-test.js",
          "match_lines": [
            3,
            3
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret';"
        },
        {
          "file_path": "/src/test/validate-func-test.js",
          "match_lines": [
            4,
            4
          ],
          "match_position": [
            1,
            36
          ],
          "match_string": "var secret = 'NeverShareYourSecret';"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded secret is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
