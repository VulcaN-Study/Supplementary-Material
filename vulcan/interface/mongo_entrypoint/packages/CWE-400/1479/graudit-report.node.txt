/src/README.md-16-
/src/README.md:17:Http.createServer((request, response) => {
/src/README.md-18-
/src/README.md:19:    Subtext.parse(request, null, { parse: true, output: 'data' }, (err, parsed) => {
/src/README.md-20-
##############################################
/src/lib/index.js-83-    if (this.settings.parse === true) {
/src/lib/index.js:84:        return this.parse(contentType);
/src/lib/index.js-85-    }
##############################################
/src/lib/index.js-142-    if (output === 'file') {
/src/lib/index.js:143:        this.writeFile(source, (err, path, bytes) => {
/src/lib/index.js-144-
##############################################
/src/lib/index.js-220-    if (output === 'file') {
/src/lib/index.js:221:        this.writeFile(source, (err, path, bytes) => {
/src/lib/index.js-222-
##############################################
/src/lib/index.js-286-    try {
/src/lib/index.js:287:        parsed = Bourne.parse(payload.toString('utf8'));
/src/lib/index.js-288-    }
##############################################
/src/lib/index.js-363-            pendingFiles[id] = true;
/src/lib/index.js:364:            this.writeFile(part, (err, path, bytes) => {
/src/lib/index.js-365-
##############################################
/src/lib/index.js-459-        file.destroy();
/src/lib/index.js:460:        Fs.unlink(path, (/* fsErr */) => {      // Ignore unlink errors
/src/lib/index.js-461-
