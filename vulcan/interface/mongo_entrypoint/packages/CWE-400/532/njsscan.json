{
  "errors": [
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 25,
          "line": 19
        },
        "extra": {
          "line": "export { some as default };",
          "message": "Syntax error"
        },
        "path": "/src/src/lib/utils/some.js",
        "start": {
          "col": 18,
          "line": 19
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 28,
          "line": 18
        },
        "extra": {
          "line": "export { indexOf as default };",
          "message": "Syntax error"
        },
        "path": "/src/src/lib/utils/index-of.js",
        "start": {
          "col": 21,
          "line": 18
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 17,
          "line": 1
        },
        "extra": {
          "line": "Copyright (c) JS Foundation and other contributors",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 15,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 25,
          "line": 19
        },
        "extra": {
          "line": "export { keys as default };",
          "message": "Syntax error"
        },
        "path": "/src/src/lib/utils/keys.js",
        "start": {
          "col": 18,
          "line": 19
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_timing_attack": {
      "files": [
        {
          "file_path": "/src/src/locale/ko.js",
          "match_lines": [
            68,
            68
          ],
          "match_position": [
            9,
            34
          ],
          "match_string": "        return token === '\uc624\ud6c4';"
        },
        {
          "file_path": "/src/locale/ko.js",
          "match_lines": [
            74,
            74
          ],
          "match_position": [
            9,
            34
          ],
          "match_string": "        return token === '\uc624\ud6c4';"
        },
        {
          "file_path": "/src/min/locales.js",
          "match_lines": [
            5024,
            5024
          ],
          "match_position": [
            9,
            34
          ],
          "match_string": "        return token === '\uc624\ud6c4';"
        },
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            9524,
            9524
          ],
          "match_position": [
            9,
            34
          ],
          "match_string": "        return token === '\uc624\ud6c4';"
        }
      ],
      "metadata": {
        "cwe": "CWE-208: Observable Timing Discrepancy",
        "description": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            625,
            625
          ],
          "match_position": [
            22,
            55
          ],
          "match_string": "    while (i >= 0 && localFormattingTokens.test(format)) {"
        },
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            1016,
            1016
          ],
          "match_position": [
            44,
            83
          ],
          "match_string": "        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            1018,
            1018
          ],
          "match_position": [
            50,
            90
          ],
          "match_string": "        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            1020,
            1020
          ],
          "match_position": [
            31,
            66
          ],
          "match_string": "        } else if (!strict && this._monthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            1483,
            1483
          ],
          "match_position": [
            44,
            87
          ],
          "match_string": "        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            1485,
            1485
          ],
          "match_position": [
            50,
            94
          ],
          "match_string": "        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            1487,
            1487
          ],
          "match_position": [
            49,
            91
          ],
          "match_string": "        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/min/moment-with-locales.js",
          "match_lines": [
            1489,
            1489
          ],
          "match_position": [
            31,
            70
          ],
          "match_string": "        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/moment.js",
          "match_lines": [
            631,
            631
          ],
          "match_position": [
            22,
            55
          ],
          "match_string": "    while (i >= 0 && localFormattingTokens.test(format)) {"
        },
        {
          "file_path": "/src/moment.js",
          "match_lines": [
            1022,
            1022
          ],
          "match_position": [
            44,
            83
          ],
          "match_string": "        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/moment.js",
          "match_lines": [
            1024,
            1024
          ],
          "match_position": [
            50,
            90
          ],
          "match_string": "        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/moment.js",
          "match_lines": [
            1026,
            1026
          ],
          "match_position": [
            31,
            66
          ],
          "match_string": "        } else if (!strict && this._monthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/moment.js",
          "match_lines": [
            1489,
            1489
          ],
          "match_position": [
            44,
            87
          ],
          "match_string": "        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/moment.js",
          "match_lines": [
            1491,
            1491
          ],
          "match_position": [
            50,
            94
          ],
          "match_string": "        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/moment.js",
          "match_lines": [
            1493,
            1493
          ],
          "match_position": [
            49,
            91
          ],
          "match_string": "        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/moment.js",
          "match_lines": [
            1495,
            1495
          ],
          "match_position": [
            31,
            70
          ],
          "match_string": "        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/package.js",
          "match_lines": [
            8,
            8
          ],
          "match_position": [
            20,
            41
          ],
          "match_string": "            return /\\.js$/.test(filename);"
        },
        {
          "file_path": "/src/src/lib/units/month.js",
          "match_lines": [
            167,
            167
          ],
          "match_position": [
            44,
            83
          ],
          "match_string": "        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/src/lib/units/month.js",
          "match_lines": [
            169,
            169
          ],
          "match_position": [
            50,
            90
          ],
          "match_string": "        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/src/lib/units/month.js",
          "match_lines": [
            171,
            171
          ],
          "match_position": [
            31,
            66
          ],
          "match_string": "        } else if (!strict && this._monthsParse[i].test(monthName)) {"
        },
        {
          "file_path": "/src/src/lib/format/format.js",
          "match_lines": [
            85,
            85
          ],
          "match_position": [
            22,
            55
          ],
          "match_string": "    while (i >= 0 && localFormattingTokens.test(format)) {"
        },
        {
          "file_path": "/src/src/lib/units/day-of-week.js",
          "match_lines": [
            212,
            212
          ],
          "match_position": [
            44,
            87
          ],
          "match_string": "        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/src/lib/units/day-of-week.js",
          "match_lines": [
            214,
            214
          ],
          "match_position": [
            50,
            94
          ],
          "match_string": "        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/src/lib/units/day-of-week.js",
          "match_lines": [
            216,
            216
          ],
          "match_position": [
            49,
            91
          ],
          "match_string": "        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {"
        },
        {
          "file_path": "/src/src/lib/units/day-of-week.js",
          "match_lines": [
            218,
            218
          ],
          "match_position": [
            31,
            70
          ],
          "match_string": "        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
