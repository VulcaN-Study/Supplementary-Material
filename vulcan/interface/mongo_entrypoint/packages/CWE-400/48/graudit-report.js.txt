/src/tools/node.js-61-            sourcesContent[file] = code;
/src/tools/node.js:62:            toplevel = UglifyJS.parse(code, {
/src/tools/node.js-63-                filename: options.fromString ? i : file,
##############################################
/src/tools/node.js-190-    var data = fs.readFileSync(filename, "utf8");
/src/tools/node.js:191:    data = JSON.parse(data);
/src/tools/node.js-192-    if (data.vars) {
##############################################
/src/tools/node.js-215-            var cache = fs.readFileSync(filename, "utf8");
/src/tools/node.js:216:            cache = JSON.parse(cache)[key];
/src/tools/node.js-217-            if (!cache) throw "init";
##############################################
/src/tools/node.js-233-            data = fs.readFileSync(filename, "utf8");
/src/tools/node.js:234:            data = JSON.parse(data);
/src/tools/node.js-235-        } catch(ex) {
##############################################
/src/tools/domprops.json-4499-        "prefix",
/src/tools/domprops.json:4500:        "preload",
/src/tools/domprops.json-4501-        "preserveAlpha",
##############################################
/src/README.md-608-var result = UglifyJS.minify("compiled.js", {
/src/README.md:609:	inSourceMap: JSON.parse(my_source_map_string),
/src/README.md-610-	outSourceMap: "minified.js.map"
##############################################
/src/README.md-642-```javascript
/src/README.md:643:var toplevel_ast = UglifyJS.parse(code, options);
/src/README.md-644-```
##############################################
/src/README.md-661-	var code = fs.readFileSync(file, "utf8");
/src/README.md:662:	toplevel = UglifyJS.parse(code, {
/src/README.md-663-		filename: file,
##############################################
/src/bin/extract-props.js-17-if (ARGS.o) try {
/src/bin/extract-props.js:18:    output = JSON.parse(fs.readFileSync(ARGS.o, "utf8"));
/src/bin/extract-props.js-19-} catch(ex) {}
##############################################
/src/bin/extract-props.js-30-    var code = fs.readFileSync(filename, "utf8");
/src/bin/extract-props.js:31:    var ast = U2.parse(code);
/src/bin/extract-props.js-32-
##############################################
/src/bin/uglifyjs-261-if (ORIG_MAP) {
/src/bin/uglifyjs:262:    ORIG_MAP = JSON.parse(fs.readFileSync(ORIG_MAP));
/src/bin/uglifyjs-263-    if (files.length == 0) {
##############################################
/src/bin/uglifyjs-330-            if (ARGS.spidermonkey) {
/src/bin/uglifyjs:331:                var program = JSON.parse(code);
/src/bin/uglifyjs-332-                if (!TOPLEVEL) TOPLEVEL = program;
##############################################
/src/bin/uglifyjs-335-            else if (ARGS.acorn) {
/src/bin/uglifyjs:336:                TOPLEVEL = acorn.parse(code, {
/src/bin/uglifyjs-337-                    locations     : true,
##############################################
/src/bin/uglifyjs-343-                try {
/src/bin/uglifyjs:344:                    TOPLEVEL = UglifyJS.parse(code, {
/src/bin/uglifyjs-345-                        filename     : file,
##############################################
/src/bin/uglifyjs-491-        try {
/src/bin/uglifyjs:492:            ast = UglifyJS.parse(x, { expression: true });
/src/bin/uglifyjs-493-        } catch(ex) {
##############################################
/src/bin/uglifyjs-532-    } else {
/src/bin/uglifyjs:533:        fs.readFile(filename, "utf-8", cb);
/src/bin/uglifyjs-534-    }
##############################################
/src/lib/compress.js-716-            try {
/src/lib/compress.js:717:                var val = this._eval(compressor);
/src/lib/compress.js-718-                return [ best_of(make_node_from_constant(compressor, val, this), this), val ];
##############################################
/src/lib/compress.js-736-
/src/lib/compress.js:737:            return node._eval(compressor);
/src/lib/compress.js-738-        };
