[
 {
  "id": 1,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrCpy",
  "match": "        }\n\n        if (strncmp(pname, match, match_len) == 0)\n        {\n            result = malloc(strlen(pname) + 1);\n            strcpy(result, pname);\n            krb5_free_unparsed_name(kcontext, pname);\n            krb5_free_keytab_entry_contents(kcontext, &entry);\n            break;\n        }\n",
  "line": 127,
  "start": 122,
  "end": 133
 },
 {
  "id": 2,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrNCpy",
  "match": "      response->return_code = AUTH_GSS_ERROR;\n      goto end;\n    } else {\n      state->username = (char *)malloc(name_token.length + 1);\n      if(state->username == NULL) die1(\"Memory allocation failed\");\n      strncpy(state->username, (char*) name_token.value, name_token.length);\n      state->username[name_token.length] = 0;\n      gss_release_buffer(&min_stat, &name_token);\n      gss_release_name(&min_stat, &gssuser);\n    }\n  }",
  "line": 312,
  "start": 307,
  "end": 318
 },
 {
  "id": 3,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrNCpy",
  "match": "    // agree to terms (hack!)\n    buf_size = htonl(buf_size); // not relevant without integrity/privacy\n    memcpy(buf, &buf_size, 4);\n    buf[0] = GSS_AUTH_P_NONE;\n    // server decides if principal can log in as user\n    strncpy(buf + 4, user, sizeof(buf) - 4);\n    input_token.value = buf;\n    input_token.length = 4 + strlen(user);\n  }\n\n  // Do GSSAPI wrap",
  "line": 480,
  "start": 475,
  "end": 486
 },
 {
  "id": 4,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrNCpy",
  "match": "\tresponse = gss_error(__func__, \"gss_display_name\", maj_stat, min_stat);\n\tresponse->return_code = AUTH_GSS_ERROR;\n\tgoto end;\n    }\n    state->username = (char *)malloc(output_token.length + 1);\n    strncpy(state->username, (char*) output_token.value, output_token.length);\n    state->username[output_token.length] = 0;\n\n    // Get the target name if no server creds were supplied\n    if (state->server_creds == GSS_C_NO_CREDENTIAL)\n    {",
  "line": 757,
  "start": 752,
  "end": 763
 },
 {
  "id": 5,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrNCpy",
  "match": "\t    response = gss_error(__func__, \"gss_display_name\", maj_stat, min_stat);\n\t    response->return_code = AUTH_GSS_ERROR;\n\t    goto end;\n\t}\n\tstate->targetname = (char *)malloc(output_token.length + 1);\n\tstrncpy(state->targetname, (char*) output_token.value, output_token.length);\n\tstate->targetname[output_token.length] = 0;\n    }\n\n    if (state->constrained_delegation && state->client_creds != GSS_C_NO_CREDENTIAL)\n    {",
  "line": 779,
  "start": 774,
  "end": 785
 },
 {
  "id": 6,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strcpy",
  "match": "        }\n\n        if (strncmp(pname, match, match_len) == 0)\n        {\n            result = malloc(strlen(pname) + 1);\n            strcpy(result, pname);\n            krb5_free_unparsed_name(kcontext, pname);\n            krb5_free_keytab_entry_contents(kcontext, &entry);\n            break;\n        }\n",
  "line": 127,
  "start": 122,
  "end": 133
 },
 {
  "id": 7,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strncpy",
  "match": "      response->return_code = AUTH_GSS_ERROR;\n      goto end;\n    } else {\n      state->username = (char *)malloc(name_token.length + 1);\n      if(state->username == NULL) die1(\"Memory allocation failed\");\n      strncpy(state->username, (char*) name_token.value, name_token.length);\n      state->username[name_token.length] = 0;\n      gss_release_buffer(&min_stat, &name_token);\n      gss_release_name(&min_stat, &gssuser);\n    }\n  }",
  "line": 312,
  "start": 307,
  "end": 318
 },
 {
  "id": 8,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strncpy",
  "match": "    // agree to terms (hack!)\n    buf_size = htonl(buf_size); // not relevant without integrity/privacy\n    memcpy(buf, &buf_size, 4);\n    buf[0] = GSS_AUTH_P_NONE;\n    // server decides if principal can log in as user\n    strncpy(buf + 4, user, sizeof(buf) - 4);\n    input_token.value = buf;\n    input_token.length = 4 + strlen(user);\n  }\n\n  // Do GSSAPI wrap",
  "line": 480,
  "start": 475,
  "end": 486
 },
 {
  "id": 9,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strncpy",
  "match": "\tresponse = gss_error(__func__, \"gss_display_name\", maj_stat, min_stat);\n\tresponse->return_code = AUTH_GSS_ERROR;\n\tgoto end;\n    }\n    state->username = (char *)malloc(output_token.length + 1);\n    strncpy(state->username, (char*) output_token.value, output_token.length);\n    state->username[output_token.length] = 0;\n\n    // Get the target name if no server creds were supplied\n    if (state->server_creds == GSS_C_NO_CREDENTIAL)\n    {",
  "line": 757,
  "start": 752,
  "end": 763
 },
 {
  "id": 10,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strncpy",
  "match": "\t    response = gss_error(__func__, \"gss_display_name\", maj_stat, min_stat);\n\t    response->return_code = AUTH_GSS_ERROR;\n\t    goto end;\n\t}\n\tstate->targetname = (char *)malloc(output_token.length + 1);\n\tstrncpy(state->targetname, (char*) output_token.value, output_token.length);\n\tstate->targetname[output_token.length] = 0;\n    }\n\n    if (state->constrained_delegation && state->client_creds != GSS_C_NO_CREDENTIAL)\n    {",
  "line": 779,
  "start": 774,
  "end": 785
 },
 {
  "id": 11,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrNCpy",
  "match": "      response->return_code = AUTH_GSS_ERROR;\n      goto end;\n    } else {\n      state->username = (char *)malloc(name_token.length + 1);\n      if(state->username == NULL) die1(\"Memory allocation failed\");\n      strncpy(state->username, (char*) name_token.value, name_token.length);\n      state->username[name_token.length] = 0;\n      gss_release_buffer(&min_stat, &name_token);\n      gss_release_name(&min_stat, &gssuser);\n    }\n  }",
  "line": 312,
  "start": 307,
  "end": 318
 },
 {
  "id": 12,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrNCpy",
  "match": "    // agree to terms (hack!)\n    buf_size = htonl(buf_size); // not relevant without integrity/privacy\n    memcpy(buf, &buf_size, 4);\n    buf[0] = GSS_AUTH_P_NONE;\n    // server decides if principal can log in as user\n    strncpy(buf + 4, user, sizeof(buf) - 4);\n    input_token.value = buf;\n    input_token.length = 4 + strlen(user);\n  }\n\n  // Do GSSAPI wrap",
  "line": 480,
  "start": 475,
  "end": 486
 },
 {
  "id": 13,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrNCpy",
  "match": "\tresponse = gss_error(__func__, \"gss_display_name\", maj_stat, min_stat);\n\tresponse->return_code = AUTH_GSS_ERROR;\n\tgoto end;\n    }\n    state->username = (char *)malloc(output_token.length + 1);\n    strncpy(state->username, (char*) output_token.value, output_token.length);\n    state->username[output_token.length] = 0;\n\n    // Get the target name if no server creds were supplied\n    if (state->server_creds == GSS_C_NO_CREDENTIAL)\n    {",
  "line": 757,
  "start": 752,
  "end": 763
 },
 {
  "id": 14,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "StrNCpy",
  "match": "\t    response = gss_error(__func__, \"gss_display_name\", maj_stat, min_stat);\n\t    response->return_code = AUTH_GSS_ERROR;\n\t    goto end;\n\t}\n\tstate->targetname = (char *)malloc(output_token.length + 1);\n\tstrncpy(state->targetname, (char*) output_token.value, output_token.length);\n\tstate->targetname[output_token.length] = 0;\n    }\n\n    if (state->constrained_delegation && state->client_creds != GSS_C_NO_CREDENTIAL)\n    {",
  "line": 779,
  "start": 774,
  "end": 785
 },
 {
  "id": 15,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strncpy",
  "match": "      response->return_code = AUTH_GSS_ERROR;\n      goto end;\n    } else {\n      state->username = (char *)malloc(name_token.length + 1);\n      if(state->username == NULL) die1(\"Memory allocation failed\");\n      strncpy(state->username, (char*) name_token.value, name_token.length);\n      state->username[name_token.length] = 0;\n      gss_release_buffer(&min_stat, &name_token);\n      gss_release_name(&min_stat, &gssuser);\n    }\n  }",
  "line": 312,
  "start": 307,
  "end": 318
 },
 {
  "id": 16,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strncpy",
  "match": "    // agree to terms (hack!)\n    buf_size = htonl(buf_size); // not relevant without integrity/privacy\n    memcpy(buf, &buf_size, 4);\n    buf[0] = GSS_AUTH_P_NONE;\n    // server decides if principal can log in as user\n    strncpy(buf + 4, user, sizeof(buf) - 4);\n    input_token.value = buf;\n    input_token.length = 4 + strlen(user);\n  }\n\n  // Do GSSAPI wrap",
  "line": 480,
  "start": 475,
  "end": 486
 },
 {
  "id": 17,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strncpy",
  "match": "\tresponse = gss_error(__func__, \"gss_display_name\", maj_stat, min_stat);\n\tresponse->return_code = AUTH_GSS_ERROR;\n\tgoto end;\n    }\n    state->username = (char *)malloc(output_token.length + 1);\n    strncpy(state->username, (char*) output_token.value, output_token.length);\n    state->username[output_token.length] = 0;\n\n    // Get the target name if no server creds were supplied\n    if (state->server_creds == GSS_C_NO_CREDENTIAL)\n    {",
  "line": 757,
  "start": 752,
  "end": 763
 },
 {
  "id": 18,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "strncpy",
  "match": "\t    response = gss_error(__func__, \"gss_display_name\", maj_stat, min_stat);\n\t    response->return_code = AUTH_GSS_ERROR;\n\t    goto end;\n\t}\n\tstate->targetname = (char *)malloc(output_token.length + 1);\n\tstrncpy(state->targetname, (char*) output_token.value, output_token.length);\n\tstate->targetname[output_token.length] = 0;\n    }\n\n    if (state->constrained_delegation && state->client_creds != GSS_C_NO_CREDENTIAL)\n    {",
  "line": 779,
  "start": 774,
  "end": 785
 },
 {
  "id": 19,
  "file": "/src/lib/kerberosgss.c",
  "filetype": "c",
  "search": "memcpy",
  "match": "    printf(\"Maximum GSS token size is %ld\\n\", buf_size);\n#endif\n\n    // agree to terms (hack!)\n    buf_size = htonl(buf_size); // not relevant without integrity/privacy\n    memcpy(buf, &buf_size, 4);\n    buf[0] = GSS_AUTH_P_NONE;\n    // server decides if principal can log in as user\n    strncpy(buf + 4, user, sizeof(buf) - 4);\n    input_token.value = buf;\n    input_token.length = 4 + strlen(user);",
  "line": 477,
  "start": 472,
  "end": 483
 }
]
