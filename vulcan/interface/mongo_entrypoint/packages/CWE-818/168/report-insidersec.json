{
 "dra": [
  {
   "dra": "http://mxcl.github.com/homebrew/",
   "type": "url",
   "file": "/src/bin/preinstall.js"
  },
  {
   "dra": "http://community.appgyver.com",
   "type": "url",
   "file": "/src/bin/preinstall.js"
  },
  {
   "dra": "https://github.com/mhevery/jasmine-node/pull/142",
   "type": "url",
   "file": "/src/spec/monkeypatch_timeout.js"
  }
 ],
 "sca": [
  {
   "cwe": "CWE-471",
   "cves": "CVE-2018-16487",
   "sast": "",
   "title": "Prototype Pollution - lodash",
   "severity": "high",
   "advisoryId": 782,
   "description": "Versions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n",
   "recomendation": "Update to version 4.17.11 or later."
  },
  {
   "cwe": "CWE-94",
   "cves": "",
   "sast": "",
   "title": "Code Injection - js-yaml",
   "severity": "high",
   "advisoryId": 813,
   "description": "Versions of `js-yaml` prior to 3.13.1 are vulnerable to Code Injection. The `load()` function may execute arbitrary code injected through a malicious YAML file. Objects that have `toString` as key, JavaScript code as value and are used as explicit mapping keys allow attackers to execute the supplied code through the `load()` function. The `safeLoad()` function is unaffected.\n\nAn example payload is \n`{ toString: !\u003ctag:yaml.org,2002:js/function\u003e 'function (){return Date.now()}' } : 1` \nwhich returns the object \n{\n  \"1553107949161\": 1\n}",
   "recomendation": "Upgrade to version 3.13.1."
  },
  {
   "cwe": "CWE-471",
   "cves": "CVE-2019-10744",
   "sast": "",
   "title": "Prototype Pollution - lodash",
   "severity": "low",
   "advisoryId": 1523,
   "description": "Versions of `lodash` prior to 4.17.19 are vulnerable to Prototype Pollution.  The function `zipObjectDeep` allows a malicious user to modify the prototype of `Object` if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.  \n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.",
   "recomendation": "Upgrade to version 4.17.19 or later."
  },
  {
   "cwe": "CWE-532",
   "cves": "CVE-2020-15095",
   "sast": "",
   "title": "Sensitive Data Exposure - npm",
   "severity": "low",
   "advisoryId": 1543,
   "description": "Versions of the npm CLI prior to 6.14.6 are vulnerable to an information exposure vulnerability through log files. The CLI supports URLs like `\u003cprotocol\u003e://[\u003cuser\u003e[:\u003cpassword\u003e]@]\u003chostname\u003e[:\u003cport\u003e][:][/]\u003cpath\u003e`. The password value is not redacted and is printed to stdout and also to any generated log files.",
   "recomendation": "Upgrade to version 6.14.6 or later."
  },
  {
   "cwe": "CWE-22",
   "cves": "",
   "sast": "",
   "title": "Arbitrary File Write - npm",
   "severity": "low",
   "advisoryId": 1434,
   "description": "Versions of the npm CLI prior to 6.13.3 are vulnerable to an Arbitrary File Write. It fails to prevent access to folders outside of the intended node_modules folder through the bin field. A properly constructed entry in the package.json bin field would allow a package publisher to create files on a user's system when the package is installed. It is only possible to affect files that the user running `npm install` has access to and it is not possible to over write files that already exist on disk.\n\nThis behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.",
   "recomendation": "Upgrade to version 6.13.3 or later."
  },
  {
   "cwe": "CWE-400",
   "cves": "CVE-2015-8855",
   "sast": "",
   "title": "Regular Expression Denial of Service - semver",
   "severity": "moderate",
   "advisoryId": 31,
   "description": "Versions 4.3.1 and earlier of `semver` are affected by a regular expression denial of service vulnerability when extremely long version strings are parsed.\n",
   "recomendation": "Update to version 4.3.2 or later"
  },
  {
   "cwe": "CWE-200",
   "cves": "CVE-2016-3956",
   "sast": "",
   "title": "npm Token Leak - npm",
   "severity": "high",
   "advisoryId": 98,
   "description": "Affected versions of the `npm` package include the bearer token of the logged in user in every request made by the CLI, even if the request is not directed towards the user's active registry. \n\nAn attacker could create an HTTP server to collect tokens, and by various means including but not limited to install scripts, cause the npm CLI to make a request to that server, which would compromise the user's token.\n\nThis compromised token could be used to do anything that the user could do, including publishing new packages.\n\n",
   "recomendation": "1. Update npm with `npm install npm@latest -g`\n2. [Revoke your Tokens](https://www.npmjs.com/settings/tokens)\n3. Enable [Two-Factor Authentication](https://docs.npmjs.com/getting-started/using-two-factor-authentication)"
  },
  {
   "cwe": "CWE-201",
   "cves": "CVE-2017-16026",
   "sast": "",
   "title": "Remote Memory Exposure - request",
   "severity": "moderate",
   "advisoryId": 309,
   "description": "Affected versions of `request` will disclose local system memory to remote systems in certain circumstances. When a multipart request is made, and the type of `body` is `number`, then a buffer of that size will be allocated and sent to the remote server as the body.\n\n## Proof of Concept\n\n```\nvar request = require('request');\nvar http = require('http');\n\nvar serveFunction = function (req, res){\n\treq.on('data', function (data) {\n            console.log(data)\n        });\n\tres.end();\n};\nvar server = http.createServer(serveFunction);\nserver.listen(8000);\n\nrequest({\n\tmethod: \"POST\",\n\turi: 'http://localhost:8000',\n\tmultipart: [{body:500}]\n},function(err,res,body){});\n```",
   "recomendation": "Update to version 2.68.0 or later\n"
  },
  {
   "cwe": "CWE-78",
   "cves": "",
   "sast": "",
   "title": "Command Injection - open",
   "severity": "critical",
   "advisoryId": 663,
   "description": "Versions of `open` before 6.0.0 are vulnerable to command injection when unsanitized user input is passed in.\n\nThe package does come with the following warning in the readme:\n\n```\nThe same care should be taken when calling open as if you were calling child_process.exec directly. If it is an executable it will run in a new shell.\n```",
   "recomendation": "`open` is now the deprecated `opn` package. Upgrading to the latest version is likely have unwanted effects since it now has a very different API but will prevent this vulnerability."
  },
  {
   "cwe": "CWE-59",
   "cves": "",
   "sast": "",
   "title": "Symlink Arbitrary File Overwrite - bower",
   "severity": "high",
   "advisoryId": 776,
   "description": "Versions of `bower` prior to 1.8.8 are affected by an arbitrary file write vulnerability. The vulnerability occurs because `bower` does not verify that extracted symbolic links do not resolve to targets outside of the extraction root directory.\n",
   "recomendation": "Update to version 1.8.8 or later"
  },
  {
   "cwe": "CWE-471",
   "cves": "CVE-2019-10744",
   "sast": "",
   "title": "Prototype Pollution - lodash",
   "severity": "high",
   "advisoryId": 1065,
   "description": "Versions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n",
   "recomendation": "Update to version 4.17.12 or later."
  },
  {
   "cwe": "CWE-471",
   "cves": "CVE-2018-3721",
   "sast": "",
   "title": "Prototype Pollution - lodash",
   "severity": "low",
   "advisoryId": 577,
   "description": "Versions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n",
   "recomendation": "Update to version 4.17.5 or later."
  },
  {
   "cwe": "CWE-400",
   "cves": "",
   "sast": "",
   "title": "Denial of Service - js-yaml",
   "severity": "moderate",
   "advisoryId": 788,
   "description": "Versions of `js-yaml` prior to 3.13.0 are vulnerable to Denial of Service. By parsing a carefully-crafted YAML file, the node process stalls and may exhaust system resources leading to a Denial of Service.",
   "recomendation": "Upgrade to version 3.13.0."
  },
  {
   "cwe": "CWE-552",
   "cves": "",
   "sast": "",
   "title": "Symlink reference outside of node_modules - npm",
   "severity": "low",
   "advisoryId": 1436,
   "description": "Versions of the npm CLI prior to 6.13.3 are vulnerable to a symlink reference outside of node_modules. It is possible for packages to create symlinks to files outside of the`node_modules` folder through the `bin` field upon installation. A properly constructed entry in the package.json bin field would allow a package publisher to create a symlink pointing to arbitrary files on a userâ€™s system when the package is installed. Only files accessible by the user running the `npm install` are affected.  \n\nThis behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.",
   "recomendation": "Upgrade to version 6.13.3 or later."
  },
  {
   "cwe": "CWE-22",
   "cves": "",
   "sast": "",
   "title": "Global node_modules Binary Overwrite - npm",
   "severity": "low",
   "advisoryId": 1437,
   "description": "Versions of  the npm CLI prior to 6.13.4 are vulnerable to a Global node_modules Binary Overwrite. It fails to prevent existing globally-installed binaries to be overwritten by other package installations. \n\nFor example, if a package was installed globally and created a `serve` binary, any subsequent installs of packages that also create a `serve` binary would overwrite the first binary. This will not overwrite system binaries but only binaries put into the global node_modules directory.\n\nThis behavior is still allowed in local installations and also through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.",
   "recomendation": "Upgrade to version 6.13.4 or later."
  }
 ],
 "sast": {
  "name": "steroids",
  "version": "4.1.27",
  "securityScore": 100,
  "size": "6190205 Bytes",
  "numberOfLines": 717
 },
 "libraries": [
  {
   "name": "express-json",
   "current": "1.0.0"
  },
  {
   "name": "figlet",
   "current": "1.1.0"
  },
  {
   "name": "request",
   "current": "2.53.0"
  },
  {
   "name": "chokidar",
   "current": "1.0.5"
  },
  {
   "name": "coffee-script",
   "current": "1.6.3"
  },
  {
   "name": "chalk",
   "current": "0.3.0"
  },
  {
   "name": "grunt",
   "current": "0.4.5"
  },
  {
   "name": "inquirer",
   "current": "0.3.4"
  },
  {
   "name": "xml2js",
   "current": "0.4.4"
  },
  {
   "name": "baconjs",
   "current": "^0.7.71"
  },
  {
   "name": "body-parser",
   "current": "1.8.1"
  },
  {
   "name": "open",
   "current": "0.0.4"
  },
  {
   "name": "qrcode-terminal",
   "current": "0.9.4"
  },
  {
   "name": "steroids-ios-packages",
   "current": "http://appgyver-steroids.s3.amazonaws.com/steroids-ios-packages-5.0.1.tgz"
  },
  {
   "name": "xmlbuilder",
   "current": "2.6.1"
  },
  {
   "name": "fs-extra",
   "current": "0.13.0"
  },
  {
   "name": "npm",
   "current": "2.1.7"
  },
  {
   "name": "steroids-connect",
   "current": "1.1.1"
  },
  {
   "name": "bower",
   "current": "1.3.8"
  },
  {
   "name": "path-extra",
   "current": "0.3.0"
  },
  {
   "name": "yeoman-generator",
   "current": "0.17.7"
  },
  {
   "name": "data.either",
   "current": "1.2.0"
  },
  {
   "name": "winston",
   "current": "0.9.0"
  },
  {
   "name": "lodash",
   "current": "2.4.1"
  },
  {
   "name": "optimist",
   "current": "0.6.0"
  },
  {
   "name": "prompt",
   "current": "0.2.14"
  },
  {
   "name": "wrench",
   "current": "1.5.4"
  },
  {
   "name": "colorize",
   "current": "0.1.0"
  },
  {
   "name": "download",
   "current": "^4.2.0"
  },
  {
   "name": "js-yaml",
   "current": "3.0.2"
  },
  {
   "name": "oauth",
   "current": "0.9.10"
  },
  {
   "name": "portscanner",
   "current": "1.0.0"
  },
  {
   "name": "q",
   "current": "1.4.1"
  },
  {
   "name": "restler",
   "current": "3.2.2"
  },
  {
   "name": "steroids-android-packages",
   "current": "http://steroids-assets.appgyver.com/steroids-android-packages-4.1.0.tgz"
  },
  {
   "name": "chrome-cli",
   "current": "http://steroids-assets.appgyver.com/chrome-cli-1.5.0-AppGyver-p0.tgz"
  },
  {
   "name": "express",
   "current": "4.8.8"
  },
  {
   "name": "tiny-lr",
   "current": "http://steroids-assets.appgyver.com/tiny-lr-0.1.4-AppGyver-p0.tgz"
  },
  {
   "name": "ios-sim",
   "current": "5.0.8"
  },
  {
   "name": "semver",
   "current": "2.3.1"
  },
  {
   "name": "bluebird",
   "current": "2.9.34"
  },
  {
   "name": "generator-steroids",
   "current": "1.0.22"
  }
 ]
}