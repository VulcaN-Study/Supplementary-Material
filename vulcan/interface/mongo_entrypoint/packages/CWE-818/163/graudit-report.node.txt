/src/examples/describe.js-10-//open a connection to the database
/src/examples/describe.js:11:db.open("DSN=myDsnName;UID=myUserName;PWD=mySuperSecretPassword;DATABASE=myAwesomeDatabase", function(err)
/src/examples/describe.js-12-{
##############################################
/src/examples/params.js-11-//open a connection to the database
/src/examples/params.js:12:db.open("DSN=myDsnName;UID=myUserName;PWD=mySuperSecretPassword;DATABASE=myAwesomeDatabase;CHARSET=UTF8", function(err)
/src/examples/params.js-13-{
##############################################
/src/README.md-35-
/src/README.md:36:ibmdb.open("DATABASE=<dbname>;HOSTNAME=<myhost>;UID=db2user;PWD=password;PORT=<dbport>;PROTOCOL=TCPIP", function (err,conn) {
/src/README.md-37-  if (err) return console.log(err);
##############################################
/src/README.md-112-```javascript
/src/README.md:113:require("ibm_db").open(connectionString, function (err, conn){
/src/README.md-114-  //conn is already open now if err is falsy
##############################################
/src/README.md-130-
/src/README.md:131:1.  [.open(connectionString, [options,] callback)](#openApi)
/src/README.md-132-2.  [.openSync(connectionString)](#openSyncApi)
##############################################
/src/README.md-153-
/src/README.md:154:### <a name="openApi"></a> 1) .open(connectionString, [options,] callback)
/src/README.md-155-
##############################################
/src/README.md-167-
/src/README.md:168:ibmdb.open(connStr, function (err, connection) {
/src/README.md-169-    if (err) 
##############################################
/src/README.md-235-
/src/README.md:236:ibmdb.open(cn, function (err, conn) {
/src/README.md-237-	if (err) {
##############################################
/src/README.md-269-
/src/README.md:270:ibmdb.open(cn, function(err, conn){
/src/README.md-271-
##############################################
/src/README.md-289-
/src/README.md:290:ibmdb.open(cn, function (err, conn) {
/src/README.md-291-	if (err) {
##############################################
/src/README.md-332-
/src/README.md:333:ibmdb.open(cn,function(err,conn){
/src/README.md-334-  conn.prepare("insert into hits (col1, col2) VALUES (?, ?)", function (err, stmt) {
##############################################
/src/README.md-365-
/src/README.md:366:ibmdb.open(cn,function(err,conn){
/src/README.md-367-  var stmt = conn.prepareSync("insert into hits (col1, col2) VALUES (?, ?)");
##############################################
/src/README.md-392-
/src/README.md:393:ibmdb.open(cn,function(err,conn){
/src/README.md-394-  conn.querySync("create table mytab (id int, photo BLOB(30K))");
##############################################
/src/README.md-437-
/src/README.md:438:ibmdb.open(cn, function(err,conn) {
/src/README.md-439-
##############################################
/src/README.md-473-
/src/README.md:474:ibmdb.open(cn, function(err,conn) {
/src/README.md-475-
##############################################
/src/README.md-505-
/src/README.md:506:ibmdb.open(cn, function(err,conn) {
/src/README.md-507-
##############################################
/src/README.md-541-
/src/README.md:542:ibmdb.open(cn, function(err,conn) {
/src/README.md-543-
##############################################
/src/README.md-602-the list of available connections immediately. Such connection will be used 
/src/README.md:603:the next time you call `Pool.open()` for the same connection string.
/src/README.md-604-
##############################################
/src/README.md-607-
/src/README.md:608:1.  [.open(connectionString, callback)](#openPoolApi)
/src/README.md-609-2.  [.close(callback)](#closePoolApi)
##############################################
/src/README.md-613-
/src/README.md:614:### <a name="openPoolApi"></a> 1) .open(connectionString, callback)
/src/README.md-615-
##############################################
/src/README.md-626-
/src/README.md:627:pool.open(cn, function (err, db) {
/src/README.md-628-	if (err) {
##############################################
/src/README.md-634-	//a connection to `cn` will be re-opened silently behind the scense
/src/README.md:635:	//and will be ready the next time we do `pool.open(cn)`
/src/README.md-636-});
##############################################
/src/README.md-650-
/src/README.md:651:pool.open(cn, function (err, db) {
/src/README.md-652-	if (err) {
##############################################
/src/README.md-678-
/src/README.md:679:pool.open(connStr, function(err, db) { ...
/src/README.md-680-```
##############################################
/src/README.md-688-pool.setMaxPoolSize(20);
/src/README.md:689:pool.open(connStr, function(err, db) { ...
/src/README.md-690-```
##############################################
/src/README.md-693-
/src/README.md:694:No of seconds pool.open() will wait for a connection to be available if all connections of the pool is in use and maxPoolSize is reached. Post connectTimeout, pool.open() will return error message.
/src/README.md-695-```
##############################################
/src/README.md-697-pool.setMaxPoolSize(20);
/src/README.md:698:pool.open(connStr, function(err, db) { ...
/src/README.md-699-```
##############################################
/src/lib/odbc.js-77-    deferred = Q.defer();
/src/lib/odbc.js:78:    db.open(connStr, function(err) {
/src/lib/odbc.js-79-      if (err)
##############################################
/src/lib/odbc.js-98-
/src/lib/odbc.js:99:  db.open(connStr, function (err) {
/src/lib/odbc.js-100-    cb(err, db);
##############################################
/src/lib/odbc.js-198-
/src/lib/odbc.js:199:    self.conn.open(connStr, function (err, result)
/src/lib/odbc.js-200-    {
##############################################
/src/lib/odbc.js-1238-    self.poolSize++;
/src/lib/odbc.js:1239:    db.open(connStr, function (error) {
/src/lib/odbc.js-1240-      exports.debug && console.log(
##############################################
/src/lib/odbc.js-1396-  //we set a timeout because a previous db.close() may
/src/lib/odbc.js:1397:  //have caused the a behind the scenes db.open() to prepare
/src/lib/odbc.js-1398-  //a new connection
##############################################
/src/test/test-binding-connection-timeOut.js-19-  console.log('Connecting...');
/src/test/test-binding-connection-timeOut.js:20:  conn.open(common.connectionString, function (err) {
/src/test/test-binding-connection-timeOut.js-21-    //TODO: it would be nice if we could somehow
##############################################
/src/test/test-max-pool-size.js-20-      console.error("Opening connection #", connectionIndex);
/src/test/test-max-pool-size.js:21:      pool.open(connectionString, function (err, connection) {
/src/test/test-max-pool-size.js-22-        if (err) {
##############################################
/src/test/test-open-close.js-14-
/src/test/test-open-close.js:15:db.open(common.connectionString, function(err) {
/src/test/test-open-close.js-16-  assert.equal(err, null);
##############################################
/src/test/nodeEE-stress-async-waterfall.js-31-		{
/src/test/nodeEE-stress-async-waterfall.js:32:			db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-async-waterfall.js-33-				runQueries();
##############################################
/src/test/test-ibm-db-issue18.js-13-*/
/src/test/test-ibm-db-issue18.js:14:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue18.js-15-{
##############################################
/src/test/bench-insertBatch1000.js-7-
/src/test/bench-insertBatch1000.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch1000.js-9-	if (err) {
##############################################
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-19-			
/src/test/nodeEE-leak-multiple-query-multiple-connections.js:20:			db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-multiple-query-multiple-connections.js-21-				runQueries(db, "T1Leak" + i);
##############################################
/src/test/test-multi-open-query-close.js-14-    
/src/test/test-multi-open-query-close.js:15:    db.open(common.connectionString, function(err) {
/src/test/test-multi-open-query-close.js-16-      if (err) {
##############################################
/src/test/nodeEE-leak-multiple-query-pool-connections.js-22-					console.log("Opening connection #", i);
/src/test/nodeEE-leak-multiple-query-pool-connections.js:23:	        		pool.open(common.connectionString, function (err, connection) {
/src/test/nodeEE-leak-multiple-query-pool-connections.js-24-						if (err) 
##############################################
/src/test/test-bad-connection-string.js-12-  
/src/test/test-bad-connection-string.js:13:db.open("this is wrong", function(err) {
/src/test/test-bad-connection-string.js-14-  console.log(err);
##############################################
/src/test/bench-prepare-not.js-7-
/src/test/bench-prepare-not.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-not.js-9-  if (err) {
##############################################
/src/test/bench-prepare-bindSync-executeNonQuery.js-7-
/src/test/bench-prepare-bindSync-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bindSync-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/promise-test-open-close.js-14-
/src/test/promise-test-open-close.js:15:db.open(common.connectionString).then(function(res) {
/src/test/promise-test-open-close.js-16-  assert.equal(db.connected, true);
##############################################
/src/test/test-domains-open.js-13-
/src/test/test-domains-open.js:14:   db.open("wrongConnectionString", function (error) {
/src/test/test-domains-open.js-15-      console.trace();
##############################################
/src/test/test-connection-object.js-6-
/src/test/test-connection-object.js:7:db.open(common.connectionObject, function(err){
/src/test/test-connection-object.js-8-  assert.equal(err, null);
##############################################
/src/test/test-pool-connect.js-13-      console.error("Opening connection #", connectionIndex);
/src/test/test-pool-connect.js:14:      pool.open(connectionString, function (err, connection) {
/src/test/test-pool-connect.js-15-        if (err) {
##############################################
/src/test/test-ibm-db-issue14.js-13-*/
/src/test/test-ibm-db-issue14.js:14:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue14.js-15-{
##############################################
/src/test/bench-query.js-4-
/src/test/bench-query.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query.js-6-	if (err) {
##############################################
/src/test/test-bad-pool-connection-issue-42.js-18-    }
/src/test/test-bad-pool-connection-issue-42.js:19:    pool.open(connectionString, function (err, connection) {
/src/test/test-bad-pool-connection-issue-42.js-20-        if (err) {
##############################################
/src/test/test-issue-get-column-value-2.js-14- 
/src/test/test-issue-get-column-value-2.js:15:  db.open(common.connectionString, function(err) {
/src/test/test-issue-get-column-value-2.js-16-    if (err) {
##############################################
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-35-					connections.push(db);
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js:36:					db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-async-waterfall-multiple-connections.js-37-						runQueries(db, "T1" + i, "T2" + i);
##############################################
/src/test/test-blob-file.js-10-
/src/test/test-blob-file.js:11:ibmdb.open(cn, function (err,conn) 
/src/test/test-blob-file.js-12-{
##############################################
/src/test/test-blob-file.js-78-            fs.unlinkSync("phool2.jpg");
/src/test/test-blob-file.js:79:            fs.unlink("trc2.fmt", function () { console.log('done'); });
/src/test/test-blob-file.js-80-          }
##############################################
/src/test/promise-test-all-data-types.js-5-
/src/test/promise-test-all-data-types.js:6:    ibmdb.open(cn).then(function(conn) {
/src/test/promise-test-all-data-types.js-7-      //conn.querySync("drop table mytab1");
##############################################
/src/test/test-basic-test.js-5-
/src/test/test-basic-test.js:6:ibmdb.open(cn, function(err, conn) {
/src/test/test-basic-test.js-7-  if(err) return console.log(err);
##############################################
/src/test/test-pool-rollbackTransaction.js-6-
/src/test/test-pool-rollbackTransaction.js:7:pool.open(cn, function (err, conn) {
/src/test/test-pool-rollbackTransaction.js-8-  if (err) {
##############################################
/src/test/test-call-stmt.js-10-var query = "CaLL " + schema + ".proc1(?, ?, ?)";
/src/test/test-call-stmt.js:11:ibmdb.open(cn, function (err, conn)
/src/test/test-call-stmt.js-12-{
##############################################
/src/test/bench-insertBatch10000.js-7-
/src/test/bench-insertBatch10000.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch10000.js-9-	if (err) {
##############################################
/src/test/test-open-connectTimeout.js-7-
/src/test/test-open-connectTimeout.js:8:db.open(common.connectionString, function(err) {
/src/test/test-open-connectTimeout.js-9-  assert.equal(db.conn.connectTimeout, 10);
##############################################
/src/test/nodeEE-stress-mixed-query.js-13-	{
/src/test/nodeEE-stress-mixed-query.js:14:		db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-mixed-query.js-15-			runQueries();
##############################################
/src/test/test-global-open-close.js-4-
/src/test/test-global-open-close.js:5:odbc.open(common.connectionString, function (err, conn) {
/src/test/test-global-open-close.js-6-  assert.equal(err, null);
##############################################
/src/test/bench-insertBatch100.js-7-
/src/test/bench-insertBatch100.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch100.js-9-	if (err) {
##############################################
/src/test/webapp.js-10-
/src/test/webapp.js:11:ibmdb.open(cn, function(err, connection) {
/src/test/webapp.js-12-    if(err) {
##############################################
/src/test/test-pool-uncommited.js-26-
/src/test/test-pool-uncommited.js:27:pool.open(cn, request);
/src/test/test-pool-uncommited.js:28:pool.open(cn, request);
/src/test/test-pool-uncommited.js-29-setTimeout(function() {
/src/test/test-pool-uncommited.js:30:    pool.open(cn, request);
/src/test/test-pool-uncommited.js:31:    pool.open(cn, request);
/src/test/test-pool-uncommited.js-32-}, 8000);
##############################################
/src/test/test-blob-insert.js-15-
/src/test/test-blob-insert.js:16:ibmdb.open(cn, function (err,conn) 
/src/test/test-blob-insert.js-17-{
##############################################
/src/test/test-blob-insert.js-89-            fs.unlinkSync(outputfile1);
/src/test/test-blob-insert.js:90:            fs.unlink(outputfile2, function () { console.log('done'); });
/src/test/test-blob-insert.js-91-          }
##############################################
/src/test/nodeEE-leak-huge-query.js-20-		initialMemHeap = util.inspect(process.memoryUsage().heapUsed);
/src/test/nodeEE-leak-huge-query.js:21:		db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-huge-query.js-22-			
##############################################
/src/test/bench-query-fetchAllSync.js-4-
/src/test/bench-query-fetchAllSync.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetchAllSync.js-6-  if (err) {
##############################################
/src/test/test-ibm-db-issue17.js-14-*/
/src/test/test-ibm-db-issue17.js:15:ibmdb.open(common.connectionString, function(err, conn)
/src/test/test-ibm-db-issue17.js-16-{
##############################################
/src/test/bench-query-fetch.js-4-
/src/test/bench-query-fetch.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetch.js-6-  if (err) {
##############################################
/src/test/test-pool-idle-connection.js-11-console.log("Trying to open a new connection at => " + getDateTime());
/src/test/test-pool-idle-connection.js:12:pool.open(cn, function (err,conn) {
/src/test/test-pool-idle-connection.js-13-  if (err) return console.log(err);
##############################################
/src/test/test-pool-idle-connection.js-27-      console.log("2 minutes elapesed, try to get connection from pool at ==> "+ starttime);
/src/test/test-pool-idle-connection.js:28:      pool.open(cn, function (err,conn) {
/src/test/test-pool-idle-connection.js-29-        if (err) return console.log(err);
##############################################
/src/test/test-pool-close.js-15-      console.error("Opening connection #", connectionIndex);
/src/test/test-pool-close.js:16:      pool.open(connectionString, function (err, connection) {
/src/test/test-pool-close.js-17-        //console.error("Opened connection #", connectionIndex);
##############################################
/src/test/bench-prepare-bind-executeNonQuery.js-6-
/src/test/bench-prepare-bind-executeNonQuery.js:7:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bind-executeNonQuery.js-8-  if (err) {
##############################################
/src/test/bench-prepare-bindSync-execute-closeSync.js-7-
/src/test/bench-prepare-bindSync-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bindSync-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/bench-prepare-bind-execute-closeSync.js-7-
/src/test/bench-prepare-bind-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-bind-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/bench-prepare-execute-closeSync.js-7-
/src/test/bench-prepare-execute-closeSync.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-execute-closeSync.js-9-  if (err) {
##############################################
/src/test/test-date.js-6-
/src/test/test-date.js:7:db.open(common.connectionString, function(err) {
/src/test/test-date.js-8-  assert.equal(err, null);
##############################################
/src/test/test-all-data-types.js-5-
/src/test/test-all-data-types.js:6:    ibmdb.open(cn, function(err, conn) {
/src/test/test-all-data-types.js-7-      if(err) return console.log(err);
##############################################
/src/test/bench-insert.js-4-
/src/test/bench-insert.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-insert.js-6-	if (err) {
##############################################
/src/test/bench-query-fetchAll.js-4-
/src/test/bench-query-fetchAll.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-query-fetchAll.js-6-  if (err) {
##############################################
/src/test/test-query-insert.js-7-
/src/test/test-query-insert.js:8:db.open(common.connectionString, function(err) {
/src/test/test-query-insert.js-9-  common.dropTables(db, function () {
##############################################
/src/test/test-issue-54.js-19-
/src/test/test-issue-54.js:20:db.open(common.connectionString, function(err) {
/src/test/test-issue-54.js-21-  console.log(err || "Connected")
##############################################
/src/test/bench-querySync-fetchArray.js-4-
/src/test/bench-querySync-fetchArray.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-querySync-fetchArray.js-6-  if (err) {
##############################################
/src/test/disabled/test-param-select-with-booleans-only.js-6-
/src/test/disabled/test-param-select-with-booleans-only.js:7:db.open(common.testConnectionStrings[0].connectionString, function (err) {
/src/test/disabled/test-param-select-with-booleans-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-unicode.js-6-
/src/test/disabled/test-param-select-with-unicode.js:7:db.open(common.connectionString, function(err) {
/src/test/disabled/test-param-select-with-unicode.js-8-  db.query("select ? as UNICODETEXT", ['ף צ ץ ק ר ש תכ ך ל מ ם נ ן ס ע פ 電电電買买買開开開東东東車车車'], function (err, data) {
##############################################
/src/test/disabled/test-param-select-with-decimals-only.js-6-
/src/test/disabled/test-param-select-with-decimals-only.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-decimals-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js-6-
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js:7:db.open(common.connectionString, function(err){ 
/src/test/disabled/test-prepare-bindSync-executeNonQuery.js-8-  if (err) {
##############################################
/src/test/disabled/test-param-select-with-nulls-mixed.js-6-
/src/test/disabled/test-param-select-with-nulls-mixed.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-nulls-mixed.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-strings-only.js-6-
/src/test/disabled/test-param-select-with-strings-only.js:7:db.open(common.testConnectionStrings[0].connectionString, function (err) {
/src/test/disabled/test-param-select-with-strings-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-null.js-6-
/src/test/disabled/test-param-select-with-null.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-null.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-param-select-with-numbers-mixed.js-6-
/src/test/disabled/test-param-select-with-numbers-mixed.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-numbers-mixed.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-open-dont-close.js-4-
/src/test/disabled/test-open-dont-close.js:5:db.open(common.connectionString, function(err) {
/src/test/disabled/test-open-dont-close.js-6-	console.error('db.open callback');
##############################################
/src/test/disabled/test-issue-13.js-4-
/src/test/disabled/test-issue-13.js:5:db.open(common.connectionString, function(err)
/src/test/disabled/test-issue-13.js-6-{
##############################################
/src/test/disabled/test-issue-13.js-11-
/src/test/disabled/test-issue-13.js:12:    require('http').createServer(function (req, res) {
/src/test/disabled/test-issue-13.js-13-		if (req.url == "/close") {
##############################################
/src/test/disabled/test-param-select-with-numbers-only.js-6-
/src/test/disabled/test-param-select-with-numbers-only.js:7:db.open(common.connectionString, function (err) {
/src/test/disabled/test-param-select-with-numbers-only.js-8-  assert.equal(err, null);
##############################################
/src/test/disabled/test-prepare-bind-executeNonQuery.js-7-
/src/test/disabled/test-prepare-bind-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/disabled/test-prepare-bind-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/nodeEE-leak-multiple-query.js-12-		initialMemHeap = util.inspect(process.memoryUsage().heapUsed);
/src/test/nodeEE-leak-multiple-query.js:13:		db.open(common.connectionString, function(err) {
/src/test/nodeEE-leak-multiple-query.js-14-			runQueries();
##############################################
/src/test/test-multi-open-close.js-13-
/src/test/test-multi-open-close.js:14:		db.open(common.connectionString, function(err) {
/src/test/test-multi-open-close.js-15-			if (err) {
##############################################
/src/test/bench-insertBatch10.js-7-
/src/test/bench-insertBatch10.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-insertBatch10.js-9-	if (err) {
##############################################
/src/test/bench-prepare-executeNonQuery.js-7-
/src/test/bench-prepare-executeNonQuery.js:8:db.open(common.connectionString, function(err){ 
/src/test/bench-prepare-executeNonQuery.js-9-  if (err) {
##############################################
/src/test/test-call-async.js-10-if(schema == undefined) schema = "NEWTON";
/src/test/test-call-async.js:11:ibmdb.open(cn, function (err, conn)
/src/test/test-call-async.js-12-{
##############################################
/src/test/bench-querySync.js-4-
/src/test/bench-querySync.js:5:db.open(common.connectionString, function(err){ 
/src/test/bench-querySync.js-6-  if (err) {
##############################################
/src/test/sql-cli.js-4-
/src/test/sql-cli.js:5:db.open(common.connectionString, function(err)
/src/test/sql-cli.js-6-{
##############################################
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-18-			connections.push(db);
/src/test/nodeEE-stress-mixed-query-multiple-connections.js:19:			db.open(common.connectionString, function(err) {
/src/test/nodeEE-stress-mixed-query-multiple-connections.js-20-				runQueries(db, "T1" + i, "T2" + i);
##############################################
/src/installer/driverInstall.js-36-            var BUILD_FILE = path.resolve(CURRENT_DIR, 'build.zip');
/src/installer/driverInstall.js:37:            readStream = fs.createReadStream(BUILD_FILE);
/src/installer/driverInstall.js-38-            writeStream = fstream.Writer(CURRENT_DIR);
##############################################
/src/installer/driverInstall.js-181-
/src/installer/driverInstall.js:182:        var file_name = url.parse(installerfileURL).pathname.split('/').pop();
/src/installer/driverInstall.js-183-        INSTALLER_FILE = path.resolve(DOWNLOAD_DIR, file_name);
##############################################
/src/installer/driverInstall.js-244-        {
/src/installer/driverInstall.js:245:            readStream = fs.createReadStream(INSTALLER_FILE);
/src/installer/driverInstall.js-246-            writeStream = fstream.Writer(DOWNLOAD_DIR);
##############################################
/src/installer/driverInstall.js-323-        var options = {
/src/installer/driverInstall.js:324:             host: url.parse(installerfileURL).host,
/src/installer/driverInstall.js-325-             port: 80,
/src/installer/driverInstall.js:326:             path: url.parse(installerfileURL).pathname
/src/installer/driverInstall.js-327-            };
##############################################
/src/installer/driverInstall.js-359-                        {
/src/installer/driverInstall.js:360:                            var proxyUrl = url.parse(proxyStr.toString());
/src/installer/driverInstall.js-361-                            options = {
##############################################
/src/installer/driverInstall.js-363-                             port: proxyUrl.port,
/src/installer/driverInstall.js:364:                             path: url.parse(installerfileURL).href
/src/installer/driverInstall.js-365-                            };
##############################################
/src/installer/driverInstall.js-378-                if(splitIndex > 0) {
/src/installer/driverInstall.js:379:                    var proxyUrl = url.parse(proxyStr.toString());
/src/installer/driverInstall.js-380-                    options = {
##############################################
/src/installer/driverInstall.js-382-                     port: proxyUrl.port,
/src/installer/driverInstall.js:383:                     path: url.parse(installerfileURL).href
/src/installer/driverInstall.js-384-                    };
