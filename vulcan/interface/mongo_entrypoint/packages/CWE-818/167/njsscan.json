{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 18,
          "line": 18
        },
        "extra": {
          "line": "indent_size = tab",
          "message": "Lexical error: end of file in comment"
        },
        "path": "/src/.editorconfig",
        "start": {
          "col": 18,
          "line": 18
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": ".DS_Store",
          "message": "Syntax error"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 34,
          "line": 202
        },
        "extra": {
          "line": "   limitations under the License.",
          "message": "Lexical error: WIERD end of file in quoted string"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 34,
          "line": 202
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 3,
          "line": 53
        },
        "extra": {
          "line": "\t# valgrind $(VALGRIND_OPTS) node examples/query.js -I 1 1>valgrind/query-1.out 2>valgrind/query-1.valgrind",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/Makefile",
        "start": {
          "col": 2,
          "line": 53
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/benchmarks/worker.js",
          "match_lines": [
            114,
            114
          ],
          "match_position": [
            25,
            36
          ],
          "match_string": "  var rand = Math.floor(Math.random() * 0x100000000) % (max - min + 1) + min"
        },
        {
          "file_path": "/src/test/generators/value.js",
          "match_lines": [
            22,
            22
          ],
          "match_position": [
            25,
            36
          ],
          "match_string": "  var rand = Math.floor(Math.random() * 0x100000000) % max"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_sqli_injection": {
      "files": [
        {
          "file_path": "/src/benchmarks/worker.js",
          "match_lines": [
            251,
            251
          ],
          "match_position": [
            13,
            75
          ],
          "match_string": "  var job = client.query(options.namespace, options.set, options.statement)"
        },
        {
          "file_path": "/src/test/query.js",
          "match_lines": [
            81,
            81
          ],
          "match_position": [
            17,
            64
          ],
          "match_string": "    var query = client.query(helper.namespace, helper.set, args)"
        },
        {
          "file_path": "/src/test/query.js",
          "match_lines": [
            107,
            107
          ],
          "match_position": [
            17,
            64
          ],
          "match_string": "    var query = client.query(helper.namespace, helper.set, args)"
        },
        {
          "file_path": "/src/test/query.js",
          "match_lines": [
            133,
            133
          ],
          "match_position": [
            17,
            64
          ],
          "match_string": "    var query = client.query(helper.namespace, helper.set, args)"
        },
        {
          "file_path": "/src/test/query.js",
          "match_lines": [
            162,
            162
          ],
          "match_position": [
            17,
            64
          ],
          "match_string": "    var query = client.query(helper.namespace, helper.set, args)"
        },
        {
          "file_path": "/src/test/query.js",
          "match_lines": [
            189,
            189
          ],
          "match_position": [
            17,
            64
          ],
          "match_string": "    var query = client.query(helper.namespace, helper.set, args)"
        },
        {
          "file_path": "/src/test/scan.js",
          "match_lines": [
            80,
            80
          ],
          "match_position": [
            17,
            58
          ],
          "match_string": "    var query = client.query(helper.namespace, helper.set)"
        },
        {
          "file_path": "/src/test/scan.js",
          "match_lines": [
            105,
            105
          ],
          "match_position": [
            17,
            64
          ],
          "match_string": "    var query = client.query(helper.namespace, helper.set, args)"
        },
        {
          "file_path": "/src/test/scan.js",
          "match_lines": [
            128,
            128
          ],
          "match_position": [
            17,
            64
          ],
          "match_string": "    var query = client.query(helper.namespace, helper.set, args)"
        },
        {
          "file_path": "/src/test/scan.js",
          "match_lines": [
            147,
            147
          ],
          "match_position": [
            26,
            73
          ],
          "match_string": "    var scanBackground = client.query(helper.namespace, helper.set, args)"
        }
      ],
      "metadata": {
        "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "description": "Untrusted input concatinated with raw SQL query can result in SQL Injection.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
