/src/scripts/updatedb.js-85-		if (process.env.http_proxy) {
/src/scripts/updatedb.js:86:			var options = url.parse(process.env.http_proxy);
/src/scripts/updatedb.js-87-
##############################################
/src/scripts/updatedb.js-89-			options.headers = {
/src/scripts/updatedb.js:90:				Host: url.parse(downloadUrl).host
/src/scripts/updatedb.js-91-			};
##############################################
/src/scripts/updatedb.js-94-		} else {
/src/scripts/updatedb.js:95:			return url.parse(downloadUrl);
/src/scripts/updatedb.js-96-		}
##############################################
/src/scripts/updatedb.js-148-
/src/scripts/updatedb.js:149:		var pipeSteam = fs.createReadStream(tmpFile).pipe(unzipStream);
/src/scripts/updatedb.js-150-
##############################################
/src/scripts/updatedb.js-235-
/src/scripts/updatedb.js:236:	lazy(fs.createReadStream(tmpDataFile))
/src/scripts/updatedb.js-237-		.lines
##############################################
/src/scripts/updatedb.js-329-
/src/scripts/updatedb.js:330:	lazy(fs.createReadStream(tmpDataFile))
/src/scripts/updatedb.js-331-		.lines
##############################################
/src/scripts/updatedb.js-372-
/src/scripts/updatedb.js:373:	lazy(fs.createReadStream(tmpDataFile))
/src/scripts/updatedb.js-374-		.lines
##############################################
/src/lib/geoip.js-212-
/src/lib/geoip.js:213:function preload(callback) {
/src/lib/geoip.js-214-	var datFile;
##############################################
/src/lib/geoip.js-225-
/src/lib/geoip.js:226:	//when the preload function receives a callback, do the task asynchronously
/src/lib/geoip.js-227-	if (typeof arguments[0] === 'function') {
##############################################
/src/lib/geoip.js-231-					function (cb2) {
/src/lib/geoip.js:232:						fs.open(dataFiles.cityNames, 'r', function (err, file) {
/src/lib/geoip.js-233-							datFile = file;
##############################################
/src/lib/geoip.js-250-					function (cb2) {
/src/lib/geoip.js:251:						fs.open(dataFiles.city, 'r', function (err, file) {
/src/lib/geoip.js-252-							datFile = file;
##############################################
/src/lib/geoip.js-267-
/src/lib/geoip.js:268:						fs.open(dataFiles.country, 'r', function (err, file) {
/src/lib/geoip.js-269-							if (err) {
##############################################
/src/lib/geoip.js-340-
/src/lib/geoip.js:341:function preload6(callback) {
/src/lib/geoip.js-342-	var datFile;
##############################################
/src/lib/geoip.js-351-
/src/lib/geoip.js:352:	//when the preload function receives a callback, do the task asynchronously
/src/lib/geoip.js-353-	if (typeof arguments[0] === 'function') {
##############################################
/src/lib/geoip.js-357-					function (cb2) {
/src/lib/geoip.js:358:						fs.open(dataFiles.city6, 'r', function (err, file) {
/src/lib/geoip.js-359-							datFile = file;
##############################################
/src/lib/geoip.js-374-
/src/lib/geoip.js:375:						fs.open(dataFiles.country6, 'r', function (err, file) {
/src/lib/geoip.js-376-							if (err) {
##############################################
/src/lib/geoip.js-472-				function (cb) {
/src/lib/geoip.js:473:					preload(cb);
/src/lib/geoip.js-474-				},
/src/lib/geoip.js-475-				function (cb) {
/src/lib/geoip.js:476:					preload6(cb);
/src/lib/geoip.js-477-				}
##############################################
/src/lib/geoip.js-487-
/src/lib/geoip.js:488:preload();
/src/lib/geoip.js:489:preload6();
/src/lib/geoip.js-490-
