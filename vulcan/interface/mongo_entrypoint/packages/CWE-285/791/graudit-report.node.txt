/src/build/src/generator/generator.js-246-                for (const version of files) {
/src/build/src/generator/generator.js:247:                    const parts = path.parse(version);
/src/build/src/generator/generator.js-248-                    if (!version.endsWith('.d.ts') && parts.ext === '.ts') {
##############################################
/src/build/src/generator/generator.js-335-        return __awaiter(this, void 0, void 0, function* () {
/src/build/src/generator/generator.js:336:            const parts = url.parse(apiDiscoveryUrl);
/src/build/src/generator/generator.js-337-            if (apiDiscoveryUrl && !parts.protocol) {
##############################################
/src/build/src/generator/generator.js-339-                const file = yield util.promisify(fs.readFile)(apiDiscoveryUrl, { encoding: 'utf-8' });
/src/build/src/generator/generator.js:340:                yield this.generate(apiDiscoveryUrl, JSON.parse(file));
/src/build/src/generator/generator.js-341-            }
##############################################
/src/README.md-354-      mimeType: 'image/png',
/src/README.md:355:      body: fs.createReadStream('awesome.png')
/src/README.md-356-    }
