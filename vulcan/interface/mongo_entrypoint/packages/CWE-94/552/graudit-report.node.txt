/src/examples/browser/printing_html.html-136-      // parse the expression
/src/examples/browser/printing_html.html:137:      parsed = math.parse(expr.value);
/src/examples/browser/printing_html.html-138-
##############################################
/src/examples/browser/printing_html.html-142-      // print the HTML output
/src/examples/browser/printing_html.html:143:      var html = math.parse(expr.value).toHTML(options);
/src/examples/browser/printing_html.html-144-      output.innerHTML = html;
##############################################
/src/examples/browser/webworkers/worker.js-6-self.addEventListener('message', function(event) {
/src/examples/browser/webworkers/worker.js:7:  var request = JSON.parse(event.data),
/src/examples/browser/webworkers/worker.js-8-      result = null,
##############################################
/src/examples/browser/webworkers/webworkers.html-35-    this.worker.addEventListener('message', function(event) {
/src/examples/browser/webworkers/webworkers.html:36:      var response = JSON.parse(event.data);
/src/examples/browser/webworkers/webworkers.html-37-
##############################################
/src/examples/browser/pretty_printing_with_mathjax.html-82-  expr.value = 'sqrt(75 / 3) + det([[-1, 2], [3, 1]]) - sin(pi / 4)^2';
/src/examples/browser/pretty_printing_with_mathjax.html:83:  pretty.innerHTML = '$$' + math.parse(expr.value).toTex({parenthesis: parenthesis}) + '$$';
/src/examples/browser/pretty_printing_with_mathjax.html-84-  result.innerHTML = math.format(math.eval(expr.value));
##############################################
/src/examples/browser/pretty_printing_with_mathjax.html-90-      // parse the expression
/src/examples/browser/pretty_printing_with_mathjax.html:91:      node = math.parse(expr.value);
/src/examples/browser/pretty_printing_with_mathjax.html-92-
##############################################
/src/examples/expressions.js-76-console.log('\nparse an expression into a node tree');
/src/examples/expressions.js:77:var node1 = math.parse('sqrt(3^2 + 4^2)');
/src/examples/expressions.js-78-print(node1.toString());                    // "sqrt((3 ^ 2) + (4 ^ 2))"
##############################################
/src/examples/expressions.js-85-console.log('\nprovide a scope');
/src/examples/expressions.js:86:var node2 = math.parse('x^a');
/src/examples/expressions.js-87-var code2 = node2.compile();
##############################################
/src/examples/serialization.js-12-var str2 = '{"mathjs":"Unit","value":5,"unit":"cm"}';
/src/examples/serialization.js:13:var y = JSON.parse(str2, math.json.reviver);
/src/examples/serialization.js-14-console.log(math.typeof(y));  // 'Unit'
##############################################
/src/examples/advanced/expression_trees.js-4-console.log('Filter all symbol nodes "x" in the expression "x^2 + x/4 + 3*y"');
/src/examples/advanced/expression_trees.js:5:var node = math.parse('x^2 + x/4 + 3*y');
/src/examples/advanced/expression_trees.js-6-var filtered = node.filter(function (node) {
##############################################
/src/examples/advanced/expression_trees.js-21-console.log('Traverse the expression tree of expression "3 * x + 2"');
/src/examples/advanced/expression_trees.js:22:var node1 = math.parse('3 * x + 2');
/src/examples/advanced/expression_trees.js-23-node1.traverse(function (node, path, parent) {
##############################################
/src/examples/advanced/expression_trees.js-41-console.log('Replace all symbol nodes "x" in expression "x^2 + 5*x" with a constant 3');
/src/examples/advanced/expression_trees.js:42:var node2 = math.parse('x^2 + 5*x');
/src/examples/advanced/expression_trees.js-43-var transformed = node2.transform(function (node, path, parent) {
##############################################
/src/examples/algebra.js-18-// work with an expression tree, evaluate results
/src/examples/algebra.js:19:var f = math.parse('2x + x');
/src/examples/algebra.js-20-var simplified = math.simplify(f);
##############################################
/src/examples/algebra.js-30-// work with an expression tree, evaluate results
/src/examples/algebra.js:31:var h = math.parse('x^2 + x');
/src/examples/algebra.js-32-var dh = math.derivative(h, 'x');
##############################################
/src/bin/cli.js-218-            try {
/src/bin/cli.js:219:              var node = math.parse(expr);
/src/bin/cli.js-220-              var res = node.eval(scope);
##############################################
/src/bin/cli.js-258-            try {
/src/bin/cli.js:259:              var string = math.parse(expr).toString({parenthesis: parenthesis});
/src/bin/cli.js-260-              console.log(string);
##############################################
/src/bin/cli.js-268-            try {
/src/bin/cli.js:269:              var tex = math.parse(expr).toTex({parenthesis: parenthesis});
/src/bin/cli.js-270-              console.log(tex);
##############################################
/src/bin/cli.js-315-function outputVersion () {
/src/bin/cli.js:316:  fs.readFile(__dirname + '/../package.json', function (err, data) {
/src/bin/cli.js-317-    if (err) {
##############################################
/src/bin/cli.js-320-    else {
/src/bin/cli.js:321:      var pkg = JSON.parse(data);
/src/bin/cli.js-322-      var version = pkg && pkg.version ? pkg.version : 'unknown';
##############################################
/src/bin/cli.js-432-        // run a script file
/src/bin/cli.js:433:          runStream(fs.createReadStream(arg), process.stdout, mode, parenthesis);
/src/bin/cli.js-434-      });
##############################################
/src/HISTORY.md-895-- Fixed not being able to load math.js using AMD/require.js.
/src/HISTORY.md:896:- Changed signature of `math.parse(expr, nodes)` to `math.parse(expr, options)`
/src/HISTORY.md-897-  where `options: {nodes: Object.<String, Node>}`
##############################################
/src/HISTORY.md-1204-
/src/HISTORY.md:1205:- Implemented function `math.parse(expr [,scope])`. Optional parameter scope can
/src/HISTORY.md-1206-  be a plain JavaScript Object containing variables.
##############################################
/src/HISTORY.md-1336-- Implemented method format.
/src/HISTORY.md:1337:- Implemented parser for units, math.Unit.parse(str).
/src/HISTORY.md:1338:- Improved parser for complex values math.Complex.parse(str);
/src/HISTORY.md-1339-- Improved method help: it now evaluates the examples.
##############################################
/src/lib/type/unit/Unit.js-26-   *     var b = new Unit(null, name);
/src/lib/type/unit/Unit.js:27:   *     var c = Unit.parse(str);
/src/lib/type/unit/Unit.js-28-   *
##############################################
/src/lib/type/unit/Unit.js-30-   *     var a = new Unit(5, 'cm');               // 50 mm
/src/lib/type/unit/Unit.js:31:   *     var b = Unit.parse('23 kg');             // 23 kg
/src/lib/type/unit/Unit.js-32-   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m
##############################################
/src/lib/type/unit/Unit.js-52-    if (name != undefined) {
/src/lib/type/unit/Unit.js:53:      var u = Unit.parse(name);
/src/lib/type/unit/Unit.js-54-      this.units = u.units;
##############################################
/src/lib/type/unit/Unit.js-813-      //other = new Unit(null, valuelessUnit);
/src/lib/type/unit/Unit.js:814:      other = Unit.parse(valuelessUnit);
/src/lib/type/unit/Unit.js-815-      if (!this.equalBase(other)) {
##############################################
/src/lib/type/unit/Unit.js-2895-  // Clone to create the other unit systems
/src/lib/type/unit/Unit.js:2896:  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
/src/lib/type/unit/Unit.js-2897-  UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};
##############################################
/src/lib/type/unit/Unit.js-2903-  
/src/lib/type/unit/Unit.js:2904:  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
/src/lib/type/unit/Unit.js-2905-  UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};
##############################################
/src/lib/type/unit/Unit.js-2917-  // Choose a unit system to seed the auto unit system.
/src/lib/type/unit/Unit.js:2918:  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
/src/lib/type/unit/Unit.js-2919-
##############################################
/src/lib/type/unit/Unit.js-3145-      try {
/src/lib/type/unit/Unit.js:3146:        defUnit = Unit.parse(definition, {allowNoUnits: true});
/src/lib/type/unit/Unit.js-3147-      }
##############################################
/src/lib/type/unit/function/unit.js-39-
/src/lib/type/unit/function/unit.js:40:      return type.Unit.parse(x); // a unit with value, like '5cm'
/src/lib/type/unit/function/unit.js-41-    },
##############################################
/src/lib/type/unit/physicalConstants.js-7-  function fixedUnit(str) {
/src/lib/type/unit/physicalConstants.js:8:    var unit = type.Unit.parse(str);
/src/lib/type/unit/physicalConstants.js-9-    unit.fixPrefix = true;
##############################################
/src/lib/function/algebra/simplify.js-69-   *     math.simplify('2 * 3 * x', {x: 4});        // Node {24}
/src/lib/function/algebra/simplify.js:70:   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');
/src/lib/function/algebra/simplify.js-71-   *     math.simplify(f);                          // Node {2 * x}
##############################################
/src/lib/function/algebra/simplify/resolve.js-18-   *     math.simplify.resolve('x + y', {x:1, y:2}) // Node {1 + 2}
/src/lib/function/algebra/simplify/resolve.js:19:   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
/src/lib/function/algebra/simplify/resolve.js-20-   *     math.simplify('x+y', {x:2, y:'x+x'}).toString(); // "6"
##############################################
/src/lib/function/algebra/simplify/resolve.js-34-        } else if (typeof value === 'number') {
/src/lib/function/algebra/simplify/resolve.js:35:            return math.parse(String(value));
/src/lib/function/algebra/simplify/resolve.js-36-        }
##############################################
/src/lib/function/algebra/simplify/simplifyCore.js-22-   *
/src/lib/function/algebra/simplify/simplifyCore.js:23:   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');
/src/lib/function/algebra/simplify/simplifyCore.js-24-   *     math.simplify.simpifyCore(f);                          // Node {2 * x}
##############################################
/src/lib/function/algebra/derivative.js-33-   *     math.derivative('x^2', 'x').eval({x: 4});        // number 8
/src/lib/function/algebra/derivative.js:34:   *     var f = math.parse('x^2');
/src/lib/function/algebra/derivative.js:35:   *     var x = math.parse('x');
/src/lib/function/algebra/derivative.js-36-   *     math.derivative(f, x);                           // Node {2 * x}
##############################################
/src/lib/expression/parse.js-45-   *
/src/lib/expression/parse.js:46:   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
/src/lib/expression/parse.js-47-   *     nodes[2].compile(math).eval(); // 12
##############################################
/src/lib/expression/parse.js-1079-   *
/src/lib/expression/parse.js:1080:   *     node = math.parse('plot(sin(x), x)', nodes);
/src/lib/expression/parse.js-1081-   *
##############################################
/src/lib/expression/function/parse.js-14-   *
/src/lib/expression/function/parse.js:15:   *     math.parse(expr)
/src/lib/expression/function/parse.js:16:   *     math.parse(expr, options)
/src/lib/expression/function/parse.js:17:   *     math.parse([expr1, expr2, expr3, ...])
/src/lib/expression/function/parse.js:18:   *     math.parse([expr1, expr2, expr3, ...], options)
/src/lib/expression/function/parse.js-19-   *
##############################################
/src/lib/expression/function/parse.js-21-   *
/src/lib/expression/function/parse.js:22:   *     var node = math.parse('sqrt(3^2 + 4^2)');
/src/lib/expression/function/parse.js-23-   *     node.compile().eval(); // 5
##############################################
/src/lib/expression/function/parse.js-25-   *     var scope = {a:3, b:4}
/src/lib/expression/function/parse.js:26:   *     var node = math.parse('a * b'); // 12
/src/lib/expression/function/parse.js-27-   *     var code = node.compile();
##############################################
/src/lib/expression/function/parse.js-31-   *
/src/lib/expression/function/parse.js:32:   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
/src/lib/expression/function/parse.js-33-   *     nodes[2].compile().eval(); // 12
##############################################
/src/test/type/number.test.js-75-  it('should LaTeX number', function () {
/src/test/type/number.test.js:76:    var expr1 = math.parse('number()');
/src/test/type/number.test.js:77:    var expr2 = math.parse('number(1)');
/src/test/type/number.test.js:78:    var expr3 = math.parse('number(1,cm)');
/src/test/type/number.test.js-79-
##############################################
/src/test/type/matrix/Range.test.js-61-    it('should create a range from a string', function() {
/src/test/type/matrix/Range.test.js:62:      var r = Range.parse('10:-1:4');
/src/test/type/matrix/Range.test.js-63-      assert.deepEqual(r.toArray(), [10,9,8,7,6,5]);
##############################################
/src/test/type/matrix/Range.test.js-65-
/src/test/type/matrix/Range.test.js:66:      r = Range.parse('2 : 6');
/src/test/type/matrix/Range.test.js-67-      assert.deepEqual(r.toArray(), [2,3,4,5]);
##############################################
/src/test/type/matrix/Range.test.js-71-    it('should return null when parsing an invalid string', function() {
/src/test/type/matrix/Range.test.js:72:      assert.equal(Range.parse('a:4'), null);
/src/test/type/matrix/Range.test.js:73:      assert.equal(Range.parse('3'), null);
/src/test/type/matrix/Range.test.js:74:      assert.equal(Range.parse(''), null);
/src/test/type/matrix/Range.test.js:75:      assert.equal(Range.parse(2), null);
/src/test/type/matrix/Range.test.js-76-    });
##############################################
/src/test/type/matrix/function/sparse.test.js-46-  it('should LaTeX matrix', function () {
/src/test/type/matrix/function/sparse.test.js:47:    var expr1 = math.parse('sparse()');
/src/test/type/matrix/function/sparse.test.js:48:    var expr2 = math.parse('sparse([1])');
/src/test/type/matrix/function/sparse.test.js-49-
##############################################
/src/test/type/matrix/function/matrix.test.js-99-  it('should LaTeX matrix', function () {
/src/test/type/matrix/function/matrix.test.js:100:    var expr1 = math.parse('matrix()');
/src/test/type/matrix/function/matrix.test.js:101:    var expr2 = math.parse('matrix([1])');
/src/test/type/matrix/function/matrix.test.js-102-
##############################################
/src/test/type/matrix/function/index.test.js-25-  it('should LaTeX index', function () {
/src/test/type/matrix/function/index.test.js:26:    var expr1 = math.parse('index(1)');
/src/test/type/matrix/function/index.test.js:27:    var expr2 = math.parse('index(1,2)');
/src/test/type/matrix/function/index.test.js:28:    var expr3 = math.parse('index(1,2,3)');
/src/test/type/matrix/function/index.test.js-29-
##############################################
/src/test/type/unit/function/unit.test.js-75-  it('should LaTeX unit', function () {
/src/test/type/unit/function/unit.test.js:76:    var expr1 = math.parse('unit(cm)');
/src/test/type/unit/function/unit.test.js:77:    var expr2 = math.parse('unit(1,cm)');
/src/test/type/unit/function/unit.test.js-78-
##############################################
/src/test/type/unit/Unit.test.js-687-        mathjs: 'Unit',
/src/test/type/unit/Unit.test.js:688:        value: math.fraction(0.375), // Note that value is already a Fraction at this point, that will be done by JSON.parse(str, reviver)
/src/test/type/unit/Unit.test.js-689-        unit: 'cm',
##############################################
/src/test/type/unit/Unit.test.js-703-    it('toJSON -> fromJSON should recover an "equal" unit', function() {
/src/test/type/unit/Unit.test.js:704:      var unit1 = Unit.parse('1.23(m/(s/(kg mol)/(lbm/h)K))');
/src/test/type/unit/Unit.test.js-705-      var unit2 = Unit.fromJSON(unit1.toJSON());
##############################################
/src/test/type/unit/Unit.test.js-771-
/src/test/type/unit/Unit.test.js:772:      unit1 = Unit.parse('5kg');
/src/test/type/unit/Unit.test.js-773-      assert.equal(unit1.value, 5);
##############################################
/src/test/type/unit/Unit.test.js-776-
/src/test/type/unit/Unit.test.js:777:      unit1 = Unit.parse('5 kg');
/src/test/type/unit/Unit.test.js-778-      assert.equal(unit1.value, 5);
##############################################
/src/test/type/unit/Unit.test.js-781-
/src/test/type/unit/Unit.test.js:782:      unit1 = Unit.parse(' 5 kg ');
/src/test/type/unit/Unit.test.js-783-      assert.equal(unit1.value, 5);
##############################################
/src/test/type/unit/Unit.test.js-786-
/src/test/type/unit/Unit.test.js:787:      unit1 = Unit.parse('5e-3kg');
/src/test/type/unit/Unit.test.js-788-      assert.equal(unit1.value, 0.005);
##############################################
/src/test/type/unit/Unit.test.js-791-
/src/test/type/unit/Unit.test.js:792:      unit1 = Unit.parse('5e+3kg');
/src/test/type/unit/Unit.test.js-793-      assert.equal(unit1.value, 5000);
##############################################
/src/test/type/unit/Unit.test.js-796-
/src/test/type/unit/Unit.test.js:797:      unit1 = Unit.parse('5e3kg');
/src/test/type/unit/Unit.test.js-798-      assert.equal(unit1.value, 5000);
##############################################
/src/test/type/unit/Unit.test.js-801-
/src/test/type/unit/Unit.test.js:802:      unit1 = Unit.parse('-5kg');
/src/test/type/unit/Unit.test.js-803-      assert.equal(unit1.value, -5);
##############################################
/src/test/type/unit/Unit.test.js-806-
/src/test/type/unit/Unit.test.js:807:      unit1 = Unit.parse('+5kg');
/src/test/type/unit/Unit.test.js-808-      assert.equal(unit1.value, 5);
##############################################
/src/test/type/unit/Unit.test.js-811-
/src/test/type/unit/Unit.test.js:812:      unit1 = Unit.parse('.5kg');
/src/test/type/unit/Unit.test.js-813-      assert.equal(unit1.value, .5);
##############################################
/src/test/type/unit/Unit.test.js-816-
/src/test/type/unit/Unit.test.js:817:      unit1 = Unit.parse('-5mg');
/src/test/type/unit/Unit.test.js-818-      approx.equal(unit1.value, -0.000005);
##############################################
/src/test/type/unit/Unit.test.js-821-
/src/test/type/unit/Unit.test.js:822:      unit1 = Unit.parse('5.2mg');
/src/test/type/unit/Unit.test.js-823-      approx.equal(unit1.value, 0.0000052);
##############################################
/src/test/type/unit/Unit.test.js-826-
/src/test/type/unit/Unit.test.js:827:      unit1 = Unit.parse('300 kg/minute');
/src/test/type/unit/Unit.test.js-828-      approx.equal(unit1.value, 5);
##############################################
/src/test/type/unit/Unit.test.js-832-
/src/test/type/unit/Unit.test.js:833:      unit1 = Unit.parse('981 cm/s^2');
/src/test/type/unit/Unit.test.js-834-      approx.equal(unit1.value, 9.81);
##############################################
/src/test/type/unit/Unit.test.js-839-
/src/test/type/unit/Unit.test.js:840:      unit1 = Unit.parse('981 cm*s^-2');
/src/test/type/unit/Unit.test.js-841-      approx.equal(unit1.value, 9.81);
##############################################
/src/test/type/unit/Unit.test.js-846-
/src/test/type/unit/Unit.test.js:847:      unit1 = Unit.parse('8.314 kg m^2 / s^2 / K / mol');
/src/test/type/unit/Unit.test.js-848-      approx.equal(unit1.value, 8.314);
##############################################
/src/test/type/unit/Unit.test.js-860-
/src/test/type/unit/Unit.test.js:861:      unit1 = Unit.parse('5exabytes');
/src/test/type/unit/Unit.test.js-862-      approx.equal(unit1.value, 4e19);
##############################################
/src/test/type/unit/Unit.test.js-866-    it('should parse expressions with nested parentheses correctly', function() {
/src/test/type/unit/Unit.test.js:867:      unit1 = Unit.parse('8.314 kg (m^2 / (s^2 / (K^-1 / mol)))');
/src/test/type/unit/Unit.test.js-868-      approx.equal(unit1.value, 8.314);
##############################################
/src/test/type/unit/Unit.test.js-880-
/src/test/type/unit/Unit.test.js:881:      unit1 = Unit.parse('1 (m / ( s / ( kg mol ) / ( lbm / h ) K ) )');
/src/test/type/unit/Unit.test.js-882-      assert.equal(unit1.units[0].unit.name, 'm');
##############################################
/src/test/type/unit/Unit.test.js-896-
/src/test/type/unit/Unit.test.js:897:      unit2 = Unit.parse('1(m/(s/(kg mol)/(lbm/h)K))');
/src/test/type/unit/Unit.test.js-898-      assert.deepEqual(unit1, unit2);
##############################################
/src/test/type/unit/Unit.test.js-901-    it('should parse units with correct precedence', function() {
/src/test/type/unit/Unit.test.js:902:      var unit1 = Unit.parse('1  m^3 / kg s^2'); // implicit multiplication
/src/test/type/unit/Unit.test.js-903-
##############################################
/src/test/type/unit/Unit.test.js-914-    it('should throw an exception when parsing an invalid unit', function() {
/src/test/type/unit/Unit.test.js:915:      assert.throws(function () {Unit.parse('.meter')}, /Unexpected "\."/);
/src/test/type/unit/Unit.test.js:916:      assert.throws(function () {Unit.parse('5e')}, /Unit "e" not found/);
/src/test/type/unit/Unit.test.js:917:      assert.throws(function () {Unit.parse('5e.')}, /Unit "e" not found/);
/src/test/type/unit/Unit.test.js:918:      assert.throws(function () {Unit.parse('5e1.3')}, /Unexpected "\."/);
/src/test/type/unit/Unit.test.js:919:      assert.throws(function () {Unit.parse('5')}, /contains no units/);
/src/test/type/unit/Unit.test.js:920:      assert.throws(function () {Unit.parse('')}, /contains no units/);
/src/test/type/unit/Unit.test.js:921:      assert.throws(function () {Unit.parse('meter.')}, /Unexpected "\."/);
/src/test/type/unit/Unit.test.js:922:      assert.throws(function () {Unit.parse('meter/')}, /Trailing characters/);
/src/test/type/unit/Unit.test.js:923:      assert.throws(function () {Unit.parse('/meter')}, /Unexpected "\/"/);
/src/test/type/unit/Unit.test.js:924:      assert.throws(function () {Unit.parse('45 kg 34 m')}, /Unexpected "3"/);
/src/test/type/unit/Unit.test.js-925-    });
##############################################
/src/test/type/unit/Unit.test.js-927-    it('should throw an exception when parsing an invalid type of argument', function() {
/src/test/type/unit/Unit.test.js:928:      assert.throws(function () {Unit.parse(123)}, /TypeError: Invalid argument in Unit.parse, string expected/);
/src/test/type/unit/Unit.test.js-929-    });
##############################################
/src/test/type/unit/Unit.test.js-934-      math.config({number: 'Fraction'});
/src/test/type/unit/Unit.test.js:935:      var unit1 = Unit.parse('5kg');
/src/test/type/unit/Unit.test.js-936-      assert(math.type.isFraction(unit1.value));
##############################################
/src/test/type/unit/Unit.test.js-938-      math.config({number: 'BigNumber'});
/src/test/type/unit/Unit.test.js:939:      var unit1 = Unit.parse('5kg');
/src/test/type/unit/Unit.test.js-940-      assert(math.type.isBigNumber(unit1.value));
##############################################
/src/test/type/unit/Unit.test.js-947-    it('should return the correct value', function () {
/src/test/type/unit/Unit.test.js:948:      assert.equal(Unit.parse('34 kg')._isDerived(), false);
/src/test/type/unit/Unit.test.js:949:      assert.equal(Unit.parse('34 kg/s')._isDerived(), true);
/src/test/type/unit/Unit.test.js:950:      assert.equal(Unit.parse('34 kg^2')._isDerived(), true);
/src/test/type/unit/Unit.test.js:951:      assert.equal(Unit.parse('34 N')._isDerived(), false);
/src/test/type/unit/Unit.test.js:952:      assert.equal(Unit.parse('34 kg m / s^2')._isDerived(), true);
/src/test/type/unit/Unit.test.js:953:      var unit1 = Unit.parse('34 kg m / s^2');
/src/test/type/unit/Unit.test.js-954-      assert.equal(unit1._isDerived(), true);
##############################################
/src/test/type/unit/Unit.test.js-1195-    it('should return a clone of the unit', function() {
/src/test/type/unit/Unit.test.js:1196:      var u1 = Unit.parse('3 ft');
/src/test/type/unit/Unit.test.js-1197-      var u2 = u1.toSI();
##############################################
/src/test/type/unit/Unit.test.js-1201-    it('should return the unit in SI units', function() {
/src/test/type/unit/Unit.test.js:1202:      assert.equal(Unit.parse('3 ft').toSI().format(10), "0.9144 m");
/src/test/type/unit/Unit.test.js-1203-    });
##############################################
/src/test/type/unit/Unit.test.js-1205-    it('should return SI units for valueless units', function() {
/src/test/type/unit/Unit.test.js:1206:      assert.equal(Unit.parse('ft/minute').toSI().toString(), "m / s");
/src/test/type/unit/Unit.test.js-1207-    });
##############################################
/src/test/type/unit/Unit.test.js-1210-      Unit.createUnit({foo:'3 kW'}, {override: true});
/src/test/type/unit/Unit.test.js:1211:      assert.equal(Unit.parse('42 foo').toSI().toString(), "1.26e+5 (kg m^2) / s^3");
/src/test/type/unit/Unit.test.js-1212-    });
##############################################
/src/test/type/unit/Unit.test.js-1215-      Unit.createUnit({baz:''}, {override:true});
/src/test/type/unit/Unit.test.js:1216:      assert.throws(function() { Unit.parse('10 baz').toSI(); }, /Cannot express custom unit/);
/src/test/type/unit/Unit.test.js-1217-    });
##############################################
/src/test/type/boolean.test.js-71-  it('should LaTeX boolean', function () {
/src/test/type/boolean.test.js:72:    var expression = math.parse('boolean(1)');
/src/test/type/boolean.test.js-73-    assert.equal(expression.toTex(), '\\mathrm{boolean}\\left(1\\right)');
##############################################
/src/test/type/chain/function/chain.test.js-13-  it('should LaTeX chain', function () {
/src/test/type/chain/function/chain.test.js:14:    var expression = math.parse('chain(1)');
/src/test/type/chain/function/chain.test.js-15-    assert.equal(expression.toTex(), '\\mathrm{chain}\\left(1\\right)');
##############################################
/src/test/type/bignumber/function/bignumber.test.js-93-  it('should LaTeX bignumber', function () {
/src/test/type/bignumber/function/bignumber.test.js:94:    var expr1 = math.parse('bignumber()');
/src/test/type/bignumber/function/bignumber.test.js:95:    var expr2 = math.parse('bignumber(1)');
/src/test/type/bignumber/function/bignumber.test.js-96-
##############################################
/src/test/type/complex/function/complex.test.js-84-  it('should LaTeX complex', function () {
/src/test/type/complex/function/complex.test.js:85:    var expr1 = math.parse('complex()');
/src/test/type/complex/function/complex.test.js:86:    var expr2 = math.parse('complex(1)');
/src/test/type/complex/function/complex.test.js:87:    var expr3 = math.parse('complex(1,2)');
/src/test/type/complex/function/complex.test.js-88-
##############################################
/src/test/json/replacer.test.js-100-
/src/test/json/replacer.test.js:101:    assert.deepEqual(JSON.parse(JSON.stringify(h)), JSON.parse(json));
/src/test/json/replacer.test.js-102-  });
##############################################
/src/test/json/reviver.test.js-10-    var data = {foo: [1,2,3], bar: null, baz: 'str'};
/src/test/json/reviver.test.js:11:    assert.deepEqual(JSON.parse(json, reviver), data);
/src/test/json/reviver.test.js-12-  });
##############################################
/src/test/json/reviver.test.js-17-
/src/test/json/reviver.test.js:18:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-19-
##############################################
/src/test/json/reviver.test.js-27-
/src/test/json/reviver.test.js:28:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-29-
##############################################
/src/test/json/reviver.test.js-37-
/src/test/json/reviver.test.js:38:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-39-
##############################################
/src/test/json/reviver.test.js-49-
/src/test/json/reviver.test.js:50:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-51-
##############################################
/src/test/json/reviver.test.js-59-
/src/test/json/reviver.test.js:60:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-61-
##############################################
/src/test/json/reviver.test.js-69-
/src/test/json/reviver.test.js:70:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-71-
##############################################
/src/test/json/reviver.test.js-79-
/src/test/json/reviver.test.js:80:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-81-
##############################################
/src/test/json/reviver.test.js-92-
/src/test/json/reviver.test.js:93:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-94-
##############################################
/src/test/json/reviver.test.js-102-
/src/test/json/reviver.test.js:103:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-104-
##############################################
/src/test/json/reviver.test.js-112-
/src/test/json/reviver.test.js:113:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-114-
##############################################
/src/test/json/reviver.test.js-123-
/src/test/json/reviver.test.js:124:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-125-
##############################################
/src/test/json/reviver.test.js-134-
/src/test/json/reviver.test.js:135:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-136-
##############################################
/src/test/json/reviver.test.js-144-    var h = new math.type.Help({name: 'foo', description: 'bar'});
/src/test/json/reviver.test.js:145:    var obj = JSON.parse(json, reviver);
/src/test/json/reviver.test.js-146-
##############################################
/src/test/function/matrix/map.test.js-78-  it('should LaTeX map', function () {
/src/test/function/matrix/map.test.js:79:    var expression = math.parse('map([1,2,3],callback)');
/src/test/function/matrix/map.test.js-80-    assert.equal(expression.toTex(), '\\mathrm{map}\\left(\\begin{bmatrix}1\\\\2\\\\3\\\\\\end{bmatrix}, callback\\right)');
##############################################
/src/test/function/matrix/cross.test.js-47-  it('should LaTeX cross', function () {
/src/test/function/matrix/cross.test.js:48:    var expression = math.parse('cross([1],[2])');
/src/test/function/matrix/cross.test.js-49-    assert.equal(expression.toTex(), '\\left(\\begin{bmatrix}1\\\\\\end{bmatrix}\\right)\\times\\left(\\begin{bmatrix}2\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/filter.test.js-96-  it('should LaTeX filter', function () {
/src/test/function/matrix/filter.test.js:97:    var expression = math.parse('filter(1,test)');
/src/test/function/matrix/filter.test.js-98-    assert.equal(expression.toTex(), '\\mathrm{filter}\\left(1, test\\right)');
##############################################
/src/test/function/matrix/transpose.test.js-99-  it('should LaTeX transpose', function () {
/src/test/function/matrix/transpose.test.js:100:    var expression = math.parse('transpose([[1,2],[3,4]])');
/src/test/function/matrix/transpose.test.js-101-    assert.equal(expression.toTex(), '\\left(\\begin{bmatrix}1&2\\\\3&4\\\\\\end{bmatrix}\\right)^\\top');
##############################################
/src/test/function/matrix/dot.test.js-38-  it('should LaTeX dot', function () {
/src/test/function/matrix/dot.test.js:39:    var expression = math.parse('dot([1,2],[3,4])');
/src/test/function/matrix/dot.test.js-40-    assert.equal(expression.toTex(), '\\left(\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix}\\cdot\\begin{bmatrix}3\\\\4\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/squeeze.test.js-35-  it('should LaTeX squeeze', function () {
/src/test/function/matrix/squeeze.test.js:36:    var expression = math.parse('squeeze([[0],[0]])');
/src/test/function/matrix/squeeze.test.js-37-    assert.equal(expression.toTex(), '\\mathrm{squeeze}\\left(\\begin{bmatrix}0\\\\0\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/size.test.js-64-  it('should LaTeX size', function () {
/src/test/function/matrix/size.test.js:65:    var expression = math.parse('size(1)');
/src/test/function/matrix/size.test.js-66-    assert.equal(expression.toTex(), '\\mathrm{size}\\left(1\\right)');
##############################################
/src/test/function/matrix/trace.test.js-208-  it('should LaTeX trace', function () {
/src/test/function/matrix/trace.test.js:209:    var expression = math.parse('trace([[1,2],[3,4]])');
/src/test/function/matrix/trace.test.js-210-    assert.equal(expression.toTex(), '\\mathrm{tr}\\left(\\begin{bmatrix}1&2\\\\3&4\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/range.test.js-151-  it('should LaTeX range', function () {
/src/test/function/matrix/range.test.js:152:    var expression = math.parse('range(1,10)');
/src/test/function/matrix/range.test.js-153-    assert.equal(expression.toTex(), '\\mathrm{range}\\left(1,10\\right)');
##############################################
/src/test/function/matrix/flatten.test.js-50-  it('should LaTeX flatten', function () {
/src/test/function/matrix/flatten.test.js:51:    var expression = math.parse('flatten([[1,2],[3,4]])');
/src/test/function/matrix/flatten.test.js-52-    assert.equal(expression.toTex(), '\\mathrm{flatten}\\left(\\begin{bmatrix}1&2\\\\3&4\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/inv.test.js-87-  it('should  LaTeX inv', function () {
/src/test/function/matrix/inv.test.js:88:    var expression = math.parse('inv([[1,2],[3,4]])');
/src/test/function/matrix/inv.test.js-89-    assert.equal(expression.toTex(), '\\left(\\begin{bmatrix}1&2\\\\3&4\\\\\\end{bmatrix}\\right)^{-1}');
##############################################
/src/test/function/matrix/partitionSelect.test.js-103-  it('should LaTeX sort', function () {
/src/test/function/matrix/partitionSelect.test.js:104:    var expression = math.parse('sort([3,2,1])');
/src/test/function/matrix/partitionSelect.test.js-105-    assert.equal(expression.toTex(), '\\mathrm{sort}\\left(\\begin{bmatrix}3\\\\2\\\\1\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/eye.test.js-67-  it('should LaTeX eye', function () {
/src/test/function/matrix/eye.test.js:68:    var expression = math.parse('eye(2)');
/src/test/function/matrix/eye.test.js-69-    assert.equal(expression.toTex(), '\\mathrm{eye}\\left(2\\right)');
##############################################
/src/test/function/matrix/concat.test.js-109-  it('should LaTeX concat', function () {
/src/test/function/matrix/concat.test.js:110:    var expression = math.parse('concat([1],[2])');
/src/test/function/matrix/concat.test.js-111-    assert.equal(expression.toTex(), '\\mathrm{concat}\\left(\\begin{bmatrix}1\\\\\\end{bmatrix},\\begin{bmatrix}2\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/diag.test.js-121-  it('should LaTeX diag', function () {
/src/test/function/matrix/diag.test.js:122:    var expr1 = math.parse('diag([1,2,3])');
/src/test/function/matrix/diag.test.js:123:    var expr2 = math.parse('diag([1,2,3],1)');
/src/test/function/matrix/diag.test.js-124-
##############################################
/src/test/function/matrix/reshape.test.js-63-  it('should LaTeX reshape', function () {
/src/test/function/matrix/reshape.test.js:64:    var expression = math.parse('reshape([1,2],1)');
/src/test/function/matrix/reshape.test.js-65-    assert.equal(expression.toTex(), '\\mathrm{reshape}\\left(\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix},1\\right)');
##############################################
/src/test/function/matrix/ones.test.js-74-  it('should LaTeX ones', function () {
/src/test/function/matrix/ones.test.js:75:    var expression = math.parse('ones(2)');
/src/test/function/matrix/ones.test.js-76-    assert.equal(expression.toTex(), '\\mathrm{ones}\\left(2\\right)');
##############################################
/src/test/function/matrix/zeros.test.js-74-  it('should LaTeX zeros', function () {
/src/test/function/matrix/zeros.test.js:75:    var expression = math.parse('zeros(2,3)');
/src/test/function/matrix/zeros.test.js-76-    assert.equal(expression.toTex(), '\\mathrm{zeros}\\left(2,3\\right)');
##############################################
/src/test/function/matrix/det.test.js-136-  it('should LaTeX det', function () {
/src/test/function/matrix/det.test.js:137:    var expression = math.parse('det([1])');
/src/test/function/matrix/det.test.js-138-    assert.equal(expression.toTex(), '\\det\\left(\\begin{bmatrix}1\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/resize.test.js-124-  it('should LaTeX resize', function () {
/src/test/function/matrix/resize.test.js:125:    var expression = math.parse('resize([1,2],1)');
/src/test/function/matrix/resize.test.js-126-    assert.equal(expression.toTex(), '\\mathrm{resize}\\left(\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix},1\\right)');
##############################################
/src/test/function/matrix/sort.test.js-56-  it('should LaTeX sort', function () {
/src/test/function/matrix/sort.test.js:57:    var expression = math.parse('sort([3,2,1])');
/src/test/function/matrix/sort.test.js-58-    assert.equal(expression.toTex(), '\\mathrm{sort}\\left(\\begin{bmatrix}3\\\\2\\\\1\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/matrix/subset.test.js-171-  it('should LaTeX subset', function () {
/src/test/function/matrix/subset.test.js:172:    var expression = math.parse('subset([1],index(0,0))');
/src/test/function/matrix/subset.test.js-173-    assert.equal(expression.toTex(), '\\mathrm{subset}\\left(\\begin{bmatrix}1\\\\\\end{bmatrix},\\mathrm{index}\\left(0,0\\right)\\right)');
##############################################
/src/test/function/matrix/forEach.test.js-78-  it('should LaTeX forEach', function () {
/src/test/function/matrix/forEach.test.js:79:    var expression = math.parse('forEach([1,2,3],callback)');
/src/test/function/matrix/forEach.test.js-80-    assert.equal(expression.toTex(), '\\mathrm{forEach}\\left(\\begin{bmatrix}1\\\\2\\\\3\\\\\\end{bmatrix}, callback\\right)');
##############################################
/src/test/function/unit/to.test.js-84-  it('should LaTeX to', function () {
/src/test/function/unit/to.test.js:85:    var expression = math.parse('to(2cm,m)');
/src/test/function/unit/to.test.js-86-    assert.equal(expression.toTex(), '\\left(2~\\mathrm{cm}\\rightarrow\\mathrm{m}\\right)');
##############################################
/src/test/function/probability/distribution.test.js-626-  it('should LaTeX distribution', function () {
/src/test/function/probability/distribution.test.js:627:    var expression = math.parse('distribution("normal")');
/src/test/function/probability/distribution.test.js-628-    assert.equal(expression.toTex(), '\\mathrm{distribution}\\left(\\mathtt{"normal"}\\right)');
##############################################
/src/test/function/probability/gamma.test.js-159-  it('should LaTeX gamma', function () {
/src/test/function/probability/gamma.test.js:160:    var expression = math.parse('gamma(2.5)');
/src/test/function/probability/gamma.test.js-161-    assert.equal(expression.toTex(), '\\Gamma\\left(2.5\\right)');
##############################################
/src/test/function/probability/combinations.test.js-39-  it('should LaTeX combinations', function () {
/src/test/function/probability/combinations.test.js:40:    var expression = math.parse('combinations(3,2)');
/src/test/function/probability/combinations.test.js-41-    assert.equal(expression.toTex(), '\\binom{3}{2}');
##############################################
/src/test/function/probability/factorial.test.js-96-  it('should LaTeX factorial', function () {
/src/test/function/probability/factorial.test.js:97:    var expression = math.parse('factorial(6)');
/src/test/function/probability/factorial.test.js-98-    assert.equal(expression.toTex(), '\\left(6\\right)!');
##############################################
/src/test/function/probability/random.test.js-12-  it('should LaTeX random', function () {
/src/test/function/probability/random.test.js:13:    var expression = math.parse('random(0,1)');
/src/test/function/probability/random.test.js-14-    assert.equal(expression.toTex(), '\\mathrm{random}\\left(0,1\\right)');
##############################################
/src/test/function/probability/randomInt.test.js-12-  it('should LaTeX randomInt', function () {
/src/test/function/probability/randomInt.test.js:13:    var expression = math.parse('randomInt(0,100)');
/src/test/function/probability/randomInt.test.js-14-    assert.equal(expression.toTex(), '\\mathrm{randomInt}\\left(0,100\\right)');
##############################################
/src/test/function/probability/pickRandom.test.js-12-  it('should LaTeX pickRandom', function () {
/src/test/function/probability/pickRandom.test.js:13:    var expression = math.parse('pickRandom([1,2,3])');
/src/test/function/probability/pickRandom.test.js-14-    assert.equal(expression.toTex(), '\\mathrm{pickRandom}\\left(\\begin{bmatrix}1\\\\2\\\\3\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/probability/permutations.test.js-60-  it('should LaTeX permutations', function () {
/src/test/function/probability/permutations.test.js:61:    var expression = math.parse('permutations(2)');
/src/test/function/probability/permutations.test.js-62-    assert.equal(expression.toTex(), '\\mathrm{permutations}\\left(2\\right)');
##############################################
/src/test/function/statistics/quantileSeq.test.js-182-  it('should LaTeX quantileSeq', function () {
/src/test/function/statistics/quantileSeq.test.js:183:    var expression = math.parse('quantileSeq(1,2,3,4,0.3)');
/src/test/function/statistics/quantileSeq.test.js-184-    assert.equal(expression.toTex(), '\\mathrm{quantile}\\left(1,2,3,4,0.3\\right)');
##############################################
/src/test/function/statistics/mean.test.js-95-  it('should LaTeX mean', function () {
/src/test/function/statistics/mean.test.js:96:    var expression = math.parse('mean(1,2,3,4)');
/src/test/function/statistics/mean.test.js-97-    assert.equal(expression.toTex(), '\\mathrm{mean}\\left(1,2,3,4\\right)');
##############################################
/src/test/function/statistics/sum.test.js-87-  it('should LaTeX sum', function () {
/src/test/function/statistics/sum.test.js:88:    var expression = math.parse('sum(1,2,3)');
/src/test/function/statistics/sum.test.js-89-    assert.equal(expression.toTex(), '\\mathrm{sum}\\left(1,2,3\\right)');
##############################################
/src/test/function/statistics/std.test.js-83-  it('should LaTeX std', function () {
/src/test/function/statistics/std.test.js:84:    var expression = math.parse('std(1,2,3)');
/src/test/function/statistics/std.test.js-85-    assert.equal(expression.toTex(), '\\mathrm{std}\\left(1,2,3\\right)');
##############################################
/src/test/function/statistics/mad.test.js-55-  it('should LaTeX mad', function () {
/src/test/function/statistics/mad.test.js:56:    var expression = math.parse('mad(1,2,3)');
/src/test/function/statistics/mad.test.js-57-    assert.equal(expression.toTex(), '\\mathrm{mad}\\left(1,2,3\\right)');
##############################################
/src/test/function/statistics/min.test.js-109-  it('should LaTeX min', function () {
/src/test/function/statistics/min.test.js:110:    var expression = math.parse('min(1,2,3)');
/src/test/function/statistics/min.test.js-111-    assert.equal(expression.toTex(), '\\min\\left(1,2,3\\right)');
##############################################
/src/test/function/statistics/prod.test.js-66-  it('should LaTeX prod', function () {
/src/test/function/statistics/prod.test.js:67:    var expression = math.parse('prod(1,2,3)');
/src/test/function/statistics/prod.test.js-68-    assert.equal(expression.toTex(), '\\mathrm{prod}\\left(1,2,3\\right)');
##############################################
/src/test/function/statistics/max.test.js-100-  it('should LaTeX max', function () {
/src/test/function/statistics/max.test.js:101:    var expression = math.parse('max(1,2,3)');
/src/test/function/statistics/max.test.js-102-    assert.equal(expression.toTex(), '\\max\\left(1,2,3\\right)');
##############################################
/src/test/function/statistics/var.test.js-81-  it('should LaTeX var', function () {
/src/test/function/statistics/var.test.js:82:    var expression = math.parse('var(1,2,3)');
/src/test/function/statistics/var.test.js-83-    assert.equal(expression.toTex(), '\\mathrm{Var}\\left(1,2,3\\right)');
##############################################
/src/test/function/statistics/median.test.js-100-  it('should LaTeX median', function () {
/src/test/function/statistics/median.test.js:101:    var expression = math.parse('median(1,2,3,4)');
/src/test/function/statistics/median.test.js-102-    assert.equal(expression.toTex(), '\\mathrm{median}\\left(1,2,3,4\\right)');
##############################################
/src/test/function/logical/xor.test.js-212-  it('should LaTeX xor', function () {
/src/test/function/logical/xor.test.js:213:    var expression = math.parse('xor(1,2)');
/src/test/function/logical/xor.test.js-214-    assert.equal(expression.toTex(), '\\left(1\\veebar2\\right)');
##############################################
/src/test/function/logical/and.test.js-192-  it('should LaTeX and', function () {
/src/test/function/logical/and.test.js:193:    var expression = math.parse('and(1,2)');
/src/test/function/logical/and.test.js-194-    assert.equal(expression.toTex(), '\\left(1\\wedge2\\right)');
##############################################
/src/test/function/logical/or.test.js-223-  it('should LaTeX or', function () {
/src/test/function/logical/or.test.js:224:    var expression = math.parse('or(1,2)');
/src/test/function/logical/or.test.js-225-    assert.equal(expression.toTex(), '\\left(1\\vee2\\right)');
##############################################
/src/test/function/string/format.test.js-137-  it('should LaTeX format', function () {
/src/test/function/string/format.test.js:138:    var expression = math.parse('format(1)');
/src/test/function/string/format.test.js-139-    assert.equal(expression.toTex(), '\\mathrm{format}\\left(1\\right)');
##############################################
/src/test/function/string/print.test.js-46-  it('should LaTeX print', function () {
/src/test/function/string/print.test.js:47:    var expression = math.parse('print(template,values)');
/src/test/function/string/print.test.js-48-    assert.equal(expression.toTex(), '\\mathrm{print}\\left( template, values\\right)');
##############################################
/src/test/function/relational/unequal.test.js-238-  it('should LaTeX unequal', function () {
/src/test/function/relational/unequal.test.js:239:    var expression = math.parse('unequal(1,0)');
/src/test/function/relational/unequal.test.js-240-    assert.equal(expression.toTex(), '\\left(1\\neq0\\right)');
##############################################
/src/test/function/relational/compare.test.js-215-  it('should LaTeX compare', function () {
/src/test/function/relational/compare.test.js:216:    var expression = math.parse('compare(1,2)');
/src/test/function/relational/compare.test.js-217-    assert.equal(expression.toTex(), '\\mathrm{compare}\\left(1,2\\right)');
##############################################
/src/test/function/relational/larger.test.js-211-  it('should LaTeX larger', function () {
/src/test/function/relational/larger.test.js:212:    var expression = math.parse('larger(1,2)');
/src/test/function/relational/larger.test.js-213-    assert.equal(expression.toTex(), '\\left(1>2\\right)');
##############################################
/src/test/function/relational/deepEqual.test.js-55-  it('should LaTeX deepEqual', function () {
/src/test/function/relational/deepEqual.test.js:56:    var expression = math.parse('deepEqual([1,2],[1,3])');
/src/test/function/relational/deepEqual.test.js-57-    assert.equal(expression.toTex(), '\\mathrm{deepEqual}\\left(\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix},\\begin{bmatrix}1\\\\3\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/relational/smaller.test.js-217-  it('should LaTeX smaller', function () {
/src/test/function/relational/smaller.test.js:218:    var expression = math.parse('smaller(1,2)');
/src/test/function/relational/smaller.test.js-219-    assert.equal(expression.toTex(), '\\left(1<2\\right)');
##############################################
/src/test/function/relational/equal.test.js-237-  it('should LaTeX equal', function () {
/src/test/function/relational/equal.test.js:238:    var expression = math.parse('equal(1,2)');
/src/test/function/relational/equal.test.js-239-    assert.equal(expression.toTex(), '\\left(1=2\\right)');
##############################################
/src/test/function/relational/compareNatural.test.js-244-  it('should LaTeX compare', function () {
/src/test/function/relational/compareNatural.test.js:245:    var expression = math.parse('compareNatural(1,2)');
/src/test/function/relational/compareNatural.test.js-246-    assert.equal(expression.toTex(), '\\mathrm{compareNatural}\\left(1,2\\right)');
##############################################
/src/test/function/relational/smallerEq.test.js-217-  it('should LaTeX smallerEq', function () {
/src/test/function/relational/smallerEq.test.js:218:    var expression = math.parse('smallerEq(1,2)');
/src/test/function/relational/smallerEq.test.js-219-    assert.equal(expression.toTex(), '\\left(1\\leq2\\right)');
##############################################
/src/test/function/relational/largerEq.test.js-212-  it('should LaTeX largerEq', function () {
/src/test/function/relational/largerEq.test.js:213:    var expression = math.parse('largerEq(1,2)');
/src/test/function/relational/largerEq.test.js-214-    assert.equal(expression.toTex(), '\\left(1\\geq2\\right)');
##############################################
/src/test/function/combinatorics/catalan.test.js-39-  it('should LaTeX catalan', function () {
/src/test/function/combinatorics/catalan.test.js:40:    var expression = math.parse('catalan(3)');
/src/test/function/combinatorics/catalan.test.js-41-    assert.equal(expression.toTex(), '\\mathrm{C}_{3}');
##############################################
/src/test/function/combinatorics/stirlingS2.test.js-34-  it('should LaTeX stirlingS2', function () {
/src/test/function/combinatorics/stirlingS2.test.js:35:    var expression = math.parse('stirlingS2(3,2)');
/src/test/function/combinatorics/stirlingS2.test.js-36-    assert.equal(expression.toTex(), '\\mathrm{S}\\left(3,2\\right)');
##############################################
/src/test/function/combinatorics/bellNumbers.test.js-39-  it('should LaTeX bellNumbers', function () {
/src/test/function/combinatorics/bellNumbers.test.js:40:    var expression = math.parse('bellNumbers(3)');
/src/test/function/combinatorics/bellNumbers.test.js-41-    assert.equal(expression.toTex(), '\\mathrm{B}_{3}');
##############################################
/src/test/function/complex/conj.test.js-51-  it('should LaTeX conj', function () {
/src/test/function/complex/conj.test.js:52:    var expression = math.parse('conj(1+i)');
/src/test/function/complex/conj.test.js-53-    assert.equal(expression.toTex(), '\\left(1+ i\\right)^*');
##############################################
/src/test/function/complex/re.test.js-44-  it('should LaTeX re', function () {
/src/test/function/complex/re.test.js:45:    var expression = math.parse('re(1+i)');
/src/test/function/complex/re.test.js-46-    assert.equal(expression.toTex(), '\\Re\\left\\lbrace1+ i\\right\\rbrace');
##############################################
/src/test/function/complex/arg.test.js-73-  it('should LaTeX arg', function () {
/src/test/function/complex/arg.test.js:74:    var expression = math.parse('arg(1+i)');
/src/test/function/complex/arg.test.js-75-    assert.equal(expression.toTex(), '\\arg\\left(1+ i\\right)');
##############################################
/src/test/function/complex/im.test.js-49-  it('should LaTeX im', function () {
/src/test/function/complex/im.test.js:50:    var expression = math.parse('im(1+i)');
/src/test/function/complex/im.test.js-51-    assert.equal(expression.toTex(), '\\Im\\left\\lbrace1+ i\\right\\rbrace');
##############################################
/src/test/function/special/erf.test.js-140-  it('should LaTeX erf', function () {
/src/test/function/special/erf.test.js:141:    var expression = math.parse('erf(2.5)');
/src/test/function/special/erf.test.js-142-    assert.equal(expression.toTex(), 'erf\\left(2.5\\right)');
##############################################
/src/test/function/trigonometry/cosh.test.js-93-  it('should LaTeX cosh', function () {
/src/test/function/trigonometry/cosh.test.js:94:    var expression = math.parse('cosh(1)');
/src/test/function/trigonometry/cosh.test.js-95-    assert.equal(expression.toTex(), '\\cosh\\left(1\\right)');
##############################################
/src/test/function/trigonometry/asinh.test.js-97-  it('should LaTeX asinh', function () {
/src/test/function/trigonometry/asinh.test.js:98:    var expression = math.parse('asinh(2)');
/src/test/function/trigonometry/asinh.test.js-99-    assert.equal(expression.toTex(), '\\sinh^{-1}\\left(2\\right)');
##############################################
/src/test/function/trigonometry/acosh.test.js-113-  it('should LaTeX acosh', function () {
/src/test/function/trigonometry/acosh.test.js:114:    var expression = math.parse('acosh(1)');
/src/test/function/trigonometry/acosh.test.js-115-    assert.equal(expression.toTex(), '\\cosh^{-1}\\left(1\\right)');
##############################################
/src/test/function/trigonometry/csch.test.js-85-  it('should LaTeX csch', function () {
/src/test/function/trigonometry/csch.test.js:86:    var expression = math.parse('csch(1)');
/src/test/function/trigonometry/csch.test.js-87-    assert.equal(expression.toTex(), '\\mathrm{csch}\\left(1\\right)');
##############################################
/src/test/function/trigonometry/acot.test.js-116-  it('should LaTeX acot', function () {
/src/test/function/trigonometry/acot.test.js:117:    var expression = math.parse('acot(2)');
/src/test/function/trigonometry/acot.test.js-118-    assert.equal(expression.toTex(), '\\cot^{-1}\\left(2\\right)');
##############################################
/src/test/function/trigonometry/coth.test.js-82-  it('should LaTeX coth', function () {
/src/test/function/trigonometry/coth.test.js:83:    var expression = math.parse('coth(1)');
/src/test/function/trigonometry/coth.test.js-84-    assert.equal(expression.toTex(), '\\coth\\left(1\\right)');
##############################################
/src/test/function/trigonometry/atanh.test.js-115-  it('should LaTeX atanh', function () {
/src/test/function/trigonometry/atanh.test.js:116:    var expression = math.parse('atanh(0.5)');
/src/test/function/trigonometry/atanh.test.js-117-    assert.equal(expression.toTex(), '\\tanh^{-1}\\left(0.5\\right)');
##############################################
/src/test/function/trigonometry/atan2.test.js-166-  it('should LaTeX atan2', function () {
/src/test/function/trigonometry/atan2.test.js:167:    var expression = math.parse('atan2(1,1)');
/src/test/function/trigonometry/atan2.test.js-168-    assert.equal(expression.toTex(), '\\mathrm{atan2}\\left(1,1\\right)');
##############################################
/src/test/function/trigonometry/cot.test.js-101-  it('should LaTeX cot', function () {
/src/test/function/trigonometry/cot.test.js:102:    var expression = math.parse('cot(1)');
/src/test/function/trigonometry/cot.test.js-103-    assert.equal(expression.toTex(), '\\cot\\left(1\\right)');
##############################################
/src/test/function/trigonometry/acoth.test.js-116-  it('should LaTeX acoth', function () {
/src/test/function/trigonometry/acoth.test.js:117:    var expression = math.parse('acoth(2)');
/src/test/function/trigonometry/acoth.test.js-118-    assert.equal(expression.toTex(), '\\coth^{-1}\\left(2\\right)');
##############################################
/src/test/function/trigonometry/asin.test.js-137-  it('should LaTeX asin', function () {
/src/test/function/trigonometry/asin.test.js:138:    var expression = math.parse('asin(0.5)');
/src/test/function/trigonometry/asin.test.js-139-    assert.equal(expression.toTex(), '\\sin^{-1}\\left(0.5\\right)');
##############################################
/src/test/function/trigonometry/cos.test.js-124-  it('should LaTeX cos', function () {
/src/test/function/trigonometry/cos.test.js:125:    var expression = math.parse('cos(1)');
/src/test/function/trigonometry/cos.test.js-126-    assert.equal(expression.toTex(), '\\cos\\left(1\\right)');
##############################################
/src/test/function/trigonometry/atan.test.js-111-  it('should LaTeX atan', function () {
/src/test/function/trigonometry/atan.test.js:112:    var expression = math.parse('atan(10)');
/src/test/function/trigonometry/atan.test.js-113-    assert.equal(expression.toTex(), '\\tan^{-1}\\left(10\\right)');
##############################################
/src/test/function/trigonometry/sech.test.js-83-  it('should LaTeX sech', function () {
/src/test/function/trigonometry/sech.test.js:84:    var expression = math.parse('sech(1)');
/src/test/function/trigonometry/sech.test.js-85-    assert.equal(expression.toTex(), '\\mathrm{sech}\\left(1\\right)');
##############################################
/src/test/function/trigonometry/sec.test.js-110-  it('should LaTeX sec', function () {
/src/test/function/trigonometry/sec.test.js:111:    var expression = math.parse('sec(1)');
/src/test/function/trigonometry/sec.test.js-112-    assert.equal(expression.toTex(), '\\sec\\left(1\\right)');
##############################################
/src/test/function/trigonometry/sinh.test.js-108-  it('should LaTeX sinh', function () {
/src/test/function/trigonometry/sinh.test.js:109:    var expression = math.parse('sinh(1)');
/src/test/function/trigonometry/sinh.test.js-110-    assert.equal(expression.toTex(), '\\sinh\\left(1\\right)');
##############################################
/src/test/function/trigonometry/asec.test.js-120-  it('should LaTeX asec', function () {
/src/test/function/trigonometry/asec.test.js:121:    var expression = math.parse('asec(2)');
/src/test/function/trigonometry/asec.test.js-122-    assert.equal(expression.toTex(), '\\sec^{-1}\\left(2\\right)');
##############################################
/src/test/function/trigonometry/acos.test.js-112-  it('should LaTeX acos', function () {
/src/test/function/trigonometry/acos.test.js:113:    var expression = math.parse('acos(1)');
/src/test/function/trigonometry/acos.test.js-114-    assert.equal(expression.toTex(), '\\cos^{-1}\\left(1\\right)');
##############################################
/src/test/function/trigonometry/sin.test.js-120-  it('should LaTeX sin', function () {
/src/test/function/trigonometry/sin.test.js:121:    var expression = math.parse('sin(0.5)');
/src/test/function/trigonometry/sin.test.js-122-    assert.equal(expression.toTex(), '\\sin\\left(0.5\\right)');
##############################################
/src/test/function/trigonometry/acsc.test.js-139-  it('should LaTex acsc', function () {
/src/test/function/trigonometry/acsc.test.js:140:    var expression = math.parse('acsc(2)');
/src/test/function/trigonometry/acsc.test.js-141-    assert.equal(expression.toTex(), '\\csc^{-1}\\left(2\\right)');
##############################################
/src/test/function/trigonometry/csc.test.js-95-  it('should LaTeX csc', function () {
/src/test/function/trigonometry/csc.test.js:96:    var expression = math.parse('csc(1)');
/src/test/function/trigonometry/csc.test.js-97-    assert.equal(expression.toTex(), '\\csc\\left(1\\right)');
##############################################
/src/test/function/trigonometry/asech.test.js-116-  it('should LaTeX asech', function () {
/src/test/function/trigonometry/asech.test.js:117:    var expression = math.parse('asech(1)');
/src/test/function/trigonometry/asech.test.js-118-    assert.equal(expression.toTex(), '\\mathrm{sech}^{-1}\\left(1\\right)');
##############################################
/src/test/function/trigonometry/acsch.test.js-96-  it('should LaTeX acsch', function () {
/src/test/function/trigonometry/acsch.test.js:97:    var expression = math.parse('acsch(2)');
/src/test/function/trigonometry/acsch.test.js-98-    assert.equal(expression.toTex(), '\\mathrm{csch}^{-1}\\left(2\\right)');
##############################################
/src/test/function/trigonometry/tanh.test.js-93-  it('should LaTeX tanh', function () {
/src/test/function/trigonometry/tanh.test.js:94:    var expression = math.parse('tanh(1)');
/src/test/function/trigonometry/tanh.test.js-95-    assert.equal(expression.toTex(), '\\tanh\\left(1\\right)');
##############################################
/src/test/function/trigonometry/tan.test.js-94-  it('should LaTeX tan', function () {
/src/test/function/trigonometry/tan.test.js:95:    var expression = math.parse('tan(1)');
/src/test/function/trigonometry/tan.test.js-96-    assert.equal(expression.toTex(), '\\tan\\left(1\\right)');
##############################################
/src/test/function/algebra/derivative.test.js-46-    // non-embedded example
/src/test/function/algebra/derivative.test.js:47:    var f_of_x = math.parse('f(x) = x + 2');
/src/test/function/algebra/derivative.test.js:48:    var newFunc = new OperatorNode('+', 'add', [math.parse('5x'), f_of_x]);
/src/test/function/algebra/derivative.test.js-49-    assert.equal(derivativeWithoutSimplify(newFunc, 'x'), '5 * 1 + 1 + 0');
##############################################
/src/test/function/algebra/derivative.test.js-164-  it('should function properly even without being called within an eval', function() {
/src/test/function/algebra/derivative.test.js:165:    var f = math.parse('2x^3');
/src/test/function/algebra/derivative.test.js-166-
##############################################
/src/test/function/algebra/derivative.test.js-173-    compareString(derivative('x^2', 'x'), '2 * x');
/src/test/function/algebra/derivative.test.js:174:    compareString(derivative(math.parse('x^2'), 'x'), '2 * x');
/src/test/function/algebra/derivative.test.js:175:    compareString(derivative('x^2', math.parse('x')), '2 * x');
/src/test/function/algebra/derivative.test.js:176:    compareString(derivative(math.parse('x^2'), math.parse('x')), '2 * x');
/src/test/function/algebra/derivative.test.js-177-  });
##############################################
/src/test/function/algebra/simplify.test.js-9-        if (scope) {
/src/test/function/algebra/simplify.test.js:10:            assert.equal(math.simplify(left, scope).toString(), math.parse(right).toString());
/src/test/function/algebra/simplify.test.js-11-        } else {
/src/test/function/algebra/simplify.test.js:12:            assert.equal(math.simplify(left).toString(), math.parse(right).toString());
/src/test/function/algebra/simplify.test.js-13-        }
##############################################
/src/test/function/algebra/simplify.test.js-25-    scope = scope || {};
/src/test/function/algebra/simplify.test.js:26:    assert.equal(math.simplify(left).eval(scope), math.parse(right).eval(scope));
/src/test/function/algebra/simplify.test.js-27-  }
##############################################
/src/test/function/algebra/simplify.test.js-47-    var node = math.expression.node;
/src/test/function/algebra/simplify.test.js:48:    var f = new node.FunctionAssignmentNode('sigma', ['x'], math.parse('1 / (1 + exp(-x))'));
/src/test/function/algebra/simplify.test.js-49-    assert.equal(f.toString(), 'sigma(x) = 1 / (1 + exp(-x))');
##############################################
/src/test/function/algebra/simplify.test.js-75-    var node = math.expression.node;
/src/test/function/algebra/simplify.test.js:76:    var s = new node.FunctionAssignmentNode('sigma', ['x'], math.parse('1 / (1 + exp(-x))'));
/src/test/function/algebra/simplify.test.js-77-    var f = new node.FunctionNode(s, [new node.SymbolNode('x')]);
##############################################
/src/test/function/algebra/simplify.test.js-88-    simplifyAndCompare('2 - -3', '5');
/src/test/function/algebra/simplify.test.js:89:    var e = math.parse('2 - -3');
/src/test/function/algebra/simplify.test.js-90-    e = math.simplify.simplifyCore(e);
##############################################
/src/test/function/algebra/simplify.test.js-92-    simplifyAndCompare('x - -x', '2*x');
/src/test/function/algebra/simplify.test.js:93:    var e = math.parse('x - -x');
/src/test/function/algebra/simplify.test.js-94-    e = math.simplify.simplifyCore(e);
##############################################
/src/test/function/algebra/simplify.test.js-201-    assert.equal(
/src/test/function/algebra/simplify.test.js:202:        math.simplify.resolve(math.parse('x+y'), {x:1}).toString(), 
/src/test/function/algebra/simplify.test.js-203-        "1 + y"
##############################################
/src/test/function/algebra/simplify.test.js-206-    simplifyAndCompare('x+y', 'y+1', {x:1});
/src/test/function/algebra/simplify.test.js:207:    simplifyAndCompare('x+y', 'y+1', {x:math.parse('1')});
/src/test/function/algebra/simplify.test.js-208-    simplifyAndCompare('x+y', '3', {x:1,y:2});
/src/test/function/algebra/simplify.test.js-209-    simplifyAndCompare('x+x+x', '3*x');
/src/test/function/algebra/simplify.test.js:210:    simplifyAndCompare('y', 'x+1', {y:math.parse("1+x")});
/src/test/function/algebra/simplify.test.js:211:    simplifyAndCompare('y', '3', {x:2, y:math.parse("1+x")});
/src/test/function/algebra/simplify.test.js:212:    simplifyAndCompare('x+y', '3*x', {y:math.parse("x+x")});
/src/test/function/algebra/simplify.test.js:213:    simplifyAndCompare('x+y', '6', {x:2,y:math.parse("x+x")});
/src/test/function/algebra/simplify.test.js:214:    simplifyAndCompare('x+(y+2-1-1)', '6', {x:2,y:math.parse("x+x")}); // parentheses
/src/test/function/algebra/simplify.test.js:215:    simplifyAndCompare('log(x+y)', String(Math.log(6)), {x:2,y:math.parse("x+x")}); // function
/src/test/function/algebra/simplify.test.js-216-    simplifyAndCompare('combinations( ceil(abs(sin(x)) * y), abs(x) )', 
##############################################
/src/test/function/algebra/simplify.test.js-251-      // TODO: this requires the + operator to support Nodes,
/src/test/function/algebra/simplify.test.js:252:      //       i.e.   math.add(5, math.parse('2')) => return an OperatorNode
/src/test/function/algebra/simplify.test.js-253-      var res = math.eval('simplify(5+derivative(5/(3x), x))');
##############################################
/src/test/function/utils/typeof.test.js-108-  it('should LaTeX typeof', function () {
/src/test/function/utils/typeof.test.js:109:    var expression = math.parse('typeof(1)');
/src/test/function/utils/typeof.test.js-110-    assert.equal(expression.toTex(), '\\mathrm{typeof}\\left(1\\right)');
##############################################
/src/test/function/utils/clone.test.js-84-  it('should LaTeX clone', function () {
/src/test/function/utils/clone.test.js:85:    var expression = math.parse('clone(1)');
/src/test/function/utils/clone.test.js-86-    assert.equal(expression.toTex(), '\\mathrm{clone}\\left(1\\right)');
##############################################
/src/test/function/bitwise/bitOr.test.js-216-  it('should LaTeX bitOr', function () {
/src/test/function/bitwise/bitOr.test.js:217:    var expression = math.parse('bitOr(2,3)');
/src/test/function/bitwise/bitOr.test.js-218-    assert.equal(expression.toTex(), '\\left(2|3\\right)');
##############################################
/src/test/function/bitwise/leftShift.test.js-178-  it('should LaTeX leftShift', function () {
/src/test/function/bitwise/leftShift.test.js:179:    var expression = math.parse('leftShift(2,3)');
/src/test/function/bitwise/leftShift.test.js-180-    assert.equal(expression.toTex(), '\\left(2<<3\\right)');
##############################################
/src/test/function/bitwise/bitNot.test.js-64-  it('should LaTeX bitNot', function () {
/src/test/function/bitwise/bitNot.test.js:65:    var expression = math.parse('bitNot(4)');
/src/test/function/bitwise/bitNot.test.js-66-    assert.equal(expression.toTex(), '~\\left(4\\right)');
##############################################
/src/test/function/bitwise/bitXor.test.js-165-  it('should LaTeX bitXor', function () {
/src/test/function/bitwise/bitXor.test.js:166:    var expression = math.parse('bitXor(2,3)');
/src/test/function/bitwise/bitXor.test.js-167-    assert.equal(expression.toTex(), '\\left(2\\underline{|}3\\right)');
##############################################
/src/test/function/bitwise/rightArithShift.test.js-182-  it('should LaTeX rightArithShift', function () {
/src/test/function/bitwise/rightArithShift.test.js:183:    var expression = math.parse('rightArithShift(3,2)');
/src/test/function/bitwise/rightArithShift.test.js-184-    assert.equal(expression.toTex(), '\\left(3>>2\\right)');
##############################################
/src/test/function/bitwise/rightLogShift.test.js-144-  it('should LaTeX rightLogShift', function () {
/src/test/function/bitwise/rightLogShift.test.js:145:    var expression = math.parse('rightLogShift(1,2)');
/src/test/function/bitwise/rightLogShift.test.js-146-    assert.equal(expression.toTex(), '\\left(1>>>2\\right)');
##############################################
/src/test/function/bitwise/bitAnd.test.js-216-  it('should LaTeX bitAnd', function () {
/src/test/function/bitwise/bitAnd.test.js:217:    var expression = math.parse('bitAnd(4,2)');
/src/test/function/bitwise/bitAnd.test.js-218-    assert.equal(expression.toTex(), '\\left(4\\&2\\right)');
##############################################
/src/test/function/arithmetic/pow.test.js-263-  it('should LaTeX pow', function () {
/src/test/function/arithmetic/pow.test.js:264:    var expression = math.parse('pow(2,10)');
/src/test/function/arithmetic/pow.test.js-265-    assert.equal(expression.toTex(), '\\left(2\\right)^{10}');
##############################################
/src/test/function/arithmetic/multiply.test.js-896-  it('should LaTeX multiply', function () {
/src/test/function/arithmetic/multiply.test.js:897:    var expression = math.parse('multiply(2,3)');
/src/test/function/arithmetic/multiply.test.js-898-    assert.equal(expression.toTex(), '\\left(2\\cdot3\\right)');
##############################################
/src/test/function/arithmetic/addScalar.test.js-146-  it('should LaTeX add', function () {
/src/test/function/arithmetic/addScalar.test.js:147:    var expression = math.parse('add(1,2)');
/src/test/function/arithmetic/addScalar.test.js-148-    assert.equal(expression.toTex(), '\\left(1+2\\right)');
##############################################
/src/test/function/arithmetic/divide.test.js-211-  it('should LaTeX divide', function () {
/src/test/function/arithmetic/divide.test.js:212:    var expression = math.parse('divide(1,2)');
/src/test/function/arithmetic/divide.test.js-213-    assert.equal(expression.toTex(), '\\frac{1}{2}');
##############################################
/src/test/function/arithmetic/xgcd.test.js-123-  it('should LaTeX xgcd', function () {
/src/test/function/arithmetic/xgcd.test.js:124:    var expression = math.parse('xgcd(2,3)');
/src/test/function/arithmetic/xgcd.test.js-125-    assert.equal(expression.toTex(), '\\mathrm{xgcd}\\left(2,3\\right)');
##############################################
/src/test/function/arithmetic/ceil.test.js-93-  it('should LaTeX ceil', function () {
/src/test/function/arithmetic/ceil.test.js:94:    var expression = math.parse('ceil(0.5)');
/src/test/function/arithmetic/ceil.test.js-95-    assert.equal(expression.toTex(), '\\left\\lceil0.5\\right\\rceil');
##############################################
/src/test/function/arithmetic/cbrt.test.js-131-  it('should LaTeX cbrt', function () {
/src/test/function/arithmetic/cbrt.test.js:132:    var expression = math.parse('cbrt(2)');
/src/test/function/arithmetic/cbrt.test.js-133-    assert.equal(expression.toTex(), '\\sqrt[3]{2}');
##############################################
/src/test/function/arithmetic/norm.test.js-106-  it('should LaTeX norm', function () {
/src/test/function/arithmetic/norm.test.js:107:    var expr1 = math.parse('norm(a)');
/src/test/function/arithmetic/norm.test.js:108:    var expr2 = math.parse("norm(a,2)");
/src/test/function/arithmetic/norm.test.js-109-
##############################################
/src/test/function/arithmetic/fix.test.js-95-  it('should LaTeX fix', function () {
/src/test/function/arithmetic/fix.test.js:96:    var expression = math.parse('fix(0.6)');
/src/test/function/arithmetic/fix.test.js-97-    assert.equal(expression.toTex(), '\\mathrm{fix}\\left(0.6\\right)');
##############################################
/src/test/function/arithmetic/nthRoot.test.js-206-  it('should LaTeX nthRoot', function () {
/src/test/function/arithmetic/nthRoot.test.js:207:    var expression = math.parse('nthRoot(8,3)');
/src/test/function/arithmetic/nthRoot.test.js-208-    assert.equal(expression.toTex(), '\\sqrt[3]{8}');
##############################################
/src/test/function/arithmetic/abs.test.js-99-  it('should LaTeX abs', function () {
/src/test/function/arithmetic/abs.test.js:100:    var expression = math.parse('abs(-1)');
/src/test/function/arithmetic/abs.test.js-101-    assert.equal(expression.toTex(),'\\left|-1\\right|');
##############################################
/src/test/function/arithmetic/gcd.test.js-169-  it('should LaTeX gcd', function () {
/src/test/function/arithmetic/gcd.test.js:170:    var expression = math.parse('gcd(2,3)');
/src/test/function/arithmetic/gcd.test.js-171-    assert.equal(expression.toTex(), '\\gcd\\left(2,3\\right)');
##############################################
/src/test/function/arithmetic/floor.test.js-92-  it('should LaTeX floor', function () {
/src/test/function/arithmetic/floor.test.js:93:    var expression = math.parse('floor(0.6)');
/src/test/function/arithmetic/floor.test.js-94-    assert.equal(expression.toTex(), '\\left\\lfloor0.6\\right\\rfloor');
##############################################
/src/test/function/arithmetic/lcm.test.js-165-  it('should LaTeX lcm', function () {
/src/test/function/arithmetic/lcm.test.js:166:    var expression = math.parse('lcm(2,3)');
/src/test/function/arithmetic/lcm.test.js-167-    assert.equal(expression.toTex(), '\\mathrm{lcm}\\left(2,3\\right)');
##############################################
/src/test/function/arithmetic/sqrt.test.js-95-  it('should LaTeX sqrt', function () {
/src/test/function/arithmetic/sqrt.test.js:96:    var expression = math.parse('sqrt(2)');
/src/test/function/arithmetic/sqrt.test.js-97-    assert.equal(expression.toTex(), '\\sqrt{2}');
##############################################
/src/test/function/arithmetic/round.test.js-137-  it('should LaTeX round', function () {
/src/test/function/arithmetic/round.test.js:138:    var expr1 = math.parse('round(1.1)');
/src/test/function/arithmetic/round.test.js:139:    var expr2 = math.parse('round(1.1,2)');
/src/test/function/arithmetic/round.test.js-140-
##############################################
/src/test/function/arithmetic/unaryPlus.test.js-109-  it('should LaTeX unaryPlus', function () {
/src/test/function/arithmetic/unaryPlus.test.js:110:    var expression = math.parse('unaryPlus(1)');
/src/test/function/arithmetic/unaryPlus.test.js-111-    assert.equal(expression.toTex(), '+\\left(1\\right)');
##############################################
/src/test/function/arithmetic/dotMultiply.test.js-185-  it('should LaTeX dotMultiply', function () {
/src/test/function/arithmetic/dotMultiply.test.js:186:    var expression = math.parse('dotMultiply([1,2],[3,4])');
/src/test/function/arithmetic/dotMultiply.test.js-187-    assert.equal(expression.toTex(), '\\left(\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix}.\\cdot\\begin{bmatrix}3\\\\4\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/arithmetic/dotPow.test.js-176-  it('should LaTeX dotPow', function () {
/src/test/function/arithmetic/dotPow.test.js:177:    var expression = math.parse('dotPow([1,2],[3,4])');
/src/test/function/arithmetic/dotPow.test.js-178-    assert.equal(expression.toTex(), '\\left(\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix}.^\\wedge\\begin{bmatrix}3\\\\4\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/function/arithmetic/unaryMinus.test.js-77-  it('should LaTeX unaryMinus', function () {
/src/test/function/arithmetic/unaryMinus.test.js:78:    var expression = math.parse('unaryMinus(1)');
/src/test/function/arithmetic/unaryMinus.test.js-79-    assert.equal(expression.toTex(), '-\\left(1\\right)');
##############################################
/src/test/function/arithmetic/cube.test.js-69-  it('should LaTeX cube', function () {
/src/test/function/arithmetic/cube.test.js:70:    var expression = math.parse('cube(2)');
/src/test/function/arithmetic/cube.test.js-71-    assert.equal(expression.toTex(), '\\left(2\\right)^3');
##############################################
/src/test/function/arithmetic/log10.test.js-108-  it('should LaTeX log10', function () {
/src/test/function/arithmetic/log10.test.js:109:    var expression = math.parse('log10(10)');
/src/test/function/arithmetic/log10.test.js-110-    assert.equal(expression.toTex(), '\\log_{10}\\left(10\\right)');
##############################################
/src/test/function/arithmetic/mod.test.js-178-  it('should LaTeX mod', function () {
/src/test/function/arithmetic/mod.test.js:179:    var expression = math.parse('mod(11,2)');
/src/test/function/arithmetic/mod.test.js-180-    assert.equal(expression.toTex(), '\\left(11\\mod2\\right)');
##############################################
/src/test/function/arithmetic/square.test.js-67-  it('should LaTeX square', function () {
/src/test/function/arithmetic/square.test.js:68:    var expression = math.parse('square(4)');
/src/test/function/arithmetic/square.test.js-69-    assert.equal(expression.toTex(), '\\left(4\\right)^2');
##############################################
/src/test/function/arithmetic/log.test.js-114-  it('should LaTeX log', function () {
/src/test/function/arithmetic/log.test.js:115:    var expr1 = math.parse('log(e)');
/src/test/function/arithmetic/log.test.js:116:    var expr2 = math.parse('log(32,2)');
/src/test/function/arithmetic/log.test.js-117-
##############################################
/src/test/function/arithmetic/sign.test.js-76-  it('should LaTeX sign', function () {
/src/test/function/arithmetic/sign.test.js:77:    var expression = math.parse('sign(-4)');
/src/test/function/arithmetic/sign.test.js-78-    assert.equal(expression.toTex(), '\\mathrm{sign}\\left(-4\\right)');
##############################################
/src/test/function/arithmetic/hypot.test.js-51-  it('should LaTeX hypot', function () {
/src/test/function/arithmetic/hypot.test.js:52:    var expression = math.parse('hypot(3,4)');
/src/test/function/arithmetic/hypot.test.js-53-    assert.equal(expression.toTex(),'\\hypot\\left(3,4\\right)');
##############################################
/src/test/function/arithmetic/exp.test.js-85-  it('should LaTeX exp', function () {
/src/test/function/arithmetic/exp.test.js:86:    var expression = math.parse('exp(0)');
/src/test/function/arithmetic/exp.test.js-87-    assert.equal(expression.toTex(), '\\exp\\left(0\\right)');
##############################################
/src/test/function/arithmetic/subtract.test.js-244-  it('should LaTeX subtract', function () {
/src/test/function/arithmetic/subtract.test.js:245:    var expression = math.parse('subtract(2,1)');
/src/test/function/arithmetic/subtract.test.js-246-    assert.equal(expression.toTex(), '\\left(2-1\\right)');
##############################################
/src/test/function/arithmetic/dotDivide.test.js-174-  it('should LaTeX dotDivide', function () {
/src/test/function/arithmetic/dotDivide.test.js:175:    var expression = math.parse('dotDivide([1,2],[3,4])');
/src/test/function/arithmetic/dotDivide.test.js-176-    assert.equal(expression.toTex(), '\\left(\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix}.:\\begin{bmatrix}3\\\\4\\\\\\end{bmatrix}\\right)');
##############################################
/src/test/expression/parse.test.js-285-
/src/test/expression/parse.test.js:286:      assert.deepEqual(bigmath.parse('0.1').compile().eval(), bigmath.bignumber(0.1));
/src/test/expression/parse.test.js:287:      assert.deepEqual(bigmath.parse('1.2e5000').compile().eval(), bigmath.bignumber('1.2e5000'));
/src/test/expression/parse.test.js-288-    });
##############################################
/src/test/expression/parse.test.js-298-
/src/test/expression/parse.test.js:299:      assert(fmath.parse('0.1').compile().eval() instanceof math.type.Fraction);
/src/test/expression/parse.test.js:300:      assert.equal(fmath.parse('1/3').compile().eval().toString(), '0.(3)');
/src/test/expression/parse.test.js:301:      assert.equal(fmath.parse('0.1+0.2').compile().eval().toString(), '0.3');
/src/test/expression/parse.test.js-302-    });
##############################################
/src/test/expression/parse.test.js-1127-    it('should throw an error when having an implicit multiplication between two numbers', function() {
/src/test/expression/parse.test.js:1128:      assert.throws(function () { math.parse('2 3'); }, /Unexpected part "3"/);
/src/test/expression/parse.test.js:1129:      assert.throws(function () { math.parse('2 * 3 4'); }, /Unexpected part "4"/);
/src/test/expression/parse.test.js:1130:      assert.throws(function () { math.parse('2 * 3 4 * 5'); }, /Unexpected part "4"/);
/src/test/expression/parse.test.js:1131:      assert.throws(function () { math.parse('2 / 3 4 5'); }, /Unexpected part "4"/);
/src/test/expression/parse.test.js:1132:      assert.throws(function () { math.parse('2 + 3 4'); }, /Unexpected part "4"/);
/src/test/expression/parse.test.js:1133:      assert.throws(function () { math.parse('-2 2'); }, /Unexpected part "2"/);
/src/test/expression/parse.test.js:1134:      assert.throws(function () { math.parse('+3 3'); }, /Unexpected part "3"/);
/src/test/expression/parse.test.js:1135:      assert.throws(function () { math.parse('2^3 4'); }, /Unexpected part "4"/);
/src/test/expression/parse.test.js-1136-    });
##############################################
/src/test/expression/parse.test.js-1370-      var scope = {};
/src/test/expression/parse.test.js:1371:      math.parse('true ? (a = 2) : (b = 2)').compile().eval(scope);
/src/test/expression/parse.test.js-1372-      assert.deepEqual(scope, {a: 2});
##############################################
/src/test/expression/parse.test.js-1503-      it('should respect precedence of transpose', function () {
/src/test/expression/parse.test.js:1504:        var node = math.parse('a + b\'');
/src/test/expression/parse.test.js-1505-        assert(node instanceof OperatorNode);
##############################################
/src/test/expression/parse.test.js-1511-      it('should respect precedence of transpose (2)', function () {
/src/test/expression/parse.test.js:1512:        var node = math.parse('a ^ b\'');
/src/test/expression/parse.test.js-1513-        assert(node instanceof OperatorNode);
##############################################
/src/test/expression/parse.test.js-1566-      it('should respect precedence of conditional operator and logical or', function () {
/src/test/expression/parse.test.js:1567:        var node = math.parse('1 or 0 ? 2 or 3 : 0 or 0');
/src/test/expression/parse.test.js-1568-        assert(node instanceof ConditionalNode);
##############################################
/src/test/expression/parse.test.js-1575-      it('should respect precedence of conditional operator and relational operators', function () {
/src/test/expression/parse.test.js:1576:        var node = math.parse('a == b ? a > b : a < b');
/src/test/expression/parse.test.js-1577-        assert(node instanceof ConditionalNode);
##############################################
/src/test/expression/parse.test.js-1583-      it('should respect precedence of conditional operator and range operator', function () {
/src/test/expression/parse.test.js:1584:        var node = math.parse('a ? b : c : d');
/src/test/expression/parse.test.js-1585-        assert(node instanceof ConditionalNode);
##############################################
/src/test/expression/parse.test.js-1591-      it('should respect precedence of conditional operator and range operator (2)', function () {
/src/test/expression/parse.test.js:1592:        var node = math.parse('a ? (b : c) : (d : e)');
/src/test/expression/parse.test.js-1593-        assert(node instanceof ConditionalNode);
##############################################
/src/test/expression/parse.test.js-1599-      it('should respect precedence of conditional operator and range operator (2)', function () {
/src/test/expression/parse.test.js:1600:        var node = math.parse('a ? (b ? c : d) : (e ? f : g)');
/src/test/expression/parse.test.js-1601-        assert(node instanceof ConditionalNode);
##############################################
/src/test/expression/parse.test.js-1607-      it('should respect precedence of range operator and relational operators', function () {
/src/test/expression/parse.test.js:1608:        var node = math.parse('a:b == c:d');
/src/test/expression/parse.test.js-1609-        assert(node instanceof OperatorNode);
##############################################
/src/test/expression/parse.test.js-1614-      it('should respect precedence of range operator and operator plus and minus', function () {
/src/test/expression/parse.test.js:1615:        var node = math.parse('a + b : c - d');
/src/test/expression/parse.test.js-1616-        assert(node instanceof RangeNode);
##############################################
/src/test/expression/parse.test.js-1621-      it('should respect precedence of "to" operator and relational operators', function () {
/src/test/expression/parse.test.js:1622:        var node = math.parse('a == b to c');
/src/test/expression/parse.test.js-1623-        assert(node instanceof OperatorNode);
##############################################
/src/test/expression/parse.test.js-1628-      it('should respect precedence of "to" operator and relational operators (2)', function () {
/src/test/expression/parse.test.js:1629:        var node = math.parse('a to b == c');
/src/test/expression/parse.test.js-1630-        assert(node instanceof OperatorNode);
##############################################
/src/test/expression/parse.test.js-1973-
/src/test/expression/parse.test.js:1974:      var node = math.expression.parse('$foo');
/src/test/expression/parse.test.js-1975-      var result = node.eval({$foo: 42});
##############################################
/src/test/expression/Parser.test.js-27-
/src/test/expression/Parser.test.js:28:    assert.throws(function () {parser.parse('2 + 3');}, /is deprecated/);
/src/test/expression/Parser.test.js-29-  });
##############################################
/src/test/expression/node/RangeNode.test.js-317-  it ('should respect the \'all\' parenthesis option', function () {
/src/test/expression/node/RangeNode.test.js:318:    assert.equal(math.parse('1:2:3').toString({parenthesis: 'all'}), '(1):(2):(3)');
/src/test/expression/node/RangeNode.test.js:319:    assert.equal(math.parse('1:2:3').toTex({parenthesis: 'all'}), '\\left(1\\right):\\left(2\\right):\\left(3\\right)');
/src/test/expression/node/RangeNode.test.js-320-  });
##############################################
/src/test/expression/node/OperatorNode.test.js-311-    it ('should stringify left associative OperatorNodes that are associative with another Node', function () {
/src/test/expression/node/OperatorNode.test.js:312:      assert.equal(math.parse('(a+b)+c').toString({parenthesis: 'auto'}), 'a + b + c');
/src/test/expression/node/OperatorNode.test.js:313:      assert.equal(math.parse('a+(b+c)').toString({parenthesis: 'auto'}), 'a + b + c');
/src/test/expression/node/OperatorNode.test.js:314:      assert.equal(math.parse('(a+b)-c').toString({parenthesis: 'auto'}), 'a + b - c');
/src/test/expression/node/OperatorNode.test.js:315:      assert.equal(math.parse('a+(b-c)').toString({parenthesis: 'auto'}), 'a + b - c');
/src/test/expression/node/OperatorNode.test.js-316-
/src/test/expression/node/OperatorNode.test.js:317:      assert.equal(math.parse('(a*b)*c').toString({parenthesis: 'auto'}), 'a * b * c');
/src/test/expression/node/OperatorNode.test.js:318:      assert.equal(math.parse('a*(b*c)').toString({parenthesis: 'auto'}), 'a * b * c');
/src/test/expression/node/OperatorNode.test.js:319:      assert.equal(math.parse('(a*b)/c').toString({parenthesis: 'auto'}), 'a * b / c');
/src/test/expression/node/OperatorNode.test.js:320:      assert.equal(math.parse('a*(b/c)').toString({parenthesis: 'auto'}), 'a * b / c');
/src/test/expression/node/OperatorNode.test.js-321-    });
##############################################
/src/test/expression/node/OperatorNode.test.js-323-    it ('should stringify left associative OperatorNodes that are not associative with another Node', function () {
/src/test/expression/node/OperatorNode.test.js:324:      assert.equal(math.parse('(a-b)-c').toString({parenthesis: 'auto'}), 'a - b - c');
/src/test/expression/node/OperatorNode.test.js:325:      assert.equal(math.parse('a-(b-c)').toString({parenthesis: 'auto'}), 'a - (b - c)');
/src/test/expression/node/OperatorNode.test.js:326:      assert.equal(math.parse('(a-b)+c').toString({parenthesis: 'auto'}), 'a - b + c');
/src/test/expression/node/OperatorNode.test.js:327:      assert.equal(math.parse('a-(b+c)').toString({parenthesis: 'auto'}), 'a - (b + c)');
/src/test/expression/node/OperatorNode.test.js-328-
/src/test/expression/node/OperatorNode.test.js:329:      assert.equal(math.parse('(a/b)/c').toString({parenthesis: 'auto'}), 'a / b / c');
/src/test/expression/node/OperatorNode.test.js:330:      assert.equal(math.parse('a/(b/c)').toString({parenthesis: 'auto'}), 'a / (b / c)');
/src/test/expression/node/OperatorNode.test.js:331:      assert.equal(math.parse('(a/b)*c').toString({parenthesis: 'auto'}), 'a / b * c');
/src/test/expression/node/OperatorNode.test.js:332:      assert.equal(math.parse('a/(b*c)').toString({parenthesis: 'auto'}), 'a / (b * c)');
/src/test/expression/node/OperatorNode.test.js-333-    });
##############################################
/src/test/expression/node/OperatorNode.test.js-335-    it ('should stringify right associative OperatorNodes that are not associative with another Node', function () {
/src/test/expression/node/OperatorNode.test.js:336:      assert.equal(math.parse('(a^b)^c').toString({parenthesis: 'auto'}), '(a ^ b) ^ c');
/src/test/expression/node/OperatorNode.test.js:337:      assert.equal(math.parse('a^(b^c)').toString({parenthesis: 'auto'}), 'a ^ b ^ c');
/src/test/expression/node/OperatorNode.test.js-338-    });
##############################################
/src/test/expression/node/OperatorNode.test.js-340-    it ('should stringify unary OperatorNodes containing a binary OperatorNode', function () {
/src/test/expression/node/OperatorNode.test.js:341:      assert.equal(math.parse('(a*b)!').toString(), '(a * b)!');
/src/test/expression/node/OperatorNode.test.js:342:      assert.equal(math.parse('-(a*b)').toString(), '-(a * b)');
/src/test/expression/node/OperatorNode.test.js:343:      assert.equal(math.parse('-(a+b)').toString(), '-(a + b)');
/src/test/expression/node/OperatorNode.test.js-344-    });
##############################################
/src/test/expression/node/OperatorNode.test.js-346-    it ('should stringify unary OperatorNodes containing a unary OperatorNode', function () {
/src/test/expression/node/OperatorNode.test.js:347:      assert.equal(math.parse('(-a)!').toString({parenthesis: 'auto'}), '(-a)!');
/src/test/expression/node/OperatorNode.test.js:348:      assert.equal(math.parse('-(a!)').toString({parenthesis: 'auto'}), '-a!');
/src/test/expression/node/OperatorNode.test.js:349:      assert.equal(math.parse('-(-a)').toString({parenthesis: 'auto'}), '-(-a)');
/src/test/expression/node/OperatorNode.test.js-350-    });
##############################################
/src/test/expression/node/OperatorNode.test.js-397-  it ('should respect the \'all\' parenthesis option', function () {
/src/test/expression/node/OperatorNode.test.js:398:    assert.equal(math.parse('1+1+1').toString({parenthesis: 'all'}), '(1 + 1) + 1' );
/src/test/expression/node/OperatorNode.test.js:399:    assert.equal(math.parse('1+1+1').toTex({parenthesis: 'all'}), '\\left(1+1\\right)+1' );
/src/test/expression/node/OperatorNode.test.js-400-  });
##############################################
/src/test/expression/node/OperatorNode.test.js-402-  it ('should correctly LaTeX fractions in \'all\' parenthesis mode', function () {
/src/test/expression/node/OperatorNode.test.js:403:    assert.equal(math.parse('1/2/3').toTex({parenthesis: 'all'}), '\\frac{\\left(\\frac{1}{2}\\right)}{3}');
/src/test/expression/node/OperatorNode.test.js-404-  });
##############################################
/src/test/expression/node/OperatorNode.test.js-638-    //this covers a bug that was triggered previously
/src/test/expression/node/OperatorNode.test.js:639:    assert.equal(math.parse('1+(1+1)').toTex({parenthesis: 'auto'}), '1+1+1');
/src/test/expression/node/OperatorNode.test.js-640-  });
##############################################
/src/test/expression/node/OperatorNode.test.js-642-  it ('should stringify implicit multiplications', function () {
/src/test/expression/node/OperatorNode.test.js:643:    var a = math.parse('4a');
/src/test/expression/node/OperatorNode.test.js:644:    var b = math.parse('4 a');
/src/test/expression/node/OperatorNode.test.js:645:    var c = math.parse('a b');
/src/test/expression/node/OperatorNode.test.js:646:    var d = math.parse('2a b');
/src/test/expression/node/OperatorNode.test.js:647:    var e = math.parse('a b c');
/src/test/expression/node/OperatorNode.test.js:648:    var f = math.parse('(2+3)a');
/src/test/expression/node/OperatorNode.test.js:649:    var g = math.parse('(2+3)2');
/src/test/expression/node/OperatorNode.test.js:650:    var h = math.parse('2(3+4)');
/src/test/expression/node/OperatorNode.test.js-651-
##############################################
/src/test/expression/node/OperatorNode.test.js-685-  it ('should LaTeX implicit multiplications', function () {
/src/test/expression/node/OperatorNode.test.js:686:    var a = math.parse('4a');
/src/test/expression/node/OperatorNode.test.js:687:    var b = math.parse('4 a');
/src/test/expression/node/OperatorNode.test.js:688:    var c = math.parse('a b');
/src/test/expression/node/OperatorNode.test.js:689:    var d = math.parse('2a b');
/src/test/expression/node/OperatorNode.test.js:690:    var e = math.parse('a b c');
/src/test/expression/node/OperatorNode.test.js:691:    var f = math.parse('(2+3)a');
/src/test/expression/node/OperatorNode.test.js:692:    var g = math.parse('(2+3)2');
/src/test/expression/node/OperatorNode.test.js:693:    var h = math.parse('2(3+4)');
/src/test/expression/node/OperatorNode.test.js-694-
##############################################
/src/test/expression/node/OperatorNode.test.js-728-  it ('should stringify implicit multiplications between ConstantNodes with parentheses', function () {
/src/test/expression/node/OperatorNode.test.js:729:    var a = math.parse('(4)(4)(4)(4)');
/src/test/expression/node/OperatorNode.test.js:730:    var b = math.parse('4b*4(4)');
/src/test/expression/node/OperatorNode.test.js:731:    var c = math.parse('(4(4(4)))');
/src/test/expression/node/OperatorNode.test.js-732-
##############################################
/src/test/expression/node/OperatorNode.test.js-738-  it ('should LaTeX implicit multiplications between ConstantNodes with parentheses', function () {
/src/test/expression/node/OperatorNode.test.js:739:    var a = math.parse('(4)(4)(4)(4)');
/src/test/expression/node/OperatorNode.test.js:740:    var b = math.parse('4b*4(4)');
/src/test/expression/node/OperatorNode.test.js:741:    var c = math.parse('(4(4(4)))');
/src/test/expression/node/OperatorNode.test.js-742-
##############################################
/src/test/expression/node/OperatorNode.test.js-748-  it ('should HTML implicit multiplications between ConstantNodes with parentheses', function () {
/src/test/expression/node/OperatorNode.test.js:749:    var a = math.parse('(4)(4)(4)(4)');
/src/test/expression/node/OperatorNode.test.js:750:    var b = math.parse('4b*4(4)');
/src/test/expression/node/OperatorNode.test.js:751:    var c = math.parse('(4(4(4)))');
/src/test/expression/node/OperatorNode.test.js-752-
##############################################
/src/test/expression/node/FunctionNode.test.js-518-
/src/test/expression/node/FunctionNode.test.js:519:    assert.equal(customMath.parse('add(1,2)').toTex(), '1 plus 2');
/src/test/expression/node/FunctionNode.test.js-520-  });
##############################################
/src/test/expression/node/FunctionNode.test.js-525-
/src/test/expression/node/FunctionNode.test.js:526:    assert.equal(customMath.parse('add(1,2)').toTex(), '1 plus 2');
/src/test/expression/node/FunctionNode.test.js-527-  });
##############################################
/src/test/expression/node/FunctionNode.test.js-537-
/src/test/expression/node/FunctionNode.test.js:538:    assert.equal(customMath.parse('sum(1,2)').toTex(), '1+2');
/src/test/expression/node/FunctionNode.test.js:539:    assert.equal(customMath.parse('sum(1,2,3)').toTex(), '1+2+3');
/src/test/expression/node/FunctionNode.test.js-540-  });
##############################################
/src/test/expression/node/FunctionNode.test.js-545-
/src/test/expression/node/FunctionNode.test.js:546:    assert.equal(customMath.parse('add(1,2)').toTex(), 'add');
/src/test/expression/node/FunctionNode.test.js-547-  });
##############################################
/src/test/expression/node/FunctionNode.test.js-552-
/src/test/expression/node/FunctionNode.test.js:553:    assert.equal(customMath.parse('add(1,2)').toTex(), '1 plus 2');
/src/test/expression/node/FunctionNode.test.js-554-  });
##############################################
/src/test/expression/node/FunctionNode.test.js-559-
/src/test/expression/node/FunctionNode.test.js:560:    assert.equal(customMath.parse('add(1,2)').toTex(), '1,2');
/src/test/expression/node/FunctionNode.test.js-561-  });
##############################################
/src/test/expression/node/FunctionNode.test.js-566-
/src/test/expression/node/FunctionNode.test.js:567:    assert.throws(function () {customMath.parse('add(1,2)').toTex()}, ReferenceError);
/src/test/expression/node/FunctionNode.test.js-568-  });
##############################################
/src/test/expression/node/FunctionNode.test.js-572-    customMath.add.toTex = '${some_property}';
/src/test/expression/node/FunctionNode.test.js:573:    var tree = customMath.parse('add(1,2)');
/src/test/expression/node/FunctionNode.test.js-574-
##############################################
/src/test/expression/node/FunctionNode.test.js-585-    customMath.add.toTex = '${some_property}';
/src/test/expression/node/FunctionNode.test.js:586:    var tree = customMath.parse('add(1,2)');
/src/test/expression/node/FunctionNode.test.js-587-    tree.some_property = [1,2];
##############################################
/src/test/expression/node/ConditionalNode.test.js-272-  it ('should respect the \'all\' parenthesis option', function () {
/src/test/expression/node/ConditionalNode.test.js:273:    assert.equal(math.parse('a?b:c').toString({parenthesis: 'all'}), '(a) ? (b) : (c)');
/src/test/expression/node/ConditionalNode.test.js-274-  });
##############################################
/src/test/expression/node/FunctionAssignmentNode.test.js-121-    var n2 = new FunctionAssignmentNode('fib', ['x'], n1);
/src/test/expression/node/FunctionAssignmentNode.test.js:122:    //var n2 = math.parse('fib(x) = (x <= 0) ? 0 : ((x <= 2) ? 1 : (fib(x - 1) + f(fib - 2)))');
/src/test/expression/node/FunctionAssignmentNode.test.js-123-
##############################################
/src/test/expression/node/FunctionAssignmentNode.test.js-347-  it ('should respect the \'all\' parenthesis option', function () {
/src/test/expression/node/FunctionAssignmentNode.test.js:348:    var expr = math.parse('f(x)=x+1');
/src/test/expression/node/FunctionAssignmentNode.test.js-349-    assert.equal(expr.toString({parenthesis: 'all'}), 'f(x) = (x + 1)');
##############################################
/src/test/expression/function/parse.test.js-9-  it('should parse an expression', function() {
/src/test/expression/function/parse.test.js:10:    var node = math.parse('(5+3)/4');
/src/test/expression/function/parse.test.js-11-    assert.ok(node instanceof Node);
##############################################
/src/test/expression/function/parse.test.js-15-  it('should parse multiple expressions', function() {
/src/test/expression/function/parse.test.js:16:    var nodes = math.parse(['2+3', '4+5']);
/src/test/expression/function/parse.test.js-17-    assert.ok(Array.isArray(nodes));
##############################################
/src/test/expression/function/parse.test.js-26-  it('should LaTeX parse', function () {
/src/test/expression/function/parse.test.js:27:    var expression = math.parse('parse(expr,options)');
/src/test/expression/function/parse.test.js-28-    assert.equal(expression.toTex(), '\\mathrm{parse}\\left( expr, options\\right)');
##############################################
/src/test/expression/function/eval.test.js-71-  it('should LaTeX eval', function () {
/src/test/expression/function/eval.test.js:72:    var expr1 = math.parse('eval(expr)');
/src/test/expression/function/eval.test.js:73:    var expr2 = math.parse('eval(expr,scope)');
/src/test/expression/function/eval.test.js-74-
##############################################
/src/test/expression/function/help.test.js-59-  it('should LaTeX help', function () {
/src/test/expression/function/help.test.js:60:    var expression = math.parse('help(parse)');
/src/test/expression/function/help.test.js-61-    assert.equal(expression.toTex(), '\\mathrm{help}\\left( parse\\right)');
##############################################
/src/test/expression/function/compile.test.js-32-  it('should LaTeX compile', function () {
/src/test/expression/function/compile.test.js:33:    var expression = math.parse('compile(1)');
/src/test/expression/function/compile.test.js-34-    assert.equal(expression.toTex(), '\\mathrm{compile}\\left(1\\right)');
##############################################
/src/test/expression/function/parser.test.js-13-  it('should LaTeX parser', function () { //This doesn't really make sense in a way
/src/test/expression/function/parser.test.js:14:    var expression = math.parse('parser()');
/src/test/expression/function/parser.test.js-15-    assert.equal(expression.toTex(), '\\mathrm{parser}\\left(\\right)');
##############################################
/src/test/core/import.test.js-279-  it('should LaTeX import', function () {
/src/test/core/import.test.js:280:    var expression = math.parse('import(object)');
/src/test/core/import.test.js-281-    assert.equal(expression.toTex(), '\\mathrm{import}\\left( object\\right)');
##############################################
/src/docs/command_line_interface.md-79-$ ./bin/repl.js 
/src/docs/command_line_interface.md:80:> math.parse('1+1')
/src/docs/command_line_interface.md-81-{ op: '+',
##############################################
/src/docs/reference/classes/matrixrange.md-15-* _static_
/src/docs/reference/classes/matrixrange.md:16:	* [.parse(str)](#Range.parse) ⇒ <code>[Range](#Range)</code> &#124; <code>null</code>
/src/docs/reference/classes/matrixrange.md-17-	* [.fromJSON(json)](#Range.fromJSON) ⇒ <code>[Range](#Range)</code>
##############################################
/src/docs/reference/classes/matrixrange.md-135-<a name="Range.parse"></a>
/src/docs/reference/classes/matrixrange.md:136:### Range.parse(str) ⇒ <code>[Range](#Range)</code> &#124; <code>null</code>
/src/docs/reference/classes/matrixrange.md-137-Parse a string into a range,
##############################################
/src/docs/reference/classes/unit.md-22-* _static_
/src/docs/reference/classes/unit.md:23:	* [.parse(str)](#Unit.parse) ⇒ <code>Unit</code>
/src/docs/reference/classes/unit.md-24-	* [.isValuelessUnit(name)](#Unit.isValuelessUnit) ⇒ <code>boolean</code>
##############################################
/src/docs/reference/classes/unit.md-33-var b = new Unit(null, name);
/src/docs/reference/classes/unit.md:34:var c = Unit.parse(str);
/src/docs/reference/classes/unit.md-35-```
##############################################
/src/docs/reference/classes/unit.md-40-var a = new Unit(5, 'cm');               // 50 mm
/src/docs/reference/classes/unit.md:41:var b = Unit.parse('23 kg');             // 23 kg
/src/docs/reference/classes/unit.md-42-var c = math.in(a, new Unit(null, 'm');  // 0.05 m
##############################################
/src/docs/reference/classes/unit.md-206-<a name="Unit.parse"></a>
/src/docs/reference/classes/unit.md:207:### Unit.parse(str) ⇒ <code>Unit</code>
/src/docs/reference/classes/unit.md-208-Parse a string into a unit. The value of the unit is parsed as number,
##############################################
/src/docs/reference/functions.md-34-[math.help(search)](functions/help.md) | Retrieve help on a function or data type.
/src/docs/reference/functions.md:35:[math.parse(expr&nbsp;[,&nbsp;scope])](functions/parse.md) | Parse an expression.
/src/docs/reference/functions.md-36-[math.parser()](functions/parser.md) | Create a parser.
##############################################
/src/docs/reference/functions/parse.md-14-```js
/src/docs/reference/functions/parse.md:15:math.parse(expr)
/src/docs/reference/functions/parse.md:16:math.parse(expr, options)
/src/docs/reference/functions/parse.md:17:math.parse([expr1, expr2, expr3, ...])
/src/docs/reference/functions/parse.md:18:math.parse([expr1, expr2, expr3, ...], options)
/src/docs/reference/functions/parse.md-19-```
##############################################
/src/docs/reference/functions/parse.md-37-```js
/src/docs/reference/functions/parse.md:38:var node = math.parse('sqrt(3^2 + 4^2)');
/src/docs/reference/functions/parse.md-39-node.compile().eval(); // 5
##############################################
/src/docs/reference/functions/parse.md-41-var scope = {a:3, b:4}
/src/docs/reference/functions/parse.md:42:var node = math.parse('a * b'); // 12
/src/docs/reference/functions/parse.md-43-var code = node.compile();
##############################################
/src/docs/reference/functions/parse.md-47-
/src/docs/reference/functions/parse.md:48:var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
/src/docs/reference/functions/parse.md-49-nodes[2].compile().eval(); // 12
##############################################
/src/docs/reference/functions/derivative.md-44-math.derivative('x^2', 'x').eval({x: 4});        // number 8
/src/docs/reference/functions/derivative.md:45:var f = math.parse('x^2');
/src/docs/reference/functions/derivative.md:46:var x = math.parse('x');
/src/docs/reference/functions/derivative.md-47-math.derivative(f, x);                           // Node {2 * x}
##############################################
/src/docs/reference/functions/simplify.md-67-math.simplify('2 * 3 * x', {x: 4});        // Node {24}
/src/docs/reference/functions/simplify.md:68:var f = math.parse('2 * 1 * x ^ (2 - 1)');
/src/docs/reference/functions/simplify.md-69-math.simplify(f);                          // Node {2 * x}
##############################################
/src/docs/expressions/algebra.md-23-// work with an expression tree, evaluate results
/src/docs/expressions/algebra.md:24:var f = math.parse('2x + x');
/src/docs/expressions/algebra.md-25-var simplified = math.simplify(f);
##############################################
/src/docs/expressions/algebra.md-49-// work with an expression tree, evaluate results
/src/docs/expressions/algebra.md:50:var h = math.parse('x^2 + x');
/src/docs/expressions/algebra.md:51:var x = math.parse('x');
/src/docs/expressions/algebra.md-52-var dh = math.derivative(h, x);
##############################################
/src/docs/expressions/customization.md-187-
/src/docs/expressions/customization.md:188:math.parse('plus(1,2)').toTex();    //'1+2'
/src/docs/expressions/customization.md:189:math.parse('binom(1,2)').toTex();   // '\\mathrm{binom}\\left(1,2\\right)'
/src/docs/expressions/customization.md:190:math.parse('minus(1,2)').toTex();   // '1minus2'
/src/docs/expressions/customization.md-191-```
##############################################
/src/docs/expressions/customization.md-220-```js
/src/docs/expressions/customization.md:221:var expression = math.parse('(1+1+1)');
/src/docs/expressions/customization.md-222-
##############################################
/src/docs/expressions/customization.md-273-math.import(customFunctions);
/src/docs/expressions/customization.md:274:var expression = math.parse('binomial(factorial(2),1)');
/src/docs/expressions/customization.md-275-var latex = expression.toTex({handler: customLaTeX});
##############################################
/src/docs/expressions/customization.md-302-
/src/docs/expressions/customization.md:303:var expression = math.parse('1+2');
/src/docs/expressions/customization.md-304-var latex = expression.toTex({handler: customLaTeX});
##############################################
/src/docs/expressions/customization.md-325-math.import(customFunctions);
/src/docs/expressions/customization.md:326:var expression = math.parse('binomial(2,1)');
/src/docs/expressions/customization.md-327-var latex = expression.toTex({handler: customLaTeX});
##############################################
/src/docs/expressions/customization.md-337-```js
/src/docs/expressions/customization.md:338:var node = math.parse('2a');
/src/docs/expressions/customization.md-339-
##############################################
/src/docs/expressions/parsing.md-6-- Using the function [`math.compile(expr)`](#compile).
/src/docs/expressions/parsing.md:7:- Using the function [`math.parse(expr)`](#parse).
/src/docs/expressions/parsing.md-8-- By creating a [parser](#parser), `math.parser()`, which contains a function
##############################################
/src/docs/expressions/parsing.md-89-```js
/src/docs/expressions/parsing.md:90:math.parse(expr)
/src/docs/expressions/parsing.md:91:math.parse([expr1, expr2, expr3, ...])
/src/docs/expressions/parsing.md-92-```
##############################################
/src/docs/expressions/parsing.md-98-```js
/src/docs/expressions/parsing.md:99:var node = math.parse(expr);      // parse expression into a node tree
/src/docs/expressions/parsing.md-100-var code = node.compile();        // compile the node tree
##############################################
/src/docs/expressions/parsing.md-115-// parse an expression into a node, and evaluate the node
/src/docs/expressions/parsing.md:116:var node1 = math.parse('sqrt(3^2 + 4^2)');
/src/docs/expressions/parsing.md-117-var code1 = node1.compile();
##############################################
/src/docs/expressions/parsing.md-120-// provide a scope
/src/docs/expressions/parsing.md:121:var node2 = math.parse('x^a', scope);
/src/docs/expressions/parsing.md-122-var code2 = node2.compile();
##############################################
/src/docs/expressions/parsing.md-140-// parse an expression
/src/docs/expressions/parsing.md:141:var node = math.parse('sqrt(x/x+1)');
/src/docs/expressions/parsing.md-142-node.toString();  // returns 'sqrt((x / x) + 1)'
##############################################
/src/docs/expressions/expression_trees.md-2-
/src/docs/expressions/expression_trees.md:3:When parsing an expression via `math.parse(expr)`, math.js generates an
/src/docs/expressions/expression_trees.md-4-expression tree and returns the root node of the tree. An expression tree can
##############################################
/src/docs/expressions/expression_trees.md-9-```js
/src/docs/expressions/expression_trees.md:10:var node = math.parse('sqrt(2 + x)');
/src/docs/expressions/expression_trees.md-11-```
##############################################
/src/docs/expressions/expression_trees.md-32-The resulting expression tree with root node `node4` is equal to the expression
/src/docs/expressions/expression_trees.md:33:tree generated by `math.parse('sqrt(2 + x)')`.
/src/docs/expressions/expression_trees.md-34-
##############################################
/src/docs/expressions/expression_trees.md-57-    ```js
/src/docs/expressions/expression_trees.md:58:    var node = math.parse('2 + x'); // returns the root Node of an expression tree
/src/docs/expressions/expression_trees.md-59-    var code = node.compile();      // returns {eval: function (scope) {...}}
##############################################
/src/docs/expressions/expression_trees.md-68-    ```js
/src/docs/expressions/expression_trees.md:69:    var node = math.parse('2 + x'); // returns the root Node of an expression tree
/src/docs/expressions/expression_trees.md-70-    var eval = node.eval({x: 3});   // returns 5
##############################################
/src/docs/expressions/expression_trees.md-88-    ```js
/src/docs/expressions/expression_trees.md:89:    var node = math.parse('x^2 + x/4 + 3*y');
/src/docs/expressions/expression_trees.md-90-    var filtered = node.filter(function (node) {
##############################################
/src/docs/expressions/expression_trees.md-106-    ```js
/src/docs/expressions/expression_trees.md:107:    var node = math.parse('3 * x + 2');
/src/docs/expressions/expression_trees.md-108-    node.forEach(function (node, path, parent) {
##############################################
/src/docs/expressions/expression_trees.md-135-    ```js
/src/docs/expressions/expression_trees.md:136:    var node = math.parse('sqrt(2/3)');
/src/docs/expressions/expression_trees.md-137-    node.toString();
##############################################
/src/docs/expressions/expression_trees.md-155-    ```js
/src/docs/expressions/expression_trees.md:156:    var node = math.parse('3+4*2');
/src/docs/expressions/expression_trees.md-157-    node.toString();  // returns '3 + (4 * 2)'
##############################################
/src/docs/expressions/expression_trees.md-167-    ```js
/src/docs/expressions/expression_trees.md:168:    var node = math.parse('sqrt(2/3)');
/src/docs/expressions/expression_trees.md-169-    node.toTex(); // returns '\sqrt{\frac{2}{3}}'
##############################################
/src/docs/expressions/expression_trees.md-187-    ```js
/src/docs/expressions/expression_trees.md:188:    var node = math.parse('x^2 + 5*x');
/src/docs/expressions/expression_trees.md-189-    var transformed = node.transform(function (node, path, parent) {
##############################################
/src/docs/expressions/expression_trees.md-211-    ```js
/src/docs/expressions/expression_trees.md:212:    var node = math.parse('3 * x + 2');
/src/docs/expressions/expression_trees.md-213-    node.traverse(function (node, path, parent) {
##############################################
/src/docs/expressions/expression_trees.md-273-```js
/src/docs/expressions/expression_trees.md:274:var node1 = math.parse('a[3]');
/src/docs/expressions/expression_trees.md-275-
##############################################
/src/docs/expressions/expression_trees.md-296-```js
/src/docs/expressions/expression_trees.md:297:var node1 = math.parse('[1, 2, 3]');
/src/docs/expressions/expression_trees.md-298-
##############################################
/src/docs/expressions/expression_trees.md-324-```js
/src/docs/expressions/expression_trees.md:325:var node1 = math.parse('a = 3');
/src/docs/expressions/expression_trees.md-326-
##############################################
/src/docs/expressions/expression_trees.md-353-```js
/src/docs/expressions/expression_trees.md:354:var block1 = math.parse('a=1; b=2; c=3');
/src/docs/expressions/expression_trees.md-355-
##############################################
/src/docs/expressions/expression_trees.md-392-```js
/src/docs/expressions/expression_trees.md:393:var node1 = math.parse('a > 0 ? a : -a');
/src/docs/expressions/expression_trees.md-394-
##############################################
/src/docs/expressions/expression_trees.md-418-```js
/src/docs/expressions/expression_trees.md:419:var node1 = math.parse('2.4');
/src/docs/expressions/expression_trees.md-420-
##############################################
/src/docs/expressions/expression_trees.md-442-```js
/src/docs/expressions/expression_trees.md:443:var node1 = math.parse('f(x) = x^2');
/src/docs/expressions/expression_trees.md-444-
##############################################
/src/docs/expressions/expression_trees.md-467-```js
/src/docs/expressions/expression_trees.md:468:var node1 = math.parse('sqrt(4)');
/src/docs/expressions/expression_trees.md-469-
##############################################
/src/docs/expressions/expression_trees.md-499-```js
/src/docs/expressions/expression_trees.md:500:var node1 = math.parse('A[1:3, 2]');
/src/docs/expressions/expression_trees.md-501-
##############################################
/src/docs/expressions/expression_trees.md-526-```js
/src/docs/expressions/expression_trees.md:527:var node1 = math.parse('{a: 1, b: 2, c: 3}');
/src/docs/expressions/expression_trees.md-528-
##############################################
/src/docs/expressions/expression_trees.md-552-```js
/src/docs/expressions/expression_trees.md:553:var node1 = math.parse('2.3 + 5');
/src/docs/expressions/expression_trees.md-554-
##############################################
/src/docs/expressions/expression_trees.md-574-```js
/src/docs/expressions/expression_trees.md:575:var node1 = math.parse('(1)');
/src/docs/expressions/expression_trees.md-576-
##############################################
/src/docs/expressions/expression_trees.md-597-```js
/src/docs/expressions/expression_trees.md:598:var node1 = math.parse('1:10');
/src/docs/expressions/expression_trees.md:599:var node2 = math.parse('0:2:10');
/src/docs/expressions/expression_trees.md-600-
##############################################
/src/docs/expressions/expression_trees.md-625-```js
/src/docs/expressions/expression_trees.md:626:var node = math.parse('x');
/src/docs/expressions/expression_trees.md-627-
##############################################
/src/docs/core/serialization.md-27-var json = '{"mathjs":"Unit","value":5,"unit":"cm","fixPrefix":false}';
/src/docs/core/serialization.md:28:var x    = JSON.parse(json, math.json.reviver);   // Unit 5 cm
/src/docs/core/serialization.md-29-```
##############################################
/src/dist/math.min.js-46- **/
/src/dist/math.min.js:47:!function(r){"use strict";function a(e){var t=function(){var t=Error.apply(this,arguments);t.name=this.name=e,this.stack=t.stack,this.message=t.message},r=function(){};return r.prototype=Error.prototype,t.prototype=new r,t}function o(e,t){return isNaN(e=parseInt(e,10))&&s(),e*t}function s(){throw new p}function u(e,t){return this instanceof u?(h(e,t),e=u.REDUCE?g(f.d,f.n):1,this.s=f.s,this.n=f.n/e,void(this.d=f.d/e)):new u(e,t)}var c=2e3,f={s:1,n:0,d:1},l=u.DivisionByZero=a("DivisionByZero"),p=u.InvalidParameter=a("InvalidParameter"),h=function(e,t){var r,n=0,i=1,a=1,u=0,c=0,p=0,h=1,m=1,d=0,v=1,g=1,y=1,x=1e7;if(void 0===e||null===e);else if(void 0!==t)n=e,i=t,a=n*i;else switch(typeof e){case"object":"d"in e&&"n"in e?(n=e.n,i=e.d,"s"in e&&(n*=e.s)):0 in e?(n=e[0],1 in e&&(i=e[1])):s(),a=n*i;break;case"number":if(e<0&&(a=e,e=-e),e%1===0)n=e;else if(e>0){for(e>=1&&(m=Math.pow(10,Math.floor(1+Math.log(e)/Math.LN10)),e/=m);v<=x&&y<=x;){if(r=(d+g)/(v+y),e===r){v+y<=x?(n=d+g,i=v+y):y>v?(n=g,i=y):(n=d,i=v);break}e>r?(d+=g,v+=y):(g+=d,y+=v),v>x?(n=g,i=y):(n=d,i=v)}n*=m}else(isNaN(e)||isNaN(t))&&(i=n=NaN);break;case"string":if(v=e.match(/\d+|./g),"-"===v[d]?(a=-1,d++):"+"===v[d]&&d++,v.length===d+1?c=o(v[d++],a):"."===v[d+1]||"."===v[d]?("."!==v[d]&&(u=o(v[d++],a)),d++,(d+1===v.length||"("===v[d+1]&&")"===v[d+3]||"'"===v[d+1]&&"'"===v[d+3])&&(c=o(v[d],a),h=Math.pow(10,v[d].length),d++),("("===v[d]&&")"===v[d+2]||"'"===v[d]&&"'"===v[d+2])&&(p=o(v[d+1],a),m=Math.pow(10,v[d+1].length)-1,d+=3)):"/"===v[d+1]||":"===v[d+1]?(c=o(v[d],a),h=o(v[d+2],1),d+=3):"/"===v[d+3]&&" "===v[d+1]&&(u=o(v[d],a),c=o(v[d+2],a),h=o(v[d+4],1),d+=5),v.length<=d){i=h*m,a=n=p+i*u+m*c;break}default:s()}if(0===i)throw new l;f.s=a<0?-1:1,f.n=Math.abs(n),f.d=Math.abs(i)},m=function(e,t,r){for(var n=1;t>0;e=e*e%r,t>>=1)1&t&&(n=n*e%r);return n},d=function(e,t){for(;t%2===0;t/=2);for(;t%5===0;t/=5);if(1===t)return 0;for(var r=10%t,n=1;1!==r;n++)if(r=10*r%t,n>c)return 0;return n},v=function(e,t,r){for(var n=1,i=m(10,r,t),a=0;a<300;a++){if(n===i)return a;n=10*n%t,i=10*i%t}return 0},g=function(e,t){if(!e)return t;if(!t)return e;for(;;){if(e%=t,!e)return t;if(t%=e,!t)return e}};u.REDUCE=1,u.prototype={s:1,n:0,d:1,abs:function(){return new u(this.n,this.d)},neg:function(){return new u(-this.s*this.n,this.d)},add:function(e,t){return h(e,t),new u(this.s*this.n*f.d+f.s*this.d*f.n,this.d*f.d)},sub:function(e,t){return h(e,t),new u(this.s*this.n*f.d-f.s*this.d*f.n,this.d*f.d)},mul:function(e,t){return h(e,t),new u(this.s*f.s*this.n*f.n,this.d*f.d)},div:function(e,t){return h(e,t),new u(this.s*f.s*this.n*f.d,this.d*f.n)},clone:function(){return new u(this)},mod:function(e,t){return isNaN(this.n)||isNaN(this.d)?new u(NaN):void 0===e?new u(this.s*this.n%this.d,1):(h(e,t),0===f.n&&0===this.d&&u(0,0),new u(this.s*f.d*this.n%(f.n*this.d),f.d*this.d))},gcd:function(e,t){return h(e,t),new u(g(f.n,this.n),f.d*this.d/g(f.d,this.d))},lcm:function(e,t){return h(e,t),0===f.n&&0===this.n?new u:new u(f.n*this.n/g(f.n,this.n),g(f.d,this.d))},ceil:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new u(NaN):new u(Math.ceil(e*this.s*this.n/this.d),e)},floor:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new u(NaN):new u(Math.floor(e*this.s*this.n/this.d),e)},round:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new u(NaN):new u(Math.round(e*this.s*this.n/this.d),e)},inverse:function(){return new u(this.s*this.d,this.n)},pow:function(e){return e<0?new u(Math.pow(this.s*this.d,-e),Math.pow(this.n,-e)):new u(Math.pow(this.s*this.n,e),Math.pow(this.d,e))},equals:function(e,t){return h(e,t),this.s*this.n*f.d===f.s*f.n*this.d},compare:function(e,t){h(e,t);var r=this.s*this.n*f.d-f.s*f.n*this.d;return(0<r)-(r<0)},divisible:function(e,t){return h(e,t),!(!(f.n*this.d)||this.n*f.d%(f.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(e){var t,r="",n=this.n,i=this.d;return this.s<0&&(r+="-"),1===i?r+=n:(e&&(t=Math.floor(n/i))>0&&(r+=t,r+=" ",n%=i),r+=n,r+="/",r+=i),r},toLatex:function(e){var t,r="",n=this.n,i=this.d;return this.s<0&&(r+="-"),1===i?r+=n:(e&&(t=Math.floor(n/i))>0&&(r+=t,n%=i),r+="\\frac{",r+=n,r+="}{",r+=i,r+="}"),r},toContinued:function(){var e,t=this.n,r=this.d,n=[];do n.push(Math.floor(t/r)),e=t%r,t=r,r=e;while(1!==t);return n},toString:function(){var e,t=this.n,r=this.d;if(isNaN(t)||isNaN(r))return"NaN";u.REDUCE||(e=g(t,r),t/=e,r/=e);var n=15,i=d(t,r),a=v(t,r,i),o=this.s===-1?"-":"";if(o+=t/r|0,t%=r,t*=10,t&&(o+="."),i){for(var s=a;s--;)o+=t/r|0,t%=r,t*=10;o+="(";for(var s=i;s--;)o+=t/r|0,t%=r,t*=10;o+=")"}else for(var s=n;t&&s--;)o+=t/r|0,t%=r,t*=10;return o}},n=[],i=function(){return u}.apply(t,n),!(void 0!==i&&(e.exports=i))}(this)},function(e,t,r){e.exports=[r(72),r(43),r(175),r(176),r(177),r(178),r(27),r(93),r(179),r(0),r(180)]},function(e,t,r){"use strict";t.isBoolean=function(e){return"boolean"==typeof e}},function(e,t,r){"use strict";function n(e,t,n,d){function v(t,r){if(!(this instanceof v))throw new SyntaxError("Constructor must be called with the new operator");if(r&&!h(r))throw new Error("Invalid datatype: "+r);if(e.isMatrix(t))x(this,t,r);else if(t&&f(t.index)&&f(t.ptr)&&f(t.size))this._values=t.values,this._index=t.index,this._ptr=t.ptr,this._size=t.size,this._datatype=r||t.datatype;else if(f(t))w(this,t,r);else{if(t)throw new TypeError("Unsupported type of data ("+i.types.type(t)+")");this._values=[],this._index=[],this._ptr=[0],this._size=[0,0],this._datatype=r}}var g=n(r(72)),y=n(r(11)),x=function(e,t,r){"SparseMatrix"===t.type?(e._values=t._values?s.clone(t._values):void 0,e._index=s.clone(t._index),e._ptr=s.clone(t._ptr),e._size=s.clone(t._size),e._datatype=r||t._datatype):w(e,t.valueOf(),r||t._datatype)},w=function(e,t,r){e._values=[],e._index=[],e._ptr=[],e._datatype=r;var n=t.length,i=0,a=y,o=0;if(h(r)&&(a=d.find(y,[r,r])||y,o=d.convert(0,r)),n>0){var s=0;do{e._ptr.push(e._index.length);for(var u=0;u<n;u++){var c=t[u];if(f(c)){if(0===s&&i<c.length&&(i=c.length),s<c.length){var l=c[s];a(l,o)||(e._values.push(l),e._index.push(u))}}else 0===s&&i<1&&(i=1),a(c,o)||(e._values.push(c),e._index.push(u))}s++}while(s<i)}e._ptr.push(e._index.length),e._size=[n,i]};v.prototype=new g,v.prototype.type="SparseMatrix",v.prototype.isSparseMatrix=!0,v.prototype.storage=function(){return"sparse"},v.prototype.datatype=function(){return this._datatype},v.prototype.create=function(e,t){return new v(e,t)},v.prototype.density=function(){var e=this._size[0],t=this._size[1];return 0!==e&&0!==t?this._index.length/(e*t):0},v.prototype.subset=function(e,t,r){if(!this._values)throw new Error("Cannot invoke subset on a Pattern only matrix");switch(arguments.length){case 1:return b(this,e);case 2:case 3:return N(this,e,t,r);default:throw new SyntaxError("Wrong number of arguments")}};var b=function(t,r){if(!e.isIndex(r))throw new TypeError("Invalid index");var n=r.isScalar();if(n)return t.get(r.min());var i=r.size();if(i.length!=t._size.length)throw new a(i.length,t._size.length);var o,s,u,c,f=r.min(),l=r.max();for(o=0,s=t._size.length;o<s;o++)m(f[o],t._size[o]),m(l[o],t._size[o]);var p=t._values,h=t._index,d=t._ptr,g=r.dimension(0),y=r.dimension(1),x=[],w=[];g.forEach(function(e,t){w[e]=t[0],x[e]=!0});var b=p?[]:void 0,N=[],E=[];return y.forEach(function(e){for(E.push(N.length),u=d[e],c=d[e+1];u<c;u++)o=h[u],x[o]===!0&&(N.push(w[o]),b&&b.push(p[u]))}),E.push(N.length),new v({values:b,index:N,ptr:E,size:i,datatype:t._datatype})},N=function(t,r,n,i){if(!r||r.isIndex!==!0)throw new TypeError("Invalid index");var u,c=r.size(),f=r.isScalar();if(e.isMatrix(n)?(u=n.size(),n=n.toArray()):u=o.size(n),f){if(0!==u.length)throw new TypeError("Scalar expected");t.set(r.min(),n,i)}else{if(1!==c.length&&2!==c.length)throw new a(c.length,t._size.length,"<");if(u.length<c.length){for(var l=0,p=0;1===c[l]&&1===u[l];)l++;for(;1===c[l];)p++,l++;n=o.unsqueeze(n,c.length,p,u)}if(!s.deepEqual(c,u))throw new a(c,u,">");for(var h=r.min()[0],m=r.min()[1],d=u[0],v=u[1],g=0;g<d;g++)for(var y=0;y<v;y++){var x=n[g][y];t.set([g+h,y+m],x,i)}}return t};v.prototype.get=function(e){if(!f(e))throw new TypeError("Array expected");if(e.length!=this._size.length)throw new a(e.length,this._size.length);if(!this._values)throw new Error("Cannot invoke get on a Pattern only matrix");var t=e[0],r=e[1];m(t,this._size[0]),m(r,this._size[1]);var n=E(t,this._ptr[r],this._ptr[r+1],this._index);return n<this._ptr[r+1]&&this._index[n]===t?this._values[n]:0},v.prototype.set=function(e,t,r){if(!f(e))throw new TypeError("Array expected");if(e.length!=this._size.length)throw new a(e.length,this._size.length);if(!this._values)throw new Error("Cannot invoke set on a Pattern only matrix");var n=e[0],i=e[1],o=this._size[0],s=this._size[1],u=y,c=0;h(this._datatype)&&(u=d.find(y,[this._datatype,this._datatype])||y,c=d.convert(0,this._datatype)),(n>o-1||i>s-1)&&(O(this,Math.max(n+1,o),Math.max(i+1,s),r),o=this._size[0],s=this._size[1]),m(n,o),m(i,s);var l=E(n,this._ptr[i],this._ptr[i+1],this._index);return l<this._ptr[i+1]&&this._index[l]===n?u(t,c)?M(l,i,this._values,this._index,this._ptr):this._values[l]=t:A(l,n,i,t,this._values,this._index,this._ptr),this};var E=function(e,t,r,n){if(r-t===0)return r;for(var i=t;i<r;i++)if(n[i]===e)return i;return t},M=function(e,t,r,n,i){r.splice(e,1),n.splice(e,1);for(var a=t+1;a<i.length;a++)i[a]--},A=function(e,t,r,n,i,a,o){i.splice(e,0,n),a.splice(e,0,t);for(var s=r+1;s<o.length;s++)o[s]++};v.prototype.resize=function(e,t,r){if(!f(e))throw new TypeError("Array expected");if(2!==e.length)throw new Error("Only two dimensions matrix are supported");e.forEach(function(t){if(!c.isNumber(t)||!c.isInteger(t)||t<0)throw new TypeError("Invalid size, must contain positive integers (size: "+u.format(e)+")")});var n=r?this.clone():this;return O(n,e[0],e[1],t)};var O=function(e,t,r,n){var i=n||0,a=y,o=0;h(e._datatype)&&(a=d.find(y,[e._datatype,e._datatype])||y,o=d.convert(0,e._datatype),i=d.convert(i,e._datatype));var s,u,c,f=!a(i,o),l=e._size[0],p=e._size[1];if(r>p){for(u=p;u<r;u++)if(e._ptr[u]=e._values.length,f)for(s=0;s<l;s++)e._values.push(i),e._index.push(s);e._ptr[r]=e._values.length}else r<p&&(e._ptr.splice(r+1,p-r),e._values.splice(e._ptr[r],e._values.length),e._index.splice(e._ptr[r],e._index.length));if(p=r,t>l){if(f){var m=0;for(u=0;u<p;u++){e._ptr[u]=e._ptr[u]+m,c=e._ptr[u+1]+m;var v=0;for(s=l;s<t;s++,v++)e._values.splice(c+v,0,i),e._index.splice(c+v,0,s),m++}e._ptr[p]=e._values.length}}else if(t<l){var g=0;for(u=0;u<p;u++){e._ptr[u]=e._ptr[u]-g;var x=e._ptr[u],w=e._ptr[u+1]-g;for(c=x;c<w;c++)s=e._index[c],s>t-1&&(e._values.splice(c,1),e._index.splice(c,1),g++)}e._ptr[u]=e._values.length}return e._size[0]=t,e._size[1]=r,e};v.prototype.reshape=function(e,t){if(!f(e))throw new TypeError("Array expected");if(2!==e.length)throw new Error("Sparse matrices can only be reshaped in two dimensions");if(e.forEach(function(t){if(!c.isNumber(t)||!c.isInteger(t)||t<0)throw new TypeError("Invalid size, must contain positive integers (size: "+u.format(e)+")")}),this._size[0]*this._size[1]!==e[0]*e[1])throw new Error("Reshaping sparse matrix will result in the wrong number of elements");var r=t?this.clone():this;if(this._size[0]===e[0]&&this._size[1]===e[1])return r;for(var n=[],i=0;i<r._ptr.length;i++)for(var a=0;a<r._ptr[i+1]-r._ptr[i];a++)n.push(i);for(var o=r._values.slice(),s=r._index.slice(),i=0;i<r._index.length;i++){var l=s[i],p=n[i],h=l*r._size[1]+p;n[i]=h%e[1],s[i]=Math.floor(h/e[1])}r._values.length=0,r._index.length=0,r._ptr.length=e[1]+1,r._size=e.slice();for(var i=0;i<r._ptr.length;i++)r._ptr[i]=0;for(var m=0;m<o.length;m++){var i=s[m],a=n[m],d=o[m],v=E(i,r._ptr[a],r._ptr[a+1],r._index);A(v,i,a,d,r._values,r._index,r._ptr)}return r},v.prototype.clone=function(){var e=new v({values:this._values?s.clone(this._values):void 0,index:s.clone(this._index),ptr:s.clone(this._ptr),size:s.clone(this._size),datatype:this._datatype});return e},v.prototype.size=function(){return this._size.slice(0)},v.prototype.map=function(e,t){if(!this._values)throw new Error("Cannot invoke map on a Pattern only matrix");var r=this,n=this._size[0],i=this._size[1],a=function(t,n,i){return e(t,[n,i],r)};return T(this,0,n-1,0,i-1,a,t)};var T=function(e,t,r,n,i,a,o){var s=[],u=[],c=[],f=y,l=0;h(e._datatype)&&(f=d.find(y,[e._datatype,e._datatype])||y,l=d.convert(0,e._datatype));for(var p=function(e,t,r){e=a(e,t,r),f(e,l)||(s.push(e),u.push(t))},m=n;m<=i;m++){c.push(s.length);for(var g=e._ptr[m],x=e._ptr[m+1],w=t,b=g;b<x;b++){var N=e._index[b];if(N>=t&&N<=r){if(!o)for(var E=w;E<N;E++)p(0,E-t,m-n);p(e._values[b],N-t,m-n)}w=N+1}if(!o)for(var M=w;M<=r;M++)p(0,M-t,m-n)}return c.push(s.length),new v({values:s,index:u,ptr:c,size:[r-t+1,i-n+1]})};v.prototype.forEach=function(e,t){if(!this._values)throw new Error("Cannot invoke forEach on a Pattern only matrix");for(var r=this,n=this._size[0],i=this._size[1],a=0;a<i;a++){for(var o=this._ptr[a],s=this._ptr[a+1],u=0,c=o;c<s;c++){var f=this._index[c];if(!t)for(var l=u;l<f;l++)e(0,[l,a],r);e(this._values[c],[f,a],r),u=f+1}if(!t)for(var p=u;p<n;p++)e(0,[p,a],r)}},v.prototype.toArray=function(){return _(this._values,this._index,this._ptr,this._size,!0)},v.prototype.valueOf=function(){return _(this._values,this._index,this._ptr,this._size,!1)};var _=function(e,t,r,n,i){var a,o,u=n[0],c=n[1],f=[];for(a=0;a<u;a++)for(f[a]=[],o=0;o<c;o++)f[a][o]=0;for(o=0;o<c;o++)for(var l=r[o],p=r[o+1],h=l;h<p;h++)a=t[h],f[a][o]=e?i?s.clone(e[h]):e[h]:1;return f};return v.prototype.format=function(e){for(var t=this._size[0],r=this._size[1],n=this.density(),i="Sparse Matrix ["+u.format(t,e)+" x "+u.format(r,e)+"] density: "+u.format(n,e)+"\n",a=0;a<r;a++)for(var o=this._ptr[a],s=this._ptr[a+1],c=o;c<s;c++){var f=this._index[c];i+="\n    ("+u.format(f,e)+", "+u.format(a,e)+") ==> "+(this._values?u.format(this._values[c],e):"X")}return i},v.prototype.toString=function(){return u.format(this.toArray())},v.prototype.toJSON=function(){return{mathjs:"SparseMatrix",values:this._values,index:this._index,ptr:this._ptr,size:this._size,datatype:this._datatype}},v.prototype.diagonal=function(t){if(t){if(e.isBigNumber(t)&&(t=t.toNumber()),!l(t)||!p(t))throw new TypeError("The parameter k must be an integer number")}else t=0;var r=t>0?t:0,n=t<0?-t:0,i=this._size[0],a=this._size[1],o=Math.min(i-n,a-r),s=[],u=[],c=[];c[0]=0;for(var f=r;f<a&&s.length<o;f++)for(var h=this._ptr[f],m=this._ptr[f+1],d=h;d<m;d++){var g=this._index[d];if(g===f-r+n){s.push(this._values[d]),u[s.length-1]=g-n;break}}return c.push(s.length),new v({values:s,index:u,ptr:c,size:[o,1]})},v.fromJSON=function(e){return new v(e)},v.diagonal=function(t,r,n,i,a){if(!f(t))throw new TypeError("Array expected, size parameter");if(2!==t.length)throw new Error("Only two dimensions matrix are supported");if(t=t.map(function(t){if(e.isBigNumber(t)&&(t=t.toNumber()),!l(t)||!p(t)||t<1)throw new Error("Size values must be positive integers");return t}),n){if(e.isBigNumber(n)&&(n=n.toNumber()),!l(n)||!p(n))throw new TypeError("The parameter k must be an integer number")}else n=0;var o=y,s=0;h(a)&&(o=d.find(y,[a,a])||y,s=d.convert(0,a));var u,c=n>0?n:0,m=n<0?-n:0,g=t[0],x=t[1],w=Math.min(g-m,x-c);if(f(r)){if(r.length!==w)throw new Error("Invalid value array length");u=function(e){return r[e]}}else if(e.isMatrix(r)){var b=r.size();if(1!==b.length||b[0]!==w)throw new Error("Invalid matrix length");u=function(e){return r.get([e])}}else u=function(){return r};for(var N=[],E=[],M=[],A=0;A<x;A++){M.push(N.length);var O=A-c;if(O>=0&&O<w){var T=u(O);o(T,s)||(E.push(O+m),N.push(T))}}return M.push(N.length),new v({values:N,index:E,ptr:M,size:[g,x]})},v.prototype.swapRows=function(e,t){if(!(l(e)&&p(e)&&l(t)&&p(t)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return m(e,this._size[0]),m(t,this._size[0]),v._swapRows(e,t,this._size[1],this._values,this._index,this._ptr),this},v._forEachRow=function(e,t,r,n,i){for(var a=n[e],o=n[e+1],s=a;s<o;s++)i(r[s],t[s])},v._swapRows=function(e,t,r,n,i,a){for(var o=0;o<r;o++){var s=a[o],u=a[o+1],c=E(e,s,u,i),f=E(t,s,u,i);if(c<u&&f<u&&i[c]===e&&i[f]===t){if(n){var l=n[c];n[c]=n[f],n[f]=l}}else if(c<u&&i[c]===e&&(f>=u||i[f]!==t)){var p=n?n[c]:void 0;i.splice(f,0,t),n&&n.splice(f,0,p),i.splice(f<=c?c+1:c,1),n&&n.splice(f<=c?c+1:c,1)}else if(f<u&&i[f]===t&&(c>=u||i[c]!==e)){var h=n?n[f]:void 0;i.splice(c,0,e),n&&n.splice(c,0,h),i.splice(c<=f?f+1:f,1),n&&n.splice(c<=f?f+1:f,1)}}},e.Matrix._storage.sparse=v,v}var i=r(25),a=r(10),o=i.array,s=i.object,u=i.string,c=i.number,f=Array.isArray,l=c.isNumber,p=c.isInteger,h=u.isString,m=o.validateIndex;t.name="SparseMatrix",t.path="type",t.factory=n,t.lazy=!1},function(e,t,r){"use strict";function n(e,t,n){function i(){if(!(this instanceof i))throw new SyntaxError("Constructor must be called with the new operator");this._values=[],this._heap=new e.FibonacciHeap}var a=n(r(18)),o=n(r(11));return i.prototype.type="Spa",i.prototype.isSpa=!0,i.prototype.set=function(e,t){if(this._values[e])this._values[e].value=t;else{var r=this._heap.insert(e,t);this._values[e]=r}},i.prototype.get=function(e){var t=this._values[e];return t?t.value:0},i.prototype.accumulate=function(e,t){var r=this._values[e];r?r.value=a(r.value,t):(r=this._heap.insert(e,t),this._values[e]=r)},i.prototype.forEach=function(e,t,r){var n=this._heap,i=this._values,a=[],s=n.extractMinimum();for(s&&a.push(s);s&&s.key<=t;)s.key>=e&&(o(s.value,0)||r(s.key,s.value,this)),s=n.extractMinimum(),s&&a.push(s);for(var u=0;u<a.length;u++){var c=a[u];s=n.insert(c.key,c.value),i[s.key]=s}},i.prototype.swap=function(e,t){var r=this._values[e],n=this._values[t];if(!r&&n)r=this._heap.insert(e,n.value),this._heap.remove(n),this._values[e]=r,this._values[t]=void 0;else if(r&&!n)n=this._heap.insert(t,r.value),this._heap.remove(r),this._values[t]=n,this._values[e]=void 0;else if(r&&n){var i=r.value;r.value=n.value,n.value=i}},i}t.name="Spa",t.path="type",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){function a(){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");this._minimum=null,this._size=0}var o=n(r(44)),s=n(r(34)),u=1/Math.log((1+Math.sqrt(5))/2);a.prototype.type="FibonacciHeap",a.prototype.isFibonacciHeap=!0,a.prototype.insert=function(e,t){var r={key:e,value:t,degree:0};if(this._minimum){var n=this._minimum;r.left=n,r.right=n.right,n.right=r,r.right.left=r,o(e,n.key)&&(this._minimum=r)}else r.left=r,r.right=r,this._minimum=r;return this._size++,r},a.prototype.size=function(){return this._size},a.prototype.clear=function(){this._minimum=null,this._size=0},a.prototype.isEmpty=function(){return 0===this._size},a.prototype.extractMinimum=function(){var e=this._minimum;if(null===e)return e;for(var t=this._minimum,r=e.degree,n=e.child;r>0;){var i=n.right;n.left.right=n.right,n.right.left=n.left,n.left=t,n.right=t.right,t.right=n,n.right.left=n,n.parent=null,n=i,r--}return e.left.right=e.right,e.right.left=e.left,e==e.right?t=null:(t=e.right,t=h(t,this._size)),this._size--,this._minimum=t,e},a.prototype.remove=function(e){this._minimum=c(this._minimum,e,-1),this.extractMinimum()};var c=function(e,t,r){t.key=r;var n=t.parent;return n&&o(t.key,n.key)&&(f(e,t,n),l(e,n)),o(t.key,e.key)&&(e=t),e},f=function(e,t,r){t.left.right=t.right,t.right.left=t.left,r.degree--,r.child==t&&(r.child=t.right),0===r.degree&&(r.child=null),t.left=e,t.right=e.right,e.right=t,t.right.left=t,t.parent=null,t.mark=!1},l=function(e,t){var r=t.parent;r&&(t.mark?(f(e,t,r),l(r)):t.mark=!0)},p=function(e,t){e.left.right=e.right,e.right.left=e.left,e.parent=t,t.child?(e.left=t.child,e.right=t.child.right,t.child.right=e,e.right.left=e):(t.child=e,e.right=e,e.left=e),t.degree++,e.mark=!1},h=function(e,t){var r=Math.floor(Math.log(t)*u)+1,n=new Array(r),i=0,a=e;if(a)for(i++,a=a.right;a!==e;)i++,a=a.right;for(var c;i>0;){for(var f=a.degree,l=a.right;;){if(c=n[f],!c)break;if(s(a.key,c.key)){var h=c;c=a,a=h}p(c,a),n[f]=null,f++}n[f]=a,a=l,i--}e=null;for(var m=0;m<r;m++)c=n[m],c&&(e?(c.left.right=c.right,c.right.left=c.left,c.left=e,c.right=e.right,e.right=c,c.right.left=c,o(c.key,e.key)&&(e=c)):e=c);return e};return a}t.name="FibonacciHeap",t.path="type",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){function a(t,r){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if(r&&!u(r))throw new Error("Invalid datatype: "+r);if(e.isMatrix(t)||s(t)){var n=new c(t,r);this._data=n._data,this._size=n._size,this._datatype=n._datatype,this._min=null,this._max=null}else if(t&&s(t.data)&&s(t.size))this._data=t.data,this._size=t.size,this._datatype=t.datatype,this._min="undefined"!=typeof t.min?t.min:null,this._max="undefined"!=typeof t.max?t.max:null;else{if(t)throw new TypeError("Unsupported type of data ("+i.types.type(t)+")");this._data=[],this._size=[0],this._datatype=r,this._min=null,this._max=null}}var c=n(r(43)),f=n(r(44));return a.prototype=new c,a.prototype.type="ImmutableDenseMatrix",a.prototype.isImmutableDenseMatrix=!0,a.prototype.subset=function(t){switch(arguments.length){case 1:var r=c.prototype.subset.call(this,t);return e.isMatrix(r)?new a({data:r._data,size:r._size,datatype:r._datatype}):r;case 2:case 3:throw new Error("Cannot invoke set subset on an Immutable Matrix instance");default:throw new SyntaxError("Wrong number of arguments")}},a.prototype.set=function(){throw new Error("Cannot invoke set on an Immutable Matrix instance")},a.prototype.resize=function(){throw new Error("Cannot invoke resize on an Immutable Matrix instance")},a.prototype.reshape=function(){throw new Error("Cannot invoke reshape on an Immutable Matrix instance")},a.prototype.clone=function(){var e=new a({data:o.clone(this._data),size:o.clone(this._size),datatype:this._datatype});return e},a.prototype.toJSON=function(){return{mathjs:"ImmutableDenseMatrix",data:this._data,size:this._size,datatype:this._datatype}},a.fromJSON=function(e){return new a(e)},a.prototype.swapRows=function(){throw new Error("Cannot invoke swapRows on an Immutable Matrix instance")},a.prototype.min=function(){if(null===this._min){var e=null;this.forEach(function(t){(null===e||f(t,e))&&(e=t)}),this._min=null!==e?e:void 0}return this._min},a.prototype.max=function(){if(null===this._max){var e=null;this.forEach(function(t){(null===e||f(e,t))&&(e=t)}),this._max=null!==e?e:void 0}return this._max},a}var i=r(25),a=i.string,o=i.object,s=Array.isArray,u=a.isString;t.name="ImmutableDenseMatrix",t.path="type",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){return n("index",{"...number | string | BigNumber | Range | Array | Matrix":function(t){var r=t.map(function(t){return e.isBigNumber(t)?t.toNumber():Array.isArray(t)||e.isMatrix(t)?t.map(function(t){return e.isBigNumber(t)?t.toNumber():t}):t}),n=new e.Index;return e.Index.apply(n,r),n}})}t.name="index",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var i=e.SparseMatrix,a=n("sparse",{"":function(){return new i([])},string:function(e){return new i([],e)},"Array | Matrix":function(e){return new i(e)},"Array | Matrix, string":function(e,t){return new i(e,t)}});return a.toTex={0:"\\begin{bsparse}\\end{bsparse}",1:"\\left(${args[0]}\\right)"},a}t.name="sparse",t.factory=n},function(e,t,r){e.exports=[r(94)]},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("string",{"":function(){return""},number:a.format,null:function(e){return"null"},boolean:function(e){return e+""},string:function(e){return e},"Array | Matrix":function(e){return i(e,o)},any:function(e){return String(e)}});return o.toTex={0:'\\mathtt{""}',1:"\\mathrm{string}\\left(${args[0]}\\right)"},o}var i=r(1),a=r(3);t.name="string",t.factory=n},function(e,t,r){e.exports=[r(184),r(185),r(186),r(187),r(188)]},function(e,t,r){"use strict";function n(e,t,n,s,u){function c(t,r){if(!(this instanceof c))throw new Error("Constructor must be called with the new operator");if(void 0!=t&&!C(t)&&!e.isComplex(t))throw new TypeError("First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined");if(void 0!=r&&("string"!=typeof r||""===r))throw new TypeError("Second parameter in Unit constructor must be a string");if(void 0!=r){var n=c.parse(r);this.units=n.units,this.dimensions=n.dimensions}else{this.units=[{unit:$,prefix:L.NONE,power:0}],this.dimensions=[];for(var i=0;i<F.length;i++)this.dimensions[i]=0}this.value=void 0!=t?this._normalize(t):null,this.fixPrefix=!1,this.isUnitListSimplified=!0}function f(){for(;" "==U||"\t"==U;)h()}function l(e){return e>="0"&&e<="9"||"."==e}function p(e){return e>="0"&&e<="9"}function h(){R++,U=P.charAt(R)}function m(e){R=e,U=P.charAt(R)}function d(){var e,t="";if(e=R,"+"==U?h():"-"==U&&(t+=U,h()),!l(U))return m(e),null;if("."==U){if(t+=U,h(),!p(U))return m(e),null}else{for(;p(U);)t+=U,h();"."==U&&(t+=U,h())}for(;p(U);)t+=U,h();if("E"==U||"e"==U){var r="",n=R;if(r+=U,h(),"+"!=U&&"-"!=U||(r+=U,h()),!p(U))return m(n),t;for(t+=r;p(U);)t+=U,h()}return t}function v(){for(var e="",t=P.charCodeAt(R);t>=48&&t<=57||t>=65&&t<=90||t>=97&&t<=122;)e+=U,h(),t=P.charCodeAt(R);return t=e.charCodeAt(0),t>=65&&t<=90||t>=97&&t<=122?e||null:null}function g(e){return U===e?(h(),e):null}function y(e){if(G.hasOwnProperty(e)){var t=G[e],r=t.prefixes[""];return{unit:t,prefix:r}}for(var n in G)if(G.hasOwnProperty(n)&&i(e,n)){var t=G[n],a=e.length-n.length,o=e.substring(0,a),r=t.prefixes.hasOwnProperty(o)?t.prefixes[o]:void 0;if(void 0!==r)return{unit:t,prefix:r}}return null}function x(t){if("BigNumber"===t.number){var r=o.pi(e.BigNumber);G.rad.value=new e.BigNumber(1),G.deg.value=r.div(180),G.grad.value=r.div(200),G.cycle.value=r.times(2),G.arcsec.value=r.div(648e3),G.arcmin.value=r.div(10800)}else G.rad.value=1,G.deg.value=Math.PI/180,G.grad.value=Math.PI/200,G.cycle.value=2*Math.PI,G.arcsec.value=Math.PI/648e3,G.arcmin.value=Math.PI/10800}function w(e){for(var t=0;t<e.length;t++){var r=e.charAt(t),n=function(e){return/^[a-zA-Z]$/.test(e)},i=function(e){return e>="0"&&e<="9"};if(0===t&&!n(r))throw new Error('Invalid unit name (must begin with alpha character): "'+e+'"');if(t>0&&!n(r)&&!i(r))throw new Error('Invalid unit name (only alphanumeric characters are allowed): "'+e+'"')}}var b=n(r(20)),N=n(r(21)),E=n(r(23)),M=n(r(19)),A=n(r(45)),O=n(r(29)),T=n(r(96)),_=n(r(97)),S=n(r(30)),C=n(r(75)),z=n(r(98)),k=n(r(76)),I=n(r(74)),B=n(r(91));c.prototype.type="Unit",c.prototype.isUnit=!0;var P,R,U;c.parse=function(r,n){if(n=n||{},P=r,R=-1,U="","string"!=typeof P)throw new TypeError("Invalid argument in Unit.parse, string expected");var i=new c;i.units=[],h(),f();var a=d(),o=null;a&&(o="BigNumber"===t.number?new e.BigNumber(a):"Fraction"===t.number?new e.Fraction(a):parseFloat(a)),f();for(var s=1,u=!1,l=[],p=1;;){for(f();"("===U;)l.push(s),p*=s,s=1,h(),f();if(!U)break;var m=U,x=v();if(null==x)throw new SyntaxError('Unexpected "'+m+'" in "'+P+'" at index '+R.toString());var w=y(x);if(null==w)throw new SyntaxError('Unit "'+x+'" not found.');var b=s*p;if(f(),g("^")){f();var N=d();if(null==N)throw new SyntaxError('In "'+r+'", "^" must be followed by a floating-point number');b*=N}i.units.push({unit:w.unit,prefix:w.prefix,power:b});for(var E=0;E<F.length;E++)i.dimensions[E]+=(w.unit.dimensions[E]||0)*b;for(f();")"===U;){if(0===l.length)throw new SyntaxError('Unmatched ")" in "'+P+'" at index '+R.toString());p/=l.pop(),h(),f()}if(u=!1,g("*")?(s=1,u=!0):g("/")?(s=-1,u=!0):s=1,w.unit.base){var M=w.unit.base.key;V.auto[M]={unit:w.unit,prefix:w.prefix}}}if(f(),U)throw new SyntaxError('Could not parse: "'+r+'"');if(u)throw new SyntaxError('Trailing characters: "'+r+'"');if(0!==l.length)throw new SyntaxError('Unmatched "(" in "'+P+'"');if(0==i.units.length&&!n.allowNoUnits)throw new SyntaxError('"'+r+'" contains no units');return i.value=void 0!=o?i._normalize(o):null,i},c.prototype.clone=function(){var e=new c;e.fixPrefix=this.fixPrefix,e.isUnitListSimplified=this.isUnitListSimplified,e.value=a(this.value),e.dimensions=this.dimensions.slice(0),e.units=[];for(var t=0;t<this.units.length;t++){e.units[t]={};for(var r in this.units[t])this.units[t].hasOwnProperty(r)&&(e.units[t][r]=this.units[t][r])}return e},c.prototype._isDerived=function(){return 0!==this.units.length&&(this.units.length>1||Math.abs(this.units[0].power-1)>1e-15)},c.prototype._normalize=function(e){var t,r,n,i,a;if(null==e||0===this.units.length)return e;if(this._isDerived()){var o=e;a=c._getNumberConverter(k(e));for(var s=0;s<this.units.length;s++)t=a(this.units[s].unit.value),i=a(this.units[s].prefix.value),n=a(this.units[s].power),o=E(o,A(E(t,i),n));return o}return a=c._getNumberConverter(k(e)),t=a(this.units[0].unit.value),r=a(this.units[0].unit.offset),i=a(this.units[0].prefix.value),E(b(e,r),E(t,i))},c.prototype._denormalize=function(e,t){var r,n,i,a,o;if(null==e||0===this.units.length)return e;if(this._isDerived()){var s=e;o=c._getNumberConverter(k(e));for(var u=0;u<this.units.length;u++)r=o(this.units[u].unit.value),a=o(this.units[u].prefix.value),i=o(this.units[u].power),s=M(s,A(E(r,a),i));return s}return o=c._getNumberConverter(k(e)),r=o(this.units[0].unit.value),a=o(this.units[0].prefix.value),n=o(this.units[0].unit.offset),void 0==t?N(M(M(e,r),a),n):N(M(M(e,r),t),n)},c.isValuelessUnit=function(e){return null!=y(e)},c.prototype.hasBase=function(e){if("string"==typeof e&&(e=D[e]),!e)return!1;for(var t=0;t<F.length;t++)if(Math.abs((this.dimensions[t]||0)-(e.dimensions[t]||0))>1e-12)return!1;return!0},c.prototype.equalBase=function(e){for(var t=0;t<F.length;t++)if(Math.abs((this.dimensions[t]||0)-(e.dimensions[t]||0))>1e-12)return!1;return!0},c.prototype.equals=function(e){return this.equalBase(e)&&S(this.value,e.value)},c.prototype.multiply=function(e){for(var t=this.clone(),r=0;r<F.length;r++)t.dimensions[r]=(this.dimensions[r]||0)+(e.dimensions[r]||0);for(var r=0;r<e.units.length;r++){var n={};for(var i in e.units[r])n[i]=e.units[r][i];t.units.push(n)}if(null!=this.value||null!=e.value){var a=null==this.value?this._normalize(1):this.value,o=null==e.value?e._normalize(1):e.value;t.value=E(a,o)}else t.value=null;return t.isUnitListSimplified=!1,q(t)},c.prototype.divide=function(e){for(var t=this.clone(),r=0;r<F.length;r++)t.dimensions[r]=(this.dimensions[r]||0)-(e.dimensions[r]||0);for(var r=0;r<e.units.length;r++){var n={};for(var i in e.units[r])n[i]=e.units[r][i];n.power=-n.power,t.units.push(n)}if(null!=this.value||null!=e.value){var a=null==this.value?this._normalize(1):this.value,o=null==e.value?e._normalize(1):e.value;t.value=M(a,o)}else t.value=null;return t.isUnitListSimplified=!1,q(t)},c.prototype.pow=function(e){for(var t=this.clone(),r=0;r<F.length;r++)t.dimensions[r]=(this.dimensions[r]||0)*e;for(var r=0;r<t.units.length;r++)t.units[r].power*=e;return null!=t.value?t.value=A(t.value,e):t.value=null,t.isUnitListSimplified=!1,q(t)};var q=function(e){return e.equalBase(D.NONE)&&null!==e.value&&!t.predictable?e.value:e};c.prototype.abs=function(){var e=this.clone();e.value=O(e.value);for(var t in e.units)"VA"!==e.units[t].unit.name&&"VAR"!==e.units[t].unit.name||(e.units[t].unit=G.W);return e},c.prototype.to=function(t){var r,n=null==this.value?this._normalize(1):this.value;if("string"==typeof t){if(r=c.parse(t),!this.equalBase(r))throw new Error("Units do not match");if(null!==r.value)throw new Error("Cannot convert to a unit with a value");return r.value=a(n),r.fixPrefix=!0,r.isUnitListSimplified=!0,r}if(e.isUnit(t)){if(!this.equalBase(t))throw new Error("Units do not match");if(null!==t.value)throw new Error("Cannot convert to a unit with a value");return r=t.clone(),r.value=a(n),r.fixPrefix=!0,r.isUnitListSimplified=!0,r}throw new Error("String or Unit expected as parameter")},c.prototype.toNumber=function(e){return I(this.toNumeric(e))},c.prototype.toNumeric=function(e){var t=this;return e&&(t=this.to(e)),t.simplifyUnitListLazy(),t._isDerived()?t._denormalize(t.value):t._denormalize(t.value,t.units[0].prefix.value)},c.prototype.toString=function(){
/src/dist/math.min.js:48:return this.format()},c.prototype.toJSON=function(){return{mathjs:"Unit",value:this._denormalize(this.value),unit:this.formatUnits(),fixPrefix:this.fixPrefix}},c.fromJSON=function(e){var t=new c(e.value,e.unit);return t.fixPrefix=e.fixPrefix||!1,t},c.prototype.valueOf=c.prototype.toString,c.prototype.simplifyUnitListLazy=function(){if(!this.isUnitListSimplified&&null!=this.value){var e,t=[];for(var r in W)if(this.hasBase(D[r])){e=r;break}if("NONE"===e)this.units=[];else{var n;e&&W.hasOwnProperty(e)&&(n=W[e]);if(n)this.units=[{unit:n.unit,prefix:n.prefix,power:1}];else{for(var i=!1,a=0;a<F.length;a++){var o=F[a];Math.abs(this.dimensions[a]||0)>1e-12&&(W.hasOwnProperty(o)?t.push({unit:W[o].unit,prefix:W[o].prefix,power:this.dimensions[a]||0}):i=!0)}t.length<this.units.length&&!i&&(this.units=t)}}this.isUnitListSimplified=!0}},c.prototype.toSI=function(){for(var e=this.clone(),t=[],r=0;r<F.length;r++){var n=F[r];if(Math.abs(e.dimensions[r]||0)>1e-12){if(!V.si.hasOwnProperty(n))throw new Error("Cannot express custom unit "+n+" in SI units");t.push({unit:V.si[n].unit,prefix:V.si[n].prefix,power:e.dimensions[r]||0})}}return e.units=t,e.isUnitListSimplified=!0,e},c.prototype.formatUnits=function(){this.simplifyUnitListLazy();for(var e="",t="",r=0,n=0,i=0;i<this.units.length;i++)this.units[i].power>0?(r++,e+=" "+this.units[i].prefix.name+this.units[i].unit.name,Math.abs(this.units[i].power-1)>1e-15&&(e+="^"+this.units[i].power)):this.units[i].power<0&&n++;if(n>0)for(var i=0;i<this.units.length;i++)this.units[i].power<0&&(r>0?(t+=" "+this.units[i].prefix.name+this.units[i].unit.name,Math.abs(this.units[i].power+1)>1e-15&&(t+="^"+-this.units[i].power)):(t+=" "+this.units[i].prefix.name+this.units[i].unit.name,t+="^"+this.units[i].power));e=e.substr(1),t=t.substr(1),r>1&&n>0&&(e="("+e+")"),n>1&&r>0&&(t="("+t+")");var a=e;return r>0&&n>0&&(a+=" / "),a+=t},c.prototype.format=function(t){this.simplifyUnitListLazy();var r=!1,n=!0;"undefined"!=typeof this.value&&null!==this.value&&e.isComplex(this.value)&&(r=Math.abs(this.value.re)<1e-14,n=Math.abs(this.value.im)<1e-14);for(var i in this.units)this.units[i].unit&&("VA"===this.units[i].unit.name&&r?this.units[i].unit=G.VAR:"VAR"!==this.units[i].unit.name||r||(this.units[i].unit=G.VA));1!==this.units.length||this.fixPrefix||Math.abs(this.units[0].power-Math.round(this.units[0].power))<1e-14&&(this.units[0].prefix=this._bestPrefix());var a=this._denormalize(this.value),o=null!==this.value?z(a,t||{}):"",s=this.formatUnits();return this.value&&e.isComplex(this.value)&&(o="("+o+")"),s.length>0&&o.length>0&&(o+=" "),o+=s},c.prototype._bestPrefix=function(){if(1!==this.units.length)throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");if(Math.abs(this.units[0].power-Math.round(this.units[0].power))>=1e-14)throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");var e=O(this.value),t=O(this.units[0].unit.value),r=this.units[0].prefix;if(0===e)return r;var n=this.units[0].power,i=Math.log(e/Math.pow(r.value*t,n))/Math.LN10-1.2;if(i>-2.200001&&i<1.800001)return r;i=Math.abs(i);var a=this.units[0].unit.prefixes;for(var o in a)if(a.hasOwnProperty(o)){var s=a[o];if(s.scientific){var u=Math.abs(Math.log(e/Math.pow(s.value*t,n))/Math.LN10-1.2);(u<i||u===i&&s.name.length<r.name.length)&&(r=s,i=u)}}return r},c.prototype.splitUnit=function(e){for(var t=this.clone(),r=[],n=0;n<e.length&&(t=t.to(e[n]),n!=e.length-1);n++){var i,a=t.toNumeric(),o=_(a),s=S(o,a);i=s?o:T(t.toNumeric());var u=new c(i,e[n].toString());r.push(u),t=N(t,u)}for(var f=0,n=0;n<r.length;n++)f=b(f,r[n].value);return S(f,this.value)&&(t.value=0),r.push(t),r};var L={NONE:{"":{name:"",value:1,scientific:!0}},SHORT:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:10,scientific:!1},h:{name:"h",value:100,scientific:!1},k:{name:"k",value:1e3,scientific:!0},M:{name:"M",value:1e6,scientific:!0},G:{name:"G",value:1e9,scientific:!0},T:{name:"T",value:1e12,scientific:!0},P:{name:"P",value:1e15,scientific:!0},E:{name:"E",value:1e18,scientific:!0},Z:{name:"Z",value:1e21,scientific:!0},Y:{name:"Y",value:1e24,scientific:!0},d:{name:"d",value:.1,scientific:!1},c:{name:"c",value:.01,scientific:!1},m:{name:"m",value:.001,scientific:!0},u:{name:"u",value:1e-6,scientific:!0},n:{name:"n",value:1e-9,scientific:!0},p:{name:"p",value:1e-12,scientific:!0},f:{name:"f",value:1e-15,scientific:!0},a:{name:"a",value:1e-18,scientific:!0},z:{name:"z",value:1e-21,scientific:!0},y:{name:"y",value:1e-24,scientific:!0}},LONG:{"":{name:"",value:1,scientific:!0},deca:{name:"deca",value:10,scientific:!1},hecto:{name:"hecto",value:100,scientific:!1},kilo:{name:"kilo",value:1e3,scientific:!0},mega:{name:"mega",value:1e6,scientific:!0},giga:{name:"giga",value:1e9,scientific:!0},tera:{name:"tera",value:1e12,scientific:!0},peta:{name:"peta",value:1e15,scientific:!0},exa:{name:"exa",value:1e18,scientific:!0},zetta:{name:"zetta",value:1e21,scientific:!0},yotta:{name:"yotta",value:1e24,scientific:!0},deci:{name:"deci",value:.1,scientific:!1},centi:{name:"centi",value:.01,scientific:!1},milli:{name:"milli",value:.001,scientific:!0},micro:{name:"micro",value:1e-6,scientific:!0},nano:{name:"nano",value:1e-9,scientific:!0},pico:{name:"pico",value:1e-12,scientific:!0},femto:{name:"femto",value:1e-15,scientific:!0},atto:{name:"atto",value:1e-18,scientific:!0},zepto:{name:"zepto",value:1e-21,scientific:!0},yocto:{name:"yocto",value:1e-24,scientific:!0}},SQUARED:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:100,scientific:!1},h:{name:"h",value:1e4,scientific:!1},k:{name:"k",value:1e6,scientific:!0},M:{name:"M",value:1e12,scientific:!0},G:{name:"G",value:1e18,scientific:!0},T:{name:"T",value:1e24,scientific:!0},P:{name:"P",value:1e30,scientific:!0},E:{name:"E",value:1e36,scientific:!0},Z:{name:"Z",value:1e42,scientific:!0},Y:{name:"Y",value:1e48,scientific:!0},d:{name:"d",value:.01,scientific:!1},c:{name:"c",value:1e-4,scientific:!1},m:{name:"m",value:1e-6,scientific:!0},u:{name:"u",value:1e-12,scientific:!0},n:{name:"n",value:1e-18,scientific:!0},p:{name:"p",value:1e-24,scientific:!0},f:{name:"f",value:1e-30,scientific:!0},a:{name:"a",value:1e-36,scientific:!0},z:{name:"z",value:1e-42,scientific:!0},y:{name:"y",value:1e-48,scientific:!0}},CUBIC:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:1e3,scientific:!1},h:{name:"h",value:1e6,scientific:!1},k:{name:"k",value:1e9,scientific:!0},M:{name:"M",value:1e18,scientific:!0},G:{name:"G",value:1e27,scientific:!0},T:{name:"T",value:1e36,scientific:!0},P:{name:"P",value:1e45,scientific:!0},E:{name:"E",value:1e54,scientific:!0},Z:{name:"Z",value:1e63,scientific:!0},Y:{name:"Y",value:1e72,scientific:!0},d:{name:"d",value:.001,scientific:!1},c:{name:"c",value:1e-6,scientific:!1},m:{name:"m",value:1e-9,scientific:!0},u:{name:"u",value:1e-18,scientific:!0},n:{name:"n",value:1e-27,scientific:!0},p:{name:"p",value:1e-36,scientific:!0},f:{name:"f",value:1e-45,scientific:!0},a:{name:"a",value:1e-54,scientific:!0},z:{name:"z",value:1e-63,scientific:!0},y:{name:"y",value:1e-72,scientific:!0}},BINARY_SHORT:{"":{name:"",value:1,scientific:!0},k:{name:"k",value:1e3,scientific:!0},M:{name:"M",value:1e6,scientific:!0},G:{name:"G",value:1e9,scientific:!0},T:{name:"T",value:1e12,scientific:!0},P:{name:"P",value:1e15,scientific:!0},E:{name:"E",value:1e18,scientific:!0},Z:{name:"Z",value:1e21,scientific:!0},Y:{name:"Y",value:1e24,scientific:!0},Ki:{name:"Ki",value:1024,scientific:!0},Mi:{name:"Mi",value:Math.pow(1024,2),scientific:!0},Gi:{name:"Gi",value:Math.pow(1024,3),scientific:!0},Ti:{name:"Ti",value:Math.pow(1024,4),scientific:!0},Pi:{name:"Pi",value:Math.pow(1024,5),scientific:!0},Ei:{name:"Ei",value:Math.pow(1024,6),scientific:!0},Zi:{name:"Zi",value:Math.pow(1024,7),scientific:!0},Yi:{name:"Yi",value:Math.pow(1024,8),scientific:!0}},BINARY_LONG:{"":{name:"",value:1,scientific:!0},kilo:{name:"kilo",value:1e3,scientific:!0},mega:{name:"mega",value:1e6,scientific:!0},giga:{name:"giga",value:1e9,scientific:!0},tera:{name:"tera",value:1e12,scientific:!0},peta:{name:"peta",value:1e15,scientific:!0},exa:{name:"exa",value:1e18,scientific:!0},zetta:{name:"zetta",value:1e21,scientific:!0},yotta:{name:"yotta",value:1e24,scientific:!0},kibi:{name:"kibi",value:1024,scientific:!0},mebi:{name:"mebi",value:Math.pow(1024,2),scientific:!0},gibi:{name:"gibi",value:Math.pow(1024,3),scientific:!0},tebi:{name:"tebi",value:Math.pow(1024,4),scientific:!0},pebi:{name:"pebi",value:Math.pow(1024,5),scientific:!0},exi:{name:"exi",value:Math.pow(1024,6),scientific:!0},zebi:{name:"zebi",value:Math.pow(1024,7),scientific:!0},yobi:{name:"yobi",value:Math.pow(1024,8),scientific:!0}},BTU:{"":{name:"",value:1,scientific:!0},MM:{name:"MM",value:1e6,scientific:!0}}};L.SHORTLONG={};for(var j in L.SHORT)L.SHORT.hasOwnProperty(j)&&(L.SHORTLONG[j]=L.SHORT[j]);for(var j in L.LONG)L.LONG.hasOwnProperty(j)&&(L.SHORTLONG[j]=L.LONG[j]);var F=["MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","ANGLE","BIT"],D={NONE:{dimensions:[0,0,0,0,0,0,0,0,0]},MASS:{dimensions:[1,0,0,0,0,0,0,0,0]},LENGTH:{dimensions:[0,1,0,0,0,0,0,0,0]},TIME:{dimensions:[0,0,1,0,0,0,0,0,0]},CURRENT:{dimensions:[0,0,0,1,0,0,0,0,0]},TEMPERATURE:{dimensions:[0,0,0,0,1,0,0,0,0]},LUMINOUS_INTENSITY:{dimensions:[0,0,0,0,0,1,0,0,0]},AMOUNT_OF_SUBSTANCE:{dimensions:[0,0,0,0,0,0,1,0,0]},FORCE:{dimensions:[1,1,-2,0,0,0,0,0,0]},SURFACE:{dimensions:[0,2,0,0,0,0,0,0,0]},VOLUME:{dimensions:[0,3,0,0,0,0,0,0,0]},ENERGY:{dimensions:[1,2,-2,0,0,0,0,0,0]},POWER:{dimensions:[1,2,-3,0,0,0,0,0,0]},PRESSURE:{dimensions:[1,-1,-2,0,0,0,0,0,0]},ELECTRIC_CHARGE:{dimensions:[0,0,1,1,0,0,0,0,0]},ELECTRIC_CAPACITANCE:{dimensions:[-1,-2,4,2,0,0,0,0,0]},ELECTRIC_POTENTIAL:{dimensions:[1,2,-3,-1,0,0,0,0,0]},ELECTRIC_RESISTANCE:{dimensions:[1,2,-3,-2,0,0,0,0,0]},ELECTRIC_INDUCTANCE:{dimensions:[1,2,-2,-2,0,0,0,0,0]},ELECTRIC_CONDUCTANCE:{dimensions:[-1,-2,3,2,0,0,0,0,0]},MAGNETIC_FLUX:{dimensions:[1,2,-2,-1,0,0,0,0,0]},MAGNETIC_FLUX_DENSITY:{dimensions:[1,0,-2,-1,0,0,0,0,0]},FREQUENCY:{dimensions:[0,0,-1,0,0,0,0,0,0]},ANGLE:{dimensions:[0,0,0,0,0,0,0,1,0]},BIT:{dimensions:[0,0,0,0,0,0,0,0,1]}};for(var j in D)D[j].key=j;var H={},$={name:"",base:H,value:1,offset:0,dimensions:[0,0,0,0,0,0,0,0,0]},G={meter:{name:"meter",base:D.LENGTH,prefixes:L.LONG,value:1,offset:0},inch:{name:"inch",base:D.LENGTH,prefixes:L.NONE,value:.0254,offset:0},foot:{name:"foot",base:D.LENGTH,prefixes:L.NONE,value:.3048,offset:0},yard:{name:"yard",base:D.LENGTH,prefixes:L.NONE,value:.9144,offset:0},mile:{name:"mile",base:D.LENGTH,prefixes:L.NONE,value:1609.344,offset:0},link:{name:"link",base:D.LENGTH,prefixes:L.NONE,value:.201168,offset:0},rod:{name:"rod",base:D.LENGTH,prefixes:L.NONE,value:5.02921,offset:0},chain:{name:"chain",base:D.LENGTH,prefixes:L.NONE,value:20.1168,offset:0},angstrom:{name:"angstrom",base:D.LENGTH,prefixes:L.NONE,value:1e-10,offset:0},m:{name:"m",base:D.LENGTH,prefixes:L.SHORT,value:1,offset:0},in:{name:"in",base:D.LENGTH,prefixes:L.NONE,value:.0254,offset:0},ft:{name:"ft",base:D.LENGTH,prefixes:L.NONE,value:.3048,offset:0},yd:{name:"yd",base:D.LENGTH,prefixes:L.NONE,value:.9144,offset:0},mi:{name:"mi",base:D.LENGTH,prefixes:L.NONE,value:1609.344,offset:0},li:{name:"li",base:D.LENGTH,prefixes:L.NONE,value:.201168,offset:0},rd:{name:"rd",base:D.LENGTH,prefixes:L.NONE,value:5.02921,offset:0},ch:{name:"ch",base:D.LENGTH,prefixes:L.NONE,value:20.1168,offset:0},mil:{name:"mil",base:D.LENGTH,prefixes:L.NONE,value:254e-7,offset:0},m2:{name:"m2",base:D.SURFACE,prefixes:L.SQUARED,value:1,offset:0},sqin:{name:"sqin",base:D.SURFACE,prefixes:L.NONE,value:64516e-8,offset:0},sqft:{name:"sqft",base:D.SURFACE,prefixes:L.NONE,value:.09290304,offset:0},sqyd:{name:"sqyd",base:D.SURFACE,prefixes:L.NONE,value:.83612736,offset:0},sqmi:{name:"sqmi",base:D.SURFACE,prefixes:L.NONE,value:2589988.110336,offset:0},sqrd:{name:"sqrd",base:D.SURFACE,prefixes:L.NONE,value:25.29295,offset:0},sqch:{name:"sqch",base:D.SURFACE,prefixes:L.NONE,value:404.6873,offset:0},sqmil:{name:"sqmil",base:D.SURFACE,prefixes:L.NONE,value:6.4516e-10,offset:0},acre:{name:"acre",base:D.SURFACE,prefixes:L.NONE,value:4046.86,offset:0},hectare:{name:"hectare",base:D.SURFACE,prefixes:L.NONE,value:1e4,offset:0},m3:{name:"m3",base:D.VOLUME,prefixes:L.CUBIC,value:1,offset:0},L:{name:"L",base:D.VOLUME,prefixes:L.SHORT,value:.001,offset:0},l:{name:"l",base:D.VOLUME,prefixes:L.SHORT,value:.001,offset:0},litre:{name:"litre",base:D.VOLUME,prefixes:L.LONG,value:.001,offset:0},cuin:{name:"cuin",base:D.VOLUME,prefixes:L.NONE,value:16387064e-12,offset:0},cuft:{name:"cuft",base:D.VOLUME,prefixes:L.NONE,value:.028316846592,offset:0},cuyd:{name:"cuyd",base:D.VOLUME,prefixes:L.NONE,value:.764554857984,offset:0},teaspoon:{name:"teaspoon",base:D.VOLUME,prefixes:L.NONE,value:5e-6,offset:0},tablespoon:{name:"tablespoon",base:D.VOLUME,prefixes:L.NONE,value:15e-6,offset:0},drop:{name:"drop",base:D.VOLUME,prefixes:L.NONE,value:5e-8,offset:0},gtt:{name:"gtt",base:D.VOLUME,prefixes:L.NONE,value:5e-8,offset:0},minim:{name:"minim",base:D.VOLUME,prefixes:L.NONE,value:6.161152e-8,offset:0},fluiddram:{name:"fluiddram",base:D.VOLUME,prefixes:L.NONE,value:36966911e-13,offset:0},fluidounce:{name:"fluidounce",base:D.VOLUME,prefixes:L.NONE,value:2957353e-11,offset:0},gill:{name:"gill",base:D.VOLUME,prefixes:L.NONE,value:.0001182941,offset:0},cc:{name:"cc",base:D.VOLUME,prefixes:L.NONE,value:1e-6,offset:0},cup:{name:"cup",base:D.VOLUME,prefixes:L.NONE,value:.0002365882,offset:0},pint:{name:"pint",base:D.VOLUME,prefixes:L.NONE,value:.0004731765,offset:0},quart:{name:"quart",base:D.VOLUME,prefixes:L.NONE,value:.0009463529,offset:0},gallon:{name:"gallon",base:D.VOLUME,prefixes:L.NONE,value:.003785412,offset:0},beerbarrel:{name:"beerbarrel",base:D.VOLUME,prefixes:L.NONE,value:.1173478,offset:0},oilbarrel:{name:"oilbarrel",base:D.VOLUME,prefixes:L.NONE,value:.1589873,offset:0},hogshead:{name:"hogshead",base:D.VOLUME,prefixes:L.NONE,value:.238481,offset:0},fldr:{name:"fldr",base:D.VOLUME,prefixes:L.NONE,value:36966911e-13,offset:0},floz:{name:"floz",base:D.VOLUME,prefixes:L.NONE,value:2957353e-11,offset:0},gi:{name:"gi",base:D.VOLUME,prefixes:L.NONE,value:.0001182941,offset:0},cp:{name:"cp",base:D.VOLUME,prefixes:L.NONE,value:.0002365882,offset:0},pt:{name:"pt",base:D.VOLUME,prefixes:L.NONE,value:.0004731765,offset:0},qt:{name:"qt",base:D.VOLUME,prefixes:L.NONE,value:.0009463529,offset:0},gal:{name:"gal",base:D.VOLUME,prefixes:L.NONE,value:.003785412,offset:0},bbl:{name:"bbl",base:D.VOLUME,prefixes:L.NONE,value:.1173478,offset:0},obl:{name:"obl",base:D.VOLUME,prefixes:L.NONE,value:.1589873,offset:0},g:{name:"g",base:D.MASS,prefixes:L.SHORT,value:.001,offset:0},gram:{name:"gram",base:D.MASS,prefixes:L.LONG,value:.001,offset:0},ton:{name:"ton",base:D.MASS,prefixes:L.SHORT,value:907.18474,offset:0},tonne:{name:"tonne",base:D.MASS,prefixes:L.SHORT,value:1e3,offset:0},grain:{name:"grain",base:D.MASS,prefixes:L.NONE,value:6479891e-11,offset:0},dram:{name:"dram",base:D.MASS,prefixes:L.NONE,value:.0017718451953125,offset:0},ounce:{name:"ounce",base:D.MASS,prefixes:L.NONE,value:.028349523125,offset:0},poundmass:{name:"poundmass",base:D.MASS,prefixes:L.NONE,value:.45359237,offset:0},hundredweight:{name:"hundredweight",base:D.MASS,prefixes:L.NONE,value:45.359237,offset:0},stick:{name:"stick",base:D.MASS,prefixes:L.NONE,value:.115,offset:0},stone:{name:"stone",base:D.MASS,prefixes:L.NONE,value:6.35029318,offset:0},gr:{name:"gr",base:D.MASS,prefixes:L.NONE,value:6479891e-11,offset:0},dr:{name:"dr",base:D.MASS,prefixes:L.NONE,value:.0017718451953125,offset:0},oz:{name:"oz",base:D.MASS,prefixes:L.NONE,value:.028349523125,offset:0},lbm:{name:"lbm",base:D.MASS,prefixes:L.NONE,value:.45359237,offset:0},cwt:{name:"cwt",base:D.MASS,prefixes:L.NONE,value:45.359237,offset:0},s:{name:"s",base:D.TIME,prefixes:L.SHORT,value:1,offset:0},min:{name:"min",base:D.TIME,prefixes:L.NONE,value:60,offset:0},h:{name:"h",base:D.TIME,prefixes:L.NONE,value:3600,offset:0},second:{name:"second",base:D.TIME,prefixes:L.LONG,value:1,offset:0},sec:{name:"sec",base:D.TIME,prefixes:L.LONG,value:1,offset:0},minute:{name:"minute",base:D.TIME,prefixes:L.NONE,value:60,offset:0},hour:{name:"hour",base:D.TIME,prefixes:L.NONE,value:3600,offset:0},day:{name:"day",base:D.TIME,prefixes:L.NONE,value:86400,offset:0},week:{name:"week",base:D.TIME,prefixes:L.NONE,value:604800,offset:0},month:{name:"month",base:D.TIME,prefixes:L.NONE,value:2629800,offset:0},year:{name:"year",base:D.TIME,prefixes:L.NONE,value:31557600,offset:0},decade:{name:"year",base:D.TIME,prefixes:L.NONE,value:315576e3,offset:0},century:{name:"century",base:D.TIME,prefixes:L.NONE,value:315576e4,offset:0},millennium:{name:"millennium",base:D.TIME,prefixes:L.NONE,value:315576e5,offset:0},hertz:{name:"Hertz",base:D.FREQUENCY,prefixes:L.LONG,value:1,offset:0,reciprocal:!0},Hz:{name:"Hz",base:D.FREQUENCY,prefixes:L.SHORT,value:1,offset:0,reciprocal:!0},rad:{name:"rad",base:D.ANGLE,prefixes:L.LONG,value:1,offset:0},deg:{name:"deg",base:D.ANGLE,prefixes:L.LONG,value:null,offset:0},grad:{name:"grad",base:D.ANGLE,prefixes:L.LONG,value:null,offset:0},cycle:{name:"cycle",base:D.ANGLE,prefixes:L.NONE,value:null,offset:0},arcsec:{name:"arcsec",base:D.ANGLE,prefixes:L.NONE,value:null,offset:0},arcmin:{name:"arcmin",base:D.ANGLE,prefixes:L.NONE,value:null,offset:0},A:{name:"A",base:D.CURRENT,prefixes:L.SHORT,value:1,offset:0},ampere:{name:"ampere",base:D.CURRENT,prefixes:L.LONG,value:1,offset:0},K:{name:"K",base:D.TEMPERATURE,prefixes:L.NONE,value:1,offset:0},degC:{name:"degC",base:D.TEMPERATURE,prefixes:L.NONE,value:1,offset:273.15},degF:{name:"degF",base:D.TEMPERATURE,prefixes:L.NONE,value:1/1.8,offset:459.67},degR:{name:"degR",base:D.TEMPERATURE,prefixes:L.NONE,value:1/1.8,offset:0},kelvin:{name:"kelvin",base:D.TEMPERATURE,prefixes:L.NONE,value:1,offset:0},celsius:{name:"celsius",base:D.TEMPERATURE,prefixes:L.NONE,value:1,offset:273.15},fahrenheit:{name:"fahrenheit",base:D.TEMPERATURE,prefixes:L.NONE,value:1/1.8,offset:459.67},rankine:{name:"rankine",base:D.TEMPERATURE,prefixes:L.NONE,value:1/1.8,offset:0},mol:{name:"mol",base:D.AMOUNT_OF_SUBSTANCE,prefixes:L.SHORT,value:1,offset:0},mole:{name:"mole",base:D.AMOUNT_OF_SUBSTANCE,prefixes:L.LONG,value:1,offset:0},cd:{name:"cd",base:D.LUMINOUS_INTENSITY,prefixes:L.NONE,value:1,offset:0},candela:{name:"candela",base:D.LUMINOUS_INTENSITY,prefixes:L.NONE,value:1,offset:0},N:{name:"N",base:D.FORCE,prefixes:L.SHORT,value:1,offset:0},newton:{name:"newton",base:D.FORCE,prefixes:L.LONG,value:1,offset:0},dyn:{name:"dyn",base:D.FORCE,prefixes:L.SHORT,value:1e-5,offset:0},dyne:{name:"dyne",base:D.FORCE,prefixes:L.LONG,value:1e-5,offset:0},lbf:{name:"lbf",base:D.FORCE,prefixes:L.NONE,value:4.4482216152605,offset:0},poundforce:{name:"poundforce",base:D.FORCE,prefixes:L.NONE,value:4.4482216152605,offset:0},kip:{name:"kip",base:D.FORCE,prefixes:L.LONG,value:4448.2216,offset:0},J:{name:"J",base:D.ENERGY,prefixes:L.SHORT,value:1,offset:0},joule:{name:"joule",base:D.ENERGY,prefixes:L.SHORT,value:1,offset:0},erg:{name:"erg",base:D.ENERGY,prefixes:L.NONE,value:1e-7,offset:0},Wh:{name:"Wh",base:D.ENERGY,prefixes:L.SHORT,value:3600,offset:0},BTU:{name:"BTU",base:D.ENERGY,prefixes:L.BTU,value:1055.05585262,offset:0},eV:{name:"eV",base:D.ENERGY,prefixes:L.SHORT,value:1.602176565e-19,offset:0},electronvolt:{name:"electronvolt",base:D.ENERGY,prefixes:L.LONG,value:1.602176565e-19,offset:0},W:{name:"W",base:D.POWER,prefixes:L.SHORT,value:1,offset:0},watt:{name:"W",base:D.POWER,prefixes:L.LONG,value:1,offset:0},hp:{name:"hp",base:D.POWER,prefixes:L.NONE,value:745.6998715386,offset:0},VAR:{name:"VAR",base:D.POWER,prefixes:L.SHORT,value:B.I,offset:0},VA:{name:"VA",base:D.POWER,prefixes:L.SHORT,value:1,offset:0},Pa:{name:"Pa",base:D.PRESSURE,prefixes:L.SHORT,value:1,offset:0},psi:{name:"psi",base:D.PRESSURE,prefixes:L.NONE,value:6894.75729276459,offset:0},atm:{name:"atm",base:D.PRESSURE,prefixes:L.NONE,value:101325,offset:0},bar:{name:"bar",base:D.PRESSURE,prefixes:L.NONE,value:1e5,offset:0},torr:{name:"torr",base:D.PRESSURE,prefixes:L.NONE,value:133.322,offset:0},mmHg:{name:"mmHg",base:D.PRESSURE,prefixes:L.NONE,value:133.322,offset:0},mmH2O:{name:"mmH2O",base:D.PRESSURE,prefixes:L.NONE,value:9.80665,offset:0},cmH2O:{name:"cmH2O",base:D.PRESSURE,prefixes:L.NONE,value:98.0665,offset:0},coulomb:{name:"coulomb",base:D.ELECTRIC_CHARGE,prefixes:L.LONG,value:1,offset:0},C:{name:"C",base:D.ELECTRIC_CHARGE,prefixes:L.SHORT,value:1,offset:0},farad:{name:"farad",base:D.ELECTRIC_CAPACITANCE,prefixes:L.LONG,value:1,offset:0},F:{name:"F",base:D.ELECTRIC_CAPACITANCE,prefixes:L.SHORT,value:1,offset:0},volt:{name:"volt",base:D.ELECTRIC_POTENTIAL,prefixes:L.LONG,value:1,offset:0},V:{name:"V",base:D.ELECTRIC_POTENTIAL,prefixes:L.SHORT,value:1,offset:0},ohm:{name:"ohm",base:D.ELECTRIC_RESISTANCE,prefixes:L.SHORTLONG,value:1,offset:0},henry:{name:"henry",base:D.ELECTRIC_INDUCTANCE,prefixes:L.LONG,value:1,offset:0},H:{name:"H",base:D.ELECTRIC_INDUCTANCE,prefixes:L.SHORT,value:1,offset:0},siemens:{name:"siemens",base:D.ELECTRIC_CONDUCTANCE,prefixes:L.LONG,value:1,offset:0},S:{name:"S",base:D.ELECTRIC_CONDUCTANCE,prefixes:L.SHORT,value:1,offset:0},weber:{name:"weber",base:D.MAGNETIC_FLUX,prefixes:L.LONG,value:1,offset:0},Wb:{name:"Wb",base:D.MAGNETIC_FLUX,prefixes:L.SHORT,value:1,offset:0},tesla:{name:"tesla",base:D.MAGNETIC_FLUX_DENSITY,prefixes:L.LONG,value:1,offset:0},T:{name:"T",base:D.MAGNETIC_FLUX_DENSITY,prefixes:L.SHORT,value:1,offset:0},b:{name:"b",base:D.BIT,prefixes:L.BINARY_SHORT,value:1,offset:0},bits:{name:"bits",base:D.BIT,prefixes:L.BINARY_LONG,value:1,offset:0},B:{name:"B",base:D.BIT,prefixes:L.BINARY_SHORT,value:8,offset:0},bytes:{name:"bytes",base:D.BIT,prefixes:L.BINARY_LONG,value:8,offset:0}},Z={meters:"meter",inches:"inch",feet:"foot",yards:"yard",miles:"mile",links:"link",rods:"rod",chains:"chain",angstroms:"angstrom",lt:"l",litres:"litre",liter:"litre",liters:"litre",teaspoons:"teaspoon",tablespoons:"tablespoon",minims:"minim",fluiddrams:"fluiddram",fluidounces:"fluidounce",gills:"gill",cups:"cup",pints:"pint",quarts:"quart",gallons:"gallon",beerbarrels:"beerbarrel",oilbarrels:"oilbarrel",hogsheads:"hogshead",gtts:"gtt",grams:"gram",tons:"ton",tonnes:"tonne",grains:"grain",drams:"dram",ounces:"ounce",poundmasses:"poundmass",hundredweights:"hundredweight",sticks:"stick",lb:"lbm",lbs:"lbm",kips:"kip",acres:"acre",hectares:"hectare",sqfeet:"sqft",sqyard:"sqyd",sqmile:"sqmi",sqmiles:"sqmi",mmhg:"mmHg",mmh2o:"mmH2O",cmh2o:"cmH2O",seconds:"second",secs:"second",minutes:"minute",mins:"minute",hours:"hour",hr:"hour",hrs:"hour",days:"day",weeks:"week",months:"month",years:"year",hertz:"hertz",radians:"rad",degree:"deg",degrees:"deg",gradian:"grad",gradians:"grad",cycles:"cycle",arcsecond:"arcsec",arcseconds:"arcsec",arcminute:"arcmin",arcminutes:"arcmin",BTUs:"BTU",watts:"watt",joules:"joule",amperes:"ampere",coulombs:"coulomb",volts:"volt",ohms:"ohm",farads:"farad",webers:"weber",teslas:"tesla",electronvolts:"electronvolt",moles:"mole"};x(t),u.on("config",function(e,t){e.number!==t.number&&x(e)});var V={si:{NONE:{unit:$,prefix:L.NONE[""]},LENGTH:{unit:G.m,prefix:L.SHORT[""]},MASS:{unit:G.g,prefix:L.SHORT.k},TIME:{unit:G.s,prefix:L.SHORT[""]},CURRENT:{unit:G.A,prefix:L.SHORT[""]},TEMPERATURE:{unit:G.K,prefix:L.SHORT[""]},LUMINOUS_INTENSITY:{unit:G.cd,prefix:L.SHORT[""]},AMOUNT_OF_SUBSTANCE:{unit:G.mol,prefix:L.SHORT[""]},ANGLE:{unit:G.rad,prefix:L.SHORT[""]},BIT:{unit:G.bit,prefix:L.SHORT[""]},FORCE:{unit:G.N,prefix:L.SHORT[""]},ENERGY:{unit:G.J,prefix:L.SHORT[""]},POWER:{unit:G.W,prefix:L.SHORT[""]},PRESSURE:{unit:G.Pa,prefix:L.SHORT[""]},ELECTRIC_CHARGE:{unit:G.C,prefix:L.SHORT[""]},ELECTRIC_CAPACITANCE:{unit:G.F,prefix:L.SHORT[""]},ELECTRIC_POTENTIAL:{unit:G.V,prefix:L.SHORT[""]},ELECTRIC_RESISTANCE:{unit:G.ohm,prefix:L.SHORT[""]},ELECTRIC_INDUCTANCE:{unit:G.H,prefix:L.SHORT[""]},ELECTRIC_CONDUCTANCE:{unit:G.S,prefix:L.SHORT[""]},MAGNETIC_FLUX:{unit:G.Wb,prefix:L.SHORT[""]},MAGNETIC_FLUX_DENSITY:{unit:G.T,prefix:L.SHORT[""]},FREQUENCY:{unit:G.Hz,prefix:L.SHORT[""]}}};V.cgs=JSON.parse(JSON.stringify(V.si)),V.cgs.LENGTH={unit:G.m,prefix:L.SHORT.c},V.cgs.MASS={unit:G.g,prefix:L.SHORT[""]},V.cgs.FORCE={unit:G.dyn,prefix:L.SHORT[""]},V.cgs.ENERGY={unit:G.erg,prefix:L.NONE[""]},V.us=JSON.parse(JSON.stringify(V.si)),V.us.LENGTH={unit:G.ft,prefix:L.NONE[""]},V.us.MASS={unit:G.lbm,prefix:L.NONE[""]},V.us.TEMPERATURE={unit:G.degF,prefix:L.NONE[""]},V.us.FORCE={unit:G.lbf,prefix:L.NONE[""]},V.us.ENERGY={unit:G.BTU,prefix:L.BTU[""]},V.us.POWER={unit:G.hp,prefix:L.NONE[""]},V.us.PRESSURE={unit:G.psi,prefix:L.NONE[""]},V.auto=JSON.parse(JSON.stringify(V.si));var W=V.auto;c.setUnitSystem=function(e){if(!V.hasOwnProperty(e))throw new Error("Unit system "+e+" does not exist. Choices are: "+Object.keys(V).join(", "));W=V[e]},c.getUnitSystem=function(){for(var e in V)if(V[e]===W)return e},c.typeConverters={BigNumber:function(t){return new e.BigNumber(t+"")},Fraction:function(t){return new e.Fraction(t)},Complex:function(e){return e},number:function(e){return e}},c._getNumberConverter=function(e){if(!c.typeConverters[e])throw new TypeError('Unsupported type "'+e+'"');return c.typeConverters[e]};for(var j in G){var Y=G[j];Y.dimensions=Y.base.dimensions}for(var X in Z)if(Z.hasOwnProperty(X)){var Y=G[Z[X]],J={};for(var j in Y)Y.hasOwnProperty(j)&&(J[j]=Y[j]);J.name=X,G[X]=J}return c.createUnit=function(e,t){if("object"!=typeof e)throw new TypeError("createUnit expects first parameter to be of type 'Object'");if(t&&t.override)for(var r in e)if(e.hasOwnProperty(r)&&c.deleteUnit(r),e[r].aliases)for(var n=0;n<e[r].aliases.length;n++)c.deleteUnit(e[r].aliases[n]);var i;for(var r in e)e.hasOwnProperty(r)&&(i=c.createUnitSingle(r,e[r]));return i},c.createUnitSingle=function(e,t,r){if("undefined"!=typeof t&&null!==t||(t={}),"string"!=typeof e)throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");if(G.hasOwnProperty(e))throw new Error('Cannot create unit "'+e+'": a unit with that name already exists');w(e);var n,i,a=null,o=[],s=0;if(t&&"Unit"===t.type)a=t.clone();else if("string"==typeof t)""!==t&&(n=t);else{if("object"!=typeof t)throw new TypeError('Cannot create unit "'+e+'" from "'+t.toString()+'": expecting "string" or "Unit" or "Object"');n=t.definition,i=t.prefixes,s=t.offset,t.aliases&&(o=t.aliases.valueOf())}if(o)for(var u=0;u<o.length;u++)if(G.hasOwnProperty(o[u]))throw new Error('Cannot create alias "'+o[u]+'": a unit with that name already exists');if(n&&"string"==typeof n&&!a)try{a=c.parse(n,{allowNoUnits:!0})}catch(t){throw t.message='Could not create unit "'+e+'" from "'+n+'": '+t.message,t}else n&&"Unit"===n.type&&(a=n.clone());o=o||[],s=s||0,i=i&&i.toUpperCase?L[i.toUpperCase()]||L.NONE:L.NONE;var f={};if(a){f={name:e,value:a.value,dimensions:a.dimensions.slice(0),prefixes:i,offset:s};var l=!1;for(var u in D)if(D.hasOwnProperty(u)){for(var p=!0,h=0;h<F.length;h++)if(Math.abs((f.dimensions[h]||0)-(D[u].dimensions[h]||0))>1e-12){p=!1;break}if(p){l=!0;break}}if(!l){var m=e+"_STUFF",d={dimensions:a.dimensions.slice(0)};d.key=m,D[m]=d,W[m]={unit:f,prefix:L.NONE[""]},f.base=m}}else{var m=e+"_STUFF";if(F.indexOf(m)>=0)throw new Error('Cannot create new base unit "'+e+'": a base unit with that name already exists (and cannot be overridden)');F.push(m);for(var v in D)D.hasOwnProperty(v)&&(D[v].dimensions[F.length-1]=0);for(var d={dimensions:[]},u=0;u<F.length;u++)d.dimensions[u]=0;d.dimensions[F.length-1]=1,d.key=m,D[m]=d,f={name:e,value:1,dimensions:D[m].dimensions.slice(0),prefixes:i,offset:s,base:m},W[m]={unit:f,prefix:L.NONE[""]}}c.UNITS[e]=f;for(var u=0;u<o.length;u++){var g=o[u],y={};for(var x in f)f.hasOwnProperty(x)&&(y[x]=f[x]);y.name=g,c.UNITS[g]=y}return new c(null,e)},c.deleteUnit=function(e){delete c.UNITS[e]},c.PREFIXES=L,c.BASE_DIMENSIONS=F,c.BASE_UNITS=D,c.UNIT_SYSTEMS=V,c.UNITS=G,c}var i=r(9).endsWith,a=r(5).clone,o=r(95);t.name="Unit",t.path="type",t.factory=n,t.math=!0},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("unit",{Unit:function(e){return e.clone()},string:function(t){return e.Unit.isValuelessUnit(t)?new e.Unit(null,t):e.Unit.parse(t)},"number | BigNumber | Fraction | Complex, string":function(t,r){return new e.Unit(t,r)},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)${args[1]}\\right)"},a}var i=r(1);t.name="unit",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var i=n("createUnit",{"Object, Object":function(t,r){return e.Unit.createUnit(t,r)},Object:function(t){return e.Unit.createUnit(t,{})},"string, Unit | string | Object, Object":function(t,r,n){var i={};return i[t]=r,e.Unit.createUnit(i,n)},"string, Unit | string | Object":function(t,r){var n={};return n[t]=r,e.Unit.createUnit(n,{})},string:function(t){var r={};return r[t]={},e.Unit.createUnit(r,{})}});return i}r(1);t.name="createUnit",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var i=n("splitUnit",{"Unit, Array":function(e,t){return e.splitUnit(t)}});return i}r(1);t.name="splitUnit",t.factory=n},function(e,t,r){function n(e,t,r,n,a){function o(t){var r=e.Unit.parse(t);return r.fixPrefix=!0,r}i(a,"speedOfLight",function(){return o("299792458 m s^-1")}),i(a,"gravitationConstant",function(){return o("6.6738480e-11 m^3 kg^-1 s^-2")}),i(a,"planckConstant",function(){return o("6.626069311e-34 J s")}),i(a,"reducedPlanckConstant",function(){return o("1.05457172647e-34 J s")}),i(a,"magneticConstant",function(){return o("1.2566370614e-6 N A^-2")}),i(a,"electricConstant",function(){return o("8.854187817e-12 F m^-1")}),i(a,"vacuumImpedance",function(){return o("376.730313461 ohm")}),i(a,"coulomb",function(){return o("8.9875517873681764e9 N m^2 C^-2")}),i(a,"elementaryCharge",function(){return o("1.60217656535e-19 C")}),i(a,"bohrMagneton",function(){return o("9.2740096820e-24 J T^-1")}),i(a,"conductanceQuantum",function(){return o("7.748091734625e-5 S")}),i(a,"inverseConductanceQuantum",function(){return o("12906.403721742 ohm")}),i(a,"magneticFluxQuantum",function(){return o("2.06783375846e-15 Wb")}),i(a,"nuclearMagneton",function(){return o("5.0507835311e-27 J T^-1")}),i(a,"klitzing",function(){return o("25812.807443484 ohm")}),i(a,"bohrRadius",function(){return o("5.291772109217e-11 m")}),i(a,"classicalElectronRadius",function(){return o("2.817940326727e-15 m")}),i(a,"electronMass",function(){return o("9.1093829140e-31 kg")}),i(a,"fermiCoupling",function(){return o("1.1663645e-5 GeV^-2")}),i(a,"fineStructure",function(){return.007297352569824}),i(a,"hartreeEnergy",function(){return o("4.3597443419e-18 J")}),i(a,"protonMass",function(){return o("1.67262177774e-27 kg")}),i(a,"deuteronMass",function(){return o("3.3435830926e-27 kg")}),i(a,"neutronMass",function(){return o("1.6749271613e-27 kg")}),i(a,"quantumOfCirculation",function(){return o("3.636947552024e-4 m^2 s^-1")}),i(a,"rydberg",function(){return o("10973731.56853955 m^-1")}),i(a,"thomsonCrossSection",function(){return o("6.65245873413e-29 m^2")}),i(a,"weakMixingAngle",function(){return.222321}),i(a,"efimovFactor",function(){return 22.7}),i(a,"atomicMass",function(){return o("1.66053892173e-27 kg")}),i(a,"avogadro",function(){return o("6.0221412927e23 mol^-1")}),i(a,"boltzmann",function(){return o("1.380648813e-23 J K^-1")}),i(a,"faraday",function(){return o("96485.336521 C mol^-1")}),i(a,"firstRadiation",function(){return o("3.7417715317e-16 W m^2")}),i(a,"loschmidt",function(){return o("2.686780524e25 m^-3")}),i(a,"gasConstant",function(){return o("8.314462175 J K^-1 mol^-1")}),i(a,"molarPlanckConstant",function(){return o("3.990312717628e-10 J s mol^-1")}),i(a,"molarVolume",function(){return o("2.241396820e-10 m^3 mol^-1")}),i(a,"sackurTetrode",function(){return-1.164870823}),i(a,"secondRadiation",function(){return o("1.438777013e-2 m K")}),i(a,"stefanBoltzmann",function(){
/src/dist/math.min.js-49-return o("5.67037321e-8 W m^-2 K^-4")}),i(a,"wienDisplacement",function(){return o("2.897772126e-3 m K")}),i(a,"molarMass",function(){return o("1e-3 kg mol^-1")}),i(a,"molarMassC12",function(){return o("1.2e-2 kg mol^-1")}),i(a,"gravity",function(){return o("9.80665 m s^-2")}),i(a,"planckLength",function(){return o("1.61619997e-35 m")}),i(a,"planckMass",function(){return o("2.1765113e-8 kg")}),i(a,"planckTime",function(){return o("5.3910632e-44 s")}),i(a,"planckCharge",function(){return o("1.87554595641e-18 C")}),i(a,"planckTemperature",function(){return o("1.41683385e+32 K")})}function i(e,t,r){a(e,t,r),a(e.expression.mathWithTransform,t,r)}var a=r(5).lazy;t.factory=n,t.lazy=!1,t.math=!0},function(e,t,r){"use strict";function n(e,t,o,u,c){c.on("config",function(r,i){r.number!==i.number&&n(e,t,o,u,c)}),i(c,"true",!0),i(c,"false",!1),i(c,"null",null),i(c,"uninitialized",r(2).UNINITIALIZED),"BigNumber"===t.number?(i(c,"Infinity",new e.BigNumber(1/0)),i(c,"NaN",new e.BigNumber(NaN)),a(c,"pi",function(){return s.pi(e.BigNumber)}),a(c,"tau",function(){return s.tau(e.BigNumber)}),a(c,"e",function(){return s.e(e.BigNumber)}),a(c,"phi",function(){return s.phi(e.BigNumber)}),a(c,"E",function(){return c.e}),a(c,"LN2",function(){return new e.BigNumber(2).ln()}),a(c,"LN10",function(){return new e.BigNumber(10).ln()}),a(c,"LOG2E",function(){return new e.BigNumber(1).div(new e.BigNumber(2).ln())}),a(c,"LOG10E",function(){return new e.BigNumber(1).div(new e.BigNumber(10).ln())}),a(c,"PI",function(){return c.pi}),a(c,"SQRT1_2",function(){return new e.BigNumber("0.5").sqrt()}),a(c,"SQRT2",function(){return new e.BigNumber(2).sqrt()})):(i(c,"Infinity",1/0),i(c,"NaN",NaN),i(c,"pi",Math.PI),i(c,"tau",2*Math.PI),i(c,"e",Math.E),i(c,"phi",1.618033988749895),i(c,"E",c.e),i(c,"LN2",Math.LN2),i(c,"LN10",Math.LN10),i(c,"LOG2E",Math.LOG2E),i(c,"LOG10E",Math.LOG10E),i(c,"PI",c.pi),i(c,"SQRT1_2",Math.SQRT1_2),i(c,"SQRT2",Math.SQRT2)),i(c,"i",e.Complex.I),i(c,"version",r(190))}function i(e,t,r){e[t]=r,e.expression.mathWithTransform[t]=r}function a(e,t,r){o.lazy(e,t,r),o.lazy(e.expression.mathWithTransform,t,r)}var o=r(5),s=r(95);t.factory=n,t.lazy=!1,t.math=!0},function(e,t){e.exports="3.16.5"},function(e,t,r){e.exports=[r(99),r(383),r(389),r(391),r(402),r(39),r(111)]},function(e,t){e.exports={name:"bignumber",category:"Construction",syntax:["bignumber(x)"],description:"Create a big number from a number or string.",examples:["0.1 + 0.2","bignumber(0.1) + bignumber(0.2)",'bignumber("7.2")','bignumber("7.2e500")',"bignumber([0.1, 0.2, 0.3])"],seealso:["boolean","complex","fraction","index","matrix","string","unit"]}},function(e,t){e.exports={name:"boolean",category:"Construction",syntax:["x","boolean(x)"],description:"Convert a string or number into a boolean.",examples:["boolean(0)","boolean(1)","boolean(3)",'boolean("true")','boolean("false")',"boolean([1, 0, 1, 1])"],seealso:["bignumber","complex","index","matrix","number","string","unit"]}},function(e,t){e.exports={name:"complex",category:"Construction",syntax:["complex()","complex(re, im)","complex(string)"],description:"Create a complex number.",examples:["complex()","complex(2, 3)",'complex("7 - 2i")'],seealso:["bignumber","boolean","index","matrix","number","string","unit"]}},function(e,t){e.exports={name:"createUnit",category:"Construction",syntax:["createUnit(definitions)","createUnit(name, definition)"],description:"Create a user-defined unit and register it with the Unit type.",examples:['createUnit("foo")','createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})','createUnit("mph", "1 mile/hour")'],seealso:["unit","splitUnit"]}},function(e,t){e.exports={name:"fraction",category:"Construction",syntax:["fraction(num)","fraction(num,den)"],description:"Create a fraction from a number or from a numerator and denominator.",examples:["fraction(0.125)","fraction(1, 3) + fraction(2, 5)"],seealso:["bignumber","boolean","complex","index","matrix","string","unit"]}},function(e,t){e.exports={name:"index",category:"Construction",syntax:["[start]","[start:end]","[start:step:end]","[start1, start 2, ...]","[start1:end1, start2:end2, ...]","[start1:step1:end1, start2:step2:end2, ...]"],description:"Create an index to get or replace a subset of a matrix",examples:["[]","[1, 2, 3]","A = [1, 2, 3; 4, 5, 6]","A[1, :]","A[1, 2] = 50","A[0:2, 0:2] = ones(2, 2)"],seealso:["bignumber","boolean","complex","matrix,","number","range","string","unit"]}},function(e,t){e.exports={name:"matrix",category:"Construction",syntax:["[]","[a1, b1, ...; a2, b2, ...]","matrix()",'matrix("dense")',"matrix([...])"],description:"Create a matrix.",examples:["[]","[1, 2, 3]","[1, 2, 3; 4, 5, 6]","matrix()","matrix([3, 4])",'matrix([3, 4; 5, 6], "sparse")','matrix([3, 4; 5, 6], "sparse", "number")'],seealso:["bignumber","boolean","complex","index","number","string","unit","sparse"]}},function(e,t){e.exports={name:"number",category:"Construction",syntax:["x","number(x)","number(unit, valuelessUnit)"],description:"Create a number or convert a string or boolean into a number.",examples:["2","2e3","4.05","number(2)",'number("7.2")',"number(true)","number([true, false, true, true])",'number(unit("52cm"), "m")'],seealso:["bignumber","boolean","complex","fraction","index","matrix","string","unit"]}},function(e,t){e.exports={name:"sparse",category:"Construction",syntax:["sparse()","sparse([a1, b1, ...; a1, b2, ...])",'sparse([a1, b1, ...; a1, b2, ...], "number")'],description:"Create a sparse matrix.",examples:["sparse()","sparse([3, 4; 5, 6])",'sparse([3, 0; 5, 0], "number")'],seealso:["bignumber","boolean","complex","index","number","string","unit","matrix"]}},function(e,t){e.exports={name:"splitUnit",category:"Construction",syntax:["splitUnit(unit: Unit, parts: Unit[])"],description:"Split a unit in an array of units whose sum is equal to the original unit.",examples:['splitUnit(1 m, ["feet", "inch"])'],seealso:["unit","createUnit"]}},function(e,t){e.exports={name:"string",category:"Construction",syntax:['"text"',"string(x)"],description:"Create a string or convert a value to a string",examples:['"Hello World!"',"string(4.2)","string(3 + 2i)"],seealso:["bignumber","boolean","complex","index","matrix","number","unit"]}},function(e,t){e.exports={name:"unit",category:"Construction",syntax:["value unit","unit(value, unit)","unit(string)"],description:"Create a unit.",examples:["5.5 mm","3 inch",'unit(7.1, "kilogram")','unit("23 deg")'],seealso:["bignumber","boolean","complex","index","matrix","number","string"]}},function(e,t){e.exports={name:"false",category:"Constants",syntax:["false"],description:"Boolean value false",examples:["false"],seealso:["true"]}},function(e,t){e.exports={name:"i",category:"Constants",syntax:["i"],description:"Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.",examples:["i","i * i","sqrt(-1)"],seealso:[]}},function(e,t){e.exports={name:"Infinity",category:"Constants",syntax:["Infinity"],description:"Infinity, a number which is larger than the maximum number that can be handled by a floating point number.",examples:["Infinity","1 / 0"],seealso:[]}},function(e,t){e.exports={name:"LN2",category:"Constants",syntax:["LN2"],description:"Returns the natural logarithm of 2, approximately equal to 0.693",examples:["LN2","log(2)"],seealso:[]}},function(e,t){e.exports={name:"LN10",category:"Constants",syntax:["LN10"],description:"Returns the natural logarithm of 10, approximately equal to 2.302",examples:["LN10","log(10)"],seealso:[]}},function(e,t){e.exports={name:"LOG2E",category:"Constants",syntax:["LOG2E"],description:"Returns the base-2 logarithm of E, approximately equal to 1.442",examples:["LOG2E","log(e, 2)"],seealso:[]}},function(e,t){e.exports={name:"LOG10E",category:"Constants",syntax:["LOG10E"],description:"Returns the base-10 logarithm of E, approximately equal to 0.434",examples:["LOG10E","log(e, 10)"],seealso:[]}},function(e,t){e.exports={name:"NaN",category:"Constants",syntax:["NaN"],description:"Not a number",examples:["NaN","0 / 0"],seealso:[]}},function(e,t){e.exports={name:"null",category:"Constants",syntax:["null"],description:"Value null",examples:["null"],seealso:["true","false"]}},function(e,t){e.exports={name:"phi",category:"Constants",syntax:["phi"],description:"Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...",examples:["phi"],seealso:[]}},function(e,t){e.exports={name:"SQRT1_2",category:"Constants",syntax:["SQRT1_2"],description:"Returns the square root of 1/2, approximately equal to 0.707",examples:["SQRT1_2","sqrt(1/2)"],seealso:[]}},function(e,t){e.exports={name:"SQRT2",category:"Constants",syntax:["SQRT2"],description:"Returns the square root of 2, approximately equal to 1.414",examples:["SQRT2","sqrt(2)"],seealso:[]}},function(e,t){e.exports={name:"tau",category:"Constants",syntax:["tau"],description:"Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.",examples:["tau","2 * pi"],seealso:["pi"]}},function(e,t){e.exports={name:"true",category:"Constants",syntax:["true"],description:"Boolean value true",examples:["true"],seealso:["false"]}},function(e,t){e.exports={name:"version",category:"Constants",syntax:["version"],description:"A string with the version number of math.js",examples:["version"],seealso:[]}},function(e,t){e.exports={name:"derivative",category:"Algebra",syntax:["derivative(expr, variable)","derivative(expr, variable, {simplify: boolean})"],description:"Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.",examples:['derivative("2x^3", "x")','derivative("2x^3", "x", {simplify: false})','derivative("2x^2 + 3x + 4", "x")','derivative("sin(2x)", "x")','f = parse("x^2 + x")','x = parse("x")',"df = derivative(f, x)","df.eval({x: 3})"],seealso:["simplify","parse","eval"]}},function(e,t){e.exports={name:"lsolve",category:"Algebra",syntax:["x=lsolve(L, b)"],description:"Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lsolve(a, b)"],seealso:["lup","lusolve","usolve","matrix","sparse"]}},function(e,t){e.exports={name:"lup",category:"Algebra",syntax:["lup(m)"],description:"Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U",examples:["lup([[2, 1], [1, 4]])","lup(matrix([[2, 1], [1, 4]]))","lup(sparse([[2, 1], [1, 4]]))"],seealso:["lusolve","lsolve","usolve","matrix","sparse","slu","qr"]}},function(e,t){e.exports={name:"lusolve",category:"Algebra",syntax:["x=lusolve(A, b)","x=lusolve(lu, b)"],description:"Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lusolve(a, b)"],seealso:["lup","slu","lsolve","usolve","matrix","sparse"]}},function(e,t){e.exports={name:"simplify",category:"Algebra",syntax:["simplify(expr)","simplify(expr, rules)"],description:"Simplify an expression tree.",examples:['simplify("3 + 2 / 4")','simplify("2x + x")','f = parse("x * (x + 2 + x)")',"simplified = simplify(f)","simplified.eval({x: 2})"],seealso:["derivative","parse","eval"]}},function(e,t){e.exports={name:"slu",category:"Algebra",syntax:["slu(A, order, threshold)"],description:"Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U",examples:["slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)"],seealso:["lusolve","lsolve","usolve","matrix","sparse","lup","qr"]}},function(e,t){e.exports={name:"usolve",category:"Algebra",syntax:["x=usolve(U, b)"],description:"Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",examples:["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],seealso:["lup","lusolve","lsolve","matrix","sparse"]}},function(e,t){e.exports={name:"qr",category:"Algebra",syntax:["qr(A)"],description:"Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.",examples:["qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])"],seealso:["lup","slu","matrix"]}},function(e,t){e.exports={name:"abs",category:"Arithmetic",syntax:["abs(x)"],description:"Compute the absolute value.",examples:["abs(3.5)","abs(-4.2)"],seealso:["sign"]}},function(e,t){e.exports={name:"add",category:"Operators",syntax:["x + y","add(x, y)"],description:"Add two values.",examples:["a = 2.1 + 3.6","a - 3.6","3 + 2i","3 cm + 2 inch",'"2.3" + "4"'],seealso:["subtract"]}},function(e,t){e.exports={name:"cbrt",category:"Arithmetic",syntax:["cbrt(x)","cbrt(x, allRoots)"],description:"Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned",examples:["cbrt(64)","cube(4)","cbrt(-8)","cbrt(2 + 3i)","cbrt(8i)","cbrt(8i, true)","cbrt(27 m^3)"],seealso:["square","sqrt","cube","multiply"]}},function(e,t){e.exports={name:"ceil",category:"Arithmetic",syntax:["ceil(x)"],description:"Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.",examples:["ceil(3.2)","ceil(3.8)","ceil(-4.2)"],seealso:["floor","fix","round"]}},function(e,t){e.exports={name:"cube",category:"Arithmetic",syntax:["cube(x)"],description:"Compute the cube of a value. The cube of x is x * x * x.",examples:["cube(2)","2^3","2 * 2 * 2"],seealso:["multiply","square","pow"]}},function(e,t){e.exports={name:"divide",category:"Operators",syntax:["x / y","divide(x, y)"],description:"Divide two values.",examples:["a = 2 / 3","a * 3","4.5 / 2","3 + 4 / 2","(3 + 4) / 2","18 km / 4.5"],seealso:["multiply"]}},function(e,t){e.exports={name:"dotDivide",category:"Operators",syntax:["x ./ y","dotDivide(x, y)"],description:"Divide two values element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","b = [2, 1, 1; 3, 2, 5]","a ./ b"],seealso:["multiply","dotMultiply","divide"]}},function(e,t){e.exports={name:"dotMultiply",category:"Operators",syntax:["x .* y","dotMultiply(x, y)"],description:"Multiply two values element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","b = [2, 1, 1; 3, 2, 5]","a .* b"],seealso:["multiply","divide","dotDivide"]}},function(e,t){e.exports={name:"dotpow",category:"Operators",syntax:["x .^ y","dotpow(x, y)"],description:"Calculates the power of x to y element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","a .^ 2"],seealso:["pow"]}},function(e,t){e.exports={name:"exp",category:"Arithmetic",syntax:["exp(x)"],description:"Calculate the exponent of a value.",examples:["exp(1.3)","e ^ 1.3","log(exp(1.3))","x = 2.4","(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"],seealso:["pow","log"]}},function(e,t){e.exports={name:"fix",category:"Arithmetic",syntax:["fix(x)"],description:"Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.",examples:["fix(3.2)","fix(3.8)","fix(-4.2)","fix(-4.8)"],seealso:["ceil","floor","round"]}},function(e,t){e.exports={name:"floor",category:"Arithmetic",syntax:["floor(x)"],description:"Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",examples:["floor(3.2)","floor(3.8)","floor(-4.2)"],seealso:["ceil","fix","round"]}},function(e,t){e.exports={name:"gcd",category:"Arithmetic",syntax:["gcd(a, b)","gcd(a, b, c, ...)"],description:"Compute the greatest common divisor.",examples:["gcd(8, 12)","gcd(-4, 6)","gcd(25, 15, -10)"],seealso:["lcm","xgcd"]}},function(e,t){e.exports={name:"hypot",category:"Arithmetic",syntax:["hypot(a, b, c, ...)","hypot([a, b, c, ...])"],description:"Calculate the hypotenusa of a list with values. ",examples:["hypot(3, 4)","sqrt(3^2 + 4^2)","hypot(-2)","hypot([3, 4, 5])"],seealso:["abs","norm"]}},function(e,t){e.exports={name:"lcm",category:"Arithmetic",syntax:["lcm(x, y)"],description:"Compute the least common multiple.",examples:["lcm(4, 6)","lcm(6, 21)","lcm(6, 21, 5)"],seealso:["gcd"]}},function(e,t){e.exports={name:"log",category:"Arithmetic",syntax:["log(x)","log(x, base)"],description:"Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",examples:["log(3.5)","a = log(2.4)","exp(a)","10 ^ 4","log(10000, 10)","log(10000) / log(10)","b = log(1024, 2)","2 ^ b"],seealso:["exp","log10"]}},function(e,t){e.exports={name:"log10",category:"Arithmetic",syntax:["log10(x)"],description:"Compute the 10-base logarithm of a value.",examples:["log10(0.00001)","log10(10000)","10 ^ 4","log(10000) / log(10)","log(10000, 10)"],seealso:["exp","log"]}},function(e,t){e.exports={name:"mod",category:"Operators",syntax:["x % y","x mod y","mod(x, y)"],description:"Calculates the modulus, the remainder of an integer division.",examples:["7 % 3","11 % 2","10 mod 4","isOdd(x) = x % 2","isOdd(2)","isOdd(3)"],seealso:["divide"]}},function(e,t){e.exports={name:"multiply",category:"Operators",syntax:["x * y","multiply(x, y)"],description:"multiply two values.",examples:["a = 2.1 * 3.4","a / 3.4","2 * 3 + 4","2 * (3 + 4)","3 * 2.1 km"],seealso:["divide"]}},function(e,t){e.exports={name:"norm",category:"Arithmetic",syntax:["norm(x)","norm(x, p)"],description:"Calculate the norm of a number, vector or matrix.",examples:["abs(-3.5)","norm(-3.5)","norm(3 - 4i)","norm([1, 2, -3], Infinity)","norm([1, 2, -3], -Infinity)","norm([3, 4], 2)","norm([[1, 2], [3, 4]], 1)",'norm([[1, 2], [3, 4]], "inf")','norm([[1, 2], [3, 4]], "fro")']}},function(e,t){e.exports={name:"nthRoot",category:"Arithmetic",syntax:["nthRoot(a)","nthRoot(a, root)"],description:'Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation "x^root = A".',examples:["4 ^ 3","nthRoot(64, 3)","nthRoot(9, 2)","sqrt(9)"],seealso:["sqrt","pow"]}},function(e,t){e.exports={name:"pow",category:"Operators",syntax:["x ^ y","pow(x, y)"],description:"Calculates the power of x to y, x^y.",examples:["2^3","2*2*2","1 + e ^ (pi * i)"],seealso:["multiply"]}},function(e,t){e.exports={name:"round",category:"Arithmetic",syntax:["round(x)","round(x, n)"],description:"round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",examples:["round(3.2)","round(3.8)","round(-4.2)","round(-4.8)","round(pi, 3)","round(123.45678, 2)"],seealso:["ceil","floor","fix"]}},function(e,t){e.exports={name:"sign",category:"Arithmetic",syntax:["sign(x)"],description:"Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.",examples:["sign(3.5)","sign(-4.2)","sign(0)"],seealso:["abs"]}},function(e,t){e.exports={name:"sqrt",category:"Arithmetic",syntax:["sqrt(x)"],description:"Compute the square root value. If x = y * y, then y is the square root of x.",examples:["sqrt(25)","5 * 5","sqrt(-1)"],seealso:["square","multiply"]}},function(e,t){e.exports={name:"square",category:"Arithmetic",syntax:["square(x)"],description:"Compute the square of a value. The square of x is x * x.",examples:["square(3)","sqrt(9)","3^2","3 * 3"],seealso:["multiply","pow","sqrt","cube"]}},function(e,t){e.exports={name:"subtract",category:"Operators",syntax:["x - y","subtract(x, y)"],description:"subtract two values.",examples:["a = 5.3 - 2","a + 2","2/3 - 1/6","2 * 3 - 3","2.1 km - 500m"],seealso:["add"]}},function(e,t){e.exports={name:"unaryMinus",category:"Operators",syntax:["-x","unaryMinus(x)"],description:"Inverse the sign of a value. Converts booleans and strings to numbers.",examples:["-4.5","-(-5.6)",'-"22"'],seealso:["add","subtract","unaryPlus"]}},function(e,t){e.exports={name:"unaryPlus",category:"Operators",syntax:["+x","unaryPlus(x)"],description:"Converts booleans and strings to numbers.",examples:["+true",'+"2"'],seealso:["add","subtract","unaryMinus"]}},function(e,t){e.exports={name:"xgcd",category:"Arithmetic",syntax:["xgcd(a, b)"],description:"Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.",examples:["xgcd(8, 12)","gcd(8, 12)","xgcd(36163, 21199)"],seealso:["gcd","lcm"]}},function(e,t){e.exports={name:"bitAnd",category:"Bitwise",syntax:["x & y","bitAnd(x, y)"],description:"Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0",examples:["5 & 3","bitAnd(53, 131)","[1, 12, 31] & 42"],seealso:["bitNot","bitOr","bitXor","leftShift","rightArithShift","rightLogShift"]}},function(e,t){e.exports={name:"bitNot",category:"Bitwise",syntax:["~x","bitNot(x)"],description:"Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.",examples:["~1","~2","bitNot([2, -3, 4])"],seealso:["bitAnd","bitOr","bitXor","leftShift","rightArithShift","rightLogShift"]}},function(e,t){e.exports={name:"bitOr",category:"Bitwise",syntax:["x | y","bitOr(x, y)"],description:"Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.",examples:["5 | 3","bitOr([1, 2, 3], 4)"],seealso:["bitAnd","bitNot","bitXor","leftShift","rightArithShift","rightLogShift"]}},function(e,t){e.exports={name:"bitXor",category:"Bitwise",syntax:["bitXor(x, y)"],description:"Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.",examples:["bitOr(1, 2)","bitXor([2, 3, 4], 4)"],seealso:["bitAnd","bitNot","bitOr","leftShift","rightArithShift","rightLogShift"]}},function(e,t){e.exports={name:"leftShift",category:"Bitwise",syntax:["x << y","leftShift(x, y)"],description:"Bitwise left logical shift of a value x by y number of bits.",examples:["4 << 1","8 >> 1"],seealso:["bitAnd","bitNot","bitOr","bitXor","rightArithShift","rightLogShift"]}},function(e,t){e.exports={name:"rightArithShift",category:"Bitwise",syntax:["x >> y","rightArithShift(x, y)"],description:"Bitwise right arithmetic shift of a value x by y number of bits.",examples:["8 >> 1","4 << 1","-12 >> 2"],seealso:["bitAnd","bitNot","bitOr","bitXor","leftShift","rightLogShift"]}},function(e,t){e.exports={name:"rightLogShift",category:"Bitwise",syntax:["x >>> y","rightLogShift(x, y)"],description:"Bitwise right logical shift of a value x by y number of bits.",examples:["8 >>> 1","4 << 1","-12 >>> 2"],seealso:["bitAnd","bitNot","bitOr","bitXor","leftShift","rightArithShift"]}},function(e,t){e.exports={name:"bellNumbers",category:"Combinatorics",syntax:["bellNumbers(n)"],description:"The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.",examples:["bellNumbers(3)","bellNumbers(8)"],seealso:["stirlingS2"]}},function(e,t){e.exports={name:"catalan",category:"Combinatorics",syntax:["catalan(n)"],description:"The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.",examples:["catalan(3)","catalan(8)"],seealso:["bellNumbers"]}},function(e,t){e.exports={name:"composition",category:"Combinatorics",syntax:["composition(n, k)"],description:"The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.",examples:["composition(5, 3)"],seealso:["combinations"]}},function(e,t){e.exports={name:"stirlingS2",category:"Combinatorics",syntax:["stirlingS2(n, k)"],description:"he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.",examples:["stirlingS2(5, 3)"],seealso:["bellNumbers"]}},function(e,t){e.exports={name:"config",category:"Core",syntax:["config()","config(options)"],description:"Get configuration or change configuration.",examples:["config()","1/3 + 1/4",'config({number: "Fraction"})',"1/3 + 1/4"],seealso:[]}},function(e,t){e.exports={name:"import",category:"Core",syntax:["import(functions)","import(functions, options)"],description:"Import functions or constants from an object.",examples:["import({myFn: f(x)=x^2, myConstant: 32 })","myFn(2)","myConstant"],seealso:[]}},function(e,t){e.exports={name:"typed",category:"Core",syntax:["typed(signatures)","typed(name, signatures)"],description:"Create a typed function.",examples:['double = typed({ "number, number": f(x)=x+x })',"double(2)",'double("hello")'],seealso:[]}},function(e,t){e.exports={name:"arg",category:"Complex",syntax:["arg(x)"],description:"Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",examples:["arg(2 + 2i)","atan2(3, 2)","arg(2 + 3i)"],seealso:["re","im","conj","abs"]}},function(e,t){e.exports={name:"conj",category:"Complex",syntax:["conj(x)"],description:"Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",examples:["conj(2 + 3i)","conj(2 - 3i)","conj(-5.2i)"],seealso:["re","im","abs","arg"]}},function(e,t){e.exports={name:"re",category:"Complex",syntax:["re(x)"],description:"Get the real part of a complex number.",examples:["re(2 + 3i)","im(2 + 3i)","re(-5.2i)","re(2.4)"],seealso:["im","conj","abs","arg"]}},function(e,t){e.exports={name:"im",category:"Complex",syntax:["im(x)"],description:"Get the imaginary part of a complex number.",examples:["im(2 + 3i)","re(2 + 3i)","im(-5.2i)","im(2.4)"],seealso:["re","conj","abs","arg"]}},function(e,t){e.exports={name:"eval",category:"Expression",syntax:["eval(expression)","eval([expr1, expr2, expr3, ...])"],description:"Evaluate an expression or an array with expressions.",examples:['eval("2 + 3")','eval("sqrt(" + 4 + ")")'],seealso:[]}},function(e,t){e.exports={name:"help",category:"Expression",syntax:["help(object)","help(string)"],description:"Display documentation on a function or data type.",examples:["help(sqrt)",'help("complex")'],seealso:[]}},function(e,t){e.exports={name:"distance",category:"Geometry",syntax:["distance([x1, y1], [x2, y2])","distance([[x1, y1], [x2, y2])"],description:"Calculates the Euclidean distance between two points.",examples:["distance([0,0], [4,4])","distance([[0,0], [4,4]])"],seealso:[]}},function(e,t){e.exports={name:"intersect",category:"Geometry",syntax:["intersect(expr1, expr2, expr3, expr4)","intersect(expr1, expr2, expr3)"],description:"Computes the intersection point of lines and/or planes.",examples:["intersect([0, 0], [10, 10], [10, 0], [0, 10])","intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])"],seealso:[]}},function(e,t){e.exports={name:"and",category:"Logical",syntax:["x and y","and(x, y)"],description:"Logical and. Test whether two values are both defined with a nonzero/nonempty value.",examples:["true and false","true and true","2 and 4"],seealso:["not","or","xor"]}},function(e,t){e.exports={name:"not",category:"Logical",syntax:["not x","not(x)"],description:"Logical not. Flips the boolean value of given argument.",examples:["not true","not false","not 2","not 0"],seealso:["and","or","xor"]}},function(e,t){e.exports={name:"or",category:"Logical",syntax:["x or y","or(x, y)"],description:"Logical or. Test if at least one value is defined with a nonzero/nonempty value.",examples:["true or false","false or false","0 or 4"],seealso:["not","and","xor"]}},function(e,t){e.exports={name:"xor",category:"Logical",syntax:["x xor y","xor(x, y)"],description:"Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.",examples:["true xor false","false xor false","true xor true","0 xor 4"],seealso:["not","and","or"]}},function(e,t){e.exports={name:"concat",category:"Matrix",syntax:["concat(A, B, C, ...)","concat(A, B, C, ..., dim)"],description:"Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.",examples:["A = [1, 2; 5, 6]","B = [3, 4; 7, 8]","concat(A, B)","concat(A, B, 1)","concat(A, B, 2)"],seealso:["det","diag","eye","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"cross",category:"Matrix",syntax:["cross(A, B)"],description:"Calculate the cross product for two vectors in three dimensional space.",examples:["cross([1, 1, 0],  [0, 1, 1])","cross([3, -3, 1], [4, 9, 2])","cross([2, 3, 4],  [5, 6, 7])"],seealso:["multiply","dot"]}},function(e,t){e.exports={name:"det",category:"Matrix",syntax:["det(x)"],description:"Calculate the determinant of a matrix",examples:["det([1, 2; 3, 4])","det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"],seealso:["concat","diag","eye","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"diag",category:"Matrix",syntax:["diag(x)","diag(x, k)"],description:"Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",examples:["diag(1:3)","diag(1:3, 1)","a = [1, 2, 3; 4, 5, 6; 7, 8, 9]","diag(a)"],seealso:["concat","det","eye","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"dot",category:"Matrix",syntax:["dot(A, B)","A * B"],description:"Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",examples:["dot([2, 4, 1], [2, 2, 3])","[2, 4, 1] * [2, 2, 3]"],seealso:["multiply","cross"]}},function(e,t){e.exports={name:"eye",category:"Matrix",syntax:["eye(n)","eye(m, n)","eye([m, n])"],description:"Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",examples:["eye(3)","eye(3, 5)","a = [1, 2, 3; 4, 5, 6]","eye(size(a))"],seealso:["concat","det","diag","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"filter",category:"Matrix",syntax:["filter(x, test)"],description:"Filter items in a matrix.",examples:["isPositive(x) = x > 0","filter([6, -2, -1, 4, 3], isPositive)","filter([6, -2, 0, 1, 0], x != 0)"],seealso:["sort","map","forEach"]
/src/dist/math.min.js-50-}},function(e,t){e.exports={name:"flatten",category:"Matrix",syntax:["flatten(x)"],description:"Flatten a multi dimensional matrix into a single dimensional matrix.",examples:["a = [1, 2, 3; 4, 5, 6]","size(a)","b = flatten(a)","size(b)"],seealso:["concat","resize","size","squeeze"]}},function(e,t){e.exports={name:"forEach",category:"Matrix",syntax:["forEach(x, callback)"],description:"Iterates over all elements of a matrix/array, and executes the given callback function.",examples:["forEach([1, 2, 3], function(val) { console.log(val) })"],seealso:["map","sort","filter"]}},function(e,t){e.exports={name:"inv",category:"Matrix",syntax:["inv(x)"],description:"Calculate the inverse of a matrix",examples:["inv([1, 2; 3, 4])","inv(4)","1 / 4"],seealso:["concat","det","diag","eye","ones","range","size","squeeze","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"kron",category:"Matrix",syntax:["kron(x, y)"],description:"Calculates the kronecker product of 2 matrices or vectors.",examples:["kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])","kron([1,1], [2,3,4])"],seealso:["multiply","dot","cross"]}},function(e,t){e.exports={name:"map",category:"Matrix",syntax:["map(x, callback)"],description:"Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.",examples:["map([1, 2, 3], square)"],seealso:["filter","forEach"]}},function(e,t){e.exports={name:"ones",category:"Matrix",syntax:["ones(m)","ones(m, n)","ones(m, n, p, ...)","ones([m])","ones([m, n])","ones([m, n, p, ...])"],description:"Create a matrix containing ones.",examples:["ones(3)","ones(3, 5)","ones([2,3]) * 4.5","a = [1, 2, 3; 4, 5, 6]","ones(size(a))"],seealso:["concat","det","diag","eye","inv","range","size","squeeze","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"partitionSelect",category:"Matrix",syntax:["partitionSelect(x, k)","partitionSelect(x, k, compare)"],description:"Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.",examples:["partitionSelect([5, 10, 1], 2)",'partitionSelect(["C", "B", "A", "D"], 1)'],seealso:["sort"]}},function(e,t){e.exports={name:"range",category:"Type",syntax:["start:end","start:step:end","range(start, end)","range(start, end, step)","range(string)"],description:"Create a range. Lower bound of the range is included, upper bound is excluded.",examples:["1:5","3:-1:-3","range(3, 7)","range(0, 12, 2)",'range("4:10")',"a = [1, 2, 3, 4; 5, 6, 7, 8]","a[1:2, 1:2]"],seealso:["concat","det","diag","eye","inv","ones","size","squeeze","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"resize",category:"Matrix",syntax:["resize(x, size)","resize(x, size, defaultValue)"],description:"Resize a matrix.",examples:["resize([1,2,3,4,5], [3])","resize([1,2,3], [5])","resize([1,2,3], [5], -1)","resize(2, [2, 3])",'resize("hello", [8], "!")'],seealso:["size","subset","squeeze","reshape"]}},function(e,t){e.exports={name:"reshape",category:"Matrix",syntax:["reshape(x, sizes)"],description:"Reshape a multi dimensional array to fit the specified dimensions.",examples:["reshape([1, 2, 3, 4, 5, 6], [2, 3])","reshape([[1, 2], [3, 4]], [1, 4])","reshape([[1, 2], [3, 4]], [4])"],seealso:["size","squeeze","resize"]}},function(e,t){e.exports={name:"size",category:"Matrix",syntax:["size(x)"],description:"Calculate the size of a matrix.",examples:["size(2.3)",'size("hello world")',"a = [1, 2; 3, 4; 5, 6]","size(a)","size(1:6)"],seealso:["concat","det","diag","eye","inv","ones","range","squeeze","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"sort",category:"Matrix",syntax:["sort(x)","sort(x, compare)"],description:'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',examples:["sort([5, 10, 1])",'sort(["C", "B", "A", "D"])',"sortByLength(a, b) = size(a)[1] - size(b)[1]",'sort(["Langdon", "Tom", "Sara"], sortByLength)','sort(["10", "1", "2"], "natural")'],seealso:["map","filter","forEach"]}},function(e,t){e.exports={name:"squeeze",category:"Matrix",syntax:["squeeze(x)"],description:"Remove inner and outer singleton dimensions from a matrix.",examples:["a = zeros(3,2,1)","size(squeeze(a))","b = zeros(1,1,3)","size(squeeze(b))"],seealso:["concat","det","diag","eye","inv","ones","range","size","subset","trace","transpose","zeros"]}},function(e,t){e.exports={name:"subset",category:"Matrix",syntax:["value(index)","value(index) = replacement","subset(value, [index])","subset(value, [index], replacement)"],description:"Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.",examples:["d = [1, 2; 3, 4]","e = []","e[1, 1:2] = [5, 6]","e[2, :] = [7, 8]","f = d * e","f[2, 1]","f[:, 1]"],seealso:["concat","det","diag","eye","inv","ones","range","size","squeeze","trace","transpose","zeros"]}},function(e,t){e.exports={name:"trace",category:"Matrix",syntax:["trace(A)"],description:"Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.",examples:["A = [1, 2, 3; -1, 2, 3; 2, 0, 3]","trace(A)"],seealso:["concat","det","diag","eye","inv","ones","range","size","squeeze","subset","transpose","zeros"]}},function(e,t){e.exports={name:"transpose",category:"Matrix",syntax:["x'","transpose(x)"],description:"Transpose a matrix",examples:["a = [1, 2, 3; 4, 5, 6]","a'","transpose(a)"],seealso:["concat","det","diag","eye","inv","ones","range","size","squeeze","subset","trace","zeros"]}},function(e,t){e.exports={name:"zeros",category:"Matrix",syntax:["zeros(m)","zeros(m, n)","zeros(m, n, p, ...)","zeros([m])","zeros([m, n])","zeros([m, n, p, ...])"],description:"Create a matrix containing zeros.",examples:["zeros(3)","zeros(3, 5)","a = [1, 2, 3; 4, 5, 6]","zeros(size(a))"],seealso:["concat","det","diag","eye","inv","ones","range","size","squeeze","subset","trace","transpose"]}},function(e,t){e.exports={name:"combinations",category:"Probability",syntax:["combinations(n, k)"],description:"Compute the number of combinations of n items taken k at a time",examples:["combinations(7, 5)"],seealso:["permutations","factorial"]}},function(e,t){e.exports={name:"factorial",category:"Probability",syntax:["n!","factorial(n)"],description:"Compute the factorial of a value",examples:["5!","5 * 4 * 3 * 2 * 1","3!"],seealso:["combinations","permutations","gamma"]}},function(e,t){e.exports={name:"gamma",category:"Probability",syntax:["gamma(n)"],description:"Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.",examples:["gamma(4)","3!","gamma(1/2)","sqrt(pi)"],seealso:["factorial"]}},function(e,t){e.exports={name:"kldivergence",category:"Probability",syntax:["kldivergence(x, y)"],description:"Calculate the Kullback-Leibler (KL) divergence  between two distributions.",examples:["kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])"],seealso:[]}},function(e,t){e.exports={name:"multinomial",category:"Probability",syntax:["multinomial(A)"],description:"Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.",examples:["multinomial([1, 2, 1])"],seealso:["combinations","factorial"]}},function(e,t){e.exports={name:"permutations",category:"Probability",syntax:["permutations(n)","permutations(n, k)"],description:"Compute the number of permutations of n items taken k at a time",examples:["permutations(5)","permutations(5, 3)"],seealso:["combinations","factorial"]}},function(e,t){e.exports={name:"pickRandom",category:"Probability",syntax:["pickRandom(array)","pickRandom(array, number)","pickRandom(array, weights)","pickRandom(array, number, weights)","pickRandom(array, weights, number)"],description:"Pick a random entry from a given array.",examples:["pickRandom(0:10)","pickRandom([1, 3, 1, 6])","pickRandom([1, 3, 1, 6], 2)","pickRandom([1, 3, 1, 6], [2, 3, 2, 1])","pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])","pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)"],seealso:["random","randomInt"]}},function(e,t){e.exports={name:"random",category:"Probability",syntax:["random()","random(max)","random(min, max)","random(size)","random(size, max)","random(size, min, max)"],description:"Return a random number.",examples:["random()","random(10, 20)","random([2, 3])"],seealso:["pickRandom","randomInt"]}},function(e,t){e.exports={name:"randomInt",category:"Probability",syntax:["randomInt(max)","randomInt(min, max)","randomInt(size)","randomInt(size, max)","randomInt(size, min, max)"],description:"Return a random integer number",examples:["randomInt(10, 20)","randomInt([2, 3], 10)"],seealso:["pickRandom","random"]}},function(e,t){e.exports={name:"compare",category:"Relational",syntax:["compare(x, y)"],description:"Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.",examples:["compare(2, 3)","compare(3, 2)","compare(2, 2)","compare(5cm, 40mm)","compare(2, [1, 2, 3])"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compareNatural"]}},function(e,t){e.exports={name:"compareNatural",category:"Relational",syntax:["compareNatural(x, y)"],description:"Compare two values of any type in a deterministic, natural way.",examples:["compareNatural(2, 3)","compareNatural(3, 2)","compareNatural(2, 2)","compareNatural(5cm, 40mm)",'compareNatural("2", "10")',"compareNatural(2 + 3i, 2 + 4i)","compareNatural([1, 2, 4], [1, 2, 3])","compareNatural([1, 5], [1, 2, 3])","compareNatural([1, 2], [1, 2])","compareNatural({a: 2}, {a: 4})"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compare"]}},function(e,t){e.exports={name:"deepEqual",category:"Relational",syntax:["deepEqual(x, y)"],description:"Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.",examples:["deepEqual([1,3,4], [1,3,4])","deepEqual([1,3,4], [1,3])"],seealso:["equal","unequal","smaller","larger","smallerEq","largerEq","compare"]}},function(e,t){e.exports={name:"equal",category:"Relational",syntax:["x == y","equal(x, y)"],description:"Check equality of two values. Returns true if the values are equal, and false if not.",examples:["2+2 == 3","2+2 == 4","a = 3.2","b = 6-2.8","a == b","50cm == 0.5m"],seealso:["unequal","smaller","larger","smallerEq","largerEq","compare","deepEqual"]}},function(e,t){e.exports={name:"larger",category:"Relational",syntax:["x > y","larger(x, y)"],description:"Check if value x is larger than y. Returns true if x is larger than y, and false if not.",examples:["2 > 3","5 > 2*2","a = 3.3","b = 6-2.8","(a > b)","(b < a)","5 cm > 2 inch"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compare"]}},function(e,t){e.exports={name:"largerEq",category:"Relational",syntax:["x >= y","largerEq(x, y)"],description:"Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",examples:["2 >= 1+1","2 > 1+1","a = 3.2","b = 6-2.8","(a >= b)"],seealso:["equal","unequal","smallerEq","smaller","compare"]}},function(e,t){e.exports={name:"smaller",category:"Relational",syntax:["x < y","smaller(x, y)"],description:"Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.",examples:["2 < 3","5 < 2*2","a = 3.3","b = 6-2.8","(a < b)","5 cm < 2 inch"],seealso:["equal","unequal","larger","smallerEq","largerEq","compare"]}},function(e,t){e.exports={name:"smallerEq",category:"Relational",syntax:["x <= y","smallerEq(x, y)"],description:"Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",examples:["2 <= 1+1","2 < 1+1","a = 3.2","b = 6-2.8","(a <= b)"],seealso:["equal","unequal","larger","smaller","largerEq","compare"]}},function(e,t){e.exports={name:"unequal",category:"Relational",syntax:["x != y","unequal(x, y)"],description:"Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",examples:["2+2 != 3","2+2 != 4","a = 3.2","b = 6-2.8","a != b","50cm != 0.5m","5 cm != 2 inch"],seealso:["equal","smaller","larger","smallerEq","largerEq","compare","deepEqual"]}},function(e,t){e.exports={name:"setCartesian",category:"Set",syntax:["setCartesian(set1, set2)"],description:"Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setCartesian([1, 2], [3, 4])"],seealso:["setUnion","setIntersect","setDifference","setPowerset"]}},function(e,t){e.exports={name:"setDifference",category:"Set",syntax:["setDifference(set1, set2)"],description:"Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setDifference([1, 2, 3, 4], [3, 4, 5, 6])","setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setIntersect","setSymDifference"]}},function(e,t){e.exports={name:"setDistinct",category:"Set",syntax:["setDistinct(set)"],description:"Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setDistinct([1, 1, 1, 2, 2, 3])"],seealso:["setMultiplicity"]}},function(e,t){e.exports={name:"setIntersect",category:"Set",syntax:["setIntersect(set1, set2)"],description:"Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setIntersect([1, 2, 3, 4], [3, 4, 5, 6])","setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setDifference"]}},function(e,t){e.exports={name:"setIsSubset",category:"Set",syntax:["setIsSubset(set1, set2)"],description:"Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setIsSubset([1, 2], [3, 4, 5, 6])","setIsSubset([3, 4], [3, 4, 5, 6])"],seealso:["setUnion","setIntersect","setDifference"]}},function(e,t){e.exports={name:"setMultiplicity",category:"Set",syntax:["setMultiplicity(element, set)"],description:"Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setMultiplicity(1, [1, 2, 2, 4])","setMultiplicity(2, [1, 2, 2, 4])"],seealso:["setDistinct","setSize"]}},function(e,t){e.exports={name:"setPowerset",category:"Set",syntax:["setPowerset(set)"],description:"Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setPowerset([1, 2, 3])"],seealso:["setCartesian"]}},function(e,t){e.exports={name:"setSize",category:"Set",syntax:["setSize(set)","setSize(set, unique)"],description:'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',examples:["setSize([1, 2, 2, 4])","setSize([1, 2, 2, 4], true)"],seealso:["setUnion","setIntersect","setDifference"]}},function(e,t){e.exports={name:"setSymDifference",category:"Set",syntax:["setSymDifference(set1, set2)"],description:"Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])","setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setIntersect","setDifference"]}},function(e,t){e.exports={name:"setUnion",category:"Set",syntax:["setUnion(set1, set2)"],description:"Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setUnion([1, 2, 3, 4], [3, 4, 5, 6])","setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setIntersect","setDifference"]}},function(e,t){e.exports={name:"erf",category:"Special",syntax:["erf(x)"],description:"Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x",examples:["erf(0.2)","erf(-0.5)","erf(4)"],seealso:[]}},function(e,t){e.exports={name:"mad",category:"Statistics",syntax:["mad(a, b, c, ...)","mad(A)"],description:"Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.",examples:["mad(10, 20, 30)","mad([1, 2, 3])"],seealso:["mean","median","std","abs"]}},function(e,t){e.exports={name:"max",category:"Statistics",syntax:["max(a, b, c, ...)","max(A)","max(A, dim)"],description:"Compute the maximum value of a list of values.",examples:["max(2, 3, 4, 1)","max([2, 3, 4, 1])","max([2, 5; 4, 3])","max([2, 5; 4, 3], 1)","max([2, 5; 4, 3], 2)","max(2.7, 7.1, -4.5, 2.0, 4.1)","min(2.7, 7.1, -4.5, 2.0, 4.1)"],seealso:["mean","median","min","prod","std","sum","var"]}},function(e,t){e.exports={name:"mean",category:"Statistics",syntax:["mean(a, b, c, ...)","mean(A)","mean(A, dim)"],description:"Compute the arithmetic mean of a list of values.",examples:["mean(2, 3, 4, 1)","mean([2, 3, 4, 1])","mean([2, 5; 4, 3])","mean([2, 5; 4, 3], 1)","mean([2, 5; 4, 3], 2)","mean([1.0, 2.7, 3.2, 4.0])"],seealso:["max","median","min","prod","std","sum","var"]}},function(e,t){e.exports={name:"median",category:"Statistics",syntax:["median(a, b, c, ...)","median(A)"],description:"Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",examples:["median(5, 2, 7)","median([3, -1, 5, 7])"],seealso:["max","mean","min","prod","std","sum","var","quantileSeq"]}},function(e,t){e.exports={name:"min",category:"Statistics",syntax:["min(a, b, c, ...)","min(A)","min(A, dim)"],description:"Compute the minimum value of a list of values.",examples:["min(2, 3, 4, 1)","min([2, 3, 4, 1])","min([2, 5; 4, 3])","min([2, 5; 4, 3], 1)","min([2, 5; 4, 3], 2)","min(2.7, 7.1, -4.5, 2.0, 4.1)","max(2.7, 7.1, -4.5, 2.0, 4.1)"],seealso:["max","mean","median","prod","std","sum","var"]}},function(e,t){e.exports={name:"mode",category:"Statistics",syntax:["mode(a, b, c, ...)","mode(A)","mode(A, a, b, B, c, ...)"],description:"Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.",examples:["mode(2, 1, 4, 3, 1)","mode([1, 2.7, 3.2, 4, 2.7])","mode(1, 4, 6, 1, 6)"],seealso:["max","mean","min","median","prod","std","sum","var"]}},function(e,t){e.exports={name:"prod",category:"Statistics",syntax:["prod(a, b, c, ...)","prod(A)"],description:"Compute the product of all values.",examples:["prod(2, 3, 4)","prod([2, 3, 4])","prod([2, 5; 4, 3])"],seealso:["max","mean","min","median","min","std","sum","var"]}},function(e,t){e.exports={name:"quantileSeq",category:"Statistics",syntax:["quantileSeq(A, prob[, sorted])","quantileSeq(A, [prob1, prob2, ...][, sorted])","quantileSeq(A, N[, sorted])"],description:"Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.",examples:["quantileSeq([3, -1, 5, 7], 0.5)","quantileSeq([3, -1, 5, 7], [1/3, 2/3])","quantileSeq([3, -1, 5, 7], 2)","quantileSeq([-1, 3, 5, 7], 0.5, true)"],seealso:["mean","median","min","max","prod","std","sum","var"]}},function(e,t){e.exports={name:"std",category:"Statistics",syntax:["std(a, b, c, ...)","std(A)","std(A, normalization)"],description:'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',examples:["std(2, 4, 6)","std([2, 4, 6, 8])",'std([2, 4, 6, 8], "uncorrected")','std([2, 4, 6, 8], "biased")',"std([1, 2, 3; 4, 5, 6])"],seealso:["max","mean","min","median","min","prod","sum","var"]}},function(e,t){e.exports={name:"sum",category:"Statistics",syntax:["sum(a, b, c, ...)","sum(A)"],description:"Compute the sum of all values.",examples:["sum(2, 3, 4, 1)","sum([2, 3, 4, 1])","sum([2, 5; 4, 3])"],seealso:["max","mean","median","min","prod","std","sum","var"]}},function(e,t){e.exports={name:"var",category:"Statistics",syntax:["var(a, b, c, ...)","var(A)","var(A, normalization)"],description:'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',examples:["var(2, 4, 6)","var([2, 4, 6, 8])",'var([2, 4, 6, 8], "uncorrected")','var([2, 4, 6, 8], "biased")',"var([1, 2, 3; 4, 5, 6])"],seealso:["max","mean","min","median","min","prod","std","sum"]}},function(e,t){e.exports={name:"acos",category:"Trigonometry",syntax:["acos(x)"],description:"Compute the inverse cosine of a value in radians.",examples:["acos(0.5)","acos(cos(2.3))"],seealso:["cos","atan","asin"]}},function(e,t){e.exports={name:"acosh",category:"Trigonometry",syntax:["acosh(x)"],description:"Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.",examples:["acosh(1.5)"],seealso:["cosh","asinh","atanh"]}},function(e,t){e.exports={name:"acot",category:"Trigonometry",syntax:["acot(x)"],description:"Calculate the inverse cotangent of a value.",examples:["acot(0.5)","acot(cot(0.5))","acot(2)"],seealso:["cot","atan"]}},function(e,t){e.exports={name:"acoth",category:"Trigonometry",syntax:["acoth(x)"],description:"Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.",examples:["acoth(2)","acoth(0.5)"],seealso:["acsch","asech"]}},function(e,t){e.exports={name:"acsc",category:"Trigonometry",syntax:["acsc(x)"],description:"Calculate the inverse cotangent of a value.",examples:["acsc(2)","acsc(csc(0.5))","acsc(0.5)"],seealso:["csc","asin","asec"]}},function(e,t){e.exports={name:"acsch",category:"Trigonometry",syntax:["acsch(x)"],description:"Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.",examples:["acsch(0.5)"],seealso:["asech","acoth"]}},function(e,t){e.exports={name:"asec",category:"Trigonometry",syntax:["asec(x)"],description:"Calculate the inverse secant of a value.",examples:["asec(0.5)","asec(sec(0.5))","asec(2)"],seealso:["acos","acot","acsc"]}},function(e,t){e.exports={name:"asech",category:"Trigonometry",syntax:["asech(x)"],description:"Calculate the inverse secant of a value.",examples:["asech(0.5)"],seealso:["acsch","acoth"]}},function(e,t){e.exports={name:"asin",category:"Trigonometry",syntax:["asin(x)"],description:"Compute the inverse sine of a value in radians.",examples:["asin(0.5)","asin(sin(0.5))"],seealso:["sin","acos","atan"]}},function(e,t){e.exports={name:"asinh",category:"Trigonometry",syntax:["asinh(x)"],description:"Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.",examples:["asinh(0.5)"],seealso:["acosh","atanh"]}},function(e,t){e.exports={name:"atan",category:"Trigonometry",syntax:["atan(x)"],description:"Compute the inverse tangent of a value in radians.",examples:["atan(0.5)","atan(tan(0.5))"],seealso:["tan","acos","asin"]}},function(e,t){e.exports={name:"atanh",category:"Trigonometry",syntax:["atanh(x)"],description:"Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.",examples:["atanh(0.5)"],seealso:["acosh","asinh"]}},function(e,t){e.exports={name:"atan2",category:"Trigonometry",syntax:["atan2(y, x)"],description:"Computes the principal value of the arc tangent of y/x in radians.",examples:["atan2(2, 2) / pi","angle = 60 deg in rad","x = cos(angle)","y = sin(angle)","atan2(y, x)"],seealso:["sin","cos","tan"]}},function(e,t){e.exports={name:"cos",category:"Trigonometry",syntax:["cos(x)"],description:"Compute the cosine of x in radians.",examples:["cos(2)","cos(pi / 4) ^ 2","cos(180 deg)","cos(60 deg)","sin(0.2)^2 + cos(0.2)^2"],seealso:["acos","sin","tan"]}},function(e,t){e.exports={name:"cosh",category:"Trigonometry",syntax:["cosh(x)"],description:"Compute the hyperbolic cosine of x in radians.",examples:["cosh(0.5)"],seealso:["sinh","tanh","coth"]}},function(e,t){e.exports={name:"cot",category:"Trigonometry",syntax:["cot(x)"],description:"Compute the cotangent of x in radians. Defined as 1/tan(x)",examples:["cot(2)","1 / tan(2)"],seealso:["sec","csc","tan"]}},function(e,t){e.exports={name:"coth",category:"Trigonometry",syntax:["coth(x)"],description:"Compute the hyperbolic cotangent of x in radians.",examples:["coth(2)","1 / tanh(2)"],seealso:["sech","csch","tanh"]}},function(e,t){e.exports={name:"csc",category:"Trigonometry",syntax:["csc(x)"],description:"Compute the cosecant of x in radians. Defined as 1/sin(x)",examples:["csc(2)","1 / sin(2)"],seealso:["sec","cot","sin"]}},function(e,t){e.exports={name:"csch",category:"Trigonometry",syntax:["csch(x)"],description:"Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",examples:["csch(2)","1 / sinh(2)"],seealso:["sech","coth","sinh"]}},function(e,t){e.exports={name:"sec",category:"Trigonometry",syntax:["sec(x)"],description:"Compute the secant of x in radians. Defined as 1/cos(x)",examples:["sec(2)","1 / cos(2)"],seealso:["cot","csc","cos"]}},function(e,t){e.exports={name:"sech",category:"Trigonometry",syntax:["sech(x)"],description:"Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",examples:["sech(2)","1 / cosh(2)"],seealso:["coth","csch","cosh"]}},function(e,t){e.exports={name:"sin",category:"Trigonometry",syntax:["sin(x)"],description:"Compute the sine of x in radians.",examples:["sin(2)","sin(pi / 4) ^ 2","sin(90 deg)","sin(30 deg)","sin(0.2)^2 + cos(0.2)^2"],seealso:["asin","cos","tan"]}},function(e,t){e.exports={name:"sinh",category:"Trigonometry",syntax:["sinh(x)"],description:"Compute the hyperbolic sine of x in radians.",examples:["sinh(0.5)"],seealso:["cosh","tanh"]}},function(e,t){e.exports={name:"tan",category:"Trigonometry",syntax:["tan(x)"],description:"Compute the tangent of x in radians.",examples:["tan(0.5)","sin(0.5) / cos(0.5)","tan(pi / 4)","tan(45 deg)"],seealso:["atan","sin","cos"]}},function(e,t){e.exports={name:"tanh",category:"Trigonometry",syntax:["tanh(x)"],description:"Compute the hyperbolic tangent of x in radians.",examples:["tanh(0.5)","sinh(0.5) / cosh(0.5)"],seealso:["sinh","cosh"]}},function(e,t){e.exports={name:"to",category:"Units",syntax:["x to unit","to(x, unit)"],description:"Change the unit of a value.",examples:["5 inch to cm","3.2kg to g","16 bytes in bits"],seealso:[]}},function(e,t){e.exports={name:"clone",category:"Utils",syntax:["clone(x)"],description:"Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices",examples:["clone(3.5)","clone(2 - 4i)","clone(45 deg)","clone([1, 2; 3, 4])",'clone("hello world")'],seealso:[]}},function(e,t){e.exports={name:"format",category:"Utils",syntax:["format(value)","format(value, precision)"],description:"Format a value of any type as string.",examples:["format(2.3)","format(3 - 4i)","format([])","format(pi, 3)"],seealso:["print"]}},function(e,t){e.exports={name:"isNaN",category:"Utils",syntax:["isNaN(x)"],description:"Test whether a value is NaN (not a number)",examples:["isNaN(2)","isNaN(0 / 0)","isNaN(NaN)","isNaN(Infinity)"],seealso:["isNegative","isNumeric","isPositive","isZero"]}},function(e,t){e.exports={name:"isInteger",category:"Utils",syntax:["isInteger(x)"],description:"Test whether a value is an integer number.",examples:["isInteger(2)","isInteger(3.5)","isInteger([3, 0.5, -2])"],seealso:["isNegative","isNumeric","isPositive","isZero"]}},function(e,t){e.exports={name:"isNegative",category:"Utils",syntax:["isNegative(x)"],description:"Test whether a value is negative: smaller than zero.",examples:["isNegative(2)","isNegative(0)","isNegative(-4)","isNegative([3, 0.5, -2])"],seealso:["isInteger","isNumeric","isPositive","isZero"]}},function(e,t){e.exports={name:"isNumeric",category:"Utils",syntax:["isNumeric(x)"],description:"Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",examples:["isNumeric(2)","isNumeric(0)","isNumeric(bignumber(500))","isNumeric(fraction(0.125))",'isNumeric("3")',"isNumeric(2 + 3i)",'isNumeric([2.3, "foo", false])'],seealso:["isInteger","isZero","isNegative","isPositive","isNaN"]}},function(e,t){e.exports={name:"isPositive",category:"Utils",syntax:["isPositive(x)"],description:"Test whether a value is positive: larger than zero.",examples:["isPositive(2)","isPositive(0)","isPositive(-4)","isPositive([3, 0.5, -2])"],seealso:["isInteger","isNumeric","isNegative","isZero"]}},function(e,t){e.exports={name:"isPrime",category:"Utils",syntax:["isPrime(x)"],description:"Test whether a value is prime: has no divisors other than itself and one.",examples:["isPrime(3)","isPrime(-2)","isPrime([2, 17, 100])"],seealso:["isInteger","isNumeric","isNegative","isZero"]}},function(e,t){e.exports={name:"isZero",category:"Utils",syntax:["isZero(x)"],description:"Test whether a value is zero.",examples:["isZero(2)","isZero(0)","isZero(-4)","isZero([3, 0, -2, 0])"],seealso:["isInteger","isNumeric","isNegative","isPositive"]}},function(e,t){e.exports={name:"typeof",category:"Utils",syntax:["typeof(x)"],description:"Get the type of a variable.",examples:["typeof(3.5)","typeof(2 - 4i)","typeof(45 deg)",'typeof("hello world")'],seealso:[]}},function(e,t,r){e.exports=[r(384),r(386),r(387),r(388),r(110)]},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(39));return a("compile",{string:function(e){return o(e).compile()},"Array | Matrix":function(e){return i(e,function(e){return o(e).compile()})}})}var i=r(1);t.name="compile",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(22)),u=n(r(0));return function(e,t,r){try{if(Array.isArray(e))return u(e).subset(t,r).valueOf();if(e&&"function"==typeof e.subset)return e.subset(t,r);if("string"==typeof e)return s(e,t,r);if("object"==typeof e){if(!t.isObjectProperty())throw TypeError("Cannot apply a numeric index as object property");return a(e,t.getObjectProperty(),r),e}throw new TypeError("Cannot apply index: unsupported type of object")}catch(e){throw i(e)}}}var i=r(41).transform,a=r(13).setSafeProperty;t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(39));return a("compile",{string:function(e){var t={};return o(e).compile().eval(t)},"string, Object":function(e,t){return o(e).compile().eval(t)},"Array | Matrix":function(e){var t={};return i(e,function(e){return o(e).compile().eval(t)})},"Array | Matrix, Object":function(e,t){return i(e,function(e){return o(e).compile().eval(t)})}})}var i=r(1);t.name="eval",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a,o){var s=n(r(99));return a("help",{any:function(t){var r,n=t;if("string"!=typeof t)for(r in o)if(o.hasOwnProperty(r)&&t===o[r]){n=r;break}var a=i(s,n);if(!a)throw new Error('No documentation found on "'+n+'"');return new e.Help(a)}})}var i=r(13).getSafeProperty;t.math=!0,t.name="help",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(39));return i("parse",{"string | Array | Matrix":a,"string | Array | Matrix, Object":a})}t.name="parse",t.factory=n},function(e,t,r){e.exports=[r(102),r(80),r(104),r(105),r(106),r(53),r(78),r(107),r(54),r(14),r(109),r(62),r(63),r(79),r(40),r(390)]},function(e,t,r){"use strict";function n(e,t,r,n){
/src/dist/math.min.js:51:function i(){throw new Error("UpdateNode is deprecated. Use AssignmentNode instead.")}return i}t.name="UpdateNode",t.path="expression.node",t.factory=n},function(e,t,r){e.exports=[r(392),r(393),r(394),r(395),r(396),r(397),r(398),r(399),r(400),r(401)]},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(64));return a("concat",{"...any":function(t){var r=t.length-1,n=t[r];e.isNumber(n)?t[r]=n-1:e.isBigNumber(n)&&(t[r]=n.minus(1));try{return o.apply(null,t)}catch(e){throw i(e)}}})}var i=r(41).transform;t.name="concat",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function s(t,r,n){var i,a;return t[0]&&(i=t[0].compile().eval(n)),t[1]&&(a=e.isSymbolNode(t[1])||e.isFunctionAssignmentNode(t[1])?t[1].compile().eval(n):u(t[1],r,n)),f(i,a)}var u=n(r(81)),c=n(r(0));s.rawArgs=!0;var f=a("filter",{"Array, function":i,"Matrix, function":function(e,t){return c(i(e.toArray(),t))},"Array, RegExp":o,"Matrix, RegExp":function(e,t){return c(o(e.toArray(),t))}});return f.toTex=void 0,s}function i(e,t){var r=s(t);return a(e,function(e,n,i){return 1===r?t(e):2===r?t(e,[n+1]):t(e,[n+1],i)})}var a=r(2).filter,o=r(2).filterRegExp,s=r(32).maxArgumentCount;t.name="filter",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){function s(t,r,n){var i,a;return t[0]&&(i=t[0].compile().eval(n)),t[1]&&(a=e.isSymbolNode(t[1])||e.isFunctionAssignmentNode(t[1])?t[1].compile().eval(n):u(t[1],r,n)),c(i,a)}var u=n(r(81));s.rawArgs=!0;var c=o("forEach",{"Array | Matrix, function":function(e,t){var r=i(t),n=function(i,o){Array.isArray(i)?a(i,function(e,t){n(e,o.concat(t+1))}):1===r?t(i):2===r?t(i,o):t(i,o,e)};n(e.valueOf(),[])}});return s}var i=r(32).maxArgumentCount,a=r(2).forEach;t.name="forEach",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,r){return function(){for(var t=[],r=0,n=arguments.length;r<n;r++){var i=arguments[r];if(e.isRange(i))i.start--,i.end-=i.step>0?0:2;else if(i&&i.isSet===!0)i=i.map(function(e){return e-1});else if(e.isArray(i)||e.isMatrix(i))i=i.map(function(e){return e-1});else if(e.isNumber(i))i--;else if(e.isBigNumber(i))i=i.toNumber()-1;else if("string"!=typeof i)throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");t[r]=i}var a=new e.Index;return e.Index.apply(a,t),a}}t.name="index",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(t,r,n){var i,a;return t[0]&&(i=t[0].compile().eval(n)),t[1]&&(a=e.isSymbolNode(t[1])||e.isFunctionAssignmentNode(t[1])?t[1].compile().eval(n):s(t[1],r,n)),c(i,a)}var s=n(r(81)),u=n(r(0));o.rawArgs=!0;var c=a("map",{"Array, function":function(e,t){return i(e,t,e)},"Matrix, function":function(e,t){return u(i(e.valueOf(),t,e))}});return o}function i(e,t,r){function n(e,a){return Array.isArray(e)?o(e,function(e,t){return n(e,a.concat(t+1))}):1===i?t(e):2===i?t(e,a):t(e,a,r)}var i=a(t);return n(e,[])}var a=r(32).maxArgumentCount,o=r(2).map;t.name="map",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(112));return o("max",{"...any":function(t){if(2==t.length&&a(t[0])){var r=t[1];e.isNumber(r)?t[1]=r-1:e.isBigNumber(r)&&(t[1]=r.minus(1))}try{return s.apply(null,t)}catch(e){throw i(e)}}})}var i=r(41).transform,a=r(46);t.name="max",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(113));return o("mean",{"...any":function(t){if(2==t.length&&a(t[0])){var r=t[1];e.isNumber(r)?t[1]=r-1:e.isBigNumber(r)&&(t[1]=r.minus(1))}try{return s.apply(null,t)}catch(e){throw i(e)}}})}var i=r(41).transform,a=r(46);t.name="mean",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(116));return o("min",{"...any":function(t){if(2==t.length&&a(t[0])){var r=t[1];e.isNumber(r)?t[1]=r-1:e.isBigNumber(r)&&(t[1]=r.minus(1))}try{return s.apply(null,t)}catch(e){throw i(e)}}})}var i=r(41).transform,a=r(46);t.name="min",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(117));return i("range",{"...any":function(e){var t=e.length-1,r=e[t];return"boolean"!=typeof r&&e.push(!0),a.apply(null,e)}})}t.name="range",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(22));return a("subset",{"...any":function(e){try{return o.apply(null,e)}catch(e){throw i(e)}}})}var i=r(41).transform;t.name="subset",t.path="expression.transform",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){function s(e){if(!(this instanceof s))throw new SyntaxError("Constructor must be called with the new operator");if(!e)throw new Error('Argument "doc" missing');this.doc=e}var u=n(r(110))();return s.prototype.type="Help",s.prototype.isHelp=!0,s.prototype.toString=function(){var t=this.doc||{},r="\n";if(t.name&&(r+="Name: "+t.name+"\n\n"),t.category&&(r+="Category: "+t.category+"\n\n"),t.description&&(r+="Description:\n    "+t.description+"\n\n"),t.syntax&&(r+="Syntax:\n    "+t.syntax.join("\n    ")+"\n\n"),t.examples){r+="Examples:\n";for(var n=0;n<t.examples.length;n++){var i=t.examples[n];r+="    "+i+"\n";var o;try{o=u.eval(i)}catch(e){o=e}void 0===o||e.isHelp(o)||(r+="        "+a.format(o,{precision:14})+"\n")}r+="\n"}return t.seealso&&t.seealso.length&&(r+="See also: "+t.seealso.join(", ")+"\n"),r},s.prototype.toJSON=function(){var e=i.clone(this.doc);return e.mathjs="Help",e},s.fromJSON=function(e){var t={};for(var r in e)"mathjs"!==r&&(t[r]=e[r]);return new s(t)},s.prototype.valueOf=s.prototype.toString,s}var i=r(5),a=r(9);t.name="Help",t.path="type",t.factory=n},function(e,t,r){e.exports=[r(404),r(425),r(444),r(457),r(461),r(465),r(468),r(472),r(485),r(495),r(498),r(506),r(508),r(514),r(516),r(541),r(543)]},function(e,t,r){e.exports=[r(405),r(118),r(409),r(124),r(125),r(130),r(423),r(131)]},function(e,t,r){"use strict";function n(e,t,n,i){function a(e){if("log"!=e.name&&"nthRoot"!=e.name||2!=e.args.length){for(var t=0;t<e.args.length;++t)e.args[t]=new u(0);throw e.compile().eval(),new Error("Expected TypeError, but none found")}}var o=n(r(39)),s=n(r(118)),u=n(r(53)),c=n(r(54)),f=n(r(62)),l=n(r(63)),p=n(r(40)),h=i("derivative",{"Node, SymbolNode, Object":function(e,t,r){var n={};d(n,e,t.name);var i=v(e,n);return r.simplify?s(i):i},"Node, SymbolNode":function(e,t){return h(e,t,{simplify:!0})},"string, SymbolNode":function(e,t){return h(o(e),t)},"string, SymbolNode, Object":function(e,t,r){return h(o(e),t,r)},"string, string":function(e,t){return h(o(e),o(t))},"string, string, Object":function(e,t,r){return h(o(e),o(t),r)},"Node, string":function(e,t){return h(e,o(t))},"Node, string, Object":function(e,t,r){return h(e,o(t),r)}});h._simplify=!0,h.toTex=function(e){return m.apply(null,e.args)};var m=i("_derivTex",{"Node, SymbolNode":function(e,t){return m(e.toString(),t.toString(),1)},"Node, SymbolNode, ConstantNode":function(e,t,r){return m(e.toString(),t.name,r.value)},"string, string, number":function(e,t,r){var n;return n=1===r?"{d\\over d"+t+"}":"{d^{"+r+"}\\over d"+t+"^{"+r+"}}",n+"\\left["+e+"\\right]"}}),d=i("constTag",{"Object, ConstantNode, string":function(e,t){return e[t]=!0},"Object, SymbolNode, string":function(e,t,r){return t.name!=r&&(e[t]=!0)},"Object, ParenthesisNode, string":function(e,t,r){return d(e,t.content,r)},"Object, FunctionAssignmentNode, string":function(e,t,r){return t.params.indexOf(r)==-1?e[t]=!0:d(e,t.expr,r)},"Object, FunctionNode | OperatorNode, string":function(e,t,r){if(0!=t.args.length){for(var n=d(e,t.args[0],r),i=1;i<t.args.length;++i)n=d(e,t.args[i],r)&&n;if(n)return e[t]=!0}return!1}}),v=i("_derivative",{"ConstantNode, Object":function(e){return new u("0",e.valueType)},"SymbolNode, Object":function(e,r){return void 0!==r[e]?new u("0",t.number):new u("1",t.number)},"ParenthesisNode, Object":function(e,t){return new l(v(e.content,t))},"FunctionAssignmentNode, Object":function(e,r){return void 0!==r[e]?new u("0",t.number):v(e.expr,r)},"FunctionNode, Object":function(e,r){if(1!=e.args.length&&a(e),void 0!==r[e])return new u("0",t.number);var n,i,o=e.args[0],s=!1,l=!1;switch(e.name){case"cbrt":s=!0,i=new f("*","multiply",[new u("3",t.number),new f("^","pow",[o,new f("/","divide",[new u("2",t.number),new u("3",t.number)])])]);break;case"sqrt":case"nthRoot":if(1==e.args.length){s=!0,i=new f("*","multiply",[new u("2",t.number),new c("sqrt",[o])]);break}return n=new f("/","divide",[new u("1",t.number),e.args[1]]),r[n]=r[e.args[1]],v(new f("^","pow",[o,n]),r);case"log10":n=new u("10",t.number);case"log":if(n||1!=e.args.length){if(!n&&void 0===r[e.args[1]])return v(new f("/","divide",[new c("log",[o]),new c("log",[e.args[1]])]),r);i=new f("*","multiply",[o.clone(),new c("log",[n||e.args[1]])])}else i=o.clone();s=!0;break;case"exp":i=new c("exp",[o.clone()]);break;case"sin":i=new c("cos",[o.clone()]);break;case"cos":i=new f("-","unaryMinus",[new c("sin",[o.clone()])]);break;case"tan":i=new f("^","pow",[new c("sec",[o.clone()]),new u("2",t.number)]);break;case"sec":i=new f("*","multiply",[e,new c("tan",[o.clone()])]);break;case"csc":l=!0,i=new f("*","multiply",[e,new c("cot",[o.clone()])]);break;case"cot":l=!0,i=new f("^","pow",[new c("csc",[o.clone()]),new u("2",t.number)]);break;case"asin":s=!0,i=new c("sqrt",[new f("-","subtract",[new u("1",t.number),new f("^","pow",[o.clone(),new u("2",t.number)])])]);break;case"acos":s=!0,l=!0,i=new c("sqrt",[new f("-","subtract",[new u("1",t.number),new f("^","pow",[o.clone(),new u("2",t.number)])])]);break;case"atan":s=!0,i=new f("+","add",[new f("^","pow",[o.clone(),new u("2",t.number)]),new u("1",t.number)]);break;case"asec":s=!0,i=new f("*","multiply",[new c("abs",[o.clone()]),new c("sqrt",[new f("-","subtract",[new f("^","pow",[o.clone(),new u("2",t.number)]),new u("1",t.number)])])]);break;case"acsc":s=!0,l=!0,i=new f("*","multiply",[new c("abs",[o.clone()]),new c("sqrt",[new f("-","subtract",[new f("^","pow",[o.clone(),new u("2",t.number)]),new u("1",t.number)])])]);break;case"acot":s=!0,l=!0,i=new f("+","add",[new f("^","pow",[o.clone(),new u("2",t.number)]),new u("1",t.number)]);break;case"sinh":i=new c("cosh",[o.clone()]);break;case"cosh":i=new c("sinh",[o.clone()]);break;case"tanh":i=new f("^","pow",[new c("sech",[o.clone()]),new u("2",t.number)]);break;case"sech":l=!0,i=new f("*","multiply",[e,new c("tanh",[o.clone()])]);break;case"csch":l=!0,i=new f("*","multiply",[e,new c("coth",[o.clone()])]);break;case"coth":l=!0,i=new f("^","pow",[new c("csch",[o.clone()]),new u("2",t.number)]);break;case"asinh":s=!0,i=new c("sqrt",[new f("+","add",[new f("^","pow",[o.clone(),new u("2",t.number)]),new u("1",t.number)])]);break;case"acosh":s=!0,i=new c("sqrt",[new f("-","subtract",[new f("^","pow",[o.clone(),new u("2",t.number)]),new u("1",t.number)])]);break;case"atanh":s=!0,i=new f("-","subtract",[new u("1",t.number),new f("^","pow",[o.clone(),new u("2",t.number)])]);break;case"asech":s=!0,l=!0,i=new f("*","multiply",[o.clone(),new c("sqrt",[new f("-","subtract",[new u("1",t.number),new f("^","pow",[o.clone(),new u("2",t.number)])])])]);break;case"acsch":s=!0,l=!0,i=new f("*","multiply",[new c("abs",[o.clone()]),new c("sqrt",[new f("+","add",[new f("^","pow",[o.clone(),new u("2",t.number)]),new u("1",t.number)])])]);break;case"acoth":s=!0,l=!0,i=new f("-","subtract",[new u("1",t.number),new f("^","pow",[o.clone(),new u("2",t.number)])]);break;case"abs":i=new f("/","divide",[new c(new p("abs"),[o.clone()]),o.clone()]);break;case"gamma":default:throw new Error('Function "'+e.name+'" not supported by derivative')}var h,m;s?(h="/",m="divide"):(h="*",m="multiply");var d=v(o,r);return l&&(d=new f("-","unaryMinus",[d])),new f(h,m,[d,i])},"OperatorNode, Object":function(r,n){if(void 0!==n[r])return new u("0",t.number);var i=r.args[0],a=r.args[1];switch(r.op){case"+":case"-":return 1==r.args.length?new f(r.op,r.fn,[v(i,n)]):new f(r.op,r.fn,[v(i,n),v(a,n)]);case"*":if(void 0!==n[i]||void 0!==n[a]){var o=void 0!==n[i]?[i.clone(),v(a,n)]:[a.clone(),v(i,n)];return new f("*","multiply",o)}return new f("+","add",[new f("*","multiply",[v(i,n),a.clone()]),new f("*","multiply",[i.clone(),v(a,n)])]);case"/":return void 0!==n[a]?new f("/","divide",[v(i,n),a]):void 0!==n[i]?new f("*","multiply",[new f("-","unaryMinus",[i]),new f("/","divide",[v(a,n),new f("^","pow",[a.clone(),new u("2",t.number)])])]):new f("/","divide",[new f("-","subtract",[new f("*","multiply",[v(i,n),a.clone()]),new f("*","multiply",[i.clone(),v(a,n)])]),new f("^","pow",[a.clone(),new u("2",t.number)])]);case"^":if(void 0!==n[i])return!e.isConstantNode(i)||"0"!==i.value&&"1"!==i.value?new f("*","multiply",[r,new f("*","multiply",[new c("log",[i.clone()]),v(a.clone(),n)])]):new u("0",t.number);if(void 0!==n[a]){if(e.isConstantNode(a)){var s=a.value;if("0"===s)return new u("0",t.number);if("1"===s)return v(i,n)}var l=new f("^","pow",[i.clone(),new f("-","subtract",[a,new u("1",t.number)])]);return new f("*","multiply",[a.clone(),new f("*","multiply",[v(i,n),l])])}return new f("*","multiply",[new f("^","pow",[i.clone(),a.clone()]),new f("+","add",[new f("*","multiply",[v(i,n),new f("/","divide",[a.clone(),i.clone()])]),new f("*","multiply",[v(a,n),new c("log",[i.clone()])])])]);case"%":case"mod":default:throw new Error('Operator "'+r.op+'" not supported by derivative')}}});return h}t.name="derivative",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i,a){function o(t){var r=p(t);return e.isNode(r)?r:w(r)}function s(t,r){try{return b(a[t].apply(null,r))}catch(n){return r=r.map(function(t){return e.isFraction(t)?t.valueOf():t}),b(a[t].apply(null,r))}}function u(e){if(isFinite(e)){var t=a.fraction(e);if(t.valueOf()===e)return t}return e}function c(e){return new x("-","unaryMinus",[e])}function f(e){var t,r=e.s*e.n;return t=r<0?new x("-","unaryMinus",[new y(-r)]):new y(r),1===e.d?t:new x("/","divide",[t,new y(e.d)])}function l(t,r,n){return r.reduce(function(r,i){if(e.isNode(r)||e.isNode(i))e.isNode(r)?e.isNode(i)||(i=w(i)):r=w(r);else{try{return s(t,[r,i])}catch(e){}r=w(r),i=w(i)}return n([r,i])})}function p(t){switch(t.type){case"SymbolNode":return t;case"ConstantNode":return"number"===t.valueType?b(t.value):t;case"FunctionNode":if(a[t.name]&&a[t.name].rawArgs)return t;case"OperatorNode":var r,n,i=t.fn.toString(),o=g(t);if(1===t.args.length)r=[p(t.args[0])],n=e.isNode(r[0])?o(r):s(i,r);else if(d(t))if(r=v(t),r=r.map(p),m(i)){for(var u=[],c=[],f=0;f<r.length;f++)e.isNode(r[f])?c.push(r[f]):u.push(r[f]);u.length>1?(n=l(i,u,o),c.unshift(n),n=l(i,c,o)):n=l(i,r,o)}else n=l(i,r,o);else r=t.args.map(p),n=l(i,r,o);return n;case"ParenthesisNode":return p(t.content);case"AccessorNode":case"ArrayNode":case"AssignmentNode":case"BlockNode":case"FunctionAssignmentNode":case"IndexNode":case"ObjectNode":case"RangeNode":case"UpdateNode":case"ConditionalNode":default:throw"Unimplemented node type in simplifyConstant: "+t.type}}var h=n(r(119)),m=h.isCommutative,d=h.isAssociative,v=h.allChildren,g=h.createMakeNodeFunction,y=a.expression.node.ConstantNode,x=a.expression.node.OperatorNode,w=i({Fraction:f,number:function(e){return e<0?c(new y(-e)):new y(e)},BigNumber:function(e){return e<0?c(new y(e.negated().toString(),"number")):new y(e.toString(),"number")},Complex:function(e){throw"Cannot convert Complex number to Node"}}),b=i({string:function(e){return"BigNumber"===t.number?a.bignumber(e):"Fraction"===t.number?a.fraction(e):u(parseFloat(e))},Fraction:function(e){return e},BigNumber:function(e){return e},number:function(e){return u(e)},Complex:function(e){return 0!==e.im?e:u(e.re)}});return o}r(3).digits;t.math=!0,t.name="simplifyConstant",t.path="algebra.simplify",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n,i){function a(t){if(e.isOperatorNode(t)&&t.args.length<=2){var r=a(t.args[0]),n=t.args[1]&&a(t.args[1]);if("+"===t.op){if(1===t.args.length)return t.args[0];if(e.isConstantNode(r)){if("0"===r.value)return n;if(e.isConstantNode(n)&&r.value&&r.value.length<5&&n.value&&n.value.length<5)return new o(Number(r.value)+Number(n.value))}return e.isConstantNode(n)&&"0"===n.value?r:2===t.args.length&&e.isOperatorNode(n)&&"-"===n.op&&"unaryMinus"===n.fn?new s("-","subtract",[r,n.args[0]]):new s(t.op,t.fn,n?[r,n]:[r])}if("-"===t.op){if(e.isConstantNode(r)&&n){if(e.isConstantNode(n)&&r.value&&r.value.length<5&&n.value&&n.value.length<5)return new o(Number(r.value)-Number(n.value));if("0"===r.value)return new s("-","unaryMinus",[n])}if("subtract"===t.fn&&2===t.args.length)return e.isConstantNode(n)&&"0"===n.value?r:e.isOperatorNode(n)&&"unaryMinus"===n.fn?a(new s("+","add",[r,n.args[0]])):new s(t.op,t.fn,[r,n]);if("unaryMinus"===t.fn)return e.isOperatorNode(r)&&"unaryMinus"===r.fn?r.args[0]:new s(t.op,t.fn,[r]);throw new Error("never happens")}if("*"===t.op){if(e.isConstantNode(r)){if("0"===r.value)return c;if("1"===r.value)return n;if(e.isConstantNode(n)&&r.value&&r.value.length<5&&n.value&&n.value.length<5)return new o(Number(r.value)*Number(n.value))}if(e.isConstantNode(n)){if("0"===n.value)return c;if("1"===n.value)return r;if(e.isOperatorNode(r)&&r.op===t.op){var l=r.args[0];if(e.isConstantNode(l)&&n.value&&n.value.length<5&&l.value&&l.value.length<5){var p=new o(Number(r.args[0].value)*Number(n.value));return new s(t.op,t.fn,[p,r.args[1]])}}return new s(t.op,t.fn,[n,r])}return new s(t.op,t.fn,[r,n])}if("/"===t.op){if(e.isConstantNode(r)){if("0"===r.value)return c;if(e.isConstantNode(n)&&r.value&&r.value.length<5&&("1"===n.value||"2"===n.value||"4"===n.value))return new o(Number(r.value)/Number(n.value))}return new s(t.op,t.fn,[r,n])}if("^"===t.op){if(e.isConstantNode(n)){if("0"===n.value)return f;if("1"===n.value)return r;if(e.isConstantNode(n)&&r.value&&r.value.length<5&&n.value&&n.value.length<2)return new o(i.pow(Number(r.value),Number(n.value)))}return new s(t.op,t.fn,[r,n])}}else{if(e.isParenthesisNode(t)){var h=a(t.content);return e.isParenthesisNode(h)||e.isSymbolNode(h)||e.isConstantNode(h)?h:new ParenthesisNode(h)}if(e.isFunctionNode(t)){var m=t.args.map(a);return 1===m.length&&e.isParenthesisNode(m[0])&&(m[0]=m[0].content),new u(a(t.fn),m)}}return t}var o=i.expression.node.ConstantNode,s=i.expression.node.OperatorNode,u=i.expression.node.FunctionNode,c=new o(0),f=new o(1);return a}t.math=!0,t.name="simplifyCore",t.path="algebra.simplify",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n,i){function a(t,r){if(!r)return t;if(e.isSymbolNode(t)){var n=r[t.name];if(n instanceof o)return a(n,r);if("number"==typeof n)return i.parse(String(n))}else{if(e.isOperatorNode(t)){var f=t.args.map(function(e){return a(e,r)});return new s(t.op,t.fn,f)}if(e.isParenthesisNode(t))return new c(a(t.content,r));if(e.isFunctionNode(t)){var f=t.args.map(function(e){return a(e,r)});return new u(t.name,f)}}return t}var o=i.expression.node.Node,s=i.expression.node.OperatorNode,u=i.expression.node.FunctionNode,c=i.expression.node.ParenthesisNode;return a}t.math=!0,t.name="resolve",t.path="algebra.simplify",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(0)),o=n(r(38)),s=n(r(61)),u=(n(r(120)),n(r(82))),c=(n(r(55)),n(r(121))),f=(n(r(29)),n(r(122))),l=n(r(56)),p=n(r(123)),h=n(r(37)),m=n(r(20)),d=n(r(19)),v=n(r(23)),g=n(r(21)),y=i("qr",{DenseMatrix:function(e){return x(e)},SparseMatrix:function(e){return w(e)},Array:function(e){var t=a(e),r=x(t);return{Q:r.Q.valueOf(),R:r.R.valueOf()}}}),x=function(e){var t,r,n,i=e._size[0],a=e._size[1],y=s([i],"dense"),x=y._data,w=e.clone(),b=w._data,N=o([i],"");for(n=0;n<Math.min(a,i);++n){var E=b[n][n],M=h(f(E)),A=p(M),O=0;for(t=n;t<i;t++)O=m(O,v(b[t][n],p(b[t][n])));var T=v(M,l(O));if(!u(T)){var _=g(E,T);for(N[n]=1,t=n+1;t<i;t++)N[t]=d(b[t][n],_);var S,C=h(p(d(_,T)));for(r=n;r<a;r++){for(S=0,t=n;t<i;t++)S=m(S,v(p(N[t]),b[t][r]));for(S=v(S,C),t=n;t<i;t++)b[t][r]=v(g(b[t][r],v(N[t],S)),A)}for(t=0;t<i;t++){for(S=0,r=n;r<i;r++)S=m(S,v(x[t][r],N[r]));for(S=v(S,C),r=n;r<i;++r)x[t][r]=d(g(x[t][r],v(S,p(N[r]))),A)}}}for(t=0;t<i;++t)for(r=0;r<t&&r<a;++r){if(c(0,d(b[t][r],1e5)))throw new Error("math.qr(): unknown error - R is not lower triangular (element ("+t+", "+r+")  = "+b[t][r]+")");b[t][r]=v(b[t][r],0)}return{Q:y,R:w,toString:function(){return"Q: "+this.Q.toString()+"\nR: "+this.R.toString()}}},w=function(e){throw new Error("qr not implemented for sparse matrices yet")};return y}t.name="qr",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(411)),a=n(r(413)),o=n(r(414)),s=n(r(415)),u=n(r(416)),c=function(e,t,r){var n,c=t._ptr,l=t._size,p=l[1],h={};if(h.q=i(e,t),e&&!h.q)return null;if(r){var m=e?a(t,null,h.q,0):t;h.parent=o(m,1);var d=s(h.parent,p);if(h.cp=u(m,h.parent,d,1),m&&h.parent&&h.cp&&f(m,h))for(h.unz=0,n=0;n<p;n++)h.unz+=h.cp[n]}else h.unz=4*c[p]+p,h.lnz=h.unz;return h},f=function(e,t){var r=e._ptr,n=e._index,i=e._size,a=i[0],o=i[1];t.pinv=[],t.leftmost=[];var s,u,c,f,l,p=t.parent,h=t.pinv,m=t.leftmost,d=[],v=0,g=a,y=a+o,x=a+2*o;for(u=0;u<o;u++)d[g+u]=-1,d[y+u]=-1,d[x+u]=0;for(s=0;s<a;s++)m[s]=-1;for(u=o-1;u>=0;u--)for(f=r[u],l=r[u+1],c=f;c<l;c++)m[n[c]]=u;for(s=a-1;s>=0;s--)h[s]=-1,u=m[s],u!=-1&&(0===d[x+u]++&&(d[y+u]=s),d[v+s]=d[g+u],d[g+u]=s);for(t.lnz=0,t.m2=a,u=0;u<o;u++)if(s=d[g+u],t.lnz++,s<0&&(s=t.m2++),h[s]=u,!(--x[u]<=0)){t.lnz+=d[x+u];var w=p[u];w!=-1&&(0===d[x+w]&&(d[y+w]=d[y+u]),d[v+d[y+u]]=d[g+w],d[g+w]=d[v+s],d[x+w]+=d[x+u])}for(s=0;s<a;s++)h[s]<0&&(h[s]=u++);return!0};return c}t.name="cs_sqr",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(83)),a=n(r(412)),o=n(r(126)),s=n(r(18)),u=n(r(12)),c=n(r(67)),f=function(e,t){if(!t||e<=0||e>3)return null;var r=t._size,n=r[0],s=r[1],u=0,c=Math.max(16,10*Math.sqrt(s));c=Math.min(s-2,c);var f=l(e,t,n,s,c);a(f,d,null);for(var v,g,y,x,w,b,N,E,M,A,O,T,_,S,C,z,k=f._index,I=f._ptr,B=I[s],P=[],R=[],U=0,q=s+1,L=2*(s+1),j=3*(s+1),F=4*(s+1),D=5*(s+1),H=6*(s+1),$=7*(s+1),G=P,Z=p(s,I,R,U,j,G,L,$,q,H,F,D),V=h(s,I,R,D,F,H,c,q,j,G,L),W=0;V<s;){for(y=-1;W<s&&(y=R[j+W])==-1;W++);R[L+y]!=-1&&(G[R[L+y]]=-1),R[j+W]=R[L+y];var Y=R[F+y],X=R[q+y];V+=X;var J=0;R[q+y]=-X;var Q=I[y],K=0===Y?Q:B,ee=K;for(x=1;x<=Y+1;x++){for(x>Y?(b=y,N=Q,E=R[U+y]-Y):(b=k[Q++],N=I[b],E=R[U+b]),w=1;w<=E;w++)v=k[N++],(M=R[q+v])<=0||(J+=M,R[q+v]=-M,k[ee++]=v,R[L+v]!=-1&&(G[R[L+v]]=G[v]),G[v]!=-1?R[L+G[v]]=R[L+v]:R[j+R[D+v]]=R[L+v]);b!=y&&(I[b]=i(y),R[H+b]=0)}for(0!==Y&&(B=ee),R[D+y]=J,I[y]=K,R[U+y]=ee-K,R[F+y]=-2,Z=m(Z,u,R,H,s),A=K;A<ee;A++)if(v=k[A],!((O=R[F+v])<=0)){M=-R[q+v];var te=Z-M;for(Q=I[v],T=I[v]+O-1;Q<=T;Q++)b=k[Q],R[H+b]>=Z?R[H+b]-=M:0!==R[H+b]&&(R[H+b]=R[D+b]+te)}for(A=K;A<ee;A++){for(v=k[A],T=I[v],_=T+R[F+v]-1,S=T,C=0,z=0,Q=T;Q<=_;Q++)if(b=k[Q],0!==R[H+b]){var re=R[H+b]-Z;re>0?(z+=re,k[S++]=b,C+=b):(I[b]=i(y),R[H+b]=0)}R[F+v]=S-T+1;var ne=S,ie=T+R[U+v];for(Q=_+1;Q<ie;Q++){g=k[Q];var ae=R[q+g];ae<=0||(z+=ae,k[S++]=g,C+=g)}0===z?(I[v]=i(y),M=-R[q+v],J-=M,X+=M,V+=M,R[q+v]=0,R[F+v]=-1):(R[D+v]=Math.min(R[D+v],z),k[S]=k[ne],k[ne]=k[T],k[T]=y,R[U+v]=S-T+1,C=(C<0?-C:C)%s,R[L+v]=R[$+C],R[$+C]=v,G[v]=C)}for(R[D+y]=J,u=Math.max(u,J),Z=m(Z+u,u,R,H,s),A=K;A<ee;A++)if(v=k[A],!(R[q+v]>=0))for(C=G[v],v=R[$+C],R[$+C]=-1;v!=-1&&R[L+v]!=-1;v=R[L+v],Z++){for(E=R[U+v],O=R[F+v],Q=I[v]+1;Q<=I[v]+E-1;Q++)R[H+k[Q]]=Z;var oe=v;for(g=R[L+v];g!=-1;){var se=R[U+g]===E&&R[F+g]===O;for(Q=I[g]+1;se&&Q<=I[g]+E-1;Q++)R[H+k[Q]]!=Z&&(se=0);se?(I[g]=i(v),R[q+v]+=R[q+g],R[q+g]=0,R[F+g]=-1,g=R[L+g],R[L+oe]=g):(oe=g,g=R[L+g])}}for(Q=K,A=K;A<ee;A++)v=k[A],(M=-R[q+v])<=0||(R[q+v]=M,z=R[D+v]+J-M,z=Math.min(z,s-V-M),R[j+z]!=-1&&(G[R[j+z]]=v),R[L+v]=R[j+z],G[v]=-1,R[j+z]=v,W=Math.min(W,z),R[D+v]=z,k[Q++]=v);R[q+y]=X,0===(R[U+y]=Q-K)&&(I[y]=-1,R[H+y]=0),0!==Y&&(B=Q)}for(v=0;v<s;v++)I[v]=i(I[v]);for(g=0;g<=s;g++)R[j+g]=-1;for(g=s;g>=0;g--)R[q+g]>0||(R[L+g]=R[j+I[g]],R[j+I[g]]=g);for(b=s;b>=0;b--)R[q+b]<=0||I[b]!=-1&&(R[L+b]=R[j+I[b]],R[j+I[b]]=b);for(y=0,v=0;v<=s;v++)I[v]==-1&&(y=o(v,y,R,j,L,P,H));return P.splice(P.length-1,1),P},l=function(e,t,r,n,i){var a=c(t);if(1===e&&n===r)return s(t,a);if(2==e){for(var o=a._index,f=a._ptr,l=0,p=0;p<r;p++){var h=f[p];if(f[p]=l,!(f[p+1]-h>i))for(var m=f[p+1];h<m;h++)o[l++]=o[h]}return f[r]=l,t=c(a),u(a,t)}return u(a,t)},p=function(e,t,r,n,i,a,o,s,u,c,f,l){for(var p=0;p<e;p++)r[n+p]=t[p+1]-t[p];r[n+e]=0;for(var h=0;h<=e;h++)r[i+h]=-1,a[h]=-1,r[o+h]=-1,r[s+h]=-1,r[u+h]=1,r[c+h]=1,r[f+h]=0,r[l+h]=r[n+h];var d=m(0,0,r,c,e);return r[f+e]=-2,t[e]=-1,r[c+e]=0,d},h=function(e,t,r,n,a,o,s,u,c,f,l){for(var p=0,h=0;h<e;h++){var m=r[n+h];if(0===m)r[a+h]=-2,p++,t[h]=-1,r[o+h]=0;else if(m>s)r[u+h]=0,r[a+h]=-1,p++,t[h]=i(e),r[u+e]++;else{var d=r[c+m];d!=-1&&(f[d]=h),r[l+h]=r[c+m],r[c+m]=h}}return p},m=function(e,t,r,n,i){if(e<2||e+t<0){for(var a=0;a<i;a++)0!==r[n+a]&&(r[n+a]=1);e=2}return e},d=function(e,t){return e!=t};return f}t.name="cs_amd",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(){var e=function(e,t,r){for(var n=e._values,i=e._index,a=e._ptr,o=e._size,s=o[1],u=0,c=0;c<s;c++){var f=a[c];for(a[c]=u;f<a[c+1];f++)t(i[f],c,n?n[f]:1,r)&&(i[u]=i[f],n&&(n[u]=n[f]),u++)}return a[s]=u,i.splice(u,i.length-u),n&&n.splice(u,n.length-u),u};return e}t.name="cs_fkeep",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e){var t=e.SparseMatrix,r=function(e,r,n,i){for(var a=e._values,o=e._index,s=e._ptr,u=e._size,c=e._datatype,f=u[0],l=u[1],p=i&&e._values?[]:null,h=[],m=[],d=0,v=0;v<l;v++){m[v]=d;for(var g=n?n[v]:v,y=s[g],x=s[g+1],w=y;w<x;w++){var b=r?r[o[w]]:o[w];h[d]=b,p&&(p[d]=a[w]),d++}}return m[l]=d,new t({values:p,index:h,ptr:m,size:[f,l],datatype:c})};return r}t.name="cs_permute",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(){var e=function(e,t){if(!e)return null;var r,n,i=e._index,a=e._ptr,o=e._size,s=o[0],u=o[1],c=[],f=[],l=0,p=u;if(t)for(r=0;r<s;r++)f[p+r]=-1;for(var h=0;h<u;h++){c[h]=-1,f[l+h]=-1;for(var m=a[h],d=a[h+1],v=m;v<d;v++){var g=i[v];for(r=t?f[p+g]:g;r!=-1&&r<h;r=n)n=f[l+r],f[l+r]=h,n==-1&&(c[r]=h);t&&(f[p+g]=h)}}return c};return e}t.name="cs_etree",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(126)),a=function(e,t){if(!e)return null;var r,n=0,a=[],o=[],s=0,u=t,c=2*t;for(r=0;r<t;r++)o[s+r]=-1;for(r=t-1;r>=0;r--)e[r]!=-1&&(o[u+r]=o[s+e[r]],o[s+e[r]]=r);for(r=0;r<t;r++)e[r]==-1&&(n=i(r,n,o,s,u,a,c));return a};return a}t.name="cs_post",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(67)),a=n(r(417)),o=function(e,t,r,n){if(!e||!t||!r)return null;var o,s,u,c,f,l,p,h=e._size,m=h[0],d=h[1],v=4*d+(n?d+m+1:0),g=[],y=0,x=d,w=2*d,b=3*d,N=4*d,E=5*d+1;for(u=0;u<v;u++)g[u]=-1;var M=[],A=i(e),O=A._index,T=A._ptr;for(u=0;u<d;u++)for(s=r[u],M[s]=g[b+s]==-1?1:0;s!=-1&&g[b+s]==-1;s=t[s])g[b+s]=u;if(n){for(u=0;u<d;u++)g[r[u]]=u;for(o=0;o<m;o++){for(u=d,l=T[o],p=T[o+1],f=l;f<p;f++)u=Math.min(u,g[O[f]]);g[E+o]=g[N+u],g[N+u]=o}}for(o=0;o<d;o++)g[y+o]=o;for(u=0;u<d;u++){for(s=r[u],t[s]!=-1&&M[t[s]]--,c=n?g[N+u]:s;c!=-1;c=n?g[E+c]:-1)for(f=T[c];f<T[c+1];f++){o=O[f];var _=a(o,s,g,b,x,w,y);_.jleaf>=1&&M[s]++,2==_.jleaf&&M[_.q]--}t[s]!=-1&&(g[y+s]=t[s])}for(s=0;s<d;s++)t[s]!=-1&&(M[t[s]]+=M[s]);return M};return o}t.name="cs_counts",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(){var e=function(e,t,r,n,i,a,o){var s,u,c,f,l=0;if(e<=t||r[n+t]<=r[i+e])return-1;if(r[i+e]=r[n+t],c=r[a+e],r[a+e]=t,c===-1)l=1,f=e;else{for(l=2,f=c;f!=r[o+f];f=r[o+f]);for(s=c;s!=f;s=u)u=r[o+s],r[o+s]=f}return{jleaf:l,q:f}};return e}t.name="cs_leaf",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(29)),a=n(r(19)),o=n(r(12)),s=n(r(34)),u=n(r(127)),c=n(r(419)),f=e.SparseMatrix,l=function(e,t,r){if(!e)return null;var n,l=e._size,p=l[1],h=100,m=100;t&&(n=t.q,h=t.lnz||h,m=t.unz||m);var d,v,g=[],y=[],x=[],w=new f({values:g,index:y,ptr:x,size:[p,p]}),b=[],N=[],E=[],M=new f({values:b,index:N,ptr:E,size:[p,p]}),A=[],O=[],T=[];for(d=0;d<p;d++)O[d]=0,A[d]=-1,x[d+1]=0;h=0,m=0;for(var _=0;_<p;_++){x[_]=h,E[_]=m;var S=n?n[_]:_,C=c(w,e,S,T,O,A,1),z=-1,k=-1;for(v=C;v<p;v++)if(d=T[v],A[d]<0){var I=i(O[d]);s(I,k)&&(k=I,z=d)}else N[m]=A[d],b[m++]=O[d];if(z==-1||k<=0)return null;A[S]<0&&u(i(O[S]),o(k,r))&&(z=S);var B=O[z];for(N[m]=_,b[m++]=B,A[z]=_,y[h]=z,g[h++]=1,v=C;v<p;v++)d=T[v],A[d]<0&&(y[h]=d,g[h++]=a(O[d],B)),O[d]=0}for(x[p]=h,E[p]=m,v=0;v<h;v++)y[v]=A[y[v]];return g.splice(h,g.length-h),y.splice(h,y.length-h),b.splice(m,b.length-m),N.splice(m,N.length-m),{L:w,U:M,pinv:A}};return l}t.name="cs_lu",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(19)),a=n(r(12)),o=n(r(21)),s=n(r(420)),u=function(e,t,r,n,u,c,f){var l,p,h,m,d=e._values,v=e._index,g=e._ptr,y=e._size,x=y[1],w=t._values,b=t._index,N=t._ptr,E=s(e,t,r,n,c);for(l=E;l<x;l++)u[n[l]]=0;for(p=N[r],h=N[r+1],l=p;l<h;l++)u[b[l]]=w[l];for(var M=E;M<x;M++){var A=n[M],O=c?c[A]:A;if(!(O<0))for(p=g[O],h=g[O+1],u[A]=i(u[A],d[f?p:h-1]),l=f?p+1:p,m=f?h:h-1;l<m;l++){var T=v[l];u[T]=o(u[T],a(d[l],u[A]))}}return E};return u}t.name="cs_spsolve",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(421)),a=n(r(128)),o=n(r(129)),s=function(e,t,r,n,s){var u,c,f,l=e._ptr,p=e._size,h=t._index,m=t._ptr,d=p[1],v=d;for(c=m[r],f=m[r+1],u=c;u<f;u++){var g=h[u];a(l,g)||(v=i(g,e,v,n,s))}for(u=v;u<d;u++)o(l,n[u]);return v};return s}t.name="cs_reach",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(128)),a=n(r(129)),o=n(r(422)),s=function(e,t,r,n,s){var u,c,f,l=t._index,p=t._ptr,h=t._size,m=h[1],d=0;for(n[0]=e;d>=0;){e=n[d];var v=s?s[e]:e;i(p,e)||(a(p,e),n[m+d]=v<0?0:o(p[v]));var g=1;for(c=n[m+d],f=v<0?0:o(p[v+1]);c<f;c++)if(u=l[c],!i(p,u)){n[m+d]=c,n[++d]=u,g=0;break}g&&(d--,n[--r]=e)}return r};return s}t.name="cs_dfs",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n){var i=n(r(83)),a=function(e){return e<0?i(e):e};return a}t.name="cs_unflip",t.path="sparse",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(0)),s=n(r(124)),u=n(r(125)),c=n(r(424)),f=n(r(84)),l=n(r(131)),p=n(r(130)),h=a("lusolve",{"Array, Array | Matrix":function(e,t){e=o(e);var r=s(e),n=d(r.L,r.U,r.p,null,t);return n.valueOf()},"DenseMatrix, Array | Matrix":function(e,t){var r=s(e);return d(r.L,r.U,r.p,null,t)},"SparseMatrix, Array | Matrix":function(e,t){var r=s(e);return d(r.L,r.U,r.p,null,t)},"SparseMatrix, Array | Matrix, number, number":function(e,t,r,n){var i=u(e,r,n);return d(i.L,i.U,i.p,i.q,t)},"Object, Array | Matrix":function(e,t){return d(e.L,e.U,e.p,e.q,t)}}),m=function(t){if(e.isMatrix(t))return t;if(i(t))return o(t);throw new TypeError("Invalid Matrix LU decomposition")},d=function(e,t,r,n,i){e=m(e),t=m(t),i=f(e,i,!1),r&&(i._data=c(r,i._data));var a=p(e,i),o=l(t,a);return n&&(o._data=c(n,o._data)),o};return h}var i=Array.isArray;t.name="lusolve",t.factory=n},function(e,t,r){"use strict";function n(){var e=function(e,t,r){var n,r=t.length,i=[];if(e)for(n=0;n<r;n++)i[e[n]]=t[n];else for(n=0;n<r;n++)i[n]=t[n];return i};return e}t.name="cs_ipvec",t.path="sparse",t.factory=n},function(e,t,r){e.exports=[r(29),r(18),r(20),r(426),r(427),r(428),r(47),r(132),r(429),r(430),r(431),r(96),r(432),r(433),r(434),r(435),r(134),r(437),r(438),r(12),r(439),r(440),r(45),r(97),r(122),r(56),r(441),r(21),r(37),r(442),r(443)]},function(e,t,r){"use strict";function n(e,t,n,o){function s(r,n){var i=r.arg()/3,o=r.abs(),s=new e.Complex(a(o),0).mul(new e.Complex(0,i).exp());if(n){var u=[s,new e.Complex(a(o),0).mul(new e.Complex(0,i+2*Math.PI/3).exp()),new e.Complex(a(o),0).mul(new e.Complex(0,i-2*Math.PI/3).exp())];return"Array"===t.matrix?u:l(u)}return s}function u(t){if(t.value&&e.isComplex(t.value)){var r=t.clone();return r.value=1,r=r.pow(1/3),r.value=s(t.value),r}var n=f(t.value);n&&(t.value=c(t.value));var i;i=e.isBigNumber(t.value)?new e.BigNumber(1).div(3):e.isFraction(t.value)?new e.Fraction(1,3):1/3;var r=t.pow(i);return n&&(r.value=c(r.value)),r}var c=n(r(37)),f=n(r(57)),l=n(r(0)),p=o("cbrt",{number:a,Complex:s,"Complex, boolean":s,BigNumber:function(e){return e.cbrt();
/src/dist/math.min.js-52-},Unit:u,"Array | Matrix":function(e){return i(e,p,!0)}});return p.toTex={1:"\\sqrt[3]{${args[0]}}"},p}var i=r(1),a=Math.cbrt||function(e){if(0===e)return e;var t,r=e<0;return r&&(e=-e),isFinite(e)?(t=Math.exp(Math.log(e)/3),t=(e/(t*t)+2*t)/3):t=e,r?-t:t};t.name="cbrt",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("ceil",{number:Math.ceil,Complex:function(e){return e.ceil()},BigNumber:function(e){return e.ceil()},Fraction:function(e){return e.ceil()},"Array | Matrix":function(e){return i(e,a,!0)}});return a.toTex={1:"\\left\\lceil${args[0]}\\right\\rceil"},a}var i=r(1);t.name="ceil",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("cube",{number:function(e){return e*e*e},Complex:function(e){return e.mul(e).mul(e)},BigNumber:function(e){return e.times(e).times(e)},Fraction:function(e){return e.pow(3)},"Array | Matrix":function(e){return i(e,a,!0)},Unit:function(e){return e.pow(3)}});return a.toTex={1:"\\left(${args[0]}\\right)^3"},a}var i=r(1);t.name="cube",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(0)),o=n(r(23)),s=r(4),u=n(r(24)),c=n(r(133)),f=n(r(17)),l=n(r(8)),p=n(r(6)),h=i("dotMultiply",{"any, any":o,"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=c(e,t,o,!1);break;default:r=u(t,e,o,!0)}break;default:switch(t.storage()){case"sparse":r=u(e,t,o,!1);break;default:r=l(e,t,o)}}return r},"Array, Array":function(e,t){return h(a(e),a(t)).valueOf()},"Array, Matrix":function(e,t){return h(a(e),t)},"Matrix, Array":function(e,t){return h(e,a(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=f(e,t,o,!1);break;default:r=p(e,t,o,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=f(t,e,o,!0);break;default:r=p(t,e,o,!0)}return r},"Array, any":function(e,t){return p(a(e),t,o,!1).valueOf()},"any, Array":function(e,t){return p(a(t),e,o,!0).valueOf()}});return h.toTex={2:"\\left(${args[0]}"+s.operators.dotMultiply+"${args[1]}\\right)"},h}t.name="dotMultiply",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(0)),o=n(r(45)),s=r(4),u=n(r(15)),c=n(r(26)),f=n(r(17)),l=n(r(16)),p=n(r(8)),h=n(r(6)),m=i("dotPow",{"any, any":o,"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=c(e,t,o,!1);break;default:r=u(t,e,o,!0)}break;default:switch(t.storage()){case"sparse":r=u(e,t,o,!1);break;default:r=p(e,t,o)}}return r},"Array, Array":function(e,t){return m(a(e),a(t)).valueOf()},"Array, Matrix":function(e,t){return m(a(e),t)},"Matrix, Array":function(e,t){return m(e,a(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=f(e,t,m,!1);break;default:r=h(e,t,m,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=l(t,e,m,!0);break;default:r=h(t,e,m,!0)}return r},"Array, any":function(e,t){return h(a(e),t,m,!1).valueOf()},"any, Array":function(e,t){return h(a(t),e,m,!0).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+s.operators.dotPow+"${args[1]}\\right)"},m}t.name="dotPow",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("exp",{number:Math.exp,Complex:function(e){return e.exp()},BigNumber:function(e){return e.exp()},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\exp\\left(${args[0]}\\right)"},a}var i=r(1);t.name="exp",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("floor",{number:Math.floor,Complex:function(e){return e.floor()},BigNumber:function(e){return e.floor()},Fraction:function(e){return e.floor()},"Array | Matrix":function(e){return i(e,a,!0)}});return a.toTex={1:"\\left\\lfloor${args[0]}\\right\\rfloor"},a}var i=r(1);t.name="floor",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(t,r){if(!t.isInt()||!r.isInt())throw new Error("Parameters in function gcd must be integer numbers");for(var n=new e.BigNumber(0);!r.isZero();){var i=t.mod(r);t=r,r=i}return t.lt(n)?t.neg():t}var s=n(r(0)),u=n(r(33)),c=n(r(73)),f=n(r(36)),l=n(r(8)),p=n(r(6)),h=a("gcd",{"number, number":i,"BigNumber, BigNumber":o,"Fraction, Fraction":function(e,t){return e.gcd(t)},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=c(e,t,h);break;default:r=u(t,e,h,!0)}break;default:switch(t.storage()){case"sparse":r=u(e,t,h,!1);break;default:r=l(e,t,h)}}return r},"Array, Array":function(e,t){return h(s(e),s(t)).valueOf()},"Array, Matrix":function(e,t){return h(s(e),t)},"Matrix, Array":function(e,t){return h(e,s(t))},"Matrix, number | BigNumber":function(e,t){var r;switch(e.storage()){case"sparse":r=f(e,t,h,!1);break;default:r=p(e,t,h,!1)}return r},"number | BigNumber, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=f(t,e,h,!0);break;default:r=p(t,e,h,!0)}return r},"Array, number | BigNumber":function(e,t){return p(s(e),t,h,!1).valueOf()},"number | BigNumber, Array":function(e,t){return p(s(t),e,h,!0).valueOf()},"Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber":function(e,t,r){for(var n=h(e,t),i=0;i<r.length;i++)n=h(n,r[i]);return n}});return h.toTex="\\gcd\\left(${args}\\right)",h}function i(e,t){if(!a(e)||!a(t))throw new Error("Parameters in function gcd must be integer numbers");for(var r;0!=t;)r=e%t,e=t,t=r;return e<0?-e:e}var a=r(3).isInteger;t.name="gcd",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(e){for(var t=0,r=0,n=0;n<e.length;n++){var i=s(e[n]);p(r,i)?(t=f(t,f(c(r,i),c(r,i))),t=u(t,1),r=i):t=u(t,h(i)?f(c(i,r),c(i,r)):i)}return f(r,l(t))}var s=n(r(29)),u=n(r(20)),c=n(r(19)),f=n(r(23)),l=n(r(56)),p=n(r(44)),h=n(r(55)),m=a("hypot",{"... number | BigNumber":o,Array:function(e){return m.apply(m,i(e))},Matrix:function(e){return m.apply(m,i(e.toArray()))}});return m.toTex="\\hypot\\left(${args}\\right)",m}var i=r(2).flatten;t.name="hypot",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(t,r){if(!t.isInt()||!r.isInt())throw new Error("Parameters in function lcm must be integer numbers");if(t.isZero()||r.isZero())return new e.BigNumber(0);for(var n=t.times(r);!r.isZero();){var i=r;r=t.mod(i),t=i}return n.div(t).abs()}var s=n(r(0)),u=n(r(24)),c=n(r(68)),f=n(r(17)),l=n(r(8)),p=n(r(6)),h=a("lcm",{"number, number":i,"BigNumber, BigNumber":o,"Fraction, Fraction":function(e,t){return e.lcm(t)},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=c(e,t,h);break;default:r=u(t,e,h,!0)}break;default:switch(t.storage()){case"sparse":r=u(e,t,h,!1);break;default:r=l(e,t,h)}}return r},"Array, Array":function(e,t){return h(s(e),s(t)).valueOf()},"Array, Matrix":function(e,t){return h(s(e),t)},"Matrix, Array":function(e,t){return h(e,s(t))},"Matrix, number | BigNumber":function(e,t){var r;switch(e.storage()){case"sparse":r=f(e,t,h,!1);break;default:r=p(e,t,h,!1)}return r},"number | BigNumber, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=f(t,e,h,!0);break;default:r=p(t,e,h,!0)}return r},"Array, number | BigNumber":function(e,t){return p(s(e),t,h,!1).valueOf()},"number | BigNumber, Array":function(e,t){return p(s(t),e,h,!0).valueOf()},"Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber":function(e,t,r){for(var n=h(e,t),i=0;i<r.length;i++)n=h(n,r[i]);return n}});return h.toTex=void 0,h}function i(e,t){if(!a(e)||!a(t))throw new Error("Parameters in function lcm must be integer numbers");if(0==e||0==t)return 0;for(var r,n=e*t;0!=t;)r=t,t=e%r,e=r;return Math.abs(n/e)}var a=r(3).isInteger;t.name="lcm",t.factory=n},function(e,t,r){"use strict";e.exports=function(e,t,r,n,i,a,o,s,u,c,f){var l,p,h,m,d=e._values,v=e._index,g=e._ptr,y=o._index;if(n)for(p=g[t],h=g[t+1],l=p;l<h;l++)m=v[l],r[m]!==a?(r[m]=a,y.push(m),c?(n[m]=u?s(d[l],f):s(f,d[l]),i[m]=a):n[m]=d[l]):(n[m]=u?s(d[l],n[m]):s(n[m],d[l]),i[m]=a);else for(p=g[t],h=g[t+1],l=p;l<h;l++)m=v[l],r[m]!==a?(r[m]=a,y.push(m)):i[m]=a}},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("log10",{number:function(r){return r>=0||t.predictable?a(r):new e.Complex(r,0).log().div(Math.LN10)},Complex:function(t){return new e.Complex(t).log().div(Math.LN10)},BigNumber:function(r){return!r.isNegative()||t.predictable?r.log():new e.Complex(r.toNumber(),0).log().div(Math.LN10)},"Array | Matrix":function(e){return i(e,o)}});return o.toTex={1:"\\log_{10}\\left(${args[0]}\\right)"},o}var i=r(1),a=Math.log10||function(e){return Math.log(e)/Math.LN10};t.name="log10",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){function a(e,t){if(t>0)return e-t*Math.floor(e/t);if(0===t)return e;throw new Error("Cannot calculate mod for a negative divisor")}var o=n(r(0)),s=r(4),u=n(r(24)),c=n(r(15)),f=n(r(60)),l=n(r(17)),p=n(r(16)),h=n(r(8)),m=n(r(6)),d=i("mod",{"number, number":a,"BigNumber, BigNumber":function(e,t){return t.isZero()?e:e.mod(t)},"Fraction, Fraction":function(e,t){return e.mod(t)},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=f(e,t,d,!1);break;default:r=u(t,e,d,!0)}break;default:switch(t.storage()){case"sparse":r=c(e,t,d,!1);break;default:r=h(e,t,d)}}return r},"Array, Array":function(e,t){return d(o(e),o(t)).valueOf()},"Array, Matrix":function(e,t){return d(o(e),t)},"Matrix, Array":function(e,t){return d(e,o(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=l(e,t,d,!1);break;default:r=m(e,t,d,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=p(t,e,d,!0);break;default:r=m(t,e,d,!0)}return r},"Array, any":function(e,t){return m(o(e),t,d,!1).valueOf()},"any, Array":function(e,t){return m(o(t),e,d,!0).valueOf()}});return d.toTex={2:"\\left(${args[0]}"+s.operators.mod+"${args[1]}\\right)"},d}t.name="mod",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){function a(e,t){var r=e.size();if(1==r.length){if(t===Number.POSITIVE_INFINITY||"inf"===t){var n=0;return e.forEach(function(e){var t=o(e);p(t,n)&&(n=t)},!0),n}if(t===Number.NEGATIVE_INFINITY||"-inf"===t){var i;return e.forEach(function(e){var t=o(e);i&&!h(t,i)||(i=t)},!0),i||0}if("fro"===t)return a(e,2);if("number"==typeof t&&!isNaN(t)){if(!l(t,0)){var m=0;return e.forEach(function(e){m=s(u(o(e),t),m)},!0),u(m,1/t)}return Number.POSITIVE_INFINITY}throw new Error("Unsupported parameter value")}if(2==r.length){if(1===t){var g=[],y=0;return e.forEach(function(e,t){var r=t[1],n=s(g[r]||0,o(e));p(n,y)&&(y=n),g[r]=n},!0),y}if(t===Number.POSITIVE_INFINITY||"inf"===t){var x=[],w=0;return e.forEach(function(e,t){var r=t[0],n=s(x[r]||0,o(e));p(n,w)&&(w=n),x[r]=n},!0),w}if("fro"===t)return c(d(f(v(e),e)));if(2===t)throw new Error("Unsupported parameter value, missing implementation of matrix singular value decomposition");throw new Error("Unsupported parameter value")}}var o=n(r(29)),s=n(r(18)),u=n(r(45)),c=n(r(56)),f=n(r(12)),l=n(r(11)),p=n(r(34)),h=n(r(44)),m=n(r(0)),d=n(r(135)),v=n(r(67)),g=i("norm",{number:Math.abs,Complex:function(e){return e.abs()},BigNumber:function(e){return e.abs()},"boolean | null":function(e){return Math.abs(e)},Array:function(e){return a(m(e),2)},Matrix:function(e){return a(e,2)},"number | Complex | BigNumber | boolean | null, number | BigNumber | string":function(e){return g(e)},"Array, number | BigNumber | string":function(e,t){return a(m(e),t)},"Matrix, number | BigNumber | string":function(e,t){return a(e,t)}});return g.toTex={1:"\\left\\|${args[0]}\\right\\|",2:void 0},g}t.name="norm",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){function s(t,r){var n=e.BigNumber.precision,i=e.BigNumber.clone({precision:n+2}),a=new e.BigNumber(0),o=new i(1),s=r.isNegative();if(s&&(r=r.neg()),r.isZero())throw new Error("Root must be non-zero");if(t.isNegative()&&!r.abs().mod(2).equals(1))throw new Error("Root must be odd when a is negative.");if(t.isZero())return s?new i(1/0):0;if(!t.isFinite())return s?a:t;var u=t.abs().pow(o.div(r));return u=t.isNeg()?u.neg():u,new e.BigNumber((s?o.div(u):u).toPrecision(n))}var u=n(r(0)),c=n(r(33)),f=n(r(24)),l=n(r(68)),p=n(r(17)),h=n(r(8)),m=n(r(6)),d=o("nthRoot",{number:function(e){return i(e,2)},"number, number":i,BigNumber:function(t){return s(t,new e.BigNumber(2))},Complex:function(e){return a(e,2)},"Complex, number":a,"BigNumber, BigNumber":s,"Array | Matrix":function(e){return d(e,2)},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":if(1!==t.density())throw new Error("Root must be non-zero");r=l(e,t,d);break;default:r=f(t,e,d,!0)}break;default:switch(t.storage()){case"sparse":if(1!==t.density())throw new Error("Root must be non-zero");r=c(e,t,d,!1);break;default:r=h(e,t,d)}}return r},"Array, Array":function(e,t){return d(u(e),u(t)).valueOf()},"Array, Matrix":function(e,t){return d(u(e),t)},"Matrix, Array":function(e,t){return d(e,u(t))},"Matrix, number | BigNumber":function(e,t){var r;switch(e.storage()){case"sparse":r=p(e,t,d,!1);break;default:r=m(e,t,d,!1)}return r},"number | BigNumber, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":if(1!==t.density())throw new Error("Root must be non-zero");r=p(t,e,d,!0);break;default:r=m(t,e,d,!0)}return r},"Array, number | BigNumber":function(e,t){return d(u(e),t).valueOf()},"number | BigNumber, Array":function(e,t){return d(e,u(t)).valueOf()}});return d.toTex={2:"\\sqrt[${args[1]}]{${args[0]}}"},d}function i(e,t){var r=t<0;if(r&&(t=-t),0===t)throw new Error("Root must be non-zero");if(e<0&&Math.abs(t)%2!=1)throw new Error("Root must be odd when a is negative.");if(0==e)return r?1/0:0;if(!isFinite(e))return r?0:e;var n=Math.pow(Math.abs(e),1/t);return n=e<0?-n:n,r?1/n:n}function a(e,t){if(t<0)throw new Error("Root must be greater than zero");if(0===t)throw new Error("Root must be non-zero");if(t%1!==0)throw new Error("Root must be an integer");for(var r=e.arg(),n=e.abs(),i=[],a=Math.pow(n,1/t),o=0;o<t;o++)i.push({r:a,phi:(r+2*Math.PI*o)/t});return i}t.name="nthRoot",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("square",{number:function(e){return e*e},Complex:function(e){return e.mul(e)},BigNumber:function(e){return e.times(e)},Fraction:function(e){return e.mul(e)},"Array | Matrix":function(e){return i(e,a,!0)},Unit:function(e){return e.pow(2)}});return a.toTex={1:"\\left(${args[0]}\\right)^2"},a}var i=r(1);t.name="square",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=r(4),s=a("unaryPlus",{number:function(e){return e},Complex:function(e){return e},BigNumber:function(e){return e},Fraction:function(e){return e},Unit:function(e){return e.clone()},"Array | Matrix":function(e){return i(e,s,!0)},"boolean | string | null":function(r){return"BigNumber"==t.number?new e.BigNumber(+r):+r}});return s.toTex={1:o.operators.unaryPlus+"\\left(${args[0]}\\right)"},s}var i=r(1);t.name="unaryPlus",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(e,r){var n,a,o,s=0,c=1,f=1,l=0;if(!i(e)||!i(r))throw new Error("Parameters in function xgcd must be integer numbers");for(;r;)a=Math.floor(e/r),o=e-a*r,n=s,s=c-a*s,c=n,n=f,f=l-a*f,l=n,e=r,r=o;var p;return p=e<0?[-e,-c,-l]:[e,e?c:0,l],"Array"===t.matrix?p:u(p)}function s(r,n){var i,a,o,s=new e.BigNumber(0),c=new e.BigNumber(1),f=s,l=c,p=c,h=s;if(!r.isInt()||!n.isInt())throw new Error("Parameters in function xgcd must be integer numbers");for(;!n.isZero();)a=r.div(n).floor(),o=r.mod(n),i=f,f=l.minus(a.times(f)),l=i,i=p,p=h.minus(a.times(p)),h=i,r=n,n=o;var m;return m=r.lt(s)?[r.neg(),l.neg(),h.neg()]:[r,r.isZero()?0:l,h],"Array"===t.matrix?m:u(m)}var u=n(r(0)),c=a("xgcd",{"number, number":o,"BigNumber, BigNumber":s});return c.toTex=void 0,c}var i=r(3).isInteger;t.name="xgcd",t.factory=n},function(e,t,r){e.exports=[r(445),r(447),r(448),r(450),r(452),r(454),r(456)]},function(e,t,r){"use strict";function n(e,t,n,o){var s=r(4),u=n(r(0)),c=n(r(24)),f=n(r(68)),l=n(r(17)),p=n(r(8)),h=n(r(6)),m=o("bitAnd",{"number, number":function(e,t){if(!i(e)||!i(t))throw new Error("Integers expected in function bitAnd");return e&t},"BigNumber, BigNumber":a,"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=f(e,t,m,!1);break;default:r=c(t,e,m,!0)}break;default:switch(t.storage()){case"sparse":r=c(e,t,m,!1);break;default:r=p(e,t,m)}}return r},"Array, Array":function(e,t){return m(u(e),u(t)).valueOf()},"Array, Matrix":function(e,t){return m(u(e),t)},"Matrix, Array":function(e,t){return m(e,u(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=l(e,t,m,!1);break;default:r=h(e,t,m,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=l(t,e,m,!0);break;default:r=h(t,e,m,!0)}return r},"Array, any":function(e,t){return h(u(e),t,m,!1).valueOf()},"any, Array":function(e,t){return h(u(t),e,m,!0).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+s.operators.bitAnd+"${args[1]}\\right)"},m}var i=r(3).isInteger,a=r(446);t.name="bitAnd",t.factory=n},function(e,t,r){var n=r(85);e.exports=function(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function bitAnd");var r=e.constructor;if(e.isNaN()||t.isNaN())return new r(NaN);if(e.isZero()||t.eq(-1)||e.eq(t))return e;if(t.isZero()||e.eq(-1))return t;if(!e.isFinite()||!t.isFinite()){if(!e.isFinite()&&!t.isFinite())return e.isNegative()==t.isNegative()?e:new r(0);if(!e.isFinite())return t.isNegative()?e:e.isNegative()?new r(0):t;if(!t.isFinite())return e.isNegative()?t:t.isNegative()?new r(0):e}return n(e,t,function(e,t){return e&t})}},function(e,t,r){"use strict";function n(e,t,n,s){var u=r(4),c=s("bitNot",{number:function(e){if(!o(e))throw new Error("Integer expected in function bitNot");return~e},BigNumber:a,"Array | Matrix":function(e){return i(e,c)}});return c.toTex={1:u.operators.bitNot+"\\left(${args[0]}\\right)"},c}var i=r(1),a=r(86),o=r(3).isInteger;t.name="bitNot",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=r(4),u=n(r(0)),c=n(r(33)),f=n(r(73)),l=n(r(36)),p=n(r(8)),h=n(r(6)),m=o("bitOr",{"number, number":function(e,t){if(!i(e)||!i(t))throw new Error("Integers expected in function bitOr");return e|t},"BigNumber, BigNumber":a,"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=f(e,t,m);break;default:r=c(t,e,m,!0)}break;default:switch(t.storage()){case"sparse":r=c(e,t,m,!1);break;default:r=p(e,t,m)}}return r},"Array, Array":function(e,t){return m(u(e),u(t)).valueOf()},"Array, Matrix":function(e,t){return m(u(e),t)},"Matrix, Array":function(e,t){return m(e,u(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=l(e,t,m,!1);break;default:r=h(e,t,m,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=l(t,e,m,!0);break;default:r=h(t,e,m,!0)}return r},"Array, any":function(e,t){return h(u(e),t,m,!1).valueOf()},"any, Array":function(e,t){return h(u(t),e,m,!0).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+s.operators.bitOr+"${args[1]}\\right)"},m}var i=r(3).isInteger,a=r(449);t.name="bitOr",t.factory=n},function(e,t,r){var n=r(85);e.exports=function(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function bitOr");var r=e.constructor;if(e.isNaN()||t.isNaN())return new r(NaN);var i=new r(-1);return e.isZero()||t.eq(i)||e.eq(t)?t:t.isZero()||e.eq(i)?e:e.isFinite()&&t.isFinite()?n(e,t,function(e,t){return e|t}):!e.isFinite()&&!e.isNegative()&&t.isNegative()||e.isNegative()&&!t.isNegative()&&!t.isFinite()?i:e.isNegative()&&t.isNegative()?e.isFinite()?e:t:e.isFinite()?t:e}},function(e,t,r){"use strict";function n(e,t,n,o){var s=r(4),u=n(r(0)),c=n(r(15)),f=n(r(26)),l=n(r(16)),p=n(r(8)),h=n(r(6)),m=o("bitXor",{"number, number":function(e,t){if(!i(e)||!i(t))throw new Error("Integers expected in function bitXor");return e^t},"BigNumber, BigNumber":a,"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=f(e,t,m);break;default:r=c(t,e,m,!0)}break;default:switch(t.storage()){case"sparse":r=c(e,t,m,!1);break;default:r=p(e,t,m)}}return r},"Array, Array":function(e,t){return m(u(e),u(t)).valueOf()},"Array, Matrix":function(e,t){return m(u(e),t)},"Matrix, Array":function(e,t){return m(e,u(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=l(e,t,m,!1);break;default:r=h(e,t,m,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=l(t,e,m,!0);break;default:r=h(t,e,m,!0)}return r},"Array, any":function(e,t){return h(u(e),t,m,!1).valueOf()},"any, Array":function(e,t){return h(u(t),e,m,!0).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+s.operators.bitXor+"${args[1]}\\right)"},m}var i=r(3).isInteger,a=r(451);t.name="bitXor",t.factory=n},function(e,t,r){var n=r(85),i=r(86);e.exports=function(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function bitXor");var r=e.constructor;if(e.isNaN()||t.isNaN())return new r(NaN);if(e.isZero())return t;if(t.isZero())return e;if(e.eq(t))return new r(0);var a=new r(-1);return e.eq(a)?i(t):t.eq(a)?i(e):e.isFinite()&&t.isFinite()?n(e,t,function(e,t){return e^t}):e.isFinite()||t.isFinite()?new r(e.isNegative()==t.isNegative()?1/0:-(1/0)):a}},function(e,t,r){"use strict";function n(e,t,n,o){var s=r(4),u=n(r(0)),c=n(r(11)),f=n(r(38)),l=n(r(33)),p=n(r(24)),h=n(r(87)),m=n(r(36)),d=n(r(17)),v=n(r(8)),g=n(r(6)),y=o("leftShift",{"number, number":function(e,t){if(!i(e)||!i(t))throw new Error("Integers expected in function leftShift");return e<<t},"BigNumber, BigNumber":a,"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=h(e,t,y,!1);break;default:r=p(t,e,y,!0)}break;default:switch(t.storage()){case"sparse":r=l(e,t,y,!1);break;default:r=v(e,t,y)}}return r},"Array, Array":function(e,t){return y(u(e),u(t)).valueOf()},"Array, Matrix":function(e,t){return y(u(e),t)},"Matrix, Array":function(e,t){return y(e,u(t))},"Matrix, number | BigNumber":function(e,t){if(!c(t,0)){var r;switch(e.storage()){case"sparse":r=d(e,t,y,!1);break;default:r=g(e,t,y,!1)}return r}return e.clone()},"number | BigNumber, Matrix":function(e,t){if(!c(e,0)){var r;switch(t.storage()){case"sparse":r=m(t,e,y,!0);break;default:r=g(t,e,y,!0)}return r}return f(t.size(),t.storage())},"Array, number | BigNumber":function(e,t){return y(u(e),t).valueOf()},"number | BigNumber, Array":function(e,t){return y(e,u(t)).valueOf()}});return y.toTex={2:"\\left(${args[0]}"+s.operators.leftShift+"${args[1]}\\right)"},y}var i=r(3).isInteger,a=r(453);t.name="leftShift",t.factory=n},function(e,t){e.exports=function(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function leftShift");var r=e.constructor;return e.isNaN()||t.isNaN()||t.isNegative()&&!t.isZero()?new r(NaN):e.isZero()||t.isZero()?e:e.isFinite()||t.isFinite()?t.lt(55)?e.times(Math.pow(2,t.toNumber())+""):e.times(new r(2).pow(t)):new r(NaN)}},function(e,t,r){"use strict";function n(e,t,n,o){var s=r(4),u=n(r(0)),c=n(r(11)),f=n(r(38)),l=n(r(33)),p=n(r(24)),h=n(r(87)),m=n(r(36)),d=n(r(17)),v=n(r(8)),g=n(r(6)),y=o("rightArithShift",{"number, number":function(e,t){if(!i(e)||!i(t))throw new Error("Integers expected in function rightArithShift");return e>>t},"BigNumber, BigNumber":a,"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=h(e,t,y,!1);break;default:r=p(t,e,y,!0)}break;default:switch(t.storage()){case"sparse":r=l(e,t,y,!1);break;default:r=v(e,t,y)}}return r},"Array, Array":function(e,t){return y(u(e),u(t)).valueOf()},"Array, Matrix":function(e,t){return y(u(e),t)},"Matrix, Array":function(e,t){return y(e,u(t))},"Matrix, number | BigNumber":function(e,t){if(!c(t,0)){var r;switch(e.storage()){case"sparse":r=d(e,t,y,!1);break;default:r=g(e,t,y,!1)}return r}return e.clone()},"number | BigNumber, Matrix":function(e,t){if(!c(e,0)){var r;switch(t.storage()){case"sparse":r=m(t,e,y,!0);break;default:r=g(t,e,y,!0)}return r}return f(t.size(),t.storage())},"Array, number | BigNumber":function(e,t){return y(u(e),t).valueOf()},"number | BigNumber, Array":function(e,t){return y(e,u(t)).valueOf()}});return y.toTex={2:"\\left(${args[0]}"+s.operators.rightArithShift+"${args[1]}\\right)"},y}var i=r(3).isInteger,a=r(455);t.name="rightArithShift",t.factory=n},function(e,t){e.exports=function(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function rightArithShift");var r=e.constructor;return e.isNaN()||t.isNaN()||t.isNegative()&&!t.isZero()?new r(NaN):e.isZero()||t.isZero()?e:t.isFinite()?t.lt(55)?e.div(Math.pow(2,t.toNumber())+"").floor():e.div(new r(2).pow(t)).floor():new r(e.isNegative()?-1:e.isFinite()?0:NaN)}},function(e,t,r){"use strict";function n(e,t,n,a){var o=r(4),s=n(r(0)),u=n(r(11)),c=n(r(38)),f=n(r(33)),l=n(r(24)),p=n(r(87)),h=n(r(36)),m=n(r(17)),d=n(r(8)),v=n(r(6)),g=a("rightLogShift",{"number, number":function(e,t){if(!i(e)||!i(t))throw new Error("Integers expected in function rightLogShift");return e>>>t},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=p(e,t,g,!1);break;default:r=l(t,e,g,!0)}break;default:switch(t.storage()){case"sparse":r=f(e,t,g,!1);break;default:r=d(e,t,g)}}return r},"Array, Array":function(e,t){return g(s(e),s(t)).valueOf()},"Array, Matrix":function(e,t){return g(s(e),t)},"Matrix, Array":function(e,t){return g(e,s(t))},"Matrix, number | BigNumber":function(e,t){if(!u(t,0)){var r;switch(e.storage()){case"sparse":r=m(e,t,g,!1);break;default:r=v(e,t,g,!1)}return r}return e.clone()},"number | BigNumber, Matrix":function(e,t){if(!u(e,0)){var r;switch(t.storage()){case"sparse":r=h(t,e,g,!0);break;default:r=v(t,e,g,!0)}return r}return c(t.size(),t.storage())},"Array, number | BigNumber":function(e,t){return g(s(e),t).valueOf()},"number | BigNumber, Array":function(e,t){return g(e,s(t)).valueOf()}});return g.toTex={2:"\\left(${args[0]}"+o.operators.rightLogShift+"${args[1]}\\right)"},g}var i=r(3).isInteger;t.name="rightLogShift",t.factory=n},function(e,t,r){e.exports=[r(458),r(459),r(136),r(460)]},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(18)),o=n(r(136)),s=n(r(57)),u=n(r(48)),c=i("bellNumbers",{"number | BigNumber":function(e){if(!u(e)||s(e))throw new TypeError("Non-negative integer value expected in function bellNumbers");for(var t=0,r=0;r<=e;r++)t=a(t,o(e,r));return t}});return c.toTex={1:"\\mathrm{B}_{${args[0]}}"},c}t.name="bellNumbers",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(70)),o=n(r(20)),s=n(r(55)),u=n(r(48)),c=n(r(34)),f=i("composition",{"number | BigNumber, number | BigNumber":function(e,t){if(!(u(e)&&s(e)&&u(t)&&s(t)))throw new TypeError("Positive integer value expected in function composition");if(c(t,e))throw new TypeError("k must be less than or equal to n in function composition");return a(o(e,-1),o(t,-1))}});return f.toTex=void 0,f}t.name="composition",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(18)),o=n(r(47)),s=n(r(12)),u=n(r(70)),c=n(r(57)),f=n(r(48)),l=i("catalan",{"number | BigNumber":function(e){if(!f(e)||c(e))throw new TypeError("Non-negative integer value expected in function catalan");return o(u(s(e,2),e),a(e,1))}});return l.toTex={1:"\\mathrm{C}_{${args[0]}}"},l}t.name="catalan",t.factory=n},function(e,t,r){e.exports=[r(462),r(123),r(463),r(464)]},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("arg",{number:function(e){return Math.atan2(0,e)},BigNumber:function(t){return e.BigNumber.atan2(0,t)},Complex:function(e){return e.arg()},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\arg\\left(${args[0]}\\right)"},a}var i=r(1);t.name="arg",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("im",{number:function(e){return 0},BigNumber:function(t){return new e.BigNumber(0)},Complex:function(e){return e.im},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\Im\\left\\lbrace${args[0]}\\right\\rbrace"},a}var i=r(1);t.name="im",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("re",{number:function(e){return e},BigNumber:function(e){return e},Complex:function(e){return e.re},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\Re\\left\\lbrace${args[0]}\\right\\rbrace"},a}var i=r(1);t.name="re",t.factory=n},function(e,t,r){e.exports=[r(466),r(467)]},function(e,t,r){"use strict";function n(e,t,n,i){function a(e){return 2===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]}function o(e){return 3===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]&&"number"==typeof e[2]}function s(e){return 4===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]&&"number"==typeof e[2]&&"number"==typeof e[3]}function u(e,r,n,i){var a=e,o=n,s=d(a,r),u=d(o,i),c=s[0]*u[1]-u[0]*s[1];if(l(c)<t.epsilon)return null;var f=(u[0]*a[1]-u[1]*a[0]-u[0]*o[1]+u[1]*o[0])/c;return p(m(s,f),a)}function c(e,t,r,n,i,a,o,s,u,c,f,l){var p=(e-o)*(c-o)+(t-s)*(f-s)+(r-u)*(l-u),h=(c-o)*(n-e)+(f-s)*(i-t)+(l-u)*(a-r),m=(e-o)*(n-e)+(t-s)*(i-t)+(r-u)*(a-r),d=(c-o)*(c-o)+(f-s)*(f-s)+(l-u)*(l-u),v=(n-e)*(n-e)+(i-t)*(i-t)+(a-r)*(a-r),g=(p*h-m*d)/(v*d-h*h),y=(p+g*h)/d,x=e+g*(n-e),w=t+g*(i-t),b=r+g*(a-r),N=o+y*(c-o),E=s+y*(f-s),M=u+y*(l-u);return x===N&&w===E&&b===M?[x,w,b]:null}function f(e,t,r,n,i,a,o,s,u,c){var f=(c-e*o-t*s-r*u)/(n*o+i*s+a*u-e*o-t*s-r*u),l=e+f*(n-e),p=t+f*(i-t),h=r+f*(a-r);return[l,p,h]}var l=n(r(29)),p=n(r(18)),h=n(r(0)),m=n(r(12)),d=n(r(21)),v=i("intersect",{"Array, Array, Array":function(e,t,r){if(!o(e))throw new TypeError("Array with 3 numbers expected for first argument");if(!o(t))throw new TypeError("Array with 3 numbers expected for second argument");if(!s(r))throw new TypeError("Array with 4 numbers expected as third argument");return f(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2],r[3])},"Array, Array, Array, Array":function(e,t,r,n){if(2===e.length){if(!a(e))throw new TypeError("Array with 2 numbers expected for first argument");if(!a(t))throw new TypeError("Array with 2 numbers expected for second argument");if(!a(r))throw new TypeError("Array with 2 numbers expected for third argument");if(!a(n))throw new TypeError("Array with 2 numbers expected for fourth argument");return u(e,t,r,n)}if(3===e.length){if(!o(e))throw new TypeError("Array with 3 numbers expected for first argument");if(!o(t))throw new TypeError("Array with 3 numbers expected for second argument");if(!o(r))throw new TypeError("Array with 3 numbers expected for third argument");if(!o(n))throw new TypeError("Array with 3 numbers expected for fourth argument");return c(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2],n[0],n[1],n[2])}throw new TypeError("Arrays with two or thee dimensional points expected")},"Matrix, Matrix, Matrix":function(e,t,r){return h(v(e.valueOf(),t.valueOf(),r.valueOf()))},"Matrix, Matrix, Matrix, Matrix":function(e,t,r,n){return h(v(e.valueOf(),t.valueOf(),r.valueOf(),n.valueOf()))}});return v}t.name="intersect",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,s){var m=(n(r(0)),s("distance",{"Array, Array, Array":function(e,t,r){if(2==e.length&&2==t.length&&2==r.length){if(!i(e))throw new TypeError("Array with 2 numbers expected for first argument");if(!i(t))throw new TypeError("Array with 2 numbers expected for second argument");if(!i(r))throw new TypeError("Array with 2 numbers expected for third argument");var n=(r[1]-r[0])/(t[1]-t[0]),a=n*n*t[0],o=-1*(n*t[0]),s=e[1];return c(e[0],e[1],a,o,s)}throw new TypeError("Invalid Arguments: Try again")},"Object, Object, Object":function(e,t,r){if(2==Object.keys(e).length&&2==Object.keys(t).length&&2==Object.keys(r).length){if(!i(e))throw new TypeError("Values of pointX and pointY should be numbers");if(!i(t))throw new TypeError("Values of lineOnePtX and lineOnePtY should be numbers");if(!i(r))throw new TypeError("Values of lineTwoPtX and lineTwoPtY should be numbers");
/src/dist/math.min.js:53:if(e.hasOwnProperty("pointX")&&e.hasOwnProperty("pointY")&&t.hasOwnProperty("lineOnePtX")&&t.hasOwnProperty("lineOnePtY")&&r.hasOwnProperty("lineTwoPtX")&&r.hasOwnProperty("lineTwoPtY")){var n=(r.lineTwoPtY-r.lineTwoPtX)/(t.lineOnePtY-t.lineOnePtX),a=n*n*t.lineOnePtX,o=-1*(n*t.lineOnePtX),s=e.pointX;return c(e.pointX,e.pointY,a,o,s)}throw new TypeError("Key names do not match")}throw new TypeError("Invalid Arguments: Try again")},"Array, Array":function(e,t){if(2==e.length&&3==t.length){if(!i(e))throw new TypeError("Array with 2 numbers expected for first argument");if(!a(t))throw new TypeError("Array with 3 numbers expected for second argument");return c(e[0],e[1],t[0],t[1],t[2])}if(3==e.length&&6==t.length){if(!a(e))throw new TypeError("Array with 3 numbers expected for first argument");if(!o(t))throw new TypeError("Array with 6 numbers expected for second argument");return f(e[0],e[1],e[2],t[0],t[1],t[2],t[3],t[4],t[5])}if(2==e.length&&2==t.length){if(!i(e))throw new TypeError("Array with 2 numbers expected for first argument");if(!i(t))throw new TypeError("Array with 2 numbers expected for second argument");return l(e[0],e[1],t[0],t[1])}if(3==e.length&&3==t.length){if(!a(e))throw new TypeError("Array with 3 numbers expected for first argument");if(!a(t))throw new TypeError("Array with 3 numbers expected for second argument");return p(e[0],e[1],e[2],t[0],t[1],t[2])}throw new TypeError("Invalid Arguments: Try again")},"Object, Object":function(e,t){if(2==Object.keys(e).length&&3==Object.keys(t).length){if(!i(e))throw new TypeError("Values of pointX and pointY should be numbers");if(!a(t))throw new TypeError("Values of xCoeffLine, yCoeffLine and constant should be numbers");if(e.hasOwnProperty("pointX")&&e.hasOwnProperty("pointY")&&t.hasOwnProperty("xCoeffLine")&&t.hasOwnProperty("yCoeffLine")&&t.hasOwnProperty("yCoeffLine"))return c(e.pointX,e.pointY,t.xCoeffLine,t.yCoeffLine,t.constant);throw new TypeError("Key names do not match")}if(3==Object.keys(e).length&&6==Object.keys(t).length){if(!a(e))throw new TypeError("Values of pointX, pointY and pointZ should be numbers");if(!o(t))throw new TypeError("Values of x0, y0, z0, a, b and c should be numbers");if(e.hasOwnProperty("pointX")&&e.hasOwnProperty("pointY")&&t.hasOwnProperty("x0")&&t.hasOwnProperty("y0")&&t.hasOwnProperty("z0")&&t.hasOwnProperty("a")&&t.hasOwnProperty("b")&&t.hasOwnProperty("c"))return f(e.pointX,e.pointY,e.pointZ,t.x0,t.y0,t.z0,t.a,t.b,t.c);throw new TypeError("Key names do not match")}if(2==Object.keys(e).length&&2==Object.keys(t).length){if(!i(e))throw new TypeError("Values of pointOneX and pointOneY should be numbers");if(!i(t))throw new TypeError("Values of pointTwoX and pointTwoY should be numbers");if(e.hasOwnProperty("pointOneX")&&e.hasOwnProperty("pointOneY")&&t.hasOwnProperty("pointTwoX")&&t.hasOwnProperty("pointTwoY"))return l(e.pointOneX,e.pointOneY,t.pointTwoX,t.pointTwoY);throw new TypeError("Key names do not match")}if(3==Object.keys(e).length&&3==Object.keys(t).length){if(!a(e))throw new TypeError("Values of pointOneX, pointOneY and pointOneZ should be numbers");if(!a(t))throw new TypeError("Values of pointTwoX, pointTwoY and pointTwoZ should be numbers");if(e.hasOwnProperty("pointOneX")&&e.hasOwnProperty("pointOneY")&&e.hasOwnProperty("pointOneZ")&&t.hasOwnProperty("pointTwoX")&&t.hasOwnProperty("pointTwoY")&&t.hasOwnProperty("pointTwoZ"))return p(e.pointOneX,e.pointOneY,e.pointOneZ,t.pointTwoX,t.pointTwoY,t.pointTwoZ);throw new TypeError("Key names do not match")}throw new TypeError("Invalid Arguments: Try again")},Array:function(e){if(!u(e))throw new TypeError("Incorrect array format entered for pairwise distance calculation");return h(e)}}));return m}function i(e){return e.constructor!==Array&&(e=s(e)),"number"==typeof e[0]&&"number"==typeof e[1]}function a(e){return e.constructor!==Array&&(e=s(e)),"number"==typeof e[0]&&"number"==typeof e[1]&&"number"==typeof e[2]}function o(e){return e.constructor!==Array&&(e=s(e)),"number"==typeof e[0]&&"number"==typeof e[1]&&"number"==typeof e[2]&&"number"==typeof e[3]&&"number"==typeof e[4]&&"number"==typeof e[5]}function s(e){for(var t=Object.keys(e),r=[],n=0;n<t.length;n++)r.push(e[t[n]]);return r}function u(e){if(2==e[0].length&&"number"==typeof e[0][0]&&"number"==typeof e[0][1]){for(var t in e)if(2!=e[t].length||"number"!=typeof e[t][0]||"number"!=typeof e[t][1])return!1}else{if(3!=e[0].length||"number"!=typeof e[0][0]||"number"!=typeof e[0][1]||"number"!=typeof e[0][2])return!1;for(var t in e)if(3!=e[t].length||"number"!=typeof e[t][0]||"number"!=typeof e[t][1]||"number"!=typeof e[t][2])return!1}return!0}function c(e,t,r,n,i){var a=Math.abs(r*e+n*t+i),o=Math.pow(r*r+n*n,.5),s=a/o;return s}function f(e,t,r,n,i,a,o,s,u){var c=[(i-t)*u-(a-r)*s,(a-r)*o-(n-e)*u,(n-e)*s-(i-t)*o];c=Math.pow(c[0]*c[0]+c[1]*c[1]+c[2]*c[2],.5);var f=Math.pow(o*o+s*s+u*u,.5),l=c/f;return l}function l(e,t,r,n){var i=n-t,a=r-e,o=i*i+a*a,s=Math.pow(o,.5);return s}function p(e,t,r,n,i,a){var o=a-r,s=i-t,u=n-e,c=o*o+s*s+u*u,f=Math.pow(c,.5);return f}function h(e){for(var t=[],r=0;r<e.length-1;r++)for(var n=r+1;n<e.length;n++)2==e[0].length?t.push(l(e[r][0],e[r][1],e[n][0],e[n][1])):3==e[0].length&&t.push(p(e[r][0],e[r][1],e[r][2],e[n][0],e[n][1],e[n][2]));return t}t.name="distance",t.factory=n},function(e,t,r){e.exports=[r(469),r(138),r(470),r(471)]},function(e,t,r){"use strict";function n(e,t,n,i){var a=r(4),o=n(r(0)),s=n(r(38)),u=n(r(138)),c=(n(r(82)),n(r(24))),f=n(r(68)),l=n(r(17)),p=n(r(8)),h=n(r(6)),m=i("and",{"number, number":function(e,t){return!(!e||!t)},"Complex, Complex":function(e,t){return!(0===e.re&&0===e.im||0===t.re&&0===t.im)},"BigNumber, BigNumber":function(e,t){return!(e.isZero()||t.isZero()||e.isNaN()||t.isNaN())},"Unit, Unit":function(e,t){return m(e.value,t.value)},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=f(e,t,m,!1);break;default:r=c(t,e,m,!0)}break;default:switch(t.storage()){case"sparse":r=c(e,t,m,!1);break;default:r=p(e,t,m)}}return r},"Array, Array":function(e,t){return m(o(e),o(t)).valueOf()},"Array, Matrix":function(e,t){return m(o(e),t)},"Matrix, Array":function(e,t){return m(e,o(t))},"Matrix, any":function(e,t){if(u(t))return s(e.size(),e.storage());var r;switch(e.storage()){case"sparse":r=l(e,t,m,!1);break;default:r=h(e,t,m,!1)}return r},"any, Matrix":function(e,t){if(u(e))return s(e.size(),e.storage());var r;switch(t.storage()){case"sparse":r=l(t,e,m,!0);break;default:r=h(t,e,m,!0)}return r},"Array, any":function(e,t){return m(o(e),t).valueOf()},"any, Array":function(e,t){return m(e,o(t)).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+a.operators.and+"${args[1]}\\right)"},m}t.name="and",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=r(4),o=n(r(0)),s=n(r(15)),u=n(r(60)),c=n(r(16)),f=n(r(8)),l=n(r(6)),p=i("or",{"number, number":function(e,t){return!(!e&&!t)},"Complex, Complex":function(e,t){return 0!==e.re||0!==e.im||0!==t.re||0!==t.im},"BigNumber, BigNumber":function(e,t){return!e.isZero()&&!e.isNaN()||!t.isZero()&&!t.isNaN()},"Unit, Unit":function(e,t){return p(e.value,t.value)},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=u(e,t,p);break;default:r=s(t,e,p,!0)}break;default:switch(t.storage()){case"sparse":r=s(e,t,p,!1);break;default:r=f(e,t,p)}}return r},"Array, Array":function(e,t){return p(o(e),o(t)).valueOf()},"Array, Matrix":function(e,t){return p(o(e),t)},"Matrix, Array":function(e,t){return p(e,o(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=c(e,t,p,!1);break;default:r=l(e,t,p,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=c(t,e,p,!0);break;default:r=l(t,e,p,!0)}return r},"Array, any":function(e,t){return l(o(e),t,p,!1).valueOf()},"any, Array":function(e,t){return l(o(t),e,p,!0).valueOf()}});return p.toTex={2:"\\left(${args[0]}"+a.operators.or+"${args[1]}\\right)"},p}t.name="or",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=r(4),o=n(r(0)),s=n(r(15)),u=n(r(26)),c=n(r(16)),f=n(r(8)),l=n(r(6)),p=i("xor",{"number, number":function(e,t){return!!e!=!!t},"Complex, Complex":function(e,t){return(0!==e.re||0!==e.im)!=(0!==t.re||0!==t.im)},"BigNumber, BigNumber":function(e,t){return(!e.isZero()&&!e.isNaN())!=(!t.isZero()&&!t.isNaN())},"Unit, Unit":function(e,t){return p(e.value,t.value)},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=u(e,t,p);break;default:r=s(t,e,p,!0)}break;default:switch(t.storage()){case"sparse":r=s(e,t,p,!1);break;default:r=f(e,t,p)}}return r},"Array, Array":function(e,t){return p(o(e),o(t)).valueOf()},"Array, Matrix":function(e,t){return p(o(e),t)},"Matrix, Array":function(e,t){return p(e,o(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=c(e,t,p,!1);break;default:r=l(e,t,p,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=c(t,e,p,!0);break;default:r=l(t,e,p,!0)}return r},"Array, any":function(e,t){return l(o(e),t,p,!1).valueOf()},"any, Array":function(e,t){return l(o(t),e,p,!0).valueOf()}});return p.toTex={2:"\\left(${args[0]}"+a.operators.xor+"${args[1]}\\right)"},p}t.name="xor",t.factory=n},function(e,t,r){e.exports=[r(64),r(473),r(115),r(474),r(475),r(61),r(476),r(477),r(478),r(114),r(479),r(139),r(480),r(88),r(117),r(481),r(482),r(28),r(140),r(484),r(22),r(135),r(67),r(38)]},function(e,t,r){"use strict";function n(e,t,n,a){function o(e,t){var r=Math.max(i.size(e).length,i.size(t).length);e=i.squeeze(e),t=i.squeeze(t);var n=i.size(e),a=i.size(t);if(1!=n.length||1!=a.length||3!=n[0]||3!=a[0])throw new RangeError("Vectors with length 3 expected (Size A = ["+n.join(", ")+"], B = ["+a.join(", ")+"])");var o=[u(c(e[1],t[2]),c(e[2],t[1])),u(c(e[2],t[0]),c(e[0],t[2])),u(c(e[0],t[1]),c(e[1],t[0]))];return r>1?[o]:o}var s=n(r(0)),u=n(r(21)),c=n(r(12)),f=a("cross",{"Matrix, Matrix":function(e,t){return s(o(e.toArray(),t.toArray()))},"Matrix, Array":function(e,t){return s(o(e.toArray(),t))},"Array, Matrix":function(e,t){return s(o(e,t.toArray()))},"Array, Array":o});return f.toTex={2:"\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)"},f}var i=r(2);t.name="cross",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){function s(e,t,r,n){if(!a(t))throw new TypeError("Second parameter in function diag must be an integer");var i=t>0?t:0,o=t<0?-t:0;switch(r.length){case 1:return u(e,t,n,r[0],o,i);case 2:return c(e,t,n,r,o,i)}throw new RangeError("Matrix for function diag must be 2 dimensional")}function u(t,r,n,i,a,o){var s=[i+a,i+o],u=e.Matrix.storage(n||"dense"),c=u.diagonal(s,t,r);return null!==n?c:c.valueOf()}function c(t,r,n,i,a,o){if(e.isMatrix(t)){var s=t.diagonal(r);return null!==n?n!==s.storage()?f(s,n):s:s.valueOf()}for(var u=Math.min(i[0]-a,i[1]-o),c=[],l=0;l<u;l++)c[l]=t[l+a][l+o];return null!==n?f(c):c}var f=n(r(0)),l=o("diag",{Array:function(e){return s(e,0,i.size(e),null)},"Array, number":function(e,t){return s(e,t,i.size(e),null)},"Array, BigNumber":function(e,t){return s(e,t.toNumber(),i.size(e),null)},"Array, string":function(e,t){return s(e,0,i.size(e),t)},"Array, number, string":function(e,t,r){return s(e,t,i.size(e),r)},"Array, BigNumber, string":function(e,t,r){return s(e,t.toNumber(),i.size(e),r)},Matrix:function(e){return s(e,0,e.size(),e.storage())},"Matrix, number":function(e,t){return s(e,t,e.size(),e.storage())},"Matrix, BigNumber":function(e,t){return s(e,t.toNumber(),e.size(),e.storage())},"Matrix, string":function(e,t){return s(e,0,e.size(),t)},"Matrix, number, string":function(e,t,r){return s(e,t,e.size(),r)},"Matrix, BigNumber, string":function(e,t,r){return s(e,t.toNumber(),e.size(),r)}});return l.toTex=void 0,l}var i=r(2),a=(r(5).clone,r(3).isInteger);t.name="diag",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(e,t){var r=i(e),n=i(t),a=r[0];if(1!==r.length||1!==n.length)throw new RangeError("Vector expected");if(r[0]!=n[0])throw new RangeError("Vectors must have equal length ("+r[0]+" != "+n[0]+")");if(0==a)throw new RangeError("Cannot calculate the dot product of empty vectors");for(var o=0,c=0;c<a;c++)o=s(o,u(e[c],t[c]));return o}var s=n(r(18)),u=n(r(12)),c=a("dot",{"Matrix, Matrix":function(e,t){return o(e.toArray(),t.toArray())},"Matrix, Array":function(e,t){return o(e.toArray(),t)},"Array, Matrix":function(e,t){return o(e,t.toArray())},"Array, Array":o});return c.toTex={2:"\\left(${args[0]}\\cdot${args[1]}\\right)"},c}var i=r(2).size;t.name="dot",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var s=n(r(0)),u=a("filter",{"Array, function":i,"Matrix, function":function(e,t){return s(i(e.toArray(),t))},"Array, RegExp":o,"Matrix, RegExp":function(e,t){return s(o(e.toArray(),t))}});return u.toTex=void 0,u}function i(e,t){var r=s(t);return a(e,function(e,n,i){return 1===r?t(e):2===r?t(e,[n]):t(e,[n],i)})}var a=r(2).filter,o=r(2).filterRegExp,s=r(32).maxArgumentCount;t.name="filter",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(0)),u=o("flatten",{Array:function(e){return a(i(e))},Matrix:function(e){var t=a(i(e.toArray()));return s(t)}});return u.toTex=void 0,u}var i=r(5).clone,a=r(2).flatten;t.name="flatten",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("forEach",{"Array, function":i,"Matrix, function":function(e,t){return e.forEach(t)}});return a.toTex=void 0,a}function i(e,t){var r=a(t),n=function(i,a){Array.isArray(i)?o(i,function(e,t){n(e,a.concat(t))}):1===r?t(i):2===r?t(i,a):t(i,a,e)};n(e,[])}var a=r(32).maxArgumentCount,o=r(2).forEach;t.name="forEach",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(e,t){if(1===i(e).length&&(e=[e]),1===i(t).length&&(t=[t]),i(e).length>2||i(t).length>2)throw new RangeError("Vectors with dimensions greater then 2 are not supported expected (Size x = "+JSON.stringify(e.length)+", y = "+JSON.stringify(t.length)+")");var r=[],n=[];return e.map(function(e){return t.map(function(t){return e.map(function(e){return t.map(function(t){return n.push(u(e,t))})},r.push(n=[]))})},r=[])&&r}var s=n(r(0)),u=n(r(23)),c=a("kron",{"Matrix, Matrix":function(e,t){return s(o(e.toArray(),t.toArray()))},"Matrix, Array":function(e,t){return s(o(e.toArray(),t))},"Array, Matrix":function(e,t){return s(o(e,t.toArray()))},"Array, Array":o});return c}var i=r(2).size;t.name="kron",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){function s(t,r){var n=u(t),i=n?new e.BigNumber(1):1;if(c(t),r){var o=f(r);return t.length>0?o.resize(t,i):o}var s=[];return t.length>0?a(s,t,i):s}function u(t){var r=!1;return t.forEach(function(t,n,i){e.isBigNumber(t)&&(r=!0,i[n]=t.toNumber())}),r}function c(e){e.forEach(function(e){if("number"!=typeof e||!i(e)||e<0)throw new Error("Parameters in function ones must be positive integers")})}var f=n(r(0)),l=o("ones",{"":function(){return"Array"===t.matrix?s([]):s([],"default")},"...number | BigNumber | string":function(e){var r=e[e.length-1];if("string"==typeof r){var n=e.pop();return s(e,n)}return"Array"===t.matrix?s(e):s(e,"default")},Array:s,Matrix:function(e){var t=e.storage();return s(e.valueOf(),t)},"Array | Matrix, string":function(e,t){return s(e.valueOf(),t)}});return l.toTex=void 0,l}var i=r(3).isInteger,a=r(2).resize;t.name="ones",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(0)),u=o("reshape",{"Matrix, Array":function(e,t){return e.reshape?e.reshape(t):s(a.reshape(e.valueOf(),t))},"Array, Array":function(e,t){return t.forEach(function(e){if(!i(e))throw new TypeError("Invalid size for dimension: "+e)}),a.reshape(e,t)}});return u.toTex=void 0,u}var i=(r(10),r(3).isInteger),a=r(2);t.name="reshape",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,f){function l(e,t,r){if(void 0!==r){if("string"!=typeof r||1!==r.length)throw new TypeError("Single character expected as defaultValue")}else r=" ";if(1!==t.length)throw new i(t.length,1);var n=t[0];if("number"!=typeof n||!o(n))throw new TypeError("Invalid size, must contain positive integers (size: "+s(t)+")");if(e.length>n)return e.substring(0,n);if(e.length<n){for(var a=e,u=0,c=n-e.length;u<c;u++)a+=r;return a}return e}var p=n(r(0)),h=function(r,n,i){if(2!=arguments.length&&3!=arguments.length)throw new a("resize",arguments.length,2,3);if(e.isMatrix(n)&&(n=n.valueOf()),e.isBigNumber(n[0])&&(n=n.map(function(t){return e.isBigNumber(t)?t.toNumber():t})),e.isMatrix(r))return r.resize(n,i,!0);if("string"==typeof r)return l(r,n,i);var o=!Array.isArray(r)&&"Array"!==t.matrix;if(0==n.length){for(;Array.isArray(r);)r=r[0];return u(r)}Array.isArray(r)||(r=[r]),r=u(r);var s=c.resize(r,n,i);return o?p(s):s};return h.toTex=void 0,h}var i=r(10),a=r(50),o=r(3).isInteger,s=r(9).format,u=r(5).clone,c=r(2);t.name="resize",t.factory=n},function(e,t){e.exports=function e(t,r){"use strict";var n,i,a=/(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,o=/(^[ ]*|[ ]*$)/g,s=/(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,u=/^0x[0-9a-f]+$/i,c=/^0/,f=function(t){return e.insensitive&&(""+t).toLowerCase()||""+t},l=f(t).replace(o,"")||"",p=f(r).replace(o,"")||"",h=l.replace(a,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),m=p.replace(a,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),d=parseInt(l.match(u),16)||1!==h.length&&l.match(s)&&Date.parse(l),v=parseInt(p.match(u),16)||d&&p.match(s)&&Date.parse(p)||null;if(v){if(d<v)return-1;if(d>v)return 1}for(var g=0,y=Math.max(h.length,m.length);g<y;g++){if(n=!(h[g]||"").match(c)&&parseFloat(h[g])||h[g]||0,i=!(m[g]||"").match(c)&&parseFloat(m[g])||m[g]||0,isNaN(n)!==isNaN(i))return isNaN(n)?1:-1;if(typeof n!=typeof i&&(n+="",i+=""),n<i)return-1;if(n>i)return 1}return 0}},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(0)),u=o("squeeze",{Array:function(e){return a.squeeze(i.clone(e))},Matrix:function(e){var t=a.squeeze(e.toArray());return Array.isArray(t)?s(t):t},any:function(e){return i.clone(e)}});return u.toTex=void 0,u}var i=r(5),a=r(2);t.name="squeeze",t.factory=n},function(e,t,r){e.exports=[r(70),r(69),r(137),r(486),r(487),r(488),r(489),r(493),r(494)]},function(e,t,r){"use strict";function n(e,t,n,i){function a(e,t){var r=t.size().length,n=e.size().length;if(r>1)throw new Error("first object must be one dimensional");if(n>1)throw new Error("second object must be one dimensional");if(r!==n)throw new Error("Length of two vectors must be equal");var i=u(e);if(0===i)throw new Error("Sum of elements in first object must be non zero");var a=u(t);if(0===a)throw new Error("Sum of elements in second object must be non zero");var o=s(e,u(e)),h=s(t,u(t)),m=u(c(o,l(f(o,h))));return p(m)?m:Number.NaN}var o=n(r(0)),s=n(r(47)),u=n(r(141)),c=n(r(12)),f=n(r(132)),l=n(r(134)),p=n(r(75)),h=i("kldivergence",{"Array, Array":function(e,t){return a(o(e),o(t))},"Matrix, Array":function(e,t){return a(e,o(t))},"Array, Matrix":function(e,t){return a(o(e),t)},"Matrix, Matrix":function(e,t){return a(e,t)}});return h}t.name="kldivergence",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(18)),s=n(r(12)),u=n(r(47)),c=n(r(69)),f=n(r(48)),l=n(r(55));return a("multinomial",{"Array | Matrix":function(e){var t=0,r=1;return i(e,function(e){if(!f(e)||!l(e))throw new TypeError("Positive integer value expected in function multinomial");t=o(t,e),r=s(r,c(e))}),u(c(t),r)}})}var i=r(42);t.name="multinomial",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(69)),u=o("permutations",{"number | BigNumber":s,"number, number":function(e,t){var r,n;if(!a(e)||e<0)throw new TypeError("Positive integer value expected in function permutations");if(!a(t)||t<0)throw new TypeError("Positive integer value expected in function permutations");if(t>e)throw new TypeError("second argument k must be less than or equal to first argument n");for(r=1,n=e-t+1;n<=e;n++)r*=n;return r},"BigNumber, BigNumber":function(t,r){var n,a;if(!i(t)||!i(r))throw new TypeError("Positive integer value expected in function permutations");if(r.gt(t))throw new TypeError("second argument k must be less than or equal to first argument n");for(n=new e.BigNumber(1),a=t.minus(r).plus(1);a.lte(t);a=a.plus(1))n=n.times(a);return n}});return u.toTex=void 0,u}function i(e){return e.isInteger()&&e.gte(0)}var a=r(3).isInteger;t.name="permutations",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(89)),o=a("uniform").pickRandom;return o.toTex=void 0,o}t.name="pickRandom",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n,o){function s(e){c=null===e?a:i(String(e))}function u(){return c()}var c;return s(t.randomSeed),o.on("config",function(e,t,r){void 0!==r.randomSeed&&s(e.randomSeed)}),u}var i=r(491),a=i();t.factory=n,t.math=!0},function(e,t,r){"use strict";(function(t){function r(e){var t,r=e.length,n=this,i=0,a=n.i=n.j=0,o=n.S=[];for(r||(e=[r++]);i<s;)o[i]=i++;for(i=0;i<s;i++)o[i]=o[a=d&a+e[i%r]+(t=o[i])],o[a]=t;(n.g=function(e){for(var t,r=0,i=n.i,a=n.j,o=n.S;e--;)t=o[i=d&i+1],r=r*s+o[d&(o[i]=o[a=d&a+t])+(o[a]=t)];return n.i=i,n.j=a,r})(s)}function n(e,t){var r,i=[],a=(typeof e)[0];if(t&&"o"==a)for(r in e)try{i.push(n(e[r],t-1))}catch(e){}return i.length?i:"s"==a?e:e+"\0"}function i(e,t){for(var r,n=e+"",i=0;i<n.length;)t[d&i]=d&(r^=19*t[d&i])+n.charCodeAt(i++);return o(t)}function a(e){try{return l.crypto.getRandomValues(e=new Uint8Array(s)),o(e)}catch(e){return[+new Date,l,l.navigator&&l.navigator.plugins,l.screen,o(f)]}}function o(e){return String.fromCharCode.apply(0,e)}var s=256,u=6,c=52,f=[],l="undefined"==typeof t?window:t,p=Math.pow(s,u),h=Math.pow(2,c),m=2*h,d=s-1,v=Math.random;e.exports=function(t,c){if(c&&c.global===!0)return c.global=!1,Math.random=e.exports(t,c),c.global=!0,Math.random;var l=c&&c.entropy||!1,d=[],v=(i(n(l?[t,o(f)]:0 in arguments?t:a(),3),d),new r(d));return i(o(v.S),f),function(){for(var e=v.g(u),t=p,r=0;e<h;)e=(e+r)*s,t*=s,r=v.g(1);for(;e>=m;)e/=2,t/=2,r>>>=1;return(e+r)/t}},e.exports.resetGlobal=function(){Math.random=v},i(Math.random(),f)}).call(t,r(492))},function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(89)),o=a("uniform").random;return o.toTex=void 0,o}t.name="random",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(89)),o=a("uniform").randomInt;return o.toTex=void 0,o}t.name="randomInt",t.factory=n},function(e,t,r){e.exports=[r(49),r(31),r(496),r(30),r(34),r(127),r(44),r(497),r(121)]},function(e,t,r){"use strict";function n(e,t,n,i){function a(e,t){if(Array.isArray(e)){if(Array.isArray(t)){var r=e.length;if(r!==t.length)return!1;for(var n=0;n<r;n++)if(!a(e[n],t[n]))return!1;return!0}return!1}return!Array.isArray(t)&&o(e,t)}var o=n(r(30)),s=i("deepEqual",{"any, any":function(e,t){return a(e.valueOf(),t.valueOf())}});return s.toTex=void 0,s}t.name="deepEqual",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(0)),u=n(r(15)),c=n(r(26)),f=n(r(16)),l=n(r(8)),p=n(r(6)),h=r(4),m=o("smallerEq",{"boolean, boolean":function(e,t){return e<=t},"number, number":function(e,r){return e<=r||i(e,r,t.epsilon)},"BigNumber, BigNumber":function(e,r){return e.lte(r)||a(e,r,t.epsilon)},"Fraction, Fraction":function(e,t){return 1!==e.compare(t)},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,t){if(!e.equalBase(t))throw new Error("Cannot compare units with different base");return m(e.value,t.value)},"string, string":function(e,t){return e<=t},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=c(e,t,m);break;default:r=u(t,e,m,!0)}break;default:switch(t.storage()){case"sparse":r=u(e,t,m,!1);break;default:r=l(e,t,m)}}return r},"Array, Array":function(e,t){return m(s(e),s(t)).valueOf()},"Array, Matrix":function(e,t){return m(s(e),t)},"Matrix, Array":function(e,t){return m(e,s(t))},"Matrix, any":function(e,t){var r;switch(e.storage()){case"sparse":r=f(e,t,m,!1);break;default:r=p(e,t,m,!1)}return r},"any, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=f(t,e,m,!0);break;default:r=p(t,e,m,!0)}return r},"Array, any":function(e,t){return p(s(e),t,m,!1).valueOf()},"any, Array":function(e,t){return p(s(t),e,m,!0).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+h.operators.smallerEq+"${args[1]}\\right)"},m}var i=r(3).nearlyEqual,a=r(35);t.name="smallerEq",t.factory=n},function(e,t,r){e.exports=[r(499),r(142),r(500),r(143),r(501),r(502),r(503),r(504),r(144),r(505)]},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(27)),s=n(r(43)),u=n(r(28)),c=n(r(22)),f=n(r(31)),l=a("setCartesian",{"Array | Matrix, Array | Matrix":function(e,t){if(0===c(u(e),new o(0))||0===c(u(t),new o(0)))var r=[];else for(var n=i(Array.isArray(e)?e:e.toArray()).sort(f),a=i(Array.isArray(t)?t:t.toArray()).sort(f),r=[],l=0;l<n.length;l++)for(var p=0;p<a.length;p++)r.push([n[l],a[p]]);return Array.isArray(e)&&Array.isArray(t)?r:new s(r)}});return l}var i=r(2).flatten;t.name="setCartesian",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(30)),s=n(r(27)),u=n(r(43)),c=n(r(28)),f=n(r(22)),l=n(r(31)),p=a("setDistinct",{"Array | Matrix":function(e){if(0===f(c(e),new s(0)))var t=[];else{var r=i(Array.isArray(e)?e:e.toArray()).sort(l),t=[];t.push(r[0]);for(var n=1;n<r.length;n++)o(r[n],r[n-1])||t.push(r[n])}return Array.isArray(e)?t:new u(t)}});return p}var i=r(2).flatten;t.name="setDistinct",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,o){var s=n(r(30)),u=n(r(27)),c=n(r(28)),f=n(r(22)),l=n(r(31)),p=o("setIsSubset",{"Array | Matrix, Array | Matrix":function(e,t){if(0===f(c(e),new u(0)))return!0;if(0===f(c(t),new u(0)))return!1;for(var r,n=a(i(Array.isArray(e)?e:e.toArray()).sort(l)),o=a(i(Array.isArray(t)?t:t.toArray()).sort(l)),p=0;p<n.length;p++){r=!1;for(var h=0;h<o.length;h++)if(s(n[p].value,o[h].value)&&n[p].identifier===o[h].identifier){r=!0;break}if(r===!1)return!1}return!0}});return p}var i=r(2).flatten,a=r(2).identify;t.name="setIsSubset",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(30)),s=n(r(27)),u=n(r(28)),c=n(r(22)),f=a("setMultiplicity",{"number | BigNumber | Fraction | Complex, Array | Matrix":function(e,t){if(0===c(u(t),new s(0)))return 0;for(var r=i(Array.isArray(t)?t:t.toArray()),n=0,a=0;a<r.length;a++)o(r[a],e)&&n++;return n}});return f}var i=r(2).flatten;t.name="setMultiplicity",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(e,t){for(var r=[],n=0;n<t.length;n++)"1"===t[n]&&r.push(e[n]);return r}function s(e){for(var t=[],r=e.length-1;r>0;r--)for(var n=0;n<r;n++)e[n].length>e[n+1].length&&(t=e[n],e[n]=e[n+1],e[n+1]=t);return e}var u=n(r(27)),c=n(r(28)),f=n(r(22)),l=n(r(31)),p=a("setPowerset",{"Array | Matrix":function(e){if(0===f(c(e),new u(0)))return[];for(var t=i(Array.isArray(e)?e:e.toArray()).sort(l),r=[],n=0;n.toString(2).length<=t.length;)r.push(o(t,n.toString(2).split("").reverse())),n++;return s(r)}});return p}var i=r(2).flatten;t.name="setPowerset",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(30)),s=n(r(31)),u=a("setSize",{"Array | Matrix":function(e){return Array.isArray(e)?i(e).length:i(e.toArray()).length},"Array | Matrix, boolean":function(e,t){if(t===!1||0===e.length)return Array.isArray(e)?i(e).length:i(e.toArray()).length;for(var r=i(Array.isArray(e)?e:e.toArray()).sort(s),n=1,a=1;a<r.length;a++)o(r[a],r[a-1])||n++;return n}});return u}var i=r(2).flatten;t.name="setSize",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=n(r(27)),s=n(r(64)),u=n(r(28)),c=n(r(22)),f=n(r(143)),l=n(r(144)),p=a("setUnion",{"Array | Matrix, Array | Matrix":function(e,t){if(0===c(u(e),new o(0)))return i(t);if(0===c(u(t),new o(0)))return i(e);var r=i(e),n=i(t);return s(l(r,n),f(r,n))}});return p}var i=r(2).flatten;t.name="setUnion",t.factory=n},function(e,t,r){e.exports=[r(507)]},function(e,t,r){"use strict";function n(e,t,r,n){function l(e){var t,r=e*e,n=u[0][4]*r,i=r;for(t=0;t<3;t+=1)n=(n+u[0][t])*r,i=(i+c[0][t])*r;return e*(n+u[0][3])/(i+c[0][3])}function p(e){var t,r=u[1][8]*e,n=e;for(t=0;t<7;t+=1)r=(r+u[1][t])*e,n=(n+c[1][t])*e;var i=(r+u[1][7])/(n+c[1][7]),a=parseInt(16*e)/16,o=(e-a)*(e+a);return Math.exp(-a*a)*Math.exp(-o)*i}function h(e){var t,r=1/(e*e),n=u[2][5]*r,i=r;for(t=0;t<4;t+=1)n=(n+u[2][t])*r,i=(i+c[2][t])*r;var a=r*(n+u[2][4])/(i+c[2][4]);a=(s-a)/e,r=parseInt(16*e)/16;var o=(e-r)*(e+r);return Math.exp(-r*r)*Math.exp(-o)*a}var m=n("erf",{number:function(e){var t=Math.abs(e);return t>=f?a(e):t<=o?a(e)*l(t):t<=4?a(e)*(1-p(t)):a(e)*(1-h(t))},BigNumber:function(t){return new e.BigNumber(m(t.toNumber()))},"Array | Matrix":function(e){return i(e,m)}});return m.toTex={1:"erf\\left(${args[0]}\\right)"},m}var i=r(1),a=r(3).sign,o=.46875,s=.5641895835477563,u=[[3.1611237438705655,113.86415415105016,377.485237685302,3209.3775891384694,.18577770618460315],[.5641884969886701,8.883149794388377,66.11919063714163,298.6351381974001,881.952221241769,1712.0476126340707,2051.0783778260716,1230.3393547979972,2.1531153547440383e-8],[.30532663496123236,.36034489994980445,.12578172611122926,.016083785148742275,.0006587491615298378,.016315387137302097]],c=[[23.601290952344122,244.02463793444417,1282.6165260773723,2844.236833439171],[15.744926110709835,117.6939508913125,537.1811018620099,1621.3895745666903,3290.7992357334597,4362.619090143247,3439.3676741437216,1230.3393548037495],[2.568520192289822,1.8729528499234604,.5279051029514285,.06051834131244132,.0023352049762686918]],f=Math.pow(2,53);t.name="erf",t.factory=n},function(e,t,r){e.exports=[r(509),r(112),r(113),r(145),r(116),r(510),r(511),r(512),r(513),r(141),r(146)]},function(e,t,r){"use strict";function n(e,t,n,a){function o(e){if(e=i(e.valueOf()),0===e.length)throw new Error("Cannot calculate median absolute deviation of an empty array");var t=c(e);return c(u(e,function(e){return s(f(e,t))}))}var s=n(r(29)),u=n(r(139)),c=n(r(145)),f=n(r(21)),l=a("mad",{"Array | Matrix":o,"...":function(e){return o(e)}});return l.toTex=void 0,l}var i=r(2).flatten;t.name="mad",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){function a(e){e=i(e.valueOf());var t=e.length;if(0==t)throw new Error("Cannot calculate mode of an empty array");var r={},n=[],a=0;for(var o in e)e[o]in r||(r[e[o]]=0),r[e[o]]++,r[e[o]]==a?n.push(e[o]):r[e[o]]>a&&(a=r[e[o]],n=[e[o]]);return n}var o=n("mode",{"Array | Matrix":a,"...":function(e){return a(e)}});return o}var i=r(2).flatten;t.name="mode",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){function o(e){var t=void 0;if(i(e,function(e){t=void 0===t?e:s(t,e)}),void 0===t)throw new Error("Cannot calculate prod of an empty array");return t}var s=n(r(23)),u=a("prod",{"Array | Matrix":o,"Array | Matrix, number | BigNumber":function(e,t){throw new Error("prod(A, dim) is not yet supported")},"...":function(e){return o(e)}});return u.toTex=void 0,u}var i=r(42);t.name="prod",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,u){function c(t,r,n){var o,u,c;if(arguments.length<2||arguments.length>3)throw new SyntaxError("Function quantileSeq requires two or three parameters");if(s(t)){if(n=n||!1,"boolean"==typeof n){if(u=t.valueOf(),a(r)){if(r<0)throw new Error("N/prob must be non-negative");if(r<=1)return f(u,r,n);if(r>1){if(!i(r))throw new Error("N must be a positive integer");var l=r+1;o=new Array(r);for(var p=0;p<r;)o[p]=f(u,++p/l,n);return o}}if(e.isBigNumber(r)){if(r.isNegative())throw new Error("N/prob must be non-negative");if(c=new r.constructor(1),r.lte(c))return f(u,r,n);if(r.gt(c)){if(!r.isInteger())throw new Error("N must be a positive integer");var h=r.toNumber();if(h>4294967295)throw new Error("N must be less than or equal to 2^32-1, as that is the maximum length of an Array");var l=new e.BigNumber(h+1);o=new Array(h);for(var p=0;p<h;)o[p]=f(u,new e.BigNumber(++p).div(l),n);
/src/dist/math.min.js-54-return o}}if(Array.isArray(r)){o=new Array(r.length);for(var p=0;p<o.length;++p){var m=r[p];if(a(m)){if(m<0||m>1)throw new Error("Probability must be between 0 and 1, inclusive")}else{if(!e.isBigNumber(m))throw new TypeError("Unexpected type of argument in function quantileSeq");if(c=new m.constructor(1),m.isNegative()||m.gt(c))throw new Error("Probability must be between 0 and 1, inclusive")}o[p]=f(u,m,n)}return o}throw new TypeError("Unexpected type of argument in function quantileSeq")}throw new TypeError("Unexpected type of argument in function quantileSeq")}throw new TypeError("Unexpected type of argument in function quantileSeq")}function f(e,t,r){var n=o(e),i=n.length;if(0===i)throw new Error("Cannot calculate quantile of an empty sequence");if(a(t)){var s=t*(i-1),u=s%1;if(0===u){var c=r?n[s]:h(n,s);return d(c),c}var f,v,g=Math.floor(s);if(r)f=n[g],v=n[g+1];else{v=h(n,g+1),f=n[g];for(var y=0;y<g;++y)m(n[y],f)>0&&(f=n[y])}return d(f),d(v),l(p(f,1-u),p(v,u))}var s=t.times(i-1);if(s.isInteger()){s=s.toNumber();var c=r?n[s]:h(n,s);return d(c),c}var f,v,g=s.floor(),u=s.minus(g),x=g.toNumber();if(r)f=n[x],v=n[x+1];else{v=h(n,x+1),f=n[x];for(var y=0;y<x;++y)m(n[y],f)>0&&(f=n[y])}d(f),d(v);var w=new u.constructor(1);return l(p(f,w.minus(u)),p(v,u))}var l=n(r(18)),p=n(r(12)),h=n(r(88)),m=n(r(49)),d=u({"number | BigNumber | Unit":function(e){return e}});return c}var i=r(3).isInteger,a=r(3).isNumber,o=r(2).flatten,s=r(46);t.name="quantileSeq",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){function a(e,t){if(0==e.length)throw new SyntaxError("Function std requires one or more parameters (0 provided)");return o(s.apply(null,arguments))}var o=n(r(56)),s=n(r(146)),u=i("std",{"Array | Matrix":a,"Array | Matrix, string":a,"...":function(e){return a(e)}});return u.toTex=void 0,u}t.name="std",t.factory=n},function(e,t,r){e.exports=[r(98),r(515)]},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("print",{"string, Object":i,"string, Object, number | Object":i});return a.toTex=void 0,a}function i(e,t,r){return e.replace(/\$([\w\.]+)/g,function(e,n){for(var i=n.split("."),s=t[i.shift()];i.length&&void 0!==s;){var u=i.shift();s=u?s[u]:s+"."}return void 0!==s?a(s)?s:o(s,r):e})}var a=r(9).isString,o=r(9).format;t.name="print",t.factory=n},function(e,t,r){e.exports=[r(517),r(147),r(518),r(519),r(520),r(521),r(522),r(523),r(524),r(525),r(526),r(527),r(528),r(529),r(530),r(531),r(532),r(533),r(534),r(535),r(536),r(537),r(538),r(539),r(540)]},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("acos",{number:function(r){return r>=-1&&r<=1||t.predictable?Math.acos(r):new e.Complex(r,0).acos()},Complex:function(e){return e.acos()},BigNumber:function(e){return e.acos()},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\cos^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="acos",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("acot",{number:function(e){return Math.atan(1/e)},Complex:function(e){return e.acot()},BigNumber:function(t){return new e.BigNumber(1).div(t).atan()},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\cot^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="acot",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("acoth",{number:function(r){return r>=1||r<=-1||t.predictable?isFinite(r)?(Math.log((r+1)/r)+Math.log(r/(r-1)))/2:0:new e.Complex(r,0).acoth()},Complex:function(e){return e.acoth()},BigNumber:function(t){return new e.BigNumber(1).div(t).atanh()},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\coth^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="acoth",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("acsc",{number:function(r){return r<=-1||r>=1||t.predictable?Math.asin(1/r):new e.Complex(r,0).acsc()},Complex:function(e){return e.acsc()},BigNumber:function(t){return new e.BigNumber(1).div(t).asin()},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\csc^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="acsc",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("acsch",{number:function(e){return e=1/e,Math.log(e+Math.sqrt(e*e+1))},Complex:function(e){return e.acsch()},BigNumber:function(t){return new e.BigNumber(1).div(t).asinh()},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\mathrm{csch}^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="acsch",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("asec",{number:function(r){return r<=-1||r>=1||t.predictable?Math.acos(1/r):new e.Complex(r,0).asec()},Complex:function(e){return e.asec()},BigNumber:function(t){return new e.BigNumber(1).div(t).acos()},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\sec^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="asec",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,a){var o=(a.find(n(r(147)),["Complex"]),a("asech",{number:function(r){if(r<=1&&r>=-1||t.predictable){r=1/r;var n=Math.sqrt(r*r-1);return r>0||t.predictable?Math.log(n+r):new e.Complex(Math.log(n-r),Math.PI)}return new e.Complex(r,0).asech()},Complex:function(e){return e.asech()},BigNumber:function(t){return new e.BigNumber(1).div(t).acosh()},"Array | Matrix":function(e){return i(e,o)}}));return o.toTex={1:"\\mathrm{sech}^{-1}\\left(${args[0]}\\right)"},o}var i=r(1);t.name="asech",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("asin",{number:function(r){return r>=-1&&r<=1||t.predictable?Math.asin(r):new e.Complex(r,0).asin()},Complex:function(e){return e.asin()},BigNumber:function(e){return e.asin()},"Array | Matrix":function(e){return i(e,a,!0)}});return a.toTex={1:"\\sin^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="asin",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("asinh",{number:Math.asinh||function(e){return Math.log(Math.sqrt(e*e+1)+e)},Complex:function(e){return e.asinh()},BigNumber:function(e){return e.asinh()},"Array | Matrix":function(e){return i(e,a,!0)}});return a.toTex={1:"\\sinh^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="asinh",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("atan",{number:function(e){return Math.atan(e)},Complex:function(e){return e.atan()},BigNumber:function(e){return e.atan()},"Array | Matrix":function(e){return i(e,a,!0)}});return a.toTex={1:"\\tan^{-1}\\left(${args[0]}\\right)"},a}var i=r(1);t.name="atan",t.factory=n},function(e,t,r){"use strict";function n(e,t,n,i){var a=n(r(0)),o=n(r(24)),s=n(r(15)),u=n(r(133)),c=n(r(17)),f=n(r(16)),l=n(r(8)),p=n(r(6)),h=i("atan2",{"number, number":Math.atan2,"BigNumber, BigNumber":function(t,r){return e.BigNumber.atan2(t,r)},"Matrix, Matrix":function(e,t){var r;switch(e.storage()){case"sparse":switch(t.storage()){case"sparse":r=u(e,t,h,!1);break;default:r=o(t,e,h,!0)}break;default:switch(t.storage()){case"sparse":r=s(e,t,h,!1);break;default:r=l(e,t,h)}}return r},"Array, Array":function(e,t){return h(a(e),a(t)).valueOf()},"Array, Matrix":function(e,t){return h(a(e),t)},"Matrix, Array":function(e,t){return h(e,a(t))},"Matrix, number | BigNumber":function(e,t){var r;switch(e.storage()){case"sparse":r=c(e,t,h,!1);break;default:r=p(e,t,h,!1)}return r},"number | BigNumber, Matrix":function(e,t){var r;switch(t.storage()){case"sparse":r=f(t,e,h,!0);break;default:r=p(t,e,h,!0)}return r},"Array, number | BigNumber":function(e,t){return p(a(e),t,h,!1).valueOf()},"number | BigNumber, Array":function(e,t){return p(a(t),e,h,!0).valueOf()}});return h.toTex={2:"\\mathrm{atan2}\\left(${args}\\right)"},h}t.name="atan2",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("atanh",{number:function(r){return r<=1&&r>=-1||t.predictable?a(r):new e.Complex(r,0).atanh()},Complex:function(e){return e.atanh()},BigNumber:function(e){return e.atanh()},"Array | Matrix":function(e){return i(e,o,!0)}});return o.toTex={1:"\\tanh^{-1}\\left(${args[0]}\\right)"},o}var i=r(1),a=Math.atanh||function(e){return Math.log((1+e)/(1-e))/2};t.name="atanh",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("cos",{number:Math.cos,Complex:function(e){return e.cos()},BigNumber:function(e){return e.cos()},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cos is no angle");return a(t.value)},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\cos\\left(${args[0]}\\right)"},a}var i=r(1);t.name="cos",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("cosh",{number:a,Complex:function(e){return e.cosh()},BigNumber:function(e){return e.cosh()},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cosh is no angle");return o(t.value)},"Array | Matrix":function(e){return i(e,o)}});return o.toTex={1:"\\cosh\\left(${args[0]}\\right)"},o}var i=r(1),a=Math.cosh||function(e){return(Math.exp(e)+Math.exp(-e))/2};t.name="cosh",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("cot",{number:function(e){return 1/Math.tan(e)},Complex:function(e){return e.cot()},BigNumber:function(t){return new e.BigNumber(1).div(t.tan())},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cot is no angle");return a(t.value)},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\cot\\left(${args[0]}\\right)"},a}var i=r(1);t.name="cot",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("coth",{number:i,Complex:function(e){return e.coth()},BigNumber:function(t){return new e.BigNumber(1).div(t.tanh())},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function coth is no angle");return o(t.value)},"Array | Matrix":function(e){return a(e,o)}});return o.toTex={1:"\\coth\\left(${args[0]}\\right)"},o}function i(e){var t=Math.exp(2*e);return(t+1)/(t-1)}var a=r(1);t.name="coth",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("csc",{number:function(e){return 1/Math.sin(e)},Complex:function(e){return e.csc()},BigNumber:function(t){return new e.BigNumber(1).div(t.sin())},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function csc is no angle");return a(t.value)},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\csc\\left(${args[0]}\\right)"},a}var i=r(1);t.name="csc",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("csch",{number:i,Complex:function(e){return e.csch()},BigNumber:function(t){return new e.BigNumber(1).div(t.sinh())},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function csch is no angle");return o(t.value)},"Array | Matrix":function(e){return a(e,o)}});return o.toTex={1:"\\mathrm{csch}\\left(${args[0]}\\right)"},o}function i(e){return 0==e?Number.POSITIVE_INFINITY:Math.abs(2/(Math.exp(e)-Math.exp(-e)))*o(e)}var a=r(1),o=r(3).sign;t.name="csch",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("sec",{number:function(e){return 1/Math.cos(e)},Complex:function(e){return e.sec()},BigNumber:function(t){return new e.BigNumber(1).div(t.cos())},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sec is no angle");return a(t.value)},"Array | Matrix":function(e){return i(e,a)}});return a.toTex={1:"\\sec\\left(${args[0]}\\right)"},a}var i=r(1);t.name="sec",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("sech",{number:i,Complex:function(e){return e.sech()},BigNumber:function(t){return new e.BigNumber(1).div(t.cosh())},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sech is no angle");return o(t.value)},"Array | Matrix":function(e){return a(e,o)}});return o.toTex={1:"\\mathrm{sech}\\left(${args[0]}\\right)"},o}function i(e){return 2/(Math.exp(e)+Math.exp(-e))}var a=r(1);t.name="sech",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("sin",{number:Math.sin,Complex:function(e){return e.sin()},BigNumber:function(e){return e.sin()},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sin is no angle");return a(t.value)},"Array | Matrix":function(e){return i(e,a,!0)}});return a.toTex={1:"\\sin\\left(${args[0]}\\right)"},a}var i=r(1);t.name="sin",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("sinh",{number:a,Complex:function(e){return e.sinh()},BigNumber:function(e){return e.sinh()},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sinh is no angle");return o(t.value)},"Array | Matrix":function(e){return i(e,o,!0)}});return o.toTex={1:"\\sinh\\left(${args[0]}\\right)"},o}var i=r(1),a=Math.sinh||function(e){return(Math.exp(e)-Math.exp(-e))/2};t.name="sinh",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("tan",{number:Math.tan,Complex:function(e){return e.tan()},BigNumber:function(e){return e.tan()},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function tan is no angle");return a(t.value)},"Array | Matrix":function(e){return i(e,a,!0)}});return a.toTex={1:"\\tan\\left(${args[0]}\\right)"},a}var i=r(1);t.name="tan",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var o=n("tanh",{number:a,Complex:function(e){return e.tanh()},BigNumber:function(e){return e.tanh()},Unit:function(t){if(!t.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function tanh is no angle");return o(t.value)},"Array | Matrix":function(e){return i(e,o,!0)}});return o.toTex={1:"\\tanh\\left(${args[0]}\\right)"},o}var i=r(1),a=Math.tanh||function(e){var t=Math.exp(2*e);return(t-1)/(t+1)};t.name="tanh",t.factory=n},function(e,t,r){e.exports=[r(542)]},function(e,t,r){"use strict";function n(e,t,n,i){var a=r(4),o=n(r(0)),s=n(r(8)),u=n(r(6)),c=i("to",{"Unit, Unit | string":function(e,t){return e.to(t)},"Matrix, Matrix":function(e,t){return s(e,t,c)},"Array, Array":function(e,t){return c(o(e),o(t)).valueOf()},"Array, Matrix":function(e,t){return c(o(e),t)},"Matrix, Array":function(e,t){return c(e,o(t))},"Matrix, any":function(e,t){return u(e,t,c,!1)},"any, Matrix":function(e,t){return u(t,e,c,!0)},"Array, any":function(e,t){return u(o(e),t,c,!1).valueOf()},"any, Array":function(e,t){return u(o(t),e,c,!0).valueOf()}});return c.toTex={2:"\\left(${args[0]}"+a.operators.to+"${args[1]}\\right)"},c}t.name="to",t.factory=n},function(e,t,r){e.exports=[r(120),r(48),r(57),r(75),r(55),r(544),r(82),r(545),r(76)]},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("isPrime",{number:function(e){if(e<2)return!1;if(2==e)return!0;if(e%2==0)return!1;for(var t=3;t*t<=e;t+=2)if(e%t==0)return!1;return!0},BigNumber:function(t){if(t.lt(2))return!1;if(t.equals(2))return!0;if(t.mod(2).isZero())return!1;for(var r=e.BigNumber(3);r.times(r).lte(t);r=r.plus(1))if(t.mod(r).isZero())return!1;return!0},"Array | Matrix":function(e){return i(e,a)}});return a}var i=r(1);t.name="isPrime",t.factory=n},function(e,t,r){"use strict";function n(e,t,r,n){var a=n("isNaN",{number:function(e){return Number.isNaN(e)},BigNumber:function(e){return e.isNaN()},Fraction:function(e){return!1},Complex:function(e){return e.isNaN()},Unit:function(e){return Number.isNaN(e.value)},"Array | Matrix":function(e){return i(e,Number.isNaN)}});return a}var i=r(1);r(3);t.name="isNaN",t.factory=n},function(e,t,r){e.exports=[r(547)]},function(e,t,r){"use strict";function n(e,t,r,n){return function(t,r){var n=e[r&&r.mathjs];return n&&"function"==typeof n.fromJSON?n.fromJSON(r):r}}t.name="reviver",t.path="json",t.factory=n},function(e,t,r){"use strict";var n=r(50),i=r(10),a=r(51);e.exports=[{name:"ArgumentsError",path:"error",factory:function(){return n}},{name:"DimensionError",path:"error",factory:function(){return i}},{name:"IndexError",path:"error",factory:function(){return a}}]}])});
##############################################
/src/dist/math.js-6922-   *
/src/dist/math.js:6923:   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
/src/dist/math.js-6924-   *     nodes[2].compile(math).eval(); // 12
##############################################
/src/dist/math.js-7956-   *
/src/dist/math.js:7957:   *     node = math.parse('plot(sin(x), x)', nodes);
/src/dist/math.js-7958-   *
##############################################
/src/dist/math.js-20293-   *     math.simplify('2 * 3 * x', {x: 4});        // Node {24}
/src/dist/math.js:20294:   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');
/src/dist/math.js-20295-   *     math.simplify(f);                          // Node {2 * x}
##############################################
/src/dist/math.js-37015-   *     var b = new Unit(null, name);
/src/dist/math.js:37016:   *     var c = Unit.parse(str);
/src/dist/math.js-37017-   *
##############################################
/src/dist/math.js-37019-   *     var a = new Unit(5, 'cm');               // 50 mm
/src/dist/math.js:37020:   *     var b = Unit.parse('23 kg');             // 23 kg
/src/dist/math.js-37021-   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m
##############################################
/src/dist/math.js-37041-    if (name != undefined) {
/src/dist/math.js:37042:      var u = Unit.parse(name);
/src/dist/math.js-37043-      this.units = u.units;
##############################################
/src/dist/math.js-37802-      //other = new Unit(null, valuelessUnit);
/src/dist/math.js:37803:      other = Unit.parse(valuelessUnit);
/src/dist/math.js-37804-      if (!this.equalBase(other)) {
##############################################
/src/dist/math.js-39884-  // Clone to create the other unit systems
/src/dist/math.js:39885:  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
/src/dist/math.js-39886-  UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};
##############################################
/src/dist/math.js-39892-  
/src/dist/math.js:39893:  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
/src/dist/math.js-39894-  UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};
##############################################
/src/dist/math.js-39906-  // Choose a unit system to seed the auto unit system.
/src/dist/math.js:39907:  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
/src/dist/math.js-39908-
##############################################
/src/dist/math.js-40134-      try {
/src/dist/math.js:40135:        defUnit = Unit.parse(definition, {allowNoUnits: true});
/src/dist/math.js-40136-      }
##############################################
/src/dist/math.js-40319-
/src/dist/math.js:40320:      return type.Unit.parse(x); // a unit with value, like '5cm'
/src/dist/math.js-40321-    },
##############################################
/src/dist/math.js-40490-  function fixedUnit(str) {
/src/dist/math.js:40491:    var unit = type.Unit.parse(str);
/src/dist/math.js-40492-    unit.fixPrefix = true;
##############################################
/src/dist/math.js-45435-   *
/src/dist/math.js:45436:   *     math.parse(expr)
/src/dist/math.js:45437:   *     math.parse(expr, options)
/src/dist/math.js:45438:   *     math.parse([expr1, expr2, expr3, ...])
/src/dist/math.js:45439:   *     math.parse([expr1, expr2, expr3, ...], options)
/src/dist/math.js-45440-   *
##############################################
/src/dist/math.js-45442-   *
/src/dist/math.js:45443:   *     var node = math.parse('sqrt(3^2 + 4^2)');
/src/dist/math.js-45444-   *     node.compile().eval(); // 5
##############################################
/src/dist/math.js-45446-   *     var scope = {a:3, b:4}
/src/dist/math.js:45447:   *     var node = math.parse('a * b'); // 12
/src/dist/math.js-45448-   *     var code = node.compile();
##############################################
/src/dist/math.js-45452-   *
/src/dist/math.js:45453:   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
/src/dist/math.js-45454-   *     nodes[2].compile().eval(); // 12
##############################################
/src/dist/math.js-46343-   *     math.derivative('x^2', 'x').eval({x: 4});        // number 8
/src/dist/math.js:46344:   *     var f = math.parse('x^2');
/src/dist/math.js:46345:   *     var x = math.parse('x');
/src/dist/math.js-46346-   *     math.derivative(f, x);                           // Node {2 * x}
##############################################
/src/dist/math.js-47315-   *
/src/dist/math.js:47316:   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');
/src/dist/math.js-47317-   *     math.simplify.simpifyCore(f);                          // Node {2 * x}
##############################################
/src/dist/math.js-47472-   *     math.simplify.resolve('x + y', {x:1, y:2}) // Node {1 + 2}
/src/dist/math.js:47473:   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
/src/dist/math.js-47474-   *     math.simplify('x+y', {x:2, y:'x+x'}).toString(); // "6"
##############################################
/src/dist/math.js-47488-        } else if (typeof value === 'number') {
/src/dist/math.js:47489:            return math.parse(String(value));
/src/dist/math.js-47490-        }
##############################################
/src/dist/math.js-56018-		// numeric, hex or date detection
/src/dist/math.js:56019:		xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
/src/dist/math.js:56020:		yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
/src/dist/math.js-56021-		oFxNcL, oFyNcL;
##############################################
/src/benchmark/expression_parser.js-12-var scope = {x: 2};
/src/benchmark/expression_parser.js:13:var compiled = math.parse(expr).compile();
/src/benchmark/expression_parser.js-14-
##############################################
/src/benchmark/expression_parser.js-22-    .add(pad('expression parse and compile'), function() {
/src/benchmark/expression_parser.js:23:      var c = math.parse('2 + 3 * sin(pi / 4) - 4x').compile();
/src/benchmark/expression_parser.js-24-    })
/src/benchmark/expression_parser.js-25-    .add(pad('expression parse'), function() {
/src/benchmark/expression_parser.js:26:      var node = math.parse('2 + 3 * sin(pi / 4) - 4x');
/src/benchmark/expression_parser.js-27-    })
