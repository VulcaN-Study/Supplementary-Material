/src/electron.d.ts-1455-     */
/src/electron.d.ts:1456:    eval(code: string): void;
/src/electron.d.ts-1457-    /**
##############################################
/src/electron.d.ts-2808-     * forwarded to the ClientRequest constructor. The net.request method would be used
/src/electron.d.ts:2809:     * to issue both secure and insecure HTTP requests according to the specified
/src/electron.d.ts-2810-     * protocol scheme in the options object.
##############################################
/src/electron.d.ts-4391-                                        * The non-standard features (features not handled by Chromium or Electron) given
/src/electron.d.ts:4392:                                        * to `window.open()`.
/src/electron.d.ts-4393-                                        */
##############################################
/src/electron.d.ts-4408-                                        * The non-standard features (features not handled by Chromium or Electron) given
/src/electron.d.ts:4409:                                        * to `window.open()`.
/src/electron.d.ts-4410-                                        */
##############################################
/src/electron.d.ts-4425-                                        * The non-standard features (features not handled by Chromium or Electron) given
/src/electron.d.ts:4426:                                        * to `window.open()`.
/src/electron.d.ts-4427-                                        */
##############################################
/src/electron.d.ts-4442-                                        * The non-standard features (features not handled by Chromium or Electron) given
/src/electron.d.ts:4443:                                        * to `window.open()`.
/src/electron.d.ts-4444-                                        */
##############################################
/src/electron.d.ts-4970-    debugger: Debugger;
/src/electron.d.ts:4971:    devToolsWebContents: WebContents;
/src/electron.d.ts-4972-    hostWebContents: WebContents;
##############################################
/src/electron.d.ts-5563-     */
/src/electron.d.ts:5564:    preload?: string;
/src/electron.d.ts-5565-    /**
##############################################
/src/electron.d.ts-7500-     * Whether to enable DevTools. If it is set to false, can not use
/src/electron.d.ts:7501:     * BrowserWindow.webContents.openDevTools() to open DevTools. Default is true.
/src/electron.d.ts-7502-     */
/src/electron.d.ts:7503:    devTools?: boolean;
/src/electron.d.ts-7504-    /**
##############################################
/src/electron.d.ts-7506-     */
/src/electron.d.ts:7507:    nodeIntegration?: boolean;
/src/electron.d.ts-7508-    /**
##############################################
/src/electron.d.ts-7511-     */
/src/electron.d.ts:7512:    nodeIntegrationInWorker?: boolean;
/src/electron.d.ts-7513-    /**
##############################################
/src/electron.d.ts-7516-     * integration is turned on or off. The value should be the absolute file path to
/src/electron.d.ts:7517:     * the script. When node integration is turned off, the preload script can
/src/electron.d.ts-7518-     * reintroduce Node global symbols back to the global scope. See example .
/src/electron.d.ts-7519-     */
/src/electron.d.ts:7520:    preload?: string;
/src/electron.d.ts-7521-    /**
##############################################
/src/electron.d.ts-7523-     * compatible with the Chromium OS-level sandbox and disabling the Node.js engine.
/src/electron.d.ts:7524:     * This is not the same as the nodeIntegration option and the APIs available to the
/src/electron.d.ts:7525:     * preload script are more limited. Read more about the option . This option is
/src/electron.d.ts-7526-     * currently experimental and may change or be removed in future Electron releases.
##############################################
/src/electron.d.ts-7554-     * When false, it will disable the same-origin policy (usually using testing
/src/electron.d.ts:7555:     * websites by people), and set allowRunningInsecureContent to true if this options
/src/electron.d.ts-7556-     * has not been set by user. Default is true.
/src/electron.d.ts-7557-     */
/src/electron.d.ts:7558:    webSecurity?: boolean;
/src/electron.d.ts-7559-    /**
##############################################
/src/electron.d.ts-7562-     */
/src/electron.d.ts:7563:    allowRunningInsecureContent?: boolean;
/src/electron.d.ts-7564-    /**
##############################################
/src/electron.d.ts-7636-    /**
/src/electron.d.ts:7637:     * Whether to run Electron APIs and the specified preload script in a separate
/src/electron.d.ts:7638:     * JavaScript context. Defaults to false. The context that the preload script runs
/src/electron.d.ts-7639-     * in will still have full access to the document and window globals but it will
##############################################
/src/electron.d.ts-7641-     * isolated from any changes made to the global environment by the loaded page. The
/src/electron.d.ts:7642:     * Electron API will only be available in the preload script and not the loaded
/src/electron.d.ts-7643-     * page. This option should be used when loading potentially untrusted remote
/src/electron.d.ts:7644:     * content to ensure the loaded content cannot tamper with the preload script and
/src/electron.d.ts-7645-     * any Electron APIs being used. This option uses the same technique used by . You
##############################################
/src/electron.d.ts-7649-     */
/src/electron.d.ts:7650:    contextIsolation?: boolean;
/src/electron.d.ts-7651-  }
##############################################
/src/electron.d.ts-7713-     * Emitted when Electron has loaded its internal initialization script and is
/src/electron.d.ts:7714:     * beginning to load the web page or the main script. It can be used by the preload
/src/electron.d.ts-7715-     * script to add removed Node global symbols back to the global scope when node
##############################################
/src/install.js-30-  arch: process.env.npm_config_arch,
/src/install.js:31:  strictSSL: process.env.npm_config_strict_ssl === 'true',
/src/install.js-32-  force: process.env.force_no_cache === 'true',
##############################################
/src/install.js-40-    if (err) return onerror(err)
/src/install.js:41:    fs.writeFile(path.join(__dirname, 'path.txt'), platformPath, function (err) {
/src/install.js-42-      if (err) return onerror(err)
