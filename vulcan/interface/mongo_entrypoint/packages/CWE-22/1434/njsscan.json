{
  "errors": [
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 27,
          "line": 1
        },
        "extra": {
          "line": "Alex K. Wolfe <alexkwolfe@gmail.com>",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/.mailmap",
        "start": {
          "col": 26,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 16
        },
        "extra": {
          "line": "# don't need these in the npm package.",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/.npmignore",
        "start": {
          "col": 1,
          "line": 16
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# Authors sorted by whether or not they're me",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/AUTHORS",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 8,
          "line": 1
        },
        "extra": {
          "line": "The npm application",
          "message": "Syntax error"
        },
        "path": "/src/LICENSE",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 1
        },
        "extra": {
          "line": "# vim: set softtabstop=2 shiftwidth=2:",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/Makefile",
        "start": {
          "col": 1,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 2
        },
        "extra": {
          "line": "# Usage: gen-changelog [comittish]",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/scripts/gen-changelog",
        "start": {
          "col": 1,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 3
        },
        "extra": {
          "line": "# Land a pull request",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/scripts/pr",
        "start": {
          "col": 1,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 5,
          "line": 2
        },
        "extra": {
          "line": "if [ \"x$npm_config_node_gyp\" = \"x\" ]; then",
          "message": "Syntax error"
        },
        "path": "/src/bin/node-gyp-bin/node-gyp",
        "start": {
          "col": 4,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 46,
          "line": 2
        },
        "extra": {
          "line": "(set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/bin/npm",
        "start": {
          "col": 45,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 46,
          "line": 2
        },
        "extra": {
          "line": "(set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/bin/npx",
        "start": {
          "col": 45,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 26,
          "line": 2
        },
        "extra": {
          "line": "node . install --save $1@$2 &&\\",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/scripts/dep-update",
        "start": {
          "col": 25,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 37,
          "line": 2
        },
        "extra": {
          "line": "node . install --save --save-dev $1@$2 &&\\",
          "message": "Lexical error: unrecognised symbol, in token rule:@"
        },
        "path": "/src/scripts/dev-dep-update",
        "start": {
          "col": 36,
          "line": 2
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "LexicalError",
        "end": {
          "col": 2,
          "line": 3
        },
        "extra": {
          "line": "# set configurations that will be \"sticky\" on this system,",
          "message": "Lexical error: unrecognised symbol, in token rule:#"
        },
        "path": "/src/configure",
        "start": {
          "col": 1,
          "line": 3
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    },
    {
      "data": {
        "check_id": "ParseError",
        "end": {
          "col": 8,
          "line": 1
        },
        "extra": {
          "line": "The MIT License (MIT)",
          "message": "Syntax error"
        },
        "path": "/src/docs/LICENSE",
        "start": {
          "col": 5,
          "line": 1
        }
      },
      "message": "SemgrepCoreRuntimeErrors"
    }
  ],
  "nodejs": {
    "node_insecure_random_generator": {
      "files": [
        {
          "file_path": "/src/lib/xmas.js",
          "match_lines": [
            32,
            32
          ],
          "match_position": [
            37,
            48
          ],
          "match_string": "          '\\u001b[' + oc[Math.floor(Math.random() * oc.length)] + 'm' +"
        },
        {
          "file_path": "/src/lib/xmas.js",
          "match_lines": [
            33,
            33
          ],
          "match_position": [
            24,
            35
          ],
          "match_string": "          o[Math.floor(Math.random() * o.length)]"
        },
        {
          "file_path": "/src/lib/substack.js",
          "match_lines": [
            17,
            17
          ],
          "match_position": [
            22,
            33
          ],
          "match_string": "  var i = Math.floor(Math.random() * isms.length)"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "node_sha1": {
      "files": [
        {
          "file_path": "/src/lib/utils/locker.js",
          "match_lines": [
            15,
            15
          ],
          "match_position": [
            11,
            35
          ],
          "match_string": "  var h = crypto.createHash('sha1').update(p).digest('hex')"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "SHA1 is a a weak hash which is known to have collision. Use a strong hashing function.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "WARNING"
      }
    },
    "regex_dos": {
      "files": [
        {
          "file_path": "/src/lib/install.js",
          "match_lines": [
            43,
            43
          ],
          "match_position": [
            7,
            43
          ],
          "match_string": "  if (/^https?:\\/\\//.test(opts.partialWord)) {"
        },
        {
          "file_path": "/src/lib/install.js",
          "match_lines": [
            48,
            48
          ],
          "match_position": [
            7,
            33
          ],
          "match_string": "  if (/\\//.test(opts.partialWord)) {"
        },
        {
          "file_path": "/src/lib/install/deps.js",
          "match_lines": [
            775,
            775
          ],
          "match_position": [
            30,
            99
          ],
          "match_string": "  if (!preserveSymlinks() && /^[.][.][\\\\/]/.test(path.relative(tree.parent.realpath, tree.realpath))) return null"
        }
      ],
      "metadata": {
        "cwe": "CWE-185: Incorrect Regular Expression",
        "description": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.",
        "owasp": "A6: Security Misconfiguration",
        "severity": "WARNING"
      }
    }
  },
  "templates": {}
}
