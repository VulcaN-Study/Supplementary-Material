/src/node_modules/JSONStream/test/destroy_missing.js-24-
/src/node_modules/JSONStream/test/destroy_missing.js:25:var client = net.connect({ port : 9999 }, function() {
/src/node_modules/JSONStream/test/destroy_missing.js-26-    fs.createReadStream(file).pipe(client).on('data', console.log) //.resume();
##############################################
/src/node_modules/JSONStream/test/two-ways.js-31-
/src/node_modules/JSONStream/test/two-ways.js:32:  es.connect(
/src/node_modules/JSONStream/test/two-ways.js-33-    es.readArray(expected),
##############################################
/src/node_modules/JSONStream/test/multiple_objects_error.js-25-
/src/node_modules/JSONStream/test/multiple_objects_error.js:26:var client = net.connect({ port : 9999 }, function() {
/src/node_modules/JSONStream/test/multiple_objects_error.js-27-    var msgs = str + '}';
##############################################
/src/node_modules/JSONStream/test/bool.js-31-
/src/node_modules/JSONStream/test/bool.js:32:  es.connect(
/src/node_modules/JSONStream/test/bool.js-33-    es.readArray(expected),
##############################################
/src/node_modules/JSONStream/test/stringify.js-31-
/src/node_modules/JSONStream/test/stringify.js:32:  es.connect(
/src/node_modules/JSONStream/test/stringify.js-33-    es.readArray(expected),
##############################################
/src/node_modules/JSONStream/test/stringify_object.js-27-    
/src/node_modules/JSONStream/test/stringify_object.js:28:  es.connect(
/src/node_modules/JSONStream/test/stringify_object.js-29-    stringify,
##############################################
/src/node_modules/JSONStream/test/multiple_objects.js-32-
/src/node_modules/JSONStream/test/multiple_objects.js:33:var client = net.connect({ port : 9999 }, function() {
/src/node_modules/JSONStream/test/multiple_objects.js-34-    var msgs = str + ' ' + str + '\n\n' + str
##############################################
/src/node_modules/agent-base/README.md-51-  if (opts.secureEndpoint) {
/src/node_modules/agent-base/README.md:52:    socket = tls.connect(opts);
/src/node_modules/agent-base/README.md-53-  } else {
/src/node_modules/agent-base/README.md:54:    socket = net.connect(opts);
/src/node_modules/agent-base/README.md-55-  }
##############################################
/src/node_modules/agent-base/README.md-105-to the `http.request()`/`https.request()` function call, and is formatted
/src/node_modules/agent-base/README.md:106:to be directly passed to `net.connect()`/`tls.connect()`, or however
/src/node_modules/agent-base/README.md-107-else you want a Socket to be created. Pass the created socket to
##############################################
/src/node_modules/agent-base/index.js-77-    // result of a `url.parse()` call... we need to remove the `path` portion so
/src/node_modules/agent-base/index.js:78:    // that `net.connect()` doesn't attempt to open that as a unix socket file.
/src/node_modules/agent-base/index.js-79-    delete opts.path;
##############################################
/src/node_modules/agent-base/test/test.js-241-      called = true;
/src/node_modules/agent-base/test/test.js:242:      var socket = net.connect(opts);
/src/node_modules/agent-base/test/test.js-243-      fn(null, socket);
##############################################
/src/node_modules/agent-base/test/test.js-269-      called = true;
/src/node_modules/agent-base/test/test.js:270:      return net.connect(opts);
/src/node_modules/agent-base/test/test.js-271-    });
##############################################
/src/node_modules/agent-base/test/test.js-297-        called = true;
/src/node_modules/agent-base/test/test.js:298:        resolve(net.connect(opts));
/src/node_modules/agent-base/test/test.js-299-      });
##############################################
/src/node_modules/agent-base/test/test.js-325-      called = true;
/src/node_modules/agent-base/test/test.js:326:      var socket = net.connect(opts);
/src/node_modules/agent-base/test/test.js-327-      fn(null, socket);
##############################################
/src/node_modules/agent-base/test/test.js-403-    var agent = new Agent(function(req, opts, fn) {
/src/node_modules/agent-base/test/test.js:404:      var socket = net.connect(opts);
/src/node_modules/agent-base/test/test.js-405-      fn(null, socket);
##############################################
/src/node_modules/agent-base/test/test.js-505-      assert(opts.secureEndpoint);
/src/node_modules/agent-base/test/test.js:506:      var socket = tls.connect(opts);
/src/node_modules/agent-base/test/test.js-507-      fn(null, socket);
##############################################
/src/node_modules/agent-base/test/test.js-649-    var agent = new Agent(function(req, opts, fn) {
/src/node_modules/agent-base/test/test.js:650:      var socket = net.connect(opts);
/src/node_modules/agent-base/test/test.js-651-      fn(null, socket);
##############################################
/src/node_modules/agent-base/test/test.js-707-    var agent = new Agent(function(req, opts, fn) {
/src/node_modules/agent-base/test/test.js:708:      var socket = tls.connect(opts);
/src/node_modules/agent-base/test/test.js-709-      fn(null, socket);
##############################################
/src/node_modules/agentkeepalive/lib/_http_agent.js-264-  var called = false;
/src/node_modules/agentkeepalive/lib/_http_agent.js:265:  const newSocket = self.createConnection(options, oncreate);
/src/node_modules/agentkeepalive/lib/_http_agent.js-266-  // [patch start]
##############################################
/src/node_modules/duplexify/test.js-285-  server.listen(0, function () {
/src/node_modules/duplexify/test.js:286:    var socket = net.connect(server.address().port)
/src/node_modules/duplexify/test.js-287-    var dup = duplexify(socket, socket)
##############################################
/src/node_modules/lockfile/sockets.md-19-to CONNECT(lockname)
/src/node_modules/lockfile/sockets.md:20:- net.connect(lockname)
/src/node_modules/lockfile/sockets.md-21-  - if enoent or socket termination, ACQUIRE(lockname)
##############################################
/src/node_modules/forever-agent/index.js-136-
/src/node_modules/forever-agent/index.js:137:  return tls.connect(options);
/src/node_modules/forever-agent/index.js-138-}
##############################################
/src/node_modules/http-proxy-agent/History.md-95-  * throw an Error when no proxy info is given
/src/node_modules/http-proxy-agent/History.md:96:  * add support for passing options to net/tls .connect()
/src/node_modules/http-proxy-agent/History.md-97-
##############################################
/src/node_modules/http-proxy-agent/index.js-44-    // result of a `url.parse()` call... we need to remove the `path` portion so
/src/node_modules/http-proxy-agent/index.js:45:    // that `net.connect()` doesn't attempt to open that as a unix socket file.
/src/node_modules/http-proxy-agent/index.js-46-    delete proxy.path;
##############################################
/src/node_modules/http-proxy-agent/index.js-87-  if (this.secureProxy) {
/src/node_modules/http-proxy-agent/index.js:88:    socket = tls.connect(proxy);
/src/node_modules/http-proxy-agent/index.js-89-  } else {
/src/node_modules/http-proxy-agent/index.js:90:    socket = net.connect(proxy);
/src/node_modules/http-proxy-agent/index.js-91-  }
##############################################
/src/node_modules/socks/build/client/socksclient.js-41-            const client = new SocksClient(options);
/src/node_modules/socks/build/client/socksclient.js:42:            client.connect(options.existing_socket);
/src/node_modules/socks/build/client/socksclient.js-43-            client.once('established', (info) => {
##############################################
/src/node_modules/socks/build/client/socksclient.js-94-                    // Creates the next connection in the chain.
/src/node_modules/socks/build/client/socksclient.js:95:                    const result = yield SocksClient.createConnection({
/src/node_modules/socks/build/client/socksclient.js-96-                        command: 'connect',
##############################################
/src/node_modules/socks/build/client/socksclient.js-228-        else {
/src/node_modules/socks/build/client/socksclient.js:229:            this._socket.connect(this.getSocketOptions());
/src/node_modules/socks/build/client/socksclient.js-230-            if (this._options.set_tcp_nodelay !== undefined &&
##############################################
/src/node_modules/socks/README.md-64-try {
/src/node_modules/socks/README.md:65:  const info = await SocksClient.createConnection(options);
/src/node_modules/socks/README.md-66-
##############################################
/src/node_modules/socks/README.md-73-// Promises
/src/node_modules/socks/README.md:74:SocksClient.createConnection(options)
/src/node_modules/socks/README.md-75-.then(info => {
##############################################
/src/node_modules/socks/README.md-83-// Callbacks
/src/node_modules/socks/README.md:84:SocksClient.createConnection(options, (err, info) => {
/src/node_modules/socks/README.md-85-  if (!err) {
##############################################
/src/node_modules/socks/README.md-306-// Start connection to proxy
/src/node_modules/socks/README.md:307:client.connect();
/src/node_modules/socks/README.md-308-```
##############################################
/src/node_modules/socks/README.md-366-// Start connection
/src/node_modules/socks/README.md:367:client.connect();
/src/node_modules/socks/README.md-368-```
##############################################
/src/node_modules/socks/README.md-386-  * [new SocksClient(options[, callback])](#new-socksclientoptions)
/src/node_modules/socks/README.md:387:  * [Class Method: SocksClient.createConnection(options[, callback])](#class-method-socksclientcreateconnectionoptions-callback)
/src/node_modules/socks/README.md-388-  * [Class Method: SocksClient.createConnectionChain(options[, callback])](#class-method-socksclientcreateconnectionchainoptions-callback)
##############################################
/src/node_modules/socks/README.md-393-  * [Event: 'established'](#event-established)
/src/node_modules/socks/README.md:394:  * [client.connect()](#clientconnect)
/src/node_modules/socks/README.md-395-  * [client.socksClientOptions](#clientconnect)
##############################################
/src/node_modules/socks/README.md-442-
/src/node_modules/socks/README.md:443:### Class Method: SocksClient.createConnection(options[, callback])
/src/node_modules/socks/README.md-444-* ```options``` { SocksClientOptions } - An object describing the SOCKS proxy to use, the command to send and establish, and the destination host to connect to.
##############################################
/src/node_modules/socks/README.md-469-try {
/src/node_modules/socks/README.md:470:  const info = await SocksClient.createConnection(options);
/src/node_modules/socks/README.md-471-  console.log(info);
##############################################
/src/node_modules/socks/README.md-483-// Promise
/src/node_modules/socks/README.md:484:SocksClient.createConnection(options)
/src/node_modules/socks/README.md-485-.then(info => {
##############################################
/src/node_modules/socks/README.md-497-// Callback
/src/node_modules/socks/README.md:498:SocksClient.createConnection(options, (err, info) => {
/src/node_modules/socks/README.md-499-  if (!err) {
##############################################
/src/node_modules/socks/README.md-642-
/src/node_modules/socks/README.md:643:## client.connect()
/src/node_modules/socks/README.md-644-
##############################################
/src/node_modules/socks/docs/examples/javascript/connectExample.md-10-
/src/node_modules/socks/docs/examples/javascript/connectExample.md:11:The 'connect' command can be used via the SocksClient.createConnection() factory function as well as by creating a SocksClient instance and using event handlers.
/src/node_modules/socks/docs/examples/javascript/connectExample.md-12-
##############################################
/src/node_modules/socks/docs/examples/javascript/connectExample.md-36-  try {
/src/node_modules/socks/docs/examples/javascript/connectExample.md:37:    const info = await SocksClient.createConnection(options);
/src/node_modules/socks/docs/examples/javascript/connectExample.md-38-
##############################################
/src/node_modules/socks/docs/examples/javascript/connectExample.md-96-
/src/node_modules/socks/docs/examples/javascript/connectExample.md:97:SocksClient.createConnection(options)
/src/node_modules/socks/docs/examples/javascript/connectExample.md-98-.then(info => {
##############################################
/src/node_modules/socks/docs/examples/javascript/connectExample.md-136-
/src/node_modules/socks/docs/examples/javascript/connectExample.md:137:SocksClient.createConnection() optionally accepts a callback function as a second parameter.
/src/node_modules/socks/docs/examples/javascript/connectExample.md-138-
##############################################
/src/node_modules/socks/docs/examples/javascript/connectExample.md-158-
/src/node_modules/socks/docs/examples/javascript/connectExample.md:159:SocksClient.createConnection(options, (err, info) => {
/src/node_modules/socks/docs/examples/javascript/connectExample.md-160-  if (err) {
##############################################
/src/node_modules/socks/docs/examples/typescript/bindExample.md-84-// Start connection
/src/node_modules/socks/docs/examples/typescript/bindExample.md:85:client.connect();
/src/node_modules/socks/docs/examples/typescript/bindExample.md-86-```
##############################################
/src/node_modules/socks/docs/examples/typescript/associateExample.md-91-// Start connection
/src/node_modules/socks/docs/examples/typescript/associateExample.md:92:client.connect();
/src/node_modules/socks/docs/examples/typescript/associateExample.md-93-```
##############################################
/src/node_modules/socks/docs/examples/typescript/connectExample.md-10-
/src/node_modules/socks/docs/examples/typescript/connectExample.md:11:The 'connect' command can be used via the SocksClient.createConnection() factory function as well as by creating a SocksClient instance and using event handlers.
/src/node_modules/socks/docs/examples/typescript/connectExample.md-12-
##############################################
/src/node_modules/socks/docs/examples/typescript/connectExample.md-36-  try {
/src/node_modules/socks/docs/examples/typescript/connectExample.md:37:    const info = await SocksClient.createConnection(options);
/src/node_modules/socks/docs/examples/typescript/connectExample.md-38-
##############################################
/src/node_modules/socks/docs/examples/typescript/connectExample.md-97-
/src/node_modules/socks/docs/examples/typescript/connectExample.md:98:SocksClient.createConnection(options)
/src/node_modules/socks/docs/examples/typescript/connectExample.md-99-.then(info => {
##############################################
/src/node_modules/socks/docs/examples/typescript/connectExample.md-138-
/src/node_modules/socks/docs/examples/typescript/connectExample.md:139:SocksClient.createConnection() optionally accepts a callback function as a second parameter.
/src/node_modules/socks/docs/examples/typescript/connectExample.md-140-
##############################################
/src/node_modules/socks/docs/examples/typescript/connectExample.md-160-
/src/node_modules/socks/docs/examples/typescript/connectExample.md:161:SocksClient.createConnection(options, (err, info) => {
/src/node_modules/socks/docs/examples/typescript/connectExample.md-162-  if (err) {
##############################################
/src/node_modules/socks/docs/examples/typescript/connectExample.md-263-// Start connection
/src/node_modules/socks/docs/examples/typescript/connectExample.md:264:client.connect();
/src/node_modules/socks/docs/examples/typescript/connectExample.md-265-```
##############################################
/src/node_modules/socks/docs/migratingFromV1.md-35-
/src/node_modules/socks/docs/migratingFromV1.md:36:Socks.createConnection(options, function(err, socket, info) {
/src/node_modules/socks/docs/migratingFromV1.md-37-    if (err)
##############################################
/src/node_modules/socks/docs/migratingFromV1.md-71-
/src/node_modules/socks/docs/migratingFromV1.md:72:SocksClient.createConnection(options, function(err, result) {
/src/node_modules/socks/docs/migratingFromV1.md-73-    if (err)
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/README.md-51-  if (opts.secureEndpoint) {
/src/node_modules/socks-proxy-agent/node_modules/agent-base/README.md:52:    socket = tls.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/README.md-53-  } else {
/src/node_modules/socks-proxy-agent/node_modules/agent-base/README.md:54:    socket = net.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/README.md-55-  }
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/README.md-105-to the `http.request()`/`https.request()` function call, and is formatted
/src/node_modules/socks-proxy-agent/node_modules/agent-base/README.md:106:to be directly passed to `net.connect()`/`tls.connect()`, or however
/src/node_modules/socks-proxy-agent/node_modules/agent-base/README.md-107-else you want a Socket to be created. Pass the created socket to
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/index.js-77-    // result of a `url.parse()` call... we need to remove the `path` portion so
/src/node_modules/socks-proxy-agent/node_modules/agent-base/index.js:78:    // that `net.connect()` doesn't attempt to open that as a unix socket file.
/src/node_modules/socks-proxy-agent/node_modules/agent-base/index.js-79-    delete opts.path;
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-240-      called = true;
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js:241:      var socket = net.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-242-      fn(null, socket);
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-268-      called = true;
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js:269:      return net.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-270-    });
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-296-        called = true;
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js:297:        resolve(net.connect(opts));
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-298-      });
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-324-      called = true;
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js:325:      var socket = net.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-326-      fn(null, socket);
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-402-    var agent = new Agent(function(req, opts, fn) {
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js:403:      var socket = net.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-404-      fn(null, socket);
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-504-      assert(opts.secureEndpoint);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js:505:      var socket = tls.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-506-      fn(null, socket);
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-618-    var agent = new Agent(function(req, opts, fn) {
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js:619:      var socket = net.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-620-      fn(null, socket);
##############################################
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-676-    var agent = new Agent(function(req, opts, fn) {
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js:677:      var socket = tls.connect(opts);
/src/node_modules/socks-proxy-agent/node_modules/agent-base/test/test.js-678-      fn(null, socket);
##############################################
/src/node_modules/socks-proxy-agent/index.js-44-    // result of a `url.parse()` call... we need to remove the `path` portion so
/src/node_modules/socks-proxy-agent/index.js:45:    // that `net.connect()` doesn't attempt to open that as a unix socket file.
/src/node_modules/socks-proxy-agent/index.js-46-    delete proxy.path;
##############################################
/src/node_modules/socks-proxy-agent/index.js-107-      opts.port = null;
/src/node_modules/socks-proxy-agent/index.js:108:      s = tls.connect(opts);
/src/node_modules/socks-proxy-agent/index.js-109-    }
##############################################
/src/node_modules/socks-proxy-agent/index.js-117-    options.destination.host = ip;
/src/node_modules/socks-proxy-agent/index.js:118:    SocksClient.createConnection(options, onhostconnect);
/src/node_modules/socks-proxy-agent/index.js-119-  }
##############################################
/src/node_modules/dotenv/README.md-42-const db = require('db')
/src/node_modules/dotenv/README.md:43:db.connect({
/src/node_modules/dotenv/README.md-44-  host: process.env.DB_HOST,
##############################################
/src/node_modules/make-fetch-happen/README.md-304-same options the `https` module accepts, which will be themselves passed to
/src/node_modules/make-fetch-happen/README.md:305:`tls.connect()`. `opts.strictSSL` corresponds to `rejectUnauthorized`.
/src/node_modules/make-fetch-happen/README.md-306-
##############################################
/src/node_modules/tunnel-agent/index.js-91-  // If we are under maxSockets create a new one.
/src/node_modules/tunnel-agent/index.js:92:  self.createConnection({host: options.host, port: options.port, request: req})
/src/node_modules/tunnel-agent/index.js-93-}
##############################################
/src/node_modules/tunnel-agent/index.js-193-    // needs to be created to take over in the pool for the one that closed.
/src/node_modules/tunnel-agent/index.js:194:    this.createConnection(pending)
/src/node_modules/tunnel-agent/index.js-195-  }
##############################################
/src/node_modules/tunnel-agent/index.js-201-    // 0 is dummy port for v0.6
/src/node_modules/tunnel-agent/index.js:202:    var secureSocket = tls.connect(0, mergeOptions({}, self.options,
/src/node_modules/tunnel-agent/index.js-203-      { servername: options.host
##############################################
/src/node_modules/https-proxy-agent/History.md-118-  * throw an Error when no proxy info is given
/src/node_modules/https-proxy-agent/History.md:119:  * add support for passing options to net/tls .connect()
/src/node_modules/https-proxy-agent/History.md-120-
##############################################
/src/node_modules/https-proxy-agent/README.md-107-  * `headers` - Object - Additional HTTP headers to be sent on the HTTP CONNECT method.
/src/node_modules/https-proxy-agent/README.md:108:  * Any other options given are passed to the `net.connect()`/`tls.connect()` functions.
/src/node_modules/https-proxy-agent/README.md-109-
##############################################
/src/node_modules/https-proxy-agent/index.js-55-		// result of a `url.parse()` call... we need to remove the `path` portion so
/src/node_modules/https-proxy-agent/index.js:56:		// that `net.connect()` doesn't attempt to open that as a unix socket file.
/src/node_modules/https-proxy-agent/index.js-57-		delete proxy.path;
##############################################
/src/node_modules/https-proxy-agent/index.js-77-	if (this.secureProxy) {
/src/node_modules/https-proxy-agent/index.js:78:		socket = tls.connect(proxy);
/src/node_modules/https-proxy-agent/index.js-79-	} else {
/src/node_modules/https-proxy-agent/index.js:80:		socket = net.connect(proxy);
/src/node_modules/https-proxy-agent/index.js-81-	}
##############################################
/src/node_modules/https-proxy-agent/index.js-151-				opts.port = null;
/src/node_modules/https-proxy-agent/index.js:152:				sock = tls.connect(opts);
/src/node_modules/https-proxy-agent/index.js-153-			}
##############################################
/src/node_modules/delegates/Readme.md-83-// getter
/src/node_modules/delegates/Readme.md:84:var q = request.query();
/src/node_modules/delegates/Readme.md-85-
##############################################
/src/node_modules/delegates/Readme.md-87-request
/src/node_modules/delegates/Readme.md:88:  .query({ a: 1 })
/src/node_modules/delegates/Readme.md:89:  .query({ b: 2 });
/src/node_modules/delegates/Readme.md-90-```
