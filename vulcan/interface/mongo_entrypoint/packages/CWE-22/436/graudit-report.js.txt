/src/examples/upload/app.js-9-Picard.post('/upload', function(request){
/src/examples/upload/app.js:10:  var form = new formidable.IncomingForm()
/src/examples/upload/app.js-11-  
##############################################
/src/examples/upload/app.js-21-    })
/src/examples/upload/app.js:22:    .parse(request)
/src/examples/upload/app.js-23-})
##############################################
/src/lib/picard/request.js-69-    if ( !('url' in this) ) return
/src/lib/picard/request.js:70:    var parsed = url.parse(this.url, true)
/src/lib/picard/request.js-71-    this.parsedUrl = function() { return parsed }
##############################################
/src/lib/picard/haml.js-26-          try {
/src/lib/picard/haml.js:27:            value = JSON.parse("[" + attribs[key] +"]")[0];
/src/lib/picard/haml.js-28-            if (value === true) {
##############################################
/src/lib/picard/haml.js-199-            try {
/src/lib/picard/haml.js:200:              attribs['class'] = JSON.stringify(classes + " " + JSON.parse(attribs['class']));
/src/lib/picard/haml.js-201-            } catch (e) {
##############################################
/src/lib/picard/haml.js-402-            try {
/src/lib/picard/haml.js:403:              return parse_interpol(JSON.parse(line));
/src/lib/picard/haml.js-404-            } catch (e) {
##############################################
/src/lib/picard/haml.js-412-            try {
/src/lib/picard/haml.js:413:              return JSON.stringify(html_escape(JSON.parse(line)));
/src/lib/picard/haml.js-414-            } catch (e2) {
##############################################
/src/lib/picard/haml.js-449-      try {
/src/lib/picard/haml.js:450:        buffer.push(JSON.parse(part));
/src/lib/picard/haml.js-451-      } catch (e) {
##############################################
/src/lib/picard/haml.js-473-        try {
/src/lib/picard/haml.js:474:          return eval("(" + js + ")");
/src/lib/picard/haml.js-475-        } catch (e) {
##############################################
/src/lib/picard/template.js-47-    else
/src/lib/picard/template.js:48:      fs.readFile(filename, function(err, body){
/src/lib/picard/template.js-49-        if ( err && err.message ){
##############################################
/src/lib/picard/template.js-105-    if ( typeof Template.cache[filename] == 'undefined' || this.mode == 'development' ) {
/src/lib/picard/template.js:106:      fs.readFile(filename, 'binary', function(err, content){
/src/lib/picard/template.js-107-        if ( err ) req.onScreen(null)
##############################################
/src/lib/picard/server.js-6-    
/src/lib/picard/server.js:7:    this.httpServer = http.createServer(function(request, response) {
/src/lib/picard/server.js-8-      request.response = response
