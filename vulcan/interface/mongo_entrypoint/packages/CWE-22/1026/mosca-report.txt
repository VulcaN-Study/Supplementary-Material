<report_mosca>
 <Path>/src/internal.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 2022 -  	return eval(fn);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/internal.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 49 -  const HTTPVERBS = { 'GET': true, 'POST': true, 'OPTIONS': true, 'PUT': true, 'DELETE': true, 'PATCH': true, 'upload': true, 'HEAD': true, 'TRACE': true, 'PROPFIND': true };

 Line: 1122 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 1390 -  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

 Line: 3060 -  	var query = null;

 Line: 3090 -  		query: query,

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/mail.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 715 -  	socket.setTimeout(options.timeout || 8000, function() {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/mail.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 590 -  	buffer.push('MAIL FROM: <' + msg.addressFrom.address + '>');

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/utils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 244 -  	var id_interval = setInterval(function() {

 Line: 256 -  	id_timeout = setTimeout(function() {

 Line: 593 -  	req.setTimeout(options.timeout, function() {

 Line: 894 -  	req.setTimeout(options.timeout, function() {

 Line: 1051 -  	req.setTimeout(timeout || 60000, function() {

 Line: 4634 -  			self.interval = setTimeout(function() { self.timeout(); }, timeout);

 Line: 4655 -  		setTimeout(function() { self.timeout(); }, timeout);

 Line: 4661 -  		setTimeout(function() { self.timeout(); }, timeout);

 Line: 5552 -  		self.flushing_timeout = setTimeout(() => self.read(index, callback), 300);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/utils.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 529 -  		options.post = method === 'POST' || method === 'PUT' || method === 'DELETE' || method === 'PATCH';

 Line: 830 -  	options.post = method === 'POST' || method === 'PUT' || method === 'DELETE' || method === 'PATCH';

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/image.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 1840 -  	setTimeout(function() {

 Line: 2656 -  						setTimeout(() => self.install('package2', item.name, item.filename, undefined, undefined, undefined, true), 50);

 Line: 2844 -  		self.routes.middleware[name] = typeof(declaration) === 'function' ? declaration : eval(declaration);

 Line: 2861 -  		setTimeout(function() {

 Line: 2873 -  		setTimeout(function() {

 Line: 2886 -  		setTimeout(function() {

 Line: 2898 -  		setTimeout(function() {

 Line: 2922 -  				setTimeout(function() {

 Line: 2942 -  			setTimeout(function() {

 Line: 2951 -  			setTimeout(function() {

 Line: 2963 -  			setTimeout(function() {

 Line: 2990 -  		setTimeout(function() {

 Line: 3010 -  					setTimeout(() => delete require.cache[name], 1000);

 Line: 3014 -  				obj = typeof(declaration) === 'function' ? eval('(' + declaration.toString() + ')()') : eval(declaration);

 Line: 3024 -  		setTimeout(function() {

 Line: 3049 -  					setTimeout(() => delete require.cache[name], 1000);

 Line: 3053 -  				obj = typeof(declaration) === 'function' ? eval('(' + declaration.toString() + ')()') : eval(declaration);

 Line: 3080 -  		setTimeout(function() {

 Line: 3097 -  					setTimeout(() => delete require.cache[name], 1000);

 Line: 3116 -  					setTimeout(function() {

 Line: 3168 -  			setTimeout(function() {

 Line: 3187 -  					setTimeout(function() {

 Line: 3206 -  					setTimeout(function() {

 Line: 3228 -  			setTimeout(function() {

 Line: 3315 -  	setTimeout(() => self.$restart(), 1000);

 Line: 3324 -  	self.server.setTimeout(0);

 Line: 3429 -  		setTimeout(() => self.removeAllListeners(), 2000);

 Line: 3430 -  		setTimeout(function() {

 Line: 3481 -  	self.temporary.other.dependencies = setTimeout(function() {

 Line: 3537 -  		setTimeout(function() {

 Line: 4037 -  	message.$sending = setTimeout(() => message.send(self.config['mail.smtp'], opt, callback), 5);

 Line: 4712 -  		setTimeout(() => self.responseStatic(req, res, done), 500);

 Line: 4980 -  			setTimeout(() => framework.responseFile(req, res, filename, downloadName, headers, done, key), 500);

 Line: 5200 -  		client.setTimeout(timeout, function() {

 Line: 5301 -  		setTimeout(() => self.responseImage(req, res, filename, fnProcess, headers, done), 500);

 Line: 5441 -  		setTimeout(() => self.responseImage(req, res, filename, fnProcess, headers, done), 500);

 Line: 5944 -  	res.end('<html><head><meta charset="utf-8" /></head><body style="font:normal normal 11px Arial;color:gray;line-height:16px;padding:10px;background-color:white"><div style="font-size:14px;color:#505050">Please wait (<span id="time">10</span>) for <b>' + (self.config.name + ' v' + self.config.version) + '</b> application.</div>The application is waiting for: ' + keys + '.<script>var i=10;setInterval(function(){i--;if(i<0)return;document.getElementById("time").innerHTML=(i===0?"refreshing":i);if(i===0)window.location.reload();},1000);</script></body></html>', ENCODING);

 Line: 6097 -  		setTimeout(function() {

 Line: 6224 -  		setTimeout(function() {

 Line: 6243 -  			setTimeout(() => self.test(true, options.tests || options.test), sleep);

 Line: 6247 -  		setTimeout(function() {

 Line: 6458 -  			setTimeout(global.gc, 1000);

 Line: 6956 -  	socket.setTimeout(0);

 Line: 7176 -  	setTimeout(() => console.log.apply(console, params), 1000);

 Line: 7684 -  		setTimeout(function() {

 Line: 8916 -  	fork.__timeout = setTimeout(function() {

 Line: 9332 -  	this.interval = setInterval(() => framework.cache.recycle(), 1000 * 60);

 Line: 9682 -  		self.timeout = setTimeout(function() {

 Line: 12965 -  		setTimeout(function() {

 Line: 13375 -  	setTimeout(function() {

 Line: 13674 -  	//self.socket.setTimeout(0);

 Line: 14011 -  	setTimeout(() => self.callback(cb), 100);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/index.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 7535 -  	var req = test.method === 'POST' || test.method === 'PUT' || test.method === 'DELETE' || test.method === 'PATCH' ? con.request(options, response) : con.get(options, response);

 Line: 9529 -  	// type = 0 - GET, DELETE

 Line: 9919 -  	if (!route.schema || req.method === 'DELETE')

 Line: 10151 -  	get query() {

 Line: 13577 -  	get query() {

 Line: 14460 -  	get query() {

 Line: 14468 -  	set query(value) {

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/nosql.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible code injection</Title>
 <Description> Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application.</Description>
 <Level> High</Level>
 <Reference> https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132 </Reference>
 <Match> eval\s?\(|setTimeout|setInterval</Match>
 <Result> Line: 66 -  	self.timeoutmeta = setTimeout(() => self.$meta(true), 500);

</Result>
</report_mosca>

<report_mosca>
 <Path>/src/builders.js</Path>
 <Module>/app/Mosca/eggs/javascript_common_fail.egg</Module>
 <Title> Possible SQL injection</Title>
 <Description> notification possible SQL injection</Description>
 <Level> High</Level>
 <Reference> https://www.owasp.org/index.php/Testing_for_Stack_Overflow </Reference>
 <Match> query|YQL|WHERE|FROM|SELECT|UPDATE|DELETE|INSERT|UNION|getResults</Match>
 <Result> Line: 18 -  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

 Line: 564 -   * Set query handler

</Result>
</report_mosca>

