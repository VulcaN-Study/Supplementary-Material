/src/internal.js-270-			if (rm)
/src/internal.js:271:				framework.unlink(rm);
/src/internal.js-272-			subscribe.doEnd();
##############################################
/src/internal.js-663-	if (!callback) {
/src/internal.js:664:		fs.createReadStream(self.path).pipe(fs.createWriteStream(filename));
/src/internal.js-665-		return;
##############################################
/src/internal.js-667-
/src/internal.js:668:	var reader = fs.createReadStream(self.path);
/src/internal.js-669-	var writer = fs.createWriteStream(filename);
##############################################
/src/internal.js-698-	var self = this;
/src/internal.js:699:	fs.readFile(self.path, callback);
/src/internal.js-700-	return self;
##############################################
/src/internal.js-718-	var md5 = crypto.createHash('md5');
/src/internal.js:719:	var stream = fs.createReadStream(self.path);
/src/internal.js-720-
##############################################
/src/internal.js-750-	var self = this;
/src/internal.js:751:	return fs.createReadStream(self.path, options);
/src/internal.js-752-};
##############################################
/src/internal.js-761-	var self = this;
/src/internal.js:762:	return fs.createReadStream(self.path, options).pipe(stream, options);
/src/internal.js-763-};
##############################################
/src/mail.js-423-	var name = attachment.name;
/src/mail.js:424:	var stream = fs.createReadStream(attachment.filename, { encoding: 'base64' });
/src/mail.js-425-	var message = [];
##############################################
/src/mail.js-480-		if (config && config.isJSON())
/src/mail.js:481:			opt = JSON.parse(config);
/src/mail.js-482-		if (!opt)
##############################################
/src/bin/tpm-245-
/src/bin/tpm:246:    fs.readFile(fileName, function(err, data) {
/src/bin/tpm-247-        zlib.gzip(data, function(err, data) {
##############################################
/src/bin/tpm-252-            var name = fileName.replace(self.path, '').replace(/\\/g, '/');
/src/bin/tpm:253:            fs.appendFile(self.fileName, name.padRight(padding) + ':' + data.toString('base64') + '\n', function(err) {
/src/bin/tpm-254-                self.$compress();
##############################################
/src/bin/tpm-328-
/src/bin/tpm:329:    var stream = fs.createReadStream(filename);
/src/bin/tpm-330-    var key = '';
##############################################
/src/bin/tpm-484-
/src/bin/tpm:485:    fs.unlink(filename, function() {
/src/bin/tpm-486-        self.removeFile();
##############################################
/src/bin/tpm-506-
/src/bin/tpm:507:    var uri = parser.parse(url);
/src/bin/tpm-508-    var h = {};
##############################################
/src/bin/tpm-682-                    if (fs.existsSync(filename)) {
/src/bin/tpm:683:                        var obj = JSON.parse(fs.readFileSync(filename).toString('utf8'));
/src/bin/tpm-684-                        if (!obj.tpm)
##############################################
/src/bin/tpm-785-                    if (fs.existsSync(filename)) {
/src/bin/tpm:786:                        var obj = JSON.parse(fs.readFileSync(filename).toString('utf8'));
/src/bin/tpm-787-                        if (obj.tpm)
##############################################
/src/bin/tpm-880-    if (fs.existsSync(filename))
/src/bin/tpm:881:        settings = JSON.parse(fs.readFileSync(filename).toString('utf8'));
/src/bin/tpm-882-
##############################################
/src/bin/tpm-960-
/src/bin/tpm:961:            packagejson = JSON.parse(fs.readFileSync(filename).toString('utf8'));
/src/bin/tpm-962-
##############################################
/src/bin/tpm-1004-
/src/bin/tpm:1005:            packagejson = JSON.parse(fs.readFileSync(filename).toString('utf8'));
/src/bin/tpm-1006-
##############################################
/src/bin/totaljs-624-			exec('totalpackage unpack total.package', function() {
/src/bin/totaljs:625:				fs.unlink(filename);
/src/bin/totaljs-626-				console.log('Done.');
##############################################
/src/utils.js-273-
/src/utils.js:274:	var uri = parser.parse(url);
/src/utils.js-275-
##############################################
/src/utils.js-554-
/src/utils.js:555:	var uri = parser.parse(url);
/src/utils.js-556-	uri.method = method;
##############################################
/src/utils.js-629-
/src/utils.js:630:		var tmp = parser.parse(res.headers['location']);
/src/utils.js-631-		tmp.headers = uri.headers;
##############################################
/src/utils.js-848-
/src/utils.js:849:	var uri = parser.parse(url);
/src/utils.js-850-	uri.method = method;
##############################################
/src/utils.js-928-
/src/utils.js:929:		var tmp = parser.parse(res.headers['location']);
/src/utils.js-930-		tmp.headers = uri.headers;
##############################################
/src/utils.js-993-	if (typeof(stream) === 'string')
/src/utils.js:994:		stream = fs.createReadStream(stream, STREAM_READONLY);
/src/utils.js-995-
##############################################
/src/utils.js-1015-	var e = new events.EventEmitter();
/src/utils.js:1016:	var uri = parser.parse(url);
/src/utils.js-1017-	var options = { protocol: uri.protocol, auth: uri.auth, method: method || 'POST', hostname: uri.hostname, port: uri.port, path: uri.path, agent: false, headers: h };
##############################################
/src/utils.js-2057-	try {
/src/utils.js:2058:		return JSON.parse(value);
/src/utils.js-2059-	} catch(e) {
##############################################
/src/utils.js-2314-		if (to === 'string')
/src/utils.js:2315:			date = Date.parse(date);
/src/utils.js-2316-		else if (exports.isDate(date))
##############################################
/src/utils.js-2722-	if (lc === 90)
/src/utils.js:2723:		return new Date(Date.parse(self));
/src/utils.js-2724-
##############################################
/src/utils.js-3346-	if (callback)
/src/utils.js:3347:		fs.writeFile(filename, self.substring(index), 'base64', callback);
/src/utils.js-3348-	else
/src/utils.js:3349:		fs.writeFile(filename, self.substring(index), 'base64', exports.noop);
/src/utils.js-3350-
##############################################
/src/utils.js-5509-		self.flushing++;
/src/utils.js:5510:		fs.writeFile(self.filename + (self.index++) + '.json', JSON.stringify(self.stack), () => self.flushing--);
/src/utils.js-5511-		self.stack = [];
##############################################
/src/utils.js-5521-		self.flushing++;
/src/utils.js:5522:		fs.writeFile(self.filename + (self.index++) + '.json', JSON.stringify(self.stack), () => self.flushing--);
/src/utils.js-5523-		self.stack = [];
##############################################
/src/utils.js-5553-
/src/utils.js:5554:	fs.readFile(self.filename + index + '.json', function(err, data) {
/src/utils.js-5555-		if (err)
##############################################
/src/utils.js-5566-		files.push(self.filename + i + '.json');
/src/utils.js:5567:	files.wait((filename, next) => fs.unlink(filename, next));
/src/utils.js-5568-	return self;
##############################################
/src/image.js-170-	var extension = self.filename.substring(index).toLowerCase();
/src/image.js:171:	var stream = require('fs').createReadStream(self.filename, {
/src/image.js-172-		start: 0,
##############################################
/src/image.js-247-
/src/image.js:248:		var reader = Fs.createReadStream(filename);
/src/image.js-249-		var writer = Fs.createWriteStream(filename + '_');
##############################################
/src/image.js-252-		writer.on('finish', function() {
/src/image.js:253:			Fs.rename(filename + '_', filename, () => callback(null, true));
/src/image.js-254-		});
##############################################
/src/index.js-2384-
/src/index.js:2385:		fs.readFile(filename, function(err, content) {
/src/index.js-2386-			if (err)
##############################################
/src/index.js-2651-					files.wait(function(filename, next) {
/src/index.js:2652:						var stream = fs.createReadStream(filename);
/src/index.js-2653-						stream.pipe(fs.createWriteStream(path.join(dir, filename.replace(item.filename, '').replace(/\.package$/i, ''))));
##############################################
/src/index.js-3633-		fsFileExists(obj.filename, function(e) {
/src/index.js:3634:			e && fs.unlink(obj.filename);
/src/index.js-3635-		});
##############################################
/src/index.js-3939-Framework.prototype.onParseJSON = function(value) {
/src/index.js:3940:	return JSON.parse(value);
/src/index.js-3941-};
##############################################
/src/index.js-3950-		return {};
/src/index.js:3951:	return qs.parse(value);
/src/index.js-3952-};
##############################################
/src/index.js-4104-	self.path.verify('logs');
/src/index.js:4105:	framework_utils.queue('framework.log', 5, (next) => fs.appendFile(framework_utils.combine(self.config['directory-logs'], filename + '.log'), time + ' | ' + str + '\n', next));
/src/index.js-4106-	return self;
##############################################
/src/index.js-4127-	self.path.verify('logs');
/src/index.js:4128:	framework_utils.queue('framework.logger', 5, (next) => fs.appendFile(framework_utils.combine(self.config['directory-logs'], arguments[0] + '.log'), dt + ' | ' + str + '\n', next));
/src/index.js-4129-	return self;
##############################################
/src/index.js-4763-				return next();
/src/index.js:4764:			fs.appendFile(filename, dir.padRight(padding) + ':#\n', next);
/src/index.js-4765-		}, function() {
##############################################
/src/index.js-4769-					return next();
/src/index.js:4770:				fs.readFile(item, function(err, data) {
/src/index.js-4771-					zlib.gzip(data, function(err, data) {
##############################################
/src/index.js-4775-						}
/src/index.js:4776:						fs.appendFile(filename, fil.padRight(padding) + ':' + data.toString('base64') + '\n', next);
/src/index.js-4777-					});
##############################################
/src/index.js-5151-
/src/index.js:5152:	var uri = parser.parse(url);
/src/index.js-5153-	var h = {};
##############################################
/src/index.js-5830-		if (strict) {
/src/index.js:5831:			if (new Date(Date.parse(val)) === new Date(date))
/src/index.js-5832-				return false;
/src/index.js-5833-		} else {
/src/index.js:5834:			if (new Date(Date.parse(val)) < new Date(date))
/src/index.js-5835-				return false;
##############################################
/src/index.js-6204-		if (options.https)
/src/index.js:6205:			self.server = http.createServer(options.https, self.listener);
/src/index.js-6206-		else
/src/index.js:6207:			self.server = http.createServer(self.listener);
/src/index.js-6208-
##############################################
/src/index.js-7517-
/src/index.js:7518:	var options = parser.parse((test.url.startsWith('http://', true) || test.url.startsWith('https://', true) ? '' : 'http://' + self.ip + ':' + self.port) + test.url);
/src/index.js-7519-	if (typeof(test.data) === 'function')
##############################################
/src/index.js-7727-			framework_utils.ls(dir, function(files, directories) {
/src/index.js:7728:				self.unlink(files);
/src/index.js-7729-				if (callback)
##############################################
/src/index.js-7761-
/src/index.js:7762:		self.unlink(files, () => self.rmdir(directories, callback));
/src/index.js-7763-	});
##############################################
/src/index.js-7798-
/src/index.js:7799:	fs.unlink(filename, function(err) {
/src/index.js:7800:		self.unlink(arr, callback);
/src/index.js-7801-	});
##############################################
/src/index.js-7898-			try {
/src/index.js:7899:				return JSON.parse(result);
/src/index.js-7900-			} catch (ex) {}
##############################################
/src/index.js-8193-			if (opt.isJSON())
/src/index.js:8194:				options = JSON.parse(opt);
/src/index.js-8195-			url = url.substring(0, index).trim();
##############################################
/src/index.js-13716-			if (self.type !== 1)
/src/index.js:13717:				self.parse();
/src/index.js-13718-
##############################################
/src/index.js-13723-			if (self.type === 1)
/src/index.js:13724:				self.parse();
/src/index.js-13725-
##############################################
/src/index.js-13796-	if (self.buffer.length >= 2 && framework_utils.getMessageLength(self.buffer, framework.isLE))
/src/index.js:13797:		self.parse();
/src/index.js-13798-
##############################################
/src/index.js-13989-
/src/index.js:13990:	var stream = fs.createReadStream(filename);
/src/index.js-13991-	stream.on('data', buffer => self.restoreKey(buffer));
##############################################
/src/index.js-14037-	zlib.gunzip(buffer, function(err, data) {
/src/index.js:14038:		fs.writeFile(path.join(self.path, key), data, () => self.pending--);
/src/index.js-14039-		buffer = null;
##############################################
/src/index.js-14698-
/src/index.js:14699:	framework.unlink(arr);
/src/index.js-14700-	self.files = null;
##############################################
/src/index.js-14745-	U.queue('framework.files', F.config['default-maximum-file-descriptors'], function(next) {
/src/index.js:14746:		fs.readFile(filename, function(err, result) {
/src/index.js-14747-			next();
##############################################
/src/index.js-14778-	U.queue('framework.files', F.config['default-maximum-file-descriptors'], function(next) {
/src/index.js:14779:		var stream = fs.createReadStream(filename, opt);
/src/index.js-14780-		stream.on('error', noop);
##############################################
/src/nosql.js-98-	var builder = new DatabaseBuilder2();
/src/nosql.js:99:	var stream = Fs.createReadStream(self.filename);
/src/nosql.js-100-
##############################################
/src/nosql.js-296-	if (write) {
/src/nosql.js:297:		Fs.writeFile(self.filenameMeta, JSON.stringify(self.metadata), NOOP);
/src/nosql.js-298-		return self;
##############################################
/src/nosql.js-301-	try {
/src/nosql.js:302:		self.metadata = JSON.parse(Fs.readFileSync(self.filenameMeta).toString('utf8'));
/src/nosql.js-303-	} catch (err) {}
##############################################
/src/nosql.js-322-
/src/nosql.js:323:		Fs.appendFile(self.filename, json.join(NEWLINE) + NEWLINE, function(err) {
/src/nosql.js-324-			for (var i = 0, length = items.length; i < length; i++) {
##############################################
/src/nosql.js-351-
/src/nosql.js:352:	var reader = Fs.createReadStream(self.filename);
/src/nosql.js-353-	var writer = Fs.createWriteStream(self.filenameTemp);
##############################################
/src/nosql.js-359-	reader.on('data', framework_utils.streamer(NEWLINE, function(value, index) {
/src/nosql.js:360:		var json = JSON.parse(value.trim());
/src/nosql.js-361-		for (var i = 0; i < length; i++) {
##############################################
/src/nosql.js-387-	CLEANUP(writer, function() {
/src/nosql.js:388:		Fs.rename(self.filenameTemp, self.filename, function(err) {
/src/nosql.js-389-
##############################################
/src/nosql.js-496-	var self = this;
/src/nosql.js:497:	var reader = Fs.createReadStream(filename);
/src/nosql.js-498-	var filter = items;
##############################################
/src/nosql.js-501-	reader.on('data', framework_utils.streamer(NEWLINE, function(value, index) {
/src/nosql.js:502:		var json = JSON.parse(value.trim());
/src/nosql.js-503-		for (var i = 0; i < length; i++) {
##############################################
/src/nosql.js-610-
/src/nosql.js:611:	var reader = Fs.createReadStream(self.filename);
/src/nosql.js-612-	reader.on('data', framework_utils.streamer(NEWLINE, function(value, index) {
/src/nosql.js:613:		var json = JSON.parse(value.trim());
/src/nosql.js-614-		for (var j = 0; j < length; j++) {
##############################################
/src/nosql.js-654-			var filename = builder.$filename;
/src/nosql.js:655:			Fs.unlink(filename, function() {
/src/nosql.js-656-				item.response.limit(20, function(items, next) {
##############################################
/src/nosql.js-659-						builder.push(JSON.stringify(items[i]));
/src/nosql.js:660:					Fs.appendFile(filename, builder.join(NEWLINE) + NEWLINE, next);
/src/nosql.js-661-				}, next);
##############################################
/src/nosql.js-678-
/src/nosql.js:679:	var reader = Fs.createReadStream(self.filename);
/src/nosql.js-680-	var writer = Fs.createWriteStream(self.filenameTemp);
##############################################
/src/nosql.js-686-	reader.on('data', framework_utils.streamer(NEWLINE, function(value, index) {
/src/nosql.js:687:		var json = JSON.parse(value.trim());
/src/nosql.js-688-		var is = false;
##############################################
/src/nosql.js-708-	CLEANUP(writer, function() {
/src/nosql.js:709:		Fs.rename(self.filenameTemp, self.filename, function(err) {
/src/nosql.js-710-
##############################################
/src/nosql.js-748-
/src/nosql.js:749:	remove.wait((filename, next) => Fs.unlink(filename, next), () => self.next(0), 5);
/src/nosql.js-750-	return self;
##############################################
/src/nosql.js-1029-
/src/nosql.js:1030:		var reader = Fs.createReadStream(name);
/src/nosql.js-1031-		CLEANUP(reader);
##############################################
/src/nosql.js-1121-
/src/nosql.js:1122:		var reader = Fs.createReadStream(name);
/src/nosql.js-1123-		CLEANUP(reader);
##############################################
/src/nosql.js-1184-	var filename = framework_utils.join(self.directory, id + EXTENSION_BINARY);
/src/nosql.js:1185:	var stream = Fs.createReadStream(filename, { start: 0, end: BINARY_HEADER_LENGTH - 1, encoding: 'binary' });
/src/nosql.js-1186-
##############################################
/src/nosql.js-1189-		var json = new Buffer(buffer, 'binary').toString('utf8').replace(REG_CLEAN, '');
/src/nosql.js:1190:		stream = Fs.createReadStream(filename, { start: BINARY_HEADER_LENGTH });
/src/nosql.js:1191:		callback(null, stream, JSON.parse(json));
/src/nosql.js-1192-	});
##############################################
/src/nosql.js-1208-
/src/nosql.js:1209:	Fs.unlink(filename, function(err) {
/src/nosql.js-1210-		if (callback)
##############################################
/src/nosql.js-1255-
/src/nosql.js:1256:	Fs.appendFile(self.filename, value, function() {
/src/nosql.js-1257-		self.is = false;
