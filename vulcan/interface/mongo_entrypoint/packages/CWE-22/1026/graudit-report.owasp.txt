/src/internal.js-2022-	var fn = '(function(self,repository,model,session,query,body,url,global,helpers,user,config,functions,index,output,date,cookie,files,mobile){var get=query;var post=body;var theme=this.themeName;var language=this.language;var cookie=function(name){return controller.req.cookie(name);};' + (functions.length ? functions.join('') + ';' : '') + 'var controller=self;' + builder + ';return $output;})';
/src/internal.js:2023:	return eval(fn);
/src/internal.js-2024-}
##############################################
/src/utils.js-2926-				break;
/src/utils.js:2927:			case 'eval':
/src/utils.js-2928-			case 'object':
##############################################
/src/index.js-95-HEADERS['sse'] = {};
/src/index.js:96:HEADERS['sse'][RESPONSE_HEADER_CACHECONTROL] = 'no-cache, no-store, must-revalidate';
/src/index.js-97-HEADERS['sse']['Pragma'] = 'no-cache';
##############################################
/src/index.js-134-HEADERS['responseFile.debug.compress'] = {};
/src/index.js:135:HEADERS['responseFile.debug.compress'][RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-136-HEADERS['responseFile.debug.compress']['Vary'] = 'Accept-Encoding';
##############################################
/src/index.js-142-HEADERS['responseFile.debug.compress.range']['Accept-Ranges'] = 'bytes';
/src/index.js:143:HEADERS['responseFile.debug.compress.range'][RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-144-HEADERS['responseFile.debug.compress.range']['Vary'] = 'Accept-Encoding';
##############################################
/src/index.js-151-HEADERS['responseFile.debug'] = {};
/src/index.js:152:HEADERS['responseFile.debug'][RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-153-HEADERS['responseFile.debug']['Vary'] = 'Accept-Encoding';
##############################################
/src/index.js-158-HEADERS['responseFile.debug.range']['Accept-Ranges'] = 'bytes';
/src/index.js:159:HEADERS['responseFile.debug.range'][RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-160-HEADERS['responseFile.debug.range']['Vary'] = 'Accept-Encoding';
##############################################
/src/index.js-184-HEADERS['responseStream.debug.compress'] = {};
/src/index.js:185:HEADERS['responseStream.debug.compress'][RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-186-HEADERS['responseStream.debug.compress']['Pragma'] = 'no-cache';
##############################################
/src/index.js-190-HEADERS['responseStream.debug'] = {};
/src/index.js:191:HEADERS['responseStream.debug'][RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-192-HEADERS['responseStream.debug']['Pragma'] = 'no-cache';
##############################################
/src/index.js-2844-
/src/index.js:2845:		self.routes.middleware[name] = typeof(declaration) === 'function' ? declaration : eval(declaration);
/src/index.js-2846-		self._length_middleware = Object.keys(self.routes.middleware).length;
##############################################
/src/index.js-2999-
/src/index.js:3000:	if (type === 'definition' || type === 'eval') {
/src/index.js-3001-
##############################################
/src/index.js-3014-			else
/src/index.js:3015:				obj = typeof(declaration) === 'function' ? eval('(' + declaration.toString() + ')()') : eval(declaration);
/src/index.js-3016-
##############################################
/src/index.js-3053-			else {
/src/index.js:3054:				obj = typeof(declaration) === 'function' ? eval('(' + declaration.toString() + ')()') : eval(declaration);
/src/index.js-3055-				content = declaration.toString();
##############################################
/src/index.js-3755- * Run code
/src/index.js:3756: * @param {String or Function} script Function to eval or Code or URL address.
/src/index.js-3757- * @return {Framework}
/src/index.js-3758- */
/src/index.js:3759:Framework.prototype.eval = function(script) {
/src/index.js:3760:	return this.install('eval', script);
/src/index.js-3761-};
##############################################
/src/index.js-4795-	var filename = self.path.temp(name);
/src/index.js:4796:	var httpcachevalid = false;
/src/index.js-4797-
##############################################
/src/index.js-4800-		if (req.headers['if-none-match'] === etag)
/src/index.js:4801:			httpcachevalid = true;
/src/index.js-4802-	}
/src/index.js-4803-
/src/index.js:4804:	if (self.isProcessed(name) || httpcachevalid) {
/src/index.js-4805-		self.responseFile(req, res, filename);
##############################################
/src/index.js-5939-	var headers = {};
/src/index.js:5940:	headers[RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-5941-	headers[RESPONSE_HEADER_CONTENTTYPE] = CONTENTTYPE_TEXTHTML;
##############################################
/src/index.js-5944-		keys += (keys ? ', ' : '') + '<u>' + m + '</u>';
/src/index.js:5945:	res.end('<html><head><meta charset="utf-8" /></head><body style="font:normal normal 11px Arial;color:gray;line-height:16px;padding:10px;background-color:white"><div style="font-size:14px;color:#505050">Please wait (<span id="time">10</span>) for <b>' + (self.config.name + ' v' + self.config.version) + '</b> application.</div>The application is waiting for: ' + keys + '.<script>var i=10;setInterval(function(){i--;if(i<0)return;document.getElementById("time").innerHTML=(i===0?"refreshing":i);if(i===0)window.location.reload();},1000);</script></body></html>', ENCODING);
/src/index.js-5946-	return self;
##############################################
/src/index.js-5997-	if (contentType === 'application/json')
/src/index.js:5998:		returnHeaders[RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-5999-	else
##############################################
/src/index.js-8466-					obj[name] = value.parseBoolean();
/src/index.js:8467:				else if (subtype === 'eval' || subtype === 'object' || subtype === 'array') {
/src/index.js-8468-					try {
##############################################
/src/index.js-11306- * @private
/src/index.js:11307: * @param {Object} value Value to eval.
/src/index.js-11308- * return {String} Returns empty string.
##############################################
/src/index.js-14224-	if (contentType === 'application/json')
/src/index.js:14225:		headers[RESPONSE_HEADER_CACHECONTROL] = 'private, no-cache, no-store, must-revalidate';
/src/index.js-14226-
##############################################
/src/builders.js-1232-		var type = obj[property];
/src/builders.js:1233:		var typeval = typeof(val);
/src/builders.js-1234-
/src/builders.js:1235:		if (typeval === 'function')
/src/builders.js-1236-			val = val();
##############################################
/src/builders.js-1308-
/src/builders.js:1309:					if (typeval === 'string') {
/src/builders.js-1310-						if (val)
/src/builders.js-1311-							tmp = val.trim().parseDate();
/src/builders.js:1312:					} else if (typeval === 'number')
/src/builders.js-1313-						tmp = new Date(val);
##############################################
/src/builders.js-1371-			tmp = val[j];
/src/builders.js:1372:			typeval = typeof(tmp);
/src/builders.js-1373-
##############################################
/src/builders.js-1436-
/src/builders.js:1437:					if (typeval === 'string') {
/src/builders.js-1438-						if (tmp)
/src/builders.js-1439-							tmp = tmp.trim().parseDate();
/src/builders.js:1440:					} else if (typeval === 'number')
/src/builders.js-1441-						tmp = new Date(tmp);
##############################################
/src/changes.txt-308-- fixed: F.responsePipe() --> problem with transmitted headers
/src/changes.txt:309:- fixed: evaluating of @{helpers.helper_name()}
/src/changes.txt-310-- fixed: HTML minification of UTF8 characters
##############################################
/src/changes.txt-404-- added: F.backup(filename, path, [callback], [filter]) --> backup some path to one file
/src/changes.txt:405:- added: F.restore(filename, target, [callback], [filter]) --> restore backup file (but not evaluating)
/src/changes.txt-406-- added: MailMessage supports custom headers `message.headers = { key: 'value' }`
##############################################
/src/changes.txt-582-
/src/changes.txt:583:- updated: (IMPORTANT): for evaluation multiple roles in routing (@role) framework validates only one role
/src/changes.txt-584-- updated: GZIP compression for static files (added .md, .json)
##############################################
/src/changes.txt-1076-- updated: utils.download(url, flags, [data], callback, cookies, headers, encoding, timeout)
/src/changes.txt:1077:- updated: framework.eval(string/url/function) - this function supports eval code from another URL
/src/changes.txt-1078-- updated: assertion testing (new features)
