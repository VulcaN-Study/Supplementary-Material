[
 {
  "id": 1,
  "file": "/src/src/android/com/ionicframework/cordova/webview/AndroidProtocolHandler.java",
  "filetype": "java",
  "search": "\\snew File",
  "match": "      if (path.contains(\"content://\")) {\n        String contentPath = path.replace(assetPath + \"/_file_/\", \"content://\");\n        return context.getContentResolver().openInputStream(Uri.parse(contentPath));\n      } else {\n        String filePath = path.replace(assetPath + \"/_file_/\", \"\");\n        return new FileInputStream(new File(filePath));\n      }\n    } else {\n      return context.getAssets().open(path, AssetManager.ACCESS_STREAMING);\n    }\n  }",
  "line": 36,
  "start": 31,
  "end": 42
 },
 {
  "id": 2,
  "file": "/src/src/android/com/ionicframework/cordova/webview/AndroidProtocolHandler.java",
  "filetype": "java",
  "search": "\\snew File",
  "match": "      return null;\n    }\n  }\n\n  public InputStream openFile(String filePath) throws IOException  {\n    File localFile = new File(filePath);\n    return new FileInputStream(localFile);\n  }\n\n  private static int getFieldId(Context context, String assetType, String assetName)\n    throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {",
  "line": 81,
  "start": 76,
  "end": 87
 },
 {
  "id": 3,
  "file": "/src/src/android/com/ionicframework/cordova/webview/AndroidProtocolHandler.java",
  "filetype": "java",
  "search": "\\snew File",
  "match": "    }\n  }\n\n  public InputStream openFile(String filePath) throws IOException  {\n    File localFile = new File(filePath);\n    return new FileInputStream(localFile);\n  }\n\n  private static int getFieldId(Context context, String assetType, String assetName)\n    throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\n    Class<?> d = context.getClassLoader()",
  "line": 82,
  "start": 77,
  "end": 88
 },
 {
  "id": 4,
  "file": "/src/src/android/com/ionicframework/cordova/webview/AndroidProtocolHandler.java",
  "filetype": "java",
  "search": "\\snew FileInputStream",
  "match": "      if (path.contains(\"content://\")) {\n        String contentPath = path.replace(assetPath + \"/_file_/\", \"content://\");\n        return context.getContentResolver().openInputStream(Uri.parse(contentPath));\n      } else {\n        String filePath = path.replace(assetPath + \"/_file_/\", \"\");\n        return new FileInputStream(new File(filePath));\n      }\n    } else {\n      return context.getAssets().open(path, AssetManager.ACCESS_STREAMING);\n    }\n  }",
  "line": 36,
  "start": 31,
  "end": 42
 },
 {
  "id": 5,
  "file": "/src/src/android/com/ionicframework/cordova/webview/AndroidProtocolHandler.java",
  "filetype": "java",
  "search": "\\snew FileInputStream",
  "match": "    }\n  }\n\n  public InputStream openFile(String filePath) throws IOException  {\n    File localFile = new File(filePath);\n    return new FileInputStream(localFile);\n  }\n\n  private static int getFieldId(Context context, String assetType, String assetName)\n    throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\n    Class<?> d = context.getClassLoader()",
  "line": 82,
  "start": 77,
  "end": 88
 },
 {
  "id": 6,
  "file": "/src/src/android/com/ionicframework/cordova/webview/IonicWebView.java",
  "filetype": "java",
  "search": "\\sexecute",
  "match": "public class IonicWebView extends CordovaPlugin  {\n\n  public static final String WEBVIEW_PREFS_NAME = \"WebViewSettings\";\n  public static final String CDV_SERVER_PATH = \"serverBasePath\";\n\n  public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n  \n    if (action.equals(\"setServerBasePath\")) {\n      final String path = args.getString(0);\n      cordova.getActivity().runOnUiThread(new Runnable() {\n        public void run() {",
  "line": 16,
  "start": 11,
  "end": 22
 },
 {
  "id": 7,
  "file": "/src/src/android/com/ionicframework/cordova/webview/WebViewLocalServer.java",
  "filetype": "java",
  "search": "\\sProcess",
  "match": "   * Attempt to retrieve the WebResourceResponse associated with the given <code>request</code>.\n   * This method should be invoked from within\n   * {@link android.webkit.WebViewClient#shouldInterceptRequest(android.webkit.WebView,\n   * android.webkit.WebResourceRequest)}.\n   *\n   * @param uri the request Uri to process.\n   * @return a response if the request URL had a matching handler, null if no handler was found.\n   */\n  public WebResourceResponse shouldInterceptRequest(Uri uri) {\n    PathHandler handler;\n    synchronized (uriMatcher) {",
  "line": 217,
  "start": 212,
  "end": 223
 }
]
