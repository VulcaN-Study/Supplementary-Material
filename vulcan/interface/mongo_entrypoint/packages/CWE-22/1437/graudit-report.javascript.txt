/src/node_modules/node-gyp/gyp/pylib/gyp/generator/gypd.py-25-general-purpose gyp pretty-printer; for that, you probably just want to
/src/node_modules/node-gyp/gyp/pylib/gyp/generator/gypd.py:26:run "pprint.pprint(eval(open('source.gyp').read()))", which will still strip
/src/node_modules/node-gyp/gyp/pylib/gyp/generator/gypd.py-27-comments but won't do all of the other things done to this module's output.
##############################################
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py-157-
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py:158:  Note that this is slower than eval() is.
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py-159-  """
##############################################
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py-217-    else:
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py:218:      build_file_data = eval(build_file_contents, {'__builtins__': None},
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py-219-                             None)
##############################################
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py-835-      if match['is_array']:
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py:836:        contents = eval(contents)
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py-837-        use_shell = False
##############################################
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py-1068-
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py:1069:      if eval(ast_code, {'__builtins__': None}, variables):
/src/node_modules/node-gyp/gyp/pylib/gyp/input.py-1070-        merge_dict = true_dict
##############################################
/src/node_modules/hosted-git-info/test/https-with-inline-auth.js-21-
/src/node_modules/hosted-git-info/test/https-with-inline-auth.js:22:  // insecure protocols
/src/node_modules/hosted-git-info/test/https-with-inline-auth.js-23-  verify('git://user:pass@github.com/111/222', 'git')
##############################################
/src/node_modules/hosted-git-info/test/github.js-25-
/src/node_modules/hosted-git-info/test/github.js:26:  // insecure protocols
/src/node_modules/hosted-git-info/test/github.js-27-  verify('git://github.com/111/222', 'git')
##############################################
/src/node_modules/hosted-git-info/git-host-info.js-4-  github: {
/src/node_modules/hosted-git-info/git-host-info.js:5:    // First two are insecure and generally shouldn't be used any more, but
/src/node_modules/hosted-git-info/git-host-info.js-6-    // they are still supported.
##############################################
/src/node_modules/request/request.js-175-    ciphers            : request.ciphers,
/src/node_modules/request/request.js:176:    rejectUnauthorized : request.rejectUnauthorized,
/src/node_modules/request/request.js-177-    secureOptions      : request.secureOptions,
##############################################
/src/node_modules/request/request.js-441-
/src/node_modules/request/request.js:442:  if (self.strictSSL === false) {
/src/node_modules/request/request.js:443:    self.rejectUnauthorized = false
/src/node_modules/request/request.js-444-  }
##############################################
/src/node_modules/request/request.js-833-  }
/src/node_modules/request/request.js:834:  if (typeof self.rejectUnauthorized !== 'undefined') {
/src/node_modules/request/request.js:835:    options.rejectUnauthorized = self.rejectUnauthorized
/src/node_modules/request/request.js-836-  }
##############################################
/src/node_modules/request/request.js-872-
/src/node_modules/request/request.js:873:    if (typeof options.rejectUnauthorized !== 'undefined') {
/src/node_modules/request/request.js-874-      if (poolKey) {
##############################################
/src/node_modules/request/request.js-876-      }
/src/node_modules/request/request.js:877:      poolKey += options.rejectUnauthorized
/src/node_modules/request/request.js-878-    }
##############################################
/src/node_modules/request/request.js-1062-  if (self.httpModule === https &&
/src/node_modules/request/request.js:1063:      self.strictSSL && (!response.hasOwnProperty('client') ||
/src/node_modules/request/request.js-1064-      !response.client.authorized)) {
##############################################
/src/node_modules/request/node_modules/har-validator/node_modules/bluebird/js/browser/bluebird.js-4685-    return obj;
/src/node_modules/request/node_modules/har-validator/node_modules/bluebird/js/browser/bluebird.js:4686:    eval(obj);
/src/node_modules/request/node_modules/har-validator/node_modules/bluebird/js/browser/bluebird.js-4687-}
##############################################
/src/node_modules/request/node_modules/har-validator/node_modules/bluebird/js/main/util.js-176-    return obj;
/src/node_modules/request/node_modules/har-validator/node_modules/bluebird/js/main/util.js:177:    eval(obj);
/src/node_modules/request/node_modules/har-validator/node_modules/bluebird/js/main/util.js-178-}
##############################################
/src/node_modules/request/README.md-757-- `proxy` - An HTTP proxy to be used. Supports proxy Auth with Basic Auth, identical to support for the `url` parameter (by embedding the auth info in the `uri`)
/src/node_modules/request/README.md:758:- `strictSSL` - If `true`, requires SSL certificates be valid. **Note:** to use your own certificate authority, you need to specify an agent that was created with that CA as an option.
/src/node_modules/request/README.md-759-- `agentOptions` - Object containing user agent options. See documentation above. **Note:** [see tls API doc for TLS/SSL options](http://nodejs.org/api/tls.html#tls_tls_connect_options_callback).
##############################################
/src/node_modules/request/CHANGELOG.md-24-- [#1468](https://github.com/request/request/pull/1468) Re-enable io.js/node 0.12 build (@simov, @BBB)
/src/node_modules/request/CHANGELOG.md:25:- [#1442](https://github.com/request/request/pull/1442) Fixed the issue with strictSSL tests on  0.12 & io.js by explicitly setting a cipher that matches the cert. (@BBB, @nicolasmccurdy, @simov, @0x4139)
/src/node_modules/request/CHANGELOG.md-26-- [#1460](https://github.com/request/request/pull/1460) localAddress or proxy config is lost when redirecting (@simov, @0x4139)
##############################################
/src/node_modules/request/CHANGELOG.md-352-- [#502](https://github.com/request/request/pull/502) Fix POST (and probably other) requests that are retried after 401 Unauthorized (@nylen)
/src/node_modules/request/CHANGELOG.md:353:- [#508](https://github.com/request/request/pull/508) Honor the .strictSSL option when using proxies (tunnel-agent) (@jhs)
/src/node_modules/request/CHANGELOG.md-354-- [#512](https://github.com/request/request/pull/512) Make password optional to support the format: http://username@hostname/ (@pajato1)
##############################################
/src/node_modules/request/CHANGELOG.md-456-- [#81](https://github.com/request/request/pull/81) Enhance redirect handling (@danmactough)
/src/node_modules/request/CHANGELOG.md:457:- [#78](https://github.com/request/request/pull/78) Don't try to do strictSSL for non-ssl connections (@isaacs)
/src/node_modules/request/CHANGELOG.md-458-- [#76](https://github.com/request/request/pull/76) Bug when a request fails and a timeout is set (@Marsup)
/src/node_modules/request/CHANGELOG.md-459-- [#70](https://github.com/request/request/pull/70) add test script to package.json (@isaacs)
/src/node_modules/request/CHANGELOG.md:460:- [#73](https://github.com/request/request/pull/73) Fix #71 Respect the strictSSL flag (@isaacs)
/src/node_modules/request/CHANGELOG.md-461-- [#69](https://github.com/request/request/pull/69) Flatten chunked requests properly (@isaacs)
##############################################
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/test_parse.js-12-    try {
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/test_parse.js:13:      var z = eval('(function(){"use strict"\nreturn ('+String(arg)+'\n)\n})()')
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/test_parse.js-14-    } catch(err) {
##############################################
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/test_parse.js-163-  try {
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/test_parse.js:164:    var z = eval(rnd)
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/test_parse.js-165-  } catch(err) {
##############################################
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/portable-json5-tests.yaml-38-# invalid json5 also goes to extra. Feel free to ignore this section if you
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/portable-json5-tests.yaml:39:# want to. Thus, eval(input) is a complete json5 parser, that should pass all
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/test/portable-json5-tests.yaml-40-# basic and advanced tests.
##############################################
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/docs/JSON5.md-34-```javascript
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/docs/JSON5.md:35:eval('(function(){return ('+String(something)+'\n)\n})()')
/src/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/docs/JSON5.md-36-```
##############################################
/src/node_modules/npm-registry-client/lib/initialize.js-22-    localAddress: this.config.proxy.localAddress,
/src/node_modules/npm-registry-client/lib/initialize.js:23:    strictSSL: this.config.ssl.strict,
/src/node_modules/npm-registry-client/lib/initialize.js-24-    cert: this.config.ssl.certificate,
##############################################
/src/node_modules/npm-registry-client/lib/initialize.js-63-        localAddress: config.proxy.localAddress,
/src/node_modules/npm-registry-client/lib/initialize.js:64:        rejectUnauthorized: config.ssl.strict,
/src/node_modules/npm-registry-client/lib/initialize.js-65-        ca: config.ssl.ca,
##############################################
/src/node_modules/npm-registry-client/test/initialize.js-18-  t.equal(options.localAddress, undefined, 'localAddress has no default value')
/src/node_modules/npm-registry-client/test/initialize.js:19:  t.equal(options.strictSSL, true, 'SSL is strict by default')
/src/node_modules/npm-registry-client/test/initialize.js-20-
