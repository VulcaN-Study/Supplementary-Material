/src/README.md-126-```js
/src/README.md:127:fs.createReadStream('my-tarball.tgz').pipe(
/src/README.md-128-  tar.x({
##############################################
/src/README.md-146-```js
/src/README.md:147:fs.createReadStream('my-tarball.tgz')
/src/README.md-148-  .pipe(tar.t())
##############################################
/src/README.md-929-
/src/README.md:930:### tar.Pax.parse(string, extended, global)
/src/README.md-931-
##############################################
/src/lib/unpack.js-152-      if (path.win32.isAbsolute(p)) {
/src/lib/unpack.js:153:        const parsed = path.win32.parse(p)
/src/lib/unpack.js-154-        this.warn('stripping ' + parsed.root + ' from absolute path', p)
##############################################
/src/lib/unpack.js-160-    if (this.win32) {
/src/lib/unpack.js:161:      const parsed = path.win32.parse(entry.path)
/src/lib/unpack.js-162-      entry.path = parsed.root === '' ? wc.encode(entry.path)
##############################################
/src/lib/unpack.js-373-        } else
/src/lib/unpack.js:374:          fs.unlink(entry.absolute, er => this[MAKEFS](er, entry))
/src/lib/unpack.js-375-      })
##############################################
/src/lib/write-entry.js-56-      // so we only need to test this one to get both
/src/lib/write-entry.js:57:      const parsed = path.win32.parse(p)
/src/lib/write-entry.js-58-      this.warn('stripping ' + parsed.root + ' from absolute path', p)
##############################################
/src/lib/write-entry.js-194-  [OPENFILE] () {
/src/lib/write-entry.js:195:    fs.open(this.absolute, 'r', (er, fd) => {
/src/lib/write-entry.js-196-      if (er)
##############################################
/src/lib/write-entry.js-331-    if (path.isAbsolute(this.path) && !this.preservePaths) {
/src/lib/write-entry.js:332:      const parsed = path.parse(this.path)
/src/lib/write-entry.js-333-      this.warn(
##############################################
/src/lib/replace.js-162-        flag = 'w+'
/src/lib/replace.js:163:        return fs.open(opt.file, flag, onopen)
/src/lib/replace.js-164-      }
##############################################
/src/lib/replace.js-185-    }
/src/lib/replace.js:186:    fs.open(opt.file, flag, onopen)
/src/lib/replace.js-187-  })
##############################################
/src/lib/list.js-62-  const mapHas = (file, r) => {
/src/lib/list.js:63:    const root = r || path.parse(file).root || '.'
/src/lib/list.js-64-    const ret = file === root ? false
##############################################
/src/lib/extract.js-47-  const mapHas = (file, r) => {
/src/lib/extract.js:48:    const root = r || path.parse(file).root || '.'
/src/lib/extract.js-49-    const ret = file === root ? false
##############################################
/src/lib/mkdir.js-107-      else if (unlink)
/src/lib/mkdir.js:108:        fs.unlink(part, er => {
/src/lib/mkdir.js-109-          if (er)
##############################################
/src/lib/parse.js-238-      case 'OldExtendedHeader':
/src/lib/parse.js:239:        this[EX] = Pax.parse(this[META], this[EX], false)
/src/lib/parse.js-240-        break
##############################################
/src/lib/parse.js-242-      case 'GlobalExtendedHeader':
/src/lib/parse.js:243:        this[GEX] = Pax.parse(this[META], this[GEX], true)
/src/lib/parse.js-244-        break
##############################################
/src/lib/header.js-185-  let ret
/src/lib/header.js:186:  const root = pathModule.parse(p).root || '.'
/src/lib/header.js-187-
##############################################
/src/lib/header.js-228-const decNumber = (buf, off, size) =>
/src/lib/header.js:229:  buf[off] & 0x80 ? large.parse(buf.slice(off, off + size))
/src/lib/header.js-230-    : decSmallNumber(buf, off, size)
