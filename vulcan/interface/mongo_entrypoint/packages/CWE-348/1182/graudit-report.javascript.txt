/src/dist/ses.cjs.js-655-  document.body.appendChild(iframe);
/src/dist/ses.cjs.js:656:  const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);
/src/dist/ses.cjs.js-657-
/src/dist/ses.cjs.js-658-  // We keep the iframe attached to the DOM because removing it
/src/dist/ses.cjs.js:659:  // causes its global object to lose intrinsics, its eval()
/src/dist/ses.cjs.js-660-  // function to evaluate code, etc.
##############################################
/src/dist/ses.cjs.js-707-  const unsafeGlobal = getNewUnsafeGlobal();
/src/dist/ses.cjs.js:708:  unsafeGlobal.eval(repairAccessorsShim);
/src/dist/ses.cjs.js:709:  unsafeGlobal.eval(repairFunctionsShim);
/src/dist/ses.cjs.js-710-  return createUnsafeRec(unsafeGlobal, allShims);
##############################################
/src/dist/ses.cjs.js-879-
/src/dist/ses.cjs.js:880:  // This flag allow us to determine if the eval() call is an done by the
/src/dist/ses.cjs.js-881-  // realm's code or if it is user-land invocation, so we can react differently.
##############################################
/src/dist/ses.cjs.js-1141-        'use strict';
/src/dist/ses.cjs.js:1142:        return eval(arguments[0]);
/src/dist/ses.cjs.js-1143-      };
##############################################
/src/dist/ses.cjs.js-1173-    // We use the the concise method syntax to create an eval without a
/src/dist/ses.cjs.js:1174:    // [[Construct]] behavior (such that the invocation "new eval()" throws
/src/dist/ses.cjs.js-1175-    // TypeError: eval is not a constructor"), but which still accepts a
##############################################
/src/dist/ses.cjs.js-1177-    const safeEval = {
/src/dist/ses.cjs.js:1178:      eval(src) {
/src/dist/ses.cjs.js-1179-        src = `${src}`;
##############################################
/src/dist/ses.cjs.js-1459-
/src/dist/ses.cjs.js:1460:  // Creating the realmRec provides the global object, eval() and Function()
/src/dist/ses.cjs.js-1461-  // to the realm.
##############################################
/src/dist/ses.cjs.js-1475- * A compartment shares the intrinsics of its root realm. Here, only a
/src/dist/ses.cjs.js:1476: * realmRec is necessary to hold the global object, eval() and Function().
/src/dist/ses.cjs.js-1477- */
##############################################
/src/dist/ses.umd.js-655-    document.body.appendChild(iframe);
/src/dist/ses.umd.js:656:    const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);
/src/dist/ses.umd.js-657-
/src/dist/ses.umd.js-658-    // We keep the iframe attached to the DOM because removing it
/src/dist/ses.umd.js:659:    // causes its global object to lose intrinsics, its eval()
/src/dist/ses.umd.js-660-    // function to evaluate code, etc.
##############################################
/src/dist/ses.umd.js-707-    const unsafeGlobal = getNewUnsafeGlobal();
/src/dist/ses.umd.js:708:    unsafeGlobal.eval(repairAccessorsShim);
/src/dist/ses.umd.js:709:    unsafeGlobal.eval(repairFunctionsShim);
/src/dist/ses.umd.js-710-    return createUnsafeRec(unsafeGlobal, allShims);
##############################################
/src/dist/ses.umd.js-879-
/src/dist/ses.umd.js:880:    // This flag allow us to determine if the eval() call is an done by the
/src/dist/ses.umd.js-881-    // realm's code or if it is user-land invocation, so we can react differently.
##############################################
/src/dist/ses.umd.js-1141-        'use strict';
/src/dist/ses.umd.js:1142:        return eval(arguments[0]);
/src/dist/ses.umd.js-1143-      };
##############################################
/src/dist/ses.umd.js-1173-      // We use the the concise method syntax to create an eval without a
/src/dist/ses.umd.js:1174:      // [[Construct]] behavior (such that the invocation "new eval()" throws
/src/dist/ses.umd.js-1175-      // TypeError: eval is not a constructor"), but which still accepts a
##############################################
/src/dist/ses.umd.js-1177-      const safeEval = {
/src/dist/ses.umd.js:1178:        eval(src) {
/src/dist/ses.umd.js-1179-          src = `${src}`;
##############################################
/src/dist/ses.umd.js-1459-
/src/dist/ses.umd.js:1460:    // Creating the realmRec provides the global object, eval() and Function()
/src/dist/ses.umd.js-1461-    // to the realm.
##############################################
/src/dist/ses.umd.js-1475-   * A compartment shares the intrinsics of its root realm. Here, only a
/src/dist/ses.umd.js:1476:   * realmRec is necessary to hold the global object, eval() and Function().
/src/dist/ses.umd.js-1477-   */
##############################################
/src/dist/ses.esm.js-651-  document.body.appendChild(iframe);
/src/dist/ses.esm.js:652:  const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);
/src/dist/ses.esm.js-653-
/src/dist/ses.esm.js-654-  // We keep the iframe attached to the DOM because removing it
/src/dist/ses.esm.js:655:  // causes its global object to lose intrinsics, its eval()
/src/dist/ses.esm.js-656-  // function to evaluate code, etc.
##############################################
/src/dist/ses.esm.js-703-  const unsafeGlobal = getNewUnsafeGlobal();
/src/dist/ses.esm.js:704:  unsafeGlobal.eval(repairAccessorsShim);
/src/dist/ses.esm.js:705:  unsafeGlobal.eval(repairFunctionsShim);
/src/dist/ses.esm.js-706-  return createUnsafeRec(unsafeGlobal, allShims);
##############################################
/src/dist/ses.esm.js-875-
/src/dist/ses.esm.js:876:  // This flag allow us to determine if the eval() call is an done by the
/src/dist/ses.esm.js-877-  // realm's code or if it is user-land invocation, so we can react differently.
##############################################
/src/dist/ses.esm.js-1137-        'use strict';
/src/dist/ses.esm.js:1138:        return eval(arguments[0]);
/src/dist/ses.esm.js-1139-      };
##############################################
/src/dist/ses.esm.js-1169-    // We use the the concise method syntax to create an eval without a
/src/dist/ses.esm.js:1170:    // [[Construct]] behavior (such that the invocation "new eval()" throws
/src/dist/ses.esm.js-1171-    // TypeError: eval is not a constructor"), but which still accepts a
##############################################
/src/dist/ses.esm.js-1173-    const safeEval = {
/src/dist/ses.esm.js:1174:      eval(src) {
/src/dist/ses.esm.js-1175-        src = `${src}`;
##############################################
/src/dist/ses.esm.js-1455-
/src/dist/ses.esm.js:1456:  // Creating the realmRec provides the global object, eval() and Function()
/src/dist/ses.esm.js-1457-  // to the realm.
##############################################
/src/dist/ses.esm.js-1471- * A compartment shares the intrinsics of its root realm. Here, only a
/src/dist/ses.esm.js:1472: * realmRec is necessary to hold the global object, eval() and Function().
/src/dist/ses.esm.js-1473- */
