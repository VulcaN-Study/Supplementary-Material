/src/mmmk.js-70-
/src/mmmk.js:71:			var new_model = eval('('+ model +')');
/src/mmmk.js-72-			for( var i in new_model.metamodels )
##############################################
/src/mmmk.js-758-				exceptions it may throw... escaped newlines if any are unescaped */
/src/mmmk.js:759:			function safe_eval(code)
/src/mmmk.js-760-			{
##############################################
/src/mmmk.js-763-				{
/src/mmmk.js:764:					return eval(code);
/src/mmmk.js-765-				}
##############################################
/src/mmmk.js-774-
/src/mmmk.js:775:			var res = safe_eval(code);
/src/mmmk.js-776-
##############################################
/src/mmmk.js-1823-		{
/src/mmmk.js:1824:			this.metamodels[name] = eval('('+ mm +')');
/src/mmmk.js-1825-			if( ! _utils.contains(this.model.metamodels,name) )
##############################################
/src/mmmk.js-1865-			{
/src/mmmk.js:1866:				var _new_model = eval('('+ new_model +')');
/src/mmmk.js-1867-
##############################################
/src/mmmk.js-1883-			{
/src/mmmk.js:1884:				this.model = eval('('+ new_model +')');
/src/mmmk.js-1885-				for( var mm in this.metamodels )
##############################################
/src/csworker.js-485-                                    var csm = hitchhiker['csm'];
/src/csworker.js:486:                                    var _csm = eval('(' + csm + ')');
/src/csworker.js-487-                                    if (step['insert']) {
##############################################
/src/csworker.js-1330-                              {
/src/csworker.js:1331:                                  mData = eval('('+_mData+')');
/src/csworker.js-1332-                                  return __successContinuable(mData);
##############################################
/src/csworker.js-2245-		1. setup a very stripped down version of _mmmk.__runDesignerCode() with
/src/csworker.js:2246:		  	getAttr() and safe_eval() (see _mmmk.__runDesignerCode() for more 
/src/csworker.js-2247-			elaborate comments) 
##############################################
/src/csworker.js-2264-			}
/src/csworker.js:2265:			function safe_eval(code)
/src/csworker.js-2266-			{
/src/csworker.js:2267:				try			{return eval(code);}
/src/csworker.js-2268-				catch(err)	{return {'$err':err};}
##############################################
/src/csworker.js-2270-
/src/csworker.js:2271:			return safe_eval(parser);
/src/csworker.js-2272-		},
##############################################
/src/__worker.js-192-	 					 {
/src/__worker.js:193:							 respData = eval('('+respData+')');
/src/__worker.js-194-							 respData = 
##############################################
/src/client/data_utils.js-281-						bm,
/src/client/data_utils.js:282:						eval('('+resp+')'),
/src/client/data_utils.js-283-						__BUTTON_TOOLBAR);					
##############################################
/src/client/behavioursc_inputbar.js-141-		// Stop gap measure until the BNF is implemented
/src/client/behavioursc_inputbar.js:142:		eval( $('#mainInput').value );
/src/client/behavioursc_inputbar.js-143-		$('#mainInput').value = "";
##############################################
/src/client/http_utils.js-221-				'mms':utils.keys(__loadedToolbars).filter(__isIconMetamodel)};
/src/client/http_utils.js:222:		try			{eval(code); return {};}
/src/client/http_utils.js-223-		catch(err)	
##############################################
/src/client/query_response.js-317-			{
/src/client/query_response.js:318:				var data = eval('('+step['mm']+')');
/src/client/query_response.js-319-	 			GUIUtils.setupAndShowToolbar(
##############################################
/src/client/query_response.js-354-				__loadedToolbars[step['name']+'.metamodel'] = 
/src/client/query_response.js:355:					eval('('+step['mm']+')');
/src/client/query_response.js-356-
##############################################
/src/mt/ptcal/compiler.py-388-                            attr)
/src/mt/ptcal/compiler.py:389:                        return self._dcal.eval(code)
/src/mt/ptcal/compiler.py-390-                    except Exception as e :
##############################################
/src/mt/ptcal/compiler.py-423-                            journal=journal)
/src/mt/ptcal/compiler.py:424:                        self._dcal.eval(code)
/src/mt/ptcal/compiler.py-425-                        return journal
##############################################
/src/mt/ptcal/compiler.py-454-                            ex)
/src/mt/ptcal/compiler.py:455:                        return self._dcal.eval(code)
/src/mt/ptcal/compiler.py-456-                    except Exception as e :
##############################################
/src/mt/ptcal/dcal.py-47-		its output '''
/src/mt/ptcal/dcal.py:48:	def eval(self,code) :
/src/mt/ptcal/dcal.py:49:		return self._execContext.eval(code)
/src/mt/ptcal/dcal.py-50-
##############################################
/src/mt/ptcal/dcal.py-94-		evaluate a string of javascript code and return its output '''
/src/mt/ptcal/dcal.py:95:	def eval(self,code) :
/src/mt/ptcal/dcal.py-96-		return self._context.eval_script(code)
##############################################
/src/mt/ptcal/dcal.py-134-		NOTE:: before evaluating, we clear past results, if any '''
/src/mt/ptcal/dcal.py:135:	def eval(self,code) :
/src/mt/ptcal/dcal.py-136-		if 'result' in self._context :
##############################################
/src/asworker.js-92-  						{
/src/asworker.js:93:							try 			{prefs = eval('('+prefs+')');}
/src/asworker.js-94-							catch(err)	{
##############################################
/src/httpwsd.js-541-									_fs.writeFile(
/src/httpwsd.js:542:										destdir+tmpzip,eval('('+reqData+')'),
/src/httpwsd.js-543-										'binary',
##############################################
/src/httpwsd.js-696-									 				undefined : 
/src/httpwsd.js:697:													eval('('+reqData+')')),
/src/httpwsd.js-698-								 'uriData':url['query'],
