/src/README.md-14-
/src/README.md:15:    var documents = YAML.parse('Hello world!');
/src/README.md-16-    var data = YAML.stringify({ fancy: ['object', 'structure'] });
##############################################
/src/README.md-19-
/src/README.md:20:    YAML.readFile('myfile.yml', function(error, documents) {
/src/README.md-21-      /* ... */
##############################################
/src/README.md-25-    var doc2 = { another: 'doc' };
/src/README.md:26:    YAML.writeFile('myfile.yml', doc1, doc2, function(error) {
/src/README.md-27-      /* ... */
##############################################
/src/testutil.js-47-  var data = YAML.stringify.apply(null, input),
/src/testutil.js:48:      output = YAML.parse(data);
/src/testutil.js-49-  t.ok(
##############################################
/src/deps/yaml/src/aclocal.m4-3482-}
/src/deps/yaml/src/aclocal.m4:3483:lt__PROGRAM__LTX_preloaded_symbols[[]] =
/src/deps/yaml/src/aclocal.m4-3484-{
##############################################
/src/deps/yaml/src/aclocal.m4-3493-#ifdef FREEBSD_WORKAROUND
/src/deps/yaml/src/aclocal.m4:3494:static const void *lt_preloaded_setup() {
/src/deps/yaml/src/aclocal.m4:3495:  return lt__PROGRAM__LTX_preloaded_symbols;
/src/deps/yaml/src/aclocal.m4-3496-}
##############################################
/src/deps/yaml/src/aclocal.m4-4257-  # rely on this symbol name, it's probably fine to never include it in
/src/deps/yaml/src/aclocal.m4:4258:  # preloaded symbol tables.
/src/deps/yaml/src/aclocal.m4-4259-  # Exclude shared library initialization/finalization symbols.
##############################################
/src/deps/yaml/src/aclocal.m4-5249-_LT_TAGDECL([], [exclude_expsyms], [1],
/src/deps/yaml/src/aclocal.m4:5250:    [Symbols that should not be listed in the preloaded symbols])
/src/deps/yaml/src/aclocal.m4-5251-_LT_TAGDECL([], [include_expsyms], [1],
##############################################
/src/deps/yaml/src/aclocal.m4-7813-m4_define([lt_combine],
/src/deps/yaml/src/aclocal.m4:7814:[m4_if(m4_eval([$# > 3]), [1],
/src/deps/yaml/src/aclocal.m4-7815-       [m4_pushdef([_Lt_sep], [m4_define([_Lt_sep], m4_defn([lt_car]))])]]dnl
##############################################
/src/deps/yaml/src/config/ltmain.sh-390-# which are still active within double quotes backslashified.
/src/deps/yaml/src/config/ltmain.sh:391:func_quote_for_eval ()
/src/deps/yaml/src/config/ltmain.sh-392-{
##############################################
/src/deps/yaml/src/config/ltmain.sh-445-# is given, then evaluate it.
/src/deps/yaml/src/config/ltmain.sh:446:func_show_eval ()
/src/deps/yaml/src/config/ltmain.sh-447-{
##############################################
/src/deps/yaml/src/config/ltmain.sh-1561-  -dlopen FILE      \`-dlpreopen' FILE if it cannot be dlopened at runtime
/src/deps/yaml/src/config/ltmain.sh:1562:  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols
/src/deps/yaml/src/config/ltmain.sh-1563-  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)
##############################################
/src/deps/yaml/src/config/ltmain.sh-2445-extern $lt_dlsym_const lt_dlsymlist
/src/deps/yaml/src/config/ltmain.sh:2446:lt_${my_prefix}_LTX_preloaded_symbols[];
/src/deps/yaml/src/config/ltmain.sh-2447-$lt_dlsym_const lt_dlsymlist
/src/deps/yaml/src/config/ltmain.sh:2448:lt_${my_prefix}_LTX_preloaded_symbols[] =
/src/deps/yaml/src/config/ltmain.sh-2449-{\
##############################################
/src/deps/yaml/src/config/ltmain.sh-2465-#ifdef FREEBSD_WORKAROUND
/src/deps/yaml/src/config/ltmain.sh:2466:static const void *lt_preloaded_setup() {
/src/deps/yaml/src/config/ltmain.sh:2467:  return lt_${my_prefix}_LTX_preloaded_symbols;
/src/deps/yaml/src/config/ltmain.sh-2468-}
##############################################
/src/deps/yaml/src/config/ltmain.sh-2536-      # We keep going just in case the user didn't refer to
/src/deps/yaml/src/config/ltmain.sh:2537:      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe
/src/deps/yaml/src/config/ltmain.sh-2538-      # really was required.
##############################################
/src/deps/yaml/src/config/ltmain.sh-4089-    prefer_static_libs=no
/src/deps/yaml/src/config/ltmain.sh:4090:    preload=no
/src/deps/yaml/src/config/ltmain.sh-4091-    prev=
##############################################
/src/deps/yaml/src/config/ltmain.sh-4167-	dlfiles|dlprefiles)
/src/deps/yaml/src/config/ltmain.sh:4168:	  if test "$preload" = no; then
/src/deps/yaml/src/config/ltmain.sh-4169-	    # Add the symbol object into the linking commands.
##############################################
/src/deps/yaml/src/config/ltmain.sh-4171-	    func_append finalize_command " @SYMFILE@"
/src/deps/yaml/src/config/ltmain.sh:4172:	    preload=yes
/src/deps/yaml/src/config/ltmain.sh-4173-	  fi
##############################################
/src/deps/yaml/src/config/ltmain.sh-4275-		    else
/src/deps/yaml/src/config/ltmain.sh:4276:		      # If libtool objects are unsupported, then we need to preload.
/src/deps/yaml/src/config/ltmain.sh-4277-		      prev=dlprefiles
##############################################
/src/deps/yaml/src/config/ltmain.sh-4819-	      else
/src/deps/yaml/src/config/ltmain.sh:4820:		# If libtool objects are unsupported, then we need to preload.
/src/deps/yaml/src/config/ltmain.sh-4821-		prev=dlprefiles
##############################################
/src/deps/yaml/src/config/ltmain.sh-5276-	      # If there is no dlopen support or we're linking statically,
/src/deps/yaml/src/config/ltmain.sh:5277:	      # we need to preload.
/src/deps/yaml/src/config/ltmain.sh-5278-	      newdlprefiles="$newdlprefiles $deplib"
##############################################
/src/deps/yaml/src/config/ltmain.sh-5384-	    # If there is no dlname, no dlopen support or we're linking
/src/deps/yaml/src/config/ltmain.sh:5385:	    # statically, we need to preload.  We also need to preload any
/src/deps/yaml/src/config/ltmain.sh:5386:	    # dependent libraries so libltdl's deplib preloader doesn't
/src/deps/yaml/src/config/ltmain.sh-5387-	    # bomb out in the load deplibs phase.
##############################################
/src/deps/yaml/src/config/ltmain.sh-7328-
/src/deps/yaml/src/config/ltmain.sh:7329:	# Add any objects from preloaded convenience libraries
/src/deps/yaml/src/config/ltmain.sh-7330-	if test -n "$dlprefiles"; then
##############################################
/src/deps/yaml/src/config/ltmain.sh-7505-
/src/deps/yaml/src/config/ltmain.sh:7506:      test "$preload" = yes \
/src/deps/yaml/src/config/ltmain.sh-7507-        && test "$dlopen_support" = unknown \
##############################################
/src/deps/yaml/src/config/ltmain.sh-7892-	  oldobjs="$old_deplibs $non_pic_objects"
/src/deps/yaml/src/config/ltmain.sh:7893:	  if test "$preload" = yes && test -f "$symfileobj"; then
/src/deps/yaml/src/config/ltmain.sh-7894-	    oldobjs="$oldobjs $symfileobj"
##############################################
/src/deps/yaml/src/config/ltmain.sh-7912-
/src/deps/yaml/src/config/ltmain.sh:7913:	# Add any objects from preloaded convenience libraries
/src/deps/yaml/src/config/ltmain.sh-7914-	if test -n "$dlprefiles"; then
##############################################
/src/deps/yaml/src/config/config.guess-112- { test -n "$RANDOM" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir $tmp) ; } ||
/src/deps/yaml/src/config/config.guess:113: { tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir $tmp) && echo "Warning: creating insecure temp directory" >&2 ; } ||
/src/deps/yaml/src/config/config.guess-114- { echo "$me: cannot create a temporary directory in $TMPDIR" >&2 ; exit 1 ; } ;
##############################################
/src/deps/yaml/src/configure-5814-}
/src/deps/yaml/src/configure:5815:lt__PROGRAM__LTX_preloaded_symbols[] =
/src/deps/yaml/src/configure-5816-{
##############################################
/src/deps/yaml/src/configure-5825-#ifdef FREEBSD_WORKAROUND
/src/deps/yaml/src/configure:5826:static const void *lt_preloaded_setup() {
/src/deps/yaml/src/configure:5827:  return lt__PROGRAM__LTX_preloaded_symbols;
/src/deps/yaml/src/configure-5828-}
##############################################
/src/deps/yaml/src/configure-7924-  # rely on this symbol name, it's probably fine to never include it in
/src/deps/yaml/src/configure:7925:  # preloaded symbol tables.
/src/deps/yaml/src/configure-7926-  # Exclude shared library initialization/finalization symbols.
##############################################
/src/deps/yaml/src/configure-12860-
/src/deps/yaml/src/configure:12861:# Symbols that should not be listed in the preloaded symbols.
/src/deps/yaml/src/configure-12862-exclude_expsyms=$lt_exclude_expsyms
##############################################
/src/tests/badinput.js-18-
/src/tests/badinput.js:19:  YAML.readFile(testutil.inputPath('badinput'), function(err) {
/src/tests/badinput.js-20-    t.equal(err.message,
##############################################
/src/tests/api.js-16-  pos = 0;
/src/tests/api.js:17:  YAML.stream.parse('foo', handler);
/src/tests/api.js-18-
/src/tests/api.js-19-  pos = 0;
/src/tests/api.js:20:  YAML.stream.parse('foo', {
/src/tests/api.js-21-    onStreamStart: handler,
##############################################
/src/tests/api.js-64-
/src/tests/api.js:65:  var result = YAML.parse(input);
/src/tests/api.js-66-  t.ok(_.isEqual(result, expected), 'should be equal', {
##############################################
/src/tests/api.js-106-
/src/tests/api.js:107:  YAML.writeFile(file, input, function(error) {
/src/tests/api.js:108:    YAML.readFile(file, function(error, result) {
/src/tests/api.js-109-      fs.unlinkSync(file);
##############################################
/src/tests/api.js-124-
/src/tests/api.js:125:  YAML.writeFile(file, input, function(error) {
/src/tests/api.js-126-    var result = require(file);
##############################################
/src/index.js-19-//
/src/index.js:20://     var output = yaml.stream.parse(input, handler);
/src/index.js-21-//
##############################################
/src/index.js-37-
/src/index.js:38:  binding.parse(input, handler);
/src/index.js-39-};
##############################################
/src/index.js-253-  var documents = [];
/src/index.js:254:  YAML.stream.parse(input, parserHandler = {
/src/index.js-255-    onDocumentEnd: null,
##############################################
/src/index.js-318-
/src/index.js:319:  fs.readFile(filename, 'utf-8', function(err, data) {
/src/index.js-320-    if (err) {
##############################################
/src/index.js-326-    try {
/src/index.js:327:      documents = YAML.parse(data, tagHandlers);
/src/index.js-328-    }
##############################################
/src/index.js-340-  var data = fs.readFileSync(filename, 'utf-8');
/src/index.js:341:  return YAML.parse(data, tagHandlers);
/src/index.js-342-};
##############################################
/src/index.js-438-
/src/index.js:439:  fs.writeFile(filename, data, callback);
/src/index.js-440-};
